<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-07-18T05:50:12+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Cypress: a new kid on the E2E block</title><link href="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html" rel="alternate" type="text/html" title="Cypress: a new kid on the E2E block" /><published>2019-07-18T00:00:00+00:00</published><updated>2019-07-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/07/18/Cypress</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cypress&quot;&gt;Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison&quot;&gt;Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-cypress&quot;&gt;Setting up Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amazing-features&quot;&gt;Amazing features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Those of us familiar with E2E testing a user interface, we all know the struggle.
Not only coding with waits and timeouts but setups that were harder to manage especially when running it on a continuous integration platform.
Maintaining versions, network issues, browser support, …&lt;/p&gt;

&lt;p&gt;For as long as I can remember, there was one constant in this setup!
Selenium was always there.
No matter what framework you used, Nightwatch, Protractor, Gauge, Robot, …
Selenium was the man in the middle.
All I can remember from building a Selenium setup a few years ago, are all the difficulties and frustrations.
Communication was not working, versions were not matching, timeout issues due to network lag, ….
But still, Selenium was a dependency that was needed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/selenium-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Not that I am not grateful for Selenium and its team of developers and maintainers, because let’s be honest, what would we have done without it?
But now, ohh yeah, there’s a new kid in town.&lt;/p&gt;

&lt;h1 id=&quot;cypress&quot;&gt;Cypress&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser
~&lt;a target=&quot;\_blank&quot; href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cypress is aiming to provide its users with a bundled experience for writing end-to-end tests for web applications.
While lots of other frameworks (as mentioned above) are all interacting over a Selenium server,
for remote communication and by definition, running its tests outside of the browser, Cypress is executed inside the browser.
Therefore Cypress is executed in the same runtime as your application itself.
Because of this, Cypress has native access to every single object. The &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;-element, a &lt;code class=&quot;highlighter-rouge&quot;&gt;service worker&lt;/code&gt;, … .
Cypress does not need to send commands over-the-wire and can just access everything.&lt;/p&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Selenium&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cypress&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Debugging:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hard/Remote&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy/Access to everything/Nice tool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Speed:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Remote = slow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In browser = Fast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Headless:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Language support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java, Perl PHP, Python, Ruby, C#, Javascript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Browser support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Everything&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Only webkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;basic-architecture&quot;&gt;Basic Architecture&lt;/h2&gt;

&lt;p&gt;Cypress consists of a few different building blocks.
One of them is its own Nodejs process.
You can look at this as being a backend.
This backend then launches a browser window, sets up a proxy to this browser window and sets the domain to localhost.
The browser window has two iFrames inside.
One is for Cypress itself.
The second one will hold the application under test.
To make it possible to communicate with the application’s iFrame, it injects a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;-tag that also sets its domain to localhost.
Because now, both iFrames are running on ‘localhost’, it is possible to access everything of the application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/cypress-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The proxy is proxying all requests from the web application itself to its backend.
Because the proxy is part of the Cypress-setup, Cypress can act as the man-in-the-middle and spy on, mock or modify the requests and responses.&lt;/p&gt;

&lt;p&gt;Communication between the Cypress Nodejs-backend and the Cypress iFrame, that is running the tests, is through a websocket.&lt;/p&gt;

&lt;p&gt;There are a few downsides as seen in the comparison.
Because Cypress is running inside of the browser, the language is Javascript.
Cypress only supports Chrome so far. Although Cypress is working on supporting other browsers.
Today there is no way of testing in Safari, Ìnternet Explorer, Edge, …
Cypress tests are written using Mocha and Chai.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-cypress&quot;&gt;Setting Up Cypress&lt;/h1&gt;

&lt;h2 id=&quot;installing-cypress&quot;&gt;Installing Cypress&lt;/h2&gt;

&lt;p&gt;Installation of Cypress is really simple.
You can install it through Yarn:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or plain npm:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also install it globally.
This way you do not need a local &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to run Cypress and all Cypress commands can be run straight from the command line.&lt;/p&gt;

&lt;h2 id=&quot;running-cypress&quot;&gt;Running Cypress&lt;/h2&gt;

&lt;p&gt;Depending on how you just installed Cypress, you can run Cypress by:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;
of
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ $(npm bin)/cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or globally:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first positive surprise!
When opening Cypress for the first time, it notices that you haven’t run it before and it kindly scaffolds a &lt;code class=&quot;highlighter-rouge&quot;&gt;/cypress&lt;/code&gt; folder with examples into your project.
This way, you already have a configured &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; to start from.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime2.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, Cypress opens its own application.
This is kind of a backend application that will orchestrate the tests.
Running one of the tests, means that Cypress will open a second window, which is actually just a new browser window.
It will then inject itself into that window in one frame, and load the application under test in another frame.&lt;/p&gt;

&lt;h2 id=&quot;configuring-cypress&quot;&gt;Configuring Cypress&lt;/h2&gt;

&lt;p&gt;You can custom configure Cypress by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; file in the root of your project.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://demo-app.localtest.me/demo-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;integrationFolder&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testFiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**.spec.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mochawesome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporterOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportDir&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportFilename&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can always override these settings on the command-line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run --spec src/** -c baseUrl=http://localhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a full overview of the configuration options, just check out the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Options&quot; target=&quot;blank&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reporters&quot;&gt;Reporters&lt;/h2&gt;

&lt;p&gt;Just like other frameworks, Cypress lets you add custom reporters for the test results.
As you can see above, we’ve added &lt;code class=&quot;highlighter-rouge&quot;&gt;mochawesome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install it via Yarn:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add mochawesome &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then manually add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot; target=&quot;blank&quot;&gt;documentation&lt;/a&gt; for the configuration.&lt;/p&gt;

&lt;h2 id=&quot;cypress-and-typescript&quot;&gt;Cypress and TypeScript&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cypress ships with official type declarations for TypeScript. This allows you to write your tests in TypeScript. All that is required is a little bit of configuration. ~docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation itself is linking to some different examples.
You can read all about the setup &lt;a target=&quot;blank&quot; href=&quot;https://docs.cypress.io/guides/tooling/typescript-support.html&quot;&gt;here&lt;/a&gt;.
And you can also take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm package add-typescript-to-cypress&lt;/code&gt; &lt;a href=&quot;https://www.npmjs.com/package/@bahmutov/add-typescript-to-cypress&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writing-your-first-tests&quot;&gt;Writing your first tests&lt;/h2&gt;

&lt;p&gt;As shown above, you can configure the path to your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files.
In our case, we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;.
Cypress will go through that directory and show all the spec files when using Cypress in development mode.
When running Cypress command line to only run the tests, it will just run all those &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files and then create the report.&lt;/p&gt;

&lt;p&gt;In our small example we have an Angular demo app that has a material &lt;code class=&quot;highlighter-rouge&quot;&gt;sidenav&lt;/code&gt; with three links.
Dashboard, clients and products.
The latter two both have a material &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/demo-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s say we want to test our clients navigation and &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.
Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt; directory, in our case, named &lt;code class=&quot;highlighter-rouge&quot;&gt;clients.spec.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;reference types=&quot;Cypress&quot; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients page should have Clients as a title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.table-container-header h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should initially have 20 rows&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should show 10 rows when pagesize is set to 10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-option&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-your-first-tests&quot;&gt;Running your first tests&lt;/h2&gt;

&lt;p&gt;If you would now run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;.
Cypress will open itself, showing you your new &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file.
You can now run your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file by double clicking it, or click the ‘run all’ option on the top right of your Cypress application.&lt;/p&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file will trigger a reload/retest in your Cypress-environment.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/main-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;amazing-features&quot;&gt;Amazing features&lt;/h1&gt;

&lt;p&gt;The purpose of this post is not to provide you with some sample code, but trying to convince you to take a look at Cypress.
To do so, I’ll quickly go over some really nice features because besides the easy setup and nice main application, Cypress has much more to offer.&lt;/p&gt;

&lt;h2 id=&quot;debugging-with-cypress&quot;&gt;Debugging with Cypress&lt;/h2&gt;

&lt;p&gt;One of the hardest things when writing E2E tests is debugging.
Running tests over and over again, while logging everything to check what is going on, is now history.
Cypress injects itself in the same window as the application under test, so it has access to everything.
Everything, including the debugger.&lt;/p&gt;

&lt;p&gt;This means that you can actually debug your test code as you would debug the application itself.
Although using the debugger is not that straight forward, it’s a great help.
Check out out the documentation &lt;a href=&quot;https://docs.cypress.io/guides/guides/debugging.html#Using-debugger&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;snapshots&quot;&gt;Snapshots&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/snapshot.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Take a look at the image above.
As you can see, Cypress takes a snapshot at every stage of the test.
You can navigate through them later and see the snapshot at a specific time and even see the difference in the state of the application before a request and after its response when running &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR requests&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;network-accessibility&quot;&gt;Network accessibility&lt;/h2&gt;

&lt;p&gt;As mentioned above, Cypress can take snapshots before and after each &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR request&lt;/code&gt;.
Cypress knows what is going on under the hood because it is running in the same window.
This makes it easy to implement stubs and spies.&lt;/p&gt;

&lt;p&gt;A simple example for our use case would be intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;client-service&lt;/code&gt; calls and return mocked data.
To do so, Cypress needs to run a server.
This can be done by just running &lt;code class=&quot;highlighter-rouge&quot;&gt;cy.server()&lt;/code&gt;.
Next step is to define the route you want to listen on and attach new data to it.
Cypress enables this with its &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; configuration.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;**/*/api/client-service/**/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tatiana&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Velez&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;diam.dictum@Proin.net&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;626286135&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dumfries&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;694245&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;paged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unpaged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;numberOfElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;stub-clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/network-stub.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;screenshots-and-videos&quot;&gt;Screenshots and videos&lt;/h2&gt;

&lt;p&gt;Another cool embedded feature is the ability to capture screenshots or record videos.
Cypress comes with screenshot and video recording out of the box.
Screenshots always come in handy when trying to find a bug.
Cypress even lets you take a screenshot, manually, from within your code.
Before, we were always setting this up using ‘yet another plugin’ (and dependency).&lt;/p&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;/h1&gt;

&lt;p&gt;Running Cypress on a continuous integration platform is also pretty easy.
You just want Cypress to run the tests and not to open its Electron test manager for development.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run&lt;/code&gt; just does that.
Just append the other options you want to override from the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; and you are good to go.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress:ci&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/command-line.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/mochawesome.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Although there are still some downsides to this new player in the E2E testing field, such as only supporting JavaScript and Chrome, there are just too many positives to keep it on the sideline.
Cypress provides us with a new amazing test runner and manager. It strips all the hassles of previous setups and provides us with a real robust framework.
It is providing us with cool but effective features like the snapshot time travel, easy debugging, headful/headless mode for CI and more.&lt;/p&gt;

&lt;p&gt;Cypress is too good to not take a look at!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learning how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Continuous Integration" /><category term="E2E" /><category term="JavaScript" /><category term="Testing" /><category term="Selenium" /><category term="Cypress" /><summary type="html">Table of contents Intro Cypress Comparison Setting up Cypress Amazing features Continuous Integration Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/cypress/cypress-logo.png" /></entry><entry><title type="html">Fishbones for Tomorrow</title><link href="https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow.html" rel="alternate" type="text/html" title="Fishbones for Tomorrow" /><published>2019-07-16T00:00:00+00:00</published><updated>2019-07-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow.html">&lt;p&gt;For quite a few years now, I have been going steady with Japan, the birthplace of so many philosophies, teachings and practices preceding and gearing up to the Agile movement. 
This is how I came to discover the well-hidden connection between work and fish. 
In Eastern Asia, the carp or koi is a deeply symbolic and highly respected animal, the presence and/or representation of which is considered a placeholder for luck, prosperity and a long life. 
No surprise then, that the fish is sometimes used as a metaphor for good business practice and process improvement.&lt;/p&gt;

&lt;p&gt;Well, here is another piece of Japanese fish for you to fry.&lt;/p&gt;

&lt;h3 id=&quot;fish-that-were-yesterday&quot;&gt;Fish that were yesterday&lt;/h3&gt;

&lt;p&gt;Without any doubt, Kaoru Ishikawa 石川馨 (1915-1989) was one of the game changing Japanese organizational theorists of our time. 
With his near-contemporaries Noriaki Kano (of the famous Kano MVP and customer satisfaction model), W. Edwards Deming (of 14 points and PDCA cycle fame), and Hirotaka Takeuchi and Ikujiro Nonaka (who were the first to come up with SCRUM in ‘The New New Product Development Game’, 1986), Ishikawa sort of laid the foundations of organisational models as we know and use them today. 
Also, Ishikawa-sama is considered a key figure in the development of quality initiatives in Japan and elsewhere.&lt;/p&gt;

&lt;p&gt;As a baseline, Ishikawa had in mind to change the way people think about life, including work. 
His notion of organisation-wide quality control, cross-functional and cross-departmental, implied awareness of everybody always being one another’s supplier and customer, which in turn called for continued, multi-directional customer service. 
This meant that a customer would continue receiving service even after receiving the product. 
This service would extend across the organisation itself, infecting not just the work and the output but even the everyday lives of those involved.&lt;/p&gt;

&lt;p&gt;To this end, Ishikawa thought of a set of useful and relevant methods. 
One of these, and what Ishikawa is mostly famous for, is the fishbone diagram, a.k.a. the Ishikawa or cause-and-effect diagram, often used in the analysis of industrial processes.&lt;/p&gt;

&lt;p&gt;Most commonly, Ishikawa diagrams are created to brainstorm over the multiple causes for a specific current event or defect. 
The current status, default status, or, perhaps in most cases, the defect, is shown as the fish’s head, with the causes extending to the left as fishbones; the ribs branching off the backbone for major causes, with sub-branches for root-causes, up to as many levels as required, brainstormed or identified.
An example of a fishbone diagram is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sushi&quot; src=&quot;/img/fishbones-for-tomorrow/fishbone-example.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You could try doing fishbones at home with your children. 
They are a lot of fun to do – and they help your children understand that situations are mere results of a chain of previous events, and that nobody really is to blame for them.&lt;/p&gt;

&lt;p&gt;Fishbone structures with the head at the right side are beautiful – because they are in some way a reflection of evolution and natural selection. 
They can also be viewed as a representation of complexity, where multiple minute events, small circumstances and off-chance happenings, all contribute to ‘what is’, in the here and the now.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Fishbones&quot; src=&quot;/img/fishbones-for-tomorrow/fishbones.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;turning-around-the-arrow-of-time&quot;&gt;Turning around the arrow of time&lt;/h3&gt;

&lt;p&gt;Okay. 
This is all pretty useful of course – but somehow, sometimes, in my work as an Agile Coach, I have been coming across teams more keen on exploring ahead and discovering further possibilities and opportunities, than teams that keep looking backward. 
And recently, in such a case, I thought I might permit myself and the team I was working with to even meddle with the arrow of time.&lt;/p&gt;

&lt;p&gt;Kaoru Ishikawa-sama might not have approved, but I decided to use a fishbone diagram to focus on the future rather than digging up causes of a problem from the past.&lt;/p&gt;

&lt;p&gt;For future orientation, one might keep the fish with its head at the right side, now representing an envisioned state, and work out suggested pre-conditions – or one might turn the fish around altogether and make the head the starting point of an ever widening array of possibilities.&lt;/p&gt;

&lt;p&gt;In my practice, I have noticed that the cause-and-effect method is in fact a really powerful tool to facilitate teams in parallel thinking. 
After formulating a goal statement that everyone agrees on, defining the cause areas is a helpful step towards discovering shared and alternative trains of thought. 
But once these areas are clear, every participant makes a deep dive into their personal knowledge and experience with regard to the goal and tries to gather as many ideas as possible, in silence.
Then, one by one, the team members present their ideas while others detect and formulate connections, doubles and insights.&lt;/p&gt;

&lt;p&gt;This technique helps the team to orderly gather a myriad of ideas, and it really sets things in motion. 
Because from then onwards, with prioritisation and some concrete actions and owners, the fishbone forms the backbone for team improvement towards a self-defined goal.&lt;/p&gt;

&lt;h3 id=&quot;collaboration-is-a-whole-new-piece-of-fish&quot;&gt;Collaboration is a whole new piece of fish&lt;/h3&gt;

&lt;p&gt;For us, Agilists and assorted kindred souls, the virtues of thinking and making stuff together are obvious. 
After all, there is hardly an approach in the Agile framework where co-creation is not written into the very DNA of who we are and what we do.&lt;/p&gt;

&lt;p&gt;Does it need saying that being out in the world hunting for appropriate liberating structures permitting cooperation and collaboration has become a second nature for me?&lt;/p&gt;

&lt;p&gt;It could be for you, too. 
Think of this: when turning around the arrow of time is permitted, if it facilitates working together - then everything else is permitted too, all the way up to imagining a world upside down.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sushi&quot; src=&quot;/img/fishbones-for-tomorrow/sushi.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;credit&quot;&gt;Credit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Artwork in the main image by &lt;a href=&quot;http://heatherfortner.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Heather Fortner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fishbone example taken from &lt;a href=&quot;https://www.24point0.com/powerpoint-business-templates/applications-fishbone-diagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;24point0.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Agile Coaching" /><category term="Liberating Structures" /><category term="Root Cause Analysis" /><category term="Powerful Techniques" /><summary type="html">For quite a few years now, I have been going steady with Japan, the birthplace of so many philosophies, teachings and practices preceding and gearing up to the Agile movement. This is how I came to discover the well-hidden connection between work and fish. In Eastern Asia, the carp or koi is a deeply symbolic and highly respected animal, the presence and/or representation of which is considered a placeholder for luck, prosperity and a long life. No surprise then, that the fish is sometimes used as a metaphor for good business practice and process improvement.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/fishbones-for-tomorrow/main-image.jpg" /></entry><entry><title type="html">Spring IO 2019</title><link href="https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019.html" rel="alternate" type="text/html" title="Spring IO 2019" /><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019.html">&lt;h1 id=&quot;spring-io-2019&quot;&gt;Spring IO 2019!&lt;/h1&gt;

&lt;p&gt;Spring I/O has become a yearly tradition for our JWorks consultants. 
With 21 colleagues we went to the conference in beautiful Barcelona on the 16th and 17th of May.&lt;/p&gt;

&lt;p&gt;The conference was held at the same location as last year, the &lt;strong&gt;Palau de Congressos de Barcelona&lt;/strong&gt;. 
As indicated last year, this year there was an overlap at the venue with the &lt;a href=&quot;http://www.automobilebarcelona.com/es/visitar&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Barcelona 
International Motor Show&lt;/a&gt;.
This gave us the opportunity to take a look at some beautiful cars during breaks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/venue.jpg&quot; alt=&quot;Venue Spring I/O 2019&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jworks.jpg&quot; alt=&quot;JWorks at Spring I/O 2019&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In this blog post we’ll talk about some of the presentations of this year but it is not a complete list.
There were so many interesting talks and all of them are available on &lt;a href=&quot;https://www.youtube.com/playlist?list=PLe6FX2SlkJdTlXfwer8JB-WGm-TEyIB2k&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us know if we missed anything by &lt;a href=&quot;https://github.com/ordina-jworks/ordina-jworks.github.io/issues/new&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;filing an issue&lt;/a&gt; or contacting us at &lt;a href=&quot;mailto:jworks@ordina.be&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;our general JWorks email&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#moving-from-imperative-to-reactive-by-paul-harris&quot;&gt;Moving from Imperative to Reactive by Paul Harris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration-management-with-kubernetes-a-spring-boot-use-case-by-nicolas-frankel&quot;&gt;Configuration Management with Kubernetes, a Spring Boot use case by Nicolas Frankel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-better-monoliths---modulithic-applications-with-spring-boot-by-oliver-drotbohm&quot;&gt;Building better monoliths - Modulithic Applications with Spring Boot by Oliver Drotbohm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cutting-edge-continuous-delivery-automated-canary-analysis-through-spring-based-spinnaker-by-andreas-evers&quot;&gt;Cutting-Edge Continuous Delivery: Automated Canary Analysis through Spring based Spinnaker by Andreas Evers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-java-modules-in-practice-with-spring-boot-by-jaap-coomans&quot;&gt;Using Java Modules in Practice with Spring Boot by Jaap Coomans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stream-processing-with-the-spring-framework-by-josh-long-and-viktor-gamov&quot;&gt;Stream Processing with the Spring Framework by Josh Long and Viktor Gamov&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-fast-is-spring-by-dave-syer&quot;&gt;How Fast is Spring by Dave Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kubernetes-andor-cloud-foundry---how-to-run-your-spring-boot-microservices-on-state-of-the-art-cloud-platforms-by-matthias-haeussler&quot;&gt;Kubernetes and/or Cloud Foundry - How to run your Spring Boot Microservices on state-of-the-art cloud platforms by Matthias Haeussler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#migrating-a-modern-spring-web-application-to-serverless-by-jeroen-sterken-and-wim-creuwels&quot;&gt;Migrating a modern spring web application to serverless by Jeroen Sterken and Wim Creuwels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing-spring-boot-applications-by-andy-wilkinson&quot;&gt;Testing Spring Boot Applications by Andy Wilkinson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-better-monoliths---modulithic-applications-with-spring-boot-by-oliver-drotbohm&quot;&gt;Building better monoliths - Modulithic Applications with Spring Boot by Oliver Drotbohm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-live-in-a-post-spring-cloud-netflix-world-by-olga-maciaszek-and-marcin-grzejszczak&quot;&gt;How to live in a post-Spring-Cloud-Netflix world by Olga Maciaszek and Marcin Grzejszczak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#event-driven-microservices-with-axon-and-spring-boot-excitingly-boring-by-allard-buijze&quot;&gt;Event-Driven Microservices with Axon and Spring Boot: excitingly boring by Allard Buijze&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-secure-your-spring-apps-with-keycloak-by-thomas-darimont&quot;&gt;How to secure your Spring apps with Keycloak by Thomas Darimont&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zero-downtime-migrations-with-spring-boot-by-alex-soto&quot;&gt;Zero Downtime Migrations with Spring Boot by Alex Soto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-1-talks--workshops&quot;&gt;Day 1: Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;h2 id=&quot;moving-from-imperative-to-reactive-by-paul-harris&quot;&gt;Moving from Imperative to Reactive by &lt;a href=&quot;https://twitter.com/twoseat&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Paul Harris&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Paul Harris&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/paul-harris.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When development started on the Cloud Foundry Java client, &lt;a href=&quot;https://projectreactor.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Reactor&lt;/a&gt; was also rebooted. 
Which means that they became their very first customer.&lt;/p&gt;

&lt;p&gt;Paul Harris says that he made all the mistakes you can make with reactive programming.
And now he’ll teach us how to avoid many of those.&lt;/p&gt;

&lt;p&gt;It al started with the &lt;strong&gt;&lt;a href=&quot;https://www.reactivemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive Manifesto&lt;/a&gt;&lt;/strong&gt; in 2013, which came up with four ideas for reactive applications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Responsive: it should feel as if the application is progressing, with for example, some feedback.&lt;/li&gt;
  &lt;li&gt;Resilient: if a particular part of you application fails, the remainder should be able to cope with that.&lt;/li&gt;
  &lt;li&gt;Elastic: make the most out of the resources available to the application.&lt;/li&gt;
  &lt;li&gt;Message-Driven: more message-driven than event-driven.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A manifesto is nice, but it does not compile.&lt;/p&gt;

&lt;p&gt;The next step was &lt;a href=&quot;https://www.reactive-streams.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive Streams&lt;/a&gt; which defined a set of interfaces for how we might deal with reactive streaming situations.
You can distinguish four interfaces:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Publisher&lt;/a&gt;: which emits ‘things’ or signals in other words.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Subscriber.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Subscriber&lt;/a&gt;: listens to those signals.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Subscription.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Subscription&lt;/a&gt;: after a subscriber subscribed to a publication a subscription is obtained.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Processor.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Processor&lt;/a&gt;: is a combination of a publisher and a subscriber that allows you to process data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The intention of Reactive Streams was that more useful real world implementations would follow.
One of these is Spring Reactor.
For a good introduction to Spring Reactor you can read our &lt;a href=&quot;https://ordina-jworks.github.io/reactive/2016/12/12/Reactive-Programming-Spring-Reactor.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;Spring Reactor contains various reactive frameworks, the three big ones are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/core/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Core&lt;/a&gt;: the basic provision.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/netty/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Netty&lt;/a&gt;: the reactive implementation of Netty.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/test/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Test&lt;/a&gt;: which is a bunch of really good useful methods for testing reactive streams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before Paul dove in the code he first explained &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mono&lt;/a&gt; and &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flux&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-mono&quot;&gt;a Mono&lt;/h3&gt;
&lt;p&gt;A Reactive Streams &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; that emits none or a single element.
&lt;img alt=&quot;a Mono&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/mono.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-flux&quot;&gt;a Flux&lt;/h3&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; that emits zero to N elements.
&lt;img alt=&quot;a Flux&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/flux.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paul showed us a demo of how to make a legacy Maven Spring application reactive.
In order to do so the following steps were taken:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add dependency to &lt;a href=&quot;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Boot Starter WebFlux&lt;/a&gt;.
This is the reactive variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;Web MVC&lt;/code&gt;. 
You shouldn’t need to change anything to keep it running unless you have used specific server features.&lt;/li&gt;
  &lt;li&gt;Convert the return of a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Convert return types for repository methods to &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Use the static method &lt;code class=&quot;highlighter-rouge&quot;&gt;.justOrEmpty&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; type in order to deal with an optional.&lt;/li&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.switchIfEmpty&lt;/code&gt; to return a proper error response.&lt;/li&gt;
      &lt;li&gt;In order to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;: use &lt;code class=&quot;highlighter-rouge&quot;&gt;fromIterable&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion is that reactive starts off complicated, but it will become easier when you have used it more often. 
It doesn’t have that many different methods you can use, so all in all it is quite easy to wrap your head around.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/vSHNBgY7MGA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-management-with-kubernetes-a-spring-boot-use-case-by-nicolas-frankel&quot;&gt;Configuration Management with Kubernetes, a Spring Boot use case by &lt;a href=&quot;https://twitter.com/nicolas_frankel&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nicolas Frankel&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Nicolas Frankel&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/nicolas-frankel.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nicolas Frankel is a Developer Advocate who works for &lt;a href=&quot;https://www.exoscale.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Exoscale&lt;/a&gt;, a European cloud hosting provider.&lt;/p&gt;

&lt;p&gt;In this session, he explained how to correctly configure each environment with its own parameters and settings.&lt;/p&gt;

&lt;p&gt;There are traditional configuration management tools such as Chef, Ansible, Puppet, … . 
But what is the point?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker images are and should always be immutable.&lt;/em&gt;&lt;br /&gt;
They should be configurable depending on the environment where we want to run our image in.
A Docker image should be able to run in different environments without problems, this is where &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubernetes&lt;/a&gt; comes in. 
Kubernetes can easily configure and parameterize each Docker image to run in different environments.&lt;/p&gt;

&lt;p&gt;One thing to remember is that you should make sure that you are working in the correct environment. 
Nicolas likes to add banners to the page to know in which environment you are currently working. 
For example, if you are working in the development environment, then you might want to show a big blue ‘Development’ banner, while in production you would prefer using a big, red, blinking one.&lt;/p&gt;

&lt;p&gt;This can all be done with the power of Kubernetes and immutable images. 
You can simply declare your environment variables in Kubernetes, then you can inject your environment in your Spring Boot application.&lt;/p&gt;

&lt;p&gt;There are three ways to access your environment variables in Spring Boot: profiles, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get started in Kubernetes, you have to create a few Kubernetes objects:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;(Optional) A &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Namespace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pod&lt;/a&gt; / &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the Deployment, you can give the arguments based on the environment that you want to spin up.
With a &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap&lt;/a&gt;, you can combine your environment variables that belong to each other (ex. database settings, AWS keys, …).
Once done defining the ConfigMap, you can import the ConfigMap in your Deployment declaration.&lt;/p&gt;

&lt;p&gt;What’s also very interesting is that you can declare your environment variables in a seperate Git repository with the use of an &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;initContainer&lt;/a&gt;. 
Of course, you can already do this with &lt;a href=&quot;https://spring.io/projects/spring-cloud-config&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Config&lt;/a&gt;. 
This is just an alternative on the Kubernetes side of configuration management.&lt;/p&gt;

&lt;p&gt;If you want to read more about Nicolas Frankel’s work, you can read his blog &lt;a href=&quot;https://blog.frankel.ch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can watch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/cTWu_DLqDt4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-better-monoliths---modulithic-applications-with-spring-boot-by-oliver-drotbohm&quot;&gt;Building better monoliths - Modulithic Applications with Spring Boot by &lt;a href=&quot;https://twitter.com/odrotbohm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oliver Drotbohm&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Oliver Drotbohm&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/oliver-drotbohm.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This talk caught our attention because we’re currently working at a client where we see some of the limitations of a microservice architecture. 
We are currently considering merging multiple of them into a more coarse-grained architecture containing multiple more ‘monolithic’ applications.&lt;/p&gt;

&lt;h3 id=&quot;microservice-architectures-also-have-disadvantages&quot;&gt;Microservice architectures also have disadvantages!&lt;/h3&gt;
&lt;p&gt;The talk starts off explaining some of the key differences between microservice and classic monoliths from an architectural point of view.&lt;/p&gt;

&lt;p&gt;The key takeaway here is that although there’s an advantage in terms of architecture degradation, it is harder to accidentally call another microservice than to call a method on another bounded context in a monolith.
This advantage comes at a cost, you lose compile-time safety which makes it harder to refactor than a monolith and it is harder to test the whole system.
These are especially disadvantageous in the early stages of the project when it is not clear yet what the correct bounded contexts are.&lt;/p&gt;

&lt;h3 id=&quot;the-modulith&quot;&gt;The Modulith&lt;/h3&gt;
&lt;p&gt;It might thus be useful to consider starting off with a well-structured monolith before considering evolving towards microservices.
But how do we avoid having our architecture degrade quickly?
Enter the modulith; a modulith is basically a monolith with multiple modules with well-defined dependencies in it.
To achieve this, Oliver demonstrated a ‘Moduliths’ tool that he’s in process off developing for the Spring framework.&lt;/p&gt;

&lt;p&gt;The idea is to use a package structure convention and enforce it with tests using Java’s Reflection.
In this package structure convention only (public members of) the root package of each module are accessible to other modules.
It’s considered the API package of that module while subpackages are considered internal. 
There’s more to this tool however; another problem of modularizing your application is that you typically want to do integration testing on the bounds of your modules.
The ‘Moduliths’ tool allows to bootstrap your module alone or in various configurations with specific module dependencies for integration testing. 
To top it off, there’s support to generate PlantUML diagrams for documentation purposes!&lt;/p&gt;

&lt;p&gt;For more details take a look at &lt;a href=&quot;https://github.com/odrotbohm/moduliths&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/odrotbohm/moduliths&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-approaches&quot;&gt;Alternative approaches&lt;/h3&gt;
&lt;p&gt;There are of course other ways to divide your application into modules and maintain the architecture:&lt;/p&gt;

&lt;h4 id=&quot;multiple-artifactsgradlemaven-modules&quot;&gt;Multiple artifacts(gradle/maven modules).&lt;/h4&gt;
&lt;p&gt;You might get an explosion of artifacts and it can become kind of verbose with all the configuration(&lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;) files.
Additionally, the artifacts are redundant since we’re planning on deploying everything together anyway.
There’s also no support to dynamically compose modules for tests since the dependencies are typically statically defined.&lt;/p&gt;

&lt;p&gt;This was actually the way we were considering handling it at our client.
The big advantage here in our eyes is that reflection can be avoided and the architecture can be verified at compile-time. 
The good news is that it is possible to combine it with the moduliths approach, 
which might be useful for integration testing.&lt;/p&gt;

&lt;h4 id=&quot;java9-module-system&quot;&gt;Java(9+) Module System&lt;/h4&gt;
&lt;p&gt;Could be used but it’s certainly not designed for this.
It definitely doesn’t have any support for dynamically composing your modules for testing.&lt;/p&gt;

&lt;h4 id=&quot;external-tools&quot;&gt;External tools&lt;/h4&gt;
&lt;p&gt;JQAssist, Sonargraph, jDepend… . 
These are powerful tools but usually run during the build making the feedback loop bigger.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h3&gt;

&lt;p&gt;The moduliths approach explained in this talk gives us a nice intermediate step towards a better architecture.
It alleviates some of the biggest problems with monoliths without introducing new ones using a more complex architecture like microservices!&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bVaiTPYlHFE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cutting-edge-continuous-delivery-automated-canary-analysis-through-spring-based-spinnaker-by-andreas-evers&quot;&gt;Cutting-Edge Continuous Delivery: Automated Canary Analysis through Spring based Spinnaker by &lt;a href=&quot;https://twitter.com/andreasevers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andreas Evers&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ultimate goal of continuous delivery is to deploy software quickly and automatically.
This can only be achieved if we are able to push new code without fear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andreas Evers&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/andreas-evers.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Throughout the years, Andreas saw that there are two opposing forces that are battling it out.
On the one hand there is the need for speed while on the other hand there is the need for confidence.
Like, updating in production without testing will give you great speed, but not much confidence.&lt;/p&gt;

&lt;p&gt;Microservices using integration tests on an acceptance environment might mean that you test an already obsolete topology because microservices can change that quickly.
Contract testing does not cover all the aspects needed to provide confidence as it does not test behaviour.&lt;/p&gt;

&lt;p&gt;A good alternative that Andreas talked about is Canary Analysis.
In order to do so let’s first introduce Spinnaker:
&lt;a href=&quot;https://www.spinnaker.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spinnaker&lt;/a&gt; is an open source, multi-cloud continuous delivery platform created at Netlfix.
It supports a lot of cloud environments like: OpenStack, AWS, Google Cloud, Microsoft Azure, Cloud Foundry, … 
Major contributors are Netflix, Google, Microsoft, Pivotal, …&lt;/p&gt;

&lt;p&gt;Under the hood, Spinnaker is composed of a bunch of Spring Boot microservices.
Another important component of Spinnaker is &lt;a href=&quot;https://github.com/spinnaker/halyard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Halyard&lt;/a&gt;: a bill of materials for the different microservices of Spinnaker, helping you with the deployment of Spinnaker.
Spinnaker also integrates well with your CI environments.&lt;/p&gt;

&lt;p&gt;Cloud deployments are often complex:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Different regions&lt;/li&gt;
  &lt;li&gt;Different accounts for your environments (production, acceptance, … )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teams want an easy road into the cloud, no complexity to deploy.
On the other hand easy rollbacks are important.
Spinnaker can help you with this!&lt;/p&gt;

&lt;p&gt;Various deployment strategies exist:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Red/Black&lt;/li&gt;
  &lt;li&gt;Rolling Red/Black&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.spinnaker.io/guides/user/canary/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Canary analysis&lt;/a&gt; 
&lt;img alt=&quot;deployment strategies&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/deployment-strategies.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 700px;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can define a pipeline to deploy into production:
&lt;img alt=&quot;pipeline tasks&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/pipeline-tasks.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For every stage you will have a series of steps.
Within every step you can define multiple tasks and every task has some operations which get executed.
A lot of these steps are very specific depending on the cloud which Spinnaker tends to abstract away.&lt;/p&gt;

&lt;p&gt;Spinnakers makes it possible to go fast but still do it safely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automated rollbacks&lt;/li&gt;
  &lt;li&gt;Deployment windows&lt;/li&gt;
  &lt;li&gt;Cluster locking&lt;/li&gt;
  &lt;li&gt;Traffic guards which are extra safeguards which can be configured&lt;/li&gt;
  &lt;li&gt;Manual judgements which makes use of the human “gut” feeling, which a computer does not have&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Andreas had a Rick &amp;amp; Morty demo application of which he had an old, already deployed version and a new version.
When doing canary, it is wise to startup a baseline, the old version, so that you have the solid baseline to measure against.
Spinnaker will also look at JVM metrics like memory, CPU, etc. 
But you can also define business metrics like startup time of the app, response times, …&lt;/p&gt;

&lt;p&gt;When the canary fails, it will just rollback and restore the previous version.
Spinnaker will decide if the canary fails by looking at the statistics it gathered.&lt;/p&gt;

&lt;p&gt;Canary testing allows you to test with real users and real production data.
At the same time it reduces the possible impact of your new version on end users.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/uB35m60GAZw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-java-modules-in-practice-with-spring-boot-by-jaap-coomans&quot;&gt;Using Java Modules in Practice with Spring Boot by &lt;a href=&quot;https://twitter.com/JaapCoomans&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jaap Coomans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jaap Coomans&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jaap-coomans.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;current-state&quot;&gt;Current State&lt;/h3&gt;
&lt;p&gt;First Jaap started with addressing the current state of the module system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Most tooling support is good (Maven, IDE, …)&lt;/li&gt;
  &lt;li&gt;In frameworks the adoption is very low&lt;/li&gt;
  &lt;li&gt;For developers it is even lower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can be summarized as: it’s like eating vegetables, we know it is healthy, we know its beneficial, but we don’t do it.&lt;/p&gt;

&lt;h3 id=&quot;using-modules&quot;&gt;Using modules?!&lt;/h3&gt;

&lt;p&gt;What challenges will you face when you want to migrate to modules.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Split packages: packages with the same name exposed by more than one module.&lt;/li&gt;
  &lt;li&gt;Automatic modules: plain JAR on your module path and thus interpreted as a module.
This exports and opens all packages, reads all other modules and it derives its module name from the filename
The problem with that is that you can only have one module with a certain name on your module path.
    &lt;ul&gt;
      &lt;li&gt;In Maven Central, 3.500 collisions are possible.&lt;/li&gt;
      &lt;li&gt;You can circumvent this with the Automatic-Module-Name in your manifest file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the demo application, Jaap used MongoDB.
There is a split package issue in the legacy mongo client, not with the new one, but Spring Data Mongo relies heavily on the legacy mongo client instead of the new one.&lt;/p&gt;

&lt;p&gt;In order to get started with modules, the first steps are just to minimize the problems you might encounter.&lt;/p&gt;
&lt;h4 id=&quot;step-1--2--3&quot;&gt;Step 1 + 2 + 3:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade your dependencies as this will minimize conflicts.&lt;/li&gt;
  &lt;li&gt;Use JDK11+.&lt;/li&gt;
  &lt;li&gt;Compile to  JDK11+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These first three steps are just to reduce the problems you might encounter.&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;Step 4:&lt;/h4&gt;
&lt;p&gt;Prepare the module structure within your code, so you can go from module to module.
Don’t start with one big module from the start.&lt;/p&gt;

&lt;h4 id=&quot;step-5&quot;&gt;Step 5:&lt;/h4&gt;
&lt;p&gt;Add module descriptors bottom-up.&lt;/p&gt;

&lt;p&gt;Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;module-info.java&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This first module has no external dependencies whatsoever making it very easy to define.
You only need to indicate what your are going to expose.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: you might need a newer version of the Maven Surefire Plugin; Jaap used version &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0-M3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a module which needs other modules, you will need to define a little bit more within the &lt;code class=&quot;highlighter-rouge&quot;&gt;module-info&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//requires com.sun.xml.bind;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaxb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xmlapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requires&lt;/code&gt;: Defines the modules that you need.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt;: The packages that you expose.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;opens&lt;/code&gt;: This means that this will make a module available for reflection (i.e. at runtime), that you might need for JAXB in this case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring is not yet modular, but they did define automatic module names in all of their JARs.&lt;/p&gt;

&lt;h4 id=&quot;step-6&quot;&gt;Step 6:&lt;/h4&gt;
&lt;p&gt;Add a module descriptor to the main JAR.
Only then you get all the benefits of the module system.
At this moment you will also encounter all the hurdles as this will also get you into runtime errors.
If you do not execute this step, your main application will still be using the classpath and not the module path.&lt;/p&gt;

&lt;p&gt;Export the main class and the application module.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also define &lt;code class=&quot;highlighter-rouge&quot;&gt;requires transitive&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoommans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This last part means that when you depend on that module, you will also implicitly depend on that transitive module.&lt;/p&gt;

&lt;h3 id=&quot;runtime-errors&quot;&gt;Runtime Errors.&lt;/h3&gt;

&lt;p&gt;When you encounter runtime errors, you can pretty much copy paste the errors you get about opening the modules.
Encountering &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNotFoundExceptions&lt;/code&gt; hints at missing modules for which you should define a &lt;code class=&quot;highlighter-rouge&quot;&gt;requires&lt;/code&gt; definition.&lt;/p&gt;

&lt;p&gt;When you stop getting errors, this means that you have reached the next phase..&lt;/p&gt;

&lt;p&gt;Spring does use some of the internals of the JDK, which can be fixed by:&lt;code class=&quot;highlighter-rouge&quot;&gt;requires jdk.unsupported&lt;/code&gt;.
This does help you out for now, but the module name alone screams that you should not use it.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons Learned.&lt;/h3&gt;

&lt;p&gt;As a summary here are the lessons learned by Jaap:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Move bottom up.&lt;/li&gt;
  &lt;li&gt;Test all paths on every step, because you will encounter runtime errors.&lt;/li&gt;
  &lt;li&gt;The logs have the answer while the JVM gives you a good indication of errors by the module system.&lt;/li&gt;
  &lt;li&gt;It still involves pioneering.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/UFBH7gHJkb4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stream-processing-with-the-spring-framework-by-josh-long-and-viktor-gamov&quot;&gt;Stream Processing with the Spring Framework by &lt;a href=&quot;https://twitter.com/starbuxman&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Josh Long&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gamussa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;All the source code of the live demo can be found on &lt;a href=&quot;https://github.com/joshlong/spring_io_2019/tree/master/kafka_and_spring&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Josh Long&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/josh-long.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Viktor Gamov&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/viktor-gamov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Statement: &lt;em&gt;It is dangerous to think of Kafka as a message queue as it tends to become a vine of data within your organization to move data around thus becoming a database.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the demo they made use of &lt;a href=&quot;https://avro.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Avro&lt;/a&gt;.
The Avro format will be used as a contract for the messages, it also gives you the option to generate Java classes based on the schema.
You can use an Avro Maven plugin for that.&lt;/p&gt;

&lt;p&gt;Kafka does not care what you put in there.
But passing along a schema gives your consumers the option to verify that they can process the message or not.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-kafka&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Kafka&lt;/a&gt; gives you &lt;a href=&quot;https://docs.spring.io/spring-kafka/api/org/springframework/kafka/core/KafkaTemplate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KafkaTemplates&lt;/a&gt; that you can use.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;KafkaTemplate&lt;/code&gt; wraps a producer and provides you with some extra handy methods to send data to Kafka topics.
For more information you can check out the reference guide to &lt;a href=&quot;https://docs.spring.io/spring-kafka/reference/html/#kafka-template&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;use KafkaTemplates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important that you think about the type of the key and the type of the value, serializer and deserializer.&lt;/p&gt;

&lt;p&gt;For this you will need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultKafkaProducerFactory&lt;/code&gt; which will provide you with some default config options like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bootstrap servers: where to find your Kafka.&lt;/li&gt;
  &lt;li&gt;Schema registry URL: where to find your Avro schema registry.&lt;/li&gt;
  &lt;li&gt;Key serializer: the class to be used to serialize your key when writing the message to Kafka.&lt;/li&gt;
  &lt;li&gt;Value serializer: the class to be used to serialize your value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without those serializers, Kafka will not be able to transform your message.&lt;/p&gt;

&lt;p&gt;Various other frameworks worth mentioning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud-stream&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Stream&lt;/a&gt;: allows you to abstract the use of message brokers.
It will manage a lot of the bindings for you with Kafka Streams mapping a lot of the configuration automatically for you.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kafka Streams&lt;/a&gt;: a stream processing pipeline that you can use to build processing pipelines.
Similar to Spark but less of a hassle to set up.
Ktable is the representation of state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some final notes about Kafka Streams:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka streams allows you to visualize your topology in a Directed Acyclic Graph using &lt;code class=&quot;highlighter-rouge&quot;&gt;TopologyDescroption&lt;/code&gt;.
For more info see this &lt;a href=&quot;https://docs.confluent.io/current/streams/faq.html#visualizing-topologies&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka Streams allows you to do stateful stream processing in an easy way. 
Its state store is replicated within Kafka so it can restore it in case of failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not forget your &lt;code class=&quot;highlighter-rouge&quot;&gt;SerDes&lt;/code&gt; when writing out Kafka Streams code.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Cloud Stream&lt;/code&gt; automatically converts to JSON but your &lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka streams&lt;/code&gt; code deals with binary data, so it needs to know how to serialize / deserialize. 
Some of them are predefined by Kafka: &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSerde&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LongSerde&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;JsonSerdes&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a very entertaining live coding session which you can rewatch here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/OHjVhTQ3j6g&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-fast-is-spring-by-dave-syer&quot;&gt;How Fast is Spring by &lt;a href=&quot;https://twitter.com/david_syer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dave Syer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dave Syer&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/dave-syer.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this talk Dave is going over the performance improvements carried out by the Spring team.&lt;/p&gt;

&lt;p&gt;Cold startup time of the JVM takes up some time but once started it is an awesome place.&lt;/p&gt;

&lt;p&gt;We went through some measurements.
An application started up in 1.300 milliseconds.
This went down to 1.200 milliseconds by tuning Spring a bit.
By then using Spring functional bean definitions it went down to 600 milliseconds.&lt;/p&gt;

&lt;p&gt;The overhead of Spring Boot versus no Spring Boot is currently around 15 milliseconds.
Thus, a lot of the overhead has already been dealt with.&lt;/p&gt;

&lt;p&gt;If the classloader has been warmed up, the startup time difference is much smaller.
With Spring Devtools you have a warm classloader, which reduces your startup time.&lt;/p&gt;

&lt;p&gt;Lots of optimizations have happened e.g. heap memory went down from 10MB to 6MB with the move to Spring Boot 2.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Async profiler&lt;/a&gt; is a tool you can attach to a running Java process.
It has little to no impact on the running performance and shows the calls being executed.
The width of the flame is the time it took to run.
Red and yellow colour means: not in Java user memory and ready for garbage collection.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Async profiler&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/async-profiler.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot 2.2 has boosted performance.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Classpath exclusion from Spring Boot web starters.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-context-indexer&lt;/code&gt;: this is marginal but with a lot of beans it will have a bigger impact.&lt;/li&gt;
  &lt;li&gt;Spring Actuators used to be costly for startup time, but no longer a big impact since the optimizations in Spring Boot 2.0.&lt;/li&gt;
  &lt;li&gt;Use explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Switch of JMX &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.jmx.enabled = false&lt;/code&gt; (in 2.2 this is the default setting).&lt;/li&gt;
  &lt;li&gt;Make bean definitions lazy by default.
In production you might not want this because if a bean is lazy loaded, the application might not fail on startup.
It can make sense to do this during development in order to improve development time.&lt;/li&gt;
  &lt;li&gt;Unpack the fat JAR and run it by specifying the explicit classpath as &lt;code class=&quot;highlighter-rouge&quot;&gt;java --jar&lt;/code&gt; is little bit slower compared to using &lt;code class=&quot;highlighter-rouge&quot;&gt;java --cp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run the JVM with &lt;code class=&quot;highlighter-rouge&quot;&gt;-noverify&lt;/code&gt; and consider &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:TieredStopAtLevel=1&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;All JVM experts will tell you not to do this.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-noverify&lt;/code&gt; will gain you 40% time with any app but it does not validate byte code which is less interesting in production as the JVM will just crash and show you no exception whatsoever.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:TieredStopAtLevel=1&lt;/code&gt; this deals with the JIT compiler, will gain you around 10% with any app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Import auto configuration manually as it is not needed and might give you a small speed gain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A nice list of tools you can use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Benchmarks: &lt;a href=&quot;https://openjdk.java.net/projects/code-tools/jmh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JMH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JUnit and JMH: &lt;a href=&quot;https://github.com/mp911de/microbenchmark-runner&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;microbenchmark-runner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Profiling: &lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;async-profiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GC pressure: &lt;a href=&quot;https://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JMC aka flight controller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Quick metrics for any Spring Boot JAR: &lt;a href=&quot;https://github.com/dsyer/spring-boot-startup-bench&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benchmark launcher&lt;/a&gt; from dsyer/spring-boot-startup.&lt;/li&gt;
  &lt;li&gt;Classpath manipulation: &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-boot-thin-launcher&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thin Launcher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Profiling with &lt;a href=&quot;https://www.eclipse.org/aspectj/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AspectJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other Remarks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Hibernate team is pretty aware of the GC issues and have done serious optimizations around it.&lt;/li&gt;
  &lt;li&gt;Lazy beans: Pay attention to custom beans with an expensive &lt;code class=&quot;highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt;.
It tends to be misused for opening files, accessing database, which tends to block up the startup.&lt;/li&gt;
  &lt;li&gt;You can try using &lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportAutoConfiguration&lt;/code&gt; but then you need to know which &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoConfigurations&lt;/code&gt; you need to include.
Discovering that is the hard part.&lt;/li&gt;
  &lt;li&gt;Functional Bean Definitions: 
If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; then you make use of reflection.
You can implement an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextInitializer&lt;/code&gt; which makes you reflection free, but it is a bit harder to implement.&lt;/li&gt;
  &lt;li&gt;CPU constrained environments benefit from native images built with &lt;a href=&quot;https://www.graalvm.org/docs/reference-manual/aot-compilation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GraalVM&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/T22i3WAa6dI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-andor-cloud-foundry---how-to-run-your-spring-boot-microservices-on-state-of-the-art-cloud-platforms-by-matthias-haeussler&quot;&gt;Kubernetes and/or Cloud Foundry - How to run your Spring Boot Microservices on state-of-the-art cloud platforms by &lt;a href=&quot;https://twitter.com/maeddes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Matthias Haeussler&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Matthias Haeussler&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/matthias-haeussler.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Matthias Haeussler is a Cloud Advocate at NovaTec Consulting. 
He gave a presentation about the differences between Kubernetes and Cloud Foundry.
He showed us this live with Spring Boot application which was deployed on both Kubernetes and Cloud Foundry.&lt;/p&gt;

&lt;h3 id=&quot;cloud-foundry&quot;&gt;Cloud Foundry&lt;/h3&gt;
&lt;p&gt;To deploy your application on Cloud Foundry, you simply have to run one command: &lt;code class=&quot;highlighter-rouge&quot;&gt;cf push&lt;/code&gt; (under the assumption that you have the CLI installed and configured).
This will send your whole codebase to Cloud Foundry, which then builds a container for your application and runs it. 
Cloud Foundry does not use Docker images, only containers.
The thing with Cloud Foundry is that it uses containers behind-the-scenes, but as a CF user, you don’t really notice it.&lt;/p&gt;

&lt;h3 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;With Kubernetes, it’s a whole different story. You can’t just ‘run’ your application on Kubernetes. You will need a Docker image to run your application, which means
your application must have a Dockerfile inside it. 
This Docker image must be pushed to a Docker registry, which is then pulled from the registry by Kubernetes and ran with the specified configuration.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In Kubernetes, you can configure way more which is a huge benefit.
On the other hand you also need to know more about the platform to do so.
Whereas with Cloud Foundry it is just one command and your codebase is pushed, wrapped into a container and ran on the platform.
Way more simple but with less configuration options.
Thus you can configure less than when using Kubernetes.&lt;/p&gt;

&lt;p&gt;Kubernetes also requires more dependencies if you want to get more out of it (ex. Helm, Prometheus, Istio, …).
This requires additional maintenance of those dependencies.&lt;/p&gt;

&lt;p&gt;The ideal platform is: the simplicity of Cloud Foundry with the functional features of Kubernetes.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/-WZmhofnfII&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;migrating-a-modern-spring-web-application-to-serverless-by-jeroen-sterken-and-wim-creuwels&quot;&gt;Migrating a modern spring web application to serverless by &lt;a href=&quot;https://twitter.com/jeroensterken&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jeroen Sterken&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/wimcreuwels&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Wim Creuwels&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jeroen Sterken&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jeroen-sterken.jpg&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image left&quot;&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Wim Creuwels&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/wim-creuwels.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Is serverless the holy grail? 
These guys explored the possibilities while migrating an existing monolith to serverless at one of their clients.&lt;/p&gt;

&lt;p&gt;Serverless will help your developers focus on the code instead of server management and database setup.
Wim and Jeroen also mention the flip side of the coin.
It’s a new technology and as is the case with every new technology, there is a learning curve.
Developers have to get used to the services that the cloud provider supports.
They need to “think serverless” and model applications as functions in well-defined steps.
Infrastructure has to be modelled using Infrastructure as Code.
A topic on which you can find a great resource on our blog &lt;a href=&quot;https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No, serverless is not the holy grail. It is however a great solution for some typical use cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event-driven architectures&lt;/li&gt;
  &lt;li&gt;Internet of things&lt;/li&gt;
  &lt;li&gt;Applications with varying load&lt;/li&gt;
  &lt;li&gt;Data analysis&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-functions&quot;&gt;Step functions&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Step Function Diagram&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/step-function-diagram.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Jeroen and Wim glued their app together using AWS Step Functions.
Step Functions is a serverless orchestration service that lets you model your workflow as a series of steps.
Step Functions will keep your Lambda functions free of logic that triggers other Lamba functions.
Instead it will use the output of one Lambda function to trigger the next one, thus progressing towards the next step.&lt;br /&gt;
These steps are made visible by a clear step diagram that shows your workflow.
This diagram allows you to monitor your flow by changing color when something goes wrong.
In case of an error Step Functions will automatically retry.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-functions&quot;&gt;Spring Cloud Functions&lt;/h4&gt;
&lt;p&gt;We are at SpringIO and we’re talking about Serverless Cloud technology so Spring Cloud Functions cannot be left unmentioned.
Spring Cloud Function is a project by the Spring team that allows you to write cloud platform independent code.
In the process you can keep using familiar Spring constructs like beans, autowiring and dependency injection.
You can find great guides on &lt;a href=&quot;https://www.baeldung.com/spring-cloud-function&quot; target=&quot;_blank&quot;&gt;baeldung.com&lt;/a&gt; and &lt;a href=&quot;https://spring.io/projects/spring-cloud-function&quot; target=&quot;_blank&quot;&gt;spring.io&lt;/a&gt;.
Using Spring Cloud Functions will lower the stepping stone towards Serverless because most Java developers are already familiar with the Spring Framework.&lt;/p&gt;

&lt;p&gt;Serverless was already a hot topic.
The fact that Spring now has also jumped on the wagon only makes it hotter.
Definitely keep your eyes open for Serverless in the near future.&lt;/p&gt;

&lt;p&gt;You can rewatch their talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/594bKxp0wZI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-2-talks--workshops&quot;&gt;Day 2: Talks &amp;amp; Workshops&lt;/h1&gt;
&lt;h2 id=&quot;testing-spring-boot-applications-by-andy-wilkinson&quot;&gt;Testing Spring Boot Applications by &lt;a href=&quot;https://twitter.com/ankinson&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andy Wilkinson&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/andy-wilkinson.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Andy Wilkinson of Pivotal explained us the importance and essence of writing tests in your application to ensure the quality of your services.
Of course, having a zero risk functionality is practically impossible but testing helps you to reduce your risk to a minimum.&lt;/p&gt;

&lt;p&gt;But how do you know if a test is ‘good’? 
Almost everyone is basing this on the amount of code coverage in their project.
This does not determine the quality of your tests.
When you write tests, you want to think about mistakes that you make or that can be made by the end user.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit testing&lt;/h3&gt;
&lt;p&gt;When you rewrite your application logic, there’s a high chance that you have to rewrite your unit tests as well. 
So make sure that you do not have to spend a lot of time on rewriting your tests when you want to refactor your application or write extra features.&lt;/p&gt;

&lt;p&gt;It’s also very important to use descriptive names for your tests. 
Make sure that your tests are readable by the human eye.
No one wants to read a test that is not clear or creates more confusion (JUnit 5 comes with a display annotation to make a test name more readable).&lt;/p&gt;

&lt;p&gt;When you are familiar with writing unit tests, you’ve probably also heard of mocking. 
Unit testing is all round mocking external services and dependencies. 
After all, in a unit tests we are under the assumption that all our external dependencies are working as they should.&lt;/p&gt;

&lt;h3 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h3&gt;
&lt;p&gt;Andy gave us a detailed explanation of how the various testing annotations work such as &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;, which gives us a more Spring Boot way of testing our application (which means less configuration, hooray!). 
&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpyBean&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt; to create a mock or spy object of a Spring Component, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ActiveProfiles&lt;/code&gt; to run your test class with a specific profile, etc.&lt;/p&gt;

&lt;h4 id=&quot;testing-against-databases&quot;&gt;Testing Against Databases&lt;/h4&gt;
&lt;p&gt;One of the more appearing problems in integration testing is working with a database. 
Typically, when you want to test against data in a database you are going to want to use an in-memory database.
Often this is a HSQLDB or H2 database.
This is where it gets interesting. 
You can tell your H2 instance to run in a specific database software mode, such as PostgreSQL.
However, it’s not exactly the same as working with a real PostgreSQL server.
H2 only interprets the queries that are ran in a PostgreSQL dialect and tries to convert to its own syntax. 
This can cause lots of problems, because you are not working with a real Postgres server.
Even though H2 is ran with PostgreSQL compatibility mode, it can still fail with queries that will run perfectly on a real PostgreSQL server.&lt;/p&gt;

&lt;p&gt;Andy recommended us to use &lt;a href=&quot;https://www.testcontainers.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TestContainers&lt;/a&gt;.
These have the power to spin up a Docker image of a database of your choice.
So you’ll have the full functionality of a database server.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;We are really excited to see what the new Spring Boot versions will have in store to help us write better and clearer tests.
Spring Boot 2.2 will come with full JUnit 5 functionality and thus, will leave JUnit 4 behind.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/5sjFn9BsAds&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-live-in-a-post-spring-cloud-netflix-world-by-olga-maciaszek-and-marcin-grzejszczak&quot;&gt;How to live in a post-Spring-Cloud-Netflix world by &lt;a href=&quot;https://twitter.com/olga_maciaszek&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Olga Maciaszek&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mgrzejszczak&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Marcin Grzejszczak&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Olga Maciaszek&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/olga-maciaszek.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/marcin-grzejszczak.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Discovering the new Spring Cloud stack.
That’s what this talk was all about.
Olga Maciaszek and Marcin Grzejszczak showed us the new solutions for Gateway proxying, circuit breaking and the whole new Spring Cloud stack.&lt;/p&gt;

&lt;h3 id=&quot;the-world-is-changing&quot;&gt;The world is changing&lt;/h3&gt;

&lt;h4 id=&quot;spring-cloud-load-balancer&quot;&gt;Spring Cloud Load Balancer&lt;/h4&gt;
&lt;p&gt;Client side load balancing via the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LoadBalancerClient&lt;/code&gt; annotation.
Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LoadBalanced&lt;/code&gt; annotation as a marker annotation to indicate that a &lt;code class=&quot;highlighter-rouge&quot;&gt;RibbonLoadBalancingClient&lt;/code&gt; should be used to interact with a service.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-gateway&quot;&gt;Spring Cloud Gateway&lt;/h4&gt;
&lt;p&gt;Via routes your requests are processed to downstream services.
Spring Cloud Gateway is used as a simple way to achieve this routing to your APIs.
You can keep configuring this as code:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users_service_route&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user-service/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stripPrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lb://user-service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or in your properties file:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;py&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fraud&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lb://fraud-verifier&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;predicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/fraud-verifier/**&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;StripPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Retry&lt;/span&gt;
          &lt;span class=&quot;py&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;circuit-breaking-and-resilience4j&quot;&gt;Circuit Breaking and Resilience4J&lt;/h4&gt;
&lt;p&gt;You need a design that is resilient and fault tolerant.&lt;/p&gt;

&lt;p&gt;After a number of failed attempts, we can consider a service unavailable.
We will then back off and stop flooding it with requests.
We can save system resources for calls which are likely to fail.
And give the other service some time to get back on their feet.&lt;/p&gt;

&lt;h4 id=&quot;micrometer-and-prometheus&quot;&gt;Micrometer and Prometheus&lt;/h4&gt;
&lt;p&gt;Periodically scraping metrics from your services to monitor health.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-config-server&quot;&gt;Spring Cloud Config Server&lt;/h4&gt;
&lt;p&gt;Externalize your configuration.
You don’t have to restart your application to reload your configuration.
Just fetch it from the remote service again.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Check out a fully working Spring Cloud microservices demo here:
&lt;a href=&quot;https://github.com/OlgaMaciaszek/spring-cloud-netflix-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/OlgaMaciaszek/spring-cloud-netflix-demo&lt;/a&gt;.
A lot of gratitude to Olga and Marcin for providing a working example that we can play around with to get acquainted with the new services.&lt;/p&gt;

&lt;p&gt;You can rewatch their talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CcL8wrguhhM&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-driven-microservices-with-axon-and-spring-boot-excitingly-boring-by-allard-buijze&quot;&gt;Event-Driven Microservices with Axon and Spring Boot: excitingly boring by &lt;a href=&quot;https://twitter.com/allardbz&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Allard Buijze&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Allard Buijze&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/allard-buijze.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this presentation, Allard Buijze, Founder and CTO of AxonIQ talks about the advantages of event-driven architectures and shows how easy it is to set up your own event-driven microservices using Axon and Spring Boot.&lt;/p&gt;

&lt;h3 id=&quot;what-is-axon&quot;&gt;What is Axon?&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://axoniq.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Axon framework&lt;/a&gt; is used for building event-driven microservices using Domain-Driven Design, CQRS and Event Sourcing.
It is there to prevent developers from getting lost inside a complex microservice architecture.&lt;/p&gt;

&lt;h5 id=&quot;cqrs&quot;&gt;CQRS&lt;/h5&gt;
&lt;p&gt;Command and Query Responsibility Segregation is a design pattern where you split the reading and writing of data into seperate models.
You use queries for reading the data and commands for updating the data.
While for basic CRUD operations having these models combined might be fine but once the amount of business logic and the amount of queries increases it might become increasingly difficult to manage.&lt;/p&gt;

&lt;h3 id=&quot;state-storage-vs-event-sourcing&quot;&gt;State Storage vs Event Sourcing&lt;/h3&gt;
&lt;p&gt;A big part of this presentation is about the advantages of using event sourcing rather than state storage.
Events describe the history of an object rather than just the current state of the object.
It is easy to go through the history and generate the current state while also getting a lot of extra information about the object you would otherwise miss out on when just storing its current state. 
Explicit record that something happened, rather than an implicit record of what happened based on changes that occured.
This also makes testing your application easier because you do not have to rely on state but rather on a series of events to take place or an exception to occur.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;event-sourcing&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/event-sourcing.png&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;p&gt;One of the biggest advantages of events is that they remain valuable over time.
They need to be the source of everything in the application and show a true representation of your entities.
Once again, you don’t save the state of an aggregate, you can generate the state by replaying the history.&lt;/p&gt;

&lt;h3 id=&quot;the-power-of-not-now&quot;&gt;The power of not now&lt;/h3&gt;
&lt;p&gt;The power of not now basically means that because you save all the events,
you can generate reports whenever you want based on the captured data.
You don’t have to know in advance what data is important to store for later on, everything is stored.&lt;/p&gt;

&lt;h3 id=&quot;axon-server&quot;&gt;Axon Server&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.axoniq.io/reference-guide/axon-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Axon Server&lt;/a&gt; is a service that distributes your components, manages routing, stores events and provides high availability and observability.
By combining all these otherwise different services into one single easy to configure service,
you make your entire architecture a lot easier to manage than if you were to use for example the Netflix Eureka Discovery Service for communication between microservices,
the MySQL Event Store for storing events and RabbitMQ to handle messaging.
By simply adding the Axon Server dependency and adding some annotations you can use all of these services while keeping the complexity low.&lt;/p&gt;

&lt;h3 id=&quot;tracing&quot;&gt;Tracing&lt;/h3&gt;
&lt;p&gt;Axon can also manage tracing for you by just adding the Axon tracing and Jaeger to your dependencies.
Where otherwise setting up tracing would be a lot of work having to deal with all kinds of headers,
passing headers along and interpreting them,
Axon tracing takes care of all of this for you.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/iVaD3mdwvx4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-secure-your-spring-apps-with-keycloak-by-thomas-darimont&quot;&gt;How to secure your Spring apps with Keycloak by &lt;a href=&quot;https://twitter.com/thomasdarimont&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thomas Darimont&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Thomas Darimont&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/thomas-darimont.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this presentation Thomas Darimont talks about what Keycloak is,
what you can do with it and gives a demo of how it works and how you can set it up for your own applications.&lt;/p&gt;

&lt;h3 id=&quot;what-is-keycloak&quot;&gt;What is Keycloak?&lt;/h3&gt;
&lt;p&gt;Keycloak is a Java based authentication and authorization server. 
It is developed by Red Hat who use it as a base for their enterprise RH-SSO application on which they provide additional support and documentation.
It is also backed by a large open source community providing additional features, documentation and bugfixes.&lt;/p&gt;

&lt;h3 id=&quot;keycloak-features&quot;&gt;Keycloak Features&lt;/h3&gt;

&lt;p&gt;One of the most important features of Keycloak is the Single Sign-On and with this the Single logout.
Sign into keycloak once to gain access to multiple applications and sign out once to sign out of all applications.
Do note though that individual applications can disable this single logout so you might not get logged out of all the applications within a realm.
Another great feature of Keycloak is their multi-factor authentication using one of the known authentication apps like the Google Authenticator.
Keycloak also supports authentication through social media platforms such as Facebook, Twitter, Google or even Github. 
Then of course there is the fact that Keycloak is completely customizable and extensible.
It comes with a preferred stack on which we will dive into more detail later on.
You can get away from this and use your own preferred services albeit with some additional configuration.
Keycloak also comes with an easy to use management console for administrators and a user management interface where all users can update their user details.
The last feature to discuss are the realms. 
Sets of applications, users and registered OAuth clients to whom the Keycloak settings will be applied. 
With these realms you can give users specific roles or just authenticate them across multiple applications using the Single Sign-on feature.&lt;/p&gt;

&lt;h3 id=&quot;the-keycloak-preferred-stack&quot;&gt;The keycloak preferred stack&lt;/h3&gt;

&lt;p&gt;By default Keycloak is a WildFly based server with a plain JAX-RS application.
It uses JPA for storing data and Infinispan for the horizontal scaling
of multiple Keycloak nodes that all distribute information like user sessions between eachother.
Other than that it uses the Freemarker template engine to render for example the login pages
and Jackson 2.x for everything JSON related like the tokens.&lt;/p&gt;

&lt;h3 id=&quot;securing-your-application&quot;&gt;Securing your application&lt;/h3&gt;

&lt;p&gt;To add Keycloak to your applications you have to add a dependency and you will have to register your application within a Keycloak realm.
After doing some configuration within your application and the Keycloak management console,
you will have to authenticate through Keycloak to regain access to your application.&lt;/p&gt;

&lt;h3 id=&quot;the-authentication-process&quot;&gt;The authentication process&lt;/h3&gt;

&lt;p&gt;The following steps describe the Keycloak authentication process:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unauthenticated user accesses application&lt;/li&gt;
  &lt;li&gt;The application redirects to Keycloak for login&lt;/li&gt;
  &lt;li&gt;When the login is successful, Keycloak will create an SSO session and will emit cookies&lt;/li&gt;
  &lt;li&gt;Keycloak generates a random code and redirects the user back to application&lt;/li&gt;
  &lt;li&gt;The application receives the code associated with the sign-on session and sends the code back to Keycloak via a separate channel&lt;/li&gt;
  &lt;li&gt;If the code sent back is associated with the sign-on session, Keycloak will reply with an access token, a refresh token and an id token&lt;/li&gt;
  &lt;li&gt;The application verifies the tokens and associate them with a session&lt;/li&gt;
  &lt;li&gt;The user is now logged in to the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information you can refer to Keycloak’s &lt;a href=&quot;https://www.keycloak.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official documentation&lt;/a&gt; and you can also watch the original talk itself in the following video:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/KrOd5wIkqls&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zero-downtime-migrations-with-spring-boot-by-alex-soto&quot;&gt;Zero Downtime Migrations with Spring Boot by &lt;a href=&quot;https://twitter.com/alexsotob&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alex Soto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Alex Soto&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/alex-soto.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this talk, Alex Soto, Software Engineer at Red Hat covers the subject of zero downtime migrations of microservices in Spring Boot.
He covers some of the different deployment techniques.
Some easy to understand ones and some more advanced techniques for when you are dealing with the persistent states of your applications.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-downtime-when-using-microservices&quot;&gt;Dealing with downtime when using microservices&lt;/h3&gt;

&lt;p&gt;While it is easier and faster to take down a single service rather than a single monolith application,
deployment or redeployment of services will happen a lot more often when using a microservices architecture. 
Another thing to consider is that when you have downtime on a service,
all the services that have a dependency on the offline service will no longer work either.
For this reason it is important to minimise downtime of your applications or even have no downtime at all. 
This is why you need to deploy and release services at different times.
Here are some techniques on how to do this.&lt;/p&gt;

&lt;h3 id=&quot;bluegreen-deployment&quot;&gt;Blue/Green deployment&lt;/h3&gt;

&lt;p&gt;Blue/Green deployment is where you will deploy an updated version of the service you want to replace
and release it by changing the routing from the old one to the new one.
It is important to keep the old service deployed and monitor the new one so that in case of errors
you can easily revert the routing back to keep everything up and running.
The downside of blue/green deployment is that if something goes wrong,
all users are affected if changes happen before reverting the routing.
But of course there is a solution to this problem, Canary releases.&lt;/p&gt;

&lt;h3 id=&quot;canary-releases&quot;&gt;Canary releases&lt;/h3&gt;

&lt;p&gt;Canary releases is where you route a small percentage of your traffic through an updated service while the rest keeps using the original service.
This limits the amount of users that might be affected by unwanted changes while you monitor your new application.
As everything goes well you increase the percentage of users until eventually your entire userbase uses the new service.
All while still having the advantage of Blue/Green deployment to fall back on when things go wrong.&lt;/p&gt;

&lt;h3 id=&quot;mirroring-traffic&quot;&gt;Mirroring traffic&lt;/h3&gt;

&lt;p&gt;Mirroring traffic is another deployment technique where you deploy an updated version of a service next to the original one and send your requests to both services.
Only the original service handles requests while the requests to the updated service are just fire and forget requests while you monitor if everything goes according to plan.
Before eventually changing the routing to the updated version of the service.&lt;/p&gt;

&lt;h3 id=&quot;but-what-about-sticky-sessions&quot;&gt;But what about sticky sessions&lt;/h3&gt;

&lt;p&gt;When dealing with sticky sessions, which you often see with for example shopping carts on webshops,
your session is linked to a specific service by IP.
This means that when you get rerouted to an updated service, you will lose your session.
To counter this problem you can use an in-memory datagrid using for example Redis
and duplicate this across all the services that use these sticky sessions in your cluster.
When you do this, your shopping cart will stay, even when the service you are accessing changes.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-persistent-data&quot;&gt;Dealing with persistent data&lt;/h3&gt;

&lt;p&gt;While problems with in-memory data are often fixed quite easily,
when dealing with persistent data, zero downtime deployment becomes a little bit more tricky.
Take for example the change of a column name in a database.
If you were to use different services accessing the same database but using different column names, this would cause issues. 
This exact problem and how to tackle it is shown in the demo.
Together with a more in-depth explanation of the covered topics in a video of the talk below.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/oziyniXdUe8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;Spring is trendy as ever.
Solid fundamentals and ready for the future of software development.
It was great to further extend our Spring expertise.
And let’s not forget the amazing time we had amongst colleagues.
We’ll be back next year for more!
Will you be there too?!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java &amp; JavaScript developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build his expertise by contributing to valuable projects. Serverless, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Conference" /><category term="Spring IO" /><category term="Spring" /><category term="Java" /><category term="Conference" /><summary type="html">Spring IO 2019!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-05-16-Spring-IO-2019/spring-io.png" /></entry><entry><title type="html">Devoxx FR 2019</title><link href="https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR.html" rel="alternate" type="text/html" title="Devoxx FR 2019" /><published>2019-07-01T00:00:00+00:00</published><updated>2019-07-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://devoxx.fr/&quot; target=&quot;_blank&quot;&gt;Devoxx France&lt;/a&gt; is a yearly conference in Paris, France.
Three colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn and Tom Van den Bulck 
attended the conference in April 2019, where all of them were welcomed as speaker.
In this blog post we share our impressions and experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-speakers-dinner&quot;&gt;The Speakers Dinner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applying-dddd-and-cqrs-to-cloud-architectures-with-java-spring-boot-kafka-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Java, Spring Boot, Kafka and Docker by Benjamin Nothdurft, Michael Follmann and Dominik Guhr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modern-java-change-is-the-only-constant-by-mark-reinhold&quot;&gt;Modern Java: Change is the Only Constant by Mark Reinhold&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#meet-micronaut-a-reactive-microservices-framework-for-the-jvm-by-álvaro-sánchez-mariscal&quot;&gt;Meet Micronaut: a reactive microservices framework for the JVM by Álvaro Sánchez-Mariscal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#full-text-search-tips--tricks-by-denis-rosa&quot;&gt;Full-Text Search Tips &amp;amp; Tricks by Denis Rosa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, The Idiomatic Mocking Framework For Kotlin by Yannick De Turck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#real-quantum-computing-by-james-birnie&quot;&gt;Real Quantum Computing by James Birnie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-is-a-dirty-word-by-james-birnie&quot;&gt;Agile is a Dirty Word by James Birnie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-speakers-dinner&quot;&gt;The Speakers dinner&lt;/h2&gt;
&lt;p&gt;The evening of the workshop day, we had the speakers dinner where we were provided with lots yummy snacks to feast upon while enjoying a nice glass wine.
It was a great opportunity to both network with the other speakers and connect with other experienced developers, gaining extra valuable insights.&lt;/p&gt;

&lt;p&gt;Being a speaker and meeting other speakers also gives you a nice icebreaker: “What talk are you giving?”.
Very handy to get the conversation going.&lt;/p&gt;

&lt;p&gt;That is the power of a conference.
To speak with other attendees and speakers, gaining valuable knowledge.
Most of that knowledge is not presented in the talks but will only bubble up if you speak face to face.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/speaker-dinner.jpg&quot; alt=&quot;Speaker dinner&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;applying-dddd-and-cqrs-to-cloud-architectures-with-java-spring-boot-kafka-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Java, Spring Boot, Kafka and Docker by &lt;a href=&quot;https://twitter.com/DataDuke&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benjamin Nothdurft&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Benjamin Nothdurft&quot; src=&quot;/img/devoxx-ma-2018/speaker-benjamin-nothdurft.png&quot; /&gt;&lt;/span&gt;
Benjamin started off by giving a brief introduction on Domain-Driven Design explaining the different building blocks such as domains, domain events, ubiquitous language and Event Storming.&lt;br /&gt;
He also mentioned the famous two books: &lt;a href=&quot;https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain-Driven Design by Eric Evans&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Implementing Domain-Driven Design by Vaugn Vernon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Benjamin went through all the different steps of &lt;a href=&quot;https://www.eventstorming.com/&quot;&gt;Event Storming&lt;/a&gt;.
The goal is to bring people of different silos together, such as developers, analysts, architects and business experts.
Together you want to create a logically ordered sequence of events to document a system using an ubiquitous language i.e. everybody using the same vocabulary and terms.
Events describe things that have happened and are thus always in the past tense e.g. product added to cart.
In a next step you want to identify commands, which are the triggers of events e.g. add product to cart.
There are also aggregates which represent the data that is interacted with.
And finally you want to identify the bounded contexts grouping relevant parts together.&lt;/p&gt;

&lt;p&gt;Benjamin then explained how this all gets translated to your system architecture.
Each bounded context can be mapped to a single microservice.
He covered different context map patterns such as event publisher, shared kernel, customer/supplier and anti-corruption layer together with detailed code samples.
Afterwards he went through a CQRS example with many code samples and the questions you should be asking yourself when determining the right architecture.
We really liked how in-depth everything was as many presentations about Domain-Driven Design usually remain rather abstract and high-level.&lt;/p&gt;

&lt;p&gt;You can check out Benjamin’s slides on &lt;a href=&quot;https://slides.com/dataduke/2019-04-03-ddd-cqrs-cloud-181&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides.com&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/zBUqoztK3Lo&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modern-java-change-is-the-only-constant-by-mark-reinhold&quot;&gt;Modern Java: Change is the Only Constant by &lt;a href=&quot;https://twitter.com/mreinhold&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mark Reinhold&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Mark Reinhold&quot; src=&quot;/img/devoxx-fr-2019/mark_reinhold.png&quot; /&gt;&lt;/span&gt;
Mark described how they took the massive monolithic platform, the JDK, and transformed it in three ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First, they sliced it up into 26 modules&lt;/li&gt;
  &lt;li&gt;Second, they removed the Java EE and CORBA modules, together with some other APIs resulting in 19 modules&lt;/li&gt;
  &lt;li&gt;And third, the grand majestic release model where a new version was shipped every 2, 3 or 5 years was left behind in favour of one where there is a release every 6 months&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just packaging the modules you need, will make the footprint of your application smaller.
The stronger encapsulation also makes Java more secure.
A couple of the Zero Day exploits could have been avoided with stronger encapsulation.
Three out of six since JDK7.&lt;/p&gt;

&lt;p&gt;Modules allow you to restrict access to internal packages, making it no longer compile and possibly generating warnings at runtime.
Run the following command line: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ jdeps --jdk-internals app.jar&lt;/code&gt; to check if internal APIs are used.&lt;/p&gt;

&lt;p&gt;In theory, if your code only uses standard Java SE APIs then it will most likely work without changes.
For more info, see: &lt;a href=&quot;http://openjdk.java.net/jeps/291&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JEP 291&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lots of methods and APIs have been (and will be) removed but there are four reasons not to worry about it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There is an advanced notice before removing anything (&lt;code class=&quot;highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Make the choice yourself between LTS or feature releases&lt;/li&gt;
  &lt;li&gt;Java is still free&lt;/li&gt;
  &lt;li&gt;Some things might break but it shouldn’t take much work to fix them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first there was the fear that with the six month release cadence there would be some releases which would only contains bugfixes.
But it has shown that all releases provided new features, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/JDK_Enhancement_Proposal&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JEPs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JDK 9: 90 JEPs, 6 JEPs came from outside Oracle&lt;/li&gt;
  &lt;li&gt;JDK 10: 12 JEPs, 2 JEPs from other contributors (304, 316)&lt;/li&gt;
  &lt;li&gt;JDK 11: 17 JEPs, 3 JEPs from others (315, 318, 331), with 2458 issues resolved (1963 solved by Oracle, 169 by SAP and others), this is the latest LTS edition (next one will be JDK 17)&lt;/li&gt;
  &lt;li&gt;JDK 12: 8 JEPs, 1 JEPs from another contributor (189)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every one of these releases is PRD ready, with the only difference being support time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java is still free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/modern-java-mark.jpg&quot; alt=&quot;Modern Java&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, please let me assure you of one thing: whether by Oracle or Red Hat or someone else, JDK LTS releases will continue to be supported
We all have a lot invested in Java, and we won’t let it fall - Andrew Haley.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001826.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001826.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oracle JDK vs OpenJDK:
Choose between LTS version and big upgrade migrations or latest release with small migrations every 6 months.
Feature release: Make sure your tools and dependencies can keep up!&lt;/p&gt;

&lt;p&gt;Library maintainers were asked on Twitter if their libraries worked fine on JDK9 and the same question was asked when JDK 11 got released.
The result showed that a lot of libraries were already upgraded and functional for JDK 11.&lt;/p&gt;

&lt;p&gt;If you’re using Java 9 or later, you should upgrade to the latest version of your tools and other dependencies as some libraries might have one thing or another broken.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everything changes and nothing stands still - Heraclitus.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most important goals when working on a new version are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Developer productivity, not for one-off scripts but when building and maintaining large reliable programs&lt;/li&gt;
  &lt;li&gt;Program performance including and not limited to: startup time, memory consumption, …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He also touched upon some of the major active &lt;a href=&quot;https://openjdk.java.net/projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;projects of the Open JDK community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/amber/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amber&lt;/a&gt; which is about right-sizing languages ceremony, reducing boilerplate.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better and improved type inference with a smarter compiler&lt;/li&gt;
  &lt;li&gt;Less keyboard typing for you&lt;/li&gt;
  &lt;li&gt;Fix error prone things such as switch case on enums with pattern matching where the compiler detects whether a default is actually needed or not&lt;/li&gt;
  &lt;li&gt;Multi-line strings (Java 13 JEP although still to be decided)&lt;/li&gt;
  &lt;li&gt;Value classes for data containers: &lt;code class=&quot;highlighter-rouge&quot;&gt;record Point(double x, double y)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/loom/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Loom&lt;/a&gt; brings fibers to the Java platform.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Similar to threads but slightly different
    &lt;ul&gt;
      &lt;li&gt;Fibers are simpler than threads&lt;/li&gt;
      &lt;li&gt;Fibers work well with &lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFutures&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Marc gave a small demo on the performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/valhalla/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Valhalla&lt;/a&gt;: Value types &amp;amp; specialized generics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unfortunately, Mark ran a bit out of time so he wasn’t able to cover this topic&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/IvmoxgSatbg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meet-micronaut-a-reactive-microservices-framework-for-the-jvm-by-álvaro-sánchez-mariscal&quot;&gt;Meet Micronaut: a reactive microservices framework for the JVM by &lt;a href=&quot;https://twitter.com/alvaro_sanchez&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Álvaro Sánchez-Mariscal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Álvaro Sánchez-Mariscal&quot; src=&quot;/img/devoxx-fr-2019/alvaro-sanchez-mariscal.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The reality of existing frameworks:
Frameworks based on reflection and annotations tend to become fat.
But we love the programming model and productivity model so we live with it.
So, why should we be more efficient?&lt;/p&gt;

&lt;p&gt;Spring is an amazing technical achievement but many things are done at runtime:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reading the byte code of every bean it finds&lt;/li&gt;
  &lt;li&gt;Synthesizing new annotations on each bean method, constructor,… to support annotation metadata.
This leads to high startup time and memory consumption.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jakarta EE also does this.&lt;/p&gt;

&lt;p&gt;Micronaut is a new framework created by the creators of Grails for which the goal is to have the productivity of either Spring Boot or Grails with the performance of a compile-time, non-blocking framework.
It is designed from the ground up with microservices and cloud in mind.
Ultra lightweight and reactive, based on Metty instead of Tomcat, its internals are reactive.&lt;/p&gt;

&lt;p&gt;Provided with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Integrated AOP and compile-time DI for Java, Groovy and Kotlin&lt;/li&gt;
  &lt;li&gt;Annotation processors for Java and Jotlin&lt;/li&gt;
  &lt;li&gt;AST transformations for Groovy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Micronaut is fully open source and you can find the source code on &lt;a href=&quot;https://github.com/micronaut-projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.
It was actually announced one year ago, in May 2018 after two years of development behind the scenes.&lt;/p&gt;

&lt;p&gt;It can be used to build:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
  &lt;li&gt;Serverless applications&lt;/li&gt;
  &lt;li&gt;Message-driven applications with Kafka/RabbitMQ&lt;/li&gt;
  &lt;li&gt;CLI applications&lt;/li&gt;
  &lt;li&gt;Android applications&lt;/li&gt;
  &lt;li&gt;Simple &lt;code class=&quot;highlighter-rouge&quot;&gt;static void main(String.. args)&lt;/code&gt; applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Micronaut can be even faster with GraalVM, but this still is experimental.&lt;/p&gt;

&lt;p&gt;Next, Alvaro showed use a coding demo:
A Micronaut project with &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; for service discovery.
To give you an example about the performance, the demo greeting application with automated tests took 52ms to start with Consul registration.
A second application was created for the gateway.
Micronaut has reactive types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt;, which is non-blocking and similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;.
Alvaro wrote a non-blocking API in the gateway which merges two calls to the greeting application.&lt;/p&gt;

&lt;p&gt;He ended with a demo of an application on Google Cloud Run (serverless based on containers).
Google Cloud run was considered to be much easier for you as a developer than AWS Lamba according to Alvaro.&lt;/p&gt;

&lt;p&gt;The material of the 3 hour long workshop can be found on &lt;a href=&quot;https://alvarosanchez.github.io/micronaut-workshop-java/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/yJd4yk3slck&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-text-search-tips--tricks-by-denis-rosa&quot;&gt;Full-Text Search Tips &amp;amp; Tricks by &lt;a href=&quot;https://twitter.com/deniswsrosa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Denis Rosa&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Denis Rosa&quot; src=&quot;/img/devoxx-fr-2019/denis-rosa.png&quot; /&gt;&lt;/span&gt;
Denis Rosa is a developer advocate at Couchbase.&lt;/p&gt;

&lt;p&gt;The scenario where you have multiple nodes and many clients who want to do full-text search is still pretty hard to do with the JVM. 
Which is one of the reasons why it was decided to start with &lt;a href=&quot;http://blevesearch.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bleve&lt;/a&gt;: a framework for full-text search and indexing written in &lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important to realize that searching is not only about matching text as it can also be more sales-oriented.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Netflix wants to convince you to watch a movie.&lt;/li&gt;
  &lt;li&gt;Google want to answer your questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When building out a search functionality it is important to know how your users are searching.
Do they use one word, two words, three words, …
User queries should be saved, don’t forget to do so.
So that you can learn more about your users and improve your search model.&lt;/p&gt;

&lt;p&gt;Some quick core concepts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TD/IDF: aka “Term Frequency–Inverse Document Frequency”, having rare words score higher&lt;/li&gt;
  &lt;li&gt;Edit distance: minimum number of operations required to transform one string into another: for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Pivoted length norm: matches in small texts will rank higher than in long ones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Denis showed an example with Bleve underneath.&lt;/p&gt;

&lt;p&gt;He made an application called Couchflix allowing you to specify text to search on movies.
He showed how “good” his initial search was, when searching on &lt;code class=&quot;highlighter-rouge&quot;&gt;star war&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;star wars&lt;/code&gt; the first one just showed some zombie movies but nothing about star wars.&lt;/p&gt;

&lt;p&gt;During the live coding session several search implementations were made to see the difference: match on title alone, match on title and description, …&lt;/p&gt;

&lt;p&gt;Even after some modifications we still had the situation that when searching on &lt;code class=&quot;highlighter-rouge&quot;&gt;star war&lt;/code&gt;, both &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt; were matched separately.&lt;/p&gt;

&lt;p&gt;Something useful for that is a &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-shingle-tokenfilter.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shingle&lt;/a&gt;.
A shingle will break your search term in a combination of two, three, four words, … 
For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;Star wars daisy Ridley&lt;/code&gt; gets split out in the following search terms:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Star Wars&lt;/li&gt;
  &lt;li&gt;Wars Daisy&lt;/li&gt;
  &lt;li&gt;Daisy Ridley&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of shingles you can also use &lt;a href=&quot;https://qbox.io/blog/elasticsearch-algorithmic-stemming-tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stemming&lt;/a&gt; to avoid conjugations.
For example, the search terms &lt;code class=&quot;highlighter-rouge&quot;&gt;Fishing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fished&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fisher&lt;/code&gt; would all be transformed to &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another thing is &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-boost.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Boosting&lt;/a&gt; which allows you to boost up the ranking factors of your search results.
Most people tend to first focus on these when searches do not return the results they want but you first need to make sure that everything has been indexed properly. 
Only after does it make sense that you start thinking about boosting.&lt;/p&gt;

&lt;p&gt;We also have &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Decay Functions&lt;/a&gt; which allow you to decay your research results.
&lt;br /&gt;For example: leave out older movies that are less relevant.&lt;/p&gt;

&lt;p&gt;Things also get more complicated when we want to search on an actor name compared to the movie name for which we now have done all those optimizations. 
Searches are always biased, so the one we had for titles is less ideal for searching on actors and vice versa.&lt;/p&gt;

&lt;p&gt;Some other recommendations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For tests, the &lt;a href=&quot;https://spraakbanken.gu.se/sites/spraakbanken.gu.se/files/6IR12.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cranfield Evaluation Method&lt;/a&gt; is a good strategy to implement tests:
for every change you do in your model you need to verify if your query still returns a good result.
It is more complicated than the average JUnit test though.&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://en.wikipedia.org/wiki/Precision_and_recall&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Precision and Recall&lt;/a&gt; as a metric.&lt;/li&gt;
  &lt;li&gt;There is a very nice Coursera course available: &lt;a href=&quot;https://www.coursera.org/learn/text-retrieval&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Text Retrieval and Search Engines&lt;/a&gt;, which is really worth checking out.&lt;/li&gt;
  &lt;li&gt;Be careful with features that are directly influenced by users to avoid being tricked!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Source demo can be found on &lt;a href=&quot;https://github.com/deniswsrosa/couchflix&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/B9qRJhA1ONs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, the idiomatic mocking framework for Kotlin by &lt;a href=&quot;https://twitter.com/YannickDeTurck&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yannick De Turck&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Yannick De Turck&quot; src=&quot;/img/devoxx-ma-2018/speaker-yannick-de-turck.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Our colleague, Yannick, gave a talk about MockK.
MockK is a mocking framework specifically made for Kotlin. 
As a Java developer, he is a huge fan of Mockito for using mocks in his unit tests.
When he picked up Kotlin, Mockito was also his first choice to try out.&lt;/p&gt;

&lt;p&gt;He explained however that using Mockito in a Kotlin project doesn’t go all that well due to how Mockito creates its mocks, which is by overriding classes and functions.
And because Kotlin’s classes and functions are final by default, you can see that this poses some challenges.
Yannick shared his experiences and mentioned that even though there is an &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#mock-the-unmockable-opt-in-mocking-of-final-classesmethods&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;incubating, opt-in feature&lt;/a&gt; to allow Mockito to mock final classes and functions, the user experience isn’t all that nice.&lt;/p&gt;

&lt;p&gt;He looked for other frameworks and stumbled upon &lt;a href=&quot;https://mockk.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MockK&lt;/a&gt;, a mocking framework created for Kotlin by &lt;a href=&quot;https://github.com/oleksiyp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oleksiy Pylypenko&lt;/a&gt;.
MockK’s main philosophy is offering first-class support for Kotlin features and being able to write idiomatic Kotlin code when using it.
He was pretty enthusiastic about MockK and went over all its features and its ease of use.&lt;/p&gt;

&lt;p&gt;On our tech blog there is also a &lt;a href=&quot;/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; written by Yannick specifically about his experiences with Mockito and MockK in Kotlin projects.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;93e1c3b3a2474b1bbed9a032740efeb1&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/PoifD5FdJ7Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-quantum-computing-by-james-birnie&quot;&gt;Real Quantum Computing by &lt;a href=&quot;https://twitter.com/runningchairjb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;James Birnie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;James Birnie&quot; src=&quot;/img/devoxx-fr-2019/james-birnie.png&quot; /&gt;&lt;/span&gt;
Using many worlds to solve the unsolvable.&lt;/p&gt;

&lt;p&gt;Why quantum computing?
James didn’t knew anything about it until he followed a talk of Alasdair Collinson at Voxxed Days Vienna at which point he still found it hard to comprehend.
So he decided to make a talk of his exploration of quantum computing in such a way that it would become easier to comprehend for the uninitiated.&lt;/p&gt;

&lt;p&gt;The last version of the Thoughtworks tech radar has &lt;a href=&quot;https://www.microsoft.com/en-us/quantum/development-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Q#&lt;/a&gt; in Assess on the recommendation of James.&lt;/p&gt;

&lt;p&gt;To understand, first go back to the classical bit:
A bit is a unit of binary information, which can hold two states: 0 or 1.
This is stored as one of two voltages, logic gates compose this into arithmetic.&lt;/p&gt;

&lt;p&gt;In quantum computing we have the qubit.
This also has a value of either 0 or 1.
However, observing the value “collapses” the state to a single value.
Any quantum thing can be a qubit, such as an electron, a photon or an ion.&lt;/p&gt;

&lt;p&gt;The quantum state is somewhat represented by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloch_sphere&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bloch sphere&lt;/a&gt;, a complex values probability amplitude.
Probabilities of measuring the different values are derived from the quantum state.
This maps to a point on the bloch sphere for a single qubit in a pure state.
Quantum logic gates are similar to classical logic gates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.research.ibm.com/ibm-q/&quot;&gt;IBM Q&lt;/a&gt; allows you to make a free account to play with quantum computers.
Make circuits by drag and dropping gates and operations.&lt;/p&gt;

&lt;p&gt;Next, James demonstrated the Schrodingers cat thought experiment.
When executed on a real quantum computer there were a lot of error states, showing that quantum computers are not yet production ready.
In a simulation the result was balanced in the 00000 and 01111 state.&lt;/p&gt;

&lt;p&gt;There are problems that classical computing cannot solve but quantum computers can and this is what makes them interesting.
Quantum computers cannot meaningfully persist state though.
Hardware is not ready yet for quantum computers and they are hard to program.&lt;/p&gt;

&lt;p&gt;James did an experiment on his own cat and the different states of a cat, culminating in a quantum program on the behaviour of cats.
The C# program CatMoodExperiment with multiple outcomes: x people feeding the cat.
Four qubits representing four persons, that may feed the cat.
Another test represents how the cat is feeling.
The program is available on his &lt;a href=&quot;https://github.com/JimBobBirnie/clementines-cat&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt; for you to try out.&lt;/p&gt;

&lt;p&gt;What do we need to build a commercial quantum solution?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Algorithms and applications (will happen)&lt;/li&gt;
  &lt;li&gt;Integration with cloud provider (will happen)&lt;/li&gt;
  &lt;li&gt;Error correction (hard!)&lt;/li&gt;
  &lt;li&gt;Quantum classic interface (hard!)&lt;/li&gt;
  &lt;li&gt;Cryogenic systems (expensive!!)&lt;/li&gt;
  &lt;li&gt;Scalable qubit foundations (hard!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two well-known quantum algorithms to look into are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Deutsch-Josza algorithm&lt;/a&gt;, 1992&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Grover%27s_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Grover’s algorithm&lt;/a&gt;, 1996&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most interesting application for James is quantum chemistry because it should allow us to fully understand complex molecules like iron molybdenum, which exists within beans which fix atmospheric nitrogen. 
While we humans need 5% of the natural gas supply to make fertilizer with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Haber_process&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Haber Bosch process&lt;/a&gt;, beans do that with no energy.
So if we understand that iron molybdenum complexity, we can potentially do away with this massive energy inefficient process.&lt;/p&gt;

&lt;p&gt;Then you also have &lt;a href=&quot;https://en.wikipedia.org/wiki/Shor%27s_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shor’s algorithm&lt;/a&gt; to factorise n, which should make it possible to break RSA encryption.
Although this won’t happen for now as quantum computers are still not stable enough.&lt;/p&gt;

&lt;p&gt;All in all a very interesting talk to give you a heads-up on the current state of affairs around quantum computing, but it also makes it quite clear that we still need to go a long way in order to have practical, production-ready, quantum computing.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/7J4tuIsbBfk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;agile-is-a-dirty-word-by-james-birnie&quot;&gt;Agile is a Dirty Word by &lt;a href=&quot;https://twitter.com/runningchairjb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;James Birnie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;James Birnie&quot; src=&quot;/img/devoxx-fr-2019/james-birnie.png&quot; /&gt;&lt;/span&gt;
In this talk, James explores in which organizations agile became a dirty word.
Often it starts with companies who are doing real agile.
You can compare the organizations with real democratic countries like the Democratic Republic of Congo and Democratic People’s Republic of Korea.&lt;/p&gt;

&lt;p&gt;Doing agile does not make you agile, you don’t do agile, you have to be it.
Often it is like a cargo cult, just doing the rituals of scrum but loosing the goal and the context out of sight.&lt;/p&gt;

&lt;p&gt;Combine this with risk management theater, also known as lots of processes and checkboxes to tick off in order to avoid risk taking making it easy for agile to become a dirty word.&lt;/p&gt;

&lt;p&gt;SAFE is the perfect example of agile gone wrong, too much convention and control.&lt;/p&gt;

&lt;p&gt;Agile also tends to collide with the current issues with budgeting, which tend to emphasize on short-term goals preventing organizations from doing some real investments.&lt;/p&gt;

&lt;p&gt;A good paper to read is: &lt;a href=&quot;https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to detect agile bullshit&lt;/a&gt; from the US Department of Defence.&lt;/p&gt;

&lt;p&gt;In order to bring the organization back to track, avoid dirty words which have become contaminated by bad experiences.
Read the agile manifesto and talk about the values and principles mentioned.&lt;/p&gt;

&lt;p&gt;Note, waste is not always obvious.
Like code reviews which are often seen als helpful and agile, but too often are just waste.&lt;/p&gt;

&lt;p&gt;Only work on your biggest problem and only when that has been tackled move over to the next.&lt;/p&gt;

&lt;p&gt;The goal of agile should be to get autonomous cross functional teams who can deliver themselves and are decoupled as much as possible from the rest of the organization.
Also, there does not exist failure within agile, it is better to call it experimenting.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CmKBXgbMa24&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Devoxx FR was  an amazing experience for us where we got to see some of our friends again and meet and befriend others.&lt;/p&gt;

&lt;p&gt;Sharing your experiences should always be the main goal when you attend a conference.
It is true that as a speaker, it does is easier to share your experiences and to get in contact with other people.
But as an attendee you should never hesitate to go up to a speaker or another attendee and ask a question, to come in contact.
Most people happily and willingly share their knowledge.&lt;/p&gt;

&lt;p&gt;Give it a try.
Next time you are at a conference, ask that question that came up in your mind or join an interesting conversation instead of just listening and who knows what interesting discussions will unfold.&lt;/p&gt;

&lt;p&gt;The date for next year’s edition has already been announced and will happen on 15th until the 17th of April 2020.
Be sure to mark it in your agenda so you can enjoy the great atmosphere!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Mt1jXgiyhp0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/moulin-rouge.jpg&quot; alt=&quot;Moulin Rouge&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Conference" /><category term="Devoxx" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">Devoxx France is a yearly conference in Paris, France. Three colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn and Tom Van den Bulck attended the conference in April 2019, where all of them were welcomed as speaker. In this blog post we share our impressions and experiences.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/devoxx-fr-2019/devoxx-fr.png" /></entry><entry><title type="html">Getting started with TensorFlow in the browser</title><link href="https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser.html" rel="alternate" type="text/html" title="Getting started with TensorFlow in the browser" /><published>2019-06-26T00:00:00+00:00</published><updated>2019-06-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tensorflow&quot;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tensorflowjs&quot;&gt;TensorFlow.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ml5&quot;&gt;ML5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Machine learning is a hot topic right now, and rightfully so!
It is also something that is very hard to do, if you’re trying to do it right, that is.
Since AI/ML is here to stay and not everyone has the time and resources to study every aspect of ML, we need something to help us.
We already have TensorFlow which runs in Python, nice if you know Python.
But what if you want to experiment with ML in your latest web application?
The answer is here: &lt;a href=&quot;https://www.tensorflow.org/js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This blogpost serves as a quick introduction to TensorFlow.js and ML5 so you too can get started with some cool AI/ML examples in your web applications!&lt;/p&gt;

&lt;h2 id=&quot;tensorflow&quot;&gt;Tensorflow&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Tensorflow&quot; src=&quot;/img/2019-06-26-tensorflowjs/tensor.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we are going to implement machine learning into an application, TensorFlow is one of the most used libraries that provides everything we need to get started.
It has been around for quite some time and is really mature.
It is fully open source and a well-adopted industry standard with great tooling and lots of reference materials.&lt;/p&gt;

&lt;p&gt;The full documentation on TensorFlow can be found &lt;a href=&quot;https://www.tensorflow.org/guide&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.
Learning TensorFlow is a long process that requires dedication and a lot of trial and error.
Experimentation is key!&lt;/p&gt;

&lt;p&gt;There are also a lot of very good online courses to get started with machine learning that can greatly aid you in understanding the key principles and concepts.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/vq2nnJ4g6N0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/tYYVSEHq-io&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There are many more videos about getting started, and there are also some very good courses on online educational websites like Coursera and Pluralsight.
They are a great place to start, but always remember that only with extended trial and error and experimentation you will fully grasp the logic behind it all!&lt;/p&gt;

&lt;h2 id=&quot;tensorflowjs&quot;&gt;TensorFlow.js&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;TensorFlow.js&quot; src=&quot;/img/2019-06-26-tensorflowjs/tensorflowjs.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter TensorFlow.js.
This ‘new’ addition to the TensorFlow lineup allows developers to utilize the power of machine learning in the browser or in NodeJS.
The biggest advantage of this is that models written in Python can be converted and reused.
This allows for some very cool use cases we will go into a bit later.&lt;/p&gt;

&lt;p&gt;TensorFlow.js is nice because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GPU accelerated (in the browser), thanks to WebGL/OpenCL, and this even on non CUDA cards!&lt;/li&gt;
  &lt;li&gt;Lower barrier of entry, no prior Python knowledge required (but can be handy)&lt;/li&gt;
  &lt;li&gt;Convert/retrain/reuse existing models with your own data&lt;/li&gt;
  &lt;li&gt;Quickly prototype into existing applications without having to setup a full ML pipeline&lt;/li&gt;
  &lt;li&gt;In the browser we have direct access to various input devices/sensors like the camera/accelerometer/location/…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This sound almost too good to be true!
But there are a few limitations though.
Browsers are a lot more memory constrained than when training a model ‘offline’ with Python.
This means that super complex models pose an issue when training in the browser, keep this in mind!
You can however always train a model offline and only use TensorFlow.js to run the model in the browser and make predictions.
Also keep in mind that the models you load, tend to be on the larger side, especially when considering web pages.
Some models are upwards of a 100 MegaBytes or more, so loading them can take a while, certainly when bandwidth is limited (mobile devices/3G/bad WiFi).&lt;/p&gt;

&lt;p&gt;Taking the TensorFlow.js variant of TensorFlow into account, we can see that there are many options in the ecosystem to build, train and run models almost everywhere.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;TensorFlow ecosystem&quot; src=&quot;/img/2019-06-26-tensorflowjs/overview.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-small-javascript-example&quot;&gt;A small JavaScript example&lt;/h3&gt;

&lt;p&gt;The following example is one how to recognize digits from the MNIST dataset (Modified National Institute of Standards and Technology).
This is a large dataset of scanned handwritten digits.
It contains 60,000 training images and 10,000 testing images.
Each image is black and white spanning 28 by 28 pixels, for a total of 784 pixels.
Numbers you’ll get to know by heart.&lt;/p&gt;

&lt;p&gt;All the API calls used are documented on the &lt;a href=&quot;https://js.tensorflow.org/api/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tf.sequential provides an API where the output from one layer is used as the input to the next layer.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The first layer of the convolutional neural network plays a dual role:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it is both the input layer of the neural network and a layer that performs the first convolution operation on the input.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// MaxPooling layer for downsampling =&amp;gt; https://www.quora.com/What-is-max-pooling-in-convolutional-neural-networks&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxPooling2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;poolSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our third layer is another convolution, this time with 32 filters.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Max pooling again.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxPooling2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;poolSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Add another conv2d layer.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now we flatten the output from the 2D filters into a 1D vector to prepare&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it for input into our last layer. This is common practice when feeding&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// higher dimensional data to a final classification output layer.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}));&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our last layer is a dense layer which has 10 output units, one for each&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// We use the softmax function as the activation for the output layer as it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// creates a probability distribution over our 10 classes so their output values sum to 1.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;softmax&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This concludes the code for creating the actual layers.
Each layer has some comments explaining why it is used and what its function is.
As is, this code is not that complex.
The complexity stems from knowing what layers to use, what parameters to give them and how to combine them all.
This can only be learned up to some degree as a deep understanding is required to figure this out.
Thankfully the internet has many websites with resources for machine learning and there are even websites dedicated to providing ready-to-use models, like &lt;a href=&quot;https://modelzoo.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Model Zoo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we will look at code that sets the optimizer, sets up the training and validation, loads the data and then trains and validates the model.
A working example of this code can be found &lt;a href=&quot;https://storage.googleapis.com/tfjs-examples/mnist/dist/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// An optimizer is an iterative method for minimizing a loss function.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It tries to find the minimum of our loss function with respect to the model's weight parameters.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rmsprop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We compile our model by specifying an optimizer, a loss function, and a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// list of metrics that we will use for model evaluation. Here we're using a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// categorical crossentropy loss.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;categoricalCrossentropy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Batch size is another important hyperparameter. It defines the number of&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// examples we group together, or batch, between updates to the model's&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// weights during training.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Leave out the last 15% of the training data for validation, to monitor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// overfitting during training.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainBatchCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTrainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalNumBatches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainEpochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// During the long-running fit() call for model training, we include callbacks.  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainEpochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onBatchEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;trainBatchCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;onBatchEnd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onEpochEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;onEpochEnd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testAccPercent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalValAccPercent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testExamples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testExamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Code wrapped in a tf.tidy() function callback will have their tensors freed&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// from GPU memory after execution without having to call dispose().&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tidy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// tf.argMax() returns the indices of the maximum values in the tensor along&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a specific axis. Categorical classification tasks like this one often&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// represent classes as one-hot vectors. One-hot vectors are 1D vectors with&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// one element for each output class. All values in the vector are 0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// except for one, which has a value of 1 (e.g. [0, 0, 0, 1, 0]). &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is still not all that complicated code, but it is a lot to figure out all by yourself.
There are pre-trained models available which can make your life easier, but what if there was an even easier way.
What if there exists a library (or more than one) that allows you to do some commonly used machine learning techniques with very little code.
It exists, read on below to find out all about it!&lt;/p&gt;

&lt;h2 id=&quot;ml5&quot;&gt;ML5&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;ML5&quot; src=&quot;/img/2019-06-26-tensorflowjs/ml5-examples.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter ML5!
This library provides ready to use building blocks, as their website describes:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ML5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students.
The library provides access to machine learning algorithms and models in the browser, building on top of TensorFlow.js with no other external dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gives us the ability to quickly use these machine learning techniques in prototypes, to experiment with and test viability in real world conditions without requiring a full model to be built up front.
This is provided the machine learning technique is available within the ML5 library.&lt;/p&gt;

&lt;p&gt;Classifying an image becomes really simple:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Initialize the Image Classifier method with MobileNet. A callback needs to be passed.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ml5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MobileNet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;noCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;images/bird.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gotResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gotResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#result&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#probability&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This small example also uses &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.js&lt;/a&gt; for image handling/drawing.&lt;/p&gt;

&lt;p&gt;It has many different available machine learning techniques available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image classification&lt;/li&gt;
  &lt;li&gt;Pose estimation&lt;/li&gt;
  &lt;li&gt;Person segmentation&lt;/li&gt;
  &lt;li&gt;Biomedical image segmentation&lt;/li&gt;
  &lt;li&gt;Style transfer&lt;/li&gt;
  &lt;li&gt;Image to image translation&lt;/li&gt;
  &lt;li&gt;Feature extraction&lt;/li&gt;
  &lt;li&gt;Text sentiment detection&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detailed information and reference documentation can be found on &lt;a href=&quot;https://ml5js.org/reference/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their website&lt;/a&gt;.
The project is also fully open source and in active development.&lt;/p&gt;

&lt;h3 id=&quot;some-ml5-examples&quot;&gt;Some ML5 examples&lt;/h3&gt;

&lt;p&gt;We have written some small examples ourselves with ML5.
You can run the examples by checking out &lt;a href=&quot;https://github.com/ordina-jworks/TensorFlow.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the repo&lt;/a&gt; and switching to any of the solution branches.
Be sure to run it from a local webserver or the demos will not work correctly!&lt;/p&gt;

&lt;p&gt;The first example uses &lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLO (You Only Look Once)&lt;/a&gt;  and ImageNet to detect the contents of an image and classify it.
The second example uses Style transfer to transfer styles from a base image to a provided target image.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-06-26-tensorflowjs/yolo.jpg&quot; data-lightbox=&quot;ML5 custom examples&quot; data-title=&quot;YoLo and image classification&quot;&gt;
        &lt;img alt=&quot;YoLo and image classification&quot; src=&quot;/img/2019-06-26-tensorflowjs/yolo.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 60%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2019-06-26-tensorflowjs/style.jpg&quot; data-lightbox=&quot;ML5 custom examples&quot; data-title=&quot;Style transfer&quot;&gt;
        &lt;img alt=&quot;Style transfer&quot; src=&quot;/img/2019-06-26-tensorflowjs/style.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 31%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These are really simple to make and provide a real world value for quickly prototyping an application to include a machine learning technique.
While not everything is perfect (the cat is a Holy Birman not a Siamese, but I’ll excuse that one) it can give you a rough view on how well it will work and if it merits further development effort.&lt;/p&gt;

&lt;p&gt;Be sure to give it a try and see for yourself how easy it really is to get started with TensorFlow in the browser!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://modelzoo.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Model Zoo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ml5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ml5js/ml5-examples#examples-index&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5 Demos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ordina-jworks/TensorFlow.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5 Custom Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his role as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="Machine Learning" /><category term="Internet of Things" /><category term="Smart tech" /><category term="Machine Learning" /><category term="Artificial Intelligence" /><category term="TensorFlow" /><category term="JavaScript" /><category term="Browser" /><category term="Node.js" /><category term="Ml5.js" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-06-26-tensorflowjs/banner.jpg" /></entry><entry><title type="html">JDK distributions</title><link href="https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions.html" rel="alternate" type="text/html" title="JDK distributions" /><published>2019-05-22T00:00:00+00:00</published><updated>2019-05-22T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions</id><content type="html" xml:base="https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions.html">&lt;blockquote&gt;
  &lt;p&gt;Around February we had a discussion in our chat group of developers which made us realise how much confusion there is on the new update cycle for the JVM.
We decided it would be good idea to write a blog post that should clear up the confusion for our developers and clients.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#oracles-jdk-distributions&quot;&gt;Oracle’s JDK distributions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openjdk-updates&quot;&gt;OpenJDK updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openjdk-providers&quot;&gt;OpenJDK providers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java-desktop-java-web-start-and-javafx&quot;&gt;Java Desktop, Java Web Start and JavaFX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oracles-jdk-distributions&quot;&gt;Oracle’s JDK distributions&lt;/h2&gt;

&lt;p&gt;First we have to explain what changed to Oracle’s JDK distributions recently, which has brought along a lot of uncertainty within the Java community.
This blog post is going to try to explain these changes and more importantly, tell you what you should know about the licenses and options you have.&lt;/p&gt;

&lt;p&gt;At the end of this article you should know more about the free updates and commercial support options from  various JDK vendors and understand that OpenJDK 8 and 11 are still being updated, even though Oracle is going to stop leading those projects, to focus on the new versions and providing commercial support.&lt;/p&gt;

&lt;h3 id=&quot;six-month-release-cycle&quot;&gt;Six month release cycle&lt;/h3&gt;

&lt;p&gt;Java SE now has new major versions released every six months since Java version 9.
Prior to this version, updates where provided by Oracle and other OpenJDK contributors.
These releases, such as 8u91, 8u111 and 8u131, were released every six months.
You would not get further updates on 8u91 once 8u111 was released and no longer get updates for 8u111 once 8u131 was released.&lt;/p&gt;

&lt;p&gt;Since Java version 9 however, there is a new six month release cycle for major versions.
Similar to the old update cycle.
In the new version system you will no longer get updates for Java 12 once Java 13 is released.
Exceptions being long-term support versions which will get updates beyond six months.
More about that later.&lt;/p&gt;

&lt;p&gt;Below is a table for free updates.
Each vendor can release their own OpenJDK distributions and decide for themselves how long they provide free updates.
If you want pick a vendor, make sure you research how long they will be providing free updates/support because this may vary from vendor to vendor.
Further in the article we provide a table with most of this information.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;Release date&lt;/th&gt;
      &lt;th&gt;Free updates ended or superseded&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 6&lt;/td&gt;
      &lt;td&gt;December 2006&lt;/td&gt;
      &lt;td&gt;Supported primarily by Azul systems&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 7&lt;/td&gt;
      &lt;td&gt;July 2011&lt;/td&gt;
      &lt;td&gt;Supported primarily by Red Hat until at least June 2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 8&lt;/td&gt;
      &lt;td&gt;March 2014&lt;/td&gt;
      &lt;td&gt;Supported by Red Hat, Amazon, Azul Systems, BellSoft, Google, IBM, jClarity, SAP, and others.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 9&lt;/td&gt;
      &lt;td&gt;Sept 2017&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 10&lt;/td&gt;
      &lt;td&gt;March 2018&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 11&lt;/td&gt;
      &lt;td&gt;Sept 2018&lt;/td&gt;
      &lt;td&gt;Supported by Red hat, Amazon, Azul Systems, BellSoft, Google, IBM, jClarity, SAP, and others.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 12&lt;/td&gt;
      &lt;td&gt;March 2019&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 13&lt;/td&gt;
      &lt;td&gt;Sept 2019&lt;/td&gt;
      &lt;td&gt;Will be superseded by OpenJDK 14&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;support-and-licenses&quot;&gt;Support and licenses&lt;/h3&gt;

&lt;p&gt;Before Java 9, Oracle would provide updates for their JDK for three years.
The license allowed you to use these updates personally and commercially.
The updates had no support so if you wanted support you had to buy a license from Oracle and those licenses also came with longer update cycles.
Starting April 2019, the new Oracle JDK 8 updates will be restricted and will remain free for personal desktop use, development, testing, prototyping, demonstrating and for use with certain types of applications.
Commercial use of these updates requires you to get a license for a paid support plan.
Using older versions is allowed, but will not contain important security patches.&lt;/p&gt;

&lt;p&gt;Java 9 brings new update cycles which allows for new implementations like TLS 1.3 to be added to Java faster.
Oracle also started producing Oracle OpenJDK builds which use the GNU General Public License, version 2, with the Classpath Exception.
Every major Java version has free updates for six months until the next major version is released.
If you need new updates and support for these older versions, you will have to buy a license from Oracle which will extend support and updates although they only provide this for LTS releases.&lt;/p&gt;

&lt;h4 id=&quot;support&quot;&gt;Support&lt;/h4&gt;

&lt;p&gt;So what if I want support from Oracle?
Support isn’t free because Oracle and other companies have to hire employees and developers to provide these support services.
If you need the reassurance of bug fixes and somebody to answer your questions then you have to get commercial support.
You aren’t limited to Oracle’s support.
Which vendor you choose to get this support from is up to you.
But each vendor has their own JDK binaries so make sure you use the binaries of the vendor you want to get commercial support from and don’t forget to check how long they will support your OpenJDK version.
Each vendor can decide for themselves how long they provide support for their OpenJDK libraries, so this isn’t a decision you should make on a whim.&lt;/p&gt;

&lt;p&gt;You might also be thinking: “Why would I pay for commercial support for (open source) JDK versions?”.
Don’t forget that Oracle and other vendors pour money in development of these JDK versions and this money has to come from somewhere.
You are not obliged to get paid support with one of the vendors providing OpenJDK versions, but we think it’s worth thinking about supporting the Java ecosystem to ensure its long-lasting future.
If there is no money to develop the JDK further then there won’t be any progression to the future of the JDK ecosystem.&lt;/p&gt;

&lt;h3 id=&quot;long-term-support-lts&quot;&gt;Long-Term Support (LTS)&lt;/h3&gt;

&lt;p&gt;In the OpenJDK, LTS is an understanding between various contributors which are mainly led by Oracle and Red Hat which means that the code line for Java SE 11, 17, 23, etc will be maintained for a longer period of time than six months.&lt;/p&gt;

&lt;p&gt;Oracle leads the first six months of the OpenJDK LTS code line, providing updates and producing the Oracle OpenJDK builds, but afterwards as mentioned before, provide updates under a paid support plan.&lt;/p&gt;

&lt;p&gt;There’s a but however: Oracle will work with other OpenJDK vendors to hand over the OpenJDK LTS code line and allow those vendors to continue working on these updates together.
Handing over the OpenJDK code line has already occurred for both Java 8 and Java 11 with Red Hat taking over those update projects.
This doesn’t mean that they are the only one contributing to the OpenJDK project.
Various people can still provide patches and add new features to new versions of the OpenJDK.
You can read more about JDK 11 updates on the &lt;a href=&quot;https://wiki.openjdk.java.net/display/JDKUpdates/JDK11u&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenJDK Wiki&lt;/a&gt;.
You’ll see that there are updates planned until at least mid October 2019.&lt;/p&gt;

&lt;p&gt;This means that the Oracle JDK could differ from the OpenJDK based binaries and the JDKs provided by other vendors.
Most of the major vendors have continued to take efforts to keep them in sync as much as possible, but this does mean you should develop, test, … your applications on the binaries you plan on using in production, or you might end up with some unexpected results during production.
To prevent big differences, a TCK is  provided by Oracle for OpenJDK distributions.
More about that later in the article.&lt;/p&gt;

&lt;h2 id=&quot;openjdk-updates&quot;&gt;OpenJDK updates&lt;/h2&gt;

&lt;p&gt;The OpenJDK community works on free, open-source implementations of the Java SE standard.
Oracle contributes a lot to these projects and forms the basis for both the Oracle JDK and OpenJDK builds.
OpenJDK 11+ versions are interchangeable with Oracle’s JDK for applications.
Oracle will continue to contribute to OpenJDK while they provide updates for the corresponding Oracle OpenJDK build version.
Once that version is superseded, Oracle will cease contributing to that version and start updating the next one.&lt;/p&gt;

&lt;h3 id=&quot;updates-from-other-vendors&quot;&gt;Updates from other vendors&lt;/h3&gt;

&lt;p&gt;Oracle is very receptive of the idea on having community maintenance and will continue to support handover of the OpenJDK to the community to a qualified volunteering entity once they have moved on to work on the next version.
Red Hat is currently globally leading and updating OpenJDK 6 and OpenJDK 7 projects after Oracle ended updates for them.
After Red Hat stopped updating OpenJDK 6, Azul Systems took over leading the project and continued to provide updates for the project to this day of writing.&lt;/p&gt;

&lt;p&gt;Red Hat is currently leading OpenJDK 8 and OpenJDK 11 since April 2019.
This does not mean that they are the sole contributors to the project.
Other vendors are providing patches and updates as well. 
The biggest contributions are happening to the OpenJDK 8 project with contributions from not just Red Hat, but Amazon, Azul Systems, BellSoft, IBM, jClarity, Google, Sap and many other vendors.&lt;/p&gt;

&lt;p&gt;For consistency, these vendors provide extended update cycles for their OpenJDK for the same versions that are deemed LTS for Oracle’s JDK.&lt;/p&gt;

&lt;h2 id=&quot;openjdk-providers&quot;&gt;OpenJDK providers&lt;/h2&gt;

&lt;h3 id=&quot;build-yourself-from-source-providers&quot;&gt;Build yourself from source providers&lt;/h3&gt;

&lt;p&gt;One of the options you have is to build a JDK from source code meaning OpenJDK, no commercial support and you need to build it yourself and keep it updated.
This is not something we would suggest doing since this requires you to put resources in, checking for updates and applying patches if needed.
There is also no way of getting any commercial support if you ever need it.&lt;/p&gt;

&lt;h4 id=&quot;source-providers&quot;&gt;Source providers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openjdk-sources.osci.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tarballs (Java 7+)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.github.com/AdoptOpenJDK/openjdk-build&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AdoptOpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-binaries-from-providers&quot;&gt;Using binaries from providers&lt;/h3&gt;

&lt;p&gt;The most convenient option is to use binary distributions from other providers that are providing public updates.&lt;/p&gt;

&lt;h4 id=&quot;free-binary-distributions--commercial-support&quot;&gt;Free binary distributions &amp;amp; commercial support&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Distribution&lt;/th&gt;
      &lt;th&gt;Versions&lt;/th&gt;
      &lt;th&gt;TCK&lt;/th&gt;
      &lt;th&gt;Public updates&lt;/th&gt;
      &lt;th&gt;Arch(*)&lt;/th&gt;
      &lt;th&gt;Commercial Support&lt;/th&gt;
      &lt;th&gt;Commercial Support ended&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://adoptopenjdk.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AdoptOpenJDK&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Until at least Sep 2023&lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;IBM, jClarity&lt;/td&gt;
      &lt;td&gt;Indefinitely (IBM), Until at least 2025 (jClarity)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://aws.amazon.com/corretto/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Corretto&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until at least June 2023&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.azul.com/downloads/zulu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azul Zulu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;Azul&lt;/td&gt;
      &lt;td&gt;March 2025 (8), September 2026 (11)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.bell-sw.com/pages/products&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bellsoft Liberica&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until at least 2023&lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;BellSoft&lt;/td&gt;
      &lt;td&gt;Until 2026&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://openjdk.java.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oracle OpenJDK&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until Mar 2019&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;Oracle (through the Oracle JDK)&lt;/td&gt;
      &lt;td&gt;September 2023, September 2026 (extended support)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://sap.github.io/SapMachine/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SapMachine&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;September 2022&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;SAP&lt;/td&gt;
      &lt;td&gt;September 2022&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;* &lt;strong&gt;Major&lt;/strong&gt; = Linux x86, MacOS, Windows x64,
&lt;strong&gt;Minor&lt;/strong&gt; = various other platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a general philosophy, AdoptOpenJDK will continue to build binaries for LTS releases as long as the corresponding upstream source (Oracle OpenJDK) is actively maintained.&lt;/em&gt;
&lt;em&gt;The Eclipse OpenJ9 Support Document covers extra support info for that VM.&lt;/em&gt;
&lt;em&gt;This information might change overtime and was gathered from the vendors pages and support.&lt;/em&gt;
&lt;em&gt;Contact vendors for the most recent information.&lt;/em&gt;
&lt;em&gt;jClarity will support their JDK binaries as long as produced which likely means 2028&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;technology-compatibility-kit-for-java-tck&quot;&gt;Technology Compatibility Kit for Java (TCK)&lt;/h5&gt;

&lt;p&gt;The Java Compatibility Kit (a.k.a., the JCK or TCK for Java SE) is an extensive test suite used by Oracle and licensees to ensure compatible implementations of its platform.
This ensures that the OpenJDK implementation does not have major differences from the Oracle’s JDK, but it is still possible for there to be minor differences in the binary distribution.&lt;/p&gt;

&lt;p&gt;Sun released a specific license to permit running the TCK in the OpenJDK context for any GPL implementation deriving substantially from OpenJDK.
This also means to be TCK compliant.
The JDK distribution is required to use the same GPL license.
Otherwise you cannot obtain legal access the TCK.
It is available at no charge to developers who are planning to deploy a compatible Java implementation based on code derived from the OpenJDK or who are participating in OpenJDK research, bug fixes, code enhancement and/or ports to other hardware or software architectures.&lt;/p&gt;

&lt;h3 id=&quot;using-distributions-provided-by-your-linux-distribution&quot;&gt;Using distributions provided by your linux distribution&lt;/h3&gt;

&lt;p&gt;Many Linux distributions will continue to provide OpenJDK binaries for their distributions through their package managers including and not limited to Debian, Ubuntu, CentOS, Fedora, Alpine, …&lt;/p&gt;

&lt;h2 id=&quot;java-desktop-java-web-start-and-javafx&quot;&gt;Java Desktop, Java Web Start and JavaFX&lt;/h2&gt;

&lt;p&gt;There are various changes with Desktop Java SE starting with the Oracle JDK 11 that you should be aware of.&lt;/p&gt;

&lt;h3 id=&quot;javafx-and-openjfx&quot;&gt;JavaFX and OpenJFX&lt;/h3&gt;

&lt;p&gt;As of Java version 11, both Oracle’s JDK and Oracle’s OpenJDK will no longer contain the JavaFX or OpenJFX libraries.
You will have to add these libraries yourself or through build tools.
The update cycle is the same as OpenJDK: if OpenJFX 12 is released, public updates are dropped for OpenJFX 11.&lt;/p&gt;

&lt;h3 id=&quot;java-packager&quot;&gt;Java Packager&lt;/h3&gt;

&lt;p&gt;The Java packager, which allows you to bundle applications and their dependencies with the JVM, is no longer part of the OpenJDK and has been removed from all of Oracle’s JDK versions starting from version 11.
There is a &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8200758&quot;&gt;JEP&lt;/a&gt; to add a new packaging tool to OpenJDK but this is not yet ready for Java 11.&lt;/p&gt;

&lt;h3 id=&quot;java-webstart&quot;&gt;Java WebStart&lt;/h3&gt;

&lt;p&gt;Java WebStart has been removed from Oracle’s JDK versions starting from version 11.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alternatively you can use &lt;a href=&quot;https://icedtea.classpath.org/wiki/IcedTea-Web&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IcedTea-Web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AdoptOpenJDK will be supporting OpenJDK binaries with IcedTea-Web&lt;/li&gt;
  &lt;li&gt;IBM will be supporting AdoptOpenJDK builds of OpenJDK with IcedTea-Web&lt;/li&gt;
  &lt;li&gt;Builds from Red hat include a simplified IcedTea-Web installer (ojdkbuild)&lt;/li&gt;
  &lt;li&gt;Karukun is working on an &lt;a href=&quot;https://dev.karakun.com/webstart/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OSS replacement for Web Start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;p&gt;The information in this blog post comes from various sources which will be listed below.
A huge thanks goes out to the creators of the “Java Is Still Free” document who granted us permissions to use their post for this blog post.
We used these sources either because we were granted permissions to use them or the terms allowed us to use them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java Is Still Free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mail.openjdk.java.net/pipermail/jdk-updates-dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The jdk-updates-dev Archives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Duncan&quot;, &quot;last_name&quot;=&gt;&quot;Casteleyn&quot;, &quot;github&quot;=&gt;&quot;DuncanCasteleyn&quot;, &quot;linkedin&quot;=&gt;&quot;duncan-casteleyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/duncan-casteleyn/&quot;, &quot;avatar&quot;=&gt;&quot;duncan-casteleyn.jpg&quot;, &quot;title&quot;=&gt;&quot;Intern&quot;, &quot;email&quot;=&gt;&quot;duncan.casteleyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Duncan is a Java Consultant at Ordina Belgium, who is passionate about Java technologies. He likes to explore Spring Boot, Kotlin and other new technologies that he can use to develop applications.&quot;}</name><email>duncan.casteleyn@ordina.be</email></author><category term="Java" /><category term="Java" /><category term="OpenJDK" /><category term="JDK" /><summary type="html">Around February we had a discussion in our chat group of developers which made us realise how much confusion there is on the new update cycle for the JVM. We decided it would be good idea to write a blog post that should clear up the confusion for our developers and clients.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-05-20-JDK-distributions/openjdk.png" /></entry><entry><title type="html">BA &amp;amp; Beyond - an inspiring conference for keen business analysts</title><link href="https://ordina-jworks.github.io/agile/2019/05/15/BA-and-Beyond.html" rel="alternate" type="text/html" title="BA &amp; Beyond - an inspiring conference for keen business analysts" /><published>2019-05-15T00:00:00+00:00</published><updated>2019-05-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/05/15/BA-and-Beyond</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/05/15/BA-and-Beyond.html">&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://ba-beyond.eu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BA &amp;amp; Beyond&lt;/a&gt; conference is a two day programme enabling business analysts to share their experiences and find inspiration in their daily work.
The conference was an intense mix of talks and workshops, providing space for inspiring people to share their stories. 
After each talk, the attendees had the possibility to engage in conversation during a Q&amp;amp;A. 
The sessions were very interactive and really empowering.
This second edition of the BA &amp;amp; Beyond conference was held during two days in Brussels and Amsterdam. 
Various topics were discussed, such as visual facilitation techniques, «How to Make an Agile Project Succeed», business analyst behaviours, or «The Inner Architecture of a Performer». 
What follows below is an overview of some of these talks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#when-bas-go-bad---christina-lovelock&quot;&gt;When BAs go BAD - Christina Lovelock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-7-hidden-layers-behind-agile-techniques-ever-wondered-why-we-use-post-its-during-retrospectives--pieter-van-driessche&quot;&gt;The 7 hidden layers behind agile techniques: Ever wondered why we use post-its during retrospectives? – Pieter Van Driessche&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#you-are-doing-it-wrong-the-truth-about-user-stories--pieter-hens&quot;&gt;You are doing it wrong: The truth about user stories – Pieter Hans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;when-bas-go-bad---christina-lovelock&quot;&gt;When BAs go BAD - Christina Lovelock&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Christina Lovelock&quot; src=&quot;/img/ba-and-beyond-2019/christina-lovelock.jpeg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.linkedin.com/in/christina-lovelock/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Christina Lovelock&lt;/a&gt; has built BA teams in several public sector organisations including the NHS, ranging in size from 5 to 120 Business Analysts. 
She currently leads the BA practice at the University of Leeds.
She is active in the BA professional community in the UK, attending and regularly speaking at local and national events and conferences.&lt;/p&gt;

&lt;p&gt;Christina’s talk was purely soft skills related and depicts the sort of behaviours shown by business analysts when they face difficult situations.
Some typical BA behavioural mistakes are triggered by the way they see themselves in the team. 
For instance, a BA could feel as if he or she is not part of the team: there are de facto less analysts than developers in a team which can lead to an «Us VS Them» mentality.
It is also sometimes difficult to build a BA community, and being sandwiched between IT and the business can sometimes lead to negative self perceptions such as «I am just a BA» or «Neither the PO nor the developers understand me».&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;bad-ba-behaviours&quot; src=&quot;/img/ba-and-beyond-2019/bad-ba-behaviours.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Understanding that the BA is as much a member of the team as the others and that he or she is not the only one accountable for the communication between IT and Business, leads to better collaboration and is a great step towards agility, allowing all team members to be more confident and positive.
Whatever your role in a project team; collaboration, transparency and confidence - in yourself and in your team mates - as well as clear communication are key factors to succeed together.&lt;/p&gt;

&lt;p&gt;Another difficulty in the BA role is providing the right level of detail in your analysis. 
Indeed it is sometimes difficult to have the right level of focus on the right things. 
Moreover, being a good BA is also about sharing knowledge, tools and techniques. 
Talking with other analysts and contributing to the practice are important aspects of the job.&lt;/p&gt;

&lt;p&gt;Of course all those behaviours and feelings don’t just apply to business analysts but also to every team role: scrum master, developer, product owner, tester.
This talk gave us the opportunity to identify and name some feelings we can face as business analysts while giving us the keys to find solutions to the difficult situations we could face.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ba-behaviours&quot; src=&quot;/img/ba-and-beyond-2019/ba-behaviours.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-7-hidden-layers-behind-agile-techniques-ever-wondered-why-we-use-post-its-during-retrospectives--pieter-van-driessche&quot;&gt;The 7 hidden layers behind agile techniques: Ever wondered why we use post-its during retrospectives? – Pieter Van Driessche&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Pieter Van Driessche&quot; src=&quot;/img/ba-and-beyond-2019/pieter-van-driessche.jpg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.linkedin.com/in/pietervandriessche/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pieter Van Driessche&lt;/a&gt; has worked in IT for over 20 years and did most of the common software jobs: developer, analyst, team lead and project manager. 
He experimented with cultural change management for 2 years, after which he returned to IT because of the faster speed of change. 
He has been an agile coach for almost 15 years and coaches all kinds of teams in all kinds of organisations: software, operation or marketing teams, in Belgium and abroad, in small and large organisations.&lt;/p&gt;

&lt;p&gt;This talk was a great eye-opener about a simple thing we all do every day in our scrum teams: sticking post-its! 
Although this has become a very common habit, we might not know why post-its are used during scrum meetings and especially during retrospectives. 
Below are some insights.&lt;/p&gt;

&lt;h3 id=&quot;psychological-safety&quot;&gt;Psychological safety&lt;/h3&gt;

&lt;p&gt;Thanks to post-its, all participants get the same space. 
Post-its give everybody a voice, everybody can express themselves without fear. 
Moreover, post-its give a real chance to introvert people.&lt;/p&gt;

&lt;h3 id=&quot;team-objectives-and-peer-pressures&quot;&gt;Team objectives and peer pressures&lt;/h3&gt;

&lt;p&gt;By giving post-its to everybody attending the retrospective, peer pressure encourages everybody to participate and everybody will stick at least one post-it. 
And the more post-its we have, the greater the outcome we build.
This fact is closely linked to our comfort zone. 
Although it is sometimes difficult to say what we really think, the post-its and the peer pressure force us to get out of our comfort zone by expressing ourselves, finding solutions and being confronted with our team mates.
Getting out of our comfort zone promotes continuous improvement, and that’s what we all want.&lt;/p&gt;

&lt;h3 id=&quot;the-physical-connection&quot;&gt;The physical connection&lt;/h3&gt;

&lt;p&gt;Moving post-its on a white board allows us to make abstract things tangible. 
As a consequence, we are more involved in our daily work as we, and the others, can see our progress in a physical way.&lt;/p&gt;

&lt;h2 id=&quot;you-are-doing-it-wrong-the-truth-about-user-stories--pieter-hens&quot;&gt;You are doing it wrong: The truth about user stories – Pieter Hens&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Pieter Hens&quot; src=&quot;/img/ba-and-beyond-2019/pieter-hens.jpg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.linkedin.com/in/henspieter/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pieter Hens&lt;/a&gt; has been working for over 15 years in a software product development and analysis setting. 
He has taken up roles as a business and functional analyst, project manager, coach and team lead in projects of various sizes. 
He currently specialises in the full range of software product management: product strategy, discovery and development.&lt;/p&gt;

&lt;p&gt;User stories are part of the root of our projects, we use them on a daily basis to achieve our goals, however the user stories are sometimes wrongly used, leading to counterproductive effects.
Here are some myths about user stories.&lt;/p&gt;

&lt;h3 id=&quot;the-analyst-writes-the-user-stories-and-the-dev-team-implements-them&quot;&gt;The analyst writes the user stories and the dev team implements them&lt;/h3&gt;

&lt;p&gt;Writing a user story is not the BA responsibility, elaborating a user story is a team effort and everybody in the team is eligible to write user stories.
Writing the user stories together reduces risk of misunderstanding. 
Before implementing a user story, all team members should agree on and understand the user story content.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;glad-we-all-agree&quot; src=&quot;/img/ba-and-beyond-2019/glad-we-all-agree.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;we-dont-need-documents-or-models-anymore&quot;&gt;We don’t need documents or models anymore&lt;/h3&gt;

&lt;p&gt;User stories have to be backed up by documents and models. 
A user story alone is not enough, we need a context and the big picture.
User stories are not meant to replace documents, they are meant to tell stories.&lt;/p&gt;

&lt;h3 id=&quot;if-it-does-not-fit-the-as-a-role-i-can-do-something---template-it-is-not-a-user-story&quot;&gt;If it does not fit the ‘As a [role] I can [do something]’ - template, it is not a user story&lt;/h3&gt;

&lt;p&gt;Having a template for the user story is a good way to ease the understanding of the common goal. 
Having our requirements standardised simplifies the processes.
However, not all user stories fit the same strict template. 
Even though a template is important, we should focus less on the template and more on the content itself.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;template-zombie&quot; src=&quot;/img/ba-and-beyond-2019/template-zombie.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned a lot during these two days and the conference gave me new insights and tools to deal with my work every day.
This great experience also gave me the opportunity to talk and share knowledge and information with other business analysts. 
It was really inspiring.&lt;/p&gt;

&lt;p&gt;The slides for these presentations can be found on the website of &lt;a href=&quot;https://ba-beyond.eu/2019-programme.php&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BA&amp;amp;Beyond&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Astrid&quot;, &quot;last_name&quot;=&gt;&quot;Legrand&quot;, &quot;permalink&quot;=&gt;&quot;/author/astrid_legrand/&quot;, &quot;avatar&quot;=&gt;&quot;astrid-legrand.jpeg&quot;, &quot;title&quot;=&gt;&quot;Business Analyst &amp; Scrum Master&quot;, &quot;linkedin&quot;=&gt;&quot;astrid-legrand-2a813685&quot;, &quot;email&quot;=&gt;&quot;astrid.legrand@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Astrid works as a Business Analyst consultant at Ordina Belgium. She is also a Scrum Master who is eager to learn and focus on continuous improvement within an agile environment.&quot;}</name><email>astrid.legrand@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="Conference" /><category term="BA&amp;Beyond" /><category term="Business Analysis" /><category term="Scrum" /><category term="User stories" /><category term="Post-its" /><category term="Cross functional teams" /><summary type="html">The BA &amp;amp; Beyond conference is a two day programme enabling business analysts to share their experiences and find inspiration in their daily work. The conference was an intense mix of talks and workshops, providing space for inspiring people to share their stories. After each talk, the attendees had the possibility to engage in conversation during a Q&amp;amp;A. The sessions were very interactive and really empowering. This second edition of the BA &amp;amp; Beyond conference was held during two days in Brussels and Amsterdam. Various topics were discussed, such as visual facilitation techniques, «How to Make an Agile Project Succeed», business analyst behaviours, or «The Inner Architecture of a Performer». What follows below is an overview of some of these talks.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/ba-and-beyond-2019/main-image.png" /></entry><entry><title type="html">Istio Service Mesh: service to service communication</title><link href="https://ordina-jworks.github.io/cloud/2019/05/03/istio-service-mesh-s2s.html" rel="alternate" type="text/html" title="Istio Service Mesh: service to service communication" /><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/05/03/istio-service-mesh-s2s</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/05/03/istio-service-mesh-s2s.html">&lt;blockquote&gt;
  &lt;p&gt;This post will describe how to use the Istio service mesh to provide service to service authentication and authorization in a Kubernetes cluster.
It will show how ServiceRoles, ServiceRoleBindings and Identities in Istio can be used to achieve this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-istio&quot;&gt;What is Istio?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#istio-concepts&quot;&gt;Istio concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#show-me-the-code&quot;&gt;Show me the code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-istio&quot;&gt;What is Istio?&lt;/h2&gt;

&lt;p&gt;Istio is a service mesh created by Google, Lyft and IBM. 
It aims to simplify some security and management aspects of a microservices software architecture.
More information on Istio and its features can be found in its &lt;a href=&quot;https://istio.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;docs&lt;/a&gt;.
In this blogpost we will highlight one of the key security features of Istio: service to service authentication and authorization.
For the sake of simplicity, this post will focus on an Istio setup in Kubernetes.&lt;/p&gt;

&lt;p&gt;In a microservices architecture, managing access to services can be a challenging operation. 
For end-user facing services, JWTs are used to add authorization information to a request.
They are used by the service to determine which end-user is making the request.
These tokens can be generated based on information that the end-user provides to an identity provider.
In most cases this information is a username and password, with some additional 2FA if possible.
This setup can be achieved by using OpenID Connect as a protocol with the authorization code grant flow and an identity provider like Keycloak.&lt;/p&gt;

&lt;p&gt;When services communicate with each other, they also need to provide an identity to each other.
A common option to do this is by using client credentials grant flow of OpenID Connect.
In this flow a service provides its client credentials to authenticate against the identity provider, and to be able to generate an access token once authenticated.
This token will be used to communicate to a service.&lt;/p&gt;

&lt;p&gt;These are types of authorization flows on application level.
They allow services to determine what resources an end-user or service can access.
Istio’s service to service role based acccess control (RBAC) is not on application level but on communication level.
It specifies which services can connect and communicate with each other. 
In order to achieve this, Istio connects an identity to each service in the mesh and allows it to authenticate itself.
The requested service can use this identity to determine if the service is allowed to connect or not.&lt;br /&gt;
Istio makes use of proxies to handle all traffic (into and out of services) and using mutual trusted certificates to secure the connection and provide an identity to these proxies.
When using the automatic proxy injection, enabling Istio’s service to service RBAC mechanism is almost as easy as flipping a switch.&lt;/p&gt;

&lt;p&gt;There are five main components responsible for making this possible in Istio: Citadel, Pilot, Galley, Mixer and Envoy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Citadel&lt;/em&gt; is Istio’s fortress of trust.
It manages all certificates and acts as a Root CA in the Istio setup.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Galley&lt;/em&gt; is the main configuration manager.
It is responsible for gathering all required information from the underlying platform.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pilot&lt;/em&gt; manages all routing information and manages all the information for the proxies.
It will initialise the proxies during start-up with their configuration and the certificates from Citadel.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mixer&lt;/em&gt; is responsible for all monitoring, logging and authorization information.
Whenever a proxy performs an action, Mixer knows about it. 
This allows it to both monitor and log connections, but also provide authorization information to the proxies.&lt;/p&gt;

&lt;p&gt;The final piece to the puzzle is &lt;em&gt;Envoy&lt;/em&gt;. 
Envoy is the sidecar proxy responsible for handling the actual traffic between services in the service mesh.
It will setup and manage the required mTLS connections and perform all required check with regards to the routing. 
Envoy is managed as a separate project and in theory an other proxy could be used, but Envoy is most common.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; src=&quot;/img/2019-04-14-istio-service-mesh-s2s/arch.svg&quot; alt=&quot;Istio architecture drawing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A final, optional component is the sidecar injector.
This component is not mandatory for the service mesh to work, but makes using it a lot easier.
The injector is set up as a mutating webhook admission controller. 
In a nutshell, this allows the injector to inspect and update some specific objects in the Kubernetes API.
It will automatically inject the Envoy sidecar proxy into every pod which needs it.&lt;/p&gt;

&lt;h2 id=&quot;istio-concepts&quot;&gt;Istio concepts&lt;/h2&gt;

&lt;p&gt;Istio stores all its configuration directly in the Kubernetes API through the use of Custom Resource Definitions (CRDs).
Next, a small description of the ones relevant for our blog are explained.&lt;/p&gt;

&lt;h3 id=&quot;policies&quot;&gt;Policies&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/docs/concepts/security/#authentication-policies&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Policies&lt;/a&gt; are at the heart of the mTLS setup in Istio.
They define when mTLS should be used and how.
Policies can be scoped in two levels: mesh wide (Mesh Policies) and namespace wide.&lt;/p&gt;

&lt;h3 id=&quot;destination-rules&quot;&gt;Destination Rules&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/docs/concepts/traffic-management/#destination-rules&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Destination rules&lt;/a&gt; are a set of rules that are evaluated when a service is called.
They define multiple different routing options.
For the scope of this blogpost, they will only be used to define which services require to be accessed using mTLS.&lt;/p&gt;

&lt;h3 id=&quot;service-roles&quot;&gt;Service Roles&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/docs/concepts/security/#servicerole&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service Roles&lt;/a&gt; are used in Istio to describe which access a role provides. 
It specifies which endpoints of a specific service can be used.
Currently this is described by specifying the full internal DNS name of the service, the methods and the paths that the role can access.&lt;/p&gt;

&lt;h3 id=&quot;service-role-bindings&quot;&gt;Service Role Bindings&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/docs/concepts/security/#servicerole&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service Role Bindings&lt;/a&gt; are used to connect identities (service accounts) or identity properties (namespaces) to actual roles. 
When a binding is created, the identities connected to it are allowed the access specified in the referenced service role.&lt;/p&gt;

&lt;h2 id=&quot;show-me-the-code&quot;&gt;Show me the code&lt;/h2&gt;

&lt;p&gt;The Istio service to service authentication and authorization will now be explained by using an example setup.
Note that the code snippets have been shortened in this blogpost.
This is denoted with three dots &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;.
The full examples can be found in the accompanying repository on &lt;a href=&quot;https://github.com/pietervincken/istio-service-to-service-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;This demo assumes that Istio is already installed in the cluster with the demo profile enabled. 
See &lt;a href=&quot;https://istio.io/docs/setup/kubernetes/install/helm/#option-1-install-with-helm-via-helm-template&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Install Istio&lt;/a&gt; for more information on the installation of Istio.
In the demo repository, a small &lt;a href=&quot;https://github.com/pietervincken/istio-service-to-service-demo/blob/master/1-install-istio.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;script&lt;/a&gt; can be found that can assist in setting up the demo environment&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;The setup of our application is a very simple service with a database backend. 
Our service exposes one HTTP GET endpoint which will be accessed by the outside world. 
Our database is an Apache CouchDB instance.
Both the database and the service run inside Kubernetes.
The setup is shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; src=&quot;/img/2019-04-14-istio-service-mesh-s2s/setup.png&quot; alt=&quot;demo setup&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-namespace&quot;&gt;Create namespace&lt;/h3&gt;

&lt;p&gt;First, a new namespace is created.
The service and database will both be added to this namespace.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create namespace with-istio
kubectl label namespace with-istio istio-injection&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-couchdb&quot;&gt;Install CouchDB&lt;/h3&gt;

&lt;p&gt;Next, the database is installed.
This looks like a normal stateful set for a CouchDB database.
There are some important changes.&lt;/p&gt;

&lt;p&gt;First, a specific service account is created for CouchDB. 
This is needed as Istio will use the service accounts in Kubernetes as its identities.
The service account is linked to the podspec in the stateful set definition. 
This way, it can be used by the Istio proxy later on.&lt;/p&gt;

&lt;p&gt;Secondly, the probes have been adapted to work in Istio.
Since Istio intercepts all traffic in the pod, it will also intercept requests from the Kube API to the service.
Since the demo setup requires mTLS to be used, the probes would fail because the Kube API doesn’t use mTLS.
Instead of manually changing the probes, Istio now has the option to rewrite the probes during the automatic proxy injection. 
More information on the probes can be found in the &lt;a href=&quot;https://istio.io/help/ops/setup/app-health-check/#probe-rewrite&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Istio Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that no Istio specific configuration is required in the service manifests.
This is possible because the demo profile automatically enables the sidecar injector and we enabled the injection on the &lt;code class=&quot;highlighter-rouge&quot;&gt;with-istio&lt;/code&gt; namespace using the &lt;code class=&quot;highlighter-rouge&quot;&gt;istio-injection=enabled&lt;/code&gt; label.
The automatic sidecar injector will inject the Envoy sidecar into all pods.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: couchdb/templates/serviceaccount.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: couchdb/templates/service.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: couchdb/templates/statefulset.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;StatefulSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;couchdb:2.3.0&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5984&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:5984/_up&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;readinessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:5984/_up&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-the-service-test-app&quot;&gt;Install the service: test-app&lt;/h3&gt;

&lt;p&gt;A small NodeJS application was created for this demo.
It exposes an HTTP GET endpoint which connects to the CouchDB database.
The manifests are very similar to the CouchDB versions.
As with CouchDB, note that no Istio specific configuration is required on the manifests.
A service account is created and linked to provide the service with a unique identity in Kubernetes and Istio.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: test-app-chart/templates/serviceaccount.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-test-app-chart&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: test-app-chart/templates/service.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-test-app-chart&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Source: test-app-chart/templates/deployment.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-test-app-chart&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-chart&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-chart&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app.kubernetes.io/instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-test-app-chart&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-app-chart&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test-app:latest&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The current setup is displayed in the following drawing.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 446px;&quot; src=&quot;/img/2019-04-14-istio-service-mesh-s2s/istio-basic-setup.png&quot; alt=&quot;Basic setup in Istio&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enabling-mutual-tls-mtls&quot;&gt;Enabling mutual TLS (mTLS)&lt;/h3&gt;

&lt;p&gt;Currently the service can connect to the backend just fine. 
TLS is currently not used to communicate between the service.&lt;/p&gt;

&lt;p&gt;The following manifest defines a policy which changes this. 
It is a namespace scoped policy telling Istio that all services in the &lt;code class=&quot;highlighter-rouge&quot;&gt;with-istio&lt;/code&gt; namespace should &lt;strong&gt;ONLY&lt;/strong&gt; accept mTLS connections.
This configuration will be picked up by Pilot and distributed to all Envoy proxies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;with-istio&lt;/code&gt; namespace.
When this policy is applied, Envoy will drop any requests it gets that don’t use mTLS.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;authentication.istio.io/v1alpha1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Policy&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;default&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;with-istio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;peers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mtls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;STRICT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note, this policy only affects the incoming connections on the Envoy proxy.
When a request would be sent to the test-app service now, it would be rejected with an HTTP 503 error code.
This is shown in the following drawing.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 408px;&quot; src=&quot;/img/2019-04-14-istio-service-mesh-s2s/istio-mtls-broken.png&quot; alt=&quot;Broken mTLS drawing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, the outgoing (client) connections needs to be configured to use mTLS.
This can be done by specifying a destination rule for the services.
A destination rule defines a set of rules that are evaluated for every outgoing request from a proxy.
This rules defines that every proxy in &lt;code class=&quot;highlighter-rouge&quot;&gt;with-istio&lt;/code&gt; namespace needs to use mutual TLS for every service that ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;.local&lt;/code&gt;.
By applying this rule, the requests will succeed again on the test-app service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;networking.istio.io/v1alpha3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DestinationRule&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;default&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;with-istio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*.local&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ISTIO_MUTUAL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enabling-role-based-access-control-rbac-on-the-services&quot;&gt;Enabling Role Based Access Control (RBAC) on the services&lt;/h3&gt;

&lt;p&gt;Services can now communicate securely over mTLS.
To increase the security even further, RBAC can be added to the services.
RBAC allows for roles to be defined that specify access to specific services in the cluster. 
By attaching these roles to service accounts (which are connected to services) services can be permitted to access specific other services. 
This limits the reach a single service has in the cluster and therefor adheres to the least privileges principle.&lt;/p&gt;

&lt;p&gt;The following manifest defines a cluster RBAC configuration.
Such configuration can only exist once in the entire service mesh and it needs to have the name &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;.
The mode &lt;code class=&quot;highlighter-rouge&quot;&gt;ON_WITH_INCLUSION&lt;/code&gt; specifies that all subjects that are listed in the inclusion section need to have RBAC enabled. 
These subjects can be namespaces and/or specific services.
Specifying the namespace &lt;code class=&quot;highlighter-rouge&quot;&gt;with-istio&lt;/code&gt; in the inclusion section, enables RBAC for all services in that namespace.
By default the RBAC configuration will reject all requests which don’t have the proper access defined with an HTTP 403 error code.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbac.istio.io/v1alpha1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRbacConfig&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ON_WITH_INCLUSION'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inclusion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;namespaces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;with-istio'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this RBAC config is applied, requests to the test-app instance will start failing again. 
The test-app currently doesn’t have a role attached to its service account that allows it to access the CouchDB database. 
Therefor all requests to the service will be rejected with an HTTP error code of 403.
This is shown in the following drawing.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 417px;&quot; src=&quot;/img/2019-04-14-istio-service-mesh-s2s/istio-rbac-refused.png&quot; alt=&quot;RBAC refuses connection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following manifest creates a role that allows access to the CouchDB service for all GET requests on any given path.
Note that the full service name is used in the services specification, this is currently required by Istio.
This is only needed for Istio to identify the traffic, short names can still be used to access the service.
By applying this service role, nothing will change to the requests to the test-app since the role is not yet connected to the service account of the test-app service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbac.istio.io/v1alpha1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;couchdb-role&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;with-istio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;couchdb.with-istio.svc.cluster.local&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GET&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So next, we link the new role to the service account of the test-app service.
This is done through a service role binding.
There are two sections to this binding: the role and the subjects.
The role is the one that was created using the previous manifest. 
The subjects can be any identity known to Istio. 
In the demo scenario, only the service accounts are known.
Istio defines a service account as a user identity. 
As with the service names, the service account reference needs to be the full reference scoped towards the cluster.
This allows services from outside of the namespaces to be specified as well.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbac.istio.io/v1alpha1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceRoleBinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind-test-app-service-couchdb-role&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;with-istio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cluster.local/ns/with-istio/sa/test-app-test-app-chart&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceRole&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;couchdb-role&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After applying the last manifest, requests should again be authorized and allowed to connect to the CouchDB instance.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This demo showed how Istio can be used to secure communication between services using mTLS.
Moreover it showed how the service mesh level authentication can be used to grant or deny access to services in the mesh.
A role can be connected to a service account to allow access. 
Important to note is that the service mesh only allowes or denies traffic.
It doesn’t influence the application level access.&lt;/p&gt;

&lt;p&gt;In a nutshell, Istio allows cluster admins to enable secure communication, and strong authentication and authorization mechanisms on their Kubernetes cluster without having to manage all kinds of certificates, usernames and passwords. 
The application developers don’t need to adopt their application in order to communicate securely in the cluster, nor do they have to change their deployment configuration to enable the service mesh.&lt;/p&gt;

&lt;p&gt;This blogpost only highlighted a portion of the features of Istio. 
Security is only a part of the feature set. 
Istio also allows advanced traffic management, monitoring and logging.
Maybe something for a future blogpost.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Cloud" /><category term="Istio" /><category term="Service Mesh" /><category term="Kubernetes" /><category term="Cloud" /><category term="Microservices" /><summary type="html">This post will describe how to use the Istio service mesh to provide service to service authentication and authorization in a Kubernetes cluster. It will show how ServiceRoles, ServiceRoleBindings and Identities in Istio can be used to achieve this.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-04-14-istio-service-mesh-s2s/istio.jpeg" /></entry><entry><title type="html">How to keep your RxJS streams from bursting their banks</title><link href="https://ordina-jworks.github.io/development/2019/04/29/Keep-your-RxJS-streams-from-bursting-their-banks.html" rel="alternate" type="text/html" title="How to keep your RxJS streams from bursting their banks" /><published>2019-04-29T00:00:00+00:00</published><updated>2019-04-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2019/04/29/Keep-your-RxJS-streams-from-bursting-their-banks</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2019/04/29/Keep-your-RxJS-streams-from-bursting-their-banks.html">&lt;p&gt;In my current role as Angular coach I try to help my colleagues as much as possible to make their applications in a logical and comprehensible way.
I’m a huge supporter of RxJS for reactive programming and I ask others to consider using the technology to help them create declarative code and prevent them from going to Callback Hell.
But as people start to embrace RxJS streams, the difficulties paired with using reactive programming start to surface and I’ve concluded that there also exists something I’d like to call &lt;em&gt;Observable Purgatory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At the moment of writing this, I’m staring at an Angular component file having 548 lines - no inline template or styles - of which 64 lines are imports and 411 lines either are a declaration or instantiation of a stream or are a function in which a stream is used.
Some of these functions are more than 20 lines, and 3 are even more than 40 lines.
Holy nightmare, Batman!
Imagine the unit tests needed to test all possible cases.
Apparently those aren’t needed, because the biggest function - 48 lines - is tested in 2 unit tests and of course “everything works, doesn’t it?”&lt;/p&gt;

&lt;p&gt;So without further ado, here are the most common bad practices and their solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Unless explicitly mentioned, these are NOT Angular specific.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;consuming-all-the-ram&quot;&gt;Consuming all the RAM&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Jack Sparrow: But why is the RAM gone&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/2y7g2l.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Developers who are new to RxJS will often forget that a subscription can live on during the whole life time of your application.
Most of the time they have only worked with simple XHR requests and those will by default emit only one value and then complete.
But reactive programming allows to create streams that emit multiple values and might never complete.
This will cause memory leaks, unexpected behaviour and therefor bugs.
The solution is quite simple: just unsubscribe or take only the needed events!&lt;/p&gt;

&lt;p&gt;You can cancel a subscription by calling its &lt;strong&gt;unsubscribe&lt;/strong&gt; function, but then you’re skimming the power of reactive programming.
Operators like - but not limited to - &lt;a href=&quot;https://rxmarbles.com/#first&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;first&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://rxmarbles.com/#take&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;take&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://rxmarbles.com/#takeWhile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;takeWhile&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://rxmarbles.com/#takeUntil&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;takeUntil&lt;/strong&gt;&lt;/a&gt; will close a subscription as soon as the condition is met.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// --0--1--2--3--4--5--6--7--8--9--...--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// --0--1--2--3--(4|)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: When using mergeMap or another variant in combination with takeUntil, make sure you add the takeUntil pipe at the end.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: CANCEL SUBSCRIPTIONS THAT DO NOT COMPLETE BY THEMSELVES&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;angular-specific-use-the-asyncpipe&quot;&gt;Angular specific: Use the AsyncPipe&lt;/h3&gt;

&lt;p&gt;Angular provides an &lt;a href=&quot;https://angular.io/api/common/AsyncPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AsyncPipe&lt;/a&gt;, which lets you subscribe to a stream from inside your component’s template.
The great advantage is that this subscription will automatically be openend when the component or the element in which it’s used is created and cancelled when the component is destroyed.
A quick example of a counter of seconds:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;p&amp;gt;
      Tick: {{ tick }}
    &amp;lt;/p&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnDestroy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myStream$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myStream$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be written a lot shorter and maintainable using the AsyncPipe:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;p&amp;gt;
      Tick: {{ myStream$ | async }}
    &amp;lt;/p&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myStream$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: USE ANGULAR’S ASYNCPIPE WHERE POSSIBLE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;yo-dawg-i-heard-you-like-subscriptions&quot;&gt;Yo dawg, I heard you like Subscriptions&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Xzibit: I put a subscription inside your subscription&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/2y7avi.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This should be basic knowledge by anyone using the Observable pattern.
Apart from being extremely ugly to look at, it’s near impossible to keep track of what subscription is open at which moment.
Consider the following example:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherApiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;busId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;param$&lt;/code&gt; stream emits a value, the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; is requested from an API endpoint and when received, it will in its turn request events occurring on a specific &lt;code class=&quot;highlighter-rouge&quot;&gt;busId&lt;/code&gt;.
But what happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;param$&lt;/code&gt; emits a new value? The &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;property will be replaced eventually, but the event stream for the first object will still exist.
So you could start keeping track of subscriptions and cancel them at the ‘right’ moment:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherApiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;busId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow! That’s amazing!
Except it isn’t.
There are still 3 subscriptions, while it could be done with just 1 when using the correct operators:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherApiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;busId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, only 1 subscription will exist, canceling it will automatically cancel any inner streams.
And when &lt;code class=&quot;highlighter-rouge&quot;&gt;param$&lt;/code&gt; would emit a new value, the &lt;code class=&quot;highlighter-rouge&quot;&gt;switchMap&lt;/code&gt; operator will automatically cancel its inner stream and create a new one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: NEVER SUBSCRIBE WITHIN A SUBSCRIPTION&lt;br /&gt;
This also applies for calling a function inside a subscription when that function has a subscription.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;sharing-is-caring&quot;&gt;Sharing is caring&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Cat with big bowl of food: What do you mean, I have to share?&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/2y7xld.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When using a stream on multiple locations, remember that there is a difference between a cold and a hot Observable.
In short: a cold Observable will restart its stream for each subscription, while a hot Observable will reuse an existing stream when a subscription is added.
Think of a cold Observable as a HTTP request, which fires each time again, and a hot Observable as a keyPress stream which emits the same event no matter how many subscriptions exist on the stream.
If you need more details, you can read this article by Ben Lesh &lt;a href=&quot;https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hot vs Cold Observables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes you’ll need to react on a cold Observable in multiple separate streams.
For example, you need to display the response, but you also need to initiate a new stream to get other data.
So you’ll create two subscriptions and use a &lt;strong&gt;mergeMap&lt;/strong&gt;, because subscriptions inside subscriptions are not allowed:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userCarMake&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mergeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userCarMake&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The car make is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The models for this make are&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But in your developer tools’ network tab, you notice that &lt;strong&gt;userCarMake&lt;/strong&gt; has been requested twice.
The answer to why should be obvious by now: there are two subscriptions.
To solve this with minimal changes, make the source stream a hot Observable using &lt;a href=&quot;https://www.learnrxjs.io/operators/multicasting/sharereplay.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;shareReplay&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userCarMake&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mergeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userCarMake&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The car make is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stream2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The models for this make are&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: MAKE YOUR OBSERVABLES HOT WHEN NECESSARY&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though be careful when using this operator.
If the source doesn’t complete by itself, it will keep emitting values.
To prevent this behaviour, use an options object in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shareReplay&lt;/code&gt; operator and set the required property &lt;strong&gt;refCount&lt;/strong&gt; to true:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sharedStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;https://stackblitz.com/edit/using-sharereplay&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this stackblitz&lt;/a&gt; for an example of the difference.
You can set a tslint rule to make sure you always use &lt;code class=&quot;highlighter-rouge&quot;&gt;shareReplay&lt;/code&gt; with options.
Here you can find the configuration: &lt;a href=&quot;https://github.com/cartant/rxjs-tslint-rules#rxjs-no-sharereplay&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rxjs-tslint-rules: rxjs-no-sharereplay&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;angular-specific-use-sharereplay-with-asyncpipe&quot;&gt;Angular specific: use shareReplay with AsyncPipe&lt;/h3&gt;

&lt;p&gt;A point of note for Angular’s AsyncPipe is that each AsyncPipe will create a new subscription.
Use &lt;strong&gt;shareReplay&lt;/strong&gt; when multiple AsyncPipes are used on the same stream or a stream depending on it.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;ng-container *ngIf=&quot;hasItems$ | async&quot;&amp;gt;
    &amp;lt;p *ngFor=&quot;let item of items$ | async&quot;&amp;gt;
      Tick: {{ item }}
    &amp;lt;/p&amp;gt;
    &amp;lt;/ng-container&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;items$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hasItems$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;my-stream-is-too-big&quot;&gt;My stream is too big&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Boy with a giant spoon: My stream is too big&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/2y7st6.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;One of the major advantages of using streams is that you can write declarative code.
Declarative code means that the code can explain itself without the need of comments.
Great!
Now developers don’t need to worry about writing comments anymore.
RxJS provides a lot of operators that are self-explanatory: &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;withLatestFrom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;catchError&lt;/code&gt;, …
So what’s the problem?
It’s something what I’ve noticed a lot lately.
A stream with so many piped operators that it isn’t even funny anymore.
Let’s look at the following stream: (&lt;em&gt;Note: this is a slightly modified stream from the file spoken of earlier, because I just can’t come up with this stuff.&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNullOrUndefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObjectError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorCause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObjectErrorCauseEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HEIGHT_EXCEEDED&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;catchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error while retrieving second object list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isValidChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Form valid?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is last from list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can anyone explain what is going on here?
If you’re reading this blog than you probably have some experience with RxJS and probably understand the meaning of the operators used in this example.
And while it might be readable for an insightful developer, try to imagine a newbie getting thrown into a project where this is presented.
I bet they won’t be very inspired or motivated to work on this.
When that happens, you have to split up the stream, just like you’d split up functions that get too big.
This might mean a bit more lines, but it would make the code a lot more readable.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;isParentObjectValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNullOrUndefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObjectError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorCause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObjectErrorCauseEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HEIGHT_EXCEEDED&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;getChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;catchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error while retrieving second object list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;getFirstItemFromChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isValidChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isParentObjectValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFirstItemFromChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Form valid?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is last from list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s more possible to test various situations for each inner stream and mock the individual outcomes to be used in a test for the outer stream.
We can even move parts to separate files or classes, but for the sake of this example we’ll keep everything together.
It’s not yet perfect, but it gives some room to breathe.
At least we can now read quickly what the outer stream is supposed to do.
Notice that there are no longer pipe functions within other pipe functions.
This makes a stream more streamlined (pun intended, really).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: SPLIT UP YOUR STREAMS AND USE DECLARATIVE FUNCTIONS INSIDE THE OPERATORS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: TRY TO REDUCE THE USE OF PIPE INSIDE PIPE, UNLESS IT’S IN A SEPARATE FUNCTION&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;impurity-and-side-effects&quot;&gt;Impurity and side effects&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Boromir: One does not simply set a subject's next value inside a stream&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/2y84y7.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Pure functions are functions that will always return the same value for the same input parameters, keep state local and do not alter the input parameters.
In the previous example the created function &lt;strong&gt;isParentObjectValid&lt;/strong&gt; is pure, but &lt;strong&gt;getChildObjectList&lt;/strong&gt; and &lt;strong&gt;getFirstItemFromChildObjectList&lt;/strong&gt; aren’t.
Of course not everything can be written in only pure functions, but we should at least try as much as possible.
The same can apply for streams.
A “pure” stream is a stream which produces the same value for the same source, does not alter the source and produces no side effects.
This means that it should not set events on a different stream and should not set or read a value from outside its scope.
For example, the following blocks will do the same, but one keeps its state inside the Observable scope, which is safer.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goals$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goalPoints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goalPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keeping state within the stream is better:&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;betterScore$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goals$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goalPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goalPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;scan&lt;/code&gt; operator instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;.
If you have side effects, you might be using the wrong operators.
More about that a bit later in this post.&lt;/p&gt;

&lt;p&gt;I believe that a stream should always be a constant and never be reinitialized.
Luckily it’s possible to create &lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#build-your-own-operators-easily&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;custom pipe operators&lt;/a&gt; for these situations.&lt;/p&gt;

&lt;p&gt;Let’s continue based on the example from the previous chapter:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonCancelledParentObject$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onlyNonCancelledParentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonCancelledParentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectListForCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstItemOfChildObjectList$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectFirstItemOfList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstItemOfChildObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChildObjectLastInList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstItemOfChildObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChildObjectValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isListEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstItemOfChildObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createStreamOnTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startFetch$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;onlyNonCancelledParentObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isParentObjectValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;childObjectListForCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonCancelledParentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nonCancelledParentObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionId$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChildObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;catchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error while retrieving second object list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;isListEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;selectFirstItemOfList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObjectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;isChildObjectLastInList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;isChildObjectValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isValidChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;createStreamOnTrigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trigger$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;startWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Form valid?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isFormValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLastChildObject$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Second object is last from list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastChildObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now almost every part of the stream is created using a pure function as pipe operator.
Just count the number of times the keyword &lt;strong&gt;this&lt;/strong&gt; is used inside the functions (hint: we went from 10 times to only 1).
This could get even better if we pass the service’s function as a parameter too.
Each of these custom operators can easily be tested with &lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/docs_app/content/guide/testing/marble-testing.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;marble testing&lt;/a&gt;.
It’s more readable, because now you can know for each stream how its values are determined.
For example, in line 5, we can already read that the &lt;strong&gt;isFormValid&lt;/strong&gt; will be changed by a change of the first item in the list of ChildObjects and that it will react on the validity of that object.
We no longer need to sift through the code to find that out.&lt;/p&gt;

&lt;p&gt;You’ll notice that there are a lot of streams now.
Most of them are intermediary, so they could be scoped inside a different block.
Or they can be moved to separate files to keep the main file clean and the streams grouped by logical unit, but always keep subscriptions in your main file.
For the sake of this example I kept all streams together.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: INSTANTIATE YOUR STREAMS WITH PURE FUNCTIONS SO THEY CAN BE TESTED AND MOVED EASILY&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: TRY TO ELIMINATE THE USE OF SUBJECTS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;angular-specific-handling-input-properties&quot;&gt;Angular specific: handling @Input() properties&lt;/h3&gt;

&lt;p&gt;A common question I get with this approach is that some streams can not be defined until an &lt;strong&gt;@Input()&lt;/strong&gt; property is set.
Ridiculous, there is no such thing as a “can not” in programming!
Consider this example:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;h1&amp;gt;{{ message }}&amp;lt;/h1&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreetingComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnChanges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APIService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be also be written as following:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;h1&amp;gt;{{ message$ | async }}&amp;lt;/h1&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GreetingComponent&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReplaySubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;message$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createMessageStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APIService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createMessageStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: EVERYTHING CAN BE A STREAM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though it doesn’t always have to.&lt;/p&gt;

&lt;h2 id=&quot;i-have-no-idea-what-im-doing&quot;&gt;I have no idea what I’m doing&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Dog on computer: I have no idea what I'm doing&quot; src=&quot;/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/dog.jpg&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Last but not least, make sure you understand the flow of your streams.
If it gets too confusing, it will be a pain in the behind to find bugs or make changes without breaking something.
Before creating a stream, like anything in programming, analyse what your stream should exactly be doing.
Do this by drawing marble diagrams.
If multiple streams are needed, make a diagram for each stream and place them under each other.
Use marble testing to write easy to understand unit tests for streams.
In my experience, the package &lt;a href=&quot;https://cartant.github.io/rxjs-marbles/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rxjs-marbles&lt;/a&gt; can help a lot with that.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should emit parentObject only if not cancelled&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marbles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isParentObjectValidSpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--^-a--b--c--d-|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--^f-t---f-----|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;                  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;^------------!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;             &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--a-----c----|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyNonCancelledParentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveSubscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveSubscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: ANALYSE THE NEEDS OF YOUR STREAMS USING MARBLE DIAGRAMS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you know what your stream should do, then it’s time to build it.
There is a big amount of operators available in RxJS.
The most common are displayed in an interactive diagram at &lt;a href=&quot;https://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rxmarbles.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s important that you know the differences between them.
Some examples:
There’s a difference between using &lt;strong&gt;mergeMap&lt;/strong&gt;, &lt;strong&gt;switchMap&lt;/strong&gt;, &lt;strong&gt;concatMap&lt;/strong&gt; and &lt;strong&gt;exhaustMap&lt;/strong&gt; when making substreams.
There is a difference between using &lt;strong&gt;combineLatest&lt;/strong&gt;, &lt;strong&gt;withLatestFrom&lt;/strong&gt;, &lt;strong&gt;zip&lt;/strong&gt; and &lt;strong&gt;forkJoin&lt;/strong&gt; when combining streams.
There is also a subtle difference between &lt;strong&gt;first&lt;/strong&gt; and &lt;strong&gt;take(1)&lt;/strong&gt; when a stream would never emit a value and just complete:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This will output 'error: no elements in sequence'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This will output 'completed'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following guides can help to find which operators to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xgrommx.github.io/rx-book/content/which_operator_do_i_use/creation_operators.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Which Operator to Use? - Creation Operators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xgrommx.github.io/rx-book/content/which_operator_do_i_use/instance_operators.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Which Operator to Use? - Instance Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you know which operators to use, you can easily try out your stream using &lt;a href=&quot;https://stackblitz.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;StackBlitz&lt;/a&gt; or &lt;a href=&quot;https://rxviz.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rx Visualizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t forget you can &lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#build-your-own-operators-easily&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;build your own operators easily&lt;/a&gt; to combine or quickhand other operators.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RULE: USE THE CORRECT PIPE OPERATORS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ending&quot;&gt;Ending&lt;/h2&gt;

&lt;p&gt;That’s all folks.
Some of these rules are opinionated, but I hope they will help some of you to write better RxJS streams.
Just remember: It’s not because you know what you’re doing that everyone knows what you’re doing.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on Reactive Programming and dealing with it. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Development" /><category term="RxJS" /><category term="Angular" /><summary type="html">In my current role as Angular coach I try to help my colleagues as much as possible to make their applications in a logical and comprehensible way. I’m a huge supporter of RxJS for reactive programming and I ask others to consider using the technology to help them create declarative code and prevent them from going to Callback Hell. But as people start to embrace RxJS streams, the difficulties paired with using reactive programming start to surface and I’ve concluded that there also exists something I’d like to call Observable Purgatory.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-04-15-Keep-your-RxJS-streams-from-bursting-their-banks/speedlimit.jpg" /></entry><entry><title type="html">The Scrum framework is a Liberating Structure</title><link href="https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure.html" rel="alternate" type="text/html" title="The Scrum framework is a Liberating Structure" /><published>2019-04-04T00:00:00+00:00</published><updated>2019-04-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure.html">&lt;p&gt;&lt;strong&gt;Scrum is an Agile &lt;em&gt;framework&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does that actually mean?
Are we supposed to fill it? 
Could we grab it, put it on the wall and paint our image in it, the way we see it, the way it works for us?&lt;/p&gt;

&lt;p&gt;Probably, we can. 
Seemingly, many organizations attempt to connect the numbers and dots in precisely that way, trying to get a hold on their portfolio planning and utilising Scrum for metrics to fill their project reports - solely focusing on accelerating output and pushing velocity through the roof. 
But let’s be careful, since we can easily get trapped in this. 
A framework isn’t there to just fill it and use it. 
Did we take the time or the effort to ponder over further possibilities that the frame might entail?&lt;/p&gt;

&lt;p&gt;The framework is not meant to contain just our own painting, our own image, whatever it is that is known to us. 
It is there to draw attention to something beyond… like the frame on the photo. 
Let it be a window. 
A transparent artifact, always representing a mere part of reality, depending on the spot from where we are and from where we are looking, not &lt;em&gt;at&lt;/em&gt; it but &lt;em&gt;through&lt;/em&gt; it, giving us an opportunity to inspect what we are spending our efforts on, or maybe… what we are wasting them on?&lt;/p&gt;

&lt;p&gt;The power of the Scrum framework is in its simplicity. 
The predictively recurring Scrum events form a synchronized pulse creating a steady heartbeat for the members of the Scrum team. 
The drone is persistently present, but only discretely so, not drawing attention, because the frame is not what it’s about. 
It’s a minimalist frame, that vanishes after a while, and is merely setting the scene… trying to create a fertile setting for a space in which, as soon as the Scrum team is accustomed to the pattern of the heartbeat, all team members can focus - as one organism - on collaboration, innovation and co-creation.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Together, we create&quot; src=&quot;/img/scrum-is-a-liberating-structure/together-we-create.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interhuman friction due to role shifts, adapting to new responsibilities and accountabilities, as well as difficulties with alignment of expectations are well-known characteristics of a team’s storming phase. 
But Tuckman, with his forming, storming, norming and performing model of team dynamics was only partly right. 
We now know that storming will always be there to some degree, accompanying the complexity and quickly-changing environment of today. 
A team, in fact, is constantly hovering over its storming arrhythmia, longing for it to clear up, using the heartbeat of the framework to gradually pave the road to high performance, focusing on value and gradual improvement.&lt;/p&gt;

&lt;p&gt;Indeed, the Scrum framework is a ‘liberating structure’ in every sense. 
Agreeing as a team on the structure to work with - and taking up one of the roles and its respective responsibilities therein, provides a clarity on what to expect and how to cooperate within that constraint. 
The frame and heartbeat might appear to be limiting structures at first, but once applied as intended, prove to provide liberation – within the safety of knowing that the entire team is referencing through the same framework.&lt;/p&gt;

&lt;p&gt;Metaphorically: Imagine a team looking at the sea and the framework is not there. 
What are we looking at? 
What are we seeing? 
What area of the horizon are we exploring?&lt;/p&gt;

&lt;p&gt;It will be hard to be aligned unless someone or something tells us where to look and what to look for. 
Then put the frame, the window, on the beach. 
All of us are looking through it – together, exploring a far bigger wedge of the sea than we ever could imagine doing alone.
At the same time it is enabling us to jointly aim for what could be beyond the horizon, when we all look in the same direction.&lt;/p&gt;

&lt;p&gt;Mind you, it is just a framework. 
“Metaphors are all nice and well, but what about the real world?” - you might dryly remark. 
Some teams indeed never really achieve this ‘selfless’ wavelength of high performance. 
And Scrum as a mere facilitative tool is certainly not to blame for that. 
Some teams tap into it rather effortlessly. 
But it requires a common understanding of the framework - and the discipline to jointly be accountable for its success. 
Furthermore, and most dauntingly, it builds on human trust, as an unconditional recipe to create psychological safety.&lt;/p&gt;

&lt;p&gt;Just like the Scrum master serves the team to enable every team member to be at her/his best, the Scrum framework is there to create the best possible circumstances for generating flexible value creation in a transparent and predictive way.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;wall-art&quot; src=&quot;/img/scrum-is-a-liberating-structure/wall-art.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Browsing through the Liberating Structures list of Henri Lipmanowicz and Keith McCandless&lt;sup&gt;1&lt;/sup&gt;, it is easy to notice a parallel and detect some clear common attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Liberating Structure is simple to introduce. Just like Scrum they are easy to learn but can be hard to master. Having a good facilitator is a must.&lt;/li&gt;
  &lt;li&gt;They are result focused. Not used for the sake of it, only for the extra value it generates.&lt;/li&gt;
  &lt;li&gt;They involve rapid cycling, meaning fast iterative rounds generating input and feedback.&lt;/li&gt;
  &lt;li&gt;They are inclusive, asking everyone’s opinion to make informed decisions on the way forward.&lt;/li&gt;
  &lt;li&gt;They are seriously fun and boost a sense of freedom and responsibility within a group.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attributes help us to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Share and spread vital knowledge&lt;/li&gt;
  &lt;li&gt;Cope with complexity&lt;/li&gt;
  &lt;li&gt;Include every member of the team and unleash their potential&lt;/li&gt;
  &lt;li&gt;Adopt a habit of creative adaptability&lt;/li&gt;
  &lt;li&gt;Promote anti-fragility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on top of that, Scrum - being an Agile practice strongly rooted in Lean principles - reintroduces systems thinking and the routine of improvement in the process of co-creation.&lt;/p&gt;

&lt;p&gt;If there is one principle in the world that should never change, let it be this one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Stay agile, never change” - Adam Weisbart&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;sup&gt;1&lt;/sup&gt; For a full but ever growing list of these liberating structures, visit &lt;a href=&quot;http://www.liberatingstructures.com/ls-menu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.liberatingstructures.com/ls-menu/&lt;/a&gt; and &lt;a href=&quot;http://www.liberatingstructures.com/ls-in-development/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.liberatingstructures.com/ls-in-development/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;2&lt;/sup&gt; The epic quote by Adam Weisbart, concluding every podcast: see &lt;a href=&quot;https://weisbart.com/agile-answers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://weisbart.com/agile-answers/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Scrum" /><category term="Agile Coaching" /><category term="Liberating Structures" /><summary type="html">Scrum is an Agile framework.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/scrum-is-a-liberating-structure/main-image.png" /></entry></feed>