<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-09-05T06:44:48+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Avoiding fragile tests with better design</title><link href="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html" rel="alternate" type="text/html" title="Avoiding fragile tests with better design" /><published>2019-08-23T00:00:00+00:00</published><updated>2019-08-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/08/23/test-design</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-most-basic-test-design&quot;&gt;The most basic test design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fragile-tests-example&quot;&gt;Fragile tests example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-the-api&quot;&gt;Implementing the API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/h2&gt;

&lt;p&gt;We spend quite some time thinking about the design of our production code.
We do this because we want our code to be readable and maintainable.
The easier our code can be maintained, the easier we can implement new features and perform the necessary refactorings to implement those features.&lt;/p&gt;

&lt;p&gt;The absurd thing is that we only design our &lt;em&gt;production code&lt;/em&gt; and not our tests.
Our tests should be equally readable and maintainable as our production code, because if we don’t, we’ll spend too much time fixing and rewriting our tests.&lt;/p&gt;

&lt;p&gt;If we successfully create readable tests, they will also serve as very good documentation, describing the functionality of our code, and how it is expected to behave.&lt;/p&gt;

&lt;h2 id=&quot;the-most-basic-test-design&quot;&gt;The most basic test design&lt;/h2&gt;

&lt;p&gt;A common practice in writing tests is creating a test class for each production class. 
The reason why it is such a popular practice, is because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it’s easy to find tests for the production code you’re looking at,&lt;/li&gt;
  &lt;li&gt;it’s a quick way to write new tests because you don’t have to think about how and where to write tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this approach does have advantages, it can also be harmful for the maintainability of your application.
The disadvantage of this approach becomes clear when you need to refactor some classes.
If you move logic from one class to another, or even multiple other classes, you need to create new tests to test each of those classes, if you want to keep your ‘one class means one test class’ strategy.&lt;/p&gt;

&lt;p&gt;In performing such a refactoring we should not need to change any tests because we are not adding or changing any functionality, only moving logic around. 
However, if we want to keep our &lt;em&gt;design&lt;/em&gt; of having a test class for each production class, we need to refactor our tests as well.&lt;/p&gt;

&lt;p&gt;Even if we don’t want to keep this design, our tests will have to be modified because chances are big that the API of our production code changed. 
The parameters of methods might have changed, the fields of objects might have changed, constructors might have changed, etc.
If we are lucky, the tests still compile, but they will very likely fail. 
And the larger your application becomes, the more work it will be to get all tests compiling and green again.&lt;/p&gt;

&lt;p&gt;This phenomenon is known as &lt;a href=&quot;http://xunitpatterns.com/Fragile%20Test.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fragile tests&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fragile-tests-example&quot;&gt;Fragile tests example&lt;/h2&gt;

&lt;p&gt;An example of this phenomenon that we encountered on a project is the creation of an instance of an &lt;a href=&quot;https://martinfowler.com/bliki/DDD_Aggregate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;aggregate&lt;/a&gt;.
A lot of the tests in our project needed an instance of an aggregate. 
This was not a problem at first, we just created aggregates by using the constructor of the class and passing all the necessary data in it.
We created these instances in every test where we needed them, or sometimes created a method in the test class to not duplicate the construction too much in that class.&lt;/p&gt;

&lt;p&gt;To illustrate the issue we will look at a fictional simplified example about order creation.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_active_customer_then_order_creation_should_be_successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_inactive_customer_then_order_creation_should_result_in_an_illegal_argument_exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our problems began when we realised that the number of parameters in the constructor of our aggregate became too large. 
To resolve this issue we decided to create a class that contains all the data needed to call the constructor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However when we tried to run all the tests, most of them didn’t compile anymore, which makes sense because we changed the contract.
Now we could have made it easier for ourselves by using some IntelliJ refactoring tools, but nevertheless, it’s absurd that so many tests could break by just changing the way we construct our aggregates.&lt;/p&gt;

&lt;p&gt;When we finally got all our tests green again by just creating the data class parameter, we were so happy and sick of the refactoring that we just stopped there, instead of addressing the underlying issue.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few months later, after adding some more features, we noticed that there was too much logic inside the constructor of our aggregate. 
The constructor became too big and complex so we decided to use the factory pattern to create new instances of the aggregate.&lt;/p&gt;

&lt;p&gt;Since we already used a &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderData&lt;/code&gt; as parameter of our constructor, all our tests still compiled and we were happy.
That is, until we ran our tests.&lt;/p&gt;

&lt;p&gt;Because we moved all construction logic from the constructor to the factory, the tests still compiled, but as they relied on this construction logic to create the instance the way we need it, they now failed.
Again we were faced with the issue of a large amount of tests that we had to refactor.&lt;/p&gt;

&lt;p&gt;Not having learned from our previous mistakes and being under time pressure, we decided to use the factory to create instances in all our tests. 
For the factory we needed some other services, repositories etc. which we all mocked.
This was a huge amount of work because of all the mocking we had to do just so we could create a consistent aggregate.
And we had to do this, again, in every test that needs an aggregate.&lt;/p&gt;

&lt;p&gt;After everything worked again, we were happy that the pile of work was done and we could move on with other things.&lt;/p&gt;

&lt;p&gt;In the weeks that followed, however, we started to notice that every time we changed the logic of the factory, we needed to change all the tests again because we had to add some extra mocks, data, etc. in all the tests.&lt;/p&gt;

&lt;p&gt;After a few of these iterations where we had to spend too much time fixing tests, we were fed up and decided (way too late of course) to free up some time for a more structural solution.&lt;/p&gt;

&lt;p&gt;We got some inspiration from a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; from Uncle Bob about his opinion on the statement that &lt;em&gt;TDD harms architecture&lt;/em&gt;.
One of the things he mentions in his post is that we shouldn’t make the mistake of coupling every test to the implementation of our production code.
Instead it would be better to put some sort of API in between our tests and the production code.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-api&quot;&gt;Implementing the API&lt;/h2&gt;
&lt;p&gt;We didn’t take Uncle Bob’s solution too literally and gave our own twist to it.&lt;/p&gt;

&lt;p&gt;For the specific problem of creating aggregate instances we decided to create a class that acts as a scenario builder.
In this &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderScenario&lt;/code&gt; we have a static factory method that will create a scenario that returns a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; when executed.
This means that when you need an order that is consistent and it doesn’t matter for your test which data is in the order, you can just use the default scenario when it’s executed.&lt;/p&gt;

&lt;p&gt;You could also create other default scenarios.
For example an order with an invalid customer, or with specific data that triggers a certain flow in the order process.&lt;/p&gt;

&lt;p&gt;This is very convenient for most tests.
However, in some tests we want to influence how the order is constructed, so we can test some custom cases other than a default scenario, specific for certain tests.
We implemented this by adding some methods to our scenario class that allows the scenario to be modified to the test’s needs.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the following example we created two tests that verify that the construction of an order works correctly.
In the first test, we use the default scenario without modifying anything, meaning, we test the happy path and verify that all data in the created order is correct.&lt;/p&gt;

&lt;p&gt;In the second test we verify that if we try to create an order for a customer that doesn’t exist, we get a validation exception.
We do this by creating a default scenario, then modifying the input data to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;customerId&lt;/code&gt; defined in the test, and then overriding the behaviour of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomerRepository&lt;/code&gt; mock.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidCustomerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/h2&gt;

&lt;p&gt;The advantage of this design is that our tests are not aware of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the use of a factory to create orders,&lt;/li&gt;
  &lt;li&gt;a validator class, used by the factory to validate the input for creating an order,&lt;/li&gt;
  &lt;li&gt;and how the constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; aggregate should be called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this example, it’s easy to see that our new tests are much less likely to break than our original &lt;strong&gt;design&lt;/strong&gt;. 
There is a clean layer between the implementation/design of our application, and the tests.
This lower coupling makes it easier to refactor the application, and implement new features at a higher pace.&lt;/p&gt;

&lt;p&gt;Also notice that we didn’t create a test class that maps one-to-one to a production code class.
Rather than testing our &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; object, our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactory&lt;/code&gt;, or our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt;, we test the creation of an aggregate instance. 
We test what we expect our application to do, not what we expect our class to do.&lt;/p&gt;

&lt;p&gt;Whenever we have to change the logic of how an &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is created, we know that we have to look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderTest&lt;/code&gt; class.
We don’t have to look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderTest&lt;/code&gt; class, the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactoryTest&lt;/code&gt; class, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt; test class to see where we should add some tests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In no way is this design perfect, nor will it be suitable in every project.
However, it is a good starting point to have a lower coupling between tests and production code.
And it’s also a good way to take your test design further and make it more applicable and relevant to your specific project.&lt;/p&gt;

&lt;p&gt;This creates the opportunity to make a higher level language to express your tests, making them more readable, and express your intent of what your test is verifying more clearly.&lt;/p&gt;

&lt;p&gt;And even if you’re not convinced of this design, think about a design of your own, and start to improve the readability and maintainability of your tests.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Van Hees&quot;, &quot;github&quot;=&gt;&quot;pvanhees&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-van-hees-73671133&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter-van-hees/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-van-hees.jpg&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vanhees@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Van Hees is a Java Software Engineer at Ordina Belgium. He is passionate about Domain-Driven Design and producing clean software that works.&quot;}</name><email>pieter.vanhees@ordina.be</email></author><category term="Testing" /><category term="Test Driven Development" /><category term="Test Design" /><category term="Architecture" /><category term="Testing" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/fragile5.png" /></entry><entry><title type="html">Securing Web Applications With Keycloak Using OAuth 2.0 Authorization Code Flow and PKCE</title><link href="https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html" rel="alternate" type="text/html" title="Securing Web Applications With Keycloak Using OAuth 2.0 Authorization Code Flow and PKCE" /><published>2019-08-22T00:00:00+00:00</published><updated>2019-08-22T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html">&lt;blockquote&gt;
  &lt;p&gt;Gone are the days when we had to write our own login mechanisms and permission systems.
This article is about how we can hook up our applications to an Identity and Access Management (IAM) solution such as Keycloak in a secure way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-keycloak-as-authentication-server&quot;&gt;Why Keycloak as Authentication Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-a-keycloak-server&quot;&gt;Setting up a Keycloak Server&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-new-realm&quot;&gt;Creating a New Realm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-client&quot;&gt;Creating a Client&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-roles-and-scopes&quot;&gt;Creating Roles and Scopes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-user&quot;&gt;Creating a user&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-the-front-end-and-back-end-applications&quot;&gt;Setting up the Front End and Back End Applications&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#spring-boot-back-end&quot;&gt;Spring Boot back end&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angular-app-tour-of-heroes&quot;&gt;Angular app: Tour of Heroes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-security&quot;&gt;Implementing Security&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#implicit-flow-versus-code-flow--pkce&quot;&gt;Implicit Flow versus Code Flow + PKCE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#json-web-token-jwt&quot;&gt;JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#resource-server-in-spring-boot&quot;&gt;Resource Server in Spring Boot&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#securing-the-angular-application&quot;&gt;Securing The Angular application&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-keycloak-as-authentication-server&quot;&gt;Why Keycloak as Authentication Server&lt;/h1&gt;
&lt;p&gt;You can find several platforms that handle user logins and resource access management such as &lt;a href=&quot;https://www.keycloak.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Keycloak&lt;/a&gt;, &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OKTA&lt;/a&gt;, &lt;a href=&quot;https://forgerock.github.io/openam-community-edition/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenAM&lt;/a&gt;, etc. 
All those platforms have their own features and possibilities that may be useful for your use case. 
In this article, we choose Keycloak as &lt;a href=&quot;https://en.wikipedia.org/wiki/Authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;authentication&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Authorization&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;authorization&lt;/a&gt; server which is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_source&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;open-source&lt;/a&gt; identity and access management platform (IAM) from Red Hat’s Jboss. 
We have chosen for Keycloak because &lt;a href=&quot;https://github.com/keycloak/keycloak&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;it is open-source&lt;/a&gt; and &lt;a href=&quot;https://www.keycloak.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;well-documented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keycloak comes with several handy features built-in:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two-factor authentication&lt;/li&gt;
  &lt;li&gt;Bruteforce detection&lt;/li&gt;
  &lt;li&gt;Social login (Facebook, Twitter, Google…)&lt;/li&gt;
  &lt;li&gt;LDAP/AD integration&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will go over the basics to get you started.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-a-keycloak-server&quot;&gt;Setting up a Keycloak Server&lt;/h1&gt;

&lt;p&gt;Keycloak supports &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_installation/index.html#_operating-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;multiple ways&lt;/a&gt; to be set up.
For non-production purposes, it’s easiest to just &lt;a href=&quot;https://www.keycloak.org/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download&lt;/a&gt; and run the standalone, which we will do here. 
For actual deployments that are going to be run in production you’ll need to configure a shared database for Keycloak storage and set up Keycloak to run in a cluster to avoid a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;single point of failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing, the latest release version was &lt;code class=&quot;highlighter-rouge&quot;&gt;6.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://downloads.jboss.org/keycloak/6.0.1/keycloak-6.0.1.zip &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; keycloak-6.0.1.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip keycloak-6.0.1.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;keycloak-6.0.1/bin/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./standalone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;For Windows users, there is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;standalone.bat&lt;/code&gt; in the same folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Keycloak server is now running on port 8080.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-Djboss.socket.binding.port-offset&lt;/code&gt; to change the port.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-Djboss.socket.binding.port-offset=1000&lt;/code&gt; will run the server on port 8080 + 1000 = 9080&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://localhost:8080&lt;/a&gt; and create an administrator account.
You can now click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Administration Console &amp;gt;&lt;/code&gt; and log in using the account you’ve just created.&lt;/p&gt;

&lt;p&gt;You are now on the pre-defined Master realm. A realm manages a set of users, credentials, roles, and groups. 
A user belongs to and logs into a realm and they are isolated from one another and can only manage and authenticate the users that they control.&lt;/p&gt;

&lt;p&gt;The master realm is the highest level in the hierarchy. 
Admin accounts in this realm have permissions to view and manage any other realm. 
It’s best to create a new realm to manage our application and users.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-realm&quot;&gt;Creating a New Realm&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_realm.png&quot; alt=&quot;&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Create a new realm by clicking on the drop-down arrow next to the realm name in the upper left corner.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_realm_2.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;heroes&lt;/code&gt; is chosen as the name of the realm.
Feel free to change this to the name of your organisation if you have one.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-client&quot;&gt;Creating a Client&lt;/h2&gt;

&lt;p&gt;Every application that interacts with Keycloak is considered to be a client.&lt;br /&gt;
Let’s create one for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single-Page App&lt;/a&gt; (SPA).&lt;/p&gt;

&lt;p&gt;Look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Clients&lt;/code&gt; tab in the menu and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;br /&gt;
Pick a name you think is suitable and choose &lt;a href=&quot;https://openid.net/connect/&quot;&gt;OpenID Connect&lt;/a&gt; (OIDC) as protocol.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Root URL&lt;/code&gt; can remain blank.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_client.png&quot; alt=&quot;&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After saving, we can see all the configuration options of the client.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Valid Redirect URIs&lt;/code&gt; should be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4200/*&lt;/code&gt; as this is the address of our SPA&lt;/li&gt;
  &lt;li&gt;Allow all origins for testing purposes&lt;/li&gt;
  &lt;li&gt;Single-page apps use a &lt;code class=&quot;highlighter-rouge&quot;&gt;public client&lt;/code&gt; because they can not securely hide client credentials&lt;/li&gt;
  &lt;li&gt;Make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;Standard Flow&lt;/code&gt; is enabled. All other flows can be disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/configure_client.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Standard flow is another name for the &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-1.3.1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Authorization Code Flow&lt;/a&gt; as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the OAuth 2.0 specification&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Direct Access Grants Enabled&lt;/code&gt; may remain enabled for now. It will be easy to test our configuration later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t forget to hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Save&lt;/code&gt; at the bottom of the form!&lt;/p&gt;

&lt;h2 id=&quot;creating-roles-and-scopes&quot;&gt;Creating Roles and Scopes&lt;/h2&gt;
&lt;p&gt;Roles and scopes can be used to provide fine-grained access control to resources. 
We want them to be present when handling requests with our Spring Boot application. 
This part is optional, but can provide better insight in managing access to resources down the road.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;Roles&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Role&lt;/code&gt;, enter any name you like. 
Some standard roles are typically user or admin.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_role.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A scope is created in a similar way under &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Scopes&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;br /&gt;
We will not show a consent screen, so you can uncheck this option.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_scope.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now add the scope to the client we created earlier under &lt;code class=&quot;highlighter-rouge&quot;&gt;Clients&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Scopes&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/assign_scope.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-user&quot;&gt;Creating a user&lt;/h2&gt;

&lt;p&gt;To use our application later, we need a user to log in with.
In most corporate environments, users are stored in Active Directory (AD) or LDAP.
Keycloak can connect to both AD and LDAP but for our example, we will simply create a user in Keycloak itself.&lt;/p&gt;

&lt;p&gt;Search for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Users&lt;/code&gt; tab in the menu on the left and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Add User&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_user.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Check &lt;code class=&quot;highlighter-rouge&quot;&gt;Email Verified&lt;/code&gt; as we do not have email configured on our Keycloak server.&lt;br /&gt;
After creation, you still have to set a password.
Go to the Credentials tab and enter a new one.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_user_password.png&quot; alt=&quot;&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make sure the password is not a temporary one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you created a new role in the previous section, you can assign it to your user under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Role Mappings&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;That’s all for the Keycloak part.
Now let’s look at some applications to secure.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-front-end-and-back-end-applications&quot;&gt;Setting up the Front End and Back End Applications&lt;/h1&gt;

&lt;p&gt;The demo setup will consist of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an Angular SPA project&lt;/li&gt;
  &lt;li&gt;a Spring Boot application to serve some data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spring-boot-back-end&quot;&gt;Spring Boot Back End&lt;/h2&gt;

&lt;p&gt;You can clone the base setup &lt;a href=&quot;https://github.com/jmeys/heroes-api&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt; and switch to the &lt;code class=&quot;highlighter-rouge&quot;&gt;unsecured&lt;/code&gt; branch.
It is a very simple application which serves some heroes on &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes/{id}&lt;/code&gt; on port 9090.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/heroes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeroController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pieter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this example, every application may request these resources, hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;@CrossOrigin(&quot;*&quot;)&lt;/code&gt;.
Open the project in your favourite IDE and run it. 
The application will run on port 9090.&lt;/p&gt;

&lt;h2 id=&quot;angular-app-tour-of-heroes&quot;&gt;Angular App: Tour of Heroes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes&lt;/a&gt; is the Angular tutorial application. 
It’s pretty simple but has all the basic components which make up a modern Angular application. 
And most importantly, it’s kept up to date with the latest version of Angular.&lt;/p&gt;

&lt;p&gt;Use these commands or &lt;a href=&quot;https://angular.io/generated/zips/toh-pt6/toh-pt6.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download&lt;/a&gt; the latest version of the Tour Of Heroes application from &lt;a href=&quot;https://angular.io/tutorial/toh-pt6&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://angular.io/generated/zips/toh-pt6/toh-pt6.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip toh-pt6.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; toh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;toh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example app uses an in-memory service to return some heroes. 
Since you’ll want to serve them from Spring Boot instead, change the url in &lt;code class=&quot;highlighter-rouge&quot;&gt;hero.service.ts&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;api/heroes&quot;&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;http://localhost:9090/api/heroes&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heroesUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:9090/api/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will still try to fetch preloaded heroes from memory, so delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can run the application with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ng serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and browse to &lt;a href=&quot;http://localhost:4200&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;localhost:4200&lt;/a&gt; to see if it works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that not all functionality of the app is working because - for brevity - we only implemented the GET functionality in the Spring Boot back end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;implementing-security&quot;&gt;Implementing Security&lt;/h1&gt;
&lt;p&gt;We will now dive into the interesting part: setting up the security of the applications.
To understand this section, you should have a basic understanding of OAuth 2.0 and OIDC. 
If this is not yet the case, this section might be more difficult to understand. 
You can fast-forward to the next section or start your journey by watching this awesome video by &lt;a href=&quot;https://twitter.com/nbarbettini&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nate Barbettini&lt;/a&gt; from &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Okta&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/996OiexHze0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-flow-versus-code-flow--pkce&quot;&gt;Implicit Flow versus Code Flow + PKCE&lt;/h2&gt;
&lt;p&gt;In this example, we will use the authorization code grant flow with Proof Key for Code Exchange (&lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCE&lt;/a&gt;) to secure the Angular app. 
It’s a very long name for what could be shortened to “code flow + PKCE” which is &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.1.2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;more secure than the implicit flow&lt;/a&gt;. &lt;br /&gt;
In fact, the implicit flow was never very secure to begin with. 
This is well-explained by &lt;a href=&quot;https://twitter.com/nbarbettini&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nate Barbettini&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/aaronpk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aaron Parecki&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CHzERullHe8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The implicit flow was the easiest to understand, since it required one step less than the standard code flow:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/implicit_vs_code.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;PKCE is an addition on top of the standard code flow to make it usable for public clients. 
It is already in use for native and mobile clients. 
PKCE boils down to this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Give &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; of random value to authorization server when logging in to ask for &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hand over the &lt;code class=&quot;highlighter-rouge&quot;&gt;random value&lt;/code&gt; to authorization server when exchanging &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;access token&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Authorization server returns &lt;code class=&quot;highlighter-rouge&quot;&gt;access token&lt;/code&gt; after verifying that &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; belongs to &lt;code class=&quot;highlighter-rouge&quot;&gt;random value&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/pkce.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If a fraudster were to intercept our authorization grant (the code), he or she would still not have the &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;, which is stored in our SPA client. 
If he/she tries to exchange the stolen authorization grant without this value, the response would not be a token but rather an &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 400&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;invalid_grant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error_description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PKCE code verifier not specified&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is why the code flow + PKCE is more secure than the implicit flow. 
Even if an attacker manages to obtain the authorization grant, it’s worthless without the &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the HTTP 400 will only occur when using PKCE. 
If no PKCE is used, the client should be confidential (requiring credentials to exchange the authorization grant) rather than be public.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So only our Angular client will be able to retrieve the access token in the form of a JSON Web Token.&lt;/p&gt;

&lt;h2 id=&quot;json-web-token-jwt&quot;&gt;JSON Web Token (JWT)&lt;/h2&gt;
&lt;p&gt;JSON Web Tokens or JWT, often pronounced as ‘jot’, is an open standard for a compact way of representing data to be transferred between two parties. 
What this means is that it’s a special kind of object which has some data in it. It can also be digitally signed to make sure it is not tampered with.&lt;/p&gt;

&lt;p&gt;In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt;:  the type of the token and the signing algorithm being used&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Payload&lt;/code&gt;: the payload, which contains the claims and additional data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signature&lt;/code&gt;: to verify if the token was not tampered with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, a JWT typically looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xxxxx.yyyyy.zzzzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header (xxx) and payload (yyy) are base64 encoded. 
An access token is a good example of a JWT:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkdE9JZkY2NGZRYnlwWVRFdGV2eV83NUdIWTdQMmNHU1o2a2ZXWDdFblBJIn0.eyJqdGkiOiIxY2EzZTZkYS1kM2Y2LTRiYTMtYjNjZC1iMDExYmRlM2JmNmIiLCJleHAiOjE1NjYzMjk1NTYsIm5iZiI6MCwiaWF0IjoxNTY2MzI5MjU2LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvaGVyb2VzIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjBkNjg0OWI4LWUyZmEtNGU3My04NjlhLTE1ZDVhOTE1YzdhMiIsInR5cCI6IkJlYXJlciIsImF6cCI6InNwYS1oZXJvZXMiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiI4NWRjYTg0Ny00YmQzLTRiOTUtOTNiYy01MjE5ZjUzYWNiMzciLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJ1c2VyIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBoZXJvZXMgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiSmVyb2VuIE1leXMiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJqZXJvZW4iLCJnaXZlbl9uYW1lIjoiSmVyb2VuIiwiZmFtaWx5X25hbWUiOiJNZXlzIiwiZW1haWwiOiJtZUBhY21lLmJlIn0.cvn79d-n0aFYqDB3p-htDNeeYOdkvqEsmDhGKp9V3a4i6nJx7dU0_r7zicQe26ZgDsM65ILx_X-buWv-e5_eraFo1OOveCGtBbrrLwrQ0Z7SlVMHJrDooJrLEE_m8Qlz_-iLcEC2-ODroEwyLRej_Du626B48QL2bcq-8ADqGSaLf7Y4ZTVMiP_p6dsCi4GDQLq1WOy-g6--z47FKTJVuAl2yY_JNNuEd5aofw0FTE38EoEinIdcy5NXCXDhtGHr_k5lA2Swu4JvK84YB6usECigCb1_zO_c6LhZQkRTCcCojxC6Qn1trQH9epcFEKTkDCHrNf6BLp4X9rH2URWJcA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can easily decode them using online tools like &lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;jwt.io&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/jwt.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The payload section can have different kinds of data. 
Since our tokens are used for OAuth and OIDC, they have all kinds of claims, which are key-value statements about an entity. 
You can compare this to something like a coupon. A coupon has claims about how much it is worth, which product(s) it applies to and when it expires.&lt;/p&gt;

&lt;p&gt;In our example token there is a claim that &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Jeroen Meys&lt;/code&gt; and also that &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;email profile heroes&lt;/code&gt;. 
This scope claim means we can use this token to know my email, some profile info and whatever heroes is needed for (hint: keep on reading to find out!). 
If you are interested in other JWT use-cases, you should definitely give &lt;a href=&quot;https://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Using JWT for State Transfer&lt;/a&gt; a read.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be careful with online tools to analyze JWT tokens. You are exposing access tokens to the world!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we understand what an access token is and looks like, we can pass it along to the back end which will be configured as a stateless OAuth Resource Server.&lt;/p&gt;

&lt;h2 id=&quot;resource-server-in-spring-boot&quot;&gt;Resource Server in Spring Boot&lt;/h2&gt;
&lt;p&gt;Resource server is the OAuth 2.0 terminology for API server. 
It will look at our access token and decide if we are allowed to perform the requested API action.&lt;br /&gt;
What we really want to secure is the data served by our Spring Boot app.
We don’t want the villains out there to be able to access our list of heroes, do we?&lt;/p&gt;

&lt;p&gt;Let’s take care of that.&lt;/p&gt;

&lt;p&gt;While Keycloak provides its &lt;a href=&quot;https://github.com/keycloak/keycloak/tree/master/adapters/oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;own libraries&lt;/a&gt; to be used with Spring Boot, I personally favour more generic libraries that are provider unaware. 
This is in line with the &lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview-philosophy&quot;&gt;Spring framework design philosophy&lt;/a&gt; of deferring design decisions as late as possible.
This way, when we feel like it, we can more easily switch from one solution (Keycloak) to another (eg. Okta), as long as they support the OIDC protocol. 
The de facto standard for securing Spring Boot applications is Spring Boot Security. 
It has resource server support, so this is what we’ll be using.&lt;/p&gt;

&lt;h3 id=&quot;resource-server-imports&quot;&gt;Resource Server Imports&lt;/h3&gt;
&lt;p&gt;Let’s add the dependecies to our &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-security'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-oauth2-resource-server'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-oauth2-jose'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-security&lt;/code&gt;: starter dependency for Spring Security&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-security-oauth2-resource-server&lt;/code&gt;: dependency to use our application as a Resource Server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-security-oauth2-jose&lt;/code&gt;: support for the Javascript Object Signing and Encryption framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuration-of-the-resource-server&quot;&gt;Configuration of the Resource Server&lt;/h3&gt;
&lt;p&gt;Then all we have to do is some configuring.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.builders.HttpSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceServerConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/heroes/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCOPE_heroes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;denyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oauth2ResourceServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these few lines of code, a lot is happening. We told Spring Security that all endpoints are forbidden, except for &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes/**&lt;/code&gt; when the heroes scope is present. This will be checked against the JWT access token.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth2ResourceServer()&lt;/code&gt; sets up the application as a resource server. It will check if there is an access token on every request and whether it is valid or not. 
In order to verify that a token hasn’t been tampered with, we need some information from Keycloak, which it exposes via a REST endpoint.&lt;/p&gt;

&lt;p&gt;We add the endpoint to our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;spring.security.oauth2.resourceserver.jwt.jwk-set-uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://localhost:8080/auth/realms/heroes/protocol/openid-connect/certs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-the-setup&quot;&gt;Testing the setup&lt;/h3&gt;

&lt;p&gt;That’s all for the resource server part.
Don’t forget to restart the Spring Boot application after these changes!&lt;/p&gt;

&lt;p&gt;We can use curl to verify if our security is working correctly.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; http://localhost:9090/api/heroes
HTTP/1.1 401
Set-Cookie: &lt;span class=&quot;nv&quot;&gt;JSESSIONID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;A2268A4D12924631929BEBDA57CB2333&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; HttpOnly
WWW-Authenticate: Bearer
X-Content-Type-Options: nosniff
X-XSS-Protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
Cache-Control: no-cache, no-store, max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Length: 0
Date: Sun, 18 Aug 2019 21:15:14 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without a token, the server responds with HTTP 401. 
This means we are not authorized. 
As we don’t have a login form available just yet, we can use the Direct Access Grants flow to obtain a token. 
This can come in very handy for testing different scenarios as well.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;client_id=spa-heroes&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;username=jeroen&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;password=1234&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;grant_type=password&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/auth/realms/heroes/protocol/openid-connect/token | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .access_token&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TOKEN&lt;/span&gt;
eyJhbGciOeUNvcWVJVWxNIn0.eyJqdGkiOiI......Hnz5aFdcAiB-5o-yep6rcGP_H6yQoW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make sure ‘Direct Access Grants Enabled’ is enabled in the Keycloak Client settings&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now use this token to request the resource once more:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authorization: Bearer &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOKEN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; http://localhost:9090/api/heroes
HTTP/1.1 200
X-Content-Type-Options: nosniff
X-XSS-Protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
Cache-Control: no-cache, no-store, max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Type: application/json&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
Transfer-Encoding: chunked
Date: Sun, 18 Aug 2019 21:25:36 GMT

&lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Ken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:2,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:3,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Pieter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time we got the requested resource back from the server!&lt;/p&gt;

&lt;h2 id=&quot;securing-the-angular-application&quot;&gt;Securing The Angular application&lt;/h2&gt;

&lt;p&gt;When we now look at our Tour Of Heroes application again, it’s complaining a bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HeroService: getHeroes failed: Http failure response for http://localhost:9090/api/heroes: 401 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We didn’t log in (HTTP 401), so we can’t see the content. Time to fix it!&lt;/p&gt;

&lt;p&gt;There are many packages we could use to secure our Angular app. An easy one to get started with, is &lt;a href=&quot;https://github.com/manfredsteyer/angular-oauth2-oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;angular-oauth2-oidc&lt;/a&gt; from Manfred Steyer but you could use any library, as long as it’s &lt;a href=&quot;https://openid.net/certification/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;certified by OpenID&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add it to the dependencies:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i angular-oauth2-oidc &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add it to the imports of &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/common/http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resourceServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;allowedUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:9090/api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sendAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we configure &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:9090/api&lt;/code&gt; to be the only URL where we will send our access token to.&lt;/p&gt;

&lt;p&gt;Next up, let’s add log in and log out buttons in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;(click)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Login
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;(click)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logoff()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Logout
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all there is left to do is to configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthService&lt;/code&gt;. We do this in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component.ts&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NullValidationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JwksValidationHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Tour of Heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;authConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:8080/auth/realms/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;redirectUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;spa-heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;openid profile email offline_access heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// at_hash is not present in JWT token&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;disableAtHashCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;showDebugInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initLoginFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenValidationHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NullValidationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadDiscoveryDocumentAndTryLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure that the name of the realm (heroes) and the client id (spa-heroes) correspond to the ones you defined in Keycloak. 
Remember how we required the heroes scope to be present in our back end? The scope property is how we fix this. 
If we omit &lt;code class=&quot;highlighter-rouge&quot;&gt;heroes&lt;/code&gt; from the scope list, we will be getting a 403 response from our resource server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keycloak is not returning the &lt;code class=&quot;highlighter-rouge&quot;&gt;at_hash&lt;/code&gt; claim in the access token. For this reason, the client library would crash while parsing it.
This is why we disable it in the config but also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NullValidationHandler&lt;/code&gt; instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwksValidationHandler&lt;/code&gt; as it would also make the application crash.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now try to log in and if all went well, we should see our heroes appear again when browsing to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dashboard&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t worry if you do not immediatly see the heroes appear. This is because we load the &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt; page before our code was exchanged for an access token.
This results in the first &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt; call getting a 401 response. You can create a new endpoint and use it as the redirectUri to get rid of this problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/result.gif&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We set up a Keycloak server and covered how we can secure a Spring Boot API by turning it into a resource server. 
We then discussed why the authorization grant flow + PKCE replaces the implicit flow and how to implement it in an Angular application.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Meys&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen-meys/&quot;, &quot;avatar&quot;=&gt;&quot;jeroen-meys.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;jeroen-meys-35416253&quot;, &quot;twitter&quot;=&gt;&quot;JeroenMeys&quot;, &quot;email&quot;=&gt;&quot;jeroen.meys@ordina.be&quot;, &quot;github&quot;=&gt;&quot;jmeys&quot;, &quot;bio&quot;=&gt;&quot;Jeroen is a Java Developer at Ordina Belgium who is passionate about security and has a secret love for the Windows operating system.&quot;}</name><email>jeroen.meys@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="OAuth" /><category term="OIDC" /><category term="PKCE" /><category term="JWT" /><category term="Keycloak" /><category term="Resource Server" /><category term="Spring Security" /><category term="Angular" /><summary type="html">Gone are the days when we had to write our own login mechanisms and permission systems. This article is about how we can hook up our applications to an Identity and Access Management (IAM) solution such as Keycloak in a secure way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/securing-web-applications-with-keycloak/keycloak.jpg" /></entry><entry><title type="html">Using Let’s Encrypt certificates in Java applications</title><link href="https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java.html" rel="alternate" type="text/html" title="Using Let's Encrypt certificates in Java applications" /><published>2019-08-14T00:00:00+00:00</published><updated>2019-08-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java.html">&lt;blockquote&gt;
  &lt;p&gt;At some point in their career, developers come accross the need to work with security certificates.
This article describes how to setup Let’s Encrypt, retrieve a certificate, renew it automatically and use the certificate in a Java application for TLS communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#certificate-authorities-and-lets-encrypt&quot;&gt;Certificate Authorities and Let’s Encrypt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-a-lets-encrypt-certificate&quot;&gt;Installing a Let’s Encrypt certificate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#certificate-renewal&quot;&gt;Certificate renewal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automating-the-renewal-process&quot;&gt;Automating the renewal process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-certificates-in-a-java-application&quot;&gt;Using the certificates in a Java application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;certificate-authorities-and-lets-encrypt&quot;&gt;Certificate Authorities and Let’s Encrypt&lt;/h1&gt;

&lt;p&gt;When you want to enable HTTPS on your website or need certificates for TLS communication, you’ll need to request this certificate from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certificate Authority&lt;/a&gt; (CA).
It acts as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Trusted_third_party&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;trusted third party&lt;/a&gt; between two parties that need to communicate with each other.
&lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Let’s Encrypt&lt;/a&gt; is such a Certificate Authority.
It is their mission to give everyone a secure and privacy-respecting web experience.
That’s why they issue certificates free of charge.&lt;/p&gt;

&lt;h1 id=&quot;installing-a-lets-encrypt-certificate&quot;&gt;Installing a Let’s Encrypt certificate&lt;/h1&gt;

&lt;p&gt;Assuming that you have shell access to your server, Let’s Encrypt recommends to use &lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot ACME Client&lt;/a&gt;, since it can automate certificate issuance and installation with zero downtime.&lt;/p&gt;

&lt;p&gt;Certbot is a free, open source software tool for automatically using Let’s Encrypt certificates on manually-administrated websites to enable HTTPS.&lt;/p&gt;

&lt;p&gt;Clear installation instructions can be found on the Certbot website.
Select your web server software (Apache, Nginx, …) and operating system and Certbot provides the installation instructions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can check your operating system on Linux by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/os-release&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note that these instructions also include setting up HTTPS for your website, which for this tutorial isn’t necessary.
We’ll use the certificate in another way, for TLS communication in a Java application.&lt;/p&gt;

&lt;p&gt;For Ubuntu, the following steps are required to install Certbot.
See also &lt;a href=&quot;https://certbot.eff.org/lets-encrypt/ubuntuxenial-apache&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache on Ubuntu 16.04 (xenial)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Certbot is installed using APT (Advanced Package Tool), a tool for installing and removing applications on Debian based systems. This tool searches in its repositories for software distributions.
Before you can install Certbot, you’ll need to add the Certbot PPA (Personal Package Archive) to your list of available APT repositories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the following command to install Certbot.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install certbot python-certbot-apache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot&lt;/code&gt; retrieves a certificate and installs it immediately on your web server by adding an extra parameter, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;--apache&lt;/code&gt; for &lt;a href=&quot;https://httpd.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache HTTP Server&lt;/a&gt;.
For our situation, it is enough to retrieve a certificate.
This is done by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;certonly&lt;/code&gt; parameter to the command as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certbot certonly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the installed Let’s Encrypt certificates in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live&lt;/code&gt; folder on your file system.&lt;/p&gt;

&lt;h1 id=&quot;certificate-renewal&quot;&gt;Certificate renewal&lt;/h1&gt;

&lt;p&gt;Let’s Encrypt CA issues short-lived certificates of 90 days.
Therefore certificates must be renewed at least once in 3 months.&lt;/p&gt;

&lt;p&gt;Certificate renewal is actually quite simple with Certbot.
You can renew the certificates with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certbot renew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; to the command if you want to try it out without consequences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Executing this command multiple times is not a problem.
When the certificate is not due for renewal, nothing will happen and you’ll receive an output comparable to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Saving debug log to /var/log/letsencrypt/letsencrypt.log

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /etc/letsencrypt/renewal/mydomain.be.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cert not yet due for renewal
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/mydomain.be/fullchain.pem expires on 2019-09-14 (skipped)
No renewals were attempted.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;automating-the-renewal-process&quot;&gt;Automating the renewal process&lt;/h1&gt;

&lt;p&gt;Certbot &lt;a href=&quot;https://certbot.eff.org/docs/using.html?highlight=hooks#automated-renewals&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;automatically renews&lt;/a&gt; certificates on most operating systems now.&lt;/p&gt;

&lt;p&gt;Check your operating system’s crontab (typically in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.*/*&lt;/code&gt; and systemd timers (&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt;).
On our Ubuntu system we executed &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt; and found a &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot.timer&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NEXT                          LEFT          LAST                          PASSED       UNIT                         ACTIVATES
Wed 2019-08-14 10:47:41 CEST  1h 19min left Tue 2019-08-13 18:00:03 CEST  15h ago      certbot.timer                certbot.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It basically boils down to the &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot renew&lt;/code&gt; command being executed periodically.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your Linux distribution package didn’t install the cronjob, you can easily set this up yourself.
Since we need to automate the keystore and truststore creation as well, you can look at the section &lt;a href=&quot;#automate-the-keystore-and-truststore-creation-process&quot;&gt;Automate the keystore and truststore creation process&lt;/a&gt; for more information on creating cronjobs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;using-the-certificates-in-a-java-application&quot;&gt;Using the certificates in a Java application&lt;/h1&gt;

&lt;p&gt;All generated keys and issued Let’s Encrypt certificates can be found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live&lt;/code&gt; folder on your file system.
We will now see how we can import them in Java keystore files to use them in a Java application.&lt;/p&gt;

&lt;h2 id=&quot;importing-certificates-into-cacerts&quot;&gt;Importing certificates into &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The first way you can use certificates in a JVM is to add them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt; file of your Java distribution.&lt;/p&gt;

&lt;p&gt;Every JRE has its own keystore, which contains all Certificate Authorities it trusts.
This is also referred to as a &lt;code class=&quot;highlighter-rouge&quot;&gt;truststore&lt;/code&gt;.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;truststore&lt;/code&gt; is stored as a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt;.
It is typically located in &lt;code class=&quot;highlighter-rouge&quot;&gt;$JAVA_HOME/jre/lib/security&lt;/code&gt; assuming &lt;code class=&quot;highlighter-rouge&quot;&gt;$JAVA_HOME&lt;/code&gt; is where your JRE or JDK is installed.
The default password for this keystore is &lt;code class=&quot;highlighter-rouge&quot;&gt;changeit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following command imports the certificates into your JRE truststore.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -import -alias mydomain.be \
	-keystore $JAVA_HOME/jre/lib/security/cacerts \
	-file /etc/letsencrypt/live/mydomain.be/cert.pem \
	-storepass changeit \
	-noprompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that adding certificates to &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt; is not always the best solution.
Although technically it is a fully functional keystore file, its purpose is mainly for determining which third-party certificates to trust.
On top of this, it is tied to your Java installation and when you install another JRE or JDK, you’ll need to add the certificates again.&lt;/p&gt;

&lt;p&gt;Our preferred approach is to add your own certificates to a keystore and the third-party certificates to a separate truststore.
Continue reading to see how you can do that.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-separate-keystore-file&quot;&gt;Creating a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;To use a certificate in a Java application, the preferred way is to add it to a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The Java Runtime Environment (JRE) ships with a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt; to create certificates and manipulate key stores.
Adding certificates to a keystore can be done by using OpenSSL and the &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You cannot import multiple public and private &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; certificates directly in a keystore, so you’ll first need to add all &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; files to a &lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS_12&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCS 12&lt;/a&gt; archive.
We do this with the OpenSSL tool with the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs12 -export \
	 -in /etc/letsencrypt/live/mydomain.be/cert.pem \
	 -inkey /etc/letsencrypt/live/mydomain.be/privkey.pem \
	 -out /tmp/mydomain.be.p12 \
	 -name mydomain.be \
	 -CAfile /etc/letsencrypt/live/mydomain.be/fullchain.pem \
	 -caname &quot;Let's Encrypt Authority X3&quot; \
	 -password pass:changeit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.be&lt;/code&gt; with your own DNS name.&lt;/p&gt;

&lt;p&gt;The next step is to import the certificates into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -importkeystore \
	-deststorepass changeit \
	-destkeypass changeit \
	-deststoretype pkcs12 \
	-srckeystore /tmp/mydomain.be.p12 \
	-srcstoretype PKCS12 \
	-srcstorepass changeit \
	-destkeystore /tmp/mydomain.be.keystore \
	-alias mydomain.be
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now load the keystore at location &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/mydomain.be.keystore&lt;/code&gt; in your Java application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that you not only need to create a keystore with your own certificates, but also a truststore with the trusted third-party certificates.
However, the approach is exactly the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;automate-the-keystore-and-truststore-creation-process&quot;&gt;Automate the keystore and truststore creation process&lt;/h2&gt;

&lt;p&gt;Create a shell script &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/&amp;lt;username&amp;gt;/renew-keystore.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create keystore&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Refreshing '~/ssl/mydomain.be.keystore'&quot;&lt;/span&gt;
openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-export&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; /tmp/mydomain.be.p12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; mydomain.be &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-CAfile&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/fullchain.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-caname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Let's Encrypt Authority X3&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-password&lt;/span&gt; pass:changeit
keytool &lt;span class=&quot;nt&quot;&gt;-importkeystore&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-deststorepass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-destkeypass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-deststoretype&lt;/span&gt; pkcs12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srckeystore&lt;/span&gt; /tmp/mydomain.be.p12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srcstoretype&lt;/span&gt; PKCS12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srcstorepass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-destkeystore&lt;/span&gt; /tmp/mydomain.be.keystore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; mydomain.be
&lt;span class=&quot;c&quot;&gt;# Move certificates to other servers&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copy '~/ssl/mydomain.be.keystore' to cluster servers&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /tmp/mydomain.be.keystore /home/admin_jworks/ssl/mydomain.be.keystore
scp  /tmp/mydomain.be.keystore cc-backend-node-02:/home/admin_jworks/ssl/mydomain.be.keystore
scp  /tmp/mydomain.be.keystore cc-frontend-node-01:/home/admin_jworks/ssl/mydomain.be.keystore

&lt;span class=&quot;c&quot;&gt;# Create truststore&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Refreshing '~/ssl/theirdomain.be.keystore'&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;theirdomain.be.keystore
openssl s_client &lt;span class=&quot;nt&quot;&gt;-connect&lt;/span&gt; theirdomain.be:443 &lt;span class=&quot;nt&quot;&gt;-showcerts&lt;/span&gt; &amp;lt;/dev/null 2&amp;gt;/dev/null|openssl x509 &lt;span class=&quot;nt&quot;&gt;-outform&lt;/span&gt; DER &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;theirdomain.der
openssl x509 &lt;span class=&quot;nt&quot;&gt;-inform&lt;/span&gt; der &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; theirdomain.der &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; theirdomain.pem
keytool &lt;span class=&quot;nt&quot;&gt;-import&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; theirdomain &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; theirdomain.be.keystore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-file&lt;/span&gt; ./theirdomain.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-storepass&lt;/span&gt; theirdomain &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-noprompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copy '~/ssl/theirdomain.be.keystore' to cluster servers&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;theirdomain.be.keystore /home/admin_jworks/ssl/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;scp ssl/theirdomain.be.keystore cc-backend-node-02:/home/admin_jworks/ssl/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;scp ssl/theirdomain.be.keystore cc-frontend-node-01:/home/admin_jworks/ssl/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might not need everything from this script.
It does more than creating a new keystore:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It creates the keystore &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.be.keystore&lt;/code&gt; as described in the previous section &lt;a href=&quot;#creating-a-separate-keystore-file&quot;&gt;Creating and using a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It creates a truststore by connecting to the third-party server, writing their certificate to a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;theirdomain.pem&lt;/code&gt; and importing that file in &lt;code class=&quot;highlighter-rouge&quot;&gt;theirdomain.be.keystore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It also copies both keystore and truststore files to other servers in our cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The command to execute this shell script is installed in one of the following locations: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.*/*&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt;.
eg. To execute the script once every hour, you can add it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.hourly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will edit the contents of the crontab file on the system with &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt;.
The line should start with a cron expression telling the system when to execute the task followed by the command to be executed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Example of job definition:
.---------------- minute (0 - 59)
| .------------- hour (0 - 23)
| | .---------- day of month (1 - 31)
| | | .------- month (1 - 12) OR jan,feb,mar,apr ...
| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
| | | | |
* * * * * command to be executed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can read more on cron expressions in the Baeldung blog &lt;a href=&quot;https://www.baeldung.com/cron-expressions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Guide To Cron Expressions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following line in crontab makes sure our script is executed every hour.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * * * * bash /home/&amp;lt;username&amp;gt;/renew-keystore.sh &amp;gt;&amp;gt; /var/log/renew-keystore.log 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to set execute permissions on the created script to allow the system to run the script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x /home/&amp;lt;username&amp;gt;/renew-keystore.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s no need to restart something after changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; file.
Cron will examine the modification time on all crontabs and reload those which contain changes.&lt;/p&gt;

&lt;h2 id=&quot;using-keystores-and-truststores-in-a-java-application&quot;&gt;Using keystores and truststores in a Java application&lt;/h2&gt;

&lt;h3 id=&quot;spring-boot-configuration-properties&quot;&gt;Spring Boot configuration properties&lt;/h3&gt;

&lt;p&gt;We’ll be using Spring Boot to externalize our TLS configuration.
First, we add properties to point to our keystore and truststore archives on the filesystem and provide the necessary passwords.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that there are existing Spring Boot properties prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;server.ssl&lt;/code&gt; to configure TLS.
However, these properties are used for securing connections to your Tomcat server.
They will not configure HTTP clients used within your application.
We also need to configure more information about the service we’re consuming, eg. the endpoint url.
We therefore specify our own properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myprefix:
    client:
        remote-service-endpoint-url: https://www.theirdomain.be/services/3.0
        trust-store: /ssl/theirdomain.be.jks
        trust-store-password: changeit
        key-store: /ssl/mydomain.be.keystore
        key-store-password: changeit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we load those properties in a &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Configuration
@ConfigurationProperties(&quot;myprefix.client&quot;)
public class MyClientProperties {
    private String remoteServiceEndpointUrl;
    private String keyStore;
    private String keyStorePassword;
    private String trustStore;
    private String trustStorePassword;
    // Getters and setters
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This class is instantiated by Spring and can be autowired in other beans.&lt;/p&gt;

&lt;h3 id=&quot;javas-sslcontext-and-http-clients&quot;&gt;Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt; and HTTP clients&lt;/h3&gt;

&lt;p&gt;In Java there are several frameworks you can use to establish an HTTP connection.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpURLConnection&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Apache HttpComponents &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-4.5.x/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HttpClient&lt;/a&gt; – Please note that this is the successor of &lt;a href=&quot;http://hc.apache.org/httpclient-legacy/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Commons HttpClient&lt;/a&gt;.
If you’ll be using this client, make sure you’re importing the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.httpcomponents&lt;/code&gt; version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://square.github.io/okhttp/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OkHttp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java supports TLS communication through its &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;We’ll be using Apache’s &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-4.5.x/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HttpClient&lt;/a&gt; to setup TLS communication.
This library has builder classes with which you can easily create an &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following Maven dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpcore&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${httpcore.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${httpclient.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.ssl.SSLContexts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.ssl.SSLContextBuilder&lt;/code&gt; to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSLContext sslContext = SSLContexts
    .custom()
    .loadKeyMaterial(Paths.get(properties.getKeyStore()).toFile(), properties.getKeyStorePassword().toCharArray(), properties.getKeyStorePassword().toCharArray())
    .loadTrustMaterial(Paths.get(properties.getTrustStore()).toFile(), properties.getTrustStorePassword().toCharArray())
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt; can be used to create an Apache &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.impl.client.CloseableHttpClient&lt;/code&gt;.
We create the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.impl.client.HttpClients&lt;/code&gt; utility class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final CloseableHttpClient client = HttpClients
    .custom()
    .setSSLContext(sslContext)
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t have the &lt;code class=&quot;highlighter-rouge&quot;&gt;.setSSLContext(sslContext)&lt;/code&gt;, please check your &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.httpcomponents:httpclient&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;Each HTTP request executed using this client will be sent over a TLS connection.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that you also have the possibility to set the following Java system properties and ensure all communication uses TLS.&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.setProperty(&quot;javax.net.ssl.enabled&quot;, &quot;true&quot;);
System.setProperty(&quot;javax.net.ssl.trustStore&quot;, properties.getTrustStore());
System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, properties.getTrustStorePassword());
System.setProperty(&quot;javax.net.ssl.keyPassword&quot;, properties.getKeyStorePassword());
System.setProperty(&quot;javax.net.ssl.keyStore&quot;, properties.getKeyStore());
System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, properties.getKeyStorePassword());
System.setProperty(&quot;javax.net.ssl.clientAuth&quot;, &quot;need&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;Although it’s a valid possibility, these are settings for the entire system.
On top of that, when you need to integrate with multiple third-parties and are dealing with multiple trusted parties and multiple public/private keypairs, it can become a mess to add everything to single keystore and truststore files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-the-keystore-with-spring-rest&quot;&gt;Using the keystore with Spring REST&lt;/h3&gt;

&lt;p&gt;In the previous section we learned how to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt; and an Apache HttpComponents &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calling REST endpoints with Spring REST is done by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.client.RestTemplate&lt;/code&gt; class.
This class is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-web&lt;/code&gt; module, which is automatically added by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; dependency.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring’s &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; is an abstraction of the different HTTP clients we can use in Java.
Under the hood, when a request is executed on the &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt;, Spring uses the passed &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.client.ClientHttpRequestFactory&lt;/code&gt; to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.ClientHttpRequest&lt;/code&gt;, executes the request and transforms it to a &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.ClientHttpResponse&lt;/code&gt;.
There’s a specific implementation of these classes for each HTTP client.&lt;/p&gt;

&lt;p&gt;For example, for Apache’s HttpComponents HttpClient, you can find classes with the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpComponents&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpRequestFactory&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpRequest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpResponse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpComponentsClientHttpRequestFactory&lt;/code&gt; to customize the &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; and we register it with the Spring context by annotating the method with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; in one of the configuration classes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Bean
public RestTemplate restTemplate() throws Exception {
    return new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that in the above code snippet, &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; must be an instance of Apache’s HttpComponents HttpClient, eg. the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; we created in the previous section.&lt;/p&gt;

&lt;h3 id=&quot;using-the-keystore-with-spring-ws&quot;&gt;Using the keystore with Spring WS&lt;/h3&gt;

&lt;p&gt;From time to time you have to integrate with a SOAP web service from the customer or a third party and use TLS communication when doing so.&lt;/p&gt;

&lt;p&gt;In the following example, we’ll use &lt;a href=&quot;https://spring.io/projects/spring-ws&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Web Services&lt;/a&gt; to implement this.
Spring WS defines an interface &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.client.core.support.WebServiceGatewaySupport&lt;/code&gt; of which you can create an instance.
It uses an attribute of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.transport.WebServiceMessageSender&lt;/code&gt; to do the actual communication.
Like with Spring REST, there are specific implementations for each HTTP client library.
For Apache HttpComponents HttpClient, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.transport.http.HttpComponentsMessageSender&lt;/code&gt;.
It accepts an &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.client.HttpClient&lt;/code&gt; to use for low-level communication.&lt;/p&gt;

&lt;p&gt;Your application must provide a bean instance of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceGatewaySupport&lt;/code&gt;.
On this object, you can set an instance of a &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceMessageSender&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Bean
public Jaxb2Marshaller marshaller() {
    Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
    marshaller.setContextPath(&quot;fully.qualified.package.name.of.generated.sources&quot;);
    return marshaller;
}

@Bean
public MyClient myClientSecure(Jaxb2Marshaller marshaller) {
    MyClient client = new MyClient(properties);
    String url = properties.getRemoteServiceEndpointUrl();
    client.setDefaultUri(url);
    client.setMarshaller(marshaller);
    client.setUnmarshaller(marshaller);
    client.setMessageSender(new HttpComponentsMessageSender(client));
    return client;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like in the Spring REST example, &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; must be an instance of Apache’s HttpComponents HttpClient, eg. the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; we created earlier.&lt;/p&gt;

&lt;p&gt;Calling a service with the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.client.core.WebServiceTemplate&lt;/code&gt; of our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClient&lt;/code&gt; bean now uses the configured keystore and truststore.
You can call a SOAP endpoint with &lt;code class=&quot;highlighter-rouge&quot;&gt;getWebServiceTemplate().marshalSendAndReceive(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClient&lt;/code&gt; class extends &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceGatewaySupport&lt;/code&gt;.
The code snippet below also includes a sample call.
&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestType&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseType&lt;/code&gt; are classes generated from the &lt;code class=&quot;highlighter-rouge&quot;&gt;wsdl&lt;/code&gt; file and typically reside in the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt; directory of your project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Component
public class MyClient extends WebServiceGatewaySupport {
    public ResponseType getMonthlyAlertDetail(BigInteger alertId, String apiKey) {
        return JAXBElement&amp;lt;ResponseType&amp;gt; response = (JAXBElement&amp;lt;ResponseType&amp;gt;) getWebServiceTemplate()
                .marshalSendAndReceive(new RequestType(...), message -&amp;gt; ((SoapMessage) message).setSoapAction(&quot;SoapOperationName&quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-the-keystore-in-keycloak&quot;&gt;Using the keystore in Keycloak&lt;/h3&gt;

&lt;p&gt;If you’re using a product like eg. &lt;a href=&quot;https://www.keycloak.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Keycloak&lt;/a&gt; on your server, the way of using the certificate stays the same.
It’s even easier, as you don’t need to write code to read the &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.
You can point to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file in the configuration files for that product.&lt;/p&gt;

&lt;p&gt;This is an example Keycloak configuration in the &lt;code class=&quot;highlighter-rouge&quot;&gt;standalone.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;security-realm name=&quot;ApplicationRealm&quot;&amp;gt;
    &amp;lt;server-identities&amp;gt;
        &amp;lt;ssl&amp;gt;
            &amp;lt;keystore path=&quot;/tmp/mydomain.be.keystore&quot; relative-to=&quot;jboss.server.config.dir&quot; keystore-password=&quot;changeit&quot; alias=&quot;mydomain.be&quot; key-password=&quot;changeit&quot; generate-self-signed-certificate-host=&quot;localhost&quot;/&amp;gt;
        &amp;lt;/ssl&amp;gt;
    &amp;lt;/server-identities&amp;gt;
&amp;lt;/security-realm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://letsencrypt.org/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Let’s Encrypt Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://certbot.eff.org/docs/using.html?highlight=renew#renewing-certificates&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot CLI Renewing certificates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oracle Java keytool documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS_12&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCS 12 information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-ws&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ken&quot;, &quot;last_name&quot;=&gt;&quot;Coenen&quot;, &quot;twitter&quot;=&gt;&quot;CoenenKen&quot;, &quot;linkedin&quot;=&gt;&quot;coenenken&quot;, &quot;github&quot;=&gt;&quot;kencoenen&quot;, &quot;permalink&quot;=&gt;&quot;/author/ken-coenen/&quot;, &quot;avatar&quot;=&gt;&quot;ken-coenen.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Backend Practice Manager&quot;, &quot;email&quot;=&gt;&quot;ken.coenen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Ken is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he is also Backend Practice Manager of the Ordina JWorks unit. In this capacity, he narrows the gap between consultants and potential innovative customer projects. He does this by organizing workshops, talks and courses about the newest technologies, whereby people can grow in their role as a software consultant.&quot;}</name><email>ken.coenen@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="TLS" /><category term="Let's Encrypt" /><category term="Keycloak" /><summary type="html">At some point in their career, developers come accross the need to work with security certificates. This article describes how to setup Let’s Encrypt, retrieve a certificate, renew it automatically and use the certificate in a Java application for TLS communication.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/lets-encrypt.png" /></entry><entry><title type="html">Deploying your Spring Boot application with Kubernetes</title><link href="https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html" rel="alternate" type="text/html" title="Deploying your Spring Boot application with Kubernetes" /><published>2019-08-05T00:00:00+00:00</published><updated>2019-08-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today we are going to look at the features and benefits of using a Kubernetes cluster to deploy your application. As I am mostly focused on Java development, we will use a standard Spring Boot application as an example.&lt;/p&gt;

&lt;p&gt;Assuming you have already heard of Kubernetes, you are probably aware of the continuing growth of this platform. More and more Kubernetes based platforms are growing in popularity because of the proven record of Kubernetes. Examples are OpenShift, Cloud Foundry, PKS, ….&lt;/p&gt;

&lt;p&gt;As adaptation is growing, many developers are wondering how to effectively use these platforms to deploy their application in the cloud on a Kubernetes cluster and make full use of its benefits.&lt;/p&gt;

&lt;p&gt;Many big providers have already picked up Kubernetes and are providing their own (semi) managed implementations. A couple of examples are &lt;a href=&quot;https://aws.amazon.com/eks/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Web Services (EKS)&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Cloud Platform (GKE)&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/nl-nl/services/kubernetes-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure (AKS)&lt;/a&gt;, &lt;a href=&quot;https://www.digitalocean.com/products/kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DigitalOcean&lt;/a&gt;, ….&lt;/p&gt;

&lt;p&gt;In this post we will take a look at how you can use Kubernetes to deploy a Spring Boot application.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.github.com/yolanv/kubernetesdemo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Spring Boot project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A Kubernetes cluster.
This can be a cluster in the cloud, in an on-premise datacenter or you can use &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;minikube&lt;/a&gt; if you want to try this on your local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the project from the prerequisites if you want to try it out with a sample project. This blog post will be based on this project. If you are using an other project, then change the names and labels where necessary.&lt;/p&gt;

&lt;h2 id=&quot;first-things-first-creating-a-docker-image&quot;&gt;First things first: creating a Docker image&lt;/h2&gt;

&lt;p&gt;Kubernetes works with Docker images. This means that your application needs to be dockerized so it can be pushed to a Docker registry. You can find a sample Dockerfile below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8-jre-alpine
WORKDIR /tmp
COPY target/kubernetesdemo-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a very basic Dockerfile but it will do for our example.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Docker&quot; src=&quot;/img/2019-07-11-deploy-spring-boot-kubernetes/docker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first line tells us to use the &lt;strong&gt;8-jre-alpine&lt;/strong&gt; image from the openJDK repository as our base image.
The second line tells the image that it should work from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory.
The third line copies the compiled JAR (which is compiled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt; command) file from your &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; folder to the Docker image (you might have to rename the file depending on the name of your project).&lt;/p&gt;

&lt;p&gt;Finally, we tell our image to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command as entry point, meaning that once the Docker image starts running, it has to execute that command.&lt;/p&gt;

&lt;p&gt;You can now push this image to your favourite Docker registry, as Kubernetes will need to pull this image from the registry later.
If you do not have a Docker registry, I suggest using &lt;a href=&quot;https://hub.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docker Hub&lt;/a&gt;.
If you are using Docker Hub, you can use the following commands to build and push your application to the registry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t DOCKER_HUB_USERNAME/APPLICATION_NAME .
docker push DOCKER_HUB_USERNAME/APPLICATION_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-the-magic-happens-deploying-your-application-on-the-kubernetes-cluster&quot;&gt;Where the magic happens: deploying your application on the Kubernetes cluster&lt;/h2&gt;

&lt;p&gt;All Kubernetes configurations are written in YAML. The reason for this is that Kubernetes configuration files are meant to be easily readable by the human eye and the Kubernetes team decided to use YAML instead of JSON.&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;Now that the Docker image is created, we can now deploy it on the Kubernetes cluster. 
First we need to create a deployment configuration file. This file contains the configuration on how the application should run.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yolanv/kubernetesdemo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There’s a lot going on here which I will be explaining step by step.
The first two lines are telling which Kubernetes API version is being used and what kind of Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;object&lt;/a&gt; is being applied. As we want to create a new Deployment, we use the Deployment object (easy, right?).&lt;/p&gt;

&lt;p&gt;Lines 3 to 6 are just basic metadata tags so the developer knows which application (s)he is working with. This does not affect the behaviour of the application in any way.&lt;/p&gt;

&lt;p&gt;Lines 7 to 21 are specifying how the container should be made and which image it has to run. This is the image that we created with the Dockerfile earlier in this post. After that, it describes the port that the container should listen to, which is 8080 in this case. The replica value specifies how many ‘instances’ (also called &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pods&lt;/a&gt;) that should be running. If the application is expecting a lot of requests, it might be useful to declare a higher number of replicas instead of only one.
Lines 13 to EOF are specifying the environment variables that the container uses. They can either be hard-coded like &lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt; or a &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Secret&lt;/a&gt; or &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap&lt;/a&gt; can be created, which can then be used in a Deployment configuration, as in the example above.&lt;/p&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;
&lt;p&gt;The Deployment is up and running, but we need some way to access our pod from the outside world. This is where a &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service&lt;/a&gt; comes in. 
A Service provides external access to a set of Pods and decides which pod should handle the request.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30011&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first four lines should be familiar.
Instead of a Deployment, we are now declaring a Service.&lt;/p&gt;

&lt;p&gt;There are three types of services you can declare: ClusterIP, NodePort and LoadBalancer. It is not recommended to use NodePort in a production environment because of the limited options. Instead you might want to use a LoadBalancer. Most big cloud providers can provide a LoadBalancer for you. Another option is to use an &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ingress&lt;/a&gt;, which is a recommended and popular option. If you want to learn more about this, I suggest you consult the &lt;a href=&quot;https://v1-13.docs.kubernetes.io/docs/concepts/services-networking/service/#nodeport&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official Kubernetes documentation&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;nodePort&lt;/code&gt; value can be left out if you want Kubernetes to assign a random NodePort to your service.&lt;/p&gt;

&lt;p&gt;The selector value is meant to find the Pods with the same value as &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.selector.matchLabels&lt;/code&gt; from the Deployment configuration. This is how the Service is able to find our Pods.&lt;/p&gt;
&lt;h3 id=&quot;applying-the-configuration&quot;&gt;Applying the configuration&lt;/h3&gt;

&lt;p&gt;Now that we have our YAML files, we can apply them to the cluster. You can even combine the two configurations into one file and separate them with &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;.
You can use this separator to prevent having too many YAML configuration files.&lt;/p&gt;

&lt;p&gt;You can apply the configuration by using the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f k8s/kubernetesdemo-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will be something like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment.apps/kubernetesdemo created
service/kubernetesdemo created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application is now accessible through &lt;code class=&quot;highlighter-rouge&quot;&gt;http://IP_ADDRESS:NODE_PORT&lt;/code&gt;. So if you are using Minikube, the IP should be &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.99.100:30080/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There is a lot of documentation available on the internet if you want to learn more about the power of Kubernetes. Think about the options and features that are available when using this platform. You can integrate it with your CI / CD tools (automated deployments!), autoscaling, … . The options are endless. 
If you have any questions or feedback, I would love to hear them from you.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development. He also likes to experiment with frontend and mobile libraries and frameworks.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Cloud" /><category term="Kubernetes" /><category term="Spring" /><category term="Spring Boot" /><category term="Docker" /><category term="AWS" /><category term="EKS" /><category term="Google" /><category term="GKE" /><category term="DigitalOcean" /><category term="Azure" /><category term="AKS" /><category term="kubectl" /><category term="Minikube" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-07-11-deploy-spring-boot-kubernetes/banner.jpg" /></entry><entry><title type="html">Cypress: a new kid on the E2E block</title><link href="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html" rel="alternate" type="text/html" title="Cypress: a new kid on the E2E block" /><published>2019-07-18T00:00:00+00:00</published><updated>2019-07-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/07/18/Cypress</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cypress&quot;&gt;Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison&quot;&gt;Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-cypress&quot;&gt;Setting up Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amazing-features&quot;&gt;Amazing features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Those of us familiar with E2E testing a user interface, we all know the struggle.
Not only coding with waits and timeouts but setups that were harder to manage especially when running it on a continuous integration platform.
Maintaining versions, network issues, browser support, …&lt;/p&gt;

&lt;p&gt;For as long as I can remember, there was one constant in this setup!
Selenium was always there.
No matter what framework you used, Nightwatch, Protractor, Gauge, Robot, …
Selenium was the man in the middle.
All I can remember from building a Selenium setup a few years ago, are all the difficulties and frustrations.
Communication was not working, versions were not matching, timeout issues due to network lag, ….
But still, Selenium was a dependency that was needed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/selenium-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Not that I am not grateful for Selenium and its team of developers and maintainers, because let’s be honest, what would we have done without it?
But now, ohh yeah, there’s a new kid in town.&lt;/p&gt;

&lt;h1 id=&quot;cypress&quot;&gt;Cypress&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser
~&lt;a target=&quot;\_blank&quot; href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cypress is aiming to provide its users with a bundled experience for writing end-to-end tests for web applications.
While lots of other frameworks (as mentioned above) are all interacting over a Selenium server,
for remote communication and by definition, running its tests outside of the browser, Cypress is executed inside the browser.
Therefore Cypress is executed in the same runtime as your application itself.
Because of this, Cypress has native access to every single object. The &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;-element, a &lt;code class=&quot;highlighter-rouge&quot;&gt;service worker&lt;/code&gt;, … .
Cypress does not need to send commands over-the-wire and can just access everything.&lt;/p&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Selenium&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cypress&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Debugging:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hard/Remote&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy/Access to everything/Nice tool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Speed:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Remote = slow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In browser = Fast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Headless:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Language support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java, Perl PHP, Python, Ruby, C#, Javascript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Browser support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Everything&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Only webkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;basic-architecture&quot;&gt;Basic Architecture&lt;/h2&gt;

&lt;p&gt;Cypress consists of a few different building blocks.
One of them is its own Nodejs process.
You can look at this as being a backend.
This backend then launches a browser window, sets up a proxy to this browser window and sets the domain to localhost.
The browser window has two iFrames inside.
One is for Cypress itself.
The second one will hold the application under test.
To make it possible to communicate with the application’s iFrame, it injects a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;-tag that also sets its domain to localhost.
Because now, both iFrames are running on ‘localhost’, it is possible to access everything of the application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/cypress-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The proxy is proxying all requests from the web application itself to its backend.
Because the proxy is part of the Cypress-setup, Cypress can act as the man-in-the-middle and spy on, mock or modify the requests and responses.&lt;/p&gt;

&lt;p&gt;Communication between the Cypress Nodejs-backend and the Cypress iFrame, that is running the tests, is through a websocket.&lt;/p&gt;

&lt;p&gt;There are a few downsides as seen in the comparison.
Because Cypress is running inside of the browser, the language is Javascript.
Cypress only supports Chrome so far. Although Cypress is working on supporting other browsers.
Today there is no way of testing in Safari, Ìnternet Explorer, Edge, …
Cypress tests are written using Mocha and Chai.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-cypress&quot;&gt;Setting Up Cypress&lt;/h1&gt;

&lt;h2 id=&quot;installing-cypress&quot;&gt;Installing Cypress&lt;/h2&gt;

&lt;p&gt;Installation of Cypress is really simple.
You can install it through Yarn:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or plain npm:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also install it globally.
This way you do not need a local &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to run Cypress and all Cypress commands can be run straight from the command line.&lt;/p&gt;

&lt;h2 id=&quot;running-cypress&quot;&gt;Running Cypress&lt;/h2&gt;

&lt;p&gt;Depending on how you just installed Cypress, you can run Cypress by:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;
of
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ $(npm bin)/cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or globally:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first positive surprise!
When opening Cypress for the first time, it notices that you haven’t run it before and it kindly scaffolds a &lt;code class=&quot;highlighter-rouge&quot;&gt;/cypress&lt;/code&gt; folder with examples into your project.
This way, you already have a configured &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; to start from.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime2.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, Cypress opens its own application.
This is kind of a backend application that will orchestrate the tests.
Running one of the tests, means that Cypress will open a second window, which is actually just a new browser window.
It will then inject itself into that window in one frame, and load the application under test in another frame.&lt;/p&gt;

&lt;h2 id=&quot;configuring-cypress&quot;&gt;Configuring Cypress&lt;/h2&gt;

&lt;p&gt;You can custom configure Cypress by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; file in the root of your project.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://demo-app.localtest.me/demo-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;integrationFolder&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testFiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**.spec.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mochawesome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporterOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportDir&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportFilename&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can always override these settings on the command-line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run --spec src/** -c baseUrl=http://localhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a full overview of the configuration options, just check out the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Options&quot; target=&quot;blank&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reporters&quot;&gt;Reporters&lt;/h2&gt;

&lt;p&gt;Just like other frameworks, Cypress lets you add custom reporters for the test results.
As you can see above, we’ve added &lt;code class=&quot;highlighter-rouge&quot;&gt;mochawesome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install it via Yarn:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add mochawesome &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then manually add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot; target=&quot;blank&quot;&gt;documentation&lt;/a&gt; for the configuration.&lt;/p&gt;

&lt;h2 id=&quot;cypress-and-typescript&quot;&gt;Cypress and TypeScript&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cypress ships with official type declarations for TypeScript. This allows you to write your tests in TypeScript. All that is required is a little bit of configuration. ~docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation itself is linking to some different examples.
You can read all about the setup &lt;a target=&quot;blank&quot; href=&quot;https://docs.cypress.io/guides/tooling/typescript-support.html&quot;&gt;here&lt;/a&gt;.
And you can also take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm package add-typescript-to-cypress&lt;/code&gt; &lt;a href=&quot;https://www.npmjs.com/package/@bahmutov/add-typescript-to-cypress&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writing-your-first-tests&quot;&gt;Writing your first tests&lt;/h2&gt;

&lt;p&gt;As shown above, you can configure the path to your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files.
In our case, we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;.
Cypress will go through that directory and show all the spec files when using Cypress in development mode.
When running Cypress command line to only run the tests, it will just run all those &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files and then create the report.&lt;/p&gt;

&lt;p&gt;In our small example we have an Angular demo app that has a material &lt;code class=&quot;highlighter-rouge&quot;&gt;sidenav&lt;/code&gt; with three links.
Dashboard, clients and products.
The latter two both have a material &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/demo-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s say we want to test our clients navigation and &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.
Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt; directory, in our case, named &lt;code class=&quot;highlighter-rouge&quot;&gt;clients.spec.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;reference types=&quot;Cypress&quot; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients page should have Clients as a title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.table-container-header h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should initially have 20 rows&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should show 10 rows when pagesize is set to 10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-option&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-your-first-tests&quot;&gt;Running your first tests&lt;/h2&gt;

&lt;p&gt;If you would now run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;.
Cypress will open itself, showing you your new &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file.
You can now run your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file by double clicking it, or click the ‘run all’ option on the top right of your Cypress application.&lt;/p&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file will trigger a reload/retest in your Cypress-environment.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/main-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;amazing-features&quot;&gt;Amazing features&lt;/h1&gt;

&lt;p&gt;The purpose of this post is not to provide you with some sample code, but trying to convince you to take a look at Cypress.
To do so, I’ll quickly go over some really nice features because besides the easy setup and nice main application, Cypress has much more to offer.&lt;/p&gt;

&lt;h2 id=&quot;debugging-with-cypress&quot;&gt;Debugging with Cypress&lt;/h2&gt;

&lt;p&gt;One of the hardest things when writing E2E tests is debugging.
Running tests over and over again, while logging everything to check what is going on, is now history.
Cypress injects itself in the same window as the application under test, so it has access to everything.
Everything, including the debugger.&lt;/p&gt;

&lt;p&gt;This means that you can actually debug your test code as you would debug the application itself.
Although using the debugger is not that straight forward, it’s a great help.
Check out out the documentation &lt;a href=&quot;https://docs.cypress.io/guides/guides/debugging.html#Using-debugger&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;snapshots&quot;&gt;Snapshots&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/snapshot.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Take a look at the image above.
As you can see, Cypress takes a snapshot at every stage of the test.
You can navigate through them later and see the snapshot at a specific time and even see the difference in the state of the application before a request and after its response when running &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR requests&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;network-accessibility&quot;&gt;Network accessibility&lt;/h2&gt;

&lt;p&gt;As mentioned above, Cypress can take snapshots before and after each &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR request&lt;/code&gt;.
Cypress knows what is going on under the hood because it is running in the same window.
This makes it easy to implement stubs and spies.&lt;/p&gt;

&lt;p&gt;A simple example for our use case would be intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;client-service&lt;/code&gt; calls and return mocked data.
To do so, Cypress needs to run a server.
This can be done by just running &lt;code class=&quot;highlighter-rouge&quot;&gt;cy.server()&lt;/code&gt;.
Next step is to define the route you want to listen on and attach new data to it.
Cypress enables this with its &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; configuration.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;**/*/api/client-service/**/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tatiana&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Velez&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;diam.dictum@Proin.net&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;626286135&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dumfries&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;694245&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;paged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unpaged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;numberOfElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;stub-clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/network-stub.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;screenshots-and-videos&quot;&gt;Screenshots and videos&lt;/h2&gt;

&lt;p&gt;Another cool embedded feature is the ability to capture screenshots or record videos.
Cypress comes with screenshot and video recording out of the box.
Screenshots always come in handy when trying to find a bug.
Cypress even lets you take a screenshot, manually, from within your code.
Before, we were always setting this up using ‘yet another plugin’ (and dependency).&lt;/p&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;/h1&gt;

&lt;p&gt;Running Cypress on a continuous integration platform is also pretty easy.
You just want Cypress to run the tests and not to open its Electron test manager for development.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run&lt;/code&gt; just does that.
Just append the other options you want to override from the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; and you are good to go.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress:ci&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/command-line.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/mochawesome.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Although there are still some downsides to this new player in the E2E testing field, such as only supporting JavaScript and Chrome, there are just too many positives to keep it on the sideline.
Cypress provides us with a new amazing test runner and manager. It strips all the hassles of previous setups and provides us with a real robust framework.
It is providing us with cool but effective features like the snapshot time travel, easy debugging, headful/headless mode for CI and more.&lt;/p&gt;

&lt;p&gt;Cypress is too good to not take a look at!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learning how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Continuous Integration" /><category term="E2E" /><category term="JavaScript" /><category term="Testing" /><category term="Selenium" /><category term="Cypress" /><summary type="html">Table of contents Intro Cypress Comparison Setting up Cypress Amazing features Continuous Integration Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/cypress/cypress-logo.png" /></entry><entry><title type="html">Fishbones for Tomorrow</title><link href="https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow.html" rel="alternate" type="text/html" title="Fishbones for Tomorrow" /><published>2019-07-16T00:00:00+00:00</published><updated>2019-07-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/07/16/Fishbones-for-tomorrow.html">&lt;p&gt;For quite a few years now, I have been going steady with Japan, the birthplace of so many philosophies, teachings and practices preceding and gearing up to the Agile movement. 
This is how I came to discover the well-hidden connection between work and fish. 
In Eastern Asia, the carp or koi is a deeply symbolic and highly respected animal, the presence and/or representation of which is considered a placeholder for luck, prosperity and a long life. 
No surprise then, that the fish is sometimes used as a metaphor for good business practice and process improvement.&lt;/p&gt;

&lt;p&gt;Well, here is another piece of Japanese fish for you to fry.&lt;/p&gt;

&lt;h3 id=&quot;fish-that-were-yesterday&quot;&gt;Fish that were yesterday&lt;/h3&gt;

&lt;p&gt;Without any doubt, Kaoru Ishikawa 石川馨 (1915-1989) was one of the game changing Japanese organizational theorists of our time. 
With his near-contemporaries Noriaki Kano (of the famous Kano MVP and customer satisfaction model), W. Edwards Deming (of 14 points and PDCA cycle fame), and Hirotaka Takeuchi and Ikujiro Nonaka (who were the first to come up with SCRUM in ‘The New New Product Development Game’, 1986), Ishikawa sort of laid the foundations of organisational models as we know and use them today. 
Also, Ishikawa-sama is considered a key figure in the development of quality initiatives in Japan and elsewhere.&lt;/p&gt;

&lt;p&gt;As a baseline, Ishikawa had in mind to change the way people think about life, including work. 
His notion of organisation-wide quality control, cross-functional and cross-departmental, implied awareness of everybody always being one another’s supplier and customer, which in turn called for continued, multi-directional customer service. 
This meant that a customer would continue receiving service even after receiving the product. 
This service would extend across the organisation itself, infecting not just the work and the output but even the everyday lives of those involved.&lt;/p&gt;

&lt;p&gt;To this end, Ishikawa thought of a set of useful and relevant methods. 
One of these, and what Ishikawa is mostly famous for, is the fishbone diagram, a.k.a. the Ishikawa or cause-and-effect diagram, often used in the analysis of industrial processes.&lt;/p&gt;

&lt;p&gt;Most commonly, Ishikawa diagrams are created to brainstorm over the multiple causes for a specific current event or defect. 
The current status, default status, or, perhaps in most cases, the defect, is shown as the fish’s head, with the causes extending to the left as fishbones; the ribs branching off the backbone for major causes, with sub-branches for root-causes, up to as many levels as required, brainstormed or identified.
An example of a fishbone diagram is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sushi&quot; src=&quot;/img/fishbones-for-tomorrow/fishbone-example.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You could try doing fishbones at home with your children. 
They are a lot of fun to do – and they help your children understand that situations are mere results of a chain of previous events, and that nobody really is to blame for them.&lt;/p&gt;

&lt;p&gt;Fishbone structures with the head at the right side are beautiful – because they are in some way a reflection of evolution and natural selection. 
They can also be viewed as a representation of complexity, where multiple minute events, small circumstances and off-chance happenings, all contribute to ‘what is’, in the here and the now.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Fishbones&quot; src=&quot;/img/fishbones-for-tomorrow/fishbones.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;turning-around-the-arrow-of-time&quot;&gt;Turning around the arrow of time&lt;/h3&gt;

&lt;p&gt;Okay. 
This is all pretty useful of course – but somehow, sometimes, in my work as an Agile Coach, I have been coming across teams more keen on exploring ahead and discovering further possibilities and opportunities, than teams that keep looking backward. 
And recently, in such a case, I thought I might permit myself and the team I was working with to even meddle with the arrow of time.&lt;/p&gt;

&lt;p&gt;Kaoru Ishikawa-sama might not have approved, but I decided to use a fishbone diagram to focus on the future rather than digging up causes of a problem from the past.&lt;/p&gt;

&lt;p&gt;For future orientation, one might keep the fish with its head at the right side, now representing an envisioned state, and work out suggested pre-conditions – or one might turn the fish around altogether and make the head the starting point of an ever widening array of possibilities.&lt;/p&gt;

&lt;p&gt;In my practice, I have noticed that the cause-and-effect method is in fact a really powerful tool to facilitate teams in parallel thinking. 
After formulating a goal statement that everyone agrees on, defining the cause areas is a helpful step towards discovering shared and alternative trains of thought. 
But once these areas are clear, every participant makes a deep dive into their personal knowledge and experience with regard to the goal and tries to gather as many ideas as possible, in silence.
Then, one by one, the team members present their ideas while others detect and formulate connections, doubles and insights.&lt;/p&gt;

&lt;p&gt;This technique helps the team to orderly gather a myriad of ideas, and it really sets things in motion. 
Because from then onwards, with prioritisation and some concrete actions and owners, the fishbone forms the backbone for team improvement towards a self-defined goal.&lt;/p&gt;

&lt;h3 id=&quot;collaboration-is-a-whole-new-piece-of-fish&quot;&gt;Collaboration is a whole new piece of fish&lt;/h3&gt;

&lt;p&gt;For us, Agilists and assorted kindred souls, the virtues of thinking and making stuff together are obvious. 
After all, there is hardly an approach in the Agile framework where co-creation is not written into the very DNA of who we are and what we do.&lt;/p&gt;

&lt;p&gt;Does it need saying that being out in the world hunting for appropriate liberating structures permitting cooperation and collaboration has become a second nature for me?&lt;/p&gt;

&lt;p&gt;It could be for you, too. 
Think of this: when turning around the arrow of time is permitted, if it facilitates working together - then everything else is permitted too, all the way up to imagining a world upside down.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sushi&quot; src=&quot;/img/fishbones-for-tomorrow/sushi.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;credit&quot;&gt;Credit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Artwork in the main image by &lt;a href=&quot;http://heatherfortner.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Heather Fortner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fishbone example taken from &lt;a href=&quot;https://www.24point0.com/powerpoint-business-templates/applications-fishbone-diagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;24point0.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Agile Coaching" /><category term="Liberating Structures" /><category term="Root Cause Analysis" /><category term="Powerful Techniques" /><summary type="html">For quite a few years now, I have been going steady with Japan, the birthplace of so many philosophies, teachings and practices preceding and gearing up to the Agile movement. This is how I came to discover the well-hidden connection between work and fish. In Eastern Asia, the carp or koi is a deeply symbolic and highly respected animal, the presence and/or representation of which is considered a placeholder for luck, prosperity and a long life. No surprise then, that the fish is sometimes used as a metaphor for good business practice and process improvement.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/fishbones-for-tomorrow/main-image.jpg" /></entry><entry><title type="html">Spring IO 2019</title><link href="https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019.html" rel="alternate" type="text/html" title="Spring IO 2019" /><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/07/10/Spring-IO-2019.html">&lt;h1 id=&quot;spring-io-2019&quot;&gt;Spring IO 2019!&lt;/h1&gt;

&lt;p&gt;Spring I/O has become a yearly tradition for our JWorks consultants. 
With 21 colleagues we went to the conference in beautiful Barcelona on the 16th and 17th of May.&lt;/p&gt;

&lt;p&gt;The conference was held at the same location as last year, the &lt;strong&gt;Palau de Congressos de Barcelona&lt;/strong&gt;. 
As indicated last year, this year there was an overlap at the venue with the &lt;a href=&quot;http://www.automobilebarcelona.com/es/visitar&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Barcelona 
International Motor Show&lt;/a&gt;.
This gave us the opportunity to take a look at some beautiful cars during breaks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/venue.jpg&quot; alt=&quot;Venue Spring I/O 2019&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jworks.jpg&quot; alt=&quot;JWorks at Spring I/O 2019&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In this blog post we’ll talk about some of the presentations of this year but it is not a complete list.
There were so many interesting talks and all of them are available on &lt;a href=&quot;https://www.youtube.com/playlist?list=PLe6FX2SlkJdTlXfwer8JB-WGm-TEyIB2k&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us know if we missed anything by &lt;a href=&quot;https://github.com/ordina-jworks/ordina-jworks.github.io/issues/new&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;filing an issue&lt;/a&gt; or contacting us at &lt;a href=&quot;mailto:jworks@ordina.be&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;our general JWorks email&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#moving-from-imperative-to-reactive-by-paul-harris&quot;&gt;Moving from Imperative to Reactive by Paul Harris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration-management-with-kubernetes-a-spring-boot-use-case-by-nicolas-frankel&quot;&gt;Configuration Management with Kubernetes, a Spring Boot use case by Nicolas Frankel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-better-monoliths---modulithic-applications-with-spring-boot-by-oliver-drotbohm&quot;&gt;Building better monoliths - Modulithic Applications with Spring Boot by Oliver Drotbohm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cutting-edge-continuous-delivery-automated-canary-analysis-through-spring-based-spinnaker-by-andreas-evers&quot;&gt;Cutting-Edge Continuous Delivery: Automated Canary Analysis through Spring based Spinnaker by Andreas Evers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-java-modules-in-practice-with-spring-boot-by-jaap-coomans&quot;&gt;Using Java Modules in Practice with Spring Boot by Jaap Coomans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stream-processing-with-the-spring-framework-by-josh-long-and-viktor-gamov&quot;&gt;Stream Processing with the Spring Framework by Josh Long and Viktor Gamov&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-fast-is-spring-by-dave-syer&quot;&gt;How Fast is Spring by Dave Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kubernetes-andor-cloud-foundry---how-to-run-your-spring-boot-microservices-on-state-of-the-art-cloud-platforms-by-matthias-haeussler&quot;&gt;Kubernetes and/or Cloud Foundry - How to run your Spring Boot Microservices on state-of-the-art cloud platforms by Matthias Haeussler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#migrating-a-modern-spring-web-application-to-serverless-by-jeroen-sterken-and-wim-creuwels&quot;&gt;Migrating a modern spring web application to serverless by Jeroen Sterken and Wim Creuwels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing-spring-boot-applications-by-andy-wilkinson&quot;&gt;Testing Spring Boot Applications by Andy Wilkinson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-live-in-a-post-spring-cloud-netflix-world-by-olga-maciaszek-and-marcin-grzejszczak&quot;&gt;How to live in a post-Spring-Cloud-Netflix world by Olga Maciaszek and Marcin Grzejszczak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#event-driven-microservices-with-axon-and-spring-boot-excitingly-boring-by-allard-buijze&quot;&gt;Event-Driven Microservices with Axon and Spring Boot: excitingly boring by Allard Buijze&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-secure-your-spring-apps-with-keycloak-by-thomas-darimont&quot;&gt;How to secure your Spring apps with Keycloak by Thomas Darimont&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zero-downtime-migrations-with-spring-boot-by-alex-soto&quot;&gt;Zero Downtime Migrations with Spring Boot by Alex Soto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-1-talks--workshops&quot;&gt;Day 1: Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;h2 id=&quot;moving-from-imperative-to-reactive-by-paul-harris&quot;&gt;Moving from Imperative to Reactive by &lt;a href=&quot;https://twitter.com/twoseat&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Paul Harris&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Paul Harris&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/paul-harris.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When development started on the Cloud Foundry Java client, &lt;a href=&quot;https://projectreactor.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Reactor&lt;/a&gt; was also rebooted. 
Which means that they became their very first customer.&lt;/p&gt;

&lt;p&gt;Paul Harris says that he made all the mistakes you can make with reactive programming.
And now he’ll teach us how to avoid many of those.&lt;/p&gt;

&lt;p&gt;It al started with the &lt;strong&gt;&lt;a href=&quot;https://www.reactivemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive Manifesto&lt;/a&gt;&lt;/strong&gt; in 2013, which came up with four ideas for reactive applications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Responsive: it should feel as if the application is progressing, with for example, some feedback.&lt;/li&gt;
  &lt;li&gt;Resilient: if a particular part of you application fails, the remainder should be able to cope with that.&lt;/li&gt;
  &lt;li&gt;Elastic: make the most out of the resources available to the application.&lt;/li&gt;
  &lt;li&gt;Message-Driven: more message-driven than event-driven.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A manifesto is nice, but it does not compile.&lt;/p&gt;

&lt;p&gt;The next step was &lt;a href=&quot;https://www.reactive-streams.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive Streams&lt;/a&gt; which defined a set of interfaces for how we might deal with reactive streaming situations.
You can distinguish four interfaces:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Publisher&lt;/a&gt;: which emits ‘things’ or signals in other words.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Subscriber.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Subscriber&lt;/a&gt;: listens to those signals.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Subscription.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Subscription&lt;/a&gt;: after a subscriber subscribed to a publication a subscription is obtained.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Processor.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Processor&lt;/a&gt;: is a combination of a publisher and a subscriber that allows you to process data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The intention of Reactive Streams was that more useful real world implementations would follow.
One of these is Spring Reactor.
For a good introduction to Spring Reactor you can read our &lt;a href=&quot;https://ordina-jworks.github.io/reactive/2016/12/12/Reactive-Programming-Spring-Reactor.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;Spring Reactor contains various reactive frameworks, the three big ones are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/core/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Core&lt;/a&gt;: the basic provision.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/netty/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Netty&lt;/a&gt;: the reactive implementation of Netty.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectreactor.io/docs/test/release/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactor-Test&lt;/a&gt;: which is a bunch of really good useful methods for testing reactive streams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before Paul dove in the code he first explained &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mono&lt;/a&gt; and &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flux&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-mono&quot;&gt;a Mono&lt;/h3&gt;
&lt;p&gt;A Reactive Streams &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; that emits none or a single element.
&lt;img alt=&quot;a Mono&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/mono.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-flux&quot;&gt;a Flux&lt;/h3&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; that emits zero to N elements.
&lt;img alt=&quot;a Flux&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/flux.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paul showed us a demo of how to make a legacy Maven Spring application reactive.
In order to do so the following steps were taken:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add dependency to &lt;a href=&quot;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Boot Starter WebFlux&lt;/a&gt;.
This is the reactive variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;Web MVC&lt;/code&gt;. 
You shouldn’t need to change anything to keep it running unless you have used specific server features.&lt;/li&gt;
  &lt;li&gt;Convert the return of a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Convert return types for repository methods to &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Use the static method &lt;code class=&quot;highlighter-rouge&quot;&gt;.justOrEmpty&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; type in order to deal with an optional.&lt;/li&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.switchIfEmpty&lt;/code&gt; to return a proper error response.&lt;/li&gt;
      &lt;li&gt;In order to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt;: use &lt;code class=&quot;highlighter-rouge&quot;&gt;fromIterable&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion is that reactive starts off complicated, but it will become easier when you have used it more often. 
It doesn’t have that many different methods you can use, so all in all it is quite easy to wrap your head around.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/vSHNBgY7MGA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-management-with-kubernetes-a-spring-boot-use-case-by-nicolas-frankel&quot;&gt;Configuration Management with Kubernetes, a Spring Boot use case by &lt;a href=&quot;https://twitter.com/nicolas_frankel&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nicolas Frankel&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Nicolas Frankel&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/nicolas-frankel.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nicolas Frankel is a Developer Advocate who works for &lt;a href=&quot;https://www.exoscale.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Exoscale&lt;/a&gt;, a European cloud hosting provider.&lt;/p&gt;

&lt;p&gt;In this session, he explained how to correctly configure each environment with its own parameters and settings.&lt;/p&gt;

&lt;p&gt;There are traditional configuration management tools such as Chef, Ansible, Puppet, … . 
But what is the point?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker images are and should always be immutable.&lt;/em&gt;&lt;br /&gt;
They should be configurable depending on the environment where we want to run our image in.
A Docker image should be able to run in different environments without problems, this is where &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubernetes&lt;/a&gt; comes in. 
Kubernetes can easily configure and parameterize each Docker image to run in different environments.&lt;/p&gt;

&lt;p&gt;One thing to remember is that you should make sure that you are working in the correct environment. 
Nicolas likes to add banners to the page to know in which environment you are currently working. 
For example, if you are working in the development environment, then you might want to show a big blue ‘Development’ banner, while in production you would prefer using a big, red, blinking one.&lt;/p&gt;

&lt;p&gt;This can all be done with the power of Kubernetes and immutable images. 
You can simply declare your environment variables in Kubernetes, then you can inject your environment in your Spring Boot application.&lt;/p&gt;

&lt;p&gt;There are three ways to access your environment variables in Spring Boot: profiles, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get started in Kubernetes, you have to create a few Kubernetes objects:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;(Optional) A &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Namespace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pod&lt;/a&gt; / &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the Deployment, you can give the arguments based on the environment that you want to spin up.
With a &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap&lt;/a&gt;, you can combine your environment variables that belong to each other (ex. database settings, AWS keys, …).
Once done defining the ConfigMap, you can import the ConfigMap in your Deployment declaration.&lt;/p&gt;

&lt;p&gt;What’s also very interesting is that you can declare your environment variables in a seperate Git repository with the use of an &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;initContainer&lt;/a&gt;. 
Of course, you can already do this with &lt;a href=&quot;https://spring.io/projects/spring-cloud-config&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Config&lt;/a&gt;. 
This is just an alternative on the Kubernetes side of configuration management.&lt;/p&gt;

&lt;p&gt;If you want to read more about Nicolas Frankel’s work, you can read his blog &lt;a href=&quot;https://blog.frankel.ch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can watch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/cTWu_DLqDt4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-better-monoliths---modulithic-applications-with-spring-boot-by-oliver-drotbohm&quot;&gt;Building better monoliths - Modulithic Applications with Spring Boot by &lt;a href=&quot;https://twitter.com/odrotbohm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oliver Drotbohm&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Oliver Drotbohm&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/oliver-drotbohm.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This talk caught our attention because we’re currently working at a client where we see some of the limitations of a microservice architecture. 
We are currently considering merging multiple of them into a more coarse-grained architecture containing multiple more ‘monolithic’ applications.&lt;/p&gt;

&lt;h3 id=&quot;microservice-architectures-also-have-disadvantages&quot;&gt;Microservice architectures also have disadvantages!&lt;/h3&gt;
&lt;p&gt;The talk starts off explaining some of the key differences between microservice and classic monoliths from an architectural point of view.&lt;/p&gt;

&lt;p&gt;The key takeaway here is that although there’s an advantage in terms of architecture degradation, it is harder to accidentally call another microservice than to call a method on another bounded context in a monolith.
This advantage comes at a cost, you lose compile-time safety which makes it harder to refactor than a monolith and it is harder to test the whole system.
These are especially disadvantageous in the early stages of the project when it is not clear yet what the correct bounded contexts are.&lt;/p&gt;

&lt;h3 id=&quot;the-modulith&quot;&gt;The Modulith&lt;/h3&gt;
&lt;p&gt;It might thus be useful to consider starting off with a well-structured monolith before considering evolving towards microservices.
But how do we avoid having our architecture degrade quickly?
Enter the modulith; a modulith is basically a monolith with multiple modules with well-defined dependencies in it.
To achieve this, Oliver demonstrated a ‘Moduliths’ tool that he’s in process off developing for the Spring framework.&lt;/p&gt;

&lt;p&gt;The idea is to use a package structure convention and enforce it with tests using Java’s Reflection.
In this package structure convention only (public members of) the root package of each module are accessible to other modules.
It’s considered the API package of that module while subpackages are considered internal. 
There’s more to this tool however; another problem of modularizing your application is that you typically want to do integration testing on the bounds of your modules.
The ‘Moduliths’ tool allows to bootstrap your module alone or in various configurations with specific module dependencies for integration testing. 
To top it off, there’s support to generate PlantUML diagrams for documentation purposes!&lt;/p&gt;

&lt;p&gt;For more details take a look at &lt;a href=&quot;https://github.com/odrotbohm/moduliths&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/odrotbohm/moduliths&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-approaches&quot;&gt;Alternative approaches&lt;/h3&gt;
&lt;p&gt;There are of course other ways to divide your application into modules and maintain the architecture:&lt;/p&gt;

&lt;h4 id=&quot;multiple-artifactsgradlemaven-modules&quot;&gt;Multiple artifacts(gradle/maven modules).&lt;/h4&gt;
&lt;p&gt;You might get an explosion of artifacts and it can become kind of verbose with all the configuration(&lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;) files.
Additionally, the artifacts are redundant since we’re planning on deploying everything together anyway.
There’s also no support to dynamically compose modules for tests since the dependencies are typically statically defined.&lt;/p&gt;

&lt;p&gt;This was actually the way we were considering handling it at our client.
The big advantage here in our eyes is that reflection can be avoided and the architecture can be verified at compile-time. 
The good news is that it is possible to combine it with the moduliths approach, 
which might be useful for integration testing.&lt;/p&gt;

&lt;h4 id=&quot;java9-module-system&quot;&gt;Java(9+) Module System&lt;/h4&gt;
&lt;p&gt;Could be used but it’s certainly not designed for this.
It definitely doesn’t have any support for dynamically composing your modules for testing.&lt;/p&gt;

&lt;h4 id=&quot;external-tools&quot;&gt;External tools&lt;/h4&gt;
&lt;p&gt;JQAssist, Sonargraph, jDepend… . 
These are powerful tools but usually run during the build making the feedback loop bigger.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h3&gt;

&lt;p&gt;The moduliths approach explained in this talk gives us a nice intermediate step towards a better architecture.
It alleviates some of the biggest problems with monoliths without introducing new ones using a more complex architecture like microservices!&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bVaiTPYlHFE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cutting-edge-continuous-delivery-automated-canary-analysis-through-spring-based-spinnaker-by-andreas-evers&quot;&gt;Cutting-Edge Continuous Delivery: Automated Canary Analysis through Spring based Spinnaker by &lt;a href=&quot;https://twitter.com/andreasevers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andreas Evers&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ultimate goal of continuous delivery is to deploy software quickly and automatically.
This can only be achieved if we are able to push new code without fear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andreas Evers&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/andreas-evers.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Throughout the years, Andreas saw that there are two opposing forces that are battling it out.
On the one hand there is the need for speed while on the other hand there is the need for confidence.
Like, updating in production without testing will give you great speed, but not much confidence.&lt;/p&gt;

&lt;p&gt;Microservices using integration tests on an acceptance environment might mean that you test an already obsolete topology because microservices can change that quickly.
Contract testing does not cover all the aspects needed to provide confidence as it does not test behaviour.&lt;/p&gt;

&lt;p&gt;A good alternative that Andreas talked about is Canary Analysis.
In order to do so let’s first introduce Spinnaker:
&lt;a href=&quot;https://www.spinnaker.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spinnaker&lt;/a&gt; is an open source, multi-cloud continuous delivery platform created at Netlfix.
It supports a lot of cloud environments like: OpenStack, AWS, Google Cloud, Microsoft Azure, Cloud Foundry, … 
Major contributors are Netflix, Google, Microsoft, Pivotal, …&lt;/p&gt;

&lt;p&gt;Under the hood, Spinnaker is composed of a bunch of Spring Boot microservices.
Another important component of Spinnaker is &lt;a href=&quot;https://github.com/spinnaker/halyard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Halyard&lt;/a&gt;: a bill of materials for the different microservices of Spinnaker, helping you with the deployment of Spinnaker.
Spinnaker also integrates well with your CI environments.&lt;/p&gt;

&lt;p&gt;Cloud deployments are often complex:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Different regions&lt;/li&gt;
  &lt;li&gt;Different accounts for your environments (production, acceptance, … )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teams want an easy road into the cloud, no complexity to deploy.
On the other hand easy rollbacks are important.
Spinnaker can help you with this!&lt;/p&gt;

&lt;p&gt;Various deployment strategies exist:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Red/Black&lt;/li&gt;
  &lt;li&gt;Rolling Red/Black&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.spinnaker.io/guides/user/canary/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Canary analysis&lt;/a&gt; 
&lt;img alt=&quot;deployment strategies&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/deployment-strategies.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 700px;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can define a pipeline to deploy into production:
&lt;img alt=&quot;pipeline tasks&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/pipeline-tasks.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For every stage you will have a series of steps.
Within every step you can define multiple tasks and every task has some operations which get executed.
A lot of these steps are very specific depending on the cloud which Spinnaker tends to abstract away.&lt;/p&gt;

&lt;p&gt;Spinnakers makes it possible to go fast but still do it safely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automated rollbacks&lt;/li&gt;
  &lt;li&gt;Deployment windows&lt;/li&gt;
  &lt;li&gt;Cluster locking&lt;/li&gt;
  &lt;li&gt;Traffic guards which are extra safeguards which can be configured&lt;/li&gt;
  &lt;li&gt;Manual judgements which makes use of the human “gut” feeling, which a computer does not have&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Andreas had a Rick &amp;amp; Morty demo application of which he had an old, already deployed version and a new version.
When doing canary, it is wise to startup a baseline, the old version, so that you have the solid baseline to measure against.
Spinnaker will also look at JVM metrics like memory, CPU, etc. 
But you can also define business metrics like startup time of the app, response times, …&lt;/p&gt;

&lt;p&gt;When the canary fails, it will just rollback and restore the previous version.
Spinnaker will decide if the canary fails by looking at the statistics it gathered.&lt;/p&gt;

&lt;p&gt;Canary testing allows you to test with real users and real production data.
At the same time it reduces the possible impact of your new version on end users.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/uB35m60GAZw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-java-modules-in-practice-with-spring-boot-by-jaap-coomans&quot;&gt;Using Java Modules in Practice with Spring Boot by &lt;a href=&quot;https://twitter.com/JaapCoomans&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jaap Coomans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jaap Coomans&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jaap-coomans.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;current-state&quot;&gt;Current State&lt;/h3&gt;
&lt;p&gt;First Jaap started with addressing the current state of the module system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Most tooling support is good (Maven, IDE, …)&lt;/li&gt;
  &lt;li&gt;In frameworks the adoption is very low&lt;/li&gt;
  &lt;li&gt;For developers it is even lower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can be summarized as: it’s like eating vegetables, we know it is healthy, we know its beneficial, but we don’t do it.&lt;/p&gt;

&lt;h3 id=&quot;using-modules&quot;&gt;Using modules?!&lt;/h3&gt;

&lt;p&gt;What challenges will you face when you want to migrate to modules.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Split packages: packages with the same name exposed by more than one module.&lt;/li&gt;
  &lt;li&gt;Automatic modules: plain JAR on your module path and thus interpreted as a module.
This exports and opens all packages, reads all other modules and it derives its module name from the filename
The problem with that is that you can only have one module with a certain name on your module path.
    &lt;ul&gt;
      &lt;li&gt;In Maven Central, 3.500 collisions are possible.&lt;/li&gt;
      &lt;li&gt;You can circumvent this with the Automatic-Module-Name in your manifest file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the demo application, Jaap used MongoDB.
There is a split package issue in the legacy mongo client, not with the new one, but Spring Data Mongo relies heavily on the legacy mongo client instead of the new one.&lt;/p&gt;

&lt;p&gt;In order to get started with modules, the first steps are just to minimize the problems you might encounter.&lt;/p&gt;
&lt;h4 id=&quot;step-1--2--3&quot;&gt;Step 1 + 2 + 3:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade your dependencies as this will minimize conflicts.&lt;/li&gt;
  &lt;li&gt;Use JDK11+.&lt;/li&gt;
  &lt;li&gt;Compile to  JDK11+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These first three steps are just to reduce the problems you might encounter.&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;Step 4:&lt;/h4&gt;
&lt;p&gt;Prepare the module structure within your code, so you can go from module to module.
Don’t start with one big module from the start.&lt;/p&gt;

&lt;h4 id=&quot;step-5&quot;&gt;Step 5:&lt;/h4&gt;
&lt;p&gt;Add module descriptors bottom-up.&lt;/p&gt;

&lt;p&gt;Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;module-info.java&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This first module has no external dependencies whatsoever making it very easy to define.
You only need to indicate what your are going to expose.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: you might need a newer version of the Maven Surefire Plugin; Jaap used version &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0-M3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a module which needs other modules, you will need to define a little bit more within the &lt;code class=&quot;highlighter-rouge&quot;&gt;module-info&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//requires com.sun.xml.bind;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaxb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xmlapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requires&lt;/code&gt;: Defines the modules that you need.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt;: The packages that you expose.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;opens&lt;/code&gt;: This means that this will make a module available for reflection (i.e. at runtime), that you might need for JAXB in this case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring is not yet modular, but they did define automatic module names in all of their JARs.&lt;/p&gt;

&lt;h4 id=&quot;step-6&quot;&gt;Step 6:&lt;/h4&gt;
&lt;p&gt;Add a module descriptor to the main JAR.
Only then you get all the benefits of the module system.
At this moment you will also encounter all the hurdles as this will also get you into runtime errors.
If you do not execute this step, your main application will still be using the classpath and not the module path.&lt;/p&gt;

&lt;p&gt;Export the main class and the application module.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also define &lt;code class=&quot;highlighter-rouge&quot;&gt;requires transitive&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoomans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jaapcoommans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boardgame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This last part means that when you depend on that module, you will also implicitly depend on that transitive module.&lt;/p&gt;

&lt;h3 id=&quot;runtime-errors&quot;&gt;Runtime Errors.&lt;/h3&gt;

&lt;p&gt;When you encounter runtime errors, you can pretty much copy paste the errors you get about opening the modules.
Encountering &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNotFoundExceptions&lt;/code&gt; hints at missing modules for which you should define a &lt;code class=&quot;highlighter-rouge&quot;&gt;requires&lt;/code&gt; definition.&lt;/p&gt;

&lt;p&gt;When you stop getting errors, this means that you have reached the next phase..&lt;/p&gt;

&lt;p&gt;Spring does use some of the internals of the JDK, which can be fixed by:&lt;code class=&quot;highlighter-rouge&quot;&gt;requires jdk.unsupported&lt;/code&gt;.
This does help you out for now, but the module name alone screams that you should not use it.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons Learned.&lt;/h3&gt;

&lt;p&gt;As a summary here are the lessons learned by Jaap:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Move bottom up.&lt;/li&gt;
  &lt;li&gt;Test all paths on every step, because you will encounter runtime errors.&lt;/li&gt;
  &lt;li&gt;The logs have the answer while the JVM gives you a good indication of errors by the module system.&lt;/li&gt;
  &lt;li&gt;It still involves pioneering.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/UFBH7gHJkb4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stream-processing-with-the-spring-framework-by-josh-long-and-viktor-gamov&quot;&gt;Stream Processing with the Spring Framework by &lt;a href=&quot;https://twitter.com/starbuxman&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Josh Long&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gamussa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viktor Gamov&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;All the source code of the live demo can be found on &lt;a href=&quot;https://github.com/joshlong/spring_io_2019/tree/master/kafka_and_spring&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Josh Long&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/josh-long.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Viktor Gamov&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/viktor-gamov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Statement: &lt;em&gt;It is dangerous to think of Kafka as a message queue as it tends to become a vine of data within your organization to move data around thus becoming a database.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the demo they made use of &lt;a href=&quot;https://avro.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Avro&lt;/a&gt;.
The Avro format will be used as a contract for the messages, it also gives you the option to generate Java classes based on the schema.
You can use an Avro Maven plugin for that.&lt;/p&gt;

&lt;p&gt;Kafka does not care what you put in there.
But passing along a schema gives your consumers the option to verify that they can process the message or not.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-kafka&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Kafka&lt;/a&gt; gives you &lt;a href=&quot;https://docs.spring.io/spring-kafka/api/org/springframework/kafka/core/KafkaTemplate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KafkaTemplates&lt;/a&gt; that you can use.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;KafkaTemplate&lt;/code&gt; wraps a producer and provides you with some extra handy methods to send data to Kafka topics.
For more information you can check out the reference guide to &lt;a href=&quot;https://docs.spring.io/spring-kafka/reference/html/#kafka-template&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;use KafkaTemplates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important that you think about the type of the key and the type of the value, serializer and deserializer.&lt;/p&gt;

&lt;p&gt;For this you will need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultKafkaProducerFactory&lt;/code&gt; which will provide you with some default config options like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bootstrap servers: where to find your Kafka.&lt;/li&gt;
  &lt;li&gt;Schema registry URL: where to find your Avro schema registry.&lt;/li&gt;
  &lt;li&gt;Key serializer: the class to be used to serialize your key when writing the message to Kafka.&lt;/li&gt;
  &lt;li&gt;Value serializer: the class to be used to serialize your value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without those serializers, Kafka will not be able to transform your message.&lt;/p&gt;

&lt;p&gt;Various other frameworks worth mentioning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud-stream&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Stream&lt;/a&gt;: allows you to abstract the use of message brokers.
It will manage a lot of the bindings for you with Kafka Streams mapping a lot of the configuration automatically for you.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kafka Streams&lt;/a&gt;: a stream processing pipeline that you can use to build processing pipelines.
Similar to Spark but less of a hassle to set up.
Ktable is the representation of state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some final notes about Kafka Streams:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka streams allows you to visualize your topology in a Directed Acyclic Graph using &lt;code class=&quot;highlighter-rouge&quot;&gt;TopologyDescroption&lt;/code&gt;.
For more info see this &lt;a href=&quot;https://docs.confluent.io/current/streams/faq.html#visualizing-topologies&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka Streams allows you to do stateful stream processing in an easy way. 
Its state store is replicated within Kafka so it can restore it in case of failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not forget your &lt;code class=&quot;highlighter-rouge&quot;&gt;SerDes&lt;/code&gt; when writing out Kafka Streams code.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Cloud Stream&lt;/code&gt; automatically converts to JSON but your &lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka streams&lt;/code&gt; code deals with binary data, so it needs to know how to serialize / deserialize. 
Some of them are predefined by Kafka: &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSerde&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LongSerde&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;JsonSerdes&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a very entertaining live coding session which you can rewatch here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/OHjVhTQ3j6g&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-fast-is-spring-by-dave-syer&quot;&gt;How Fast is Spring by &lt;a href=&quot;https://twitter.com/david_syer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dave Syer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dave Syer&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/dave-syer.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this talk Dave is going over the performance improvements carried out by the Spring team.&lt;/p&gt;

&lt;p&gt;Cold startup time of the JVM takes up some time but once started it is an awesome place.&lt;/p&gt;

&lt;p&gt;We went through some measurements.
An application started up in 1.300 milliseconds.
This went down to 1.200 milliseconds by tuning Spring a bit.
By then using Spring functional bean definitions it went down to 600 milliseconds.&lt;/p&gt;

&lt;p&gt;The overhead of Spring Boot versus no Spring Boot is currently around 15 milliseconds.
Thus, a lot of the overhead has already been dealt with.&lt;/p&gt;

&lt;p&gt;If the classloader has been warmed up, the startup time difference is much smaller.
With Spring Devtools you have a warm classloader, which reduces your startup time.&lt;/p&gt;

&lt;p&gt;Lots of optimizations have happened e.g. heap memory went down from 10MB to 6MB with the move to Spring Boot 2.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Async profiler&lt;/a&gt; is a tool you can attach to a running Java process.
It has little to no impact on the running performance and shows the calls being executed.
The width of the flame is the time it took to run.
Red and yellow colour means: not in Java user memory and ready for garbage collection.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Async profiler&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/async-profiler.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot 2.2 has boosted performance.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Classpath exclusion from Spring Boot web starters.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-context-indexer&lt;/code&gt;: this is marginal but with a lot of beans it will have a bigger impact.&lt;/li&gt;
  &lt;li&gt;Spring Actuators used to be costly for startup time, but no longer a big impact since the optimizations in Spring Boot 2.0.&lt;/li&gt;
  &lt;li&gt;Use explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.config.location&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Switch of JMX &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.jmx.enabled = false&lt;/code&gt; (in 2.2 this is the default setting).&lt;/li&gt;
  &lt;li&gt;Make bean definitions lazy by default.
In production you might not want this because if a bean is lazy loaded, the application might not fail on startup.
It can make sense to do this during development in order to improve development time.&lt;/li&gt;
  &lt;li&gt;Unpack the fat JAR and run it by specifying the explicit classpath as &lt;code class=&quot;highlighter-rouge&quot;&gt;java --jar&lt;/code&gt; is little bit slower compared to using &lt;code class=&quot;highlighter-rouge&quot;&gt;java --cp&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run the JVM with &lt;code class=&quot;highlighter-rouge&quot;&gt;-noverify&lt;/code&gt; and consider &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:TieredStopAtLevel=1&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;All JVM experts will tell you not to do this.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-noverify&lt;/code&gt; will gain you 40% time with any app but it does not validate byte code which is less interesting in production as the JVM will just crash and show you no exception whatsoever.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:TieredStopAtLevel=1&lt;/code&gt; this deals with the JIT compiler, will gain you around 10% with any app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Import auto configuration manually as it is not needed and might give you a small speed gain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A nice list of tools you can use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Benchmarks: &lt;a href=&quot;https://openjdk.java.net/projects/code-tools/jmh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JMH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JUnit and JMH: &lt;a href=&quot;https://github.com/mp911de/microbenchmark-runner&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;microbenchmark-runner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Profiling: &lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;async-profiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GC pressure: &lt;a href=&quot;https://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JMC aka flight controller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Quick metrics for any Spring Boot JAR: &lt;a href=&quot;https://github.com/dsyer/spring-boot-startup-bench&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benchmark launcher&lt;/a&gt; from dsyer/spring-boot-startup.&lt;/li&gt;
  &lt;li&gt;Classpath manipulation: &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-boot-thin-launcher&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thin Launcher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Profiling with &lt;a href=&quot;https://www.eclipse.org/aspectj/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AspectJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other Remarks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Hibernate team is pretty aware of the GC issues and have done serious optimizations around it.&lt;/li&gt;
  &lt;li&gt;Lazy beans: Pay attention to custom beans with an expensive &lt;code class=&quot;highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt;.
It tends to be misused for opening files, accessing database, which tends to block up the startup.&lt;/li&gt;
  &lt;li&gt;You can try using &lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportAutoConfiguration&lt;/code&gt; but then you need to know which &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoConfigurations&lt;/code&gt; you need to include.
Discovering that is the hard part.&lt;/li&gt;
  &lt;li&gt;Functional Bean Definitions: 
If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; then you make use of reflection.
You can implement an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContextInitializer&lt;/code&gt; which makes you reflection free, but it is a bit harder to implement.&lt;/li&gt;
  &lt;li&gt;CPU constrained environments benefit from native images built with &lt;a href=&quot;https://www.graalvm.org/docs/reference-manual/aot-compilation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GraalVM&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/T22i3WAa6dI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-andor-cloud-foundry---how-to-run-your-spring-boot-microservices-on-state-of-the-art-cloud-platforms-by-matthias-haeussler&quot;&gt;Kubernetes and/or Cloud Foundry - How to run your Spring Boot Microservices on state-of-the-art cloud platforms by &lt;a href=&quot;https://twitter.com/maeddes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Matthias Haeussler&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Matthias Haeussler&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/matthias-haeussler.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Matthias Haeussler is a Cloud Advocate at NovaTec Consulting. 
He gave a presentation about the differences between Kubernetes and Cloud Foundry.
He showed us this live with Spring Boot application which was deployed on both Kubernetes and Cloud Foundry.&lt;/p&gt;

&lt;h3 id=&quot;cloud-foundry&quot;&gt;Cloud Foundry&lt;/h3&gt;
&lt;p&gt;To deploy your application on Cloud Foundry, you simply have to run one command: &lt;code class=&quot;highlighter-rouge&quot;&gt;cf push&lt;/code&gt; (under the assumption that you have the CLI installed and configured).
This will send your whole codebase to Cloud Foundry, which then builds a container for your application and runs it. 
Cloud Foundry does not use Docker images, only containers.
The thing with Cloud Foundry is that it uses containers behind-the-scenes, but as a CF user, you don’t really notice it.&lt;/p&gt;

&lt;h3 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;With Kubernetes, it’s a whole different story. You can’t just ‘run’ your application on Kubernetes. You will need a Docker image to run your application, which means
your application must have a Dockerfile inside it. 
This Docker image must be pushed to a Docker registry, which is then pulled from the registry by Kubernetes and ran with the specified configuration.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In Kubernetes, you can configure way more which is a huge benefit.
On the other hand you also need to know more about the platform to do so.
Whereas with Cloud Foundry it is just one command and your codebase is pushed, wrapped into a container and ran on the platform.
Way more simple but with less configuration options.
Thus you can configure less than when using Kubernetes.&lt;/p&gt;

&lt;p&gt;Kubernetes also requires more dependencies if you want to get more out of it (ex. Helm, Prometheus, Istio, …).
This requires additional maintenance of those dependencies.&lt;/p&gt;

&lt;p&gt;The ideal platform is: the simplicity of Cloud Foundry with the functional features of Kubernetes.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/-WZmhofnfII&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;migrating-a-modern-spring-web-application-to-serverless-by-jeroen-sterken-and-wim-creuwels&quot;&gt;Migrating a modern spring web application to serverless by &lt;a href=&quot;https://twitter.com/jeroensterken&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jeroen Sterken&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/wimcreuwels&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Wim Creuwels&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jeroen Sterken&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/jeroen-sterken.jpg&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image left&quot;&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Wim Creuwels&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/wim-creuwels.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Is serverless the holy grail? 
These guys explored the possibilities while migrating an existing monolith to serverless at one of their clients.&lt;/p&gt;

&lt;p&gt;Serverless will help your developers focus on the code instead of server management and database setup.
Wim and Jeroen also mention the flip side of the coin.
It’s a new technology and as is the case with every new technology, there is a learning curve.
Developers have to get used to the services that the cloud provider supports.
They need to “think serverless” and model applications as functions in well-defined steps.
Infrastructure has to be modelled using Infrastructure as Code.
A topic on which you can find a great resource on our blog &lt;a href=&quot;https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No, serverless is not the holy grail. It is however a great solution for some typical use cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event-driven architectures&lt;/li&gt;
  &lt;li&gt;Internet of things&lt;/li&gt;
  &lt;li&gt;Applications with varying load&lt;/li&gt;
  &lt;li&gt;Data analysis&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-functions&quot;&gt;Step functions&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Step Function Diagram&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/step-function-diagram.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Jeroen and Wim glued their app together using AWS Step Functions.
Step Functions is a serverless orchestration service that lets you model your workflow as a series of steps.
Step Functions will keep your Lambda functions free of logic that triggers other Lamba functions.
Instead it will use the output of one Lambda function to trigger the next one, thus progressing towards the next step.&lt;br /&gt;
These steps are made visible by a clear step diagram that shows your workflow.
This diagram allows you to monitor your flow by changing color when something goes wrong.
In case of an error Step Functions will automatically retry.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-functions&quot;&gt;Spring Cloud Functions&lt;/h4&gt;
&lt;p&gt;We are at SpringIO and we’re talking about Serverless Cloud technology so Spring Cloud Functions cannot be left unmentioned.
Spring Cloud Function is a project by the Spring team that allows you to write cloud platform independent code.
In the process you can keep using familiar Spring constructs like beans, autowiring and dependency injection.
You can find great guides on &lt;a href=&quot;https://www.baeldung.com/spring-cloud-function&quot; target=&quot;_blank&quot;&gt;baeldung.com&lt;/a&gt; and &lt;a href=&quot;https://spring.io/projects/spring-cloud-function&quot; target=&quot;_blank&quot;&gt;spring.io&lt;/a&gt;.
Using Spring Cloud Functions will lower the stepping stone towards Serverless because most Java developers are already familiar with the Spring Framework.&lt;/p&gt;

&lt;p&gt;Serverless was already a hot topic.
The fact that Spring now has also jumped on the wagon only makes it hotter.
Definitely keep your eyes open for Serverless in the near future.&lt;/p&gt;

&lt;p&gt;You can rewatch their talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/594bKxp0wZI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-2-talks--workshops&quot;&gt;Day 2: Talks &amp;amp; Workshops&lt;/h1&gt;
&lt;h2 id=&quot;testing-spring-boot-applications-by-andy-wilkinson&quot;&gt;Testing Spring Boot Applications by &lt;a href=&quot;https://twitter.com/ankinson&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andy Wilkinson&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/andy-wilkinson.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Andy Wilkinson of Pivotal explained us the importance and essence of writing tests in your application to ensure the quality of your services.
Of course, having a zero risk functionality is practically impossible but testing helps you to reduce your risk to a minimum.&lt;/p&gt;

&lt;p&gt;But how do you know if a test is ‘good’? 
Almost everyone is basing this on the amount of code coverage in their project.
This does not determine the quality of your tests.
When you write tests, you want to think about mistakes that you make or that can be made by the end user.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit testing&lt;/h3&gt;
&lt;p&gt;When you rewrite your application logic, there’s a high chance that you have to rewrite your unit tests as well. 
So make sure that you do not have to spend a lot of time on rewriting your tests when you want to refactor your application or write extra features.&lt;/p&gt;

&lt;p&gt;It’s also very important to use descriptive names for your tests. 
Make sure that your tests are readable by the human eye.
No one wants to read a test that is not clear or creates more confusion (JUnit 5 comes with a display annotation to make a test name more readable).&lt;/p&gt;

&lt;p&gt;When you are familiar with writing unit tests, you’ve probably also heard of mocking. 
Unit testing is all round mocking external services and dependencies. 
After all, in a unit tests we are under the assumption that all our external dependencies are working as they should.&lt;/p&gt;

&lt;h3 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h3&gt;
&lt;p&gt;Andy gave us a detailed explanation of how the various testing annotations work such as &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;, which gives us a more Spring Boot way of testing our application (which means less configuration, hooray!). 
&lt;code class=&quot;highlighter-rouge&quot;&gt;@SpyBean&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt; to create a mock or spy object of a Spring Component, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ActiveProfiles&lt;/code&gt; to run your test class with a specific profile, etc.&lt;/p&gt;

&lt;h4 id=&quot;testing-against-databases&quot;&gt;Testing Against Databases&lt;/h4&gt;
&lt;p&gt;One of the more appearing problems in integration testing is working with a database. 
Typically, when you want to test against data in a database you are going to want to use an in-memory database.
Often this is a HSQLDB or H2 database.
This is where it gets interesting. 
You can tell your H2 instance to run in a specific database software mode, such as PostgreSQL.
However, it’s not exactly the same as working with a real PostgreSQL server.
H2 only interprets the queries that are ran in a PostgreSQL dialect and tries to convert to its own syntax. 
This can cause lots of problems, because you are not working with a real Postgres server.
Even though H2 is ran with PostgreSQL compatibility mode, it can still fail with queries that will run perfectly on a real PostgreSQL server.&lt;/p&gt;

&lt;p&gt;Andy recommended us to use &lt;a href=&quot;https://www.testcontainers.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TestContainers&lt;/a&gt;.
These have the power to spin up a Docker image of a database of your choice.
So you’ll have the full functionality of a database server.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;We are really excited to see what the new Spring Boot versions will have in store to help us write better and clearer tests.
Spring Boot 2.2 will come with full JUnit 5 functionality and thus, will leave JUnit 4 behind.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/5sjFn9BsAds&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-live-in-a-post-spring-cloud-netflix-world-by-olga-maciaszek-and-marcin-grzejszczak&quot;&gt;How to live in a post-Spring-Cloud-Netflix world by &lt;a href=&quot;https://twitter.com/olga_maciaszek&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Olga Maciaszek&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mgrzejszczak&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Marcin Grzejszczak&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Olga Maciaszek&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/olga-maciaszek.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andy Wilkinson&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/marcin-grzejszczak.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Discovering the new Spring Cloud stack.
That’s what this talk was all about.
Olga Maciaszek and Marcin Grzejszczak showed us the new solutions for Gateway proxying, circuit breaking and the whole new Spring Cloud stack.&lt;/p&gt;

&lt;h3 id=&quot;the-world-is-changing&quot;&gt;The world is changing&lt;/h3&gt;

&lt;h4 id=&quot;spring-cloud-load-balancer&quot;&gt;Spring Cloud Load Balancer&lt;/h4&gt;
&lt;p&gt;Client side load balancing via the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LoadBalancerClient&lt;/code&gt; annotation.
Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LoadBalanced&lt;/code&gt; annotation as a marker annotation to indicate that a &lt;code class=&quot;highlighter-rouge&quot;&gt;RibbonLoadBalancingClient&lt;/code&gt; should be used to interact with a service.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-gateway&quot;&gt;Spring Cloud Gateway&lt;/h4&gt;
&lt;p&gt;Via routes your requests are processed to downstream services.
Spring Cloud Gateway is used as a simple way to achieve this routing to your APIs.
You can keep configuring this as code:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users_service_route&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user-service/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stripPrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lb://user-service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or in your properties file:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;py&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fraud&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lb://fraud-verifier&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;predicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/fraud-verifier/**&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;StripPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Retry&lt;/span&gt;
          &lt;span class=&quot;py&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;circuit-breaking-and-resilience4j&quot;&gt;Circuit Breaking and Resilience4J&lt;/h4&gt;
&lt;p&gt;You need a design that is resilient and fault tolerant.&lt;/p&gt;

&lt;p&gt;After a number of failed attempts, we can consider a service unavailable.
We will then back off and stop flooding it with requests.
We can save system resources for calls which are likely to fail.
And give the other service some time to get back on their feet.&lt;/p&gt;

&lt;h4 id=&quot;micrometer-and-prometheus&quot;&gt;Micrometer and Prometheus&lt;/h4&gt;
&lt;p&gt;Periodically scraping metrics from your services to monitor health.&lt;/p&gt;

&lt;h4 id=&quot;spring-cloud-config-server&quot;&gt;Spring Cloud Config Server&lt;/h4&gt;
&lt;p&gt;Externalize your configuration.
You don’t have to restart your application to reload your configuration.
Just fetch it from the remote service again.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Check out a fully working Spring Cloud microservices demo here:
&lt;a href=&quot;https://github.com/OlgaMaciaszek/spring-cloud-netflix-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/OlgaMaciaszek/spring-cloud-netflix-demo&lt;/a&gt;.
A lot of gratitude to Olga and Marcin for providing a working example that we can play around with to get acquainted with the new services.&lt;/p&gt;

&lt;p&gt;You can rewatch their talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CcL8wrguhhM&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-driven-microservices-with-axon-and-spring-boot-excitingly-boring-by-allard-buijze&quot;&gt;Event-Driven Microservices with Axon and Spring Boot: excitingly boring by &lt;a href=&quot;https://twitter.com/allardbz&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Allard Buijze&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Allard Buijze&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/allard-buijze.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this presentation, Allard Buijze, Founder and CTO of AxonIQ talks about the advantages of event-driven architectures and shows how easy it is to set up your own event-driven microservices using Axon and Spring Boot.&lt;/p&gt;

&lt;h3 id=&quot;what-is-axon&quot;&gt;What is Axon?&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://axoniq.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Axon framework&lt;/a&gt; is used for building event-driven microservices using Domain-Driven Design, CQRS and Event Sourcing.
It is there to prevent developers from getting lost inside a complex microservice architecture.&lt;/p&gt;

&lt;h5 id=&quot;cqrs&quot;&gt;CQRS&lt;/h5&gt;
&lt;p&gt;Command and Query Responsibility Segregation is a design pattern where you split the reading and writing of data into seperate models.
You use queries for reading the data and commands for updating the data.
While for basic CRUD operations having these models combined might be fine but once the amount of business logic and the amount of queries increases it might become increasingly difficult to manage.&lt;/p&gt;

&lt;h3 id=&quot;state-storage-vs-event-sourcing&quot;&gt;State Storage vs Event Sourcing&lt;/h3&gt;
&lt;p&gt;A big part of this presentation is about the advantages of using event sourcing rather than state storage.
Events describe the history of an object rather than just the current state of the object.
It is easy to go through the history and generate the current state while also getting a lot of extra information about the object you would otherwise miss out on when just storing its current state. 
Explicit record that something happened, rather than an implicit record of what happened based on changes that occured.
This also makes testing your application easier because you do not have to rely on state but rather on a series of events to take place or an exception to occur.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;event-sourcing&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/event-sourcing.png&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;p&gt;One of the biggest advantages of events is that they remain valuable over time.
They need to be the source of everything in the application and show a true representation of your entities.
Once again, you don’t save the state of an aggregate, you can generate the state by replaying the history.&lt;/p&gt;

&lt;h3 id=&quot;the-power-of-not-now&quot;&gt;The power of not now&lt;/h3&gt;
&lt;p&gt;The power of not now basically means that because you save all the events,
you can generate reports whenever you want based on the captured data.
You don’t have to know in advance what data is important to store for later on, everything is stored.&lt;/p&gt;

&lt;h3 id=&quot;axon-server&quot;&gt;Axon Server&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.axoniq.io/reference-guide/axon-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Axon Server&lt;/a&gt; is a service that distributes your components, manages routing, stores events and provides high availability and observability.
By combining all these otherwise different services into one single easy to configure service,
you make your entire architecture a lot easier to manage than if you were to use for example the Netflix Eureka Discovery Service for communication between microservices,
the MySQL Event Store for storing events and RabbitMQ to handle messaging.
By simply adding the Axon Server dependency and adding some annotations you can use all of these services while keeping the complexity low.&lt;/p&gt;

&lt;h3 id=&quot;tracing&quot;&gt;Tracing&lt;/h3&gt;
&lt;p&gt;Axon can also manage tracing for you by just adding the Axon tracing and Jaeger to your dependencies.
Where otherwise setting up tracing would be a lot of work having to deal with all kinds of headers,
passing headers along and interpreting them,
Axon tracing takes care of all of this for you.&lt;/p&gt;

&lt;p&gt;You can rewatch his talk here:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/iVaD3mdwvx4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-secure-your-spring-apps-with-keycloak-by-thomas-darimont&quot;&gt;How to secure your Spring apps with Keycloak by &lt;a href=&quot;https://twitter.com/thomasdarimont&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thomas Darimont&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Thomas Darimont&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/thomas-darimont.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this presentation Thomas Darimont talks about what Keycloak is,
what you can do with it and gives a demo of how it works and how you can set it up for your own applications.&lt;/p&gt;

&lt;h3 id=&quot;what-is-keycloak&quot;&gt;What is Keycloak?&lt;/h3&gt;
&lt;p&gt;Keycloak is a Java based authentication and authorization server. 
It is developed by Red Hat who use it as a base for their enterprise RH-SSO application on which they provide additional support and documentation.
It is also backed by a large open source community providing additional features, documentation and bugfixes.&lt;/p&gt;

&lt;h3 id=&quot;keycloak-features&quot;&gt;Keycloak Features&lt;/h3&gt;

&lt;p&gt;One of the most important features of Keycloak is the Single Sign-On and with this the Single logout.
Sign into keycloak once to gain access to multiple applications and sign out once to sign out of all applications.
Do note though that individual applications can disable this single logout so you might not get logged out of all the applications within a realm.
Another great feature of Keycloak is their multi-factor authentication using one of the known authentication apps like the Google Authenticator.
Keycloak also supports authentication through social media platforms such as Facebook, Twitter, Google or even Github. 
Then of course there is the fact that Keycloak is completely customizable and extensible.
It comes with a preferred stack on which we will dive into more detail later on.
You can get away from this and use your own preferred services albeit with some additional configuration.
Keycloak also comes with an easy to use management console for administrators and a user management interface where all users can update their user details.
The last feature to discuss are the realms. 
Sets of applications, users and registered OAuth clients to whom the Keycloak settings will be applied. 
With these realms you can give users specific roles or just authenticate them across multiple applications using the Single Sign-on feature.&lt;/p&gt;

&lt;h3 id=&quot;the-keycloak-preferred-stack&quot;&gt;The keycloak preferred stack&lt;/h3&gt;

&lt;p&gt;By default Keycloak is a WildFly based server with a plain JAX-RS application.
It uses JPA for storing data and Infinispan for the horizontal scaling
of multiple Keycloak nodes that all distribute information like user sessions between eachother.
Other than that it uses the Freemarker template engine to render for example the login pages
and Jackson 2.x for everything JSON related like the tokens.&lt;/p&gt;

&lt;h3 id=&quot;securing-your-application&quot;&gt;Securing your application&lt;/h3&gt;

&lt;p&gt;To add Keycloak to your applications you have to add a dependency and you will have to register your application within a Keycloak realm.
After doing some configuration within your application and the Keycloak management console,
you will have to authenticate through Keycloak to regain access to your application.&lt;/p&gt;

&lt;h3 id=&quot;the-authentication-process&quot;&gt;The authentication process&lt;/h3&gt;

&lt;p&gt;The following steps describe the Keycloak authentication process:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unauthenticated user accesses application&lt;/li&gt;
  &lt;li&gt;The application redirects to Keycloak for login&lt;/li&gt;
  &lt;li&gt;When the login is successful, Keycloak will create an SSO session and will emit cookies&lt;/li&gt;
  &lt;li&gt;Keycloak generates a random code and redirects the user back to application&lt;/li&gt;
  &lt;li&gt;The application receives the code associated with the sign-on session and sends the code back to Keycloak via a separate channel&lt;/li&gt;
  &lt;li&gt;If the code sent back is associated with the sign-on session, Keycloak will reply with an access token, a refresh token and an id token&lt;/li&gt;
  &lt;li&gt;The application verifies the tokens and associate them with a session&lt;/li&gt;
  &lt;li&gt;The user is now logged in to the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information you can refer to Keycloak’s &lt;a href=&quot;https://www.keycloak.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official documentation&lt;/a&gt; and you can also watch the original talk itself in the following video:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/KrOd5wIkqls&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zero-downtime-migrations-with-spring-boot-by-alex-soto&quot;&gt;Zero Downtime Migrations with Spring Boot by &lt;a href=&quot;https://twitter.com/alexsotob&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alex Soto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Alex Soto&quot; src=&quot;/img/2019-05-16-Spring-IO-2019/alex-soto.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this talk, Alex Soto, Software Engineer at Red Hat covers the subject of zero downtime migrations of microservices in Spring Boot.
He covers some of the different deployment techniques.
Some easy to understand ones and some more advanced techniques for when you are dealing with the persistent states of your applications.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-downtime-when-using-microservices&quot;&gt;Dealing with downtime when using microservices&lt;/h3&gt;

&lt;p&gt;While it is easier and faster to take down a single service rather than a single monolith application,
deployment or redeployment of services will happen a lot more often when using a microservices architecture. 
Another thing to consider is that when you have downtime on a service,
all the services that have a dependency on the offline service will no longer work either.
For this reason it is important to minimise downtime of your applications or even have no downtime at all. 
This is why you need to deploy and release services at different times.
Here are some techniques on how to do this.&lt;/p&gt;

&lt;h3 id=&quot;bluegreen-deployment&quot;&gt;Blue/Green deployment&lt;/h3&gt;

&lt;p&gt;Blue/Green deployment is where you will deploy an updated version of the service you want to replace
and release it by changing the routing from the old one to the new one.
It is important to keep the old service deployed and monitor the new one so that in case of errors
you can easily revert the routing back to keep everything up and running.
The downside of blue/green deployment is that if something goes wrong,
all users are affected if changes happen before reverting the routing.
But of course there is a solution to this problem, Canary releases.&lt;/p&gt;

&lt;h3 id=&quot;canary-releases&quot;&gt;Canary releases&lt;/h3&gt;

&lt;p&gt;Canary releases is where you route a small percentage of your traffic through an updated service while the rest keeps using the original service.
This limits the amount of users that might be affected by unwanted changes while you monitor your new application.
As everything goes well you increase the percentage of users until eventually your entire userbase uses the new service.
All while still having the advantage of Blue/Green deployment to fall back on when things go wrong.&lt;/p&gt;

&lt;h3 id=&quot;mirroring-traffic&quot;&gt;Mirroring traffic&lt;/h3&gt;

&lt;p&gt;Mirroring traffic is another deployment technique where you deploy an updated version of a service next to the original one and send your requests to both services.
Only the original service handles requests while the requests to the updated service are just fire and forget requests while you monitor if everything goes according to plan.
Before eventually changing the routing to the updated version of the service.&lt;/p&gt;

&lt;h3 id=&quot;but-what-about-sticky-sessions&quot;&gt;But what about sticky sessions&lt;/h3&gt;

&lt;p&gt;When dealing with sticky sessions, which you often see with for example shopping carts on webshops,
your session is linked to a specific service by IP.
This means that when you get rerouted to an updated service, you will lose your session.
To counter this problem you can use an in-memory datagrid using for example Redis
and duplicate this across all the services that use these sticky sessions in your cluster.
When you do this, your shopping cart will stay, even when the service you are accessing changes.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-persistent-data&quot;&gt;Dealing with persistent data&lt;/h3&gt;

&lt;p&gt;While problems with in-memory data are often fixed quite easily,
when dealing with persistent data, zero downtime deployment becomes a little bit more tricky.
Take for example the change of a column name in a database.
If you were to use different services accessing the same database but using different column names, this would cause issues. 
This exact problem and how to tackle it is shown in the demo.
Together with a more in-depth explanation of the covered topics in a video of the talk below.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/oziyniXdUe8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;Spring is trendy as ever.
Solid fundamentals and ready for the future of software development.
It was great to further extend our Spring expertise.
And let’s not forget the amazing time we had amongst colleagues.
We’ll be back next year for more!
Will you be there too?!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java &amp; JavaScript developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build his expertise by contributing to valuable projects. Serverless, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Conference" /><category term="Spring IO" /><category term="Spring" /><category term="Java" /><category term="Conference" /><summary type="html">Spring IO 2019!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-05-16-Spring-IO-2019/spring-io.png" /></entry><entry><title type="html">Devoxx FR 2019</title><link href="https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR.html" rel="alternate" type="text/html" title="Devoxx FR 2019" /><published>2019-07-01T00:00:00+00:00</published><updated>2019-07-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/07/01/Devoxx-FR.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://devoxx.fr/&quot; target=&quot;_blank&quot;&gt;Devoxx France&lt;/a&gt; is a yearly conference in Paris, France.
Three colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn and Tom Van den Bulck 
attended the conference in April 2019, where all of them were welcomed as speaker.
In this blog post we share our impressions and experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-speakers-dinner&quot;&gt;The Speakers Dinner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applying-dddd-and-cqrs-to-cloud-architectures-with-java-spring-boot-kafka-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Java, Spring Boot, Kafka and Docker by Benjamin Nothdurft, Michael Follmann and Dominik Guhr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modern-java-change-is-the-only-constant-by-mark-reinhold&quot;&gt;Modern Java: Change is the Only Constant by Mark Reinhold&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#meet-micronaut-a-reactive-microservices-framework-for-the-jvm-by-álvaro-sánchez-mariscal&quot;&gt;Meet Micronaut: a reactive microservices framework for the JVM by Álvaro Sánchez-Mariscal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#full-text-search-tips--tricks-by-denis-rosa&quot;&gt;Full-Text Search Tips &amp;amp; Tricks by Denis Rosa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, The Idiomatic Mocking Framework For Kotlin by Yannick De Turck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#real-quantum-computing-by-james-birnie&quot;&gt;Real Quantum Computing by James Birnie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-is-a-dirty-word-by-james-birnie&quot;&gt;Agile is a Dirty Word by James Birnie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-speakers-dinner&quot;&gt;The Speakers dinner&lt;/h2&gt;
&lt;p&gt;The evening of the workshop day, we had the speakers dinner where we were provided with lots yummy snacks to feast upon while enjoying a nice glass wine.
It was a great opportunity to both network with the other speakers and connect with other experienced developers, gaining extra valuable insights.&lt;/p&gt;

&lt;p&gt;Being a speaker and meeting other speakers also gives you a nice icebreaker: “What talk are you giving?”.
Very handy to get the conversation going.&lt;/p&gt;

&lt;p&gt;That is the power of a conference.
To speak with other attendees and speakers, gaining valuable knowledge.
Most of that knowledge is not presented in the talks but will only bubble up if you speak face to face.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/speaker-dinner.jpg&quot; alt=&quot;Speaker dinner&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;applying-dddd-and-cqrs-to-cloud-architectures-with-java-spring-boot-kafka-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Java, Spring Boot, Kafka and Docker by &lt;a href=&quot;https://twitter.com/DataDuke&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benjamin Nothdurft&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Benjamin Nothdurft&quot; src=&quot;/img/devoxx-ma-2018/speaker-benjamin-nothdurft.png&quot; /&gt;&lt;/span&gt;
Benjamin started off by giving a brief introduction on Domain-Driven Design explaining the different building blocks such as domains, domain events, ubiquitous language and Event Storming.&lt;br /&gt;
He also mentioned the famous two books: &lt;a href=&quot;https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain-Driven Design by Eric Evans&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Implementing Domain-Driven Design by Vaugn Vernon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Benjamin went through all the different steps of &lt;a href=&quot;https://www.eventstorming.com/&quot;&gt;Event Storming&lt;/a&gt;.
The goal is to bring people of different silos together, such as developers, analysts, architects and business experts.
Together you want to create a logically ordered sequence of events to document a system using an ubiquitous language i.e. everybody using the same vocabulary and terms.
Events describe things that have happened and are thus always in the past tense e.g. product added to cart.
In a next step you want to identify commands, which are the triggers of events e.g. add product to cart.
There are also aggregates which represent the data that is interacted with.
And finally you want to identify the bounded contexts grouping relevant parts together.&lt;/p&gt;

&lt;p&gt;Benjamin then explained how this all gets translated to your system architecture.
Each bounded context can be mapped to a single microservice.
He covered different context map patterns such as event publisher, shared kernel, customer/supplier and anti-corruption layer together with detailed code samples.
Afterwards he went through a CQRS example with many code samples and the questions you should be asking yourself when determining the right architecture.
We really liked how in-depth everything was as many presentations about Domain-Driven Design usually remain rather abstract and high-level.&lt;/p&gt;

&lt;p&gt;You can check out Benjamin’s slides on &lt;a href=&quot;https://slides.com/dataduke/2019-04-03-ddd-cqrs-cloud-181&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides.com&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/zBUqoztK3Lo&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modern-java-change-is-the-only-constant-by-mark-reinhold&quot;&gt;Modern Java: Change is the Only Constant by &lt;a href=&quot;https://twitter.com/mreinhold&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mark Reinhold&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Mark Reinhold&quot; src=&quot;/img/devoxx-fr-2019/mark_reinhold.png&quot; /&gt;&lt;/span&gt;
Mark described how they took the massive monolithic platform, the JDK, and transformed it in three ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First, they sliced it up into 26 modules&lt;/li&gt;
  &lt;li&gt;Second, they removed the Java EE and CORBA modules, together with some other APIs resulting in 19 modules&lt;/li&gt;
  &lt;li&gt;And third, the grand majestic release model where a new version was shipped every 2, 3 or 5 years was left behind in favour of one where there is a release every 6 months&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just packaging the modules you need, will make the footprint of your application smaller.
The stronger encapsulation also makes Java more secure.
A couple of the Zero Day exploits could have been avoided with stronger encapsulation.
Three out of six since JDK7.&lt;/p&gt;

&lt;p&gt;Modules allow you to restrict access to internal packages, making it no longer compile and possibly generating warnings at runtime.
Run the following command line: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ jdeps --jdk-internals app.jar&lt;/code&gt; to check if internal APIs are used.&lt;/p&gt;

&lt;p&gt;In theory, if your code only uses standard Java SE APIs then it will most likely work without changes.
For more info, see: &lt;a href=&quot;http://openjdk.java.net/jeps/291&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JEP 291&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lots of methods and APIs have been (and will be) removed but there are four reasons not to worry about it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There is an advanced notice before removing anything (&lt;code class=&quot;highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Make the choice yourself between LTS or feature releases&lt;/li&gt;
  &lt;li&gt;Java is still free&lt;/li&gt;
  &lt;li&gt;Some things might break but it shouldn’t take much work to fix them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first there was the fear that with the six month release cadence there would be some releases which would only contains bugfixes.
But it has shown that all releases provided new features, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/JDK_Enhancement_Proposal&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JEPs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JDK 9: 90 JEPs, 6 JEPs came from outside Oracle&lt;/li&gt;
  &lt;li&gt;JDK 10: 12 JEPs, 2 JEPs from other contributors (304, 316)&lt;/li&gt;
  &lt;li&gt;JDK 11: 17 JEPs, 3 JEPs from others (315, 318, 331), with 2458 issues resolved (1963 solved by Oracle, 169 by SAP and others), this is the latest LTS edition (next one will be JDK 17)&lt;/li&gt;
  &lt;li&gt;JDK 12: 8 JEPs, 1 JEPs from another contributor (189)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every one of these releases is PRD ready, with the only difference being support time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java is still free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/modern-java-mark.jpg&quot; alt=&quot;Modern Java&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, please let me assure you of one thing: whether by Oracle or Red Hat or someone else, JDK LTS releases will continue to be supported
We all have a lot invested in Java, and we won’t let it fall - Andrew Haley.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001826.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001826.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oracle JDK vs OpenJDK:
Choose between LTS version and big upgrade migrations or latest release with small migrations every 6 months.
Feature release: Make sure your tools and dependencies can keep up!&lt;/p&gt;

&lt;p&gt;Library maintainers were asked on Twitter if their libraries worked fine on JDK9 and the same question was asked when JDK 11 got released.
The result showed that a lot of libraries were already upgraded and functional for JDK 11.&lt;/p&gt;

&lt;p&gt;If you’re using Java 9 or later, you should upgrade to the latest version of your tools and other dependencies as some libraries might have one thing or another broken.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everything changes and nothing stands still - Heraclitus.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most important goals when working on a new version are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Developer productivity, not for one-off scripts but when building and maintaining large reliable programs&lt;/li&gt;
  &lt;li&gt;Program performance including and not limited to: startup time, memory consumption, …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He also touched upon some of the major active &lt;a href=&quot;https://openjdk.java.net/projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;projects of the Open JDK community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/amber/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amber&lt;/a&gt; which is about right-sizing languages ceremony, reducing boilerplate.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better and improved type inference with a smarter compiler&lt;/li&gt;
  &lt;li&gt;Less keyboard typing for you&lt;/li&gt;
  &lt;li&gt;Fix error prone things such as switch case on enums with pattern matching where the compiler detects whether a default is actually needed or not&lt;/li&gt;
  &lt;li&gt;Multi-line strings (Java 13 JEP although still to be decided)&lt;/li&gt;
  &lt;li&gt;Value classes for data containers: &lt;code class=&quot;highlighter-rouge&quot;&gt;record Point(double x, double y)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/loom/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Loom&lt;/a&gt; brings fibers to the Java platform.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Similar to threads but slightly different
    &lt;ul&gt;
      &lt;li&gt;Fibers are simpler than threads&lt;/li&gt;
      &lt;li&gt;Fibers work well with &lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFutures&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Marc gave a small demo on the performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://openjdk.java.net/projects/valhalla/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Valhalla&lt;/a&gt;: Value types &amp;amp; specialized generics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unfortunately, Mark ran a bit out of time so he wasn’t able to cover this topic&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/IvmoxgSatbg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meet-micronaut-a-reactive-microservices-framework-for-the-jvm-by-álvaro-sánchez-mariscal&quot;&gt;Meet Micronaut: a reactive microservices framework for the JVM by &lt;a href=&quot;https://twitter.com/alvaro_sanchez&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Álvaro Sánchez-Mariscal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Álvaro Sánchez-Mariscal&quot; src=&quot;/img/devoxx-fr-2019/alvaro-sanchez-mariscal.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The reality of existing frameworks:
Frameworks based on reflection and annotations tend to become fat.
But we love the programming model and productivity model so we live with it.
So, why should we be more efficient?&lt;/p&gt;

&lt;p&gt;Spring is an amazing technical achievement but many things are done at runtime:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reading the byte code of every bean it finds&lt;/li&gt;
  &lt;li&gt;Synthesizing new annotations on each bean method, constructor,… to support annotation metadata.
This leads to high startup time and memory consumption.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jakarta EE also does this.&lt;/p&gt;

&lt;p&gt;Micronaut is a new framework created by the creators of Grails for which the goal is to have the productivity of either Spring Boot or Grails with the performance of a compile-time, non-blocking framework.
It is designed from the ground up with microservices and cloud in mind.
Ultra lightweight and reactive, based on Metty instead of Tomcat, its internals are reactive.&lt;/p&gt;

&lt;p&gt;Provided with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Integrated AOP and compile-time DI for Java, Groovy and Kotlin&lt;/li&gt;
  &lt;li&gt;Annotation processors for Java and Jotlin&lt;/li&gt;
  &lt;li&gt;AST transformations for Groovy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Micronaut is fully open source and you can find the source code on &lt;a href=&quot;https://github.com/micronaut-projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.
It was actually announced one year ago, in May 2018 after two years of development behind the scenes.&lt;/p&gt;

&lt;p&gt;It can be used to build:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
  &lt;li&gt;Serverless applications&lt;/li&gt;
  &lt;li&gt;Message-driven applications with Kafka/RabbitMQ&lt;/li&gt;
  &lt;li&gt;CLI applications&lt;/li&gt;
  &lt;li&gt;Android applications&lt;/li&gt;
  &lt;li&gt;Simple &lt;code class=&quot;highlighter-rouge&quot;&gt;static void main(String.. args)&lt;/code&gt; applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Micronaut can be even faster with GraalVM, but this still is experimental.&lt;/p&gt;

&lt;p&gt;Next, Alvaro showed use a coding demo:
A Micronaut project with &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; for service discovery.
To give you an example about the performance, the demo greeting application with automated tests took 52ms to start with Consul registration.
A second application was created for the gateway.
Micronaut has reactive types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&lt;/code&gt;, which is non-blocking and similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;.
Alvaro wrote a non-blocking API in the gateway which merges two calls to the greeting application.&lt;/p&gt;

&lt;p&gt;He ended with a demo of an application on Google Cloud Run (serverless based on containers).
Google Cloud run was considered to be much easier for you as a developer than AWS Lamba according to Alvaro.&lt;/p&gt;

&lt;p&gt;The material of the 3 hour long workshop can be found on &lt;a href=&quot;https://alvarosanchez.github.io/micronaut-workshop-java/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/yJd4yk3slck&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-text-search-tips--tricks-by-denis-rosa&quot;&gt;Full-Text Search Tips &amp;amp; Tricks by &lt;a href=&quot;https://twitter.com/deniswsrosa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Denis Rosa&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Denis Rosa&quot; src=&quot;/img/devoxx-fr-2019/denis-rosa.png&quot; /&gt;&lt;/span&gt;
Denis Rosa is a developer advocate at Couchbase.&lt;/p&gt;

&lt;p&gt;The scenario where you have multiple nodes and many clients who want to do full-text search is still pretty hard to do with the JVM. 
Which is one of the reasons why it was decided to start with &lt;a href=&quot;http://blevesearch.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bleve&lt;/a&gt;: a framework for full-text search and indexing written in &lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important to realize that searching is not only about matching text as it can also be more sales-oriented.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Netflix wants to convince you to watch a movie.&lt;/li&gt;
  &lt;li&gt;Google want to answer your questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When building out a search functionality it is important to know how your users are searching.
Do they use one word, two words, three words, …
User queries should be saved, don’t forget to do so.
So that you can learn more about your users and improve your search model.&lt;/p&gt;

&lt;p&gt;Some quick core concepts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TD/IDF: aka “Term Frequency–Inverse Document Frequency”, having rare words score higher&lt;/li&gt;
  &lt;li&gt;Edit distance: minimum number of operations required to transform one string into another: for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Pivoted length norm: matches in small texts will rank higher than in long ones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Denis showed an example with Bleve underneath.&lt;/p&gt;

&lt;p&gt;He made an application called Couchflix allowing you to specify text to search on movies.
He showed how “good” his initial search was, when searching on &lt;code class=&quot;highlighter-rouge&quot;&gt;star war&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;star wars&lt;/code&gt; the first one just showed some zombie movies but nothing about star wars.&lt;/p&gt;

&lt;p&gt;During the live coding session several search implementations were made to see the difference: match on title alone, match on title and description, …&lt;/p&gt;

&lt;p&gt;Even after some modifications we still had the situation that when searching on &lt;code class=&quot;highlighter-rouge&quot;&gt;star war&lt;/code&gt;, both &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt; were matched separately.&lt;/p&gt;

&lt;p&gt;Something useful for that is a &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-shingle-tokenfilter.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shingle&lt;/a&gt;.
A shingle will break your search term in a combination of two, three, four words, … 
For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;Star wars daisy Ridley&lt;/code&gt; gets split out in the following search terms:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Star Wars&lt;/li&gt;
  &lt;li&gt;Wars Daisy&lt;/li&gt;
  &lt;li&gt;Daisy Ridley&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of shingles you can also use &lt;a href=&quot;https://qbox.io/blog/elasticsearch-algorithmic-stemming-tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stemming&lt;/a&gt; to avoid conjugations.
For example, the search terms &lt;code class=&quot;highlighter-rouge&quot;&gt;Fishing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fished&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fisher&lt;/code&gt; would all be transformed to &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another thing is &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-boost.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Boosting&lt;/a&gt; which allows you to boost up the ranking factors of your search results.
Most people tend to first focus on these when searches do not return the results they want but you first need to make sure that everything has been indexed properly. 
Only after does it make sense that you start thinking about boosting.&lt;/p&gt;

&lt;p&gt;We also have &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Decay Functions&lt;/a&gt; which allow you to decay your research results.
&lt;br /&gt;For example: leave out older movies that are less relevant.&lt;/p&gt;

&lt;p&gt;Things also get more complicated when we want to search on an actor name compared to the movie name for which we now have done all those optimizations. 
Searches are always biased, so the one we had for titles is less ideal for searching on actors and vice versa.&lt;/p&gt;

&lt;p&gt;Some other recommendations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For tests, the &lt;a href=&quot;https://spraakbanken.gu.se/sites/spraakbanken.gu.se/files/6IR12.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cranfield Evaluation Method&lt;/a&gt; is a good strategy to implement tests:
for every change you do in your model you need to verify if your query still returns a good result.
It is more complicated than the average JUnit test though.&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://en.wikipedia.org/wiki/Precision_and_recall&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Precision and Recall&lt;/a&gt; as a metric.&lt;/li&gt;
  &lt;li&gt;There is a very nice Coursera course available: &lt;a href=&quot;https://www.coursera.org/learn/text-retrieval&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Text Retrieval and Search Engines&lt;/a&gt;, which is really worth checking out.&lt;/li&gt;
  &lt;li&gt;Be careful with features that are directly influenced by users to avoid being tricked!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Source demo can be found on &lt;a href=&quot;https://github.com/deniswsrosa/couchflix&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/B9qRJhA1ONs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, the idiomatic mocking framework for Kotlin by &lt;a href=&quot;https://twitter.com/YannickDeTurck&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yannick De Turck&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Yannick De Turck&quot; src=&quot;/img/devoxx-ma-2018/speaker-yannick-de-turck.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Our colleague, Yannick, gave a talk about MockK.
MockK is a mocking framework specifically made for Kotlin. 
As a Java developer, he is a huge fan of Mockito for using mocks in his unit tests.
When he picked up Kotlin, Mockito was also his first choice to try out.&lt;/p&gt;

&lt;p&gt;He explained however that using Mockito in a Kotlin project doesn’t go all that well due to how Mockito creates its mocks, which is by overriding classes and functions.
And because Kotlin’s classes and functions are final by default, you can see that this poses some challenges.
Yannick shared his experiences and mentioned that even though there is an &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#mock-the-unmockable-opt-in-mocking-of-final-classesmethods&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;incubating, opt-in feature&lt;/a&gt; to allow Mockito to mock final classes and functions, the user experience isn’t all that nice.&lt;/p&gt;

&lt;p&gt;He looked for other frameworks and stumbled upon &lt;a href=&quot;https://mockk.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MockK&lt;/a&gt;, a mocking framework created for Kotlin by &lt;a href=&quot;https://github.com/oleksiyp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oleksiy Pylypenko&lt;/a&gt;.
MockK’s main philosophy is offering first-class support for Kotlin features and being able to write idiomatic Kotlin code when using it.
He was pretty enthusiastic about MockK and went over all its features and its ease of use.&lt;/p&gt;

&lt;p&gt;On our tech blog there is also a &lt;a href=&quot;/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; written by Yannick specifically about his experiences with Mockito and MockK in Kotlin projects.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;93e1c3b3a2474b1bbed9a032740efeb1&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/PoifD5FdJ7Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-quantum-computing-by-james-birnie&quot;&gt;Real Quantum Computing by &lt;a href=&quot;https://twitter.com/runningchairjb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;James Birnie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;James Birnie&quot; src=&quot;/img/devoxx-fr-2019/james-birnie.png&quot; /&gt;&lt;/span&gt;
Using many worlds to solve the unsolvable.&lt;/p&gt;

&lt;p&gt;Why quantum computing?
James didn’t knew anything about it until he followed a talk of Alasdair Collinson at Voxxed Days Vienna at which point he still found it hard to comprehend.
So he decided to make a talk of his exploration of quantum computing in such a way that it would become easier to comprehend for the uninitiated.&lt;/p&gt;

&lt;p&gt;The last version of the Thoughtworks tech radar has &lt;a href=&quot;https://www.microsoft.com/en-us/quantum/development-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Q#&lt;/a&gt; in Assess on the recommendation of James.&lt;/p&gt;

&lt;p&gt;To understand, first go back to the classical bit:
A bit is a unit of binary information, which can hold two states: 0 or 1.
This is stored as one of two voltages, logic gates compose this into arithmetic.&lt;/p&gt;

&lt;p&gt;In quantum computing we have the qubit.
This also has a value of either 0 or 1.
However, observing the value “collapses” the state to a single value.
Any quantum thing can be a qubit, such as an electron, a photon or an ion.&lt;/p&gt;

&lt;p&gt;The quantum state is somewhat represented by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloch_sphere&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bloch sphere&lt;/a&gt;, a complex values probability amplitude.
Probabilities of measuring the different values are derived from the quantum state.
This maps to a point on the bloch sphere for a single qubit in a pure state.
Quantum logic gates are similar to classical logic gates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.research.ibm.com/ibm-q/&quot;&gt;IBM Q&lt;/a&gt; allows you to make a free account to play with quantum computers.
Make circuits by drag and dropping gates and operations.&lt;/p&gt;

&lt;p&gt;Next, James demonstrated the Schrodingers cat thought experiment.
When executed on a real quantum computer there were a lot of error states, showing that quantum computers are not yet production ready.
In a simulation the result was balanced in the 00000 and 01111 state.&lt;/p&gt;

&lt;p&gt;There are problems that classical computing cannot solve but quantum computers can and this is what makes them interesting.
Quantum computers cannot meaningfully persist state though.
Hardware is not ready yet for quantum computers and they are hard to program.&lt;/p&gt;

&lt;p&gt;James did an experiment on his own cat and the different states of a cat, culminating in a quantum program on the behaviour of cats.
The C# program CatMoodExperiment with multiple outcomes: x people feeding the cat.
Four qubits representing four persons, that may feed the cat.
Another test represents how the cat is feeling.
The program is available on his &lt;a href=&quot;https://github.com/JimBobBirnie/clementines-cat&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt; for you to try out.&lt;/p&gt;

&lt;p&gt;What do we need to build a commercial quantum solution?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Algorithms and applications (will happen)&lt;/li&gt;
  &lt;li&gt;Integration with cloud provider (will happen)&lt;/li&gt;
  &lt;li&gt;Error correction (hard!)&lt;/li&gt;
  &lt;li&gt;Quantum classic interface (hard!)&lt;/li&gt;
  &lt;li&gt;Cryogenic systems (expensive!!)&lt;/li&gt;
  &lt;li&gt;Scalable qubit foundations (hard!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two well-known quantum algorithms to look into are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Deutsch-Josza algorithm&lt;/a&gt;, 1992&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Grover%27s_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Grover’s algorithm&lt;/a&gt;, 1996&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most interesting application for James is quantum chemistry because it should allow us to fully understand complex molecules like iron molybdenum, which exists within beans which fix atmospheric nitrogen. 
While we humans need 5% of the natural gas supply to make fertilizer with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Haber_process&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Haber Bosch process&lt;/a&gt;, beans do that with no energy.
So if we understand that iron molybdenum complexity, we can potentially do away with this massive energy inefficient process.&lt;/p&gt;

&lt;p&gt;Then you also have &lt;a href=&quot;https://en.wikipedia.org/wiki/Shor%27s_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shor’s algorithm&lt;/a&gt; to factorise n, which should make it possible to break RSA encryption.
Although this won’t happen for now as quantum computers are still not stable enough.&lt;/p&gt;

&lt;p&gt;All in all a very interesting talk to give you a heads-up on the current state of affairs around quantum computing, but it also makes it quite clear that we still need to go a long way in order to have practical, production-ready, quantum computing.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/7J4tuIsbBfk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;agile-is-a-dirty-word-by-james-birnie&quot;&gt;Agile is a Dirty Word by &lt;a href=&quot;https://twitter.com/runningchairjb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;James Birnie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;James Birnie&quot; src=&quot;/img/devoxx-fr-2019/james-birnie.png&quot; /&gt;&lt;/span&gt;
In this talk, James explores in which organizations agile became a dirty word.
Often it starts with companies who are doing real agile.
You can compare the organizations with real democratic countries like the Democratic Republic of Congo and Democratic People’s Republic of Korea.&lt;/p&gt;

&lt;p&gt;Doing agile does not make you agile, you don’t do agile, you have to be it.
Often it is like a cargo cult, just doing the rituals of scrum but loosing the goal and the context out of sight.&lt;/p&gt;

&lt;p&gt;Combine this with risk management theater, also known as lots of processes and checkboxes to tick off in order to avoid risk taking making it easy for agile to become a dirty word.&lt;/p&gt;

&lt;p&gt;SAFE is the perfect example of agile gone wrong, too much convention and control.&lt;/p&gt;

&lt;p&gt;Agile also tends to collide with the current issues with budgeting, which tend to emphasize on short-term goals preventing organizations from doing some real investments.&lt;/p&gt;

&lt;p&gt;A good paper to read is: &lt;a href=&quot;https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to detect agile bullshit&lt;/a&gt; from the US Department of Defence.&lt;/p&gt;

&lt;p&gt;In order to bring the organization back to track, avoid dirty words which have become contaminated by bad experiences.
Read the agile manifesto and talk about the values and principles mentioned.&lt;/p&gt;

&lt;p&gt;Note, waste is not always obvious.
Like code reviews which are often seen als helpful and agile, but too often are just waste.&lt;/p&gt;

&lt;p&gt;Only work on your biggest problem and only when that has been tackled move over to the next.&lt;/p&gt;

&lt;p&gt;The goal of agile should be to get autonomous cross functional teams who can deliver themselves and are decoupled as much as possible from the rest of the organization.
Also, there does not exist failure within agile, it is better to call it experimenting.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CmKBXgbMa24&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Devoxx FR was  an amazing experience for us where we got to see some of our friends again and meet and befriend others.&lt;/p&gt;

&lt;p&gt;Sharing your experiences should always be the main goal when you attend a conference.
It is true that as a speaker, it does is easier to share your experiences and to get in contact with other people.
But as an attendee you should never hesitate to go up to a speaker or another attendee and ask a question, to come in contact.
Most people happily and willingly share their knowledge.&lt;/p&gt;

&lt;p&gt;Give it a try.
Next time you are at a conference, ask that question that came up in your mind or join an interesting conversation instead of just listening and who knows what interesting discussions will unfold.&lt;/p&gt;

&lt;p&gt;The date for next year’s edition has already been announced and will happen on 15th until the 17th of April 2020.
Be sure to mark it in your agenda so you can enjoy the great atmosphere!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Mt1jXgiyhp0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-fr-2019/moulin-rouge.jpg&quot; alt=&quot;Moulin Rouge&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Conference" /><category term="Devoxx" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">Devoxx France is a yearly conference in Paris, France. Three colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn and Tom Van den Bulck attended the conference in April 2019, where all of them were welcomed as speaker. In this blog post we share our impressions and experiences.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/devoxx-fr-2019/devoxx-fr.png" /></entry><entry><title type="html">Getting started with TensorFlow in the browser</title><link href="https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser.html" rel="alternate" type="text/html" title="Getting started with TensorFlow in the browser" /><published>2019-06-26T00:00:00+00:00</published><updated>2019-06-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2019/06/26/Tensorflow-in-the-browser.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tensorflow&quot;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tensorflowjs&quot;&gt;TensorFlow.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ml5&quot;&gt;ML5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Machine learning is a hot topic right now, and rightfully so!
It is also something that is very hard to do, if you’re trying to do it right, that is.
Since AI/ML is here to stay and not everyone has the time and resources to study every aspect of ML, we need something to help us.
We already have TensorFlow which runs in Python, nice if you know Python.
But what if you want to experiment with ML in your latest web application?
The answer is here: &lt;a href=&quot;https://www.tensorflow.org/js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This blogpost serves as a quick introduction to TensorFlow.js and ML5 so you too can get started with some cool AI/ML examples in your web applications!&lt;/p&gt;

&lt;h2 id=&quot;tensorflow&quot;&gt;Tensorflow&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Tensorflow&quot; src=&quot;/img/2019-06-26-tensorflowjs/tensor.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we are going to implement machine learning into an application, TensorFlow is one of the most used libraries that provides everything we need to get started.
It has been around for quite some time and is really mature.
It is fully open source and a well-adopted industry standard with great tooling and lots of reference materials.&lt;/p&gt;

&lt;p&gt;The full documentation on TensorFlow can be found &lt;a href=&quot;https://www.tensorflow.org/guide&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.
Learning TensorFlow is a long process that requires dedication and a lot of trial and error.
Experimentation is key!&lt;/p&gt;

&lt;p&gt;There are also a lot of very good online courses to get started with machine learning that can greatly aid you in understanding the key principles and concepts.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/vq2nnJ4g6N0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/tYYVSEHq-io&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There are many more videos about getting started, and there are also some very good courses on online educational websites like Coursera and Pluralsight.
They are a great place to start, but always remember that only with extended trial and error and experimentation you will fully grasp the logic behind it all!&lt;/p&gt;

&lt;h2 id=&quot;tensorflowjs&quot;&gt;TensorFlow.js&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;TensorFlow.js&quot; src=&quot;/img/2019-06-26-tensorflowjs/tensorflowjs.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter TensorFlow.js.
This ‘new’ addition to the TensorFlow lineup allows developers to utilize the power of machine learning in the browser or in NodeJS.
The biggest advantage of this is that models written in Python can be converted and reused.
This allows for some very cool use cases we will go into a bit later.&lt;/p&gt;

&lt;p&gt;TensorFlow.js is nice because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GPU accelerated (in the browser), thanks to WebGL/OpenCL, and this even on non CUDA cards!&lt;/li&gt;
  &lt;li&gt;Lower barrier of entry, no prior Python knowledge required (but can be handy)&lt;/li&gt;
  &lt;li&gt;Convert/retrain/reuse existing models with your own data&lt;/li&gt;
  &lt;li&gt;Quickly prototype into existing applications without having to setup a full ML pipeline&lt;/li&gt;
  &lt;li&gt;In the browser we have direct access to various input devices/sensors like the camera/accelerometer/location/…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This sound almost too good to be true!
But there are a few limitations though.
Browsers are a lot more memory constrained than when training a model ‘offline’ with Python.
This means that super complex models pose an issue when training in the browser, keep this in mind!
You can however always train a model offline and only use TensorFlow.js to run the model in the browser and make predictions.
Also keep in mind that the models you load, tend to be on the larger side, especially when considering web pages.
Some models are upwards of a 100 MegaBytes or more, so loading them can take a while, certainly when bandwidth is limited (mobile devices/3G/bad WiFi).&lt;/p&gt;

&lt;p&gt;Taking the TensorFlow.js variant of TensorFlow into account, we can see that there are many options in the ecosystem to build, train and run models almost everywhere.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;TensorFlow ecosystem&quot; src=&quot;/img/2019-06-26-tensorflowjs/overview.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-small-javascript-example&quot;&gt;A small JavaScript example&lt;/h3&gt;

&lt;p&gt;The following example is one how to recognize digits from the MNIST dataset (Modified National Institute of Standards and Technology).
This is a large dataset of scanned handwritten digits.
It contains 60,000 training images and 10,000 testing images.
Each image is black and white spanning 28 by 28 pixels, for a total of 784 pixels.
Numbers you’ll get to know by heart.&lt;/p&gt;

&lt;p&gt;All the API calls used are documented on the &lt;a href=&quot;https://js.tensorflow.org/api/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tf.sequential provides an API where the output from one layer is used as the input to the next layer.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The first layer of the convolutional neural network plays a dual role:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it is both the input layer of the neural network and a layer that performs the first convolution operation on the input.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// MaxPooling layer for downsampling =&amp;gt; https://www.quora.com/What-is-max-pooling-in-convolutional-neural-networks&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxPooling2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;poolSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our third layer is another convolution, this time with 32 filters.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Max pooling again.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxPooling2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;poolSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Add another conv2d layer.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kernelSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now we flatten the output from the 2D filters into a 1D vector to prepare&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it for input into our last layer. This is common practice when feeding&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// higher dimensional data to a final classification output layer.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}));&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our last layer is a dense layer which has 10 output units, one for each&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// We use the softmax function as the activation for the output layer as it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// creates a probability distribution over our 10 classes so their output values sum to 1.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;softmax&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This concludes the code for creating the actual layers.
Each layer has some comments explaining why it is used and what its function is.
As is, this code is not that complex.
The complexity stems from knowing what layers to use, what parameters to give them and how to combine them all.
This can only be learned up to some degree as a deep understanding is required to figure this out.
Thankfully the internet has many websites with resources for machine learning and there are even websites dedicated to providing ready-to-use models, like &lt;a href=&quot;https://modelzoo.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Model Zoo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we will look at code that sets the optimizer, sets up the training and validation, loads the data and then trains and validates the model.
A working example of this code can be found &lt;a href=&quot;https://storage.googleapis.com/tfjs-examples/mnist/dist/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// An optimizer is an iterative method for minimizing a loss function.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It tries to find the minimum of our loss function with respect to the model's weight parameters.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rmsprop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We compile our model by specifying an optimizer, a loss function, and a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// list of metrics that we will use for model evaluation. Here we're using a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// categorical crossentropy loss.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;categoricalCrossentropy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Batch size is another important hyperparameter. It defines the number of&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// examples we group together, or batch, between updates to the model's&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// weights during training.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Leave out the last 15% of the training data for validation, to monitor&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// overfitting during training.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainBatchCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTrainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalNumBatches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainEpochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// During the long-running fit() call for model training, we include callbacks.  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;batchSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;validationSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trainEpochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onBatchEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;trainBatchCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;onBatchEnd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onEpochEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;onIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;onEpochEnd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testAccPercent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalValAccPercent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testExamples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testExamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Code wrapped in a tf.tidy() function callback will have their tensors freed&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// from GPU memory after execution without having to call dispose().&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tidy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// tf.argMax() returns the indices of the maximum values in the tensor along&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a specific axis. Categorical classification tasks like this one often&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// represent classes as one-hot vectors. One-hot vectors are 1D vectors with&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// one element for each output class. All values in the vector are 0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// except for one, which has a value of 1 (e.g. [0, 0, 0, 1, 0]). &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is still not all that complicated code, but it is a lot to figure out all by yourself.
There are pre-trained models available which can make your life easier, but what if there was an even easier way.
What if there exists a library (or more than one) that allows you to do some commonly used machine learning techniques with very little code.
It exists, read on below to find out all about it!&lt;/p&gt;

&lt;h2 id=&quot;ml5&quot;&gt;ML5&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;ML5&quot; src=&quot;/img/2019-06-26-tensorflowjs/ml5-examples.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter ML5!
This library provides ready to use building blocks, as their website describes:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ML5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students.
The library provides access to machine learning algorithms and models in the browser, building on top of TensorFlow.js with no other external dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gives us the ability to quickly use these machine learning techniques in prototypes, to experiment with and test viability in real world conditions without requiring a full model to be built up front.
This is provided the machine learning technique is available within the ML5 library.&lt;/p&gt;

&lt;p&gt;Classifying an image becomes really simple:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Initialize the Image Classifier method with MobileNet. A callback needs to be passed.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ml5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MobileNet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;noCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;images/bird.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gotResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gotResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#result&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#probability&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This small example also uses &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.js&lt;/a&gt; for image handling/drawing.&lt;/p&gt;

&lt;p&gt;It has many different available machine learning techniques available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image classification&lt;/li&gt;
  &lt;li&gt;Pose estimation&lt;/li&gt;
  &lt;li&gt;Person segmentation&lt;/li&gt;
  &lt;li&gt;Biomedical image segmentation&lt;/li&gt;
  &lt;li&gt;Style transfer&lt;/li&gt;
  &lt;li&gt;Image to image translation&lt;/li&gt;
  &lt;li&gt;Feature extraction&lt;/li&gt;
  &lt;li&gt;Text sentiment detection&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detailed information and reference documentation can be found on &lt;a href=&quot;https://ml5js.org/reference/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their website&lt;/a&gt;.
The project is also fully open source and in active development.&lt;/p&gt;

&lt;h3 id=&quot;some-ml5-examples&quot;&gt;Some ML5 examples&lt;/h3&gt;

&lt;p&gt;We have written some small examples ourselves with ML5.
You can run the examples by checking out &lt;a href=&quot;https://github.com/ordina-jworks/TensorFlow.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the repo&lt;/a&gt; and switching to any of the solution branches.
Be sure to run it from a local webserver or the demos will not work correctly!&lt;/p&gt;

&lt;p&gt;The first example uses &lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLO (You Only Look Once)&lt;/a&gt;  and ImageNet to detect the contents of an image and classify it.
The second example uses Style transfer to transfer styles from a base image to a provided target image.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-06-26-tensorflowjs/yolo.jpg&quot; data-lightbox=&quot;ML5 custom examples&quot; data-title=&quot;YoLo and image classification&quot;&gt;
        &lt;img alt=&quot;YoLo and image classification&quot; src=&quot;/img/2019-06-26-tensorflowjs/yolo.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 60%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2019-06-26-tensorflowjs/style.jpg&quot; data-lightbox=&quot;ML5 custom examples&quot; data-title=&quot;Style transfer&quot;&gt;
        &lt;img alt=&quot;Style transfer&quot; src=&quot;/img/2019-06-26-tensorflowjs/style.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 31%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These are really simple to make and provide a real world value for quickly prototyping an application to include a machine learning technique.
While not everything is perfect (the cat is a Holy Birman not a Siamese, but I’ll excuse that one) it can give you a rough view on how well it will work and if it merits further development effort.&lt;/p&gt;

&lt;p&gt;Be sure to give it a try and see for yourself how easy it really is to get started with TensorFlow in the browser!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://modelzoo.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Model Zoo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ml5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ml5js/ml5-examples#examples-index&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5 Demos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ordina-jworks/TensorFlow.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ML5 Custom Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his role as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="Machine Learning" /><category term="Internet of Things" /><category term="Smart tech" /><category term="Machine Learning" /><category term="Artificial Intelligence" /><category term="TensorFlow" /><category term="JavaScript" /><category term="Browser" /><category term="Node.js" /><category term="Ml5.js" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-06-26-tensorflowjs/banner.jpg" /></entry><entry><title type="html">JDK distributions</title><link href="https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions.html" rel="alternate" type="text/html" title="JDK distributions" /><published>2019-05-22T00:00:00+00:00</published><updated>2019-05-22T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions</id><content type="html" xml:base="https://ordina-jworks.github.io/java/2019/05/22/JDK-distributions.html">&lt;blockquote&gt;
  &lt;p&gt;Around February we had a discussion in our chat group of developers which made us realise how much confusion there is on the new update cycle for the JVM.
We decided it would be good idea to write a blog post that should clear up the confusion for our developers and clients.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#oracles-jdk-distributions&quot;&gt;Oracle’s JDK distributions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openjdk-updates&quot;&gt;OpenJDK updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openjdk-providers&quot;&gt;OpenJDK providers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java-desktop-java-web-start-and-javafx&quot;&gt;Java Desktop, Java Web Start and JavaFX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oracles-jdk-distributions&quot;&gt;Oracle’s JDK distributions&lt;/h2&gt;

&lt;p&gt;First we have to explain what changed to Oracle’s JDK distributions recently, which has brought along a lot of uncertainty within the Java community.
This blog post is going to try to explain these changes and more importantly, tell you what you should know about the licenses and options you have.&lt;/p&gt;

&lt;p&gt;At the end of this article you should know more about the free updates and commercial support options from  various JDK vendors and understand that OpenJDK 8 and 11 are still being updated, even though Oracle is going to stop leading those projects, to focus on the new versions and providing commercial support.&lt;/p&gt;

&lt;h3 id=&quot;six-month-release-cycle&quot;&gt;Six month release cycle&lt;/h3&gt;

&lt;p&gt;Java SE now has new major versions released every six months since Java version 9.
Prior to this version, updates where provided by Oracle and other OpenJDK contributors.
These releases, such as 8u91, 8u111 and 8u131, were released every six months.
You would not get further updates on 8u91 once 8u111 was released and no longer get updates for 8u111 once 8u131 was released.&lt;/p&gt;

&lt;p&gt;Since Java version 9 however, there is a new six month release cycle for major versions.
Similar to the old update cycle.
In the new version system you will no longer get updates for Java 12 once Java 13 is released.
Exceptions being long-term support versions which will get updates beyond six months.
More about that later.&lt;/p&gt;

&lt;p&gt;Below is a table for free updates.
Each vendor can release their own OpenJDK distributions and decide for themselves how long they provide free updates.
If you want pick a vendor, make sure you research how long they will be providing free updates/support because this may vary from vendor to vendor.
Further in the article we provide a table with most of this information.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;Release date&lt;/th&gt;
      &lt;th&gt;Free updates ended or superseded&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 6&lt;/td&gt;
      &lt;td&gt;December 2006&lt;/td&gt;
      &lt;td&gt;Supported primarily by Azul systems&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 7&lt;/td&gt;
      &lt;td&gt;July 2011&lt;/td&gt;
      &lt;td&gt;Supported primarily by Red Hat until at least June 2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 8&lt;/td&gt;
      &lt;td&gt;March 2014&lt;/td&gt;
      &lt;td&gt;Supported by Red Hat, Amazon, Azul Systems, BellSoft, Google, IBM, jClarity, SAP, and others.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 9&lt;/td&gt;
      &lt;td&gt;Sept 2017&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 10&lt;/td&gt;
      &lt;td&gt;March 2018&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 11&lt;/td&gt;
      &lt;td&gt;Sept 2018&lt;/td&gt;
      &lt;td&gt;Supported by Red hat, Amazon, Azul Systems, BellSoft, Google, IBM, jClarity, SAP, and others.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 12&lt;/td&gt;
      &lt;td&gt;March 2019&lt;/td&gt;
      &lt;td&gt;Superseded by OpenJDK 13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK 13&lt;/td&gt;
      &lt;td&gt;Sept 2019&lt;/td&gt;
      &lt;td&gt;Will be superseded by OpenJDK 14&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;support-and-licenses&quot;&gt;Support and licenses&lt;/h3&gt;

&lt;p&gt;Before Java 9, Oracle would provide updates for their JDK for three years.
The license allowed you to use these updates personally and commercially.
The updates had no support so if you wanted support you had to buy a license from Oracle and those licenses also came with longer update cycles.
Starting April 2019, the new Oracle JDK 8 updates will be restricted and will remain free for personal desktop use, development, testing, prototyping, demonstrating and for use with certain types of applications.
Commercial use of these updates requires you to get a license for a paid support plan.
Using older versions is allowed, but will not contain important security patches.&lt;/p&gt;

&lt;p&gt;Java 9 brings new update cycles which allows for new implementations like TLS 1.3 to be added to Java faster.
Oracle also started producing Oracle OpenJDK builds which use the GNU General Public License, version 2, with the Classpath Exception.
Every major Java version has free updates for six months until the next major version is released.
If you need new updates and support for these older versions, you will have to buy a license from Oracle which will extend support and updates although they only provide this for LTS releases.&lt;/p&gt;

&lt;h4 id=&quot;support&quot;&gt;Support&lt;/h4&gt;

&lt;p&gt;So what if I want support from Oracle?
Support isn’t free because Oracle and other companies have to hire employees and developers to provide these support services.
If you need the reassurance of bug fixes and somebody to answer your questions then you have to get commercial support.
You aren’t limited to Oracle’s support.
Which vendor you choose to get this support from is up to you.
But each vendor has their own JDK binaries so make sure you use the binaries of the vendor you want to get commercial support from and don’t forget to check how long they will support your OpenJDK version.
Each vendor can decide for themselves how long they provide support for their OpenJDK libraries, so this isn’t a decision you should make on a whim.&lt;/p&gt;

&lt;p&gt;You might also be thinking: “Why would I pay for commercial support for (open source) JDK versions?”.
Don’t forget that Oracle and other vendors pour money in development of these JDK versions and this money has to come from somewhere.
You are not obliged to get paid support with one of the vendors providing OpenJDK versions, but we think it’s worth thinking about supporting the Java ecosystem to ensure its long-lasting future.
If there is no money to develop the JDK further then there won’t be any progression to the future of the JDK ecosystem.&lt;/p&gt;

&lt;h3 id=&quot;long-term-support-lts&quot;&gt;Long-Term Support (LTS)&lt;/h3&gt;

&lt;p&gt;In the OpenJDK, LTS is an understanding between various contributors which are mainly led by Oracle and Red Hat which means that the code line for Java SE 11, 17, 23, etc will be maintained for a longer period of time than six months.&lt;/p&gt;

&lt;p&gt;Oracle leads the first six months of the OpenJDK LTS code line, providing updates and producing the Oracle OpenJDK builds, but afterwards as mentioned before, provide updates under a paid support plan.&lt;/p&gt;

&lt;p&gt;There’s a but however: Oracle will work with other OpenJDK vendors to hand over the OpenJDK LTS code line and allow those vendors to continue working on these updates together.
Handing over the OpenJDK code line has already occurred for both Java 8 and Java 11 with Red Hat taking over those update projects.
This doesn’t mean that they are the only one contributing to the OpenJDK project.
Various people can still provide patches and add new features to new versions of the OpenJDK.
You can read more about JDK 11 updates on the &lt;a href=&quot;https://wiki.openjdk.java.net/display/JDKUpdates/JDK11u&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenJDK Wiki&lt;/a&gt;.
You’ll see that there are updates planned until at least mid October 2019.&lt;/p&gt;

&lt;p&gt;This means that the Oracle JDK could differ from the OpenJDK based binaries and the JDKs provided by other vendors.
Most of the major vendors have continued to take efforts to keep them in sync as much as possible, but this does mean you should develop, test, … your applications on the binaries you plan on using in production, or you might end up with some unexpected results during production.
To prevent big differences, a TCK is  provided by Oracle for OpenJDK distributions.
More about that later in the article.&lt;/p&gt;

&lt;h2 id=&quot;openjdk-updates&quot;&gt;OpenJDK updates&lt;/h2&gt;

&lt;p&gt;The OpenJDK community works on free, open-source implementations of the Java SE standard.
Oracle contributes a lot to these projects and forms the basis for both the Oracle JDK and OpenJDK builds.
OpenJDK 11+ versions are interchangeable with Oracle’s JDK for applications.
Oracle will continue to contribute to OpenJDK while they provide updates for the corresponding Oracle OpenJDK build version.
Once that version is superseded, Oracle will cease contributing to that version and start updating the next one.&lt;/p&gt;

&lt;h3 id=&quot;updates-from-other-vendors&quot;&gt;Updates from other vendors&lt;/h3&gt;

&lt;p&gt;Oracle is very receptive of the idea on having community maintenance and will continue to support handover of the OpenJDK to the community to a qualified volunteering entity once they have moved on to work on the next version.
Red Hat is currently globally leading and updating OpenJDK 6 and OpenJDK 7 projects after Oracle ended updates for them.
After Red Hat stopped updating OpenJDK 6, Azul Systems took over leading the project and continued to provide updates for the project to this day of writing.&lt;/p&gt;

&lt;p&gt;Red Hat is currently leading OpenJDK 8 and OpenJDK 11 since April 2019.
This does not mean that they are the sole contributors to the project.
Other vendors are providing patches and updates as well. 
The biggest contributions are happening to the OpenJDK 8 project with contributions from not just Red Hat, but Amazon, Azul Systems, BellSoft, IBM, jClarity, Google, Sap and many other vendors.&lt;/p&gt;

&lt;p&gt;For consistency, these vendors provide extended update cycles for their OpenJDK for the same versions that are deemed LTS for Oracle’s JDK.&lt;/p&gt;

&lt;h2 id=&quot;openjdk-providers&quot;&gt;OpenJDK providers&lt;/h2&gt;

&lt;h3 id=&quot;build-yourself-from-source-providers&quot;&gt;Build yourself from source providers&lt;/h3&gt;

&lt;p&gt;One of the options you have is to build a JDK from source code meaning OpenJDK, no commercial support and you need to build it yourself and keep it updated.
This is not something we would suggest doing since this requires you to put resources in, checking for updates and applying patches if needed.
There is also no way of getting any commercial support if you ever need it.&lt;/p&gt;

&lt;h4 id=&quot;source-providers&quot;&gt;Source providers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openjdk-sources.osci.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tarballs (Java 7+)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.github.com/AdoptOpenJDK/openjdk-build&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AdoptOpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-binaries-from-providers&quot;&gt;Using binaries from providers&lt;/h3&gt;

&lt;p&gt;The most convenient option is to use binary distributions from other providers that are providing public updates.&lt;/p&gt;

&lt;h4 id=&quot;free-binary-distributions--commercial-support&quot;&gt;Free binary distributions &amp;amp; commercial support&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Distribution&lt;/th&gt;
      &lt;th&gt;Versions&lt;/th&gt;
      &lt;th&gt;TCK&lt;/th&gt;
      &lt;th&gt;Public updates&lt;/th&gt;
      &lt;th&gt;Arch(*)&lt;/th&gt;
      &lt;th&gt;Commercial Support&lt;/th&gt;
      &lt;th&gt;Commercial Support ended&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://adoptopenjdk.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AdoptOpenJDK&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Until at least Sep 2023&lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;IBM, jClarity&lt;/td&gt;
      &lt;td&gt;Indefinitely (IBM), Until at least 2025 (jClarity)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://aws.amazon.com/corretto/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Corretto&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until at least June 2023&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.azul.com/downloads/zulu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azul Zulu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;Azul&lt;/td&gt;
      &lt;td&gt;March 2025 (8), September 2026 (11)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.bell-sw.com/pages/products&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bellsoft Liberica&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8, 11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until at least 2023&lt;/td&gt;
      &lt;td&gt;Major + Minor&lt;/td&gt;
      &lt;td&gt;BellSoft&lt;/td&gt;
      &lt;td&gt;Until 2026&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://openjdk.java.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oracle OpenJDK&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Until Mar 2019&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;Oracle (through the Oracle JDK)&lt;/td&gt;
      &lt;td&gt;September 2023, September 2026 (extended support)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://sap.github.io/SapMachine/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SapMachine&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;September 2022&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;SAP&lt;/td&gt;
      &lt;td&gt;September 2022&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;* &lt;strong&gt;Major&lt;/strong&gt; = Linux x86, MacOS, Windows x64,
&lt;strong&gt;Minor&lt;/strong&gt; = various other platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a general philosophy, AdoptOpenJDK will continue to build binaries for LTS releases as long as the corresponding upstream source (Oracle OpenJDK) is actively maintained.&lt;/em&gt;
&lt;em&gt;The Eclipse OpenJ9 Support Document covers extra support info for that VM.&lt;/em&gt;
&lt;em&gt;This information might change overtime and was gathered from the vendors pages and support.&lt;/em&gt;
&lt;em&gt;Contact vendors for the most recent information.&lt;/em&gt;
&lt;em&gt;jClarity will support their JDK binaries as long as produced which likely means 2028&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;technology-compatibility-kit-for-java-tck&quot;&gt;Technology Compatibility Kit for Java (TCK)&lt;/h5&gt;

&lt;p&gt;The Java Compatibility Kit (a.k.a., the JCK or TCK for Java SE) is an extensive test suite used by Oracle and licensees to ensure compatible implementations of its platform.
This ensures that the OpenJDK implementation does not have major differences from the Oracle’s JDK, but it is still possible for there to be minor differences in the binary distribution.&lt;/p&gt;

&lt;p&gt;Sun released a specific license to permit running the TCK in the OpenJDK context for any GPL implementation deriving substantially from OpenJDK.
This also means to be TCK compliant.
The JDK distribution is required to use the same GPL license.
Otherwise you cannot obtain legal access the TCK.
It is available at no charge to developers who are planning to deploy a compatible Java implementation based on code derived from the OpenJDK or who are participating in OpenJDK research, bug fixes, code enhancement and/or ports to other hardware or software architectures.&lt;/p&gt;

&lt;h3 id=&quot;using-distributions-provided-by-your-linux-distribution&quot;&gt;Using distributions provided by your linux distribution&lt;/h3&gt;

&lt;p&gt;Many Linux distributions will continue to provide OpenJDK binaries for their distributions through their package managers including and not limited to Debian, Ubuntu, CentOS, Fedora, Alpine, …&lt;/p&gt;

&lt;h2 id=&quot;java-desktop-java-web-start-and-javafx&quot;&gt;Java Desktop, Java Web Start and JavaFX&lt;/h2&gt;

&lt;p&gt;There are various changes with Desktop Java SE starting with the Oracle JDK 11 that you should be aware of.&lt;/p&gt;

&lt;h3 id=&quot;javafx-and-openjfx&quot;&gt;JavaFX and OpenJFX&lt;/h3&gt;

&lt;p&gt;As of Java version 11, both Oracle’s JDK and Oracle’s OpenJDK will no longer contain the JavaFX or OpenJFX libraries.
You will have to add these libraries yourself or through build tools.
The update cycle is the same as OpenJDK: if OpenJFX 12 is released, public updates are dropped for OpenJFX 11.&lt;/p&gt;

&lt;h3 id=&quot;java-packager&quot;&gt;Java Packager&lt;/h3&gt;

&lt;p&gt;The Java packager, which allows you to bundle applications and their dependencies with the JVM, is no longer part of the OpenJDK and has been removed from all of Oracle’s JDK versions starting from version 11.
There is a &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8200758&quot;&gt;JEP&lt;/a&gt; to add a new packaging tool to OpenJDK but this is not yet ready for Java 11.&lt;/p&gt;

&lt;h3 id=&quot;java-webstart&quot;&gt;Java WebStart&lt;/h3&gt;

&lt;p&gt;Java WebStart has been removed from Oracle’s JDK versions starting from version 11.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alternatively you can use &lt;a href=&quot;https://icedtea.classpath.org/wiki/IcedTea-Web&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IcedTea-Web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AdoptOpenJDK will be supporting OpenJDK binaries with IcedTea-Web&lt;/li&gt;
  &lt;li&gt;IBM will be supporting AdoptOpenJDK builds of OpenJDK with IcedTea-Web&lt;/li&gt;
  &lt;li&gt;Builds from Red hat include a simplified IcedTea-Web installer (ojdkbuild)&lt;/li&gt;
  &lt;li&gt;Karukun is working on an &lt;a href=&quot;https://dev.karakun.com/webstart/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OSS replacement for Web Start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;p&gt;The information in this blog post comes from various sources which will be listed below.
A huge thanks goes out to the creators of the “Java Is Still Free” document who granted us permissions to use their post for this blog post.
We used these sources either because we were granted permissions to use them or the terms allowed us to use them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java Is Still Free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mail.openjdk.java.net/pipermail/jdk-updates-dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The jdk-updates-dev Archives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Duncan&quot;, &quot;last_name&quot;=&gt;&quot;Casteleyn&quot;, &quot;github&quot;=&gt;&quot;DuncanCasteleyn&quot;, &quot;linkedin&quot;=&gt;&quot;duncan-casteleyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/duncan-casteleyn/&quot;, &quot;avatar&quot;=&gt;&quot;duncan-casteleyn.jpg&quot;, &quot;title&quot;=&gt;&quot;Intern&quot;, &quot;email&quot;=&gt;&quot;duncan.casteleyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Duncan is a Java Consultant at Ordina Belgium, who is passionate about Java technologies. He likes to explore Spring Boot, Kotlin and other new technologies that he can use to develop applications.&quot;}</name><email>duncan.casteleyn@ordina.be</email></author><category term="Java" /><category term="Java" /><category term="OpenJDK" /><category term="JDK" /><summary type="html">Around February we had a discussion in our chat group of developers which made us realise how much confusion there is on the new update cycle for the JVM. We decided it would be good idea to write a blog post that should clear up the confusion for our developers and clients.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-05-20-JDK-distributions/openjdk.png" /></entry></feed>