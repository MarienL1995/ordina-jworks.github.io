<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-12-18T09:03:44+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">KotlinConf 2019</title><link href="https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019.html" rel="alternate" type="text/html" title="KotlinConf 2019" /><published>2019-12-18T00:00:00+00:00</published><updated>2019-12-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019.html">&lt;blockquote&gt;
  &lt;p&gt;KotlinConf is thé conference to visit if you’re into Kotlin development.
JetBrains introduced KotlinConf in 2017 in San Francisco with over 1.200 participants and 50 speakers.
In 2018 it took place in Amsterdam with over 1.300 participants and 60 speakers.
This year the conference was hosted in Denmark’s Copenhagen at the Bella Center, Scandinavia’s largest conference center.
Five colleagues of Ordina Belgium’s JWorks unit were very enthusiastic to attend the conference for the first time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/collage-1.jpg&quot; alt=&quot;KotlinConf photo collage #1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#day-one&quot;&gt;Day one&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#opening-keynote-by-hadi-hariri-and-andrey-breslav&quot;&gt;Opening Keynote by Hadi Hariri and Andrey Breslav&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#putting-down-the-golden-hammer-by-huyen-tue-dao&quot;&gt;Putting Down the Golden Hammer by Huyen Tue Dao&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kotless---kotlin-serverless-framework-by-vladislav-tankov&quot;&gt;Kotless - Kotlin serverless framework by Vladislav Tankov&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-the-fp-is-kotlin-by-shelby-cohen-and-katie-levy&quot;&gt;What the F(P) is Kotlin? by Shelby Cohen and Katie Levy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#your-first-server-with-ktor-by-big-nerd-ranch&quot;&gt;Your First Server with Ktor by Big Nerd Ranch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#new-product-announcement-by-hadi-hariri-maxim-shafirov-and-maarten-balliauw&quot;&gt;New Product Announcement&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#day-two&quot;&gt;Day two&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-shuttle-case-by-stephen-carver&quot;&gt;The Shuttle Case by Stephen Carver&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-state-of-kotlin-support-in-spring-by-sebastien-deleuze&quot;&gt;The state of Kotlin support in Spring by Sebastien Deleuze&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-kotlin-for-data-science-by-roman-belov&quot;&gt;Using Kotlin for Data Science by Roman Belov&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#whats-new-in-java-19-the-end-of-kotlin-by-jake-wharton&quot;&gt;What’s new in Java 19: The end of Kotlin? by Jake Wharton&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kotlin-in-space-by-maxim-mazin&quot;&gt;Kotlin in Space by Maxim Mazin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#going-native-how-i-used-kotlin-native-to-port-6-years-of-android-game-code-to-ios-in-6-months-by-ana-redmond&quot;&gt;Going Native: How I used Kotlin Native to Port 6 years of Android Game Code to iOS in 6 months by Ana Redmond&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-it-all-up&quot;&gt;Summing it all up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-one&quot;&gt;Day one&lt;/h1&gt;
&lt;h2 id=&quot;opening-keynote-by-hadi-hariri-and-andrey-breslav&quot;&gt;Opening keynote by &lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hadi Hariri&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/abreslav&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andrey Breslav&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Hadi Hariri&quot; src=&quot;/img/kotlinconf-2019/hadi-hariri.jpg&quot; /&gt;&lt;/span&gt;
Hadi kicked off the keynote by saying that this year is the third time that KotlinConf has sold out once again with over 1.700 participants.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2019/11/kotlinconf-2019-live-join-the-broadcast-attend-the-qa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;free live stream&lt;/a&gt; of all the different rooms would be made available for anyone to attend.
Some additional numbers were given: the conference counted over 60 speakers, 35 volunteers and there were people visiting the conference from over 86 countries.
The final session of the day would be about a new product announcement of JetBrains, followed by an evening party.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Andrey Breslav&quot; src=&quot;/img/kotlinconf-2019/andrey-breslav.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hadi then introduced Andrey Breslav, CTO and Lead Language Designer of Kotlin.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-1-intro-andrey-breslav.jpg&quot; alt=&quot;Intro Andrey Breslav&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;evolution-of-kotlin&quot;&gt;Evolution of Kotlin&lt;/h3&gt;
&lt;p&gt;Andrey continued with some numbers on the usage of Kotlin for each of the major versions:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Kotlin version&lt;/th&gt;
      &lt;th&gt;Usage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;200.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.1&lt;/td&gt;
      &lt;td&gt;500.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;2.100.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.3 (current version)&lt;/td&gt;
      &lt;td&gt;4.000.000 people&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can clearly see that Kotlin keeps growing at a really nice rate which looks very promising for the language.
For JetBrains, important numbers like these, validate the quality of their product.
For them it was clear from the beginning that Kotlin had to have an open ecosystem.
One welcome to every body and open to anyone who wants to build on top of Kotlin.
It was always meant to be more than just a piece of software, it was meant for people united by ideas.&lt;/p&gt;

&lt;p&gt;Andrey went a bit deeper on the Kotlin ecosystem and explained that they wanted Kotlin to become a default language regardless of the level of experience, platform, scale or type of application.
For them to achieve that, it was all about lowering barriers.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-2-kotlin-ecosystem.jpg&quot; alt=&quot;Kotlin Ecosystem&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;different-platforms&quot;&gt;Different platforms&lt;/h3&gt;
&lt;h4 id=&quot;server-side&quot;&gt;Server-side&lt;/h4&gt;
&lt;p&gt;Kotlin has been friends with Spring for a long time by now.
The first official support arrived since 2017 with Spring Boot, Web MVC, and Web Flux coroutines support.
Ktor, used for building asynchronous servers and clients in connected systems and also developed by JetBrains, is gaining more traction and is also used more and more at JetBrains.
Some other companies that have been using it are Expedia, Intuit and the Norway Tax Office.&lt;/p&gt;

&lt;h4 id=&quot;android&quot;&gt;Android&lt;/h4&gt;
&lt;p&gt;Android has been Kotlin-first since this year.
53% of professional Android developers work in Kotlin and 60% of the top 1.000 apps have been written in Kotlin.&lt;/p&gt;

&lt;p&gt;JetBrains wants to further invest in mobile multi-platform for both Android and iOS by allowing business logic reuse between the different platforms.
Planboard, PlanGrid, Careem Driver’s app, Cash App, Yandex Disk &amp;amp; Yandex Maps, Quizlet, and VMWare Workspace One are some of the apps where business logic is already been reused between the different platforms.&lt;/p&gt;

&lt;h3 id=&quot;whats-coming-in-14&quot;&gt;What’s coming in 1.4&lt;/h3&gt;
&lt;p&gt;Kotlin 1.4 is said to be released in Spring 2020 and a lot of focus is being put on quality and performance.
Currently, 93% of users get code completion results under 500ms but in 1.4, code completion is said to become about three times as fast.
IDE Gradle imports should also happen twice as fast and it should use 75% less memory.
A lot of improvements are also said to be done for Kotlin/Native compilation time.&lt;/p&gt;

&lt;h3 id=&quot;a-new-compiler&quot;&gt;A new compiler&lt;/h3&gt;
&lt;p&gt;One of the biggest pains in Kotlin projects is the build speed, especially as the project get bigger.
This is why JetBrains has been working on a completely new compiler!
It is going to be fast, uniform and pluggable.
Some parts are coming in Kotlin 1.4 whereas others are coming in later versions.
They are aiming on 5x faster compilations.
This however won’t be for version 1.4.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-3-new-kotlin-compiler-perf.jpg&quot; alt=&quot;New Kotlin compiler performance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new compiler also comes with a new type inference and will ship in 1.4.
This will fix numerous bugs that they couldn’t fix in the previous implementation as it was not flexible enough and it will enable new language features.
It can be evolved and extended to enable even more language features later on.&lt;/p&gt;

&lt;p&gt;Kotlin has three different backends: Kotlin/JVM, Kotlin/JS and Kotlin/Native.
In 1.4 they want to offer one single unified backend for all three of them.
Kotlin/Native is built from the beginning in this new unified infrastructure so Kotlin/JVM and Kotlin/JS both need to be migrated.
This way, if a bug gets fixed this will mean that it will be fixed for all platforms right away!&lt;/p&gt;

&lt;p&gt;An experimental feature in 1.4 is KLIM, a new portable format.
This includes a new unified format used within the different platforms.&lt;/p&gt;

&lt;h3 id=&quot;multi-platform&quot;&gt;Multi-platform&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-4-kotlin-multiplatform.jpg&quot; alt=&quot;Kotlin multi-platform&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JetBrains want people to be able to share code and skills across the whole platform.
The idea is that you write common Kotlin logic that can be used in any platform that works everywhere.
If you want to interact with a platform, you can interaction with platform specific versions of Kotlin.&lt;/p&gt;

&lt;p&gt;Seeing as libraries are somewhat the bulk of the Kotlin ecosystem, it is clear to JetBrains that they need to pay enough attention to help people writing libraries.
They plan on doing this by adding a few tools to help people make libraries and to make their APIs robust and stable over time.
This will be achieved with a new library called Author’s Mode that will demand explicit visibility and explicit public types where required.&lt;/p&gt;

&lt;p&gt;JetBrains is also working on Dokka, a documentation generation tool that will support multi-platform libraries.&lt;/p&gt;

&lt;h3 id=&quot;mobile-multi-platform&quot;&gt;Mobile multi-platform.&lt;/h3&gt;
&lt;p&gt;Coming in 2020 will be the possibility to run and debug iOS Kotlin apps in Android Studio through a closed-source plugin.
Note that this is not going to replace Xcode as you will still need it for certain things, but for the normal development cycle you will be able to stay within one IDE.&lt;/p&gt;

&lt;p&gt;Kotlin/Native already works on TvOS and WatchOS, and to demonstrate this, an app called Kotlin Locator was made to play a treasure hunting game during the conference.
The app comes with a WatchOS companion app so that you could try it out yourself.&lt;/p&gt;

&lt;h3 id=&quot;browser-multi-platform&quot;&gt;Browser multi-platform&lt;/h3&gt;
&lt;p&gt;A new feature has been added to allow quick reloading in Kotlin/JS, similar to other frontend frameworks.
A lot of improvements were also done on the JS binary size, compressing it further down by quite a bit, reducing the final size of an app.
Work is also done on JavaScript operability with support for ES modules and Dukat which will connect Kotlin types with TypeScript types.&lt;/p&gt;

&lt;h3 id=&quot;webassembly--kotlin&quot;&gt;WebAssembly + Kotlin&lt;/h3&gt;
&lt;p&gt;WebAssembly is a new web standard supported by all major browsers.
Basically it is a special virtual machine to run all kinds of different code and Kotlin wants to be run in there too.
Currently they have a prototype that they are working on.&lt;/p&gt;

&lt;h3 id=&quot;data-science-in-kotlin&quot;&gt;Data science in Kotlin&lt;/h3&gt;
&lt;p&gt;Not all users of Kotlin are programmers.
Data scientists have also been using Kotlin in combination with Jupyter, Spark and lets-plot.&lt;/p&gt;

&lt;h3 id=&quot;language-changes&quot;&gt;Language changes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-7770&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KT-7770&lt;/a&gt; was mentioned.
A ticket about function interfaces created by Sergei Lebedev three years ago.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-5-function-interfaces.jpg&quot; alt=&quot;Function interfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A function interface has a single method and you can use it as a function type.
This also improves the Java inoperability if you want to migrate Java code from Kotlin code without things breaking.&lt;/p&gt;

&lt;h3 id=&quot;language-evolutions&quot;&gt;Language evolutions&lt;/h3&gt;
&lt;p&gt;It is important for JetBrains to keep the language modern although they are aware that it is not very desired to have breaking changes in between updates.
If something becomes less useful it will be faded out and removed later to avoid legacy from building up.
In general, updating from one version to another should remain easy and desired.
JetBrains will provide feedback loops to keep developers informed of upcoming changes and to stay in touch with the community.
If migrations are necessary, they will provide the necessary guides or tools to help developers migrate their code.&lt;/p&gt;

&lt;p&gt;For all details, rewatch the keynote on YouTube:&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/0xKTM0A8gdI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;putting-down-the-golden-hammer-by-huyen-tue-dao&quot;&gt;Putting down the golden hammer by &lt;a href=&quot;https://twitter.com/queencodemonkey&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Huyen Tue Dao&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Andrey Breslav&quot; src=&quot;/img/kotlinconf-2019/huyen-tue-dao.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I suppose it is tempting, if the only tool you have is a hammer,
to treat everything as if it were a nail. - Abraham H. Maslow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Huyen started her talk with the quote above.
Given a new tool or framework, it is common for people to get a bit too enthusiastic with it and to exaggerate in the usage of it, treating it as a golden hammer.&lt;/p&gt;

&lt;p&gt;Huyen explained to us that she questioned herself on how to write better Kotlin code.
And in particular by avoiding her own hammers and biases.
As background information, she told us that she worked with Java and C++ before she got into touch with Kotlin.&lt;/p&gt;

&lt;p&gt;The main anchor that caused her to question herself was the &lt;a href=&quot;https://www.youtube.com/watch?v=PsaFVLr8t4E&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;keynote from KotlinConf 2018&lt;/a&gt; where the following was mentioned by Andrey Breslav:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our main focus, our main motto was to make a pragmatic language.
Getting things done, and turning your thoughts into working software without jumping through hoops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Experienced developers praise the following regarding code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Readability over concision&lt;/li&gt;
  &lt;li&gt;Reuse over Expressiveness&lt;/li&gt;
  &lt;li&gt;Interoperability over originality&lt;/li&gt;
  &lt;li&gt;Safety/tooling over soundness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on that, the following questions came up to her:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“When might we be using Kotlin features as golden hammers?”&lt;/li&gt;
  &lt;li&gt;“How can we use these features more pragmatically and hopefully write better Kotlin”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some hammer-proofing points to ponder:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Readability&lt;/li&gt;
  &lt;li&gt;Reusability&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Intentionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;type-inference&quot;&gt;Type inference&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-1-type-inference.jpg&quot; alt=&quot;Type inference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kotlin has a smart compiler that can infer things like the type of a variable.
The hinting feature in IntelliJ helps a lot with showing the exact type of a value or object as sometimes it might be possible that you expected a certain type but it’s actually a different one.&lt;/p&gt;

&lt;p&gt;For example, when declaring a list of numbers but also adding a string to it, causes it to change the list’s type to a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt;.
If we would want to have a compiler error for this we would need to define the type explicitly like &lt;code class=&quot;highlighter-rouge&quot;&gt;val crewlist: List&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Something to keep in mind in this case is that we should not depend too much on the hinting feature as you can only see these in IntelliJ and not for example when reviewing a pull request.
It is important to have the code speak for itself.
In that way it is important to explicitly specify the type in certain cases.&lt;/p&gt;

&lt;h3 id=&quot;implicit-parameter&quot;&gt;Implicit parameter&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-2-implicit-parameter.jpg&quot; alt=&quot;Implicit parameter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depending on the context, it is not always easy to tell what the &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; stands for.
Especially in a complex context, you should rather specify the variables to be more explicit.&lt;/p&gt;

&lt;h3 id=&quot;scope-functions&quot;&gt;Scope functions&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-3-scope-function.jpg&quot; alt=&quot;Scope functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is easy to exaggerate in the usage of scope functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;also&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;.
We should be weary of combining too much of these as it causes us to lose track of what &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; exactly represents and it creates unnecessary complexity making maintenance more difficult.&lt;/p&gt;

&lt;p&gt;Do not feel obligated to stretch yourself or your code because it does not feel Kotlin-y enough as Kotlin is meant to be a pragmatic language.
The code above can be rewritten as follows:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-4-scope-function-improved.jpg&quot; alt=&quot;Scope functions improved&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extension-functions&quot;&gt;Extension functions&lt;/h3&gt;
&lt;p&gt;We can define extension functions to extend existing APIs that you may otherwise not control without subclassing.
A good practice is to make use of this to keep classes and APIs minimal, only containing intrinsic properties and behaviours and to keep your class abstractions pure.&lt;/p&gt;

&lt;p&gt;Huyen mentioned the &lt;a href=&quot;https://www.coursera.org/learn/kotlin-for-java-developers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotlin for Java Developers Coursera course&lt;/a&gt; in which the question was asked on why extension functions are so popular.
We can exaggerate with extension functions.
For example if you make every single function an extension function of an existing class.
We should think about what makes a good utility to a class and we should not make extension functions of too specific functions but keep them as regular functions.&lt;/p&gt;

&lt;h3 id=&quot;nullability-and-nullable-types&quot;&gt;Nullability and nullable types&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-5-nullability.jpg&quot; alt=&quot;Nullability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt; can be valid ways of handling nulls &lt;strong&gt;with&lt;/strong&gt; thought to intentionality and maintainability.
Kotlin has nullable types whereas Java does not.
If you pull in Java methods into the Kotlin world, you can stumble upon cases where it is not clear if something is nullable or not, resulting into unchecked nullability issues.&lt;/p&gt;

&lt;p&gt;Null safety checks with &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; can be bad too and can obfuscate both good assumptions and bad assumptions.
Failing silently is often a bad and undesired thing.
Because of that, it can be a good approach to prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt; is not inherently evil but requires careful use based on good assumption or because you just KNOW that a value is non-null.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-6-nullability-tips.jpg&quot; alt=&quot;Nullability tips&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/YeqGfKmJM_g&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kotless---kotlin-serverless-framework-by-vladislav-tankov&quot;&gt;Kotless - Kotlin serverless framework by &lt;a href=&quot;https://twitter.com/vdtankov&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vladislav Tankov&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serverless is a cloud computing execution model, in which the cloud provider runs the server and dynamically manages the allocation of machine resources - wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Vladislav Tankov&quot; src=&quot;/img/kotlinconf-2019/vladislav-tankov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vladislav mentions that there are three simple steps in building a serverless application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Take small elements: stateless functions&lt;/li&gt;
  &lt;li&gt;Compose them with events into an application&lt;/li&gt;
  &lt;li&gt;Deploy them to the cloud runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This deploy step is often done with Infrastructure as Code (IaC).
However, deploying serverless applications with IaC is often not so simple.
It can require more than 100 lines of config, for a simple hello world application that contains 5 lines of code.
For a simple website it can even go to more than 1.000 lines of config.&lt;/p&gt;

&lt;p&gt;On top of that, IaC often uses a separate language to express the configuration.
This requires developers to learn yet another language.&lt;/p&gt;

&lt;p&gt;As a solution to these concerns, the &lt;a href=&quot;https://github.com/JetBrains/kotless&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotless&lt;/a&gt; framework is introduced.&lt;/p&gt;

&lt;h3 id=&quot;kotless&quot;&gt;Kotless&lt;/h3&gt;
&lt;p&gt;Kotless is an IaC tool for Kotlin serverless applications.
It consists of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A DSL that provides annotations to define routing, scheduled events, etc.&lt;/li&gt;
  &lt;li&gt;A Gradle plugin to configure how the serverless application should be deployed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Gradle plugin configures which application code should be scanned to generate Terraform code, and all the other necessary information for your deployment.&lt;/p&gt;

&lt;p&gt;By scanning your application, the Gradle Kotless plugin can determine a lot of the Terraform code that is required for your deployments.
This greatly decreases the amount of deployment config that you have to write yourself, and the things that you do have to write, you can write in Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;seamless-serverless&quot;&gt;Seamless serverless&lt;/h3&gt;
&lt;p&gt;Another advantage of Kotless is that you can write your serverless applications like a normal application.
Then when it is time to deploy to the cloud, Kotless will split your application into multiple lambdas.&lt;/p&gt;

&lt;p&gt;This means that you can deploy the same application as a standalone app in-house, or as a serverless app to the cloud.&lt;/p&gt;

&lt;h3 id=&quot;kotless-code-analysis&quot;&gt;Kotless code analysis&lt;/h3&gt;
&lt;p&gt;By analyzing your application code, Kotless can automatically configure the following things in your cloud environment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API interactions - based on annotations like &lt;code class=&quot;highlighter-rouge&quot;&gt;@Get&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Events handling - based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt; annotation&lt;/li&gt;
  &lt;li&gt;Permissions requirements&lt;/li&gt;
  &lt;li&gt;Queueing systems - based on usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; types&lt;/li&gt;
  &lt;li&gt;Calls of other serverless apps - based on &lt;code class=&quot;highlighter-rouge&quot;&gt;async {...}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Kotless looks like a promising framework to make it easier to deploy serverless applications.
It already has quite some interesting features, but they are working on it to make it even better!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/69uk3Pi88AE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-the-fp-is-kotlin-by-shelby-cohen-and-katie-levy&quot;&gt;What the F(p) is Kotlin? by &lt;a href=&quot;https://twitter.com/shelbyc0hen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shelby Cohen&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/klevy110&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Katie Levy&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/fp_kotlin_intro.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Shelby Cohen&quot; src=&quot;/img/kotlinconf-2019/shelby_cohen.jpeg&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Katie Levy&quot; src=&quot;/img/kotlinconf-2019/katie_levy.jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Shelby Cohen and Katie Levy shared with us the story of how they managed to introduce functional programming with Kotlin into their organisation.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/fp_kotlin_goal.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They presented an 8-step guide on how to influence colleagues and your company to adopt Kotlin based on their experience at &lt;a href=&quot;https://www.intuit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Intuit&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;1-find-your-passion&quot;&gt;1. Find your Passion&lt;/h3&gt;
&lt;p&gt;Find something you want to be passionate about.
In this case, it is Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;2-socialize&quot;&gt;2. Socialize&lt;/h3&gt;
&lt;p&gt;Share your passion with other people.
Try to find some things you like about Kotlin - or anything new for that matter - and tell about it to your colleagues.
Give some examples on how Kotlin removes ceremony compared to Java.
Spread the word on how Kotlin has null-safety built into the type system.&lt;/p&gt;

&lt;h3 id=&quot;3-proof-of-concept&quot;&gt;3. Proof of Concept&lt;/h3&gt;
&lt;p&gt;Do not only talk about your passion.
Do as you preach and have something to show to your peers.
Develop a new feature and have it reviewed and discussed by the others.
This should power the discussion with seniors developers and architects on whether the new technology should be adopted, put on hold or avoided.
Having a &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_of_concept&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;POC&lt;/a&gt; and other developers on board helps this conversation.&lt;/p&gt;

&lt;h3 id=&quot;4-create-a-plan&quot;&gt;4. Create a Plan&lt;/h3&gt;
&lt;p&gt;The light is green and you are allowed to make the switch. 
But other developers will still feel insecure about their Kotlin skills.
Katie and Shelby put together a plan to migrate from Java.
They provided online training courses to teach some basic features which helped the onboarding.
This increased the comfort and confidence of the team to make the jump.&lt;/p&gt;

&lt;p&gt;By setting goals, they were able to switch at a comfortable pace:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start with migrating and writing Kotlin tests which do not impact production code&lt;/li&gt;
  &lt;li&gt;Migrate easy wins such as data classes&lt;/li&gt;
  &lt;li&gt;Only then start adding new features in Kotlin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They also monitored what their changes were doing to the stability of the product:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Less crashes because of the improved type system (less NPEs)&lt;/li&gt;
  &lt;li&gt;Features were written faster in Kotlin&lt;/li&gt;
  &lt;li&gt;Less lines of code (to maintain and read)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to provide feedback but watch out to not push learners too much.
Some Kotlin code will look a bit Java-y at first, but this will improve over time.&lt;/p&gt;

&lt;h3 id=&quot;5-persuade-with-data&quot;&gt;5. Persuade with Data&lt;/h3&gt;
&lt;p&gt;The other engineers on the team might not (yet) share your passion for Kotlin, so use some data to persuade them even more.
Some numbers that can be used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/faq.html#what-advantages-does-kotlin-give-me-over-the-java-programming-language&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotlin uses 40% less lines of code than Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;More concise code takes less time to write and less time to read&lt;/li&gt;
  &lt;li&gt;Show examples on how Kotlin removes boilerplate code&lt;/li&gt;
  &lt;li&gt;The growing amount of big corporations who made the leap to Kotlin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;4th Most loved language on the 2019 Stack Overflow Developer Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-deconstruct-myths&quot;&gt;6. Deconstruct Myths&lt;/h3&gt;
&lt;p&gt;Even with all this data, there are still some myths that exist concerning the language which you do not want to see spread around.
Shelby and Katie broke down these myths in a &lt;a href=&quot;https://www.intuit.com/blog/uncategorized/kotlin-development-plan/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;technical white paper&lt;/a&gt; which they talk about on &lt;a href=&quot;https://medium.com/@srcohen1/kotlin-development-plan-5141087eaef0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium&lt;/a&gt;.
During the closing keynote of the conference, Maxim Shafirov (Jetbrains’ CEO) also proposed to make an official white paper to help companies migrate.&lt;/p&gt;

&lt;h3 id=&quot;7-cant-stop-wont-stop&quot;&gt;7. Can’t stop, Won’t Stop&lt;/h3&gt;
&lt;p&gt;At this point, the team was on board and the train started going full-speed. 
This is when they started a learning community to get other teams on board to spread the word.
They would give presentations, do live coding and code reviews to help others get started too.&lt;/p&gt;

&lt;h3 id=&quot;8-connect-with-larger-community&quot;&gt;8. Connect with Larger Community&lt;/h3&gt;
&lt;p&gt;Kotlin has an amazing community, which allows you to grow even further.
Katie mentions working on an Intuit &lt;a href=&quot;https://github.com/intuit/truffle-shuffle&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSource project&lt;/a&gt;, attending conferences and &lt;a href=&quot;https://talkingkotlin.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;podcasts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-functional-programming&quot;&gt;Why Functional Programming&lt;/h3&gt;
&lt;p&gt;Functional programming is a programming paradigm where computations are treated as mathematical functions.
Shared state and mutable data are avoided which improves the quality of the codebase.
It is also very helpful for multi-threaded workloads.
Functional programming is easier in Kotlin because functions are so called &lt;a href=&quot;https://en.wikipedia.org/wiki/First-class_function&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;first-class&lt;/a&gt; citizens.
A good third party library which enhances the functional capabilities is &lt;a href=&quot;https://arrow-kt.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;arrow-kt.io&lt;/a&gt;.
It is similar to the &lt;a href=&quot;https://www.vavr.io/&quot;&gt;Vavr&lt;/a&gt; library for Java developers but with the benefits of the Kotlin idioms.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/P6G2YPuDE3Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;your-first-server-with-ktor-by-big-nerd-ranch&quot;&gt;Your First Server with Ktor by &lt;a href=&quot;https://twitter.com/bignerdranch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Big Nerd Ranch&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Big Nerd Ranch&quot; src=&quot;/img/kotlinconf-2019/big-nerd-ranch.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This was a workshop on trying out &lt;a href=&quot;https://ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor&lt;/a&gt; and serves as a nice introduction to the framework.&lt;/p&gt;

&lt;p&gt;Before starting, it is required that you install the IntelliJ Ktor plugin via the Plugins menu.
After doing so, you can start a new Ktor project from within IntelliJ.
An alternative way of doing so is by going via the &lt;a href=&quot;https://start.ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor Project Generator&lt;/a&gt;.
Something worth noting is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt; file is written in &lt;a href=&quot;https://github.com/lightbend/config/blob/master/HOCON.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HOCON&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://drive.google.com/file/d/18VFCLxl_1hNMvKi1lLDKMr0bIaJ2gIll/view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;instructions&lt;/a&gt; of the workshops together with the &lt;a href=&quot;https://drive.google.com/file/d/1tRv2le4PllBT_NC-ipY7WUySPe1NV41Z/view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TXT file&lt;/a&gt; that is supposed to be read during the exercises can both be found on Google Drive.
You will learn how to set up your IDE, starting your Ktor application, and routing and serving data.&lt;/p&gt;

&lt;h2 id=&quot;new-product-announcement-by-hadi-hariri-maxim-shafirov-and-maarten-balliauw&quot;&gt;New product announcement by &lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hadi Hariri&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mshafirov&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maxim Shafirov&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/maartenballiauw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maarten Balliauw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-1-intro.jpg&quot; alt=&quot;Intro&quot; /&gt;
At the end of the first day it was time to announce JetBrains’ newest product!
&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maxim Shafirov&quot; src=&quot;/img/kotlinconf-2019/maxim-shafirov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Everything started with a ticket created 15 years ago by Maxim Shafirov, the CEO of JetBrains.
The ticket was about a request to improve collaboration between teams.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-2-ticket-ceo.jpg&quot; alt=&quot;Ticket CEO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maxim shortly went over how JetBrains came to be.
20 years ago, three developers came together and created a product to help them refactor some code.
By now, JetBrains has created over 20 products based on their own needs.
During the growth of the company from three developers to 1.200 people, JetBrains faced many challenges on working together between all the different teams.&lt;/p&gt;

&lt;p&gt;Creating a product involves more than just a development tool.
You have to take several things into account like version control, chat applications for communicating, write documentation and issue tracking.
Besides developers, you have other teams within a company such as testers, HR and marketing.
A challenge many companies face is to efficiently have all teams cooperate with each other which is why JetBrains wanted to create a tool specifically for this.&lt;/p&gt;

&lt;p&gt;Meet &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Space&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/NHuaKA3qhWg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Space is an integrated team environment that provides teams and individuals all tools necessary to create and collaborate efficiently in software development.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-3-features.jpg&quot; alt=&quot;Look and feel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maarten Balliauw&quot; src=&quot;/img/kotlinconf-2019/maarten-balliauw.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Demo time!
&lt;a href=&quot;https://twitter.com/maartenballiauw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maarten Balliauw&lt;/a&gt; demonstrated how Space can be used within a company and gave us an impression on the look and feel.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-4-look-and-feel.jpg&quot; alt=&quot;Look and feel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the demo, Maxim returned to share the prices of the different subscriptions.
Note that a free version is available!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-5-prices.jpg&quot; alt=&quot;Prices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt; you can request an invite to try out Space.
Attendees of KotlinConf have a guaranteed spot to try it out.
More info is available in the &lt;a href=&quot;https://blog.jetbrains.com/blog/2019/12/05/welcome-to-space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; on JetBrains’ website.
We think that JetBrains is very ambitious with Space but given how good their products have been until now, we are convinced that this will make another great product.&lt;/p&gt;

&lt;p&gt;Rewatch the Space announcement video:&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/t1vMUV9jYRs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After the announcement, the KotlinConf party started with different types of food, drinks and nice music for all the attendees.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-6-party.jpg&quot; alt=&quot;Party&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-two&quot;&gt;Day Two&lt;/h1&gt;
&lt;h2 id=&quot;the-shuttle-case-by-stephen-carver&quot;&gt;The Shuttle Case by &lt;a href=&quot;https://twitter.com/carverstephen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stephen Carver&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Stephen Carver&quot; src=&quot;/img/kotlinconf-2019/stephen-carver.jpg&quot; /&gt;&lt;/span&gt;
The second day was kicked off with another keynote given by Stephen Carver, Senior Lecturer, consultant and speaker in Change and Crisis Management at Cranfield University School of Management.
One of the topics of the keynote was risk management and Stephen started talking about NASA.&lt;/p&gt;

&lt;p&gt;In 2003 there was the accident with the Space Shuttle Columbia exploding during atmospheric entry causing the death of all seven crew members.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-1-1986-accident.jpg&quot; alt=&quot;1986 accident&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another similar accident happened in 1986 with the Space Shuttle Challenger.
NASA knew this would happen beforehand.
They knew about this and let this happen instead of dealing with the change culture, causing human lives to be lost needlessly.
People just didn’t listen.
It is the fault of the culture and the system.&lt;/p&gt;

&lt;p&gt;Stephen said that stories are vital for leaders and that a story expresses how and why life changes and how it can be.
He mentioned the following quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I believe that this nation should commit itself to achieving the goal, 
before this decade is out, of landing a man on the Moon and returning him safely to Earth. - John F. Kennedy, May 25, 1961&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“By the close of this decade”, quite an ambitious target.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-2-russians.jpg&quot; alt=&quot;Russians in space&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stephen went over the space progress of the Soviet Union and how the space race came to be between them and the Unites States.
The Soviet Union launched the Sputnik 1 into space, the first satellite.
There was Laika, the first dog that made it to space in the Sputnik 2.
We had Yuri Alekseyevich Gagarin, the first human to make it into outer space and Valentina Tereshkova, the first woman in outer space.
And finally there was Alexei Leonov who was the first human to do a spacewalk.&lt;/p&gt;

&lt;p&gt;Next up was the Moon landing of the Apollo 11 and the importance of planting the US flag by Neil Armstrong and Buzz Aldrin.
Stephen also mentioned the Apollo 13 movie and he recommended watching it some time.
He showed a clip of the energy drain part and that they needed to conserve maximum energy in order for the crew to make it safely back to Earth.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Tid44iy6Rjs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Failure is not an option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More Moon landings followed and to put it in a blunt way, people were getting bored.
So what was supposed to be the next thing…? 
Commercial spaceflights, only this time the cost would need the same considerations as weight safety and performance.&lt;/p&gt;

&lt;p&gt;However, NASA was getting old. 
There was too much management, too little leadership, silos, politics and management by fear.
With the Space Shuttle Columbia, it was about getting the weight of three times the Statue of Liberty into space with all the fuel needed.&lt;/p&gt;

&lt;p&gt;The solid rocket boosters, also called “white tubes”, were responsible for granting the space shuttle enough trust during the first few minutes of flight.
However they were always very fragile seeing as about one out of 20 explode during launch.
They were made in Utah and they had to go to Cape Canaveral.
Each one of them was about 40 stories high so moving them was quite challenging as they had to be moved in pieces.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-3-roger-boisjoly.jpg&quot; alt=&quot;Roger Boisjoly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In 1981, the first Space Shuttle Columbia was launched.
Given the odds, NASA got very lucky.&lt;/p&gt;

&lt;p&gt;Flights continued until 1986 when the temperature was very low, about 25ºF (-4ºC).
Icicles were actually hanging off the Space Shuttle Challenger the day before the fateful launch.&lt;/p&gt;

&lt;p&gt;Months before the launch, Roger Boisjoly, an American mechanical engineer, raised his concerns and objections to not have a launch in low temperatures like this as the O-rings on the rocket boosters would fail.
The management had no ears to this and Boisjoly remained ignored.&lt;/p&gt;

&lt;p&gt;After the flight got confirmed for the 28th of January 1986, Boisjoly and his colleagues tried to stop the flight.
This was discussed with Morton-Thiokol managers who agreed that the issue was serious enough and NASA got called.
NASA went crazy and told them to prove it to them that it was going to blow up.
In the end, NASA overruled their warnings and the flight continued.&lt;/p&gt;

&lt;p&gt;It was clear beforehand that the O-ring system was going to fail.
First O-ring failed upon ignition and a second one failed during throttle up.
Moments later the vehicle got disintegrated.
The crew actually survived the explosion as they were in a separate crew compartment, but they could not move and knew they would die by falling into the ocean at huge speed.&lt;/p&gt;

&lt;p&gt;In 1992, NASA got a new CEO, Daniel S. Goldin, who remained there until 2001.
With his “faster, better, cheaper” approach he wanted NASA to continue delivering a wide variety of aerospace programs with costs being cut.
He got told it was going to impact on safety but he did not believe it and replied that it was nonsense.&lt;/p&gt;

&lt;p&gt;In 2003 there was the Space Shuttle Columbia Disaster.
During the launch, a piece of foam insulation broke off from the external tank and struck the left wing of the orbiter, breaking off multiple tiles.
NASA managers were aware that this happened but didn’t inspect the damage nor did they inform the crew as they thought that the foam could not have caused a lot of damage.
Some engineers suspected that the damage was more serious.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We did not believe pictures would be useful to us, we felt that we could have done nothing anyway so we decided not to even take them. - Ron Dittemore&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://www.nasa.gov/columbia/caib/html/VOL2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CAIB Report Appendix D.13&lt;/a&gt; a rescue mission was challenging but entirely feasible to save the crew.
However, NASA had the Columbia return to Earth and as it re-entered the atmosphere, the damage done to the left wing caused hot atmospheric gases to penetrate the heat shield and destroy the internal wing structure.
This caused the spacecraft to become unstable and break apart, killing the crew of seven.&lt;/p&gt;

&lt;p&gt;In 2011 the shuttle program got shut down because the software programs got unreliable and the programmers that made it during the 60’s were either retired or dead.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-4-gene-kranz-vision.jpg&quot; alt=&quot;Gene Kranz vision&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stephen started talking about Elon Musk and his SpaceX company that got founded in 2002.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-5-elon.jpg&quot; alt=&quot;Elon Musk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What was remarkable was Musk’s persistence and the way he sets his mind on things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Failure is an option here.
If things are not failing you are not innovating enough. - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He even had a small video made of all the different failures they had.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bvim4rsNHkQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;During an &lt;a href=&quot;https://www.youtube.com/watch?v=CyGqMZQAMio&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;interview with Musk&lt;/a&gt;, 
the interviewer mentioned that Musk received criticism from Neil Armstrong and Eugene Cernan.
Both of them were heroes to him so it was a painful thing for him to hear them say.
He would invite them over to come visit him to see how work was done at SpaceX.&lt;/p&gt;

&lt;p&gt;Musk’s successes came one after the other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;April 2016: &lt;a href=&quot;https://www.youtube.com/watch?v=sYmQQn_ZSys&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;First stage landing on a drone ship&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Feb 2018: &lt;a href=&quot;https://www.youtube.com/watch?v=A0FZIwabctw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shooting a Tesla Roadster into Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stephen asked the audience who had heard about Blue Origin.
About 10% of the people in the room raised their hands.
This is obviously the space company of Jeff Bezos.
Stephen explained that Bezos puts about $1 billion of personal budget each year into Blue Origin and that giving anything of it away during his divorce was out of the question for him.&lt;/p&gt;

&lt;p&gt;With Musk and Bezos, we now have a second space race happening.
Two of the richest men of the world, racing to the Moon by 2024.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-6-takeaway.jpg&quot; alt=&quot;Takeaway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To conclude, Stephen asked the audience who would have joined the last successful flight of the space shuttle in 2011 if they were given a ticket for it.
About 5% of the people raised their hands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of you are mad… and it’s not necessarily the 5% that raised their hands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last thing Stephen wanted to give us was the importance of trusting your own intuition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the trouble is, if you don’t risk anything, you risk even more. - Erica Jong&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All in all, a very strong keynote to start the second day of the conference.
We loved it!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/E4F0YU8Jd5g?start=415&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-state-of-kotlin-support-in-spring-by-sebastien-deleuze&quot;&gt;The state of Kotlin support in Spring by &lt;a href=&quot;https://twitter.com/sdeleuze&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sebastien Deleuze&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Sébastien Deleuze&quot; src=&quot;/img/kotlinconf-2019/sebastian-deleuze.jpg&quot; /&gt;&lt;/span&gt;
Big kudos for Sébastien Deleuze for thinking about the environment.
He took a train from France to Copenhagen to lower his CO2 emissions.
Even though his train got hit by a boar, he still managed to give us an update about the current state of Kotlin support in the Spring ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_train.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-kotlin-for-spring&quot;&gt;Why Kotlin for Spring?&lt;/h3&gt;
&lt;p&gt;Sébastien explained that Kotlin has less noise than Java.
It gets to the point a lot better and has better (null-)safety.
He also considers Kotlin to be more fun in general.
Kotlin also has a lot of traction in the Android ecosystem, which might end up influencing and changing the server world.&lt;/p&gt;

&lt;h3 id=&quot;spring-️-kotlin&quot;&gt;Spring ♥️ Kotlin&lt;/h3&gt;
&lt;p&gt;Starting from Spring 5.2, all the Spring Framework reference documentation now has Kotlin code examples.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_documentation_status.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new examples are no simple cut and paste from Java but also take into account the Kotlin idioms and DSLs.
Extending the reference documentation for Spring Boot and Spring Security are estimated for next year.
The Spring Data documentation might take a little longer as it is a rather big project.&lt;/p&gt;

&lt;p&gt;Since a few months, the &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializer&lt;/a&gt; project also supports Gradle with Kotlin &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DSL&lt;/a&gt;.
Kotlin allows for nice DSLs which gets reflected in the number of new DSLs in Spring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MockMVC DSL by &lt;a href=&quot;https://twitter.com/checketts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clint Checketts&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jbnizet&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JB Nizet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Contract DSL by &lt;a href=&quot;https://twitter.com/tysewyn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tim Ysewyn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-security-kotlin-dsl&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Security DSL&lt;/a&gt; by &lt;a href=&quot;https://github.com/eleftherias&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eleftheria Stein&lt;/a&gt;.
It is developed by the Spring Security team but still experimental.
This will be shipped with the Spring Security library somewhere next year.&lt;/li&gt;
  &lt;li&gt;Spring MVC DSL and functional API.
The Router DSL is now available for both Spring MVC and Spring WebFlux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A quick example of this last bullet point.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoutesConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The routes can be created dynamically, which means that routes can be constructed from data.
This is handy for webshops or CMS applications in general.
The overall Kotlin DSLs’ status is shown in the following picture:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-dsl-status.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;coroutines&quot;&gt;Coroutines&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_coroutines.jpg&quot; alt=&quot;Coroutines&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sébastien stated that coroutines allow consuming the Spring Reactive stack with a nice balance between imperative and declarative style.
Coroutines are a new way to consume the reactive stack and have following characteristics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Operations are sequential by default&lt;/li&gt;
  &lt;li&gt;Concurrency is explicit&lt;/li&gt;
  &lt;li&gt;Three Building blocks:
    &lt;ul&gt;
      &lt;li&gt;Suspending functions are the most important concept and can be used when performing blocking calls such as accessing a database.
  This is an example of what it would look like:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;someExpensiveBlockingCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Structured concurrency provides building blocks like coroutines scope which define asynchronous boundaries.
  This is important because it allows to define behaviour for when an error occurs in one of the asynchronous tasks.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flow&lt;/a&gt;
  is the coroutines equivalent of Flux in the Reactor world.
  It is interoperable with Reactive Streams and has support for back pressure.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;There is now support for loading &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s from properties without using &lt;code class=&quot;highlighter-rouge&quot;&gt;lateinit&lt;/code&gt;.
This means the following code:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can now be re-written using &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConstructorBinding&lt;/code&gt; as:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConstructorBinding&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kofu-the-mother-of-all-dsls&quot;&gt;Kofu: the mother of all DSLs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-fu/tree/master/kofu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kofu&lt;/a&gt; is an experimental DSL that allows to define the Spring Boot application configuration.
Traditional Spring Boot performs a classpath scan and enables some libraries conditionally (such as Jackson).
With Kofu DSL, this is not the case, which allows for a more fine-grained setup.
Kofu also allows for a faster application startup and less memory consumption.
As it is still experimental, it should not be used in production yet.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Ij9guIZ-vBY?start=4210&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-kotlin-for-data-science-by-roman-belov&quot;&gt;Using Kotlin for Data Science by &lt;a href=&quot;https://twitter.com/volebamor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Roman Belov&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Roman Belov&quot; src=&quot;/img/kotlinconf-2019/roman_belov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;While Kotlin is traditionally used for server-side development and Android development, it can also be used to do data science related projects.
In this talk, Roman Belov demonstrates what libraries and tools we can use to do data science with Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;tools-and-frameworks&quot;&gt;Tools and frameworks&lt;/h3&gt;
&lt;p&gt;One of the most popular data science tools is &lt;a href=&quot;https://jupyter.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jupyter&lt;/a&gt;.
Jupyter notebooks are a popular data science tool that allows to easily share code and the resulting output with third parties.
It also serves as an interactive shell that allows you to write code and print the output (text, graphs, …) directly underneath it.
Jupyter can already be used for Python, R and Scala, and recently Kotlin kernel has been created for this as well.&lt;/p&gt;

&lt;p&gt;Roman also shows the integration of Kotlin with &lt;a href=&quot;https://spark.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Spark&lt;/a&gt;, a popular framework for analyzing big data.
It is usually used with Scala or Python, but can also be used with Kotlin.
He goes on to demonstrate Spark on &lt;a href=&quot;https://zeppelin.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Zeppelin&lt;/a&gt; (a notebook like Jupyter) as well, for which he wrote a Kotlin interpreter.
It is also possible to connect to a Zeppelin server in IntelliJ and do most of the things in your favourite IDE instead of on the web-based notebook.&lt;/p&gt;

&lt;h3 id=&quot;libraries&quot;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;Roman demoed the Kotlin Jupyter implementation by using some interesting libraries such as let’s plot and Krangl.
Let’s-plot is a library for plotting statistical data.
Krangl is used for data wrangling, inspired by the popular dplyr package in R.&lt;/p&gt;

&lt;p&gt;Another interesting library in data science is Numpy, used in the Python language.
Roman created a library called Kotlin Numpy, a wrapper for the Numpy library.
Kotlin Numpy has a couple of advantages over Numpy, such as better performance and type safety.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Kotlin is a general-purpose language, and can thus be used for data science purposes as well.
Quite a few interesting libraries have been created by now and are being developed further,
making it an interesting alternative for the mainstream data science languages such as Python, Scala and R.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Pf6PG26gM2Y?start=4054&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-new-in-java-19-the-end-of-kotlin-by-jake-wharton&quot;&gt;What’s new in Java 19: The end of Kotlin? by &lt;a href=&quot;https://twitter.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jake Wharton&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Jake Wharton&quot; src=&quot;/img/kotlinconf-2019/jake-wharton.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A talk on KotlinConf where the title contains the words “the end of Kotlin” was bound to lure people in.
Jake Wharton takes a look into the future to see what features Java could have in 2022, which is when Java 19 will be released, and compare it with the current state of Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;variable-type-inference&quot;&gt;Variable Type Inference&lt;/h3&gt;
&lt;p&gt;Java 10 already has type inference for local variables although there are limitations to when you can replace the type with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.
Kotlin has no such limitations.&lt;/p&gt;

&lt;h3 id=&quot;local-functions&quot;&gt;Local functions&lt;/h3&gt;
&lt;p&gt;Moving on to features that aren’t there yet for Java.
In Kotlin you can put a function inside another function, called a local function.
This approach allows to reuse code that is only used in the wrapper function, making it clearer that it only belongs to this function.
Java will have a similar feature that will probably be in Java 15 or 16.&lt;/p&gt;

&lt;h3 id=&quot;multiline-strings&quot;&gt;Multiline Strings&lt;/h3&gt;
&lt;p&gt;Kotlin allows for multi-line strings with a few options (e.g. trim margin).
Multiline strings are currently available in Java 13 (experimental) but will probably be stable in 2020.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    |SELECT *
    |FROM users
    |WHERE name LIKE 'Jake %'
    |&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trimMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-based-classes&quot;&gt;Value based classes&lt;/h3&gt;
&lt;p&gt;Data classes are one of the best features in Kotlin.
However, records are coming to Java in the near future, which are similar to data classes in Kotlin.
Kotlin also has sealed classes, which can only be extended by classes defined in the same file.
Java will have these as well, and will have sealed interfaces on top of that.&lt;/p&gt;

&lt;h3 id=&quot;type-matching&quot;&gt;Type Matching&lt;/h3&gt;
&lt;p&gt;To check if a variable matches a certain type in Kotlin, you can use this:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kotlin also has a smart casting system, which automatically casts it to the type you checked for within the code block.
Java is getting a similar feature, but without smart casting.&lt;/p&gt;

&lt;h3 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h3&gt;
&lt;p&gt;Destructuring in Kotlin works as follows:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;alice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can extract the individual components of the class into local properties.
You can also use this in a for each loop (&lt;code class=&quot;highlighter-rouge&quot;&gt;for ((name, age)) in people { }&lt;/code&gt;) or on lambda arguments.&lt;/p&gt;

&lt;p&gt;Java will also support destructuring in the future, although its usage might be restricted.&lt;/p&gt;

&lt;h3 id=&quot;coroutines-1&quot;&gt;Coroutines&lt;/h3&gt;
&lt;p&gt;Coroutines are a great feature of Kotlin, allowing lightweight asynchronous tasks without starting up new threads.
Java might get a similar feature (virtual threads) in the distant future.
They will take blocking methods (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;) and turn them into asynchronous methods.&lt;/p&gt;

&lt;h3 id=&quot;the-end-of-kotlin&quot;&gt;The end of Kotlin?&lt;/h3&gt;
&lt;p&gt;While Java might catch up on some features in the future, Kotlin will also evolve in the meantime.
On top of that, there are currently no plans in Java to tackle nullability in Java, which is arguably one of the best features of Kotlin.
Kotlin also has first-class multi-platform support, which Java doesn’t have (and doesn’t plan to at this point).
Furthermore, VM changes and new Java APIs are also beneficial for Kotlin.
Finally, Kotlin has IDE support to migrate codebases progressively into Kotlin.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In 3 years, is this going to be the end of Kotlin? I don’t think so. - Jake Wharton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/E4F0YU8Jd5g?start=14765&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kotlin-in-space-by-maxim-mazin&quot;&gt;Kotlin in Space by &lt;a href=&quot;https://twitter.com/maximmazin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maxim Mazin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maxim Mazin&quot; src=&quot;/img/kotlinconf-2019/maxim-mazin.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;At the end of the first conference day, JetBrains announced their new collaboration tool, &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Space&lt;/a&gt;.
Maxim covered how they’ve been using the tool themselves at JetBrains.&lt;/p&gt;

&lt;p&gt;Space is actually full-stack Kotlin.
There is a shared Kotlin model: data models, view models, validations, RPC, utils and common libraries.
Basically everything besides the UI, as it was always an important factor to have it look native, and the storage is shared.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-in-space-1-clients-server-db.jpg&quot; alt=&quot;Clients, server, DB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;used-frameworks&quot;&gt;Used frameworks&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-in-space-2-used-libraries.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JetBrains/Exposed&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Exposed&lt;/a&gt; allows you to have type-safe SQL and ORM.
Initialize your database in an easy way and have it track your model to help you with migration scripts.
You define entities that map to tables, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;EUser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor&lt;/a&gt; provides asynchronous servers and clients.
It makes it easy to initialize and run a server from code.
You specify routes in a simple way based on a path and a &lt;code class=&quot;highlighter-rouge&quot;&gt;suspend&lt;/code&gt; code block.
There is also WebSocket support.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;onConnect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onMessage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onClose&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; are all implemented in a single flow thanks to Coroutines instead of having to implement separate methods.&lt;/p&gt;

&lt;h3 id=&quot;kotlin-full-stack&quot;&gt;Kotlin full-stack&lt;/h3&gt;
&lt;p&gt;Having a Kotlin full-stack architecture makes it easy to check for usages to find dead pieces of code.
Within Space there is an administrator playground API to play around with things.
OpenAPI (Swagger) JSON is generated in case you want to use something else other than Kotlin.&lt;/p&gt;

&lt;p&gt;JetBrains has a GitHub repository &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;kotlin-wrapper&lt;/a&gt; that contains a bunch of Kotlin wrapper for popular JavaScript frameworks.
&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-styled&lt;/code&gt; are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt;: inherit from components and implementing a render function.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-styled&lt;/code&gt;: a Kotlin DSL for styled components.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-css&lt;/code&gt;: offers type-safe CSS declarations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;In the backend, the only testing library used besides JUnit is &lt;a href=&quot;https://github.com/willowtreeapps/assertk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AssertK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the frontend, &lt;a href=&quot;https://airbnb.io/enzyme/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enzyme&lt;/a&gt; is used to test the React components. 
For UI tests, Selenium is used with &lt;a href=&quot;http://allure.qatools.ru&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Allure&lt;/a&gt; for reports with screenshot support in case a test failed.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Pf6PG26gM2Y?start=13974&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-native-how-i-used-kotlin-native-to-port-6-years-of-android-game-code-to-ios-in-6-months-by-ana-redmond&quot;&gt;Going Native: How I used Kotlin Native to Port 6 years of Android Game Code to iOS in 6 months by &lt;a href=&quot;https://twitter.com/anaredmond&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ana Redmond&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Jake Wharton&quot; src=&quot;/img/kotlinconf-2019/ana-redmond.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ana Redmond of Infinut presented us with a really nice feel good story about how she made her Android games available for iOS.
She noticed her daughters’ faces when they came home with another math assignment.
Needless to say, it wasn’t the most happy face.
She noticed her kids were trying to memorize the rules instead of really grasping the material.
That’s when she realized she could make small games so her kids would not only learn maths better but also enjoy the process.&lt;/p&gt;

&lt;p&gt;She created a vast library of over 60 educational games and 120+ lessons for Android devices over a period of six years.
Many kids were learning math and enjoying it.
Unfortunately, the many kids who use an iPad were left out without access to the material she brought to the Android platform.
So when Ana heard about Kotlin/Native she decided the time was right to serve those kids as well!&lt;/p&gt;

&lt;p&gt;Kotlin/Native is used to compile Kotlin code to platforms where virtual machines are not desirable or possible,
such as iOS.
In order to write the individual games once for both platforms, 
she needed a common interface for the platform specific APIs for drawing on the screen and for playing sound.
Luckily, both platforms had very similar APIs for drawing 2D images.
The games are then written purely in Kotlin making use of these interfaces.
To keep the native experience on both platforms, a few screens, such as the login screen, are still developed using their native platform.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/going_native_1_architecture.jpg&quot; alt=&quot;Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering “Why did she go through all the trouble to create a multi-platform 2D game engine from scratch when there are many alternatives available?”.
Well, you’re lucky.
She already addressed this before we had the chance to ask!&lt;/p&gt;

&lt;p&gt;There were two big reasons why she did not opt for the Unity game engine, which is an industry standard for making small-scale, multi-platform games.
The first reason is that the games would drain much more battery on their target devices.
Teachers who employ tablets with these educational games in the classroom were very happy to hear that Infinut’s math games are much more battery-efficient.
Another reason is that while Unity is great for rapidly building a game, it is not as easy to build a library of games with shared codebases.
The fruits of her labor proved successful as she was able to port her 60+ Android games to iOS using 80% shared code!&lt;/p&gt;

&lt;p&gt;There are two ways how Ana used shared code for leveraging platform specific APIs.
One way is to make an interface in Kotlin/Native and implement it separately for each platform.
The preferred way is to make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;actual&lt;/code&gt; to call the native APIs from Kotlin.
This way you don’t need to write a wrapper for functionality that is already supported.
This method was used for implementing drawing images, playing sound, fonts and transformations.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/going_native_2_two_ways.jpg&quot; alt=&quot;Two ways of sharing code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the back button works differently in Android and iOS, she had to fall back on using an interface.
The back button exits the game and returns to the &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; in Android or the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; in iOS to clear everything up.
In the code of her game she then just has to write &lt;code class=&quot;highlighter-rouge&quot;&gt;gameplayer.back()&lt;/code&gt; which will call the correct implementation depending on the platform.
She then stumbled on memory leaks in iOS because of a cyclic reference.
This was easily solved using a weak reference.&lt;/p&gt;

&lt;p&gt;In the process of porting her 60+ games to Kotlin she learned some valuable lessons.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Don’t use mutable objects&lt;br /&gt;
Using a mutable Singleton, like the &lt;code class=&quot;highlighter-rouge&quot;&gt;SoundManager&lt;/code&gt; from the example, led to threading issues as only immutable objects can be shared among threads.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;&lt;br /&gt;
This is because the &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; in Swift works like a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;.
So wherever Kotlin code is called from Swift code, it’s better to use &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; instead.&lt;/li&gt;
  &lt;li&gt;Initialization order&lt;br /&gt;
Something strange happens with parent-child classes where the parent uses a function to initialize the child in an &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; block which the child overrides and sets a property of the child class.
Ana discovered a situation where a property is overridden as expected in Android but not on iOS.
This was caused by the initializations of the child class being run in a different order.
She recommends not creating child classes this way and to just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; blocks for initialization.
Because she already had a lot of code written in the above way, she opted to just move the property from the child class to the parent class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More details can be found on her &lt;a href=&quot;https://medium.com/@anaredmond/cross-platform-game-1-of-afbb8b16c3f7&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;12-part Medium blog post series&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/nfb6lDnvtKQ?start=13945&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h1&gt;
&lt;p&gt;There was a good variety of interesting talks to choose from.
The first keynote gave a nice overview of the current status of Kotlin whereas the second keynote really got you pumped for the second day of the conference.
Noticeable was how much focus was spent on providing healthy food options and snacks.
Bella Center Copenhagen was a beautiful venue to host the conference at.
It was roomy enough for all the participants and it was convenient having a hotel room in there.&lt;/p&gt;

&lt;p&gt;All in all, we had a great time and picked up quite some things.
Definitely worth another visit!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/collage-2.jpg&quot; alt=&quot;KotlinConf photo collage #2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinconf.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KotlinConf website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv5WcWNIDrw&amp;amp;list=PLQ176FUIyIUY6SKGl3Cj9yeYibBuRr3Hl&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KotlinConf 2019 YouTube playlist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;De Turck&quot;, &quot;twitter&quot;=&gt;&quot;YannickDeTurck&quot;, &quot;linkedin&quot;=&gt;&quot;yannickdeturck&quot;, &quot;github&quot;=&gt;&quot;yannickdeturck&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-de-turck/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-de-turck.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead JVM Languages&quot;, &quot;email&quot;=&gt;&quot;Yannick.DeTurck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yannick is a senior Java consultant and practice manager at Ordina Belgium. He's passionate about everything Java and Spring related as well as reactive programming, Kotlin, Lightbend technologies, software architectures, and coaching and enabling other colleagues.&quot;}</name><email>Yannick.DeTurck@ordina.be</email></author><category term="Conference" /><category term="KotlinConf" /><category term="Kotlin" /><category term="Android" /><category term="Coroutines" /><category term="Conference" /><category term="Serverless" /><summary type="html">KotlinConf is thé conference to visit if you’re into Kotlin development. JetBrains introduced KotlinConf in 2017 in San Francisco with over 1.200 participants and 50 speakers. In 2018 it took place in Amsterdam with over 1.300 participants and 60 speakers. This year the conference was hosted in Denmark’s Copenhagen at the Bella Center, Scandinavia’s largest conference center. Five colleagues of Ordina Belgium’s JWorks unit were very enthusiastic to attend the conference for the first time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kotlinconf-2019/kotlinconf-2019.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/kotlinconf-2019/kotlinconf-2019.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Our Devoxx Demo App with realtime object detection</title><link href="https://ordina-jworks.github.io/machine%20learning/2019/12/16/Our-Devoxx-Demo-App.html" rel="alternate" type="text/html" title="Our Devoxx Demo App with realtime object detection" /><published>2019-12-16T00:00:00+00:00</published><updated>2019-12-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2019/12/16/Our-Devoxx-Demo-App</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2019/12/16/Our-Devoxx-Demo-App.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Like every year we were present with Ordina at Devoxx as a sponsor.
For this edition I had prepared a demo application with realtime object detection.
Our demo was a huge success and is the reason I’m writing this blog post.&lt;/p&gt;

&lt;p&gt;In this blog post I’ll explain how to get everything set up to make your own application that uses realtime object detection!
All code is available online on our &lt;a href=&quot;https://github.com/ordina-jworks/devoxx-webcam-ml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ordina-jworks Github&lt;/a&gt; and contains a number of branches with specific implementations.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Before we dive into the actual code, I’ll explain what technologies I’ve used and how they all come together to form this demo application.&lt;/p&gt;

&lt;p&gt;The demo uses the following technologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Electron: &lt;br /&gt;
This serves as the multi-platform app container which allows us to write what is essentially a web application, and run it on a variety of operating systems.&lt;/li&gt;
  &lt;li&gt;TensorFlow.js: &lt;br /&gt;
This is the machine learning library used to run the model for object detection.&lt;/li&gt;
  &lt;li&gt;CoCo Dataset: &lt;br /&gt;
Stands for &lt;code class=&quot;highlighter-rouge&quot;&gt;Common Objects in Context&lt;/code&gt; and is a very large, highly curated dataset of images which have been annotated with one or more of 90 classes.
    &lt;ul&gt;
      &lt;li&gt;CoCo-SSD: &lt;br /&gt;
A default implementation by TensorFlow itself utilizing an SSD detector (Single Shot MultiBox Detection).
I have downloaded the pre-trained model and it is included in the Github repo&lt;/li&gt;
      &lt;li&gt;YoLo V3: &lt;br /&gt;
Is an object detection system that looks at the whole image at test time and derives its predictions based on the global context of said image.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Node.js: &lt;br /&gt;
Needed for npm and building the demo app, Electron also provides the option to use bare Node code/packages in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;The demo app uses Electron as the main ‘framework’.
The setup for the application is pretty simple, there are just a few dependencies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;engines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=12.13.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@tensorflow/tfjs-node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.2.11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.6.4&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;electron&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;electron-packager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^14.0.6&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main entry point for the application is just under the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder of the root folder of the project.&lt;/p&gt;

&lt;p&gt;The bootstrapping code is also very simple:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;electron&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWindow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;webPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;nodeIntegration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//win.webContents.openDevTools();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/devoxx/site/index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We import the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserWindow&lt;/code&gt; and create a function that creates a new instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserWindow&lt;/code&gt; class.
This instance specifies the configuration for the Electron app.
We set the &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; and set the &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeIntegration&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; so we can use the file system from within the browser code.
We also tell the &lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserWindow&lt;/code&gt; instance to load a certain html resource.
Finally we bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; ready event to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserWindow&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Additionally for debugging it can be handy to uncomment the line &lt;code class=&quot;highlighter-rouge&quot;&gt;win.webContents.openDevTools();&lt;/code&gt; as that will open a Chrome DevTools window when the application launches.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-12-16-devoxx-demo/demo.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Devoxx Demo&quot;&gt;
        &lt;img alt=&quot;Devoxx Demo&quot; src=&quot;/img/2019-12-16-devoxx-demo/demo.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 55%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-12-16-devoxx-demo/devoxx-demo.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Devoxx Demo in action&quot;&gt;
        &lt;img alt=&quot;Devoxx Demo in action&quot; src=&quot;/img/2019-12-16-devoxx-demo/devoxx-demo.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 43%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;The basic code is not too difficult:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadCoco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../../../&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mediaDevices&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUserMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;frameRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;framerate&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onloadedmetadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;2d&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the page is loaded we create our detector instance.
This will be used to feed in the image data from the webcam.
We also need to fetch a video stream from the webcam, in this example at 720P, as that’s the max resolution for my webcam.
Please note that a higher resolution will require considerably more processing power.
After we have a stream, we fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;video&lt;/code&gt; tag from the page, assign the stream to it and let it play.
We also get our canvas in which we will display the actual video output, the video tag itself is hidden.
The canvas allows us to annotate the image with a bounding box and some extra information about the detected objects.
Finally we call the &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; method which will be called for each update.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detectedClasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anotateCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detectedClasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;updateList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detectedClasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableLiveUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;framerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;detector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This function will function as our update loop/tick.
We draw the image to the canvas, just as it was seen by the webcam.
We then pass the canvas into the detector which will detect any objects in the image data contained in the canvas.
This returns an array of detected classes which contain the type of objects, the score and a bounding box.
That information is fed to a utility method that will annotate the canvas with a red rectangle with the coordinates of the bounding and the type of object with its score.
The update function will be called again with a very basic (and very limited) framerate timeout.&lt;/p&gt;

&lt;p&gt;There is other code, mainly in the &lt;code class=&quot;highlighter-rouge&quot;&gt;coco&lt;/code&gt; folder which is mostly taken from the &lt;a href=&quot;https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;default google implementation&lt;/a&gt; and modified to match the needs of this application.
One thing worth noting is the changes required to a small piece of code to make the model work faster by allowing it to work asynchronously:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculateMaxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tidy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tensor2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonMaxSuppression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxNumBoxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Float32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Needs to be changed into:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculateMaxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tensor2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonMaxSuppressionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxNumBoxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tidy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Float32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;indexTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the &lt;code class=&quot;highlighter-rouge&quot;&gt;tf.image.nonMaxSuppressionAsync&lt;/code&gt;returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; the replacement is not as simple as just replacing the method call to the async variant.
This however is the only big change that needs to be done (apart from changing some dependencies) to get the application working with full WebGL acceleration.&lt;/p&gt;

&lt;p&gt;The application is actually really simple and very easy to understand and tinker with. I strongly encourage you to check out the repo and have a go at getting it up and running by yourself.
The other branches contain different solutions with some tweaked code, be sure to also check those out!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Making a cool demo that utilizes machine learning and pre-trained models is not at all that hard. 
Rapid prototyping with these pre-trained models allows one to quickly see if a certain strategy or desired functionality is workable and merits further development effort.
It also provides a way to get started easily in a matter that is extremely hard to master. 
Retraining or tweaking these models can be very hard and time consuming as it requires an in-depth knowledge of the matter at hand (both mathematics and the actual data).
Im my opinion these pre-trained models and other machine learning ‘building blocks’ provide an extremely valuable toolset for developers.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ordina-jworks/devoxx-webcam-ml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Demo Github repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TensorFlow.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cocodataset.org/#home&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CoCo Dataset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;tfjs-CoCo-SSD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pjreddie.com/darknet/yolo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YoLo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zqingr/tfjs-yolov3/blob/master/README_EN.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;tfjs-YoLo-V3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his role as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="Machine Learning" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="Home" /><category term="AI" /><category term="ML" /><category term="Computer vision" /><category term="object detection" /><category term="electron" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-12-16-devoxx-demo/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-12-16-devoxx-demo/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS Dev Day 2019</title><link href="https://ordina-jworks.github.io/conference/2019/11/29/AWS-Dev-Day-2019.html" rel="alternate" type="text/html" title="AWS Dev Day 2019" /><published>2019-11-29T00:00:00+00:00</published><updated>2019-11-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/11/29/AWS-Dev-Day-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/11/29/AWS-Dev-Day-2019.html">&lt;h1 id=&quot;awsome-dev-day-2019&quot;&gt;AWSome Dev Day 2019!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;The AWS Dev Day is a free conference day hosted by Amazon where architects and developers from Amazon and other companies talk about the most popular AWS services, the newest features and everything related to cloud development. These sessions explain a lot about what AWS has to offer and you will see live demos on how you can implement them in your own use cases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Amazon held their Belgian Dev Day in Mechelen this year. This was very convenient for us as the Ordina Belgium HQ is also located in Mechelen. This means that there was a very good reason for Ordina consultants to attend the event. We went with a small group of 8 people to make sure we didn’t miss the latest AWS news. We were treated with delicious food &amp;amp; drinks throughout the day to make sure their guests were happy.&lt;/p&gt;

&lt;h1 id=&quot;cicd-for-modern-applications-by-sébastien-stormacq&quot;&gt;CI/CD for Modern Applications by &lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sébastien Stormacq&lt;/a&gt;&lt;/h1&gt;

&lt;h3 id=&quot;iac&quot;&gt;IAC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Sébastien Stormacq&quot; src=&quot;/img/AWS-Dev-Day-2019/sebastien-stormacq.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an application development environment, it is important to maintain your Infrastructure as Code (IaC) to allow for repeatability, and doing so in a declarative way.
Doing it in an imperative way does not allow for deltas and requires your system to be rebuilt from scratch every time your pipeline gets triggered, which results in worse impact for your end users.&lt;/p&gt;

&lt;p&gt;There are a number of ways to provide your infrastructure as a code declaratively.
We have Terraform, CloudFormation, etc. But Amazon has a new kid on the block since this year: the &lt;a href=&quot;https://aws.amazon.com/cdk/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cloud Development Kit (CDK)&lt;/a&gt;.
This allows developers to provide your infrastructure in their favorite programming language.
You can communicate with AWS in a way other than the AWS CLI or the Web Console, as you can now create services as you need them and when you need them.&lt;/p&gt;

&lt;p&gt;All of this gives you the best toolkit to NOT create snowflake servers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A snowflake server is a server that requires additional configuration in its environment that is often done manually. These are configuration steps that are done after the automatic pipeline process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The CDK also has a CLI which can be installed by running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g aws-cdk&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pipeline&quot;&gt;Pipeline&lt;/h3&gt;
&lt;p&gt;Amazon’s pipeline service is called &lt;a href=&quot;https://aws.amazon.com/codepipeline/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CodePipeline&lt;/a&gt;.
This service allows you to create a pipeline which executes all the necessary steps to automate your releases and to provide infrastructure updates.
This allows you to quickly provide new releases and deliver new features to your end users.
You can integrate this service with other external services (ex. GitHub, where your repository is hosted).&lt;/p&gt;

&lt;p&gt;To effectively build your application, you can make use of &lt;a href=&quot;https://aws.amazon.com/codebuild/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CodeBuild&lt;/a&gt;. This is their continuous integration service that packages your application by building it and running the tests. Pricing is very effective, as you will only pay by the minute when you trigger a build. CodeBuild automatically scales and can process multiple builds at the same time, so you won’t have to deal with build queues.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;CI/CD&quot; src=&quot;/img/AWS-Dev-Day-2019/cicd.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;deploy&quot;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/codedeploy/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CodeDeploy&lt;/a&gt; is a deployment service which basically allows you to deploy (almost) anywhere, including (but not limited to) on-premise servers. This service makes it easier to provide updates to your end users and to avoid downtime during the rollout of a new update.&lt;/p&gt;

&lt;p&gt;One of the most impressive features is the Blue/Green deployment. This splits the traffic going to your application into traffic to your original environment and the new environment. The best use case for this would be during a new production release. You have a new release that you want to deploy? Simply let 10% of your traffic go to that release to make sure everything works right. After monitoring the release, you can choose to either revert or to fully allow traffic to go to the newest release.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Amazon provides a lot of tools that help you manage your builds and deploys, making sure that everything works according to plan. We are definitely fans of their new Cloud Development Kit and their Blue/Green deployment option is able to stabilize and fully control the rollout of a new deployment.&lt;/p&gt;

&lt;h1 id=&quot;integrate-your-front-end-apps-with-serverless-backend-in-the-cloud-by-sébastien-stormacq&quot;&gt;Integrate your front end apps with serverless backend in the cloud by &lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sébastien Stormacq&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Sébastien Stormacq&quot; src=&quot;/img/AWS-Dev-Day-2019/sebastien-stormacq-2.png&quot; style=&quot;max-width: 200px; max-height: 200px;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;
Serverless is a big trend nowadays and rightfully so as it takes away a lot of operational work from you! The biggest pros of serverless are that you no longer need to provision or manage your own servers, it automatically scales with usage, it has built in fault tolerance and fallback methods and last but not least, you only pay for the actual usage. This means that if you are not using your lambda, you are not paying for it!&lt;/p&gt;

&lt;p&gt;Sebastian filled the session mostly with a demo in which he built a React app to communicate with his lambdas.&lt;/p&gt;

&lt;p&gt;To provide his infrastructure (auth, GraphQL API etc.), he used the &lt;a href=&quot;https://github.com/aws-amplify/amplify-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Amplify CLI&lt;/a&gt; which is a new CLI tool that can add cloud features to your web or mobile application. For example, by simply typing &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify add auth&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify push&lt;/code&gt;, you have created your own user authentication provider (Cognito). If you want to set up a GraphQL API (AWS AppSync), you just have to type &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify add api&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify push&lt;/code&gt;. This creates an API and stores its data on a DynamoDB database.&lt;/p&gt;

&lt;p&gt;To finally deploy his application, he simply used an S3 bucket that acts as a web server.
After all, React just builds static HTML / CSS / JS files which need a web server (Nginx, Apache) in order to be displayed.
Using an S3 bucket is very cost effective and doesn’t require anything else other than a bucket and correct bucket configuration.
So no Linux configuration, load balancer setup &amp;amp; costs, ….
By using &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify add hosting&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;amplify publish&lt;/code&gt;, these steps are automatically done and it doesn’t require us to do anything else.
You can also enable production mode, which enables AWS CloudFront integration to send your website to edge locations, so you can provide faster loading times to your users from all over the world.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Amplify seems like a really handy CLI tool if you enjoy working with AWS. The commands are very similar to each other, and really simplifies deploying your application or integrating your application with AWS components. A new feature that has been introduced to Amplify is Predictions, which provides a solution for Artificial Intelligence &amp;amp; Machine Learning cloud services to let your application make use of. Overall, the future for Amplify is very bright and I can see it growing more as more developers adopt it in their current workflow. After all, who doesn’t like to just type one command and everything is taken care of?&lt;/p&gt;

&lt;h1 id=&quot;breaking-the-monolith-road-to-containerizing-your-app-by-juan-lage&quot;&gt;Breaking the Monolith: road to containerizing your app by &lt;a href=&quot;https://twitter.com/juanlage&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Juan Lage&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/juanlage&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Juan Lage&quot; src=&quot;/img/AWS-Dev-Day-2019/juan-lage.jpeg&quot; style=&quot;max-width: 200px; max-height: 200px;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;
A monolith is basically one big application that handles everything that your project needs to do. From security to having all your services in one package. This is simple, has no over-engineering (on the architecture part), faster communication as everything happens in-memory and you have one code base. BUT, monoliths grow old as well, and the older it gets, the more code it has. They scale pretty poorly and are tightly coupled systems. Your developers are also required to learn more business logic and your deployments are all or nothing, meaning that, if your application goes down, your whole infrastructure is down, which isn’t interesting for an application where a lot of people depend on it.&lt;/p&gt;

&lt;p&gt;Dividing your monolith into a microservice architecture improves your workflow by splitting up your team to work on each microservice. This also helps your architecture in a way that each microservice has their own single responsibility. However, splitting a monolith is not a simple task and requires a lot of work to make sure you split it up the right way.&lt;/p&gt;

&lt;p&gt;Once you have your microservices, the goal is to containerize each service.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/AWS-Dev-Day-2019/aws-fargate.png&quot; style=&quot;max-width: 100px; max-height: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;fargate&quot;&gt;Fargate&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/fargate/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fargate&lt;/a&gt; is a service that helps you with this. It’s basically a serverless implementation for containers, meaning that it manages servers and clusters for you. Simply provision your container and Fargate does the rest for you by using Amazon ECS to provision your container on the cloud. It’s a really useful tool if you don’t want to manage your own server or cluster.&lt;/p&gt;

&lt;h3 id=&quot;code-base-config-dependencies-&quot;&gt;Code base, config, dependencies, …&lt;/h3&gt;
&lt;p&gt;The rest of the session was a very interesting take on how you actually can split up your monolith into microservices. It’s useful to have multiple code bases per service with their own deploy pipeline to deploy to your environments.&lt;/p&gt;

&lt;p&gt;It’s also a good practice to isolate your application from your dependencies. You should also explicitly say which dependencies you want and which version that you want. This helps you to build and create immutable images with explicitly defined dependencies, so you can run the same image in multiple environments.&lt;/p&gt;

&lt;p&gt;Your configuration is also very important in this. Configuration (database credentials, authentication keys, …) changes with each environment. If you hardcode those values, you will never be able to create an immutable image. It is important to externalize your configuration by storing it in your environment or by using an external service that stores your configuration. &lt;a href=&quot;https://aws.amazon.com/secrets-manager/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Secrets Manager&lt;/a&gt; is a service where you can store sensitive configuration that your application can pull up when needed.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-2&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;He gave a lot more hints and associated AWS components that can help you achieve your goals in splitting up your monolith. Make sure that you take your time with this, as this is a very important factor in your project that needs to be done right. When done right, you will see an exponential rise in productivity and the addition of features and thus, making your end users happy with your service. AWS has a lot of services that can help you and you should take your time to get familiar with them.&lt;/p&gt;

&lt;h1 id=&quot;ending&quot;&gt;Ending&lt;/h1&gt;
&lt;p&gt;We ended the day with a Gouden Carolus, which is the most famous beer that is brewed in Mechelen. Overall, it was a very nice experience which I would love to attend again in the future. You get familiar with a lot of AWS components that you didn’t know before and they showcase a lot of services.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Conference" /><category term="AWS" /><category term="Cloud" /><category term="Conference" /><summary type="html">AWSome Dev Day 2019!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/AWS-Dev-Day-2019/aws-dev-day-2019-banner.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/AWS-Dev-Day-2019/aws-dev-day-2019-banner.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Agile And Reporting - 101</title><link href="https://ordina-jworks.github.io/agile/2019/11/25/agile-reporting.html" rel="alternate" type="text/html" title="Agile And Reporting - 101" /><published>2019-11-25T00:00:00+00:00</published><updated>2019-11-25T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/11/25/agile-reporting</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/11/25/agile-reporting.html">&lt;blockquote&gt;
  &lt;p&gt;Thoughts and ideas about reporting for agile projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#my-situation&quot;&gt;My situation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#context&quot;&gt;Context&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#forecasting&quot;&gt;Forecasting&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what&quot;&gt;What&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#throughput-forecasting&quot;&gt;Throughput Forecasting&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#metrics&quot;&gt;Metrics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#velocity&quot;&gt;Velocity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#team-happiness&quot;&gt;Team Happiness&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sprint-spread&quot;&gt;Sprint Spread&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cumulative-flow-diagram&quot;&gt;Cumulative Flow Diagram&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;h2 id=&quot;my-situation&quot;&gt;My situation&lt;/h2&gt;

&lt;p&gt;Three years ago, Ordina presented me the opportunity to start with a new team for a new project, as team lead.&lt;br /&gt;
Up until then, I was a programmer who participated in Scrum teams.&lt;br /&gt;
Of course, I accepted the proposition and at the time of writing this article, our project is entering its last phase and approaching the production deadline.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The Team&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-team.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over the course of these three years, I’ve learned a lot:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Managing a team&lt;/li&gt;
  &lt;li&gt;Coaching&lt;/li&gt;
  &lt;li&gt;Handling discussions&lt;/li&gt;
  &lt;li&gt;Making decisions&lt;/li&gt;
  &lt;li&gt;Reporting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the first four have been a challenge, the last one, reporting, remains a big challenge up to today.&lt;br /&gt;
Which is exactly why I’m writing this, in the hopes that someone might learn from it.&lt;/p&gt;

&lt;p&gt;Another reason why I’m writing this is because I’ve recently been to the eXperience Agile conference in Lisbon, Portugal.&lt;br /&gt;
I went to a talk of &lt;a href=&quot;http://docondev.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Doc Norton&lt;/a&gt; that was called &lt;a href=&quot;https://www.leanpub.com/escapevelocity&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Escape velocity&lt;/a&gt;. 
The talk was essentially about how and why velocity is incorrectly used as a forecasting and diagnostics tool.
The day after, I also followed his workshop about the subject and so you’ll see references to his talk throughout this blogpost.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;The project started as an agile project, so the whole Scrum framework was used. 
But in hindsight, there were a few problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It would replace an existing product.&lt;/li&gt;
  &lt;li&gt;It could not go into production until the functionalities of the old product were implemented.&lt;/li&gt;
  &lt;li&gt;It had an enormous backlog of around 2.500 story points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blocked a major feature of Scrum, being able to quickly release a product and gather valuable feedback from the end-users.&lt;br /&gt;
We estimated the entire backlog to give management a rough estimation, 1.5 years of work with five developers and two analysts.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;This is fine&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-this-is-fine.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now, for those reading this and having done such an estimation before, you know that the 1.5 years was probably wrong. 
And it was.&lt;br /&gt;
After about a year of development, we had to re-estimate the entire backlog which resulted in doubling the amount of story points to 5000. 
And right now, we’re at 6000.&lt;br /&gt;
The backlog keeps growing, which is normal as we continue to learn about the business and the requirements.&lt;/p&gt;

&lt;h1 id=&quot;forecasting&quot;&gt;Forecasting&lt;/h1&gt;

&lt;h2 id=&quot;what&quot;&gt;What&lt;/h2&gt;

&lt;p&gt;So during the course of the project, I’ve had to report the progress to management.&lt;br /&gt;
For this, I used the velocity of the team to generate a burnup chart so that they could see by what date we would arrive at the end. 
That’s called forecasting.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Timeline&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-timeline.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But there’s immediately a problem there, velocity is a &lt;strong&gt;lagging indicator&lt;/strong&gt;.&lt;br /&gt;
It shows long-term patterns and can confirm such patterns - for example every December, the velocity would drop due to team members going on holidays.
It is difficult to use velocity as a planning tool since you can’t see in the future. 
And it’s based on estimations of a backlog, which are subject to change.&lt;/p&gt;

&lt;p&gt;So the end date I had to report to management would typically move forward each meeting.&lt;br /&gt;
Needless to say, they weren’t happy with that. 
Every single time, I had to explain the fundamentals of Scrum, the backlog, refinements, story splitting, etc…&lt;/p&gt;

&lt;h2 id=&quot;throughput-forecasting&quot;&gt;Throughput Forecasting&lt;/h2&gt;

&lt;p&gt;A useful tool I learned with Doc Norton’s talk is the &lt;a href=&quot;https://github.com/FocusedObjective/FocusedObjective.Resources/raw/master/Spreadsheets/Throughput%20Forecaster.xlsx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;throughput forecasting tool&lt;/a&gt;.&lt;br /&gt;
It’s an Excel file where you can enter the following data:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The min/max backlog/feature size.&lt;/li&gt;
  &lt;li&gt;The % of story splitting (hard to calculate, not required).&lt;/li&gt;
  &lt;li&gt;The start date (typically today).&lt;/li&gt;
  &lt;li&gt;The duration of your sprints.&lt;/li&gt;
  &lt;li&gt;The min/max velocity.&lt;/li&gt;
  &lt;li&gt;With an estimate.&lt;/li&gt;
  &lt;li&gt;Or with actual data from your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tool then runs 500 simulations where it randomly picks numbers between the minimum and maximum you provided. 
Those simulations are then used to give you a probability chance of reaching a certain date.&lt;/p&gt;

&lt;p&gt;The past few meetings I’ve started to use this tool and it helped me to provide a better, probable end date of the features.&lt;/p&gt;

&lt;p&gt;Let’s take an example. 
In our backlog, we have three features waiting, a total of 150 story points. 
Now, you have to estimate how many sprints it would take to finish and by what date.&lt;/p&gt;

&lt;p&gt;Assume we start 01-01-2019 and work with sprints of two weeks. 
The past five velocities were 60, 55, 40, 45, 51, averaging in 50. Three sprints, great!&lt;br /&gt;
Estimated end date = 01-01-2019 + six weeks = 12-02-2019
Now, let’s put that in the tool.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Throughput Tool Input&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-throughput-input.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Throughput Tool Result&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-throughput-results.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So there’s a 55% probability that the features will be done in three sprints.&lt;br /&gt;
However, there’s a 100% probability that it will be done in four sprints. And that’s just for three features worth of 150 story points.&lt;/p&gt;

&lt;h1 id=&quot;metrics&quot;&gt;Metrics&lt;/h1&gt;

&lt;p&gt;During my role as team lead, I’ve also had to measure the performance and happiness of the team. 
To do so, it helps to have raw data to analyse.&lt;/p&gt;

&lt;h2 id=&quot;velocity&quot;&gt;Velocity&lt;/h2&gt;

&lt;p&gt;The tool we use for managing our scrum process is Jira. 
It contains various reports that can be generated based on your agile board.&lt;br /&gt;
But mostly,  I used the export to spreadsheet functionality.
This provided me with a spreadsheet file with all the raw data of the entire backlog in Jira.&lt;/p&gt;

&lt;p&gt;With that spreadsheet, it’s just a matter of using the various functions to analyse the data. 
This gave me results such as the image below.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Raw Velocity&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-velocity-raw.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also asked all team members to enter their hours per sprint in another spreadsheet. 
Which resulted in the following:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Hours Per Sprint&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-hours-input.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All that data can then be combined into a chart.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Velocity Chart&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-velocities-chart.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As always with velocity, it tells us what happened in the past. 
But what does the chart above tell us?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The story points done per sprint are rising.&lt;/li&gt;
  &lt;li&gt;The last 2 sprints, the team did a very good estimation as they reached or surpassed their forecasted story points.&lt;/li&gt;
  &lt;li&gt;The relative velocity (what the team could have done if everyone was present) is always much higher
    &lt;ul&gt;
      &lt;li&gt;This could for example indicate that team members are often absent, which explains the difference between the velocity and the relative velocity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What you do with this data is, as always, up to your team. 
It can for example help to determine the impact of certain decisions in the past.&lt;/p&gt;

&lt;h2 id=&quot;team-happiness&quot;&gt;Team Happiness&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Happy Team&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-team-happy.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For measuring the happiness of the team, I used five questions with a score of 1 (not great) - 5 (great) and used that data in another spreadsheet.&lt;br /&gt;
Every sprint, the team had to fill it in and I gathered the data.&lt;/p&gt;

&lt;p&gt;As with velocity, this is a lagging indicator so you can see what happened in the past, but it can’t predict the future.&lt;/p&gt;

&lt;p&gt;But it’s useful to see patterns.&lt;br /&gt;
For example, you can see happiness peaks in sprints where team activities were done. 
Difficult sprints create happiness lows, due to stress and pressure.&lt;/p&gt;

&lt;p&gt;The questions I used were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quality of meetings&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Did we have too many meetings? Not enough? Were the ones we had meaningful?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Team collaboration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;How did the team members work together? Were there any problems?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Correct focus&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Did the team focus on the correct backlog items? Or did they do useless items?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Team flexibility&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;How well did the team respond to change?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Velocity team&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Did the team achieve what they forecasted during the planning?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Created value&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Did the team have the feeling that they produced extra value?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you put all this data in a chart, it could look like the chart below for the last few sprints.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Short-term Team Happiness&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-happiness-short.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you use the last five sprints, it can help to locate problems in the team. 
The chart below shows that the team wasn’t happy about the achieved velocity. 
So it could help to find out why and avoid that problem in future sprints.&lt;/p&gt;

&lt;p&gt;If you do it for a longer period, it could look like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Long-term Team Happiness&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-happiness-long.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It shows that sprint 7 was a very bad sprint, together with 13.&lt;br /&gt;
The longer we worked together, the more stable the chart gets. 
Which is a normal evolution as everyone needs to get used to each other in the beginning.&lt;/p&gt;

&lt;h2 id=&quot;sprint-spread&quot;&gt;Sprint Spread&lt;/h2&gt;

&lt;p&gt;A chart that I started to use in the last few months is the spread of the various types of backlog items in sprints.&lt;br /&gt;
The extracted data from Jira can be used to filter on types and then combine it in a chart.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sprint Spread&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-sprint-spread.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What does the image above tell?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sprint 56
    &lt;ul&gt;
      &lt;li&gt;No bugs, but a lot of stories and a few tasks, as well as some stories that were rejected by the business&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprint 57
    &lt;ul&gt;
      &lt;li&gt;Quite a few bugs and stories, mixed with some tasks and few rejected stories&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprint 58
    &lt;ul&gt;
      &lt;li&gt;We did a lot of tasks due to a technical refactoring, with less stories and some bugs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;And so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I find this very interesting to report to management, as it clearly shows that the team did a lot of work, even if that doesn’t translate in raw velocity.&lt;/p&gt;

&lt;h2 id=&quot;cumulative-flow-diagram&quot;&gt;Cumulative Flow Diagram&lt;/h2&gt;

&lt;p&gt;During the workshop with Doc Norton in Lisbon, I also learned of the cumulative flow diagram.&lt;br /&gt;
This is a diagram that can be automatically generated in most Scrum tools, such as Jira.&lt;/p&gt;

&lt;p&gt;Unfortunately, I’ve not been able to generate a readable diagram for my project due to Jira malfunctioning, but for completeness, I will include it here as well.&lt;/p&gt;

&lt;p&gt;So, what does the diagram look like? (Information taken from &lt;a href=&quot;https://zepel.io/agile/reports/cumulative-flow-diagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Zepel&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Cumulative Flow Diagram Example&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-flow-example.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It basically shows you the process of an item from backlog to completed.&lt;br /&gt;
And more importantly, it can tell you when there are problems in that process. 
The image above shows lines that go up evenly, with no drastic changes.&lt;/p&gt;

&lt;p&gt;The image below however, shows that the development line is straightening out, which means no new stories are picked up for development from the backlog. 
This could be due to a number of reasons, such as impediments or unforeseen complexity and generates a bottleneck. 
This creates hiccups in the value flow, and a lower flow rate in the next statuses, such as QA and Deployed.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Blocking Cumulative Flow Diagram&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-flow-blocking.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The chart does not explain how to fix it, but it does tell that there’s a problem.
And so the Cumulative Flow Diagram is therefor a perfect tool for a scrum master to start a good discussion with the team, about flow, blockages and dependencies. 
Eventually this will most definitely lead to better flow management, more t-shaping, an optimized WIP limit… and a happier team!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Reporting in an agile environment remains difficult. 
There are a lot of possible options, but it always depends on your specific situation.&lt;br /&gt;
In more traditional, waterfall projects, reporting is a bit easier as everything should be known beforehand (although that produces other problems…).&lt;br /&gt;
In this blogpost, I have given some examples of metrics and tools that I use to report progress and performance of my project, which work for me.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Great Success&quot; src=&quot;/img/2019-11-20-agile-reporting/reporting-great-success.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As with all things agile, they might or might not work for your situation, but at the least, it might have given you some ideas!&lt;/strong&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wouter&quot;, &quot;last_name&quot;=&gt;&quot;Nivelle&quot;, &quot;permalink&quot;=&gt;&quot;/author/wouter-nivelle/&quot;, &quot;avatar&quot;=&gt;&quot;wouter-nivelle.jpg&quot;, &quot;title&quot;=&gt;&quot;Scrum Master&quot;, &quot;linkedin&quot;=&gt;&quot;wouter-nivelle-34a90b31&quot;, &quot;email&quot;=&gt;&quot;wouter.nivelle@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wouter is a Scrum Master at Ordina Belgium. Passionate about agile. Eager to share knowledge. Not afraid of challenges. Always interested in learning and discovering new things.&quot;}</name><email>wouter.nivelle@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="Reporting" /><summary type="html">Thoughts and ideas about reporting for agile projects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-11-20-agile-reporting/agile-reporting.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-11-20-agile-reporting/agile-reporting.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Devoxx Belgium 2019</title><link href="https://ordina-jworks.github.io/conference/2019/11/18/devoxx-2019.html" rel="alternate" type="text/html" title="Devoxx Belgium 2019" /><published>2019-11-18T00:00:00+00:00</published><updated>2019-11-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/11/18/devoxx-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/11/18/devoxx-2019.html">&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#keynotes&quot;&gt;Keynotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#talks&quot;&gt;Talks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Devoxx Belgium is a Java community conference in Antwerp, Belgium.
Every year in November it is organised and always has a great assortment of bleeding edge technology talks, methodology talks and architectual insights.&lt;/p&gt;

&lt;p&gt;During this edition, about 30 JWorks colleagues joined talks at Devoxx.
Ordina again had a very popular booth by providing attendees nachos, the venue is a cinema after all.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; alt=&quot;Ordina booth&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/booth.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;keynotes&quot;&gt;Keynotes&lt;/h2&gt;

&lt;h3 id=&quot;the-hitchhikers-guide-to-diversity-dont-panic&quot;&gt;The Hitchhiker’s Guide to Diversity (Don’t panic!)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/audrey_neveu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Audrey Neveu&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/audrey_neveu.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/audrey_neveu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Audrey Neveu&lt;/a&gt; gave this inspirational keynote.&lt;/p&gt;

&lt;p&gt;This talks, following the same format as the similarly titled book, provides a chapter by chapter overview of the struggles and issues with diversity in our industry and what steps our community can take to improve.
The key takeaway is to be at least aware of the issue and to try to be sensitive to undertones in jokes and messages towards all members of our community, especially as they might not seem harmful at first sight.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DSzDFZ0Ue1w&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;qualities-of-a-highly-effective-architect&quot;&gt;Qualities of a Highly Effective Architect&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/venkat_s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Venkat Subramaniam&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/venkat.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A typical &lt;a href=&quot;https://twitter.com/venkat_s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Venkat Subramaniam&lt;/a&gt; talk.
In a funny but straightforward way he explained the pitfalls, do’s and don’ts for architects.
He provided a 12 point guideline that all architects should adhere to.
‘Prototype beats any arguments’ and ‘Every technical decision should have an expiration label’ are just a few examples.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; alt=&quot;12 point guideline&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/venkat-12-points.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This talk is a definitely must-see as he provides his view on how architects should behave in an organisation with the usual portion of humor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QeKheNfO3Yg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;talks&quot;&gt;Talks&lt;/h2&gt;

&lt;h3 id=&quot;running-kafka-in-kubernetes-a-practical-guide&quot;&gt;Running Kafka in Kubernetes: a practical guide&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/katestanley91&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Kate Stanley&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/kate_stanley.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a talk by &lt;a href=&quot;https://twitter.com/katestanley91&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kate Stanley&lt;/a&gt; from IBM.
She works in the IBM Event Streams project.&lt;/p&gt;

&lt;p&gt;This talk provides a good overview of common pitfalls with setting up Kafka on a Kubernetes cluster.
Katherine introduces all basic concepts, so following this talk is possible without a ton of Kafka and Kubernetes knowledge.
She discusses how several Kubernetes constructs are used to support and enabled the usage of Kafka and Zookeeper.
Liveness and readiness probes, Stateful sets, Pod anti-affinity, Persistent volumes and headless services are all discussed.
Lastly Katherine discusses the different options for running and managing a Kafka cluster on Kubernetes.
Both the &lt;a href=&quot;https://github.com/IBM/charts/tree/master/stable/ibm-eventstreams-dev&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IBM Events Helm charts&lt;/a&gt; and the &lt;a href=&quot;https://strimzi.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Strimzi operator&lt;/a&gt; are shown and discussed.
Strimzi is an operator that allows Kafka cluster to be created and managed through CRDs in Kubernetes.&lt;/p&gt;

&lt;p&gt;She also provided us with some tips about what you need to monitor when running your Kafka cluster:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure to verify your brokers on the In Sync Replicas (ISR) &lt;a href=&quot;https://docs.confluent.io/current/kafka/monitoring.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;metrics&lt;/a&gt;, especially when doing rolling upgrades so you will not lose any data.&lt;/li&gt;
  &lt;li&gt;Verify that your Zookeeper instances have reached a quorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aO2pv8W6oZU&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;best-practices-to-spring-to-kubernetes-easier-and-faster&quot;&gt;Best Practices to Spring to Kubernetes Easier and Faster&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/saturnism&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Ray Tsang&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/ray_tsang.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/saturnism&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ray Tsang&lt;/a&gt; is a developer advocate for the Google Cloud Platform.
He is a Java Champion and works on improving the usability of GCP for Java use cases.&lt;/p&gt;

&lt;p&gt;Ray shows some tools and their use cases when developing Java applications on Kubernetes.
Most tools are shown in a small demo.&lt;/p&gt;

&lt;p&gt;Discussed tools&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.testcontainers.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Testcontainers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cloudfoundry/java-buildpack-memory-calculator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java Memory Calculator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://k3s.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;k3s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kind&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Skaffold&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SchweizerischeBundesbahnen/springboot-graceful-shutdown&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Graceful shutdown library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He also provides some common pitfalls when developing Java for Kubernetes.
He refers to his talk about common &lt;a href=&quot;https://saturnism.me/talk/docker-tips-and-tricks/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;docker pitfalls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, he showed a demo of how an IntelliJ plugin, when combined with Skaffold, can allow a developer to debug a container running on an actual Kubernetes cluster, straight from their local machine.
Side note, this is super cool!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=c16oOeTfFXM&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;apache-pulsar-101-architecture-concepts--benchmarks&quot;&gt;Apache Pulsar 101: architecture, concepts &amp;amp; benchmarks&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/@waxzce&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Quentin Adam&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/quentin_adam.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A talk by &lt;a href=&quot;https://twitter.com/@waxzce&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Quentin Adam&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/@StevenLeRoux&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Steven Le Roux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pulsar.apache.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Pulsar&lt;/a&gt; is a pub sub messaging system built on top of &lt;a href=&quot;https://bookkeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Zookeeper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bookkeeper is a distributed writer log on which Twitter Manhattan has been based.
Because Pulsar uses Bookkeeper as the underlying storage engine, its brokers are by design stateless freeing them up from having to deal with storage constraints.&lt;/p&gt;

&lt;p&gt;A broker can have different roles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pulsar.apache.org/docs/en/concepts-architecture-overview/#brokers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;broker&lt;/a&gt;: this is the default option and can be compared in functionally with a Kafka broker.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pulsar.apache.org/docs/en/concepts-architecture-overview/#pulsar-proxy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;proxy&lt;/a&gt;: this deals with external communication between the brokers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently a proxy just handles outside communication with the brokers, but there is a proposal &lt;a href=&quot;https://github.com/apache/pulsar/wiki/PIP-46:-Next-gen-Proxy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PIP-46&lt;/a&gt; to let it handle much more, including dealing with the Kafka binary protocol and MQTT.&lt;/p&gt;

&lt;p&gt;By default, a topic will not be partitioned, but if you want you can create these without any problem as you can see &lt;a href=&quot;https://pulsar.apache.org/docs/en/concepts-messaging/#partitioned-topics&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.
A difference with Kafka is that a partition is subdivided in segments, with the oldest segment containing the oldest entries.&lt;/p&gt;

&lt;p&gt;Pulsar feels like a nice mix between streaming and standard message queuing patterns, something worth looking into.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=De6avNyQUMw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;observing-chaos&quot;&gt;Observing Chaos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jpkrohling&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;jpkrohling&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/jp_krohling.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jpkrohling&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Juraci Paixão Kröhling&lt;/a&gt; is a SE at RedHat working on the Kiali team and a maintainer of Jaeger Tracing.&lt;/p&gt;

&lt;p&gt;He provides a brief overview of the basic concepts of a services mesh, its inner workings with a sidecar and their advantages and issues.
Next, he discussed how different features of a service mesh can solve common concerns w.r.t. routing, resiliency, security, observability and distributed tracing.&lt;/p&gt;

&lt;p&gt;The last part of the talk is an extensive demo of the four tools/technologies discussed in the talk: Jaeger, Istio, Quarkus and Kiala.
A demo service is deployed and a distributed tracing example scenario is shown and discussed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FJ_YuUgIt8E&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-tips-for-terrible-tech-talks&quot;&gt;Top Tips for Terrible Tech Talks&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/chethaase&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Chet Haase&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/chethaase.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this talk by &lt;a href=&quot;https://twitter.com/@chethaase&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chet Haase&lt;/a&gt;, he provides us with the guidelines for what makes a good technical talk for him.&lt;/p&gt;

&lt;p&gt;Don’t provide an agenda, your material should speak for itself and have a logical begin, middle and end.&lt;/p&gt;

&lt;p&gt;Make sure that you are not reading slides or even speaker notes, as at that moment you will loose the focus of the audience.&lt;/p&gt;

&lt;p&gt;A lot of hints also focus on simplification:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a small, catchy title&lt;/li&gt;
  &lt;li&gt;no walls of text&lt;/li&gt;
  &lt;li&gt;no complicated diagrams&lt;/li&gt;
  &lt;li&gt;simplify code, it doesn’t need to compile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have eye contact with the audience, but not with an individual as that might become creepy.
Finally, learn how to project with your voice and movement, bring some power into your talk.&lt;/p&gt;

&lt;p&gt;Be in the room before your talk and have a chat with some of the audience, it can be pretty rewarding for the attendees, but most importantly the first words you utter will be the most nervous ones.&lt;/p&gt;

&lt;p&gt;Don’t follow a rehearsed script, do not fake emotions which you don’t have.
But by no means skip on practice and preparation, as you need to own the material you are bringing.&lt;/p&gt;

&lt;p&gt;And most importantly, be real and have fun.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DtP9jjQJjt8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-happens-after-your-startup-is-acquired&quot;&gt;What happens after your startup is acquired&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/renatatamasi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Renata Tamasi&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/renatatamasi.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was an amazing talk by &lt;a href=&quot;https://twitter.com/renatatamasi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Renata Tamasi&lt;/a&gt;, founder of Samebug and currently working at Rollbar.&lt;/p&gt;

&lt;p&gt;During this talk, she took us through the journey of running and later-on selling her start-up to Rollbar.
She starts by showing the struggles they had to get the start-up going in Europe and what the pitfalls they uncovered during journey.
Simply put, getting a SaaS based start-up off the ground and making is successful in Europe is almost impossible without the founders moving to the US.
During their journey, Renata explained the different paths they tried with Samebug ranging from trying to raise funding for their start-up to finally getting acquired by Rollbar.&lt;/p&gt;

&lt;p&gt;This is a must see talk for everyone who wants to join a start-up and it will be very familiar for anyone who was in a start-up at one point in time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TcP7OWbmY8Q&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;resiliency-and-availability-design-patterns-for-the-cloud&quot;&gt;Resiliency and Availability Design Patterns for the Cloud&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Sebastien Stormacq&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/sebsto.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/sebsto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sebastien Stormacq&lt;/a&gt; is a senior Technical Evangelist as AWS.&lt;/p&gt;

&lt;p&gt;Your system should still work when a failure occurs, even if it’s just in a degraded state.
Your business should not rely on a single person being available and present.&lt;/p&gt;

&lt;p&gt;Geo redundancy is explained and how you can use availability zones (AZs) to have geo redundancy.
He also explained a scenario where an AZ fails and a hot failover is performed using an Elastic Load Balancer.
Always spread architectures over multiple AZs or use regionless services (S3, ELB) which are multi-az by default.&lt;/p&gt;

&lt;p&gt;Load shedding is a technique to drop all traffic once a service becomes loaded beyond a preset point of healthy load.
This prevents the service from being overloaded and crashing.&lt;/p&gt;

&lt;p&gt;Shuffle sharding is a technique to reduce the blast radius for an outage by creating isolated compartments in the infrastructure.&lt;/p&gt;

&lt;p&gt;Finally Sebastian provides two very good resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/architecture/well-architected/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Well-Architected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@adhorn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos engineering blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Availability zones to achieve Geo redundancy&lt;/li&gt;
  &lt;li&gt;Use autoscaling mechanisms to have self-healing VMs&lt;/li&gt;
  &lt;li&gt;Test your backups&lt;/li&gt;
  &lt;li&gt;Use a split database setup. Split logically or functionally (read-write / sharding)&lt;/li&gt;
  &lt;li&gt;Set and sync timeouts&lt;/li&gt;
  &lt;li&gt;Implement backoffs for retries with jitter&lt;/li&gt;
  &lt;li&gt;Make sure database operations are idempotent&lt;/li&gt;
  &lt;li&gt;Use circuit breaks to prevent overloading an already degraded system&lt;/li&gt;
  &lt;li&gt;Implement health checks&lt;/li&gt;
  &lt;li&gt;Reject traffic when load is high on the service (load shedding and throttling)&lt;/li&gt;
  &lt;li&gt;Apply shuffle sharding techniques to limit blast radius of outage&lt;/li&gt;
  &lt;li&gt;Perform GameDays&lt;/li&gt;
  &lt;li&gt;Experiment with Chaos engineering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MCpjEiemsRg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ssltls-for-mortals&quot;&gt;SSL/TLS for mortals&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mthmulders&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Maarten Mulders&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/mthmulders.png&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mthmulders&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maarten Mulders&lt;/a&gt; provides this talk for mortals.&lt;/p&gt;

&lt;p&gt;SSL is outdated and should be not be used anymore.
Documentation can be confusing as SSL is sometimes used to discuss SSL and TLS setups.
Only TLS should be used as SSL has been broken (cracked) multiple times.&lt;/p&gt;

&lt;p&gt;Maarten goes on to explain the basic concepts of public and private keys.
He also explains all the mathematics behind the RSA key creation.&lt;/p&gt;

&lt;p&gt;This talk is ideal for people wanting to get a brief overview of how TLS works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yJrJEvvW_HA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;back-to-the-future-how-80s-arcade-games-taught-me-clojure&quot;&gt;Back to the Future: How 80s Arcade Games Taught me Clojure&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ladymeyy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Mey Beisaron&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/ladymeyy.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this talk &lt;a href=&quot;https://twitter.com/@ladymeyy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mey Beisaron&lt;/a&gt; explained how she learned &lt;a href=&quot;https://clojure.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you often learn a new programming language, it becomes much easier.
For her latest position she needed to start using Clojure.&lt;/p&gt;

&lt;p&gt;A very good book to get started with learning Clojure is &lt;a href=&quot;braveclojure.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clojure for the brave and true&lt;/a&gt;, which is actually a funny book.
After the book the website &lt;a href=&quot;http://www.4clojure.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;4clojure&lt;/a&gt; is a good source of exercises you can follow.&lt;/p&gt;

&lt;p&gt;But she still felt that that wasn’t enough to understand the language completely.&lt;/p&gt;

&lt;p&gt;Some years ago, for Java, she was able to learn it in one weekend, by writing a simple 2D game.
Writing the game made her feel the need to use objects much more naturally.
Not only that, with the game you also need other concepts likes threads, etc.&lt;/p&gt;

&lt;p&gt;When writing a game, do focus on a simple game, so you can truly focus on the language you need to learn.&lt;/p&gt;

&lt;p&gt;But Clojure did take more then a weekend, immutability changes everything, it messes with your head.&lt;/p&gt;

&lt;p&gt;In order to write a game there are several steps you need to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Understand the 2d game structure
It should be pretty simple, identify the framework functions and the game logic.
The framework functions deal with the outside world: network connections, loading resources, player input, …
While the game logic identifies the win conditions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find code of a game written in Clojure.
So you can learn from an existing source.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An interesting game library to use with Clojure is &lt;a href=&quot;https://github.com/oakes/play-clj&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oaks/Play.clj&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Map that game
Find the code which moves the character, which loads the assets, …&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a feature
Start coding&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a new game
Write your own game with the knowledge you have acquired.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dream big, start with tiny steps!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A nice talk brought with great enthusiasm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UilS1ctYUP4&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;defence-against-the-docker-arts&quot;&gt;Defence Against the Docker Arts&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/codefinger&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Mey Beisaron&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/codefinger.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/codefinger&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Joe Kutner&lt;/a&gt; works at Heroku and is a core maintainer of &lt;a href=&quot;https://buildpacks.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Buildpacks.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He starts this talk by providing a set of common pitfalls and best practises for creating Dockerfiles in Rapidfire.
Multi-stage builds, combining multiple run commands into one and using proper base images for all docker builds are just a few examples.&lt;/p&gt;

&lt;p&gt;Joe then discusses the pros and cons of &lt;a href=&quot;https://github.com/moby/buildkit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Buildkit&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib&lt;/a&gt; as tools for building Docker images.&lt;/p&gt;

&lt;p&gt;Lastly, Joe explains what Buildpacks are, their origin, their use cases and what the architecture is.
The different advantages of Buildpacks are extensively explained and the lifecycle of a typical Buildpack is shown.
Pack is discussed as an easy way to use Buildpacks for a Spring Boot application.
Joe demos the usefulness of Buildpacks with the use case of the HeartBlead CVE.&lt;/p&gt;

&lt;p&gt;This talk is recommended for an audience that is interested in building Docker images without having to deal with Dockerfiles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ofH9_sE2qy0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;flowable-business-processing-from-kafka-events&quot;&gt;Flowable business processing from Kafka events&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tijsrademakers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tijs Rademakers&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/tijsrademakers.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/jbarrez&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Joram Barrez&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/jbarrez.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tijsrademakers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tijs Rademakers&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jbarrez&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Joram Barrez&lt;/a&gt; are both employees of Flowable.&lt;/p&gt;

&lt;p&gt;The talk starts by providing a brief overview of Flowable as a product.
They introduce the different standards that Flowable supports: BPMN, CMMN and DMN.
Tijs continues by explaining the architecture of Flowable and its evolution.&lt;/p&gt;

&lt;p&gt;Next, Joram explains how (Kafka) events can be used in the Engine.
He goes on by providing a demo of the platform using an example process.
A flow diagram of the information flow and the use of Kafka and Flowable is shown.
He also explains all code that is required to execute the demo process.&lt;/p&gt;

&lt;p&gt;This talk provides a good starting point for Flowable, even for people who have very little to no experience with BPM engines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nX0dRiPqOmk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;api-first-development-with-openapi---should-you-practise-it--by-nick-van-hoof&quot;&gt;API First development with OpenAPI - Should you practise it !? by Nick Van Hoof&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://ordina-jworks.github.io/author/nick-van-hoof/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 206px&quot; alt=&quot;Nick Van Hoof&quot; src=&quot;/img/author/nick-van-hoof.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our very own &lt;a href=&quot;https://ordina-jworks.github.io/author/nick-van-hoof/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nick Van Hoof&lt;/a&gt; gave a talk at Devoxx as well.
Nick is a Cloud Engineer at Ordina, currently working at Nike.&lt;/p&gt;

&lt;p&gt;In this 15 minute quickie, Nick explains why API first development is a good practise.
He start by explaining the advantages through an example.
Next, he goes on to show a short demo and some examples of an Open API design and tooling that can be used to ease the usage of Open API.&lt;/p&gt;

&lt;p&gt;This talk gives a good introduction into why you should embrace API first development and what tooling and benefits you can expect.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; alt=&quot;Nick on stage&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/nick.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=F9iF3a1Z8Y8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-container-platform-for-the-banking-industry---why-what--how&quot;&gt;A container platform for the banking industry - why, what &amp;amp; how&lt;/h3&gt;

&lt;p&gt;This talk is presented by &lt;a href=&quot;https://www.linkedin.com/in/wiebe-de-roos&quot;&gt;Wiebe de Roos&lt;/a&gt;, an CI/CD Consultant and Engineer at ABN AMRO Bank.&lt;/p&gt;

&lt;p&gt;Wiebe starts by sketching the scale of the project and their container journey.
The different requirements are discussed and platform landscape was used.
Next, he discusses what pipelines are used to provide the end-to-end CI/CD workflow.&lt;/p&gt;

&lt;p&gt;He continues to explain what measure they have taken to adhere to the hard audit requirements in their regulated banking environment.
Container security, compliancy, monitoring and logging and their solutions for these requirements are shown and explained.&lt;/p&gt;

&lt;p&gt;This is an amazing talk, a definately must watch for anyone using Kubernetes in a regulated environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4ACat8H69_I&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-get-hacked-properly&quot;&gt;How to get hacked properly&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/julientopcu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Julien Topcu&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/julientopcu.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This talk is presented by &lt;a href=&quot;https://twitter.com/julientopcu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Julien Topcu&lt;/a&gt;, a member of OWASP.&lt;/p&gt;

&lt;p&gt;Julien uses an example Spring Boot webapp to showcase a few common security issues.
For each of the issue, he also presents and live codes the remediation.
These exploits are all part of the OWASP top 10.&lt;/p&gt;

&lt;p&gt;This is a nice talk to get an interesting overview of a few common security issues and their fixes in Spring Boot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ipM1_7uPC38&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;scaling-sustainable-innovation-through-team-autonomy&quot;&gt;Scaling Sustainable Innovation through Team Autonomy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/bol_com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bol.com&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/bol_com.png&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tom Stoepkens from &lt;a href=&quot;https://twitter.com/bol_com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bol.com&lt;/a&gt; gives this talk.&lt;/p&gt;

&lt;p&gt;(Tech) Innovations should be used as a highly potent enabler for business goals.
A common culture and goal is key to be able to use team autonomy.
Tom provides an overview of how they automate and the technologies they use in his team.
Next, he explains how testing helps with supporting sustainable innovation.&lt;/p&gt;

&lt;p&gt;This talk provides an insight into how Bol.com and especially the team of Tom actually uses automation to allow their team to innovate quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cncIlzKQp9Y&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;better-software-faster-principles-of-continuous-delivery-and-devops&quot;&gt;Better software, faster: principles of Continuous Delivery and DevOps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/bjschrijver&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bert Jan Schrijver&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/bjschrijver.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This talk is presented by &lt;a href=&quot;https://twitter.com/bjschrijver&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bert Jan Schrijver&lt;/a&gt;, the CTO of OpenValue.&lt;/p&gt;

&lt;p&gt;He starts his talk be providing definitions for CI, the two types of CD and DevOps.
Next, he dissects CD into the required components and explains how these can be fulfilled.
He defines all the different components and what the ideal setup would look like.&lt;/p&gt;

&lt;p&gt;It’s a nice overview of the requirements for a DevOps / CD organisation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BlQ3MyoDOR4&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;broken-buildtools-and-bad-behaviors-the-maven-story&quot;&gt;Broken Buildtools and Bad Behaviors; The Maven Story&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/rfscholte&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Robert Scholte&quot; src=&quot;/img/2019-11-18-devoxx-belgium-2019/rfscholte.jpg&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We tend to keep doing things the same way because they were required in the past.&lt;/p&gt;

&lt;p&gt;Eventually something breaks and we go to Stack Overflow or we ask our colleagues and we find a fix or workaround,
but how long are we going to use this workaround?&lt;/p&gt;

&lt;p&gt;These workarounds become a pattern and these patterns control people.&lt;/p&gt;

&lt;p&gt;“Works on my machine” is mostly caused by local code changes, different OS, JDK, Maven, Files and/or Properties.&lt;/p&gt;

&lt;p&gt;Maven manages files for your through the Local Repository. The local repository is a dependency cache without time-to-live and can be located at &lt;code class=&quot;highlighter-rouge&quot;&gt;${user.home}/.m2/repository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The local repository of Maven is actually broken.
Maven 2 had a dumb cache, once something was downloaded it would stay there forever.
Maven 3 introduced cached artifacts that got verified for existence with &lt;code class=&quot;highlighter-rouge&quot;&gt;_remote.repositories&lt;/code&gt;.
Artifacts that got deleted from Maven Central will be detected and fail your build.
The Maven repository has checksums, but they are not being checked by default.
You can enable this using &lt;code class=&quot;highlighter-rouge&quot;&gt;-C&lt;/code&gt; for strict checksum checking causing a build failure or lax checksum checking using &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; which will only warn for checksum mismatches.&lt;/p&gt;

&lt;p&gt;Are you running &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt; by default?
You probably said “yes” like most developers.
This a workaround for Maven 2 which is no longer needed in Maven 3.&lt;/p&gt;

&lt;p&gt;Dependency resolution in Maven 2 was broken.
It was unaware of the reactor and dependencies had to exist in the local repository.
Maven 3 is reactor aware meaning install is no longer required.&lt;/p&gt;

&lt;p&gt;I/O is slow, so logging, files and downloading the internet with Maven is slow as well.&lt;/p&gt;

&lt;p&gt;As logging is slow, you should aim for a clean Maven output.
So use your logging framework and do not use &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;System.err&lt;/code&gt;.
Disable logging during testing (using &lt;code class=&quot;highlighter-rouge&quot;&gt;loglevel=off&lt;/code&gt;) and in the extreme run Maven with &lt;code class=&quot;highlighter-rouge&quot;&gt;-q&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;–quiet&lt;/code&gt; which will disable all output and just tell you when it’s done.
When you enable debugging on Maven you’ll notice your build time will increase even though nothing has changed.&lt;/p&gt;

&lt;p&gt;As files are slow, we should not use &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean&lt;/code&gt;.
Most of the Maven plugins are aware if they must execute their task.&lt;/p&gt;

&lt;p&gt;The Maven CI extension (stands for Maven &lt;code class=&quot;highlighter-rouge&quot;&gt;clean install&lt;/code&gt; extension) which will register clean and install when you keep executing &lt;code class=&quot;highlighter-rouge&quot;&gt;clean install&lt;/code&gt;, your build will eventually fail as this is a bad practice.
Properties resolution are mostly defined in your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;, but also in your &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.xml&lt;/code&gt; and system properties.
By adding a parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn deploy -Dspring.version&lt;/code&gt; you can change your deployed Spring version.
This is however not limited to Spring.
You can also set this for the Java version, but please NEVER EVER do this.&lt;/p&gt;

&lt;p&gt;Versions could also break your builds due to conflicts with branch merging.
You should isolate versions and make them unique.
Maven 3.5.0 introduces CI-friendly placeholders which allow you to use placeholders for revision, SHA1 and change list, but multi-modules require a hack to rewrite your pom.
To resolve this issue, there will be something new called &lt;code class=&quot;highlighter-rouge&quot;&gt;maven.experimental.buildconsumer&lt;/code&gt; which will land in Maven 3.7.0 and it will require Java 8 or above.&lt;/p&gt;

&lt;p&gt;Treat your pom as production code so remove dead code like unused dependencies, plugins, properties and reports.&lt;/p&gt;

&lt;p&gt;Keep improving and locate and optimize time consuming processes, automate as much as possible and keep having fun.&lt;/p&gt;

&lt;p&gt;Be like a responsible pilot and try to understand every plugin and think if you still need it.
Stay curious and keep yourself informed.
Watch out for questions with outdated answers (on Stack Overflow) and find information at the source.&lt;/p&gt;

&lt;p&gt;Maven is up for grabs.
About &lt;code class=&quot;highlighter-rouge&quot;&gt;60~80%&lt;/code&gt; of Java project/developers use Maven.
About &lt;code class=&quot;highlighter-rouge&quot;&gt;95%&lt;/code&gt; (sub)projects have just ~5-10 active volunteers, there is no company behind this project.
If you feel like contributing to the Maven project check out &lt;a href=&quot;https://s.apache.org/up-for-grabs_maven&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maven’s up for grabs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/2HyGxtsDf60&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube VOD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;One of the takeaways from this conference is that Kubernetes now is the de facto deployment platform for Java applications moving forward.
During the conference a lot of tools, Jib popped up a few times, and integrations with IDEs have been showcased and every talk seems to assume that the deployment platform is Kubernetes.&lt;/p&gt;

&lt;p&gt;Event-driven talks are also in a lift.
There were quite a few talks about Kafka or talks about software that can integrate with Kafka.&lt;/p&gt;

&lt;p&gt;Finally, the conference was a great success again.
Ordina handed out tons of nachos, every attendee has caught up with the trends in our community and all vendors have been able to showcase their newest products.&lt;/p&gt;

&lt;p&gt;See you next year, Devoxx people!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-vincken-a94b5153&quot;, &quot;twitter&quot;=&gt;&quot;PieterVincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="Java" /><category term="Kubernetes" /><category term="Devoxx" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-11-18-devoxx-belgium-2019/logo.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-11-18-devoxx-belgium-2019/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Oracle Code One 2019</title><link href="https://ordina-jworks.github.io/conference/2019/11/14/oracle-code-one.html" rel="alternate" type="text/html" title="Oracle Code One 2019" /><published>2019-11-14T00:00:00+00:00</published><updated>2019-11-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/11/14/oracle-code-one</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/11/14/oracle-code-one.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.oracle.com/code-one/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oracle Code One&lt;/a&gt; is the successor of the well-known JavaOne conference, organised each year in San Francisco, California.
Although still quite Oracle- and Java-heavy, the rebranding (and collocation with Oracle Open World) means that there were also a lot of talks about other programming languages, developer tools, … 
Our colleague Tom van den Bulck and ex-colleague Tim Ysewyn were invited to give their Workshop on Kafka Streams and enjoy the rest of the conference.
In this blog post we share our impressions and experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;align-center&quot;&gt;
    &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/oracle-code-one-2019/sf-jworks.jpg&quot; alt=&quot;JWorks Represent&quot; width=&quot;60%&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#keynotes&quot;&gt;Keynotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usual-suspects&quot;&gt;Usual Suspects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#groundbreakers-hub&quot;&gt;GroundBreakers Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-istio-and-kubernetes-to-build-a-cloud-native-service-mesh&quot;&gt;Using Istio and Kubernetes to Build a Cloud Native Service Mesh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monitor-kafka-like-a-pro&quot;&gt;Monitor Kafka Like a Pro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#distributed-tracing-in-kafka&quot;&gt;Distributed Tracing in Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#devops-theory-vs-practice-a-song-of-ice-and-tire-fire&quot;&gt;DevOps Theory vs. Practice: A Song of Ice and Tire Fire&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#progressive-web-applications-vs-native&quot;&gt;Progressive Web Applications VS Native&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;keynotes&quot;&gt;Keynotes&lt;/h2&gt;

&lt;p&gt;Next to all activity in the conference center, workshops and talks, of course there were (a few) keynotes.
These took place in a separate great hall and we summarized the best ones below.&lt;/p&gt;

&lt;h3 id=&quot;java-keynote-the-future-of-java-is-now&quot;&gt;Java Keynote: The Future of Java Is Now&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jessica Pointing&quot; src=&quot;https://pbs.twimg.com/profile_images/1174071948164251648/DLMG7FWe_400x400.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;At the Java keynote which opened the conference on monday a few speakers were invited. These talks mostly dealt with outlooks on the future. Firstly &lt;a href=&quot;https://twitter.com/jessicapointing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jessica Pointing&lt;/a&gt; talked about the current state and prospects of quantum computing.&lt;/p&gt;

&lt;p&gt;She gave an explanation of what Quantum Computing actually is, and how modern computers can consist of special components (equivalent to transistors in classical computers) to take advantage of the special properties of so-called qubits. 
A qubit or quantum bit is a unit which can exist in a superposition of states, which means it can be 0 and 1 at the same time, as opposed to a classical bit, which can only be one or the other. 
You can use these properties to devise really specific algorithms like Shor’s or Grover’s algorithm which can solve certain problems like prime factorization much faster than classical algorithms (here’s a really good explanation on how Shor’s algorithm can break encryption on &lt;a href=&quot;https://www.youtube.com/watch?v=lvTqbM5Dq4Q&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Youtube&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Keeping the title of the keynote in mind, one of the most important questions is “When will we have Quantum Computers?” and as you’ve already guessed the answer is indeed “Now”.&lt;/p&gt;

&lt;p&gt;A fun part of this talk was that there was a live link for the audience to answer a poll to estimate how far along the technology stands in this area. Most of the audience correctly guessed that at present 
we have quantum computers which consist of 10-100 qubits. Current quantum computers do come with the caveat that they can still only keep their state for a short time.
The advances which still need to be made mostly consist of making sure the quantum properties of the qubits can be kept intact for longer before we can really speak of sustainable quantum computers.
Nevertheless Jessica really made the point that the age of quantum computers is in the near future if not now already. She even showed a &lt;a href=&quot;https://github.com/johanvos/quantumjava&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt; which enables everybody to experiment and write
algorithms or programs which can theoretically be run on quantum computers (in Java of course).&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/81gujFcs3fU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Next Georges Saab, Vice President of the Java Platform Group at Oracle, officially announced what was already expected, namely that Java 13 was out as of that day:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Java 13 is live: &lt;a href=&quot;https://t.co/YqCVg3CTSg&quot;&gt;https://t.co/YqCVg3CTSg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brian Goetz (@BrianGoetz) &lt;a href=&quot;https://twitter.com/BrianGoetz/status/1174008054813081600?ref_src=twsrc%5Etfw&quot;&gt;September 17, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
After that he invited a lot of people from different backgrounds on stage (or on video) to talk about how they experienced the new, faster release cadence of the Java language, which means there is a new version of
Java out every 6 months. These were people who worked on Java at Oracle, with Java on Open Source projects, were part of the JCP, …&lt;/p&gt;

&lt;p&gt;The conclusion of most of these testimonials was that almost everybody was quite suspicious at first about the idea to do a release every 6 months but that all were pleasantly surprised by how well it seemed to work and that they urged everybody to upgrade to the latest versions as soon as possible because there are almost no downsides to it.&lt;/p&gt;

&lt;p&gt;Lastly it was &lt;a href=&quot;https://twitter.com/BrianGoetz/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Brian Goetz’&lt;/a&gt; turn to talk about the future of Java, in which he demonstrated some of the new language features which have been included in the releases
since Java 10, as well as previewed some upcoming stuff. He also gave an extended version of this talk &lt;a href=&quot;https://t.co/dzzuWze3gX?amp=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;later&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;code-one-community-keynote-game-on&quot;&gt;Code One Community Keynote: Game On&lt;/h3&gt;

&lt;p&gt;One of the less serious but certainly entertaining talks was the community keynote, in which a lot (and we do mean A LOT) of well-known people in the Java community (Java Champions, developer advocates, JCP members, …)
came on stage and acted out a history of the Java language as it has been used in the past. The through line was the idea that Java has been used through the years to help develop video games and 
it continues to be relevant today thanks to a host of new projects which are springing up everywhere.&lt;/p&gt;

&lt;p&gt;It was a bit of a silly show but it was good fun and at the same time interesting to see how far the Java community has come. At some point, &lt;a href=&quot;https://twitter.com/henri_tremblay&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Henri Tremblay&lt;/a&gt; even did some live
coding on a VM running Windows ‘95 while chatting to his past self via a chatbot, which was truly impressive.&lt;/p&gt;

&lt;p&gt;There was a lot of buzz on Twitter about the event:&lt;/p&gt;

&lt;div style=&quot;display: flex; flex-direction: row; justify-content: space-around; flex-wrap: wrap;&quot;&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;AN OUTSTANDINGLY HILARIOUS &lt;a href=&quot;https://twitter.com/hashtag/CodeOne?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CodeOne&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/community?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#community&lt;/a&gt; KEYNOTE - &lt;a href=&quot;https://twitter.com/hashtag/JUG?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#JUG&lt;/a&gt; leaders &lt;a href=&quot;https://twitter.com/Java_Champions?ref_src=twsrc%5Etfw&quot;&gt;@Java_Champions&lt;/a&gt; &lt;a href=&quot;https://twitter.com/groundbreakers?ref_src=twsrc%5Etfw&quot;&gt;@groundbreakers&lt;/a&gt; celebrated the grande finale with shirts &lt;a href=&quot;https://twitter.com/starbuxman?ref_src=twsrc%5Etfw&quot;&gt;@starbuxman&lt;/a&gt; &lt;a href=&quot;https://twitter.com/venkat_s?ref_src=twsrc%5Etfw&quot;&gt;@venkat_s&lt;/a&gt; &lt;a href=&quot;https://twitter.com/brjavaman?ref_src=twsrc%5Etfw&quot;&gt;@brjavaman&lt;/a&gt; &lt;a href=&quot;https://twitter.com/eMalaGupta?ref_src=twsrc%5Etfw&quot;&gt;@eMalaGupta&lt;/a&gt; &lt;a href=&quot;https://twitter.com/RafaDelNero?ref_src=twsrc%5Etfw&quot;&gt;@RafaDelNero&lt;/a&gt; &lt;a href=&quot;https://twitter.com/_tamanm?ref_src=twsrc%5Etfw&quot;&gt;@_tamanm&lt;/a&gt; &lt;a href=&quot;https://twitter.com/neugens?ref_src=twsrc%5Etfw&quot;&gt;@neugens&lt;/a&gt; &lt;a href=&quot;https://twitter.com/miragemiko?ref_src=twsrc%5Etfw&quot;&gt;@miragemiko&lt;/a&gt; &lt;a href=&quot;https://twitter.com/dervis_m?ref_src=twsrc%5Etfw&quot;&gt;@dervis_m&lt;/a&gt; &lt;a href=&quot;https://twitter.com/nljug?ref_src=twsrc%5Etfw&quot;&gt;@nljug&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/usualsuspects?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#usualsuspects&lt;/a&gt; &lt;a href=&quot;https://twitter.com/OracleCodeOne?ref_src=twsrc%5Etfw&quot;&gt;@OracleCodeOne&lt;/a&gt; &lt;a href=&quot;https://t.co/I1gCVrfVVC&quot;&gt;pic.twitter.com/I1gCVrfVVC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Nothdurft (@DataDuke) &lt;a href=&quot;https://twitter.com/DataDuke/status/1174527021034008577?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/venkat_s?ref_src=twsrc%5Etfw&quot;&gt;@venkat_s&lt;/a&gt; live coding in an angry bird suit at the community keynote 😂 &lt;a href=&quot;https://twitter.com/hashtag/CodeOne2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CodeOne2019&lt;/a&gt; &lt;a href=&quot;https://t.co/TUtVADuhCx&quot;&gt;pic.twitter.com/TUtVADuhCx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Billy Korando (@BillyKorando) &lt;a href=&quot;https://twitter.com/BillyKorando/status/1174363407178297344?ref_src=twsrc%5Etfw&quot;&gt;September 18, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Game on community keynote &lt;a href=&quot;https://twitter.com/hashtag/codeone?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#codeone&lt;/a&gt; thanks to the participants! &lt;a href=&quot;https://t.co/la6vOYy2Xg&quot;&gt;pic.twitter.com/la6vOYy2Xg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oracle Code One (@OracleCodeOne) &lt;a href=&quot;https://twitter.com/OracleCodeOne/status/1174369836127776768?ref_src=twsrc%5Etfw&quot;&gt;September 18, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2 id=&quot;usual-suspects&quot;&gt;Usual Suspects&lt;/h2&gt;

&lt;p&gt;As always, there are a few speakers at every conference who are household names and who always deliver.
Some of these you can also meet and experience in Belgium at Devoxx or at our very own &lt;a href=&quot;https://ordina-jworks.github.io/join/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JOIN&lt;/a&gt; conference, like &lt;a href=&quot;https://twitter.com/DataDuke&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benjamin Nothdurft&lt;/a&gt;.
These talks are always very interesting and of a high standard, therefore we will only highlight them briefly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/venkat_s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Venkat Subramanian&lt;/a&gt; gave no less than six talks at the conference, two of which we were able to attend.
These were about &lt;a href=&quot;https://youtu.be/pWW8uqAPT-s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Dozen Cool Things You Can Do With JVM Languages&lt;/a&gt;
and “Functional Programming Idioms in Java” in which Venkat shows you things which are really useful but look so obvious when he points them out in his incomparable style.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mkheck/status/1174413471674294272&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mark Heckler&lt;/a&gt; talked about &lt;a href=&quot;https://speakerdeck.com/mkheck/drinking-from-the-stream&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to Use Messaging Platforms for Scalabiliy and Performance&lt;/a&gt; and did an impressive live demo
in which he built an application which produced, transformed and consumed events in three seperate projects in less than 15 minutes, using Spring Cloud Stream.&lt;/p&gt;

&lt;p&gt;Furthermore, &lt;a href=&quot;https://twitter.com/starbuxman&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Josh Long&lt;/a&gt; talked about &lt;a href=&quot;https://youtu.be/Y-r_S2UAzGY&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Reactive Revolution&lt;/a&gt; and “Bootiful Testing” while &lt;a href=&quot;https://twitter.com/smaldini&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stephane Maldini&lt;/a&gt; gave us an overview of the reasons
why you should (or should not) start using reactive programming.&lt;/p&gt;

&lt;h2 id=&quot;groundbreakers-hub&quot;&gt;Groundbreakers Hub&lt;/h2&gt;

&lt;p&gt;If you wanted a break from the (literally hundreds of) talks, there was a large area called the &lt;a href=&quot;https://www.oracle.com/code-one/hub.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Groundbreakers Hub&lt;/a&gt; where a lot of like-minded tech enthusiasts could gather and discuss
the ongoing conference (in some cases accompanied by a &lt;a href=&quot;https://www.facebook.com/OracleCodeOne/photos/a.10150738878780318/10155758354410318/?type=1&amp;amp;theater&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Blockchain Beer&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As always, there were booths of all big representatives at which you could gather information about new products, do some demo coding or collect some nice gadgets. There was also a corner
with arcade game consoles to relax, and also a &lt;a href=&quot;https://www.tomshardware.com/news/oracle-raspberry-pi-supercomputer,40412.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Raspberry Pi supercomputer&lt;/a&gt; on display.&lt;/p&gt;

&lt;p&gt;A few impressions on Twitter:&lt;/p&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: space-around;&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Shout out to all &lt;a href=&quot;https://twitter.com/OracleCodeOne?ref_src=twsrc%5Etfw&quot;&gt;@OracleCodeOne&lt;/a&gt; &lt;a href=&quot;https://twitter.com/oracleopenworld?ref_src=twsrc%5Etfw&quot;&gt;@oracleopenworld&lt;/a&gt; attendees. The real action with the fun people is in the &lt;a href=&quot;https://twitter.com/groundbreakers?ref_src=twsrc%5Etfw&quot;&gt;@groundbreakers&lt;/a&gt; Hub. Come join us and remind yourself of why you got into tech in the first place 🤓 All are welcome 🤗 &lt;a href=&quot;https://twitter.com/hashtag/CommmityFirst?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CommmityFirst&lt;/a&gt; &lt;a href=&quot;https://t.co/W1rQgH8oWv&quot;&gt;pic.twitter.com/W1rQgH8oWv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vincent Mayers (@vincentmayers) &lt;a href=&quot;https://twitter.com/vincentmayers/status/1174033804937187328?ref_src=twsrc%5Etfw&quot;&gt;September 17, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;LIFE IS GOOD at the &lt;a href=&quot;https://twitter.com/groundbreakers?ref_src=twsrc%5Etfw&quot;&gt;@groundbreakers&lt;/a&gt; hub at &lt;a href=&quot;https://twitter.com/OracleCodeOne?ref_src=twsrc%5Etfw&quot;&gt;@OracleCodeOne&lt;/a&gt; - we have arcade machines, &lt;a href=&quot;https://twitter.com/Hackergarten?ref_src=twsrc%5Etfw&quot;&gt;@hackergarten&lt;/a&gt;, a beer blockchain, a 1k &lt;a href=&quot;https://twitter.com/hashtag/RaspberryPi?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#RaspberryPi&lt;/a&gt; cluster, escape rooms, code cards and IoT devices. Let&amp;#39;s &lt;a href=&quot;https://twitter.com/hashtag/BreakNewGround?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#BreakNewGround&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/CodeOne?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CodeOne&lt;/a&gt; &lt;a href=&quot;https://t.co/p5PI4q1XI4&quot;&gt;pic.twitter.com/p5PI4q1XI4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Nothdurft (@DataDuke) &lt;a href=&quot;https://twitter.com/DataDuke/status/1174118535565438976?ref_src=twsrc%5Etfw&quot;&gt;September 18, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka-streams-workshop&quot;&gt;Kafka Streams Workshop&lt;/h2&gt;

&lt;p&gt;The workshop we gave ourselves was once again a success, with about 30 people from around the world attending. An explanation of what the workshop contains has already been given in &lt;a href=&quot;/conference/2018/12/17/Devoxx-MA.html#stream-processing-live-traffic-data-with-kafka-streams-by-tom-van-den-bulck-and-tim-ysewyn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a previous blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-istio-and-kubernetes-to-build-a-cloud-native-service-mesh&quot;&gt;Using Istio and Kubernetes to Build a Cloud Native Service Mesh&lt;/h2&gt;

&lt;p&gt;Another workshop which we followed (which was guided by &lt;a href=&quot;https://twitter.com/saturnism&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ray Tsang&lt;/a&gt;) showed us how to easily set up an Istio service mesh on a Kubernetes cluster on Google Cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://istio.io/docs/concepts/what-is-istio/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;What is Istio?&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Istio is an open platform-independent service mesh that provides traffic management, policy enforcement, and telemetry collection.&lt;/p&gt;

  &lt;p&gt;Open: Istio is being developed and maintained as open-source software. We encourage contributions and feedback from the community at-large.&lt;/p&gt;

  &lt;p&gt;Platform-independent: Istio is not targeted at any specific deployment environment. During the initial stages of development, Istio will support Kubernetes-based deployments. However, Istio is being built to enable rapid and easy adaptation to other environments.&lt;/p&gt;

  &lt;p&gt;Service mesh: Istio is designed to manage communications between microservices and applications. Without requiring changes to the underlying services, Istio provides automated baseline traffic resilience, service metrics collection, distributed tracing, traffic encryption, protocol upgrades, and advanced routing functionality for all service-to-service communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was surprisingly easy to set up an entire Kubernetes cluster with service mesh in less than an hour, after which there was still time to try out some of the nice features of a service mesh, like setting up
special routing rules to enable Canary deployments or A/B testing scenarios, fault injection / circuit breaking, tracing, … Which can all be handled by Istio itself without making any
changes to your application (except for propagating the headers which are required for tracing). Also a lot of added on applications like Prometheus, Grafana, Jaeger, … all worked straight out of the box.&lt;/p&gt;

&lt;p&gt;For the workshop we received special temporary accounts but if you use your own account (which has a free trial option) you can certainly try and follow the steps in the very extensive &lt;a href=&quot;http://bit.ly/istio2019&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Slides&lt;/a&gt; and &lt;a href=&quot;https://github.com/retroryan/istio-workshop&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Read-through&lt;/a&gt;
to set this up yourselves.&lt;/p&gt;

&lt;h2 id=&quot;quarkus-trivia-night&quot;&gt;Quarkus Trivia Night&lt;/h2&gt;

&lt;p&gt;All work and no plays makes us dull boys so there was also time for some relaxation. We were invited for a Trivia Night organised by &lt;a href=&quot;https://www.openshift.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenShift&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Quarkus&lt;/a&gt; at a brewery close to the conference center, which was a nice change of pace from all serious presentations.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Good food and beer at the &lt;a href=&quot;https://twitter.com/QuarkusIO?ref_src=twsrc%5Etfw&quot;&gt;@QuarkusIO&lt;/a&gt; trivia reception &lt;a href=&quot;https://twitter.com/hashtag/CodeOne?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CodeOne&lt;/a&gt; &lt;a href=&quot;https://t.co/zUKamBK08L&quot;&gt;pic.twitter.com/zUKamBK08L&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jaap Coomans (@JaapCoomans) &lt;a href=&quot;https://twitter.com/JaapCoomans/status/1174150552156069888?ref_src=twsrc%5Etfw&quot;&gt;September 18, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;monitor-kafka-like-a-pro&quot;&gt;Monitor Kafka Like a Pro&lt;/h2&gt;

&lt;p&gt;A subject close to our own workshop was presented by &lt;a href=&quot;https://twitter.com/gamussa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viktor Gamov&lt;/a&gt;, a developer advocate for Confluent.
He talked about best practices for monitoring your Kafka clusters in a very interesting presentation.
The exact slides were not made available but are very similar to &lt;a href=&quot;https://www.slideshare.net/ChesterChen/sfbiganalytics20190724-monitor-kafka-like-a-pro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;these&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some basic monitoring is just to verify that your producers and consumers are able to read and write data from Kafka.
You can set up a specific topic on which you can just send a message and consume it again every 15 seconds, then raise an error after for example four failures et voila, you have basic monitoring.&lt;/p&gt;

&lt;p&gt;Measuring latency is already more advanced, but every time you experience performance issues, always check your latency because it might be a waste of time to start looking into Kafka errors or your own service when your network connection is acting up.&lt;/p&gt;

&lt;p&gt;In order to check if your brokers are up, just execute a &lt;code class=&quot;highlighter-rouge&quot;&gt;grep java&lt;/code&gt; on the brokers.&lt;/p&gt;

&lt;p&gt;Kafka exposes a ton of &lt;a href=&quot;https://docs.confluent.io/current/kafka/monitoring.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JMX metrics&lt;/a&gt;, which you can export with Prometheus, the Confluent cloud uses the same mechanism to acquire metrics.&lt;/p&gt;

&lt;p&gt;The most important metrics to monitor are to verify the state of your partitions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.controller:type=KafkaController, name=OfflinePartitionsCount&lt;/code&gt; Offline partitions is an actionable metric, as this indicates that a partition has no leader and thus is no longer readable or writeable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.server:type=ReplicaManager, name=UnderReplicatedPartitions&lt;/code&gt;: Underreplicated partitions is the most important metric, something is cleary wrong. Whenever there are no longer enough replicas of a partition in sync you can no longer produce messages to that topic.
This corresponds to the configured &lt;code class=&quot;highlighter-rouge&quot;&gt;min.isr.partitions&lt;/code&gt; of a broker.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is also important to verify if your brokers have enough resources like: CPU, Bandwidth, Disk, …
Always monitor your disk usage, always.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other metrics which are pretty important:
&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.controller:type=KafkaController, name=ActiveControllerCount&lt;/code&gt;: this indicates wether an &lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Controller+Internals&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Active Controller&lt;/a&gt; is present.
This is the most important node of your kafka cluster.
1 = OK, 0 is NOT OK, 2 is VERY NOT OK.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.server:type=SessionExpireListener, name=ZooKeeperDisconnectsPerSec&lt;/code&gt;: Zookeeper disconnects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.controller:type=ControllerStats, name=UncleanLeaderElectionsPerSec&lt;/code&gt;: the rate at which unclear leader election occurs, though this option is disabled by default.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.server:type=ReplicaManager, name=IsrShrinksPerSec&lt;/code&gt;: When a broker goes down the ISR will shrink, when it comes back it will expand again (&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.server:type=ReplicaManager, name=IsrExpandsPerSec&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.server:type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;kafka.network:type=SocketServer, name=NetworkProcessorAvgIdlePercent&lt;/code&gt; as this verifies how often your request and processor threads are idle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For your consumers an important metric is &lt;code class=&quot;highlighter-rouge&quot;&gt;records-lag-max&lt;/code&gt;, because when this is growing it will indicate that your consumers are lagging behind and can not process the same amount of messages as your producers are producing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is also important to set a performance baseline for your producers and consumers.
This allows you to verify configuration changes you have made and their impact on your Kafka system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, you should also pay attention to old producer and consumer versions, as these force the broker to convert messages between these versions everytime, which will have an impact on the heap memory usage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Victor also pointed us to a nice tool to use when you want to profile your java application: &lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;async-profiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oracle-code-one-2019/flame-graph.svg&quot; alt=&quot;&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Besides creating cool flame graphs, this tool can inform you about what your java application is doing and where you might have a problem.&lt;/p&gt;

&lt;h2 id=&quot;distributed-tracing-in-kafka&quot;&gt;Distributed Tracing in Kafka&lt;/h2&gt;

&lt;p&gt;This was another workshop by &lt;a href=&quot;https://twitter.com/gamussa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viktor Gamov&lt;/a&gt;, of which the &lt;a href=&quot;https://www.youtube.com/watch?v=W0JYx7erh_0&amp;amp;feature=youtu.be&amp;amp;t=3634&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;recording&lt;/a&gt; and &lt;a href=&quot;https://speaking.gamov.io/Y8yrHk/bringing-observability-to-your-stream-processing#sHXi414&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt; are shared.&lt;/p&gt;

&lt;p&gt;Over time the complexity of your system and subsystems starts to grow and it becomes too complex to contain all the logic in your head.
In the past, each system would have its own monitoring system, every system was different in the how, what and when something is monitored.
Troubleshooting therefore could take hours, days, weeks, …&lt;/p&gt;

&lt;p&gt;Observability is just a fancy word for monitoring because monitoring sounds boring to devs.
Cindy Sridharan wrote a nice &lt;a href=&quot;https://www.oreilly.com/library/view/distributed-systems-observability/9781492033431/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;book&lt;/a&gt; about distributed tracing.
She also writes blogposts like &lt;a href=&quot;https://medium.com/@copyconstruct/distributed-tracing-weve-been-doing-it-wrong-39fc92a857df&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Distributed tracing - we’ve been doing it wrong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From her book come the pillars of observability:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A log: A raw, immutable sequence of events of a single instance of a service.&lt;/li&gt;
  &lt;li&gt;Metrics: Numerical measures aggregated at a given point of time, sourced by your log events. These tend to be actionable.&lt;/li&gt;
  &lt;li&gt;Distributed tracing: Allows us to have a total picture of a request within the application. This answers which services are involved and where there are failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kafka tends to become the de facto standard to handle data within organizations, becoming the central nervous system of any company, which makes it more and more important to include Kafka within your tracing.&lt;/p&gt;

&lt;p&gt;Some ways how you can implement tracing in kafka are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OpenTracing Java API for Kafka can be found on &lt;a href=&quot;https://github.com/opentracing-contrib/java-kafka-client&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/opentracing-contrib/java-kafka-client&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another approach is to use interceptors like &lt;a href=&quot;https://github.com/riferrei/kafka-tracing-support&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/riferrei/kafka-tracing-support&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tracing can be visualized with &lt;a href=&quot;https://github.com/jaegertracing/jaeger-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jaeger UI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;devops-theory-vs-practice-a-song-of-ice-and-tire-fire&quot;&gt;DevOps Theory vs. Practice: A Song of Ice and Tire Fire&lt;/h2&gt;

&lt;p&gt;One of the last, slightly more light-hearted talks took place in the last afternoon of the conference. &lt;a href=&quot;https://twitter.com/jbaruch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Baruch Sadogursky&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gamussa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viktor Gamov&lt;/a&gt; opened
their talk with a skit in which Baruch spouted well-known DevOps clichés, like “Everything must be 100% automated”, “We do Continuous Security well” or “Your problems are so unique, no vendor can possibly understand them”
while Viktor translated this into the harsh truth that none of these are absolute or applicable in every situation and you have to adopt your approach accordingly. While entertaining, it also laid bare the truth that none of these
devops principles act as a Silver Bullet.&lt;/p&gt;

&lt;p&gt;Next they explained the idea of the Cargo Cult, a term which originated in Oceania when the people there, after the Second World War was over, started building airplanes out of straw.
They believed that this was the cause of the technological advancements and prosperity (cargo) which arrived on these islands at the same time as the actual airplanes, and that when they rebuilt these planes, more cargo would automatically follow.
The analogy with the modern tech landscape, is that some people might believe that by merely adopting the latest techniques and tools (Kubernetes, Docker, DevOps, …), all other problems will automatically solve themselves.
From experience, we all know this isn’t true.&lt;/p&gt;

&lt;p&gt;Instead, we should analyse where we are as an organisation and determine which steps to take to progress to where we want to be before just adopting something like Kafka because people at 
conferences give nice demos and workshops and tell you all will be fine. 
Before we take a decision like this, we first need to be aware of the answers to The Four Questions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oracle-code-one-2019/four-questions.png&quot; alt=&quot;&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Answering the last two questions requires an entirely different talk, but the first one we can try and tackle using a maturity model, popularized by &lt;a href=&quot;https://www.martinfowler.com/bliki/MaturityModel.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Martin Fowler&lt;/a&gt;.
Maturity models have their own share of problems and critics, but Baruch and Viktor pose that, if done right, they can help your organization or team make signifant 
advancements towards being ready to tackle your business problems in a more efficient way.&lt;/p&gt;

&lt;p&gt;Now the question is “How do you write a &lt;em&gt;good&lt;/em&gt; maturity model?”. Using an example, simply created in Excel, Viktor and Baruch try to explain that the most important things to
take into account for a maturity model are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should describe a process, not an end goal.&lt;/li&gt;
  &lt;li&gt;It should be tailored specificly to your case, not exactly as prescribed in “the book”.&lt;/li&gt;
  &lt;li&gt;It should focus on outcomes, not specific tools to use.&lt;/li&gt;
  &lt;li&gt;It should constantly be evaluated and evolve, not written once and then forgotten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/oracle-code-one-2019/dos-donts.png&quot; alt=&quot;&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The answer to the question “Is it even a good tech?” can be answered by advisory / research companies like Forrester or Gartner but because these are for-profit
companies their suggestions might be skewed towards the companies which are already established / rich or more in the limelight. A better option might be to look
at the &lt;a href=&quot;https://www.thoughtworks.com/radar&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thoughtworks Tech Radar&lt;/a&gt; which is publicly available and provides an assesment of a whole array of modern
technologies and determines if you should Adopt, Assess, Trial or Hold these.&lt;/p&gt;

&lt;p&gt;Moreover, you could argue that it’s even better to extend the question to “Is this even a good tech &lt;em&gt;for our team&lt;/em&gt;”, in which case it’s a good idea to &lt;a href=&quot;https://www.thoughtworks.com/radar/how-to-byor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;build your own tech radar&lt;/a&gt;
which at JWorks we &lt;a href=&quot;https://ordina-jworks.github.io/tech-radar&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;also did&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;progressive-web-applications-vs-native&quot;&gt;Progressive Web Applications VS Native&lt;/h2&gt;

&lt;p&gt;One of the few frontend (but still a bit Oracle) related talks was about PWA’s, a topic which we are also starting to explore at JWorks, given by Marta Hawkins.&lt;/p&gt;

&lt;p&gt;Ionic gives a good definition of a Progressive Web Application:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Progressive Web App (PWA) is a web app that uses modern web capabilities to deliver an app-like experience to users. These apps meet certain requirements (see below), are deployed to servers, accessible through URLs, and indexed by search engines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The premise of the talk was mainly about comparing the capabilities of a PWA compared to a classic native application, and in most cases refuting the arguments which could be brought against PWA’s.
The first such argument is that you cannot access all native phone functionality, but recently the support for almost all of these functions, like taking pictures, watching videos, 
using location information, using gestures, … have been made available for PWA’s.&lt;/p&gt;

&lt;p&gt;All major browsers are now also supporting almost all PWA functionality. The next obvious argument is that if you choose to write a native application you have to maintain multiple code bases,
whereas you only need to write one application and distribute it independently of app stores in the other case. This also means you can release new functionality
without having to go through the process of getting it approved on the respective app stores, and your application will be more easily discoverable on your 
search engine of choice. All of these arguments result in the fact that PWA’s are better to drive user engagement.&lt;/p&gt;

&lt;p&gt;Next Marta talked about the preconditions you need to have your web application recognized as ‘progressive’, of which there are only three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oracle-code-one-2019/pwa-conditions.png&quot; alt=&quot;&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A service worker is what provides the PWA with its special capabilities.
This is what enables offline functionality, installability, notifications, request caching, … Google’s &lt;a href=&quot;https://developers.google.com/web/ilt/pwa/introduction-to-service-worker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;developer guide&lt;/a&gt; describes it as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A service worker is a type of web worker. It’s essentially a JavaScript file that runs separately from the main browser thread, intercepting network requests, caching or retrieving resources from the cache, and delivering push messages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course not everything is sunshine and rainbows, so next Marta also warned for some pitfalls they already encountered in the past:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Browser support is good, but not complete. Chrome is the frontrunner and Safari is notably lagging behind.&lt;/li&gt;
  &lt;li&gt;The same is true for the different OS’s. Android treats PWA’s as first class citizens, on iOS you need to really go and find the ability to install the app to your home screen.&lt;/li&gt;
  &lt;li&gt;Developing and debugging the applications is also not trivial. Chrome is developing and delivering better debugging tools.&lt;/li&gt;
  &lt;li&gt;Caching is never trivial, but especially in service workers it sometimes seems to behave in mysterious ways.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://static.rainfocus.com/oracle/oow19/sess/1552707018783001LVCE/PF/PWA_final_1568924085498001Vope.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Slides&lt;/a&gt; of this talk are also available.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion, we had a great time in San Francisco (and also at the conference).
It was noticeable that Oracle products were given preferential treatment, and the fact that it is so big means that sometimes it was not easy to keep track of which talks were interesting to follow.
On the other hand, almost all the talks we followed were of a high standard and we learned a lot.
And the Groundbreakers Hub was an awesome place to connect with other developers.&lt;/p&gt;

&lt;p&gt;10/10 would go again.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Glenn&quot;, &quot;last_name&quot;=&gt;&quot;Van De Putte&quot;, &quot;github&quot;=&gt;&quot;gvdp&quot;, &quot;twitter&quot;=&gt;&quot;vdpglenn&quot;, &quot;permalink&quot;=&gt;&quot;/author/glenn-van-de-putte/&quot;, &quot;avatar&quot;=&gt;&quot;glenn-van-de-putte.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;email&quot;=&gt;&quot;glenn.vandeputte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Glenn is a Java Consultant at Ordina Belgium. With a background in testing, his main interests lie in all things automation, from automated testing to CI/CD and cloud automation.&quot;}</name><email>glenn.vandeputte@ordina.be</email></author><category term="Conference" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">Oracle Code One is the successor of the well-known JavaOne conference, organised each year in San Francisco, California. Although still quite Oracle- and Java-heavy, the rebranding (and collocation with Oracle Open World) means that there were also a lot of talks about other programming languages, developer tools, … Our colleague Tom van den Bulck and ex-colleague Tim Ysewyn were invited to give their Workshop on Kafka Streams and enjoy the rest of the conference. In this blog post we share our impressions and experiences.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/oracle-code-one-2019/code-one.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/oracle-code-one-2019/code-one.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">eXperience Agile 2019</title><link href="https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019.html" rel="alternate" type="text/html" title="eXperience Agile 2019" /><published>2019-11-12T00:00:00+00:00</published><updated>2019-11-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019.html">&lt;p&gt;This year, it was already the 6th edition of eXperienceAgile, organised in Portugal, Lisbon by Radtac and Hugo Lourenço - a DevOps and Enterprise Agility Advisor. This global conference focuses on gathering wisdom and best practices on business agility as well as technical agility, and therefor it was the perfect conference for JWorks Agile &amp;amp; DevOps practitioners and enthusiasts.&lt;/p&gt;

&lt;p&gt;The first day contained fourteen talks on team and business agility with speakers from Europe and America, whereas the second day contained DevOps talks and deep-dive workshops with some of the speakers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/experienceagile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@experienceagile&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/hashtag/XA19&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;#xa19&lt;/a&gt; / &lt;a href=&quot;http://www.experienceagile.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;experienceagile.org&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#half-agile--5-leadership-mistakes-diluting-your-transformation-by-jesse-fewell&quot;&gt;Half-Agile:  5 Leadership Mistakes Diluting Your Transformation, by Jesse Fewell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-toyota-flow-system-by-nigel-thurlow&quot;&gt;The Toyota Flow System, by Nigel Thurlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-agile-futurist-by-mario-moreira&quot;&gt;The Agile Futurist, by Mario Moreira&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escape-velocity-by-doc-norton&quot;&gt;Escape Velocity, by Doc Norton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;half-agile-5-leadership-mistakes-diluting-your-transformation-by-jesse-fewell&quot;&gt;Half-Agile: 5 Leadership Mistakes Diluting Your Transformation, by Jesse Fewell&lt;/h2&gt;

&lt;p&gt;Jesse shares with us five patterns on our journey to an Agile organisation. 
He explains why this journey can be so hard, especially for leaders (team leads, scrum masters, technical leads, managers or executives).&lt;/p&gt;

&lt;p&gt;You start with a good decision, then for some reason you get frustrated and agitated. Once you discover the mistake made, you can take action to correct it.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Jessy Fewell&quot; src=&quot;/img/2019-11-12-experience-agile-2019/jesse-fewell.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;buy-in-engagement&quot;&gt;Buy-in, Engagement&lt;/h3&gt;

&lt;p&gt;Very often you have a good idea and just tell the people around you to execute it. 
But along the way you forget to explain the reasoning behind this idea, which leads to misunderstanding and frustration.
As leaders it’s your job to create context for the change and communicate methodically and excessively. 
This is hard, because it takes time, repetition and requires patience.&lt;/p&gt;

&lt;h3 id=&quot;impact&quot;&gt;Impact&lt;/h3&gt;

&lt;p&gt;The first good step, as a leader, is to take initiative. 
Other departments may not want to be Agile, so you will start alone. You’ll be the role model to set the tone for the organisation.&lt;/p&gt;

&lt;p&gt;However, this leads to a team trying to be Agile in an environment that is not Agile. 
And you end up doing Water-SCRUM-fall or Modern Waterfall.&lt;/p&gt;

&lt;p&gt;So you need to take the next action: invite others to the table.
If you want the Agile journey to move forward it has to be about Agile, not just YOUR Agile. 
Allow the journey to evolve instead of following a fixed methodology.&lt;/p&gt;

&lt;h3 id=&quot;practices&quot;&gt;Practices&lt;/h3&gt;

&lt;p&gt;You often tell colleagues to follow standard techniques, including daily stand-ups, spring planning, retrospectives, etc… 
These are practices that everyone uses. 
So, if you want to be like everyone else, you should definitely apply these techniques.&lt;/p&gt;

&lt;p&gt;Let me tell you a little secret: if you try to be like everyone else, you’ll never be ahead of everyone else!&lt;/p&gt;

&lt;p&gt;You need to experiment, try things out. 
Not just do things because others do them or because you read them in a book.
You need to find YOUR Agile. 
Don’t just copy-paste your Agile.&lt;/p&gt;

&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;/h3&gt;

&lt;p&gt;Everybody is struggling with more complexity, more change and more requirements, but there are loads of good opportunities and you want to do all of them.&lt;/p&gt;

&lt;p&gt;People get overwhelmed by this, because there is so much work and now we want to do an Agile change or transformation.&lt;/p&gt;

&lt;p&gt;You should try not to over-commit.
Find your One Thing that you can focus on, so that you can make more progress with the same effort.
Learn to say NO, with diplomacy.&lt;/p&gt;

&lt;h3 id=&quot;talent&quot;&gt;Talent&lt;/h3&gt;

&lt;p&gt;When you want to go on an Agile journey, you want everyone else to get better. 
As a leader, you take the role of a mentor. 
You show and teach that you are Agile and they need to follow you.&lt;/p&gt;

&lt;p&gt;But you get frustrated, because they are not changing fast enough. 
You feel like you are Agile, but they are not.
Because you forgot about yourself as the leader. 
If you want to transform your organisation, you need to first transform yourself as a leader in the organisation.&lt;/p&gt;

&lt;p&gt;You need to challenge your own assumptions. 
Take a leadership training or workshop and get inspired.
Maybe you need to think about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;delegating&lt;/strong&gt; more instead of doing;&lt;/li&gt;
  &lt;li&gt;shifting from explaining methods to articulating &lt;strong&gt;goals&lt;/strong&gt;; or&lt;/li&gt;
  &lt;li&gt;instead of telling people what to do, give them the &lt;strong&gt;ability to do it themselves&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This personal growth requires that you go on a long-term journey of transforming yourself as a leader.&lt;/p&gt;

&lt;h2 id=&quot;the-toyota-flow-system-by-nigel-thurlow&quot;&gt;The Toyota Flow System, by Nigel Thurlow&lt;/h2&gt;
&lt;p&gt;We all know that Toyota has always been a frontrunner with regard to Lean thinking, bringing the customer in the center point of attention and establishing flow in the value creation pipeline. 
The Toyota Production System (TPS) - with its two pillars: continuous improvement &amp;amp; respect for people - as developed by Taiichi Ohno and Eiji Toyoda, is globally recognised as a strategic and human centered foundation to become a Lean and thriving enterprise. 
On this foundation ‘the Toyota Way’ has been developed as a philosophy with a set of principles and behaviors that can guide companies through their change and towards the right mindset.&lt;/p&gt;

&lt;p&gt;Recently, with the Toyota Flow System (TFS) the Toyota thinkers take this strategy yet a few steps further with the purpose of being an inspiration for companies with human centricity, continuous improvement in their strategic roadmap. 
Together with co-facilitator Dirk van Goubergen, Nigel Thurlow - Chief of Agile, Toyota Connected - has given us a hands-on introduction to the extra dimension that this evolution entails.&lt;/p&gt;

&lt;h3 id=&quot;building-on-lessons-learnt-and-extensive-research&quot;&gt;Building on lessons learnt and extensive research&lt;/h3&gt;
&lt;p&gt;Nigel Thurlow puts it this way:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;There are fantastic lessons to be learned all around, from Systems Thinking to Scrum. 
The body of knowledge at our disposal is immense, and there are countless ways to apply it. 
But to truly leverage this wealth of information, we must &lt;strong&gt;change the narrative&lt;/strong&gt; and realize that &lt;em&gt;context&lt;/em&gt; is everything: different environments call for different approaches and tools, and with something as complex as a business transformation, sticking to a one-size-fits-all methodology is dangerous. 
Instead, we need to be able to &lt;strong&gt;mix and match&lt;/strong&gt; the techniques that best suit our situation, while ensuring that key aspects of a transformation are considered.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;get-the-basics-right&quot;&gt;Get the basics right&lt;/h3&gt;
&lt;p&gt;With the &lt;em&gt;Red Bead experiment&lt;/em&gt;, we experienced that we need to verify that companies apply the right kind of Lean, and not the &lt;em&gt;evil&lt;/em&gt; version, when trying to &lt;strong&gt;eliminate waste&lt;/strong&gt;. 
Waste is not caused by the workers most of the time, but by the system. 
Failing to recognise this can bring leadership to take the wrong decisions and apply counterproductive measures - like hiring or firing employees, or introducing contradictory KPIs among workers, thus creating steady erosion of psychological safety within teams - and in the meantime not tackling the actual process issues in the pipeline.&lt;/p&gt;

&lt;p&gt;Three questions can help us define waste, explained by Dirk:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is value for the customer?&lt;/li&gt;
  &lt;li&gt;What products are we making?&lt;/li&gt;
  &lt;li&gt;Which activities contribute to this result?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing activities and highlighting the ones that are simply &lt;em&gt;uselessly getting tired&lt;/em&gt; is a very important exercise for every contributor in the process, whether it be workers in a factory, developers, testers, consultants, or third parties or managers. 
Show respect for people by allowing them to focus on value adding activities. 
Since the management and people with leadership roles often organise the system, it is key they recognise this responsibility.&lt;/p&gt;

&lt;p&gt;Once the activities are inspected and the process of value creation is established, the next step is to enable flow, by designing your &lt;em&gt;value stream like a river&lt;/em&gt;, allowing the value to grow without interruption, without waiting time or blockages. 
Here again, managers have a task to focus on not being a flow stopper. 
It is important for them to acknowledge that &lt;strong&gt;resource efficiency can kill flow efficiency&lt;/strong&gt;. 
Just like a train company should focus on timely arrival and departure and not on getting as much travelers in one train by waiting until it’s completely full before taking off again.
For Toyota, as well as for any development team, the key is to ensure a &lt;em&gt;flexible workforce, with engaged cross-trained employees&lt;/em&gt; that have a thorough understanding of the value adding processes throughout the company. 
This enables them to flexibly partake in flow efficiency whenever and wherever needed.&lt;/p&gt;

&lt;h3 id=&quot;toyota-flow-system-the-dna-for-organisations&quot;&gt;Toyota Flow System, the DNA for organisations&lt;/h3&gt;
&lt;p&gt;The TFS model aims to &lt;em&gt;sustain&lt;/em&gt; the flow of value to the customer. 
And Toyota offers a body of knowledge that helps companies to understand the different aspects of &lt;strong&gt;customer first value delivery&lt;/strong&gt; with a systemic approach to optimize for the whole, and not the subparts, or silos.&lt;/p&gt;

&lt;p&gt;These aspects - visualised as three &lt;em&gt;pillars&lt;/em&gt; - are supporting this motto and form the DNA of the Toyota Flow System. But let it be clear that these three cannot exist without each other. 
The helix structure of the pillars points to their intertwined importance, making the structure trustworthier and stronger.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Complexity thinking: understanding uncertainty and complex adaptive systems&lt;/li&gt;
  &lt;li&gt;Distributed Leadership: the behavior patterns of those who lead people and teams&lt;/li&gt;
  &lt;li&gt;Team Science: the science of teams, their interdependencies and interactions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For every pillar, Toyota has listed a number of possible theories and practices that need to be considered when trying to achieve the motto. 
For every context, the combination of selected theories, practices and models can be different. 
By giving this list of researched and tested material, they offer a good starting point for companies on a transformation journey, allowing them make the founded decisions within their own particular business context.&lt;/p&gt;

&lt;p&gt;Take a good look at what Toyota suggests for every pillar. 
There sure is a lot to discover!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;TFS&quot; src=&quot;/img/2019-11-12-experience-agile-2019/Toyota-Flow-System.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Key takeaways were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Teams need to learn &lt;em&gt;how&lt;/em&gt; to do team work and be more than the sum of the team members. 
Teams do not have the set of skills and behaviors automatically, and so they need coaching to focus on team communication and collaboration aspects as well as team personality dynamics.&lt;/li&gt;
  &lt;li&gt;Intent based leadership - as coined by D. Marquet - helps you to move authority where the information is available. 
It is about designing an environment where people give intent to each other and they feel valued and proud of their work. 
It is about actively giving control to people who maintain the information so they can make informed decisions.&lt;/li&gt;
  &lt;li&gt;Scrum is disciplined PDCA - the Plan/Do/Check/Act (or Adjust) approach from William Edwards Deming&lt;/li&gt;
  &lt;li&gt;Beware of &lt;em&gt;failure demand&lt;/em&gt;, which is waste disguised as value for the customer and service excellence.&lt;/li&gt;
  &lt;li&gt;People are spending the best years of their lives in companies.. take up the responsibility to make it as enjoyable as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More reading: &lt;a href=&quot;https://planet-lean.com/introducing-the-toyota-flow-system/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://planet-lean.com/introducing-the-toyota-flow-system/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The author of the mentioned article wraps it up saying:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is the first time someone has brought all these elements together and made sense of them, explaining how they fit within a company like Toyota. 
Complexity thinking is a change in mental models and management practices. 
The Toyota Flow System is the first to externalize it with tools and in a contextual setting. 
The next step will be testing it in the field in different contextual settings, to see what works and what doesn’t. 
It will be exciting to see how it evolves, which we are sure it will. 
That’s the beauty of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-agile-futurist-by-mario-moreira&quot;&gt;The Agile Futurist, by Mario Moreira&lt;/h2&gt;
&lt;p&gt;This was an energizing talk, giving us a view on the trends in the Agile movement for the coming ten years. 
Mario Moreira is an enthusing and influential Agile transformation Leader, Agile enterprise coach and change agent who has written four books a.o. &lt;em&gt;Being Agile: Your Roadmap to Successful Adoption of Agile&lt;/em&gt;, and &lt;em&gt;The Agile enterprise: Building and Running Agile organizations&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What is Agile?… is what he asked the eager crowd.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s a set of Values and Principles&lt;/li&gt;
  &lt;li&gt;focused on the delivery of value to the customer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is Agile not?… on the other hand.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a certification&lt;/li&gt;
  &lt;li&gt;a tool&lt;/li&gt;
  &lt;li&gt;a silver bullet&lt;/li&gt;
  &lt;li&gt;a process&lt;/li&gt;
  &lt;li&gt;it’s also not merely &lt;em&gt;redefining roles&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;and… it is definitely not &lt;em&gt;undisciplined&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;agile-trends-for-2029&quot;&gt;Agile trends for 2029&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;agiles-future&quot; src=&quot;/img/2019-11-12-experience-agile-2019/Agiles-Future.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;bring-back-the-basics&quot;&gt;Bring Back the Basics&lt;/h4&gt;

&lt;p&gt;We will all go back to the core, to rediscover and be inspired by the central purpose and initial intent of the Agile movement.
Returning to the core implies that we need to make sure we understand the heart of the &lt;a href=&quot;https://agilemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Agile manifesto&lt;/a&gt;, that we try and urge to live the principles and lead with the items on the left in mind.&lt;/p&gt;

&lt;h4 id=&quot;stop-doing-agile-for-agiles-sake&quot;&gt;Stop doing Agile for Agile’s sake&lt;/h4&gt;

&lt;p&gt;Agile is not the goal or outcome. 
So let’s stop talking about it as if it were.&lt;/p&gt;

&lt;p&gt;Rather we should look at the purpose for applying Agile.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better interactions&lt;/li&gt;
  &lt;li&gt;Better working software (or services and products for that matter)&lt;/li&gt;
  &lt;li&gt;Better customer collaboration&lt;/li&gt;
  &lt;li&gt;Ability to respond to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And people will gradually focus on better business outcomes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deliver increased Customer &lt;strong&gt;Value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Optimize the &lt;strong&gt;Flow&lt;/strong&gt; for faster delivery&lt;/li&gt;
  &lt;li&gt;Increase &lt;strong&gt;Quality&lt;/strong&gt; with Feedback Loops&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;leading-with-uncertainty&quot;&gt;Leading with uncertainty&lt;/h4&gt;

&lt;p&gt;Because leading with uncertainty is the smarter thing to do, in a world where we - as customers - don’t always know what we want, we - as product creators - don’t always know exactly how to build the product, and where things and people tend to change along the way.&lt;/p&gt;

&lt;p&gt;Uncertainty requires the right behavior and mindset to tackle it: e.g. cultivate and kindle a discovery mindset, experimental and incremental thinking, and implementing feedback loops.
We all need to practice and keep on practicing, to walk the talk, and eventually lead by example.&lt;/p&gt;

&lt;h4 id=&quot;agile-throughout-the-enterprise&quot;&gt;Agile throughout the enterprise&lt;/h4&gt;

&lt;p&gt;The way organisations are structured today is a remnant of what was required in the industrial age. 
But focusing on the customer and tracking the value stream has led to insights on how work and collaboration should be organised in a smarter, more valuable way, for all parties involved. 
Working together cross-departmental with an empowered team, focusing on a common &lt;em&gt;customer inspired&lt;/em&gt; goal, helps to limit handovers, approval flows and delayed communication. 
To make this happen, every person who’s directly involved in this end-to-end value stream, from any silo throughout the company, needs to be allowed and be able to work dedicatedly, and transparently as well as make local decisions on matters that require her/his expertise.&lt;/p&gt;

&lt;p&gt;This way of working depends upon efficient alignment and trust… in people and their abilities, to make the magic happen. 
Trust is not given, it should be &lt;em&gt;a given&lt;/em&gt; that people perceive and recognise, from the moment they first enter the company building.
When trust is present, people take decisions, and cultivate ownership.&lt;/p&gt;

&lt;h4 id=&quot;solve-holistic-problems&quot;&gt;Solve Holistic Problems&lt;/h4&gt;

&lt;p&gt;The sky is the limit. And it always has been for the intrepid.
No business domain or sector is simple and predictable enough to allow it to acquiesce in the industrial way of working.
With IT and AI permeating every nook and cranny of this global society, and with companies being ushered by market disruptions to the verge of survival, we need to realise that focusing on value creation and optimizing the whole (the team, the company, the system) to service the customer is the smartest way forward.&lt;/p&gt;

&lt;p&gt;Seeing and understanding the bigger picture of what we - as a team, as a company, as a sector - deliver to society is the next step.
From then on we will be solving holistic problems, in a holistic way. 
With our thriving society as the customer.&lt;/p&gt;

&lt;h2 id=&quot;escape-velocity-by-doc-norton&quot;&gt;Escape Velocity, by Doc Norton&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;doc-norton-introduction&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-introduction.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A recurring problem with agile projects is reporting. 
When you search for information online, everyone seems to encounter the same problems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What metrics should I use?&lt;/li&gt;
  &lt;li&gt;How can I make the team’s performance visible?&lt;/li&gt;
  &lt;li&gt;How can I identify possible bottlenecks?&lt;/li&gt;
  &lt;li&gt;How do I forecast?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most common metric that everyone uses is velocity. 
And, as the title of this section already indicates, that’s not always a good idea. 
&lt;a href=&quot;http://docondev.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Doc Norton&lt;/a&gt; had a good talk at this conference as well as the accompanying workshop the day after.&lt;/p&gt;

&lt;p&gt;In short, velocity is a lagging indicator and thus not good for predictions. 
Now, what does this mean, a lagging indicator? 
It indicates data from the past, it lags behind.&lt;/p&gt;

&lt;p&gt;Another problem when using only velocity as a metric is that it tries to explain a complex system. 
A dip or peak in velocity doesn’t explain anything, it’s just an indication that something might be wrong. 
To find the real cause, more metrics are needed.&lt;/p&gt;

&lt;p&gt;So as Doc said:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity is a &lt;strong&gt;lagging indicator&lt;/strong&gt; of a &lt;strong&gt;complex system&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as a result:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity is &lt;strong&gt;not good for predictions&lt;/strong&gt; and &lt;strong&gt;not good for diagnostics&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;predictions&quot;&gt;Predictions&lt;/h3&gt;
&lt;p&gt;Everyone has already experienced the typical management question during the lifecycle of a project:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;How long will it take to deliver feature X?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The usual solution is to take the velocity of the past sprints, estimate the feature and then simply divide the feature by the velocity. 
That gives you the amount of sprints needed to complete the feature.
Now, think about this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Are these forecasts accurate? &lt;em&gt;They might be, we don’t know for sure.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Are these forecasts definite? &lt;em&gt;Possibly.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Are these forecasts probable? &lt;em&gt;Again, they might be.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example given by Doc was the following:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity (11, 10, 9), backlog size of 130 and start date is today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, the velocity in this case is 10: &lt;code class=&quot;highlighter-rouge&quot;&gt;130 / 10 = 13&lt;/code&gt;.&lt;br /&gt;
So the estimation would be that the backlog is finished in 13 sprints. 
My experience is that these estimations are usually incorrect since 13 weeks is too far in the future.&lt;br /&gt;
A great tool that he showed was the Throughput Forecaster, an Excel file in which you can enter a lot of data and in return it shows the probability of achieving the goal.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;throughput-forecasting&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-throughput.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More details about the tool above will follow in a future blogpost.&lt;/p&gt;

&lt;h3 id=&quot;diagnostics&quot;&gt;Diagnostics&lt;/h3&gt;
&lt;p&gt;As we have already said above, a dip or peak in velocity can indicate that there might be a problem with the team.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;velocity-chart&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-velocity-chart.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when looking at this chart, how you do know what’s going on?
Exactly, you don’t. 
You just know something’s probably not okay.&lt;/p&gt;

&lt;p&gt;A metric that helps is the cumulative flow diagram.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;cumulative-flow-chart&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-cumulative-chart.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It shows the different stages of sprint items during the lifecycle of the sprint. 
You could see that it takes too long to validate an item or to deploy it.&lt;br /&gt;
For example, the image above shows that the items stay too long in &lt;em&gt;Ready for Approval&lt;/em&gt;. 
The team can use this to address the problem.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;velocity-workshop&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-workshop-cumulative.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This picture was taken during the workshop from Doc about this subject where he went into more detail.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Velocity is a metric for Agile teams, but only velocity doesn’t indicate much. 
It needs to be combined with other metrics in order to resolve problems.
And use the metrics together with the team so they can detect themselves when there are problems, so they can be resolved as soon as possible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Metrics are not &lt;strong&gt;just&lt;/strong&gt; for managers, metrics are for teams.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kristof&quot;, &quot;last_name&quot;=&gt;&quot;Eekhaut&quot;, &quot;github&quot;=&gt;&quot;kristof-eekhaut&quot;, &quot;permalink&quot;=&gt;&quot;/author/kristof-eekhaut/&quot;, &quot;avatar&quot;=&gt;&quot;kristof-eekhaut.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java consultant&quot;, &quot;email&quot;=&gt;&quot;kristof.eekhaut@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kristof is a senior Java consultant and architect, who has a passion for Agile software development, Domain-Driven Design and Collaborative modelling. He is eager to learn new technologies and architectures. He loves working with a team to build complex applications that users enjoy.&quot;}</name><email>kristof.eekhaut@ordina.be</email></author><category term="Conference" /><category term="Agile" /><category term="Conference" /><summary type="html">This year, it was already the 6th edition of eXperienceAgile, organised in Portugal, Lisbon by Radtac and Hugo Lourenço - a DevOps and Enterprise Agility Advisor. This global conference focuses on gathering wisdom and best practices on business agility as well as technical agility, and therefor it was the perfect conference for JWorks Agile &amp;amp; DevOps practitioners and enthusiasts.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-11-12-experience-agile-2019/ExperienceAgile2019.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-11-12-experience-agile-2019/ExperienceAgile2019.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ordina Young Professional Programme 2019 Summer Edition</title><link href="https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition.html" rel="alternate" type="text/html" title="Ordina Young Professional Programme 2019 Summer Edition" /><published>2019-10-24T00:00:00+00:00</published><updated>2019-10-24T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition</id><content type="html" xml:base="https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;65 young professionals started the Ordina Young Professional Programme this summer, on the 1st of August. 
JWorks counted 8 trainees: Mohammed, Jasper, Nicholas, Lennert, Duncan, Lore, Brecht and Imad. 
All looking for a challenge and a fresh start. Most of them just graduated, Brecht on the other hand already had other work experience. 
During the young professional programme, we were introduced to a wide range of technologies.
Technologies that play an important role in IT. 
The courses were focused mainly on providing a very hands-on experience as to learn how the different technologies work in practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the three months long programme there were two main periods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The first six weeks were filled with various trainings: security, backend, frontend, soft skill trainings,…&lt;/li&gt;
  &lt;li&gt;During the remaining six weeks we got split up into two teams to work on different dev cases: Chatbot Dina and Zero Plastic Rivers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blogpost will talk about both periods separately below. The first period is further separated into technical and non-technical trainings.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-trainings&quot;&gt;Technical trainings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#non-technical-trainings&quot;&gt;Non-technical trainings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dev-cases&quot;&gt;Dev cases&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;first-day&quot;&gt;First Day&lt;/h2&gt;
&lt;p&gt;On our first arrival at Ordina, we were warmly welcomed by Anja, our Resource Manager, and two of the Practice Managers: Ken and Yannick. 
We were introduced to the structure of Ordina and got to know some of the other trainees. 
After the introduction, we were given a tour of the entire building, during which we met some of the colleagues at JWorks.
Four of the trainees already did an internship at Ordina before coming to work officially, so they already knew a lot of the colleagues in Mechelen.
This didn’t make any difference however, since everyone was very open and welcoming.
Finally, we got our laptops and the keys to our cars so that the next day we could get started with the courses focused on both technical and soft skills.&lt;/p&gt;

&lt;h1 id=&quot;technical-trainings&quot;&gt;Technical trainings&lt;/h1&gt;

&lt;p&gt;During the six weeks of trainings there were a lot of very interesting technical sessions. 
The most important ones to us are discussed below.
Other than those mentioned below, there are a lot of others, such as the course on Git, DevOps, Java,…&lt;/p&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;
&lt;p&gt;During the young professional programme the Spring Boot course was taught by &lt;a href=&quot;/author/ken-coenen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ken Coenen&lt;/a&gt;.
He explained what sits at the core of Spring and how Spring Boot works. 
Before taking a deep dive into Spring Boot, we were taught the ins and outs of the Spring Framework.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;SpringBoot&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/SpringBoot.png&quot; width=&quot;20%&quot; height=&quot;20%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot takes away a lot of configuration by providing defaults based on industry standards. 
Therefore, Spring Boot makes it easy to create stand-alone, production grade Spring based applications that need minimum configuration. 
They still allow you to take the whole configuration in your own hands and of course provide a handful of third-party libraries to get you started. 
When generating a new Spring Boot project, you get to pick between a Maven or Gradle based project.&lt;/p&gt;

&lt;h3 id=&quot;day-1&quot;&gt;Day 1&lt;/h3&gt;
&lt;p&gt;On the first day, we took a first dive into the core fundamentals: Inversion Of Control (IOC), Bean Injection, and so on. 
In the afternoon, we went further and looked into Spring Web Services and Spring Security.&lt;/p&gt;

&lt;h3 id=&quot;day-2&quot;&gt;Day 2&lt;/h3&gt;
&lt;p&gt;The second day, we built a small application to test the range of possibilities Spring Boot offers. 
The app was built to provide a system to save houses with their address, the inhabitants and some of the features it has, like the type of garage.
It was a fun little project which taught us a lot of what Spring Boot can be used for. 
We’ve all used Spring Boot in our dev case, so it was definitely worth following.&lt;/p&gt;

&lt;h4 id=&quot;duncan-casteleyn&quot;&gt;&lt;a href=&quot;/author/duncan-casteleyn&quot;&gt;Duncan Casteleyn&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;What I really liked about Ken’s Spring Boot session was that we did a lot of hands-on live coding.
This made the course very interactive, providing possibilities for both feedback to Ken as input of our own.
I learned a lot from this session, even though I already had a lot of prior knowledge of Spring Boot.
The theoretical start on Spring was a very useful refresh to get up to speed again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;The Docker course, given by &lt;a href=&quot;/author/tom-verelst&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tom Verelst&lt;/a&gt;, started with a theoretical explanation about the advantages of containerization, the difference with virtual machines and how a container is built. 
The main part of the course was a hands-on session. 
We learned to create an image of our application and push it to Docker hub, spin up a Docker container and write efficient Docker compose files.&lt;/p&gt;

&lt;h4 id=&quot;brecht-porrez&quot;&gt;&lt;a href=&quot;/author/brecht-porrez&quot;&gt;Brecht Porrez&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;During this training I really experienced the advantages of Docker. 
I now use it almost daily during the Zero Plastic Rivers dev case.
For example, if I need a test database, I quickly start up a Docker container.
If I have written a backend application, I quickly turn it into a container so my frontend colleagues can test with it and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Kubernetes&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Kubernetes.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To better understand the use of Docker, Tom also gave us an introduction to Kubernetes (K8s). 
In the K8s session, we learned to work with the commands of Kubernetes by using them on Minikube, a tool to run Kubernetes locally. 
Later that day we learned to deploy a prebuilt application to Minikube. 
We wrote our own deployment files for the frontend, backend and RabbitMQ. 
By doing this we had more insight into the possibilities of Kubernetes.&lt;/p&gt;

&lt;h4 id=&quot;nicholas-meyers&quot;&gt;&lt;a href=&quot;/author/nicholas-meyers&quot;&gt;Nicholas Meyers&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’m very interested in how applications are built and deployed, which is why I found the Kubernetes session very interesting. 
I’d love to learn more about this technology in the future. 
The hands-on way of working helped me a lot, because this was quite new to me, which made it not the easiest course to follow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;test-driven-development&quot;&gt;Test-Driven Development&lt;/h2&gt;

&lt;p&gt;In the DevOps track, we received an interesting lesson about Test-Driven Development from &lt;a href=&quot;/author/pieter-van-hees&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pieter Van Hees&lt;/a&gt;.
In school, TDD is usually not taught and testing comes after developing. 
What TDD aims to do is speeding up the development process by thinking about what exactly you want your program to do and which exact results you want.
After pouring those requirements into unit tests, you can start developing and immediately testing whatever you wrote. 
There are many advantages of working with TDD, but it mainly makes it easier later on in the development process. 
In the beginning, there’s more work involved because you need to write all the tests. 
In the long run however, it saves a lot of time because you can immediately spot mistakes using your unit tests.
Another good use case is refactoring code. 
With the test already in place, you can be sure that the behaviour of the functionality is still the same and no regressions are introduced as a result of the refactoring.&lt;/p&gt;

&lt;h4 id=&quot;lennert-peeters&quot;&gt;&lt;a href=&quot;/author/lennert-peeters&quot;&gt;Lennert Peeters&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’ll be looking more into TDD in the future and continue to develop using this philosophy. 
We’ve used the method in our Zero Plastic Rivers dev case.
It worked out great, saving us quite some time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/TDD.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;non-technical-trainings&quot;&gt;Non-technical trainings&lt;/h1&gt;

&lt;p&gt;Ordina organised some non-technical trainings alongside the ones above. 
These were focused on Agile and Scrum, as well as some soft skills like how to present yourself in front of others.&lt;/p&gt;

&lt;h2 id=&quot;agile--scrum&quot;&gt;Agile &amp;amp; Scrum&lt;/h2&gt;

&lt;p&gt;The first of the courses in the soft skill department was an introduction into Agile and Scrum. 
Projects ran by Ordina teams get planned in short sprints of two weeks (or even less), making sure the Product Owner is able to give frequent feedback and the team has preplanned time slots for reflection. 
A Scrum team consists of three major parts: the developer team, the Product Owner and the Scrum Master. 
The dev team isn’t broken down into multiple roles but works as one whole. 
This is a very powerful and important part about how a Scrum Team works, since having the team work as a whole allows them to be fluent in their activities. 
This gives the project a more versatile approach with less frequent congestions and problems compared to the Waterfall methodology.&lt;/p&gt;

&lt;h4 id=&quot;jasper-rosiers&quot;&gt;&lt;a href=&quot;/author/jasper-rosiers&quot;&gt;Jasper Rosiers&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;What I found most interesting about the Scrum framework and the Agile way of working is that there are many moments to reflect on how the work is going and how well the team is working together. 
The daily scrum is a very powerful moment, which made us use it in our Chatbot dev case. 
Frequent meetings with the Product Owner and keeping him close to the project is another aspect I love about the Scrum framework. 
I will definitely look more into it in the future, since I’m aiming to become a Scrum Master.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/ScrumLayout.jpg&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;agile-hands-on&quot;&gt;Agile Hands-On&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/author/michaela-broeckx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Michaëla Broeckx&lt;/a&gt; gave us an introduction to how Agile development works in practice. 
It was a very hands-on session that helped us gain more knowledge and experience in the world of Agile development. 
First, we saw how the waterfall method worked, but then quickly noticed it wasn’t perfect and had a lot of flaws. 
This is why Michaëla introduced us to Agile which helped us to communicate and work better as a team.&lt;/p&gt;

&lt;p&gt;She did this by means of a productivity game.
The game worked as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everyone stands in a circle and the group gets one (small) ball.&lt;/li&gt;
  &lt;li&gt;The team was to throw around the ball during two minutes, while a metronome was ticking in the background.&lt;/li&gt;
  &lt;li&gt;Every time the ball got caught on a tick, one task was completed.&lt;/li&gt;
  &lt;li&gt;After two minutes, the team got 30 seconds to decide on a new strategy, but were only allowed to change one thing at a time (an extra amount of balls, a different way of throwing, reverting back to a previous way of working,…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Playing this game for 6 rounds, the productivity went up exponentially. The team had matters in its own hands, which made them think for themselves.
At the end we refreshed a couple of famous agile practices such as the SCRUM framework, which is a popular way of working together to quickly and reliably release new features.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Agile%20game.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;lore-vanderlinden&quot;&gt;&lt;a href=&quot;/author/lore-vanderlinden&quot;&gt;Lore Vanderlinden&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The agile session was a very enriching experience. We learned the basic concepts of agile the right way. 
Michaëla was a very inspiring agile coach, making the learning process easier by using a hands-on way of teaching. 
She used real life examples to show us the advantages of working in an agile manner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;final-day&quot;&gt;Final day&lt;/h1&gt;

&lt;p&gt;On the day after the final course day, all the trainees gave a short presentation about themselves in front of the others and the management. 
This way, everyone present got to know the others, with both their professional interests and achievements, as well as a little on the personal side. 
Afterwards, there was a moment for networking and socializing with everyone, and an official graduation. 
The next day, the dev cases started, which we’ll explain below!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/FinalDay.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;dev-cases&quot;&gt;Dev cases&lt;/h1&gt;

&lt;p&gt;With two different dev cases, the team of 8 JWorks trainees was divided into two:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Brecht, Imad, Lennert, Lore and Mohammed worked together on the Zero Plastic Rivers case for the University of Antwerp&lt;/li&gt;
  &lt;li&gt;Duncan, Jasper and Nicholas were set on the task of designing Chatbot Dina for internal use&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zero-plastic-rivers&quot;&gt;Zero Plastic Rivers&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;ZeroPlasticRivers&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/ZeroPlasticRivers.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the young professional programme, we were asked to develop a web application to monitor the plastic as it travels through the Schelde. 
For this purpose, we’d be using GPS trackers alongside QR-scanners.
This application is aimed at a PhD carried out at the University of Antwerp that consists of visualizing the plastic flow through the entire river, from the basin to the mouth. 
After visualizing it, an efficient remediation strategy could be made.&lt;/p&gt;

&lt;p&gt;The main objective of the application is to create a monitoring network to collect plastic waste, for example, in dams, locks or water treatment plants. 
This way, plastic flows can be calculated for example in sub-basins or piers to estimate the total flow to the estuary.
To activate this system, plastic bottles in the Schelde river will be released at different strategic points with GPS trackers and personalized labels. 
These contain relevant information such as the identifier or the url to the application.&lt;/p&gt;

&lt;p&gt;The application consists of two parts.
The first part is aimed at citizens who wish to help the cause, who can notify this surveillance network when they find a bottle as shown in the image on the right.
The second part is aimed at the researchers, and could be seen as the “backend” of the project, where the data given by the GPS trackers and the citizens is visualized in a clear and orderly way.&lt;/p&gt;

&lt;h2 id=&quot;chatbot-dina&quot;&gt;Chatbot Dina&lt;/h2&gt;

&lt;p&gt;In the second DevCase, we built chatbot Dina for the Fleet department of Ordina. 
The Chatbot team set off using the Chatlayer bot framework, later to be joined by an implementation in Dialogflow. 
Since chatbots are a relatively new technology, we wanted to keep our options open and look for the best possible implementation.&lt;/p&gt;

&lt;p&gt;The Fleet department at Ordina gets a lot of repetitive questions on a daily basis, which often have easy to research answers. 
To reduce this workload and make possible a better layout of their time, we designed a chatbot using two different bot services. 
The chatbot is made accessible via multiple online channels, such as Microsoft Teams, Telegram and Slack. 
The implementations of these social media weren’t integrated within Chatlayer natively, so we had to build adapters to take care of the communication back and forth between the different platforms.&lt;/p&gt;

&lt;p&gt;The bot interprets what the user says and formulates its reply depending on the subject. 
Dina can also ask questions to get more information, use API calls to look up tire centers etc. 
Using a well-designed chatbot, conversations should feel natural to the user, as if he was talking to a human. An example can be found below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Chatlayer.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The past three months have been a really busy, but great experience. 
We met new people every day, got to learn (and teach!) new things every day and dive deeper into our interests. 
We would like to thank Ordina and the whole JWorks unit for welcoming us to the team and for giving us this opportunity!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Brecht&quot;, &quot;last_name&quot;=&gt;&quot;Porrez&quot;, &quot;github&quot;=&gt;&quot;BrechtPorrez&quot;, &quot;linkedin&quot;=&gt;&quot;brecht-porrez-a952a98&quot;, &quot;permalink&quot;=&gt;&quot;/author/brecht-porrez/&quot;, &quot;avatar&quot;=&gt;&quot;brecht-porrez.png&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;brecht.porrez@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Brecht is a Java Developer at Ordina with a passion for IoT and related technologies. He also has a special interest in writing clean and maintainable code.&quot;}</name><email>brecht.porrez@ordina.be</email></author><category term="Young Professional Programme" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit testing" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="TypeScript" /><category term="Kickstarter" /><category term="Young Professional Program" /><category term="Security" /><summary type="html">Introduction 65 young professionals started the Ordina Young Professional Programme this summer, on the 1st of August. JWorks counted 8 trainees: Mohammed, Jasper, Nicholas, Lennert, Duncan, Lore, Brecht and Imad. All looking for a challenge and a fresh start. Most of them just graduated, Brecht on the other hand already had other work experience. During the young professional programme, we were introduced to a wide range of technologies. Technologies that play an important role in IT. The courses were focused mainly on providing a very hands-on experience as to learn how the different technologies work in practice.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/kicks.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">VueJS London 2019</title><link href="https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019.html" rel="alternate" type="text/html" title="VueJS London 2019" /><published>2019-10-18T00:00:00+00:00</published><updated>2019-10-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#vuejs-london-2019-time-to-get-hyped-about-composition-api-and-vue-3&quot;&gt;VueJS London 2019: time to get hyped about Composition API and Vue 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#animations-any-vue-app-can-use-by-adam-jahr&quot;&gt;Animations any Vue app can use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scripting-in-style-whats-your-vue-by-maya-shavin&quot;&gt;Scripting in style, what’s your Vue?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#identifying-and-solving-performance-issues-in-vue-applications-by-filip-rakowski&quot;&gt;Identifying and solving performance issues in Vue applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scalable-data-visualisation-with-d3-and-vue-by-ramona-biscoveanu&quot;&gt;Scalable data visualisation with D3 and Vue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-new-router-to-guide-your-apps-by-eduardo-san-martin-morote&quot;&gt;A new router to guide your apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lightning-talks&quot;&gt;Lightning talks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vue3s-composition-api-explained-visually-by-gregg-pollack&quot;&gt;Vue3’s Composition API explained visually&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-new-composition-api-by-thorsten-luenborg&quot;&gt;The new Composition API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#live-coding-the-new-composition-api-by-jason-yu&quot;&gt;Live coding: the new Composition API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#evan-yous-keynote-launch-of-vue3-open-source-by-evan-you&quot;&gt;Evan You’s keynote: launch of Vue3 open-source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#workshop-hands-on-with-the-composition-api-by-vue-vixens&quot;&gt;Workshop: hands-on with the Composition API, by Vue Vixens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vuejs-london-2019-time-to-get-hyped-about-composition-api-and-vue-3&quot;&gt;VueJS London 2019: time to get hyped about Composition API and Vue 3&lt;/h2&gt;

&lt;p&gt;As it is a goal of me to focus more on Vue this year, I had the opportunity to travel to London to attend &lt;a href=&quot;https://vuejs.london&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueJS London 2019&lt;/a&gt;.
With a conference on the 4th of October and a workshop provided by &lt;a href=&quot;https://vuevixens.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueVixens&lt;/a&gt; on the 5th October, I was hoping to learn a lot about the future developments of Vue.
The conference and the workshop delivered on my expectations as we learned about accessibility, animations, data visualisations, performance, the new Composition API and much more.
We even had a conference call with Evan You where he announced that Vue 3 was going open source.
During the workshop, I had the opportunity to play around with the brand new Composition API.
In this blog post, I will highlight some key elements that I have learned during the conference and workshop.&lt;/p&gt;

&lt;h1 id=&quot;conference-day&quot;&gt;Conference day&lt;/h1&gt;

&lt;p&gt;With 8 talks, 1 keynote and 4 lightning talks, the conference day promised to be quite busy.
The conference was held at O2 Cineworld, which is not that far from the city center.
As a venue this was exquisite as the accommodation was top-notch, the visuals were beautiful, the talks were clearly audible and the food was great.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/venue.jpg&quot; class=&quot;image fit&quot; alt=&quot;The VueJS London venue&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Before noon, a total of 5 talks were planned with topics ranging from animations, styling, visualisations and performance to the future of the Vue router.&lt;/p&gt;

&lt;h2 id=&quot;animations-any-vue-app-can-use-by-adam-jahr&quot;&gt;Animations any Vue app can use, by &lt;a href=&quot;https://twitter.com/adamjahr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Adam Jahr&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In a scattered world, the attention of the user of our web applications is often lost quickly.
We really need to capture the user’s attention and make sure that they focus on what we want them to focus on.
For example in a web shop when the user is looking at the details of a product, we want to make sure he knows exactly where the buy button is.
To achieve this, we can divert his attention to this button by adding a small but effective animation.
We want to inspire a certain action that will keep the user on the happy path of our application, whether that is selling a product, successfully entering the details for a client registration or something other specific to our application.
With the help of the Vue directives &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter-active&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter-to&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave-active&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave-to&lt;/code&gt; we have the tools to add the necessary CSS classes that define certain states such as the default state, the hovered state and others.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/animation-transitions.png&quot; class=&quot;image fit&quot; alt=&quot;Diagram showing the animation transition directives that are available in Vue&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.vuemastery.com/courses/animating-vue/why-animate&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Course on VueMastery&lt;/a&gt; and an introduction on &lt;a href=&quot;https://medium.com/vue-mastery/intro-to-vue-animations-df9594b48800&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueMastery’s Medium&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scripting-in-style-whats-your-vue-by-maya-shavin&quot;&gt;Scripting in style, what’s your Vue?, by &lt;a href=&quot;https://twitter.com/MayaShavin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maya Shavin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Currently CSS has a lot of scaling issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everything is put into a global namespace&lt;/li&gt;
  &lt;li&gt;There are implicit dependencies&lt;/li&gt;
  &lt;li&gt;A lot of dead code can exist and is not easily found&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the use of scoped CSS, we can already tackle a lot of these issues.
Vue not only provides us with the tools to add CSS styling next to our component definition but also CSS that is specific for a component.
This is with the help of the &lt;code class=&quot;highlighter-rouge&quot;&gt;scoped&lt;/code&gt; attribute that we can add to our styling:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* your CSS here */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But we still need to watch out as some other rules might be more specific from within another component that is not scoped.
We are also lacking certain functionalities such as scripting in our styles.
So is there a way to be able to script in our CSS while also solving certain issues currently present in CSS?&lt;/p&gt;

&lt;p&gt;With the use of &lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CSS modules&lt;/a&gt;, we can already alleviate several scaling issues as we get certain functionalities such as composition.
Sadly we can not solve all CSS scaling issues such as the fact we do not have an easy way for theming.
Also, scripting is still not possible.&lt;/p&gt;

&lt;p&gt;One method of solving the remaining problems is by using &lt;a href=&quot;https://www.styled-components.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Styled Components&lt;/a&gt; for which there exists a Vue plugin called &lt;a href=&quot;https://github.com/styled-components/vue-styled-components&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-styled-components&lt;/a&gt;.
The idea behind styled components is to utilise tagged template literals to write actual CSS in your JS.
We can thus write a styled &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tag that has a switch to set a primary and secondary state like this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue-styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btnProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyledButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btnProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
  background: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;palevioletred&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;
  color: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;palevioletred&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;
`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyledButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with CSS in JS we can script in our styles.
It also allows us to solve certain scaling issues since we now have typing, composition and more.&lt;/p&gt;

&lt;p&gt;But does this mean that we should use CSS in JS by default? 
Is there still a place for vanilla CSS?
CSS in JS is ideal if you need full control over component styling and when you want dynamic styling via props.
Using the scoped CSS that is available in Vue is a good option as you isolate the styling per component.
If you reuse components between projects, you have all relevant styling close to your reused component.
The conclusion is that you should use the right tool for the right job.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://slides.com/mayashavin/styling-with-vue/fullscreen#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and &lt;a href=&quot;https://codesandbox.io/embed/style-with-vue-fzzci&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;code demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;identifying-and-solving-performance-issues-in-vue-applications-by-filip-rakowski&quot;&gt;Identifying and solving performance issues in Vue applications, by &lt;a href=&quot;https://twitter.com/filrakowski&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Filip Rakowski&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;“Every millisecond counts”, a statement that holds a lot of truth as &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/why-performance-matters&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;studies have shown&lt;/a&gt;.
To make sure that every millisecond is won and that you get the most out of your application, there are certain actions we can take on our source code to directly improve the speed of our application.&lt;/p&gt;

&lt;h3 id=&quot;lazy-loading-routes&quot;&gt;Lazy loading routes&lt;/h3&gt;

&lt;p&gt;By default most people will define their routes as such:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/bar.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By changing our import statements for our components we can directly impact the bundle size.
When we used to have this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can now rewrite it to this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is that our bundle size can get a lot smaller as components are only loaded when they are actually requested for that specific page.
With the help of &lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Webpack Bundle Analyzer&lt;/a&gt;, we can visualise this.&lt;/p&gt;

&lt;h3 id=&quot;using-tree-shakeable-packages&quot;&gt;Using tree-shakeable packages&lt;/h3&gt;

&lt;p&gt;A package that is often used in web applications is &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt;.
By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt; is not tree-shakeable but with the introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash-es&lt;/code&gt;, we now have access to all functions of &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt; that are tree-shakeable.
So instead of:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lodash&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now use:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lodash-es&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the help of &lt;a href=&quot;https://bundlephobia.com/result?p=lodash-es&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bundlephobia.com&lt;/a&gt;, we can see the individual sizes of all the lodash packages.
If we do not use functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;differenceBy&lt;/code&gt; from lodash, we can shave of a couple of kilobytes from our bundle size.&lt;/p&gt;

&lt;h3 id=&quot;activate-dynamic-imports-of-child-components&quot;&gt;Activate dynamic imports of child components&lt;/h3&gt;

&lt;p&gt;When a page is loaded, not all child components are required to already be loaded in.
The reason for this is that not all child components are directly visible.
For example when they are somewhere on the bottom of the page or they are off screen.
But another big reason is that they are used to render a modal.
As not all modals are always needed from the moment the page is opened, we can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; to that component.
For example in a product page where we can have a modal with more product details, we might have something like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ProductDetails&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; that holds a boolean to tell if the model should be visible, we delay the actual execution of all the &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductDetails&lt;/code&gt; code, thus achieving a performance increase:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ProductDetails&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isProductDetailsOpened&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason behind this, is that Vue doesn’t render elements contained in a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; until the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; returns true.&lt;/p&gt;

&lt;h3 id=&quot;prefetching&quot;&gt;Prefetching&lt;/h3&gt;

&lt;p&gt;Prefetching is a technique in which we use the idle time of our web page to load other assets.
This is a much used technique in for example an infinite scroll where we can already preload one of the next elements that would be shown when the user scrolls down.
Another example is to prefetch the components that we are lazy loading for our pages.
Thanks to Webpack we can &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;add a specific comment&lt;/a&gt; to accommodate this behaviour:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* webpackPrefetch:true */&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-performance-wins&quot;&gt;More performance wins&lt;/h3&gt;

&lt;p&gt;In order to further improve the performance of our web application, we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lazy load images&lt;/li&gt;
  &lt;li&gt;Use functional components for lists&lt;/li&gt;
  &lt;li&gt;Optimise initial state when using ServerSide Rendering&lt;/li&gt;
  &lt;li&gt;Cache static assets in a Service Worker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With some basic changes, we can already achieve a lot of performance improvement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;More information can be found on his &lt;a href=&quot;https://medium.com/@frakowski&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scalable-data-visualisation-with-d3-and-vue-by-ramona-biscoveanu&quot;&gt;Scalable data visualisation with D3 and Vue, by &lt;a href=&quot;https://twitter.com/CodesOfRa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ramona Biscoveanu&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When wanting to do data visualistions with D3 in a Vue web application, it often happens that Vue is only used as a shelf for the actual D3 code.
This is inherently a bad idea as the D3 code gets complex, not maintainable and it is also not reactive.
We can use the functionalities of Vue to generate part of our D3 code.
Since a lot of D3 can be rendered declaratively in HTML code, we can use Vue to bind all the data to the necessary attributes.
In our component, we could have something like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(d, index) in data&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;generateLine(d.values, index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d.country&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:stroke=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colours(index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:stroke-width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selected(index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;
			&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mouseover=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onSelected(d, index)&quot;&lt;/span&gt;
			&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onClick(d)&quot;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; we can retrieve the correct data from within our Vue component.
In our &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; lifecycle hook, we can do all necessary D3 code to use all of our generated SVGs to create the diagrams that we want.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/CodesOfRa/d3-vue-graph/blob/master/src/components/Tree.vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Code example on Ramona’s GitHub&lt;/a&gt; with the &lt;a href=&quot;https://outofmylens-flowers.netlify.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;live application available online&lt;/a&gt; and the &lt;a href=&quot;https://slides.com/codesofra/data-visualization-in-2#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides of her talk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-new-router-to-guide-your-apps-by-eduardo-san-martin-morote&quot;&gt;A new router to guide your apps, by &lt;a href=&quot;https://twitter.com/posva&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eduardo San Martin Morote&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;There are three kinds of routers possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Imperative: we define the routes and add a callback function to determine how the page should be rendered. An example of this is &lt;a href=&quot;https://github.com/visionmedia/page.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;page.js&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Declarative: routes are defined on a component level by using for example a specific attribute. The &lt;a href=&quot;https://reach.tech/router/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reach Router&lt;/a&gt; is an example of this.&lt;/li&gt;
  &lt;li&gt;Configuration based: routes are defined separately with the components that they are linked to. The Vue router is a configuration based router.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of this configuration based nature of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-router&lt;/code&gt;, we are missing the option to add or remove routes and we also lack declarative routing.&lt;/p&gt;

&lt;p&gt;The current implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-router&lt;/code&gt; has a lot of functionalities built in that are specific to managing the history while we actually want to separate this.
In an ideal situation, we want the router to be the connection between the components and the code that manages the browser history.
When a user navigates to a new page, the router calls the history code to add the new page to the history.
When the user navigates back, the router retrieves the previous page from the history.
In the current implementation, this is all not clearly separated.&lt;/p&gt;

&lt;p&gt;So what are the next steps for the Vue router?
One major improvement would be the use of TypeScript as this would help developers on using and extending the Vue router in the right way.
This is in the same spirit as Vue 3 that is also written fully in TypeScript.&lt;/p&gt;

&lt;p&gt;Another improvement lies in the use of a ranking system for the routes.
Currently routes are checked for a match based on the order in which they are defined.
This means that a catch-all route such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(.*)&lt;/code&gt; in the beginning of the routes definition would render the other routes useless.&lt;/p&gt;

&lt;p&gt;A major addition to Vue router would be the ability to have dynamic routing.
Components could thus add or remove routes.
A final addition would be the full use of the Composition API so we have functionalities such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useLink&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;useLocation&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onBeforeRouteLeave&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onBeforeRouteUpdate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The focus of the new router will be mainly on supporting Vue 3 while smaller improvements will be done for Vue 2.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://slides.com/posva/a-new-router-to-guide-your-apps&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h2&gt;

&lt;h3 id=&quot;how-to-get-your-product-owners-to-write-your-functional-tests-by-callum-silcock&quot;&gt;How to get your product owners to write your functional tests, by &lt;a href=&quot;https://twitter.com/csiilk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Callum Silcock&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the help of the &lt;a href=&quot;https://github.com/TheBrainFamily/cypress-cucumber-preprocessor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cypress Cucumber preprocessor&lt;/a&gt; Callum was able to demonstrate how code like this could be processed by Cypress:&lt;/p&gt;

&lt;div class=&quot;language-cucumber highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Logging In

  Tests the user can successfully login and log out

  &lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Logging In Sucessfully
    &lt;span class=&quot;nf&quot;&gt;Given &lt;/span&gt;I am on the &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; page
    &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;I input my &lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt; as &lt;span class=&quot;s&quot;&gt;&quot;contact@csi.lk&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;I input my &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; as &lt;span class=&quot;s&quot;&gt;&quot;hunter2&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;I click the &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; button
    &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;I should be on the &lt;span class=&quot;s&quot;&gt;&quot;dashboard&quot;&lt;/span&gt; page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea behind this, is that functional tests can be written in a very clear and understandable format so that even product owners can help with writing them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/csilk/then-with-cypress&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and an &lt;a href=&quot;https://github.com/csi-lk/cypress-gwt-example&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;example implementation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;awesome-js-is-awesome-by-guillaume-chau&quot;&gt;Awesome JS is Awesome, by &lt;a href=&quot;https://twitter.com/Akryum&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Guillaume Chau&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;awesome-vue&lt;/a&gt; repository we can already find a curated list of interesting resources for when you want to develop an application with Vue.
Guillaume decided to create a specific website that has an overview of all good packages for your project, whether it is a Vue project or a Nuxt project or others.
The website will keep on growing with new project types and packages added regularly so that it could grown into a knowledge base on what good packages would be for your future projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The website is available at &lt;a href=&quot;https://awesomejs.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;awesomejs.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;focus-management-with-vue-by-maria-lamardo&quot;&gt;Focus Management with Vue, by &lt;a href=&quot;https://twitter.com/MariaLamardo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maria Lamardo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Maria is very enthousiastic about accessibility on the web.
One of the quirks she has found is that when a page is loaded or something dynamic happens on the page like opening a modal, the focus is incorrect.
Basically this means that people who rely on a screen reader, often have issues with navigating when for example a modal is opened.
By adding a basic directive to your component that uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted&lt;/code&gt; &lt;a href=&quot;https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;hook&lt;/a&gt;, you can alleviate this issue:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... other component code&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;directives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;She also talked about how you can have hidden HTML elements to help users with a screen reader to have feedback on what just happened when they for example submitted a form.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Maria’s &lt;a href=&quot;https://github.com/mlama007/FocusManagement&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;repository for her talk&lt;/a&gt; and for working examples&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;application-shortcuts-with-a-renderless-event-component-by-rolf-haug&quot;&gt;Application Shortcuts with a Renderless Event Component, by &lt;a href=&quot;https://twitter.com/rahaug&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rolf Haug&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;$listeners&lt;/code&gt; in a Vue component, Rolf managed to create a renderless event component that handles everything you need to act on global events.
The sourcecode can be found on his &lt;a href=&quot;https://github.com/vueschool/application-shortcuts/blob/master/src/components/EventListenerFinal.vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One example use could be this in the template of a video player component:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;event-listener&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keydown.space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleVideo&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now whenever the user presses on the spacebar of his keyboard, the handler &lt;code class=&quot;highlighter-rouge&quot;&gt;toggleVideo&lt;/code&gt; will be called to toggle the video from/to playing/pausing.&lt;/p&gt;

&lt;p&gt;The same can be achieved by using the &lt;a href=&quot;https://www.npmjs.com/package/vue-global-events&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-global-events package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rolf’s &lt;a href=&quot;https://github.com/vueschool/application-shortcuts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;repository for his talk&lt;/a&gt; and the &lt;a href=&quot;https://www.npmjs.com/package/vue-global-events&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-global-events package&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vue3s-composition-api-explained-visually-by-gregg-pollack&quot;&gt;Vue3’s Composition API explained visually, by &lt;a href=&quot;https://twitter.com/greggpollack&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gregg Pollack&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With the upcoming arrival of the Composition API, a visual explanation of the possible changes to your code was very useful.
The Composition API allows you to focus more on the features instead of only the components.
If we would colour code every feature in our code, a component in the options-based API with a lot of features would end up having elements of the same feature all over the component.
For example our sorting feature would be red, our searching feature would be purple and so on.
This is because the current options-based API forces you to group everything into elements such as &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/options-api-vs-composition-api.png&quot; class=&quot;image fit&quot; alt=&quot;Comparison of options-based API and Composition API with each feature colour coded&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the Composition API we would introduce the use of a &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; method for each component.
In this &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;, we declare the scope that will be available to our template.
While in the options-based API we defined our scope in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; properties and they are bound to the object instance, we now can group all this scope into &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;.
With the Composition API we have the freedom to group our features in the &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; method and even extract them into separate functions so they can be reused in other components.
This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; returns the scope that can be used in our template.
Parts of that scope could be retrieved from separate functions.
Each colour in the image above can thus be potentially extracted into separate functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useSorting&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;useSearch&lt;/code&gt; and so on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.vuemastery.com/pdf/Vue-3-Cheat-Sheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue 3 Composition API cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-new-composition-api-by-thorsten-luenborg&quot;&gt;The new Composition API, by &lt;a href=&quot;https://twitter.com/linus_borg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thorsten Luenborg&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;After we had the visual explanation of what the Composition API encompasses, it was time to dive into more details and see some example code as can be found on &lt;a href=&quot;https://github.com/LinusBorg/composition-api-demos&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thorsten’s GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While in the past your components would become a clutter of all your features together spread out over your component, the Composition API allows them to be grouped together.
For example when you have a component that supports multiple features such as sorting and pagination, these features would be spread out over the component.
The data necessary for the sorting and pagination would be put into &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;.
The functions that actually implement these functionalities would be scattered over &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;.
Thanks to the portable reactivity of the Composition API, we can simplify our components that use for example pagination to:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./use-pagination&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// other features defined here&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// other scopes returned here&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usePagination&lt;/code&gt; is a function that encapsulates all functionality specific for pagination:&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amountOfPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// other functionalities here&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toRefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;amountOfPages&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our component we will then be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;amountOfPages&lt;/code&gt; and such, just like when we would have defined them in &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;.
Currently Composition API is already available in Vue 2 thanks to the &lt;a href=&quot;https://github.com/vuejs/composition-api&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@vue/composition-api package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/LinusBorg/talks/raw/master/2019-10-04%20Vuejs%20London/New%20composition%20API%20%20-%20Vue.js%20London%202019-10-04.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and a full explanation can be found in the &lt;a href=&quot;https://vue-composition-api-rfc.netlify.com/#summary&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Composition API RFC&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;live-coding-the-new-composition-api-by-jason-yu&quot;&gt;Live coding: the new Composition API, by &lt;a href=&quot;https://twitter.com/ycmjason&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jason Yu&lt;/a&gt;&lt;/h2&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/keyboard-keyboard.jpg&quot; class=&quot;image right&quot; alt=&quot;The KeyboardKeyboard app Jason was building&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The best way to get to know the new Composition API is seeing it live in action.
So Jason took the challenge upon himself to live code something called a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyboardKeyboard&lt;/code&gt;.
As a musician and a programmer, he is very enthusiastic about keyboards.
So he decided to program his computer keyboard to sound like a piano keyboard.
With the use of Web Audio API he managed to program a web app in Vue with Composition API in just over 30 minutes.
He mainly used Composition API to encapsulate certain key features such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useMusicNote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;useKeyDown&lt;/code&gt;. 
It was a fun live coding session as he was able to really captive the audience’s attention.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/ycmjason-talks/2019-10-04-vuejs-london-conference-2019/tree/completed&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The source code is on his GitHub&lt;/a&gt; and a screen capture can be found on &lt;a href=&quot;https://www.youtube.com/watch?v=_K5zbgJ_z9w&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;evan-yous-keynote-launch-of-vue3-open-source-by-evan-you&quot;&gt;Evan You’s keynote: launch of Vue3 open-source, by &lt;a href=&quot;https://twitter.com/youyuxi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Evan You&lt;/a&gt;&lt;/h2&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/evan-you-during-keynote.jpg&quot; class=&quot;image right&quot; alt=&quot;Evan You during his keynote&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We ended the conference with a keynote from Evan You, the creator of Vue.
There was already a lot of talk about Vue 3 in the last couple of months and in this keynote he had a great preview of what the power of Vue 3 will look like.
For Vue 3, he and his core team have been very active to rewrite the whole project.
By rewriting the whole runtime and compiler from scratch, they were able to add native TypeScript support everywhere.
They were also able to make the compiler completely modular.
With some clever tricks during compilation time such as hoisting static elements in the DOM tree, the runtime can be optimised to only take the dynamic elements into account.
A major announcement about the upcoming Vue 3 is the fact that it is fully tree shakeable.&lt;/p&gt;

&lt;p&gt;Tree shakeability in combination with all the other upcoming features will result in a major performance improvement as Evan briefly demonstrated.
The current speed improvement is already sevenfold.
With some features still in development, Evan expects an even bigger improvement in speed before the actual release of Vue 3.&lt;/p&gt;

&lt;p&gt;As a special treat, Evan had set the visibility of the repository from private to public.
From the 4th of October onwards, Vue 3 is fully open source.&lt;/p&gt;

&lt;h1 id=&quot;workshop-hands-on-with-the-composition-api-by-vue-vixens&quot;&gt;Workshop: hands-on with the Composition API, by &lt;a href=&quot;https://twitter.com/VueVixens&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens&lt;/a&gt;&lt;/h1&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/vuevixens-logo.png&quot; class=&quot;image right&quot; alt=&quot;The Vue Vixens logo&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With almost half of the conference day spent on talks about the new Composition API, the opportunity to actually incorporate it into a workshop was taken by the Vue Vixens.
Vue Vixens are foxy people who identify as women and who want to learn Vue.js to make websites and mobile apps.
The workshop was held at CCT Venues, not that far from the O2 Cineworld.&lt;/p&gt;

&lt;p&gt;The first goal of the workshop was to implement our own version of a Spotify client in the browser, built with the Composition API in Vue.
Sadly Spotify has limited the use of their SDK to only premium users of Spotify.
So after having gotten a good explanation about what the Composition API is made of along with some interesting discussions on how to use it, we changed it up a bit.&lt;/p&gt;

&lt;p&gt;As Vue Vixens also organises other workshops, we took one of the solutions for one of those workshops.
We rewrote that solution from an implementation in the options-based API to the Composition API.
Since almost everybody present had been at the conference the day before and the Composition API was well explained, we were able to finish up quickly.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/vuevixens-workshop.jpg&quot; class=&quot;image fit&quot; alt=&quot;The people who attended the Vue Vixens workshop&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to the organisers &lt;a href=&quot;https://twitter.com/marialamardo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maria Lamardo&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kristinruben&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kristin Ruben&lt;/a&gt; for the great workshop!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://vuevixens.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens website&lt;/a&gt; and the &lt;a href=&quot;https://workshops.vuevixens.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens workshops&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;London was a great city to visit and with an excellent organised conference, this was a pleasant experience.
With the future release of Vue 3, it was no surprise that most of the conference was focused on Vue 3.
I’ve learned a lot and with the help of the workshop given by the Vue Vixens, I am convinced that Vue 3 has a bright future ahead.
I look forward to putting this new knowledge into practice.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Elke&quot;, &quot;last_name&quot;=&gt;&quot;Heymans&quot;, &quot;github&quot;=&gt;&quot;ElkeBxl&quot;, &quot;linkedin&quot;=&gt;&quot;elkeheymans&quot;, &quot;permalink&quot;=&gt;&quot;/author/elke-heymans/&quot;, &quot;avatar&quot;=&gt;&quot;elke-heymans.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;elke.heymans@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Elke is a Frontend Developer with a focus on Vue, Angular and is very interested in other frontend technologies. In her spare time you can find her taking photographs at events, training for half marathons or enjoying music by collecting records and attending concerts.&quot;}</name><email>elke.heymans@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="Vue.js" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/vuejs-london-2019/vuejs-london.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/vuejs-london-2019/vuejs-london.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Monitoring serverless apps on AWS</title><link href="https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS.html" rel="alternate" type="text/html" title="Monitoring serverless apps on AWS" /><published>2019-10-15T00:00:00+00:00</published><updated>2019-10-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about&quot;&gt;What about&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges-of-serverless-applications&quot;&gt;Challenges of Serverless applications&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-1-finding-the-error-in-a-distributed-serverless-landscape&quot;&gt;Challenge 1: Finding the error in a distributed serverless landscape&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-1-structured-logging&quot;&gt;Solution 1: Structured logging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-2-finding-performance-bottlenecks&quot;&gt;Challenge 2: Finding performance bottlenecks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-2-distributed-tracing-with-aws-xray&quot;&gt;Solution 2: Distributed tracing with Xray&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-3-testing-whether-our-application-still-behaves-as-expected&quot;&gt;Challenge 3: Testing whether our application still behaves as expected&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-3a-smoke-testing&quot;&gt;Solution 3a: Smoke Testing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-3b-load-testing&quot;&gt;Solution 3b: Load Testing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#side-note-on-cloudwatch-dashboards&quot;&gt;Side note on CloudWatch Dashboards&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#third-party-tools&quot;&gt;Third party tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-about&quot;&gt;What about?&lt;/h1&gt;
&lt;p&gt;Serverless is a great technology that comes with the advantage of being scalable, durable and high available.&lt;br /&gt;
It allows you to decouple functionality into multiple serverless Functions.&lt;/p&gt;

&lt;p&gt;But with new technologies come new challenges.
Having an application that exist of a lot of decoupled lambda functions means that your serverless landscape will be heavily distributed.&lt;br /&gt;
I mean that there is a lot of stuff happening in a lot of different places.&lt;/p&gt;

&lt;p&gt;We still want to be able to monitor our landscape though.&lt;br /&gt;
This means that a distributed serverless landscape has to be observable.&lt;br /&gt;
Let’s see some of the best practices on how to make your serverless landscape observable.&lt;/p&gt;

&lt;h1 id=&quot;challenges-of-serverless-applications&quot;&gt;Challenges of Serverless applications&lt;/h1&gt;
&lt;p&gt;What does a typical serverless application look like?&lt;/p&gt;

&lt;p&gt;Let’s look at an app that was build for a conference. 
Speakers can create a session that they want to speak about. 
People can also retrieve all sessions that have already been submitted.&lt;br /&gt;
When a new session is created a slack notification is sent out.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We can identify certain milestones that indicate that a request has passed this milestone.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture-with-milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The serverless architecture above is actually quite small.
I’ve seen architectures containing tens of Lambda Functions and other AWS services.&lt;/p&gt;

&lt;p&gt;Some of the challenges that come with a serverless architecture are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It might crash somewhere in my distributed landscape.
If it does, where did it go wrong?&lt;/li&gt;
  &lt;li&gt;Which part of my flow is performing poorly. 
Let’s find the performance bottlenecks.&lt;/li&gt;
  &lt;li&gt;I cannot run all cloud services on my computer.
So I can’t run my system locally anymore.
How do I test whether my system is behaving as it is supposed to?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next part we’ll focus on solving these challenges.&lt;/p&gt;

&lt;h1 id=&quot;challenge-1-finding-the-error-in-a-distributed-serverless-landscape&quot;&gt;Challenge 1: Finding the error in a distributed serverless landscape&lt;/h1&gt;

&lt;p&gt;When things go wrong we want to be notified.
We can do this by configuring a CloudWatch alarm that will go of when an error appears.&lt;/p&gt;

&lt;p&gt;Below we see that Cloudwatch is ‘watching’ our cloud for errors.
When an error event appears an alarm will go of and message will be pushed to a topic.
We can then listen on this topic using a Lambda function.
This Lambda function will send out the notification to our slack channel.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/cloudwatch-alarm-notification.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;AWS provides a Lambda function that can send out these alerts that are triggered by an alarm.&lt;br /&gt;
If you look in the Lambda blueprints via the AWS Lambda Console you’ll find the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudwatch-alarm-to-slack-python&lt;/code&gt; Lambda function that you can use.&lt;/p&gt;

&lt;h2 id=&quot;digging-into-the-logs&quot;&gt;Digging into the logs&lt;/h2&gt;
&lt;p&gt;What do we do when stuff goes south?&lt;br /&gt;
We check the logs!&lt;/p&gt;

&lt;p&gt;Right, logging tells us the story of what happened in our application.
The logs contain information about this story.&lt;br /&gt;
Only now the logs are not coming from one place. 
The story is told in multiple Lambda functions.&lt;/p&gt;

&lt;p&gt;On top of that the logging might tell multiple stories at once.
Multiple execution environments of the same Lambda function can run at the same time.
This is that scalability of the cloud.
Lambda functions can run concurrently.&lt;/p&gt;

&lt;p&gt;We need two things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We need to correlate the logs coming from different places.&lt;/li&gt;
  &lt;li&gt;We need to get the valuable information out of our logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution-1-structured-logging&quot;&gt;Solution 1: structured logging&lt;/h2&gt;
&lt;p&gt;Structured logging to the rescue!&lt;/p&gt;

&lt;p&gt;Below you see a normal log versus a structured log.&lt;/p&gt;

&lt;p&gt;Normal plain text log:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/normal-log.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Structured log:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/structured-log.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Yes, the structured log is a lot more bloated.
But it is also a lot more machine readable and contains much more information.&lt;/p&gt;

&lt;p&gt;You recognize the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; format.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It contains contextual information like &lt;code class=&quot;highlighter-rouge&quot;&gt;functionName&lt;/code&gt; which is the function that created the log and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSRequestId&lt;/code&gt; which is the identifier for the invocation of the lambda function.&lt;/li&gt;
  &lt;li&gt;We see the &lt;code class=&quot;highlighter-rouge&quot;&gt;milestone&lt;/code&gt; key which refers to a certain milestone that the request passed while processing.&lt;/li&gt;
  &lt;li&gt;We still recognize the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The logs contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;traceId&lt;/code&gt; which we can use to correlate logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS offers us a service to get insights in our logs, &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt;. (What’s in a name right?)&lt;/p&gt;

&lt;p&gt;Since we used structured logging CloudWatch will pick up all &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; fields from our logs automatically.&lt;/p&gt;

&lt;p&gt;Now we can use these logs to query the milestones that a request passed.
We can correlate these milestones since we have the traceId correlating logs over multiple functions.
Our logs are generated by multiple functions.
&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt; allows you to query over multiple logGroups related to these functions.&lt;/p&gt;

&lt;p&gt;Suppose that something went wrong for session with sessionId: &lt;code class=&quot;highlighter-rouge&quot;&gt;a2db023e-6565-4a5c-b7dc-b53a420898e7&lt;/code&gt;.&lt;br /&gt;
We now can lookup the traceId to track the concerning request in our landscape.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields traceId
| filter &lt;span class=&quot;nv&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;865ccaad-ced0-4de5-aec3-b3692b2e06a0&quot;&lt;/span&gt;
| limit 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/traceId-by-sessionId.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Then we can use this traceId to find the milestones that the request has already passed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields milestone, functionName, timestamp
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt; and ispresent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;milestone&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;timestamp asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We see that we never got the milestone &lt;code class=&quot;highlighter-rouge&quot;&gt;SAVED_IN_DATABASE&lt;/code&gt;.
So it went wrong somewhere in the &lt;code class=&quot;highlighter-rouge&quot;&gt;conference-save-session-dynamodb-lambda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can checkout the logs of this faulty execution using the &lt;code class=&quot;highlighter-rouge&quot;&gt;traceId&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields @message
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt; and &lt;span class=&quot;nv&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conference-save-session-dynamodb-lambda&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or we could check for an exception that occurred.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields exception, traceId, functionName
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt;
| limit 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both will lead us to the exception.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/exception-found-by-looking-for-exception.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The outcome of this queries can be visualized and added to a &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Dashboard&lt;/code&gt;.
More on that later.&lt;/p&gt;

&lt;p&gt;Structured logging helped us querying our logs for information and finding the error in our flow.&lt;br /&gt;
Challenge 1 completed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;challenge-2-finding-performance-bottlenecks&quot;&gt;Challenge 2: Finding performance bottlenecks&lt;/h1&gt;
&lt;p&gt;I wrote a &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; query that allows me to check how long it took for a request to pass through the whole landscape.
That means from the moment the creation request arrived till the moment we send out a slack notification for it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields @timestamp, @message
| filter  &lt;span class=&quot;nv&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CREATE_REQUEST_RECEIVED&quot;&lt;/span&gt; or &lt;span class=&quot;nv&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SLACK_NOTIFICATION_NEW_SESSION_SENT&quot;&lt;/span&gt;
| stats &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;latest&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@timestamp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - earliest&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@timestamp&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;/1000 as LeadTimeInSeconds by traceId
| filter LeadTimeInSeconds!&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
| &lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;LeadTimeInSeconds desc
| limit 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/slack-notification-lead-time.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We see that even when the system is warm, it takes us up to 10 seconds to send out a slack notification.
We need to dig into the performance of our lambda functions using &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Xray&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-distributed-tracing-with-aws-xray&quot;&gt;Solution 2: distributed tracing with AWS Xray&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Xray helps us understand the behavior of our system and thus allows us to analyze the performance of specific parts.
It does this by visualizing the flow and dividing the flow into traces and segments.
A trace is actually build up from multiple segments.&lt;/p&gt;

&lt;p&gt;It does this by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sampling your requests. 
By default Xray will trace 5% of your requests.&lt;/li&gt;
  &lt;li&gt;Tracing calls made by ths AWS SDK.
This happens automatically when you use Xray as a dependency for your project.&lt;/li&gt;
  &lt;li&gt;Creating custom segments.
You can create your own segments as you see below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Subsegment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AWSXRay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginSubsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sessions.saveSessionDynamoDB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;storeInDatabase&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DynamoDB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;company&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ordina&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mockingIssues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDynamoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDynamoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;AWSXRay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endSubsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example of the Xray service map.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-service-map.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Xray doesn’t trace async requests (yet).
That means that publishing on an &lt;code class=&quot;highlighter-rouge&quot;&gt;SNS&lt;/code&gt; topic or going via a &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDB Stream&lt;/code&gt; is not part of the full trace but will show up as a new client in the service map.
Recently tracing over &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; was added.&lt;/p&gt;

&lt;p&gt;When we click the lambda service we can see the response distribution.
This visualizes how quickly the lambda function responded.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-response-distribution.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Something is definitely wrong here since even the quickest executions take more than 3 seconds.
We can dig deeper by clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;view traces&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-overview-traces.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Digging even deeper into one of these traces we can see how long every segment of this trace took.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-segments-of-trace.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Below we see that first some data was saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;caching table&lt;/code&gt;.
This happened blazingly quick in 8.0 ms.&lt;/p&gt;

&lt;p&gt;We see however that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sessions.saveSessionDynamoDB&lt;/code&gt; segment took over 3.0 seconds.
Of these 3 seconds, only 8 ms was spent actually saving the request.
We found our performance bottleneck.
Something is waiting around in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sessions.saveSessionDynamoDB&lt;/code&gt; segment.
In this case it was me introducing an artificial &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hooray, we found the performance bottleneck.&lt;br /&gt;
Challenge 2 completed.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;challenge-3-testing-whether-our-application-still-behaves-as-expected&quot;&gt;Challenge 3: Testing whether our application still behaves as expected&lt;/h1&gt;
&lt;p&gt;We can’t run our complete cloud infrastructure on our local machine.&lt;br /&gt;
So when we make changes and redeploy, we should test if our system is still behaving as it should.&lt;/p&gt;

&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Running smoke tests to detect hazards.&lt;/li&gt;
  &lt;li&gt;Running load tests to view if the system can still handle the load.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution-3a-smoke-testing&quot;&gt;Solution 3a: smoke testing&lt;/h2&gt;
&lt;p&gt;You should automate testing your system.
In the image below you see how I automate a test to check if a new session that is entered via the API is still forwarded.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/smoke-test.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I create this test using &lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit&lt;/code&gt; and mocked the http endpoints with &lt;a href=&quot;http://wiremock.org/&quot; target=&quot;_blank&quot;&gt;wiremock&lt;/a&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Wiremock&lt;/code&gt; is a great tool to mock http endpoints that I personally use a lot.&lt;br /&gt;
You can ask Wiremock to create certain endpoints and configure the response for it.&lt;br /&gt;
Below you see me creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;/sessions/forward&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$wiremock_url&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;request&quot;: {
        &quot;method&quot;: &quot;POST&quot;,
        &quot;url&quot;: &quot;/session/forward&quot;
    },
    &quot;response&quot;: {
        &quot;status&quot;: 200,
        &quot;body&quot;: &quot;I have received the session correctly&quot;,
         &quot;delayDistribution&quot;: {
                    &quot;type&quot;: &quot;lognormal&quot;,
                    &quot;median&quot;: 100,
                    &quot;sigma&quot;: 0.1
           },
        &quot;headers&quot;: {
            &quot;Content-Type&quot;: &quot;text/plain&quot;
        }
    }
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution-3b-load-testing&quot;&gt;Solution 3b: load testing&lt;/h2&gt;
&lt;p&gt;Yes, serverless scales automatically.
But things might not always behave as expected.
Listening on events of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Kinesis&lt;/code&gt; stream for example is only possible with one Lambda function per &lt;code class=&quot;highlighter-rouge&quot;&gt;Shard&lt;/code&gt;.
Thus limiting your throughput if you don’t watch out.&lt;/p&gt;

&lt;p&gt;To run my load test I use &lt;a href=&quot;https://artillery.io&quot; target=&quot;_blank&quot;&gt;artillery&lt;/a&gt;. 
Below you find the file that I use to configure this load test.
It ramps up the amount of request per second from 1 to 10 during 2 minutes.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://your-own-url.com'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;phases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;120&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;arrivalRate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rampTo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ramp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;warm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sessions.csv&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;firstName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lastName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;companyName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;companyCity&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scenarios&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/sessions&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1570202335000&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;speaker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;companyName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;companyCity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;questionPhrase&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again I checked the lead time (time between incoming request and sending out the notification) and found these huge numbers.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/huge-lead-time.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Using structured logging and &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt; we could start looking deeper into the cause of this delay.
I already showed you how to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt;, so I’ll get straight to the cause here.&lt;/p&gt;

&lt;p&gt;The reason it takes so much time to send out all slack notifications is that the Lambda function which listens on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDB stream&lt;/code&gt; is sending out these requests one by one.
It takes about 1 second for every request.&lt;br /&gt;
But the requests come in much faster. This means that they are queueing up in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;conference-slack-notification-lambda&lt;/code&gt; to be send out.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture-with-milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We reached our goal.
We found another bottleneck in our system by running the load tests.
Challenge 3 completed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;side-note-on-cloudwatch-dashboards&quot;&gt;Side note on CloudWatch Dashboards&lt;/h1&gt;
&lt;p&gt;Along the way we wrote a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; queries.&lt;br /&gt;
AWS allows you to bundle the results of these queries into dashboards via &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Dashboards&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below you see how I made a dashboard that visualizes the number of invocations and associated costs per lambda function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/billing-overview.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To find the total cost I used the following query:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter @type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;REPORT&quot;&lt;/span&gt;
| fields @memorySize/1000000 as MemorySetInMB, @billedDuration/1000&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;MemorySetInMB/1024 as BilledDurationInGBSeconds, @logStream
| stats &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as TotalBilledDurationInGBSeconds, &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 0.00001667 as TotalCostInDollar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get the stats per Lambda function I did:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter @type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REPORT&quot;&lt;/span&gt;
| fields @memorySize/1000000 as MemorySetInMB, @billedDuration/1000&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;MemorySetInMB/1024 as BilledDurationInGBSeconds
| stats 
count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@billedDuration&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as NumberOfInvocations,
ceil&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@duration&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; as AverageExecutionTime,
max&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@duration&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as MaxExecutionTime,
&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 0.00001667 as TotalCostInDollar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;third-party-tools&quot;&gt;Third party tools&lt;/h1&gt;
&lt;p&gt;We just saw the things that we can do to increase the observability of our serverless landscape.&lt;br /&gt;
To achieve this, you’ll have to do some custom work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;setup structured logging&lt;/li&gt;
  &lt;li&gt;pass on a traceId&lt;/li&gt;
  &lt;li&gt;create dashboards in CloudWatch&lt;/li&gt;
  &lt;li&gt;get familiar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; query language&lt;/li&gt;
  &lt;li&gt;configure the right alarms in CloudWatch&lt;/li&gt;
  &lt;li&gt;setup the infrastructure to notify you when an error appears in your landscape&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are things that take time.&lt;br /&gt;
And time is money.&lt;/p&gt;

&lt;p&gt;You can also consider using this money to work with a third party tool.
This tool then allows you to monitor and troubleshoot your serverless applications.&lt;/p&gt;

&lt;p&gt;Personally I have used &lt;a href=&quot;https://lumigo.io&quot; target=&quot;_blank&quot;&gt;Lumigo&lt;/a&gt;  to achieve just that.&lt;br /&gt;
The things you have to customize, will be provided out of the box.&lt;/p&gt;

&lt;p&gt;You get a high-level dashboard to visualize the problems in your application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/lumigo-dashboard.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It will also automatically trace a request through your landscape by creating a transaction.
This is about the same as we did by forwarding traceIds.&lt;/p&gt;

&lt;p&gt;It comes with a handy visualization.
On the left you see the transaction while on the right it gives you the logs that correspond with the error that appeared.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/lumigo-transaction-and-error.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This allows you to drill down to the source of the error quickly.&lt;br /&gt;
On top of that you can also create the necessary alerts to notify you in case things go south.&lt;/p&gt;

&lt;p&gt;These tools often have a &lt;a href=&quot;https://platform.lumigo.io/signup&quot; target=&quot;_blank&quot;&gt;free tier&lt;/a&gt;  that allows you to explore the product.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We improved the observability of our system by implementing structured logs and using appropriate testing and tooling.
By doing this, it becomes way easier to monitor your system and create visibility on its behavior.&lt;/p&gt;

&lt;p&gt;Remember that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you need structured logging to get the maximum out of your logs&lt;/li&gt;
  &lt;li&gt;CloudWatch Logs Insights allows you to query your logs and analyze them for errors&lt;/li&gt;
  &lt;li&gt;distributed tracing with AWS Xray helps you identifying bottlenecks in your system&lt;/li&gt;
  &lt;li&gt;you can create smoke tests and load tests to check if your system is behaving as it is supposed to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you want some of these things being done for you automatically, choose a third party monitoring tool to help you with it.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lumigo.io/blog/&quot; target=&quot;_blank&quot;&gt;https://lumigo.io/blog/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theburningmonk.com/2017/09/tips-and-tricks-for-logging-and-monitoring-aws-lambda-functions/&quot; target=&quot;_blank&quot;&gt;https://theburningmonk.com/2017/09/tips-and-tricks-for-logging-and-monitoring-aws-lambda-functions/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/&quot; target=&quot;_blank&quot;&gt;https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.loggly.com/blog/why-json-is-the-best-application-log-format-and-how-to-switch/&quot; target=&quot;_blank&quot;&gt;https://www.loggly.com/blog/why-json-is-the-best-application-log-format-and-how-to-switch/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackify.com/what-is-structured-logging-and-why-developers-need-it/&quot; target=&quot;_blank&quot;&gt;https://stackify.com/what-is-structured-logging-and-why-developers-need-it/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-nodejs-subsegments.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-nodejs-subsegments.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AmazonWebServices/monitoring-and-troubleshooting-in-a-serverless-world-srv303-reinvent-2017&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/AmazonWebServices/monitoring-and-troubleshooting-in-a-serverless-world-srv303-reinvent-2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lumigo.io&quot; target=&quot;_blank&quot;&gt;https://lumigo.io&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is passionate about cloud technology. He has major expertise in AWS and AWS serverless but he appreciates other clouds just as well. He wants to be ahead of change and thus he's also working with IoT and AI.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API Gateway" /><category term="CloudWatch" /><category term="Distributed Tracing" /><category term="Monitoring" /><summary type="html">Table of content What about Challenges of Serverless applications Challenge 1: Finding the error in a distributed serverless landscape Solution 1: Structured logging Challenge 2: Finding performance bottlenecks Solution 2: Distributed tracing with Xray Challenge 3: Testing whether our application still behaves as expected Solution 3a: Smoke Testing Solution 3b: Load Testing Side note on CloudWatch Dashboards Third party tools Conclusion Resources</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-10-15-Monitoring-serverless-apps-on-AWS/featured-image.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-10-15-Monitoring-serverless-apps-on-AWS/featured-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>