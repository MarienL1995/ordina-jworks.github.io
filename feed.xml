<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2020-08-18T13:45:06+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Securing Angular and Spring Boot applications with Azure AD</title><link href="https://ordina-jworks.github.io/security/2020/08/18/Securing-Applications-Azure-AD.html" rel="alternate" type="text/html" title="Securing Angular and Spring Boot applications with Azure AD" /><published>2020-08-18T00:00:00+00:00</published><updated>2020-08-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2020/08/18/Securing-Applications-Azure-AD</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2020/08/18/Securing-Applications-Azure-AD.html">&lt;blockquote&gt;
  &lt;p&gt;Azure Active Directory (Azure AD) is Microsoft’s cloud-based identity platform.
In this blogpost, we will discuss how to use it to secure web applications with &lt;a href=&quot;https://oauth.net/2/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OAuth 2.0&lt;/a&gt; and &lt;a href=&quot;https://openid.net/connect/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenID Connect (OIDC)&lt;/a&gt;.
More specifically an Angular single-page application (SPA) which makes calls to a Spring Boot back-end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-the-perfect-oauth-flow-for-your-needs&quot;&gt;Finding the perfect OAuth flow for your needs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#basic-oauth-terminology&quot;&gt;Basic OAuth Terminology&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-oauth-client&quot;&gt;The OAuth Client&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#oauth-flows&quot;&gt;OAuth flows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-azure-ad-part&quot;&gt;The Azure AD part&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-spring-boot-part&quot;&gt;The Spring Boot Part&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#azure-starters-for-spring-boot&quot;&gt;Azure Starters for Spring Boot&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-spring-boot-implementation&quot;&gt;The Spring Boot Implementation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-angular-part&quot;&gt;The Angular Part&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-angular-library&quot;&gt;The Angular Library&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-application-tour-of-heroes&quot;&gt;Example Application: Tour of Heroes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-angular-implementation&quot;&gt;The Angular Implementation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;finding-the-perfect-oauth-flow-for-your-needs&quot;&gt;Finding the perfect OAuth flow for your needs&lt;/h1&gt;

&lt;p&gt;Before diving into Azure AD and how to use it for authentication and authorization of your apps, it’s important to think about the OAuth set-up that you want.
From personal experience, the libraries and documentation provided by Microsoft can be rather inconsistent and confusing. 
To straighten things out, we’ll start by discussing which OAuth set-up we need and why.
Then we’ll configure Azure AD and the applications to make everything work together.
Please note that this post assumes you have some notions of OAuth. 
Don’t worry if your knowledge is a little lacking as we’ll recap on the necessary parts.&lt;/p&gt;

&lt;h2 id=&quot;basic-oauth-terminology&quot;&gt;Basic OAuth Terminology&lt;/h2&gt;

&lt;dl&gt;
    &lt;dt&gt;Resource Owner&lt;/dt&gt;
    &lt;dd&gt;You: a user who interacts with the system and has some resources on a (resource) server.&lt;/dd&gt;&lt;br /&gt;
    &lt;dt&gt;Resource Server&lt;/dt&gt;
    &lt;dd&gt;Server where (your) protected resources are served from.&lt;/dd&gt;&lt;br /&gt;
    &lt;dt&gt;Authorization Server&lt;/dt&gt;
    &lt;dd&gt;Server which validates your credentials. Hands out tokens to registered clients.&lt;/dd&gt;&lt;br /&gt;
    &lt;dt&gt;Client&lt;/dt&gt;
    &lt;dd&gt;
    An application which uses tokens from the authorization server to access the resource server on behalf of the resource owner.
    It orchestrates the process to obtain these tokens.
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;the-oauth-client&quot;&gt;The OAuth Client&lt;/h2&gt;

&lt;p&gt;Do we want the single-page app to be the OAuth client or should the Spring Boot back-end fulfill that role?&lt;br /&gt;
If the SPA is the OAuth client, the Spring Boot application will be configured as a resource server.
This means it’s up to the Angular application to orchestrate the process of obtaining access tokens from the authorization server. 
These tokens then grant access to resources from the Spring Boot back-end.&lt;/p&gt;

&lt;p&gt;For the other scenario, where the Spring Boot back-end acts as the OAuth client (and resource server), this orchestration will be performed in the back-end. 
In that case, the Angular application will only maintain a session with the back-end.&lt;/p&gt;

&lt;p&gt;There are multiple advantages and disadvantages to both scenarios.
However, the biggest trade-off for our scenario is:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SPA&lt;/b&gt; as OAuth &lt;b&gt;client&lt;/b&gt; / back-end as resource server:&lt;br /&gt;
✅ Back-ends can be stateless: no session required&lt;br /&gt;
❌ Less secure: access token stored in the browser&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Spring Boot&lt;/b&gt; back-end as OAuth &lt;b&gt;client&lt;/b&gt;:&lt;br /&gt;
❌ Has to be stateful: session required&lt;br /&gt;
✅ More secure: tokens only in the back-end&lt;/p&gt;

&lt;p&gt;Having a stateless back-end makes it very easy to create or destroy new instances of it. 
Requests can go to any of those instances without the need for sticky load balancing or distributed sessions.&lt;br /&gt;
The downside is that the tokens have to be stored in the browser, which can leak more easily than from a secure back-end. 
We control the back-end but not the user’s computer, network, browser or its plugins. 
On top of that, &lt;a href=&quot;https://auth0.com/docs/tokens/token-storage&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;browsers also lack a secure storage mechanism&lt;/a&gt;, unlike apps on mobile devices.&lt;/p&gt;

&lt;p&gt;In this blogpost, we will go with the first approach where the Angular app is the OAuth client.
This means our set-up will be as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;OAuth term&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Concrete application&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Resource Owner&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;You&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Resource Server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Spring Boot app&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Authorization Server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Azure AD&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Client&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Angular app&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;oauth-flows&quot;&gt;OAuth flows&lt;/h2&gt;

&lt;p&gt;OAuth has multiple flows.
The flow determines how tokens will be obtained from the authorization server by the client.
The original &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OAuth specification&lt;/a&gt; defines four flows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Authorization Code&lt;/b&gt;: The client sends the user to the authorization server to obtain an authorization code. The client then exchanges this code for an access token.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;&lt;del&gt;Implicit&lt;/del&gt;&lt;/b&gt;: Simplified authorization code flow. The client sends the user to the authorization server to obtain an access token.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;&lt;del&gt;Resource Owner Password Credentials&lt;/del&gt;&lt;/b&gt;: The client uses the user’s credentials to ask the authorization server for an access token.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Client Credentials&lt;/b&gt;: The client ask the authorization server for an access token on its own behalf.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.ietf.org/id/draft-ietf-oauth-security-topics-15.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OAuth 2.0 Security Best Current Practice&lt;/a&gt; document makes it very clear: use the client credentials flow for client-to-client purposes, where a client acts on its own behalf.
In all other cases, the authorization code flow with PKCE is the way to go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Proof-Key for Code Exchange or PKCE&lt;/a&gt; (pronounced ‘pixy’) is an extension to OAuth which prevents interception attacks and enables the authorization code flow for public clients. 
If you are interested in what public clients are and how PKCE works, you can learn more about it in this &lt;a href=&quot;https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case, a user is involved, so the right flow is the authorization code flow with PKCE.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PKCE is (nearly always) mandatory in the &lt;a href=&quot;https://tools.ietf.org/html/draft-parecki-oauth-v2-1-03#section-9.8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;current OAuth 2.1 proposal&lt;/a&gt; by &lt;a href=&quot;https://aaronparecki.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aaron Parecki&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;the-azure-ad-part&quot;&gt;The Azure AD part&lt;/h1&gt;

&lt;p&gt;We already discussed that our Angular app will be an OAuth client.
All clients have to be registered at the authorization server, so this is what we have to configure in Azure AD.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A client is often called app(lication) in Azure AD.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can do this via the &lt;a href=&quot;https://portal.azure.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure Portal&lt;/a&gt;.
Log in and then navigate to Azure AD.
You should find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App registrations&lt;/code&gt; button on the left.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/azure-ad/app-registration.png&quot; alt=&quot;&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New registration&lt;/code&gt; and fill in the form:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/azure-ad/app-registration2.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Pick a name that’s appropriate for your client. 
We can also set up the redirect URI here. 
This is the URI where the user will be redirected to after logging in on the authorization server. 
It’s important that this matches the URL in our Angular configuration later. 
The supported account types option depends on who should be able to log in to your app.&lt;/p&gt;

&lt;p&gt;Notice how we don’t need to configure a client secret? 
Single-page apps can’t keep secrets hidden very well, which is why they have to be a public client. 
The authorization code flow used to be for confidential clients only, which use a secret or certificate to authenticate with the authorization server.&lt;br /&gt;
PKCE is what makes the authorization code flow possible for these kinds of clients.&lt;/p&gt;

&lt;p&gt;Wait.. That’s it?&lt;br /&gt;
Yes.
Well, kind of.
Later on, we will have to make an adjustment, so don’t close the portal just yet.
Once the client has been registered, we also need the client id and tenant id values for our application configuration.
I’ve changed mine to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;client_id&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;tenant_id&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for demonstration purposes, so don’t forget to change these values to yours in the configuration examples.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/azure-ad/app-registration3.png&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-spring-boot-part&quot;&gt;The Spring Boot Part&lt;/h1&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/jmeys/azure-ad-demo-backend&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;example Spring Boot application&lt;/a&gt; is a small API which serves some resources for the Angular application which we’ll discuss further down.&lt;br /&gt;
This is probably the easiest part to arrange, but also where I see most people get really confused.&lt;/p&gt;

&lt;h2 id=&quot;azure-starters-for-spring-boot&quot;&gt;Azure Starters for Spring Boot&lt;/h2&gt;

&lt;p&gt;If you want to set up the Spring Boot application as an OAuth client, you could use the Azure Active Directory starter from the &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializr&lt;/a&gt;.
It’s relatively hassle-free, given that you adjust some things left and right.&lt;br /&gt;
However, we want to set up our Spring Boot application as a resource server (rather than an OAuth client). 
For this, we will only use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-oauth2-resource-server&lt;/code&gt; dependency from Spring itself.
This further limits our dependencies on the Microsoft libraries.&lt;/p&gt;

&lt;h2 id=&quot;the-spring-boot-implementation&quot;&gt;The Spring Boot Implementation&lt;/h2&gt;

&lt;p&gt;We start by adding some extra libraries to the existing application.
Note that there are no versions defined as these should come from the Bill Of Materials (BOM).&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// build.gradle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-oauth2-resource-server'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-oauth2-jose'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you prefer Maven:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-oauth2-resource-server&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-oauth2-jose&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now set up the authorization part: who has access to what.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.builders.HttpSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oauth2ResourceServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a lot happening in a few lines here.
Let’s break it down:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.cors()&lt;/code&gt; allows &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;preflight checks&lt;/a&gt; to succeed.&lt;/li&gt;
  &lt;li&gt;We want all requests to the application to require authentication. If no authentication is provided, a 401 status will be returned.
Note that this is different if you configure the Spring Boot application as an OAuth client. In that case, the caller would be redirected to the login page.&lt;/li&gt;
  &lt;li&gt;Here we tell the application to behave as a resource server. Authentication should be provided via JWT access tokens.
To learn more about JWT tokens, you can check out my other &lt;a href=&quot;https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost about OAuth&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our JWT access tokens are signed by Azure AD and our application should check if their signature is correct.
Azure AD has an endpoint with the public key to do so, which we have to configure in our application.
A first option is to configure the issuer URI so that it can find the correct endpoint in the discovery document.
The discovery document is a convenience endpoint where a lot of the client configuration can be found, including the web keys endpoint.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the discovery document by appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.well-known/openid-configuration&lt;/code&gt; to the issuer URI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# application.properties
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://sts.windows.net/&amp;lt;&amp;lt;&amp;lt;tenant_id&amp;gt;&amp;gt;&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, we can search the keys endpoint ourselves in the discovery document and then provide this JSON web key (JWK) endpoint straight away:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# application.properties
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://login.windows.net/common/discovery/keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a real production configuration, I personally prefer to use the issuer URI as it offers most configuration via a single configuration property.
This will issue a network call to the discovery document when the application starts, so when testing in an environment where Azure AD is not reachable, this will cause the application to crash.
This is where the JWK URI can save the day.&lt;/p&gt;

&lt;h1 id=&quot;the-angular-part&quot;&gt;The Angular Part&lt;/h1&gt;

&lt;p&gt;When we now browse to any back-end endpoint, we receive: HTTP 401 Unauthorized.&lt;br /&gt;
Let’s fix this in our &lt;a href=&quot;https://github.com/jmeys/azure-ad-demo-frontend&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;example Angular application&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-angular-library&quot;&gt;The Angular Library&lt;/h2&gt;

&lt;p&gt;Azure AD has quickstart guides for different kinds of applications. 
For Angular, however, the &lt;a href=&quot;https://www.npmjs.com/package/@azure/msal-angular&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;msal-angular library&lt;/a&gt; currently only supports the implicit flow.
Since the current best practices draft strongly discourages the implicit flow in favour of the authorization code flow with PKCE, we will look for an alternative.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Microsoft Authentication Library for JavaScript (MSAL) should have support for PKCE soon, but at the time of writing, this feature was still in alpha.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even when there will be Microsoft libraries that can solve this problem, I try to stay vendor-neutral whenever possible.
This makes it relatively easy to switch from one OAuth provider to another one like &lt;a href=&quot;https://auth0.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/cognito/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Cognito&lt;/a&gt;, &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Okta&lt;/a&gt;, &lt;a href=&quot;https://www.keycloak.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Keycloak&lt;/a&gt;, …
The only downside is that vendor-specific features will not be available.
An example of this is the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;On-Behalf-Of flow (OBO)&lt;/a&gt;, which is only supported by the Microsoft libraries.&lt;/p&gt;

&lt;p&gt;Since OAuth and OIDC are standards, we should be able to use any (certified) library which supports these.
I say “should”, as the specifications left a lot of room for tinkering and additions. 
This will become clear during the implementation.&lt;/p&gt;

&lt;p&gt;My favourite go-to library is &lt;a href=&quot;https://github.com/manfredsteyer/angular-oauth2-oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;angular-oauth2-oidc&lt;/a&gt; by Manfred Steyer. 
This is also the one we’ll use in this example.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively, you can use the &lt;a href=&quot;https://www.npmjs.com/package/@azure/msal-angular&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;msal-angular library&lt;/a&gt; if you are fine with the implicit flow for now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;example-application-tour-of-heroes&quot;&gt;Example Application: Tour of Heroes&lt;/h2&gt;

&lt;p&gt;As an example of an Angular application, we will use the &lt;a href=&quot;https://angular.io/tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes&lt;/a&gt; Angular tutorial application. 
Feel free to use your own application as there should not be too many differences.&lt;/p&gt;

&lt;p&gt;Because the Tour of Heroes application uses an in-memory API instead of a Spring Boot application, we should change this in the code.
Of course, if you are using your own application or checked out &lt;a href=&quot;https://github.com/jmeys/azure-ad-demo-frontend&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the code from the repository&lt;/a&gt;, you can skip this step.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.module.ts&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// REMOVE this part:&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The HttpclientInMemoryWebApiModule module intercepts HTTP requests&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and returns simulated server responses.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Remove it when a real server is ready to receive requests.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HttpclientInMemoryWebApiModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;InMemoryDataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataEncapsulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and also change the url in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeroService&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// hero.service.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heroesUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:8080/api/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’re all set to go.&lt;/p&gt;

&lt;h2 id=&quot;the-angular-implementation&quot;&gt;The Angular Implementation&lt;/h2&gt;

&lt;p&gt;We start by installing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular-auth2-oidc&lt;/code&gt; library:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i angular-oauth2-oidc &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuthModule&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.module.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpclientModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/common/http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HttpclientModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resourceServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;allowedUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:8080/api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sendAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also where we define which APIs need the access token. 
In our case, this will be a Spring Boot application that’s running on port 8080 and will serve from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next up is the OAuth configuration.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// auth.config.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://login.microsoftonline.com/&amp;lt;&amp;lt;&amp;lt;tenant_id&amp;gt;&amp;gt;&amp;gt;/v2.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;redirectUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/dashboard&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;&amp;lt;&amp;lt;client_id&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strictDiscoveryDocumentValidation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;openid api://&amp;lt;&amp;lt;&amp;lt;client_id&amp;gt;&amp;gt;&amp;gt;/app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;issuer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirectUri&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clientId&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseType&lt;/code&gt; are pretty straightforward. 
All you need to do is to fill in the placeholder with the values from Azure AD. 
You can copy the values from the overview of the app in the Azure Portal.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/azure-ad/app-values.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This is where we need to tweak some configuration settings for the library to work with Azure AD.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strictDiscoveryDocumentValidation&lt;/code&gt; needs to be disabled due to the fact that not all URLs in the discovery document start with the issuer URL. 
This makes strict parsing fail, so we disable it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Strict discovery document validation is a best practice which protects against a threat where an attacker manages to fake the discovery document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might also have noticed the weird looking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api://&amp;lt;&amp;lt;&amp;lt;client_id&amp;gt;&amp;gt;&amp;gt;/app&lt;/code&gt; value in the list of scopes. 
The reason why we do this is explained very well in this &lt;a href=&quot;https://medium.com/@abhinavsonkar/making-azure-ad-oidc-compliant-5734b70c43ff&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium blogpost&lt;/a&gt; but boils down to the fact Azure AD uses a nonce in a special way in its JWT header.
This breaks the standard JWT validation.
If we include an application specific scope here, this will no longer be the case. 
Our Angular application won’t actually care for this as it just passes access tokens to the Spring Boot back-end.
The validation there will fail, resulting in a 401: Unauthorized. 
You can define this scope in the Azure Portal, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expose an API&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add a scope&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/azure-ad/add-scope.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This application-specific scope can have any name, so it doesn’t have to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;. 
Just make sure you use the same scope in the application as the one you defined in the Azure Portal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another requested scope we configure is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openid&lt;/code&gt;.
This indicates that we also want to log in the user.
We will not only receive an access token to contact the back-end API, but also an id token with information about the logged-in user.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Azure AD will serve an id token, regardless of the open-id scope. But we include it anyway to respect the &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;specification&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to trigger the login when a user has not logged in yet:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.component.ts&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authCodeFlowConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadDiscoveryDocumentAndLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upAutomaticSilentRefresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;We set up the OAuthService with the configuration from the previous step.
This makes sure it uses the authorization code flow + PKCE with the correct parameters.&lt;/li&gt;
  &lt;li&gt;The discovery document will be loaded, which is the issuer URI plus the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.well-known/openid-configuration&lt;/code&gt; suffix and then start the login process.&lt;/li&gt;
  &lt;li&gt;As access tokens have a short lifespan, we want them to be automatically refreshed in the background.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can now try out the application and should be redirected to the Microsoft login page.&lt;br /&gt;
After logging in, when we browse to the heroes page, we can see the 401 is gone, and the heroes are fetched again.&lt;/p&gt;

&lt;p&gt;Implement these steps or download the &lt;a href=&quot;https://github.com/jmeys/azure-ad-demo-frontend/tree/final&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;final front-end&lt;/a&gt; and &lt;a href=&quot;https://github.com/jmeys/azure-ad-demo-backend/tree/final&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;back-end&lt;/a&gt; code from Github to try it out.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Meys&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen-meys/&quot;, &quot;avatar&quot;=&gt;&quot;jeroen-meys.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;jeroen-meys-35416253&quot;, &quot;twitter&quot;=&gt;&quot;JeroenMeys&quot;, &quot;email&quot;=&gt;&quot;jeroen.meys@ordina.be&quot;, &quot;github&quot;=&gt;&quot;jmeys&quot;, &quot;bio&quot;=&gt;&quot;Jeroen is a Java Developer at Ordina Belgium who is passionate about security, breaking stuff and fixing things.&quot;}</name><email>jeroen.meys@ordina.be</email></author><category term="Security" /><category term="Azure AD" /><category term="Angular" /><category term="Spring Security" /><category term="Web Security OAuth" /><category term="OIDC" /><category term="PKCE" /><summary type="html">Azure Active Directory (Azure AD) is Microsoft’s cloud-based identity platform. In this blogpost, we will discuss how to use it to secure web applications with OAuth 2.0 and OpenID Connect (OIDC). More specifically an Angular single-page application (SPA) which makes calls to a Spring Boot back-end.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/azure-ad/azure-ad.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/azure-ad/azure-ad.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Creating a custom form control in Angular</title><link href="https://ordina-jworks.github.io/architecture/2020/08/15/angular-custom-control.html" rel="alternate" type="text/html" title="Creating a custom form control in Angular" /><published>2020-08-15T00:00:00+00:00</published><updated>2020-08-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/08/15/angular-custom-control</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/08/15/angular-custom-control.html">&lt;p&gt;A part of good application architecture is using the correct tools for the job.
With forms in Angular, this means knowing when to use Template Driven Forms vs. Reactive Forms.
In short, this depends mostly on the size of your form.
A simple login screen may use Template Driven Forms, whereas a more advanced web form should use Reactive Forms.
These forms consist of FormGroups and FormControls, keeping the form value organised.&lt;/p&gt;

&lt;p&gt;By default, Angular already allows to bind a HTMLInputElement or HTMLSelectElement to a control using the FormControl and FormControlName (in combination with FormGroup) directives.
This is enough for most forms, but sometimes there is a need for something more specialised, for example a date picker or a slider.
There are numerous packages on npm providing these and most component libraries also include the most common controls for your development pleasure.
But sometimes you can’t find the correct package to match your needs.
I still see many developers use a default text input field, and parsing the value after the form is submitted.
Obviously there is a better way and I’ll describe it below.&lt;/p&gt;

&lt;h2 id=&quot;case-study&quot;&gt;Case study&lt;/h2&gt;

&lt;p&gt;As a case study, I’ve chosen to create a color picker.
This picker should not have any traditional input control, but instead display the selected color in a rounded circle.
Clicking on the control should open a color picker and allow the user to edit the value.
The control should be part of a FormGroup, so that Validators can be added.&lt;/p&gt;

&lt;p&gt;For those interested, the full code of this article is available at &lt;a href=&quot;https://stackblitz.com/edit/custom-control-color-picker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;StackBlitz&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-color-picker&quot;&gt;The color picker&lt;/h2&gt;

&lt;p&gt;Let’s start with creating a color picker.
Because developers shouldn’t do everything themselves, I opted to reuse an existing color-picker dependency.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Search results for 'npm i want a color picker'&quot; src=&quot;/img/2020-08-15-angular-custom-control/1ra016d24o.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin-bottom: 3em; font-style: italic;&quot;&gt;I just took the first one I came across.&lt;/div&gt;

&lt;p&gt;To challenge myself, I tried to look for a control picker with as little helping functions as possible.
The only thing I wanted from it, is to show it on demand, hide it on demand and get/set the value.
Luckily my first pick was just that.
No TypeScript, no open/close status, nothing fancy.&lt;/p&gt;

&lt;p&gt;This is what it can do:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;AColorPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The possible events are “change”, “coloradd” and “colorremove”.
The last two are supposed to help with a color palette, but that’s out of scope, which leaves the only event being “change”.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-color-picker-component&quot;&gt;Creating a color picker component&lt;/h2&gt;

&lt;p&gt;As a rule of thumb, a component that will be used as a control should be a dumb component.
I mostly set the template and style inline for dumb components to keep them from growing too big.&lt;/p&gt;

&lt;p&gt;This is the eventual code of the component.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AfterViewInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AColorPicker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a-color-picker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-color-picker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
    &amp;lt;div class=&quot;picker-icon&quot; [class.disabled]=&quot;isDisabled&quot; style=&quot;background: {{ color }}&quot; (click)=&quot;openPicker()&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div #pickerElement class=&quot;picker&quot; acp-show-rgb=&quot;no&quot;
     acp-show-hsl=&quot;no&quot;
     acp-show-hex=&quot;no&quot;&amp;gt;
      &amp;lt;button *ngIf=&quot;open&quot; type=&quot;button&quot; (click)=&quot;closePicker()&quot;&amp;gt;close&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`
    .picker {
      display: flex;
      flex-direction: column-reverse;
      position: absolute;
    }

    .picker-icon {
      width: 1em;
      height: 1em;
      margin: 2px 0;
      border: 2px solid white;
      box-sizing: border-box;
      box-shadow: 0 0 1px 1px gray;
      border-radius: 50%;
    }

    .picker-icon.disabled {
      opacity: 0.5;
    }
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;changeDetection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OnPush&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ColorPickerComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AfterViewInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnDestroy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#fff000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;ViewChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pickerElement&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pickerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeDetectorRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChangeDetectorRef&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngAfterViewInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initializePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;ngOnDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;openPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;closePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initializePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pickerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AColorPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pickerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Picker could not be initialized&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeDetectorRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markForCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This component can now display the color picker, by clicking the icon.
It can also be closed by clicking the close button that’s added to the picker.
I like to keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeDetection.OnPush&lt;/code&gt; on dumb components, but that means that I need to inject the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeDetectorRef&lt;/code&gt; to update the color while the picker is being used.
Without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markForCheck&lt;/code&gt;, the color would only be updated when the picker is closed.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;A demonstration of the picker.&quot; src=&quot;/img/2020-08-15-angular-custom-control/9wh3d54f1b.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin-bottom: 3em; font-style: italic;&quot;&gt;It's working! It's working!&lt;/div&gt;

&lt;h2 id=&quot;making-a-control-out-of-it&quot;&gt;Making a control out of it&lt;/h2&gt;

&lt;p&gt;Now comes the interesting part.
I want to be able to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-color-picker&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControlName&lt;/code&gt; directives.
If you’d just use these directives, you’d get the error “No value accessor for form control with name: &amp;lt;the name of your control&amp;gt;”.
Simply put, this means that the control does not know what to bind to.
So we start by implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlValueAccessor&lt;/code&gt; interface from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/forms&lt;/code&gt; into the component.
This interface has three functions that need to be implemented and one optional function.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;writeValue(obj: any): void&lt;/li&gt;
  &lt;li&gt;registerOnChange(fn: any): void&lt;/li&gt;
  &lt;li&gt;registerOnTouched(fn: any): void&lt;/li&gt;
  &lt;li&gt;setDisabledState?(isDisabled: boolean): void&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setDisabledState&lt;/code&gt; is optional, but also the easiest to understand.
It’s triggered by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControl.enable()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControl.disable()&lt;/code&gt; functions.
The other functions may be a bit more difficult to understand.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setDisabledState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeDetectorRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markForCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeValue&lt;/code&gt; is called every time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControl.setValue(obj)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formControl.patchValue(obj)&lt;/code&gt; is called.
The type of obj is by default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;, because ReactiveForms are still not strongly typed.
You can for example call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberControl.setValue('not a number')&lt;/code&gt; and your application will build correctly.
Even at runtime you’d probably not get an error, but that doesn’t mean this is a valid value.
That’s why there are validators.
It’s best to parse this value to something understandable for your component.
In this case, the color will be a string containing either the hexadecimal value like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ff0000&lt;/code&gt; or a word like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;red&lt;/code&gt;.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a-color-picker&lt;/code&gt;-package luckily allows all string values and will convert to a hexadecimal value that matches.
A downside of this package is that it has to be bound after view init.
However &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeValue&lt;/code&gt; will be called before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngAfterViewInit&lt;/code&gt;, so the initial form value might not be set correctly.
That is why the value is also stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;, which is used to set the initial value when the picker is initialized.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;writeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerOnChange&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerTouched&lt;/code&gt; are used to set a callback function when the control’s value changes or when it’s being touched without a change.
These callbacks can be called whenever you want in your component and they are usually the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setValue&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markAsTouched&lt;/code&gt; properties.
They are usually implemented like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onTouched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;registerOnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;registerOnTouched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onTouched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll be using them in our change event, like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;closePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onTouched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeDetectorRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markForCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we test the control now, we’ll still get the error “No value accessor for form control with name: &amp;lt;the name of your control&amp;gt;”.
The reason is that, even though we implemented our component as a ControlValueAccessor, we still didn’t specify that the control should bind to it.
There are two ways to do this.
The easiest way is to provide the component as a value accessor, by adding the following to the component’s decorator:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;     
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;useExisting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forwardRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ColorPickerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The injection token &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NG_VALUE_ACCESSOR&lt;/code&gt; can be imported from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/forms&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forwardRef&lt;/code&gt; can be imported from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/core&lt;/code&gt;.
Simply put, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forwardRef&lt;/code&gt; allows the dependency injector to refer to a reference that hasn’t been defined yet.&lt;/p&gt;

&lt;p&gt;Now we have a fully functioning color picker control.&lt;/p&gt;

&lt;h2 id=&quot;validating-the-control-value&quot;&gt;Validating the control value&lt;/h2&gt;

&lt;p&gt;Validating a control with a custom ControlValueAccessor works exactly the same as validating any other FormControl.
You can have synchronous and asynchronous validators.&lt;/p&gt;

&lt;p&gt;An evident example is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required&lt;/code&gt; validator.
Something more specific might be a validator to have at least 50% blue in the color:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;myForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Validators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidateMinimumBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidateMinimumBlue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minimumBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;*ngIf=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myForm.get('fgColor').hasError('minimumBlue')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Not blue enough&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;A demonstration of the picker validation.&quot; src=&quot;/img/2020-08-15-angular-custom-control/warqsmdbk7.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin-bottom: 3em; font-style: italic;&quot;&gt;I like the color blue, ok.&lt;/div&gt;

&lt;p&gt;Another example is a contrast validator on the form group itself:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;myForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Validators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidateMinimumBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidateContrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fgColor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidateContrast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftControlName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightControlName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftControlName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rightControlName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contrast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WCAG_2_0_AA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;contrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WCAG_2_0_AA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;styling-invalid-and-touched-controls&quot;&gt;Styling invalid and touched controls&lt;/h2&gt;

&lt;p&gt;Most of the time you want a visual indication that a control is valid or invalid.
You can do this using css in your component like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched.ng-invalid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;darkred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched.ng-invalid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'❌'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   

&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched.ng-valid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ng-touched.ng-valid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.picker-icon&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'✅'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;A demonstration of the indication that the control is valid.&quot; src=&quot;/img/2020-08-15-angular-custom-control/xnk6yxgsdr.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reacting-on-more-behavior&quot;&gt;Reacting on more behavior&lt;/h2&gt;

&lt;p&gt;If you want to your code to react on more control behaviour, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statusChanges&lt;/code&gt;, you cannot do this out of the box with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NG_VALUE_ACCESSOR&lt;/code&gt;.
However, you can inject &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NgControl&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/forms&lt;/code&gt; instead.
Angular uses this instance to represent the control within the object graph that has been created for the form.&lt;/p&gt;

&lt;p&gt;To use this, you have to remove the provider for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NG_VALUE_ACCESSOR&lt;/code&gt; and instead add this in your constructor:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NgControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueAccessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can do things like this in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngAfterViewInit&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_destroyed$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The current status of the control is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or if you really want to hook onto specific methods, you can do this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markAsDirty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markAsDirty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markAsDirty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;markAsDirty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Mark as dirty has been called&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;I would not recommend these kind of hooks, but if you do need them, be extra careful for infinite loops and other bugs!&lt;/strong&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on Reactive Programming and dealing with it. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Architecture" /><category term="Angular" /><summary type="html">A part of good application architecture is using the correct tools for the job. With forms in Angular, this means knowing when to use Template Driven Forms vs. Reactive Forms. In short, this depends mostly on the size of your form. A simple login screen may use Template Driven Forms, whereas a more advanced web form should use Reactive Forms. These forms consist of FormGroups and FormControls, keeping the form value organised.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-08-15-angular-custom-control/qyt3dcd64l.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-08-15-angular-custom-control/qyt3dcd64l.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Tailwind CSS as a base for a Design System</title><link href="https://ordina-jworks.github.io/frontend/2020/08/15/tailwindcss.html" rel="alternate" type="text/html" title="Using Tailwind CSS as a base for a Design System" /><published>2020-08-15T00:00:00+00:00</published><updated>2020-08-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/frontend/2020/08/15/tailwindcss</id><content type="html" xml:base="https://ordina-jworks.github.io/frontend/2020/08/15/tailwindcss.html">&lt;blockquote&gt;
  &lt;p&gt;In the beginning of the year we had the opportunity to build a design system for a large customer.
So how did we start?
Well, putting together designers and developers to find the correct tools and frameworks to get it done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#choosing-the-correct-css-strategy&quot;&gt;Choosing the correct CSS strategy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#evaluating-tailwind-css&quot;&gt;Evaluating Tailwind CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;choosing-the-correct-css-strategy&quot;&gt;Choosing the correct CSS strategy&lt;/h1&gt;

&lt;p&gt;When we (developers) talked to the designers, they wanted a clean CSS sheet without unnecessary classes.
This means we only need to foresee the classes they wanted to be available in the design system, nothing more.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Building the CSS from the ground up was the first idea.
That way we could only write classes we actually needed.
Since we didn’t have all the time to write so much CSS classes, we decided we couldn’t do this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CSS libraries like &lt;a href=&quot;https://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;https://get.foundation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Foundation&lt;/a&gt;, &lt;a href=&quot;https://materializecss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Materialise&lt;/a&gt;, … have too much classes by default.
 As a side note, we looked for ways to disable certain classes, but those libraries are too complicated to customise.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another solution could be the use of ‘utility-first’ CSS frameworks.
We liked the idea of &lt;a href=&quot;https://tailwindcss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tailwind CSS&lt;/a&gt; to use a single config file and generate all the necessary classes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;evaluating-tailwind-css&quot;&gt;Evaluating Tailwind CSS&lt;/h1&gt;

&lt;p&gt;When we had a closer look at Tailwind we saw a lot of positive points, but some negative as well.
Below you can find some valuable points we like to share:&lt;/p&gt;

&lt;h3 id=&quot;configurable-in-javascript&quot;&gt;Configurable in JavaScript&lt;/h3&gt;

&lt;p&gt;We’re JavaScript engineers, so we love the fact we can just write our config in JSON.
We used constants to define the various configurations and then put it in the module exports:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#fce9ea&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#e72f3c&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#971e26&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#e7f5ed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#34ab66&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#226f42&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;0.75rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;0.875rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1.125rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1.25rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1.5rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1.75rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;2.25rem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fontWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;regular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;screens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;640px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;641px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;960px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;961px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1280px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1281px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;screens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see this is very customisable.
You can use your own namings for almost everything like colors, fonts, screens, …&lt;/p&gt;

&lt;p&gt;More info can be found in the &lt;a href=&quot;https://tailwindcss.com/docs/configuration/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;configuration documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;responsive&quot;&gt;Responsive&lt;/h3&gt;

&lt;p&gt;You can completely customise your responsive breakpoints in the config file.
By default, Tailwind’s breakpoints only include a min-width and don’t include a max-width, which means any utilities you add at a smaller breakpoint will also be applied at larger breakpoints.
If you’d like to apply a utility at one breakpoint only, the solution is to undo that utility at larger sizes by adding another utility that counteracts it.
Or you simply overwrite the defaults, so they include a min and max value.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;screens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tablet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;640px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @media (max-width: 640px) { ... }&lt;/span&gt;

      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;laptop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;641px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1024px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @media (min-width: 641px) and (max-width: 1024px) { ... }&lt;/span&gt;

      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;desktop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1015px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @media (min-width: 1025px) { ... }&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you configured the screens, you can use the screen prefix everywhere, so your design can be responsive.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bg-error-500 tablet:bg-error-100&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Error message
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;component-classes-can-be-extracted&quot;&gt;Component classes can be extracted&lt;/h3&gt;

&lt;p&gt;While you can do a lot with just utility classes, as a project grows it can be useful to codify common patterns into higher level abstractions.
Keeping a long list of utility classes in sync across many component instances can quickly become a real maintenance burden, so when you start running into painful duplication like this, it’s a good idea to extract a component.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Repeating these classes for every button can be painful --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Button
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For small components like buttons and form elements, you can use Tailwind’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@apply&lt;/code&gt; directive to easily extract common utility patterns to CSS component classes.&lt;/p&gt;

&lt;p&gt;Here’s what a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.btn-blue&lt;/code&gt; class might look like using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@apply&lt;/code&gt; to compose it from existing utilities:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.btn-blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@apply&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;bg-blue-500&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;text-white&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;font-bold&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;py-2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;px-4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rounded;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn-blue&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@apply&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;bg-blue-700;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;usable-with-preprocessors-like-sass&quot;&gt;Usable with preprocessors like Sass&lt;/h3&gt;

&lt;p&gt;Since Tailwind is a PostCSS plugin, there’s nothing stopping you from using it with Sass, Less, or other preprocessors, just like you can with other PostCSS plugins like Autoprefixer.&lt;/p&gt;

&lt;p&gt;The most important thing to understand about using Tailwind with a preprocessor is that preprocessors like Sass run separately, before Tailwind.
This means that you can’t feed output from Tailwind’s theme() function into a Sass color function for example, because the theme() function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS.&lt;/p&gt;

&lt;h3 id=&quot;readability&quot;&gt;Readability&lt;/h3&gt;

&lt;p&gt;A negative point could be the readability.
Sometimes a list of classes can grow big and is unable to be understood properly.
The need to extract a component class can be a solution (as mentioned above), but this is not always possible.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// example of a big class-list
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid sm:col-span-2 md:col-span-3 lg:col-span-3 xl:col-span-3 w-full bg-blue-500 text-white font-bold h-20 py-2 px-4 my-5 mt-4 rounded&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;custom-tailwind-plugins&quot;&gt;Custom Tailwind plugins&lt;/h3&gt;

&lt;p&gt;Although we could do everything with Tailwind, we needed to have some Sass variables separately available to use in our web components.
Therefore we used a plugin to generate Sass variables based on your Tailwind config.&lt;/p&gt;

&lt;p&gt;More information to write and use your own plugins can be found on &lt;a href=&quot;https://tailwindcss.com/docs/plugins/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tailwind’s documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tailwindcss/plugin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tailwind-scss-variables&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;theme.colors&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;theme.screens&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/scss/partials/_tailwind-variables.scss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;After using Tailwind CSS for almost 6 months now.
We still find we made the correct choice.
Given the fact we still don’t have the time to write css ourselves, finding the correct utility class is fairly easy using the documentation, or even on a (printed) &lt;a href=&quot;https://nerdcave.com/tailwind-cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Frédéric&quot;, &quot;last_name&quot;=&gt;&quot;Ghijselinck&quot;, &quot;github&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;twitter&quot;=&gt;&quot;f_ghijselinck&quot;, &quot;linkedin&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;permalink&quot;=&gt;&quot;/author/frederic-ghijselinck/&quot;, &quot;avatar&quot;=&gt;&quot;frederic-ghijselinck.jpg&quot;, &quot;title&quot;=&gt;&quot;Competence Lead JavaScript&quot;, &quot;email&quot;=&gt;&quot;frederic.ghijselinck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Frédéric is a Senior developer at Ordina Belgium, focussing on Frontend Development with technologies as Angular and TypeScript. Next to frontend development, he continues to maintain his backend development skills using the Spring technology stack. Frédéric is also Competence Lead for the JavaScript Competence Center where he gives workshops, talks and courses about the newest technologies.&quot;}</name><email>frederic.ghijselinck@ordina.be</email></author><category term="Frontend" /><category term="CSS" /><category term="JavaScript" /><category term="Design Systems" /><category term="Design" /><category term="Tailwind" /><summary type="html">In the beginning of the year we had the opportunity to build a design system for a large customer. So how did we start? Well, putting together designers and developers to find the correct tools and frameworks to get it done.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-08-15-tailwindcss/tailwind-500-293.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-08-15-tailwindcss/tailwind-500-293.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">10 Best Practices in UX and UI Design</title><link href="https://ordina-jworks.github.io/design/2020/07/28/10-Best-Practices-In-UX-UI-Design.html" rel="alternate" type="text/html" title="10 Best Practices in UX and UI Design" /><published>2020-07-28T00:00:00+00:00</published><updated>2020-07-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/design/2020/07/28/10-Best-Practices-In-UX-UI-Design</id><content type="html" xml:base="https://ordina-jworks.github.io/design/2020/07/28/10-Best-Practices-In-UX-UI-Design.html">&lt;blockquote&gt;
  &lt;p&gt;UX and UI design principles often lead to people thinking ‘well duh!’, until they actually have to try and create a user-friendly website or app. 
The basic gist of creating a user-friendly design is making sure the user doesn’t have to think twice about doing something. 
The longer it takes for a user to be able to execute an action, the more annoyed they will get. 
The usability of your website or app can already be improved with just a few tweaks. Below is an overview of ten ways to make your users happy.&lt;/p&gt;

  &lt;p&gt;As I’m just taking my first steps in the UX/UI design world, I still have lots to learn. Feedback is greatly appreciated!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1-company-logo-placement-and-usage&quot;&gt;Company logo placement and usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-make-clickable-elements-obvious&quot;&gt;Make clickable elements obvious&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-clearly-show-which-elements-on-a-page-belong-together&quot;&gt;Clearly show which elements on a page belong together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-be-honest&quot;&gt;Be honest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-accessibility&quot;&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-stick-to-conventions&quot;&gt;Stick to conventions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-breadcrumbs&quot;&gt;Breadcrumbs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-less-clicks--better&quot;&gt;Less clicks = better&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9-dropdown-lists&quot;&gt;Dropdown lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-include-visual-indicators-of-length-and-size&quot;&gt;Include visual indicators of length and size&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-company-logo-placement-and-usage&quot;&gt;1. Company logo placement and usage&lt;/h2&gt;
&lt;p&gt;First things first. Your user always needs to find their way back to the homepage in a heartbeat. 
Providing a ‘Home’ link in your menu is not enough. 
It’s surprising how often users click on the company logo on the top of your page so make sure it’s visible from every page and provide a link behind it to the homepage.
The company logo is typically placed in the top left corner (on sites designed for left-to-right reading).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Logo of Goodreads is placed in the top left corner and is clickable&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/logo-placement.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-make-clickable-elements-obvious&quot;&gt;2. Make clickable elements obvious&lt;/h2&gt;
&lt;h3 id=&quot;buttons&quot;&gt;Buttons&lt;/h3&gt;
&lt;p&gt;Confirmation buttons need to stand out from the rest of the page so they immediately draw the user’s attention.
Adding a shadow effect to the buttons lets the user know it’s clickable and they can interact with it.
Notice the difference between the following examples:&lt;/p&gt;

&lt;p&gt;Example 1:
&lt;img alt=&quot;Clear confirmation button&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/CTA-colored.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Example 2:
&lt;img alt=&quot;Unclear confirmation button&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/CTA-bland.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the bottom example the label to save the form is still concise and clear, users should thus still be able to eventually save the data, but it takes a moment longer to register which button to click to make this happen. 
Remember, the user wants to spend as little time as possible determining the next course of action.&lt;/p&gt;

&lt;p&gt;So-called secondary actions like ‘Cancel’ should look the least appealing of the options because it usually isn’t the next action the user wants to take.
Making them the least appealing minimizes the chance of misclicks and nudges the user further towards a successful ending, such as a purchase.&lt;/p&gt;

&lt;p&gt;Let’s also discuss the location and order of the ‘Cancel’ and ‘OK’ (or other confirmation actions such as ‘Save’, ‘Yes’, ‘Submit’, etc) buttons.&lt;/p&gt;

&lt;p&gt;In Windows apps, the ‘OK’ button should come first and the ‘Cancel’ button second. 
This implementation follows the ‘natural reading order’ (again, on sites designed for left-to-right reading).
Additionally, keyboard users will also reach the ‘OK’ button sooner.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Unclear confirmation button&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/OkCancelWindows.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On Apple machines however, ‘Cancel’ will come first and ‘OK’ second.
The idea here is that the flow feels more natural since the ‘OK’ button closes that section and the next step (‘OK’) is placed most right, whilst the previous step (‘Cancel’) is placed left.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Order of OK and Cancel on Apple machines&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/OkCancelApple.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 450px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When designing for the web, we usually opt to put the buttons on the left-side of the screen, with the confirmation button first. 
‘Example 1’ in this section illustrates this as well:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Clear confirmation button&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/CTA-colored.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hyperlinks&quot;&gt;Hyperlinks&lt;/h3&gt;
&lt;p&gt;Clickable words on a web page are best underlined and shown in a different color than the rest of the text. 
Using solely a different color might be interpreted as an emphasis on that word and another problem that this presents is that colorblind people will have issues finding the clickable links in your text.
Just underlining a word is already a good visual indicator that it’s clickable, but your best bet is to make sure that the link ‘pops’.
By going for a combination of coloring the text and underlining it, you’re making sure there’s no doubt in the user’s mind that the word is clickable.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Hyperlinks are best colored and underlined&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/hyperlinks.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be clear, the same goes for the other way around as well. Underlining words that aren’t clickable might cause confusion. 
If you want to emphasise certain parts of the text, you can for example use an italic font for that.&lt;/p&gt;

&lt;p&gt;As a side note, sometimes the location of the links already provides the user with the knowledge that they’re clickable, for example your menu items or links in your footer.&lt;/p&gt;

&lt;h2 id=&quot;3-clearly-show-which-elements-on-a-page-belong-together&quot;&gt;3. Clearly show which elements on a page belong together&lt;/h2&gt;
&lt;h3 id=&quot;titles-and-subtitles&quot;&gt;Titles and subtitles&lt;/h3&gt;
&lt;p&gt;Titles and subtitles are a must-have when your website needs to convey any sort of information to your user.
Walls of text are very hard to get through and will not, I repeat, will not keep your user’s attention. 
Split your text in sections and be sure to use consistent font sizes for the titles. 
If they aren’t used consistently, there’s no way to know which sections belong together. 
Take a look at the following example:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Use titles and subtitles consistently&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/titles-and-subtitles.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s clear from this example that ‘Subtitle 1’ and ‘Subtitle 2’ both are part of the ‘Title’ section.
The following text is much more confusing:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Use titles and subtitles consistently - example with inconsistent subtitles&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/titles-and-subtitles-confusing.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is supposed to be communicated here? ‘Subtitle 2’ using the same coloring as ‘Subtitle 1’ but it’s just as large as ‘Title’. 
So does the author mean it’s still part of the ‘Title’ section or did he or she mean to create a whole separate section with a different ‘Title’? Instructions unclear.&lt;/p&gt;

&lt;p&gt;For screen readers (and other assistive technologies), it’s best to show titles by using the different title tags that are available in HTML, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, etc. 
This way, the screen reader is aware that that specific text is a (sub)title and can communicate this information to the user.&lt;/p&gt;

&lt;h2 id=&quot;4-be-honest&quot;&gt;4. Be honest&lt;/h2&gt;
&lt;p&gt;One of the biggest irks of customers is being presented with crucial information and extra costs late in the ordering process. 
Customers want to be able to make an informed decision about your product as soon as possible, preferably on the product page itself. 
Once they make the decision to order, the last thing they want to encounter is new information later on that might give the perception that they have been deceived.
For their sake, and the company’s, it’s vital to show the shipping costs, any fees, delivery moment, etc as early as possible.&lt;/p&gt;

&lt;p&gt;Take a look at how Coolblue handles this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Coolblue showing stock indicator and delivery moment and costs&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/coolblue.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bookdepository handles this similarly with a link to extra information on delivery since they’re providing worldwide shipping:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Bookdepository showing stock indicator, delivery moments and costs&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/bookdepository.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above examples, shipping costs are free. 
If your shipping costs depend on the items in the shopping cart or other factors, the customer should to be able to view the costs when viewing the cart.
Coliro shows this in the next example where you can select your country to determine the shipping costs:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Coliro shows the shipping costs per country on the cart page&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/coliro.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-accessibility&quot;&gt;5. Accessibility&lt;/h2&gt;
&lt;p&gt;Accessibility is a whole different and separate topic to discuss. We’ll cover this in a future blog post, but for now, let’s focus on some &lt;em&gt;low-hanging fruit&lt;/em&gt;.
Websites should preferably be designed for impaired persons as well, whether it’s a temporary impairment (like a broken arm) or a permanent one (like blindness).
It’s practically impossible to please everyone, but we can at least try to make everyone’s lives a little easier by making our website and apps as accessible as possible.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Colors: Provide a strong color contrast between the text and the background. This will make the text more readable for visually impaired persons.&lt;/li&gt;
  &lt;li&gt;Keyboard use on websites: Users should be able to navigate through the website using only the keyboard so that the use of a mouse isn’t necessary.&lt;/li&gt;
  &lt;li&gt;Text size: It should be easy for the user to increase and decrease the size of the text so visually impaired persons can select their optimal text size.&lt;/li&gt;
  &lt;li&gt;Alt text: Provide alt text to every image that screen readers should read out loud.&lt;/li&gt;
  &lt;li&gt;Captions on videos: Hearing impaired persons benefit greatly from subtitles and captions on videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-stick-to-conventions&quot;&gt;6. Stick to conventions&lt;/h2&gt;
&lt;p&gt;The rule regarding icon usage and link labeling is pretty simple: stick to conventions! 
The icons for search, shopping cart, profile, etc.. are well-known and you shouldn’t try and reinvent the wheel by using ‘innovative’ icons.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Use well-known icons&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/icons.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, unless you’re using icons that are well-known and absolutely clear on their purpose, like the icons above, it’s always a good idea to add labels to your icons.
If you’re unsure about the use of labels, user testing will tell you whether users are experiencing issues with your icons without labels or not.&lt;/p&gt;

&lt;p&gt;How you label your links and buttons is important as well. When users are looking for job opportunities on your website, typical keywords are ‘Careers’ or ‘Jobs’.
By using for example ‘Employment’, users might not be able to find your career page (as easily).&lt;/p&gt;

&lt;h2 id=&quot;7-breadcrumbs&quot;&gt;7. Breadcrumbs&lt;/h2&gt;
&lt;p&gt;Like Hansel and Gretel, we all need to find our way back sometimes. 
Breadcrumbs, and in our case meant specifically online, help us to do so, if done right.
Take a look at the following example from ASOS:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ASOS uses very clear breadcrumbs&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/asos.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With breadcrumbs, users can see in the blink of an eye in which (sub)category the current page belongs. 
This is interesting for your users who ended up on a specific product page through a Google search. 
By using breadcrumbs, your users are able to quickly understand where they are situated within your website.
Being able to actually click on a (sub)category in the breadcrumbs will help your users to easily retrieve an overview of similar products.&lt;/p&gt;

&lt;p&gt;Even when you’re just mindlessly browsing a website and you clicked on twenty different items within a category, you don’t want to click the back button twenty-one times to go back to the actual results within the current category.
Breadcrumbs make sure that your user can browse your website more easily, which creates less frustration for your user, which hopefully creates a higher conversion.&lt;/p&gt;

&lt;h2 id=&quot;8-less-clicks--better&quot;&gt;8. Less clicks = better&lt;/h2&gt;
&lt;p&gt;Usually.&lt;/p&gt;

&lt;p&gt;Try to save the user clicks as much as possible. 
Like Steve Krug describes in his &lt;a href=&quot;http://sensible.com/dmmt.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;em&gt;Don’t Make Me Think&lt;/em&gt;&lt;/a&gt;, instead of only providing a tracking number for a shipment, you can add a link to the e-mail that opens the carrier’s website with the tracking number already filled in.
Another example would be to provide a Google Maps preview on the contact page instead of just providing the address.&lt;/p&gt;

&lt;p&gt;When possible, also try to mention any form errors while the user is entering the data. 
Whether it be the phone number format or a password that is too short, anything that can be detected client-side should immediately be communicated to the user instead of waiting until the user clicks ‘Submit’.&lt;/p&gt;

&lt;p&gt;Now, I said &lt;em&gt;‘usually’&lt;/em&gt; at the beginning of this section. 
There are of course a few exceptions. 
One of them is the FAQ page.
If you want to provide quite some questions and answers, it’s best not to throw it all into one big overview.
A good idea here would be to provide all the possible questions in a list and make these questions clickable.
The answer should then only show up after the user has clicked on the question. 
This will provide a clean, clear, concise and easy to browse FAQ page for your user, even though there are a few more clicks involved.&lt;/p&gt;

&lt;h2 id=&quot;9-dropdown-lists&quot;&gt;9. Dropdown lists&lt;/h2&gt;
&lt;p&gt;Dropdown lists are simple to implement and easy to use so they are present on countless websites.
The key here is to only start using dropdown lists when we’re talking about five or more options. 
When there are less options present, radio buttons might be a better choice for you so the user can see all the available options immediately.&lt;/p&gt;

&lt;h2 id=&quot;10-include-visual-indicators-of-length-and-size&quot;&gt;10. Include visual indicators of length and size&lt;/h2&gt;
&lt;p&gt;Always assume that users are in a rush. 
What users will typically do when encountering a web page that contains a lot of text, is to check how long that text actually is before starting to read it. 
They need an idea of length or time to know if it’s worth to start reading at all. 
Medium.com does this by adding the number of minutes it takes to read their articles:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Medium.com showing how long an article will take to read&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/medium.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 250px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Providing a progress indicator also helps the customer complete the order. 
It shows where the user is in the process and what information still needs to be entered before the order can be completed.
Users quickly lose their interest if they don’t have an idea how much longer the process will take. 
Progress bars are essential and adding detailed information like Coolblue does in the below example will keep your user’s focus towards the end goal (in this case completing the purchase).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Coolblue shows the progress while ordering&quot; src=&quot;/img/2020-07-28-Best-Practices-In-UX-UI-Design/coolblue-order.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The same also goes for questionnaires by the way. 
How often do you complete an online questionnaire if there isn’t any information available on how long it might take to fill in?
Exactly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As said before in this blog post, it’s practically impossible to please everyone with your design.
What’s aesthetically pleasing to one person might not be so for the next one.
But user experience is more than the look, the layout, the colors used. 
We’re also talking about flow here, about creating an experience for each user, regardless of impairment, that helps them reach their goal flawlessly, without frustration, with little nudges in the right direction.&lt;/p&gt;

&lt;p&gt;If you’re looking for some UX/UI design experts to help with your projects, don’t hesitate to contact my colleagues at &lt;a href=&quot;http://cw.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clockwork&lt;/a&gt;!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Derya&quot;, &quot;last_name&quot;=&gt;&quot;Duru&quot;, &quot;permalink&quot;=&gt;&quot;/author/derya-duru/&quot;, &quot;title&quot;=&gt;&quot;UX Designer &amp; React developer&quot;, &quot;email&quot;=&gt;&quot;derya.duru@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;derya-duru-52348a3a&quot;, &quot;avatar&quot;=&gt;&quot;derya-duru.jpg&quot;, &quot;github&quot;=&gt;&quot;Deryaa&quot;, &quot;bio&quot;=&gt;&quot;Derya is a UX Designer and React developer at Ordina Belgium. She enjoys being challenged and as the Competence Leader Agile &amp; Design, she tries to improve her own skills continuously, while hoping to share her knowledge and help others with their understanding of Agile frameworks and UX/UI design.&quot;}</name><email>derya.duru@ordina.be</email></author><category term="Design" /><category term="Design" /><category term="UX Design" /><category term="UI Design" /><summary type="html">UX and UI design principles often lead to people thinking ‘well duh!’, until they actually have to try and create a user-friendly website or app. The basic gist of creating a user-friendly design is making sure the user doesn’t have to think twice about doing something. The longer it takes for a user to be able to execute an action, the more annoyed they will get. The usability of your website or app can already be improved with just a few tweaks. Below is an overview of ten ways to make your users happy. As I’m just taking my first steps in the UX/UI design world, I still have lots to learn. Feedback is greatly appreciated!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-07-28-Best-Practices-In-UX-UI-Design/design-banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-07-28-Best-Practices-In-UX-UI-Design/design-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pondering The Five Dysfunctions of a Team</title><link href="https://ordina-jworks.github.io/architecture/2020/07/08/Book-Five-Dysfunctions.html" rel="alternate" type="text/html" title="Pondering The Five Dysfunctions of a Team" /><published>2020-07-08T00:00:00+00:00</published><updated>2020-07-08T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/07/08/Book-Five-Dysfunctions</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/07/08/Book-Five-Dysfunctions.html">&lt;p&gt;Being triggered by a colleague to read a book called “The Five Dysfunctions of a Team”, as well as remembering it being referenced in a book I read earlier this year, titled “&lt;a href=&quot;https://www.amazon.co.uk/Phoenix-Project-Devops-Helping-Business/dp/1942788290/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Phoenix Project&lt;/a&gt;”, I set myself to tackling the 230 or so pages that make it up. 
The main body of the book is comprised of a story about a new CEO for a tech company that is brought in to reforge their current team of C-level managers into a coherent group with their noses pointing in the same direction. 
Very similar to the story style of the Phoenix Project, it is clear to see the heavy influence on its writer, Gene Kim in terms of spinning an interesting tale. 
It is a compelling story for those in the consultancy business, and the patterns are easily detectable in a large number of companies. 
And while the last chapter of the book does offer some techniques for remedying this phenomenon, it does not do a deep dive into a methodology that approach it.
There are additional books by the same author that go deeper into detail, such as “&lt;a href=&quot;https://www.amazon.co.uk/Overcoming-Five-Dysfunctions-Team-Facilitators/dp/0787976377/ref=pd_bxgy_img_2/260-1174328-8916547&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Overcoming the Five Dysfunctions of a Team&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Applying the organizational theory as postulated by William Richard Scott, professor emeritus in sociology at Stanford University, it is important to realize the book primarily addresses teams in a rational organization. 
He defines organizations as follows:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Organizations are conceived as social structures, created by individuals to support the collaborative pursuit of specified goals.&lt;/p&gt;

&lt;p&gt;In essence, organizations consist of members that coordinate their behavior in order to accomplish shared goals or to put out a product or service. 
They contain roles, rules, and clear boundaries of where a group starts and ends. 
Three types of organizations are determined by him, each with their own particularities: Rational, Natural and Open. 
Examples of these types of organizations are respectively a traditional for-profit company, a government, and a highly diversified conglomeration. 
An overview of the most differentiating characteristics per type can be seen in the table below:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-07-08-Book-Five-Dysfunctions/orgtypes.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the typical enterprises of today are still in a rational structure, the lessons that can be derived from the book are very relevant. 
They become more complicated when looking at natural organizations. 
These organizations are characterized by ever-changing groupings of teams and collaborations within themselves and makes improvement techniques such as defining your primary team a lot trickier, forcing the reapplication of these techniques at an elevated frequency. 
Another nomenclature for this type of structure is the quantum organization as defined in the &lt;a href=&quot;https://www.amazon.co.uk/Quantum-Organizations-Ralph-H-Kilmann/dp/0983274282/ref=sr_1_fkmr0_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;book “Quantum Organizations”&lt;/a&gt; by Ralph Kilmann and referenced by Keith Swenson in the &lt;a href=&quot;https://www.amazon.co.uk/Social-BPM-Planning-Collaboration-Technology/dp/1461146305/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;book “Social BPM”&lt;/a&gt; or the &lt;a href=&quot;https://www.amazon.co.uk/Holacracy-Management-System-Rapidly-Changing/dp/B00WF88DUO/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Holacracy&lt;/a&gt; management system coined by Brian J. Robertson in his book with the same name.&lt;/p&gt;

&lt;p&gt;Coming back to the model described in the book to chart and tackle the dysfunctions within team, it is visualized as a pyramid where each value needed in teams is correlated to a dysfunction the team needs to recognize and resolve. This pyramid can be found in the &lt;a href=&quot;https://www.tablegroup.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website of The Table Group&lt;/a&gt; of which Patrick Lencioni, the author, is the founder.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-07-08-Book-Five-Dysfunctions/tbscreenshot.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Screenshot taken from Table Group website&lt;/p&gt;

&lt;h2 id=&quot;absence-of-trust&quot;&gt;Absence of Trust&lt;/h2&gt;

&lt;p&gt;Trust is the foundation for any team performing as a cohesive group. 
The team needs to trust one another enough to risk owning up and discussing their mistakes and weaknesses. 
This is needed to create the necessary trust to be willing to have conflict and disagreements with each other in order to come to valuable insights and results. 
This is often exacerbated by self-doubt and hinders the team members from seeking each other’s help. 
Realizing there are things you don’t know or aren’t succeeding in should trigger team members to own up to this fact and try to resolve this as a team effort. 
The sooner help is sought out after this realization, the more efficient the team will work. 
But this works in the other direction as well: Have enough trust in team members to figure things out for themselves and get the job done. 
The idea is not to force your expertise onto other members of your team, but to offer it freely when asked for.&lt;/p&gt;

&lt;p&gt;A worthwhile exercise is to determine the broad characteristics of each team member, what their strengths and weaknesses are, and how to go about communicating with people that act on different paradigms. 
There are multiple ways of drawing up a broad profile of the members in your team. 
The Myers-Briggs Type Indicator (MBTI) is a stock standard way of charting this, categorizing people on the four principal psychological functions (sensation, intuition, feeling, and thinking)  which gives us 16 distinct personality types, each with their typical strengths and weaknesses. 
Other common profiling tools are the Business Insights analysis, Everything DiSC or even the Interpersonal Circumplex (also known as the Rose of Leary).&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-07-08-Book-Five-Dysfunctions/mbti.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Myers-Briggs Type Indicator Personality Types (taken from &lt;a href=&quot;https://blog.adioma.com/16-personality-types/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Adioma blogpost&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When there are clear key figures within the team, they can further this trust through demonstrating vulnerability first. 
When these key figures of the team are open about their own weaknesses but also strengths, this behavior will become more natural and acceptable to other members of the team that might not yet have had experience with this openness. 
When considering George Kohlrieser’s Secure Base Leadership paradigm, he would phrase it as such: A Secure Base Leader builds trust, delivers change and inspires the focus that people need to actively engage in their work and create conditions for innovation. 
Secure Base Leaders generate high performance by acting as a “secure base” for the people they lead.&lt;/p&gt;

&lt;h2 id=&quot;fear-of-conflict&quot;&gt;Fear of Conflict&lt;/h2&gt;
&lt;p&gt;When there is no trust, there is no fertile ground for discussion within the group that may result in open conflict as understandings and opinions might differ. 
These discussions are necessary to come to a mutual conclusion in how to approach and resolve the vision set forth by the group. 
This discussion gives a platform for every member of the group to be heard and increases buy-in drastically. 
The idea is similar to the thesis-antithesis-synthesis concept of Johann Gottlieb Fichte, the German philosopher, who postulated such a progression of ideas to come to the best solution for any problem or proposition.&lt;/p&gt;

&lt;p&gt;The meeting culture in most companies is a very good example of this. 
They are mostly led by the organizer trying to convey information of his point of view in an almost ex cathedra capacity, with very little interactions between those attending the meeting. 
There will some vocal members, but the majority will sit there accepting what is being told at face value. 
While some meetings are all about disseminating information, most of them are organized with the idea of getting to a consensus about certain topics.&lt;/p&gt;

&lt;p&gt;A good meeting culture greatly enhances the productivity of such meetings. 
Always keep in mind that all meetings should have each of these characteristics (to be added to the meeting request):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Context: what is the meeting about? And what will the mindset (informative/collaborative/…) be?&lt;/li&gt;
  &lt;li&gt;Goals: what will be the results of this meeting?&lt;/li&gt;
  &lt;li&gt;Added Value: an indication of why each of the invited people to this meeting are there.&lt;/li&gt;
  &lt;li&gt;Agenda: A clear agenda of how the meeting will progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lack-of-commitment&quot;&gt;Lack of Commitment&lt;/h2&gt;

&lt;p&gt;When members of the team do not participate in such discussions, they often feel erroneously that their ideas are spurned by the rest of the group, growing resentment, as well as failing to get their buy-in for the chosen approach. 
This resentment might even fester into subconscious attempts to disrupt the efforts of the team in the spirit of a “I knew it wouldn’t work”-reasoning. 
The two most contributing factors to commitment or lack thereof are consensus and certainty on future actions.&lt;/p&gt;

&lt;p&gt;Consensus amongst team members on how to do things might look desirable. If everyone agrees, the lack of commitment should not exist. 
However, such a consensus is not always achieved and striving for it might lead the team into an impasse. 
Especially when having to take decisions that are limited by deadlines. 
In these cases, once all arguments have been presented and no more avenues of discussion are open, a leader should make a decision and the rest of the team should abide by it. 
This uniting behind the banner of the chosen route is where certainty comes in. 
Even when members do not agree, they should realize that similar to playing chess: A bad plan is better than no plan at all. 
So even if they do not fully agree with the decision, the alternative of no decision at all is worse.&lt;/p&gt;

&lt;p&gt;One way to get consensus is to quantify people’s opinions on the possible decisions. 
For example, when choosing a specific solution to a problem like which technology to use for an implementation. 
This is done by first establishing a list of properties a solution should adhere to. 
Next, we weigh these properties on a scale of 1 to 5. 
Then each team member gives points on that same scale for each solution. 
The average of these attributed values is multiplied by its weighing factor and all the weighed values are added for a total score of the solution. 
Whichever solution holds the highest score is the solution the team will go with. 
There are some caveats as we need to make sure that each of the possible solution does indeed cover all requirements and there are no showstoppers associated with this solution. 
But this will give an overview like the one below.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Weight&lt;/td&gt;
      &lt;td&gt;Framework #1&lt;/td&gt;
      &lt;td&gt;Framework #2&lt;/td&gt;
      &lt;td&gt;Framework #3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property #1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4+3+3&lt;/td&gt;
      &lt;td&gt;2+2+2&lt;/td&gt;
      &lt;td&gt;3+4+5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property #2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2+3+4&lt;/td&gt;
      &lt;td&gt;3+2+3&lt;/td&gt;
      &lt;td&gt;3+4+5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property #3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2+1+2&lt;/td&gt;
      &lt;td&gt;4+2+3&lt;/td&gt;
      &lt;td&gt;2+5+4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property #4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3+3+3&lt;/td&gt;
      &lt;td&gt;3+5+4&lt;/td&gt;
      &lt;td&gt;3+3+4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property #5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4+5+2&lt;/td&gt;
      &lt;td&gt;5+4+4&lt;/td&gt;
      &lt;td&gt;2+2+4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;124&lt;/td&gt;
      &lt;td&gt;143&lt;/td&gt;
      &lt;td&gt;162&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;avoidance-of-accountability&quot;&gt;Avoidance of Accountability&lt;/h2&gt;

&lt;p&gt;Another subconscious result to not being heard and having the proper buy-in for the chosen approach, is not feeling accountable for it. 
This is twofold: On the one hand, one might not be inclined to call into question the tasks he/she is performing in the approach, and on the other hand the adoption of a laissez-faire attitude towards efforts of team members that could be counter-productive. 
Or even a lackluster remark on these efforts that could be construed as a passive-aggressive comment from someone who isn’t pulling his or her weight in the approach. 
The interpersonal discomfort that calling out other team members might cause is often a deterrent from this type of peer performance questioning.&lt;/p&gt;

&lt;p&gt;Some mitigating actions can be taken to reduce this level of discomfort by doing regular progress updates on the team efforts. 
In this way issues can be brought to the group and in this way mentioned. 
This does pose the danger of the team member whose progress is called on feels like the rest of the team ganging up on him. 
Other ways of dealing with this is to stipulate goals and standards from the very start of the team effort. 
If everyone knows what standards to follow and what results to attain there is afterwards less of a fuss on whether or not the team goals have been reached.&lt;/p&gt;

&lt;p&gt;Another popular set of techniques stemming from 1994 called the Oz Principle tells us that self-management of your accountability can be done through these straightforward steps: See It, Own It, Solve It, and Do It. 
If these steps are applied, you will remain above the line and achieve desired business results. 
Consequently, the opposing actions will push you below the line with a negative impact on these business results. 
To state it more elaborately: Everyone needs to recognize and acknowledge a situation going wrong (See It). 
Then an honest self-appraisal of one’s own part in the situation as well as that of other members of your team (Own It). 
When this appraisal of the problem has been executed, you and your team should think of all possible solutions and weight them for success rate and applicability (Solve It). 
The final step is to muster the courage and commitment of all involved to actually implement the solution(s) you have decided upon.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-07-08-Book-Five-Dysfunctions/ozprinciple.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inattention-to-results&quot;&gt;Inattention to Results&lt;/h2&gt;
&lt;p&gt;The final dysfunction is that team members are not committed enough to the decided upon approach to give it their full backing. 
Often, they might prioritize their personal goals (such as career opportunities of reputation) over the success of the approach and the collective goals of the team. 
As with all dysfunctions, this one is caused and augmented by the others. 
The lack of buy-in and not being convinced of the chosen direction for the team makes one question its eventual results and how this reflects on him. 
One way to combat this has been the time-honored result-based rewards, linked the success of the team to the evaluation of the individual. 
However, scientific research has indicated that for knowledge worker or creative endeavors rewarding good results has a negative effect on performance. 
Those interested in this phenomenon should watch &lt;a href=&quot;https://www.ted.com/talks/dan_pink_the_puzzle_of_motivation/transcript?language=en&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dan Pink’s TED talk&lt;/a&gt; on the subject back in 2009. 
He states several scientific studies demonstrating this principle.&lt;/p&gt;

&lt;p&gt;Coming back to the MBTI personalities, this result-driven attitude does not come naturally to all types of people. 
This personality trait is associated in the highest degree with the Commander/Field Marshall personality and in various degrees to the others. 
In DiSC they are one of the four possible categories: Dominance (Green). 
In Business Insights, these are the Fiery Red personalities or the Directors, Motivators and Reformers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Take from this book what you will. 
It certainly isn’t a fix-all model, but then what model is? 
If it works for your team use it. 
If it kind of works for your team, tweak it. 
If it doesn’t fit your team dynamic at all, go for something else. 
There is potential here to be wielding for greater team results if used with common sense.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="architecture" /><category term="business architecture" /><category term="technical leadership" /><category term="leadership" /><summary type="html">Being triggered by a colleague to read a book called “The Five Dysfunctions of a Team”, as well as remembering it being referenced in a book I read earlier this year, titled “The Phoenix Project”, I set myself to tackling the 230 or so pages that make it up. The main body of the book is comprised of a story about a new CEO for a tech company that is brought in to reforge their current team of C-level managers into a coherent group with their noses pointing in the same direction. Very similar to the story style of the Phoenix Project, it is clear to see the heavy influence on its writer, Gene Kim in terms of spinning an interesting tale. It is a compelling story for those in the consultancy business, and the patterns are easily detectable in a large number of companies. And while the last chapter of the book does offer some techniques for remedying this phenomenon, it does not do a deep dive into a methodology that approach it. There are additional books by the same author that go deeper into detail, such as “Overcoming the Five Dysfunctions of a Team”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-07-08-Book-Five-Dysfunctions/bookreview.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-07-08-Book-Five-Dysfunctions/bookreview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Enabling User Feedback with WebSockets on RabbitMQ and Spring Cloud</title><link href="https://ordina-jworks.github.io/event-driven/2020/06/30/user-feedback-websockets.html" rel="alternate" type="text/html" title="Enabling User Feedback with WebSockets on RabbitMQ and Spring Cloud" /><published>2020-06-30T00:00:00+00:00</published><updated>2020-06-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/event-driven/2020/06/30/user-feedback-websockets</id><content type="html" xml:base="https://ordina-jworks.github.io/event-driven/2020/06/30/user-feedback-websockets.html">&lt;h3 id=&quot;reading-time-7-minutes-and-31-seconds&quot;&gt;Reading time: 7 minutes and 31 seconds&lt;/h3&gt;

&lt;p&gt;When working with event-driven applications, you tend to see this on the screen:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are processing your request and will notify you when it was treated successfully.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s chop the sentence down into processing the request…
This means that the server is processing your request, but the client is not sure if it was entirely successful because it got transformed into an event and published on a queue never to be seen again (fire and forget).&lt;br /&gt;
The client wonders what has happened and needs a way to give his users the state of the request.&lt;br /&gt;
The next statement tells the user it will notify him/her when the request was successful.&lt;br /&gt;
This part can get complex because you want to give a rapid response as soon as possible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first thing that comes to mind is, can our client not poll the state of the data from the table until it’s ready?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When our client receives a high amount of load, and it’s polling the database for the state of the data, it can put the database under unnecessary stress.&lt;br /&gt;
Since polling is a periodically check, it is not real-time, and we want to bring feedback to our users as soon as possible.&lt;br /&gt;
To let your client behave in real-time, we need push events.&lt;br /&gt;
Push events can be enabled by the concept of WebSockets, this bilateral communication connects the server and the client in an open connection with each other.&lt;br /&gt;
This tech post will explain how we enabled push events with RabbitMQ, MQTT, and Spring Cloud Stream.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#websockets-for-communication&quot;&gt;WebSockets for communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spinning-up-a-rabbitmq&quot;&gt;Spinning up a RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subscribing-with-a-javascript-client&quot;&gt;Subscribing with a JavaScript client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#publishing-events-with-spring-cloud-stream&quot;&gt;Publishing events with Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#result&quot;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;websockets-for-communication&quot;&gt;WebSockets for communication&lt;/h2&gt;
&lt;p&gt;We chose WebSockets because it provides a bilateral open connection between the client and the server.&lt;br /&gt;
Because handling data becomes complex over TCP and requires hard work to do it yourself, WebSockets offer support for subprotocols.&lt;br /&gt;
These solutions offer us easy ways to transmit data over the wire. &lt;br /&gt;
First, let’s talk about opening a WebSocket connection.&lt;br /&gt;
To establish one, we need the client to send a WebSocket handshake request, for which the server returns a WebSocket handshake response.&lt;/p&gt;

&lt;p&gt;The handshake starts with an HTTP request/response.&lt;br /&gt;
Once the connection is established, communication switches to a bidirectional binary protocol which does not conform to the HTTP protocol. 
The switch happens with the &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HTTP Upgrade Negotiation&lt;/a&gt;, this header allows us to tell the server to switch to the protocol the client desires and open up two-way communication between a client and server.&lt;/p&gt;

&lt;p&gt;At a minimum, a successful WebSocket handshake must contain the protocol version, and an auto-generated challenge value sent by the client, followed by a 101 HTTP response code (Switching Protocols) from the server with a hashed challenge-response to confirm the selected protocol version:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Client must send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Version&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Server must confirm the protocol by returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Accept&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Client may send a list of application subprotocols via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Protocol&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Server must select one of the advertised subprotocols and return it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Protocol&lt;/code&gt;. If the server does not support any, then the connection is aborted.&lt;/li&gt;
  &lt;li&gt;Client may send a list of protocol extensions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Extensions&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Server may confirm one or more selected extensions via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sec-WebSocket-Extensions&lt;/code&gt;. If no extensions are provided, then the connection proceeds without them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;choosing-a-subprotocol&quot;&gt;Choosing a subprotocol&lt;/h3&gt;
&lt;p&gt;When I was searching for a suitable subprotocol for handling the data, I first experimented with &lt;a href=&quot;https://stomp.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;STOMP&lt;/a&gt;.&lt;br /&gt;
STOMP has a rich messaging mechanism for handling data and great support for &lt;a href=&quot;https://docs.spring.io/spring-integration/reference/html/stomp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring&lt;/a&gt; and &lt;a href=&quot;https://www.rabbitmq.com/stomp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RabbitMQ&lt;/a&gt;.&lt;br /&gt;
I stumbled against an issue with our API gateway.
To do a security scan, the API gateway had to parse it to XML, which didn’t go well with the UTF-8 text-based messages of STOMP.&lt;br /&gt;
Some further research brought us to our next candidate: MQTT.&lt;br /&gt;
MQTT, designed as an extremely lightweight pub/sub messaging transport for IoT and mobile devices, could offer us a way to enable WebSockets.&lt;/p&gt;

&lt;p&gt;When experimenting, I stumbled on support with &lt;a href=&quot;https://www.rabbitmq.com/mqtt.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RabbitMQ MQTT plugin&lt;/a&gt; and &lt;a href=&quot;https://www.rabbitmq.com/web-mqtt.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RabbitMQ Web MQTT plugin&lt;/a&gt;.
In MQTT over WebSockets, the MQTT messages are transferred over the network and encapsulated by one or more WebSocket frames.&lt;br /&gt;
To communicate with an MQTT broker over WebSockets, the broker must be able to handle native WebSockets.&lt;br /&gt;
To provide such support, we decided to use our own managed RabbitMQ.
The plugin enables the possibility to use MQTT over a WebSocket connection.&lt;br /&gt;
To enable this easily in your broker, you just enable an internal plugin from RabbitMQ itself.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rabbitmq-plugins &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;rabbitmq_web_mqtt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;spinning-up-a-rabbitmq&quot;&gt;Spinning up a RabbitMQ&lt;/h2&gt;
&lt;p&gt;To try it out you can just run RabbitMQ in a Docker container.&lt;br /&gt;
Define the commands in a Dockerfile and off you go!&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rabbitmq:3.7-management&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;rabbitmq-plugins &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--offline&lt;/span&gt; rabbitmq_web_mqtt
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 4369 5671 5672 25672 15671 15672 15675 1883&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;When accessing RabbitMQ via MQTT, credentials have to be given to authenticate yourself.&lt;br /&gt;
Because we will be accessing it from a JS client, we do not want to expose our credentials to our client because it can be exploited.&lt;br /&gt;
To avoid giving credentials, MQTT supports us to connect anonymously.&lt;/p&gt;

&lt;p&gt;Add these to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabbitmq.config file&lt;/code&gt;, and you’re good to go:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;mqtt.default_user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$RABBITMQ_DEFAULT_USER  &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;mqtt.default_pass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$RABBITMQ_DEFAULT_PASS  &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;mqtt.allow_anonymous&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;subscribing-with-a-javascript-client&quot;&gt;Subscribing with a JavaScript client&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/paho/clients/js/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eclipse&lt;/a&gt; offers us a JavaScript client library to use for opening a WebSocket over MQTT.&lt;/p&gt;

&lt;p&gt;With some basic setup, we can fix ourselves a quick WebSocket to the Rabbit to test the handshake.&lt;br /&gt;
As the JavaScript client, we will be subscribing to a queue and listen for any notifications from the backend. &lt;br /&gt;
To configure our client, we need to know what properties we need.&lt;br /&gt;
A list of properties can be found in the &lt;a href=&quot;https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt;.&lt;br /&gt;
The most important ones are enabling SSL and using the keep-alive period as described above.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wsbroker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{rabbitmq_hostname/ws}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wsport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// port for above&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// you can use randomizer to be unique &quot;myclientid_&quot; + parseInt(Math.random() * 100, 10));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Paho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MQTT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wsbroker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wsport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token={token}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{client}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    
&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onConnectionLost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CONNECTION LOST - &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onMessageArrived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;RECEIVE ON &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destinationName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; PAYLOAD &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payloadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  
&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;useSSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CONNECTION SUCCESS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CONNECTION FAILURE - &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;keeping-the-heartbeat-alive&quot;&gt;Keeping the heartbeat alive&lt;/h3&gt;
&lt;p&gt;At any point after the handshake, either the client or the server can choose to send a ping to the other party.&lt;br /&gt;
When the ping is received, the recipient must send back a pong as soon as possible.&lt;br /&gt;
You can use this to make sure the client is still connected.&lt;br /&gt;
A best practice is to set the heartbeat between 20-30 seconds, see &lt;a href=&quot;https://tools.ietf.org/html/rfc6202#page-13&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://tools.ietf.org/html/rfc6202#page-13&lt;/a&gt;.
The client sends a ping every 10 seconds, and the server waits 10 seconds to send back a pong.&lt;/p&gt;

&lt;h4 id=&quot;mqtt-keep-alive-period&quot;&gt;MQTT keep-alive period&lt;/h4&gt;
&lt;p&gt;The keep-alive period is the answer from the MQTT protocol to the WebSocket heartbeat.&lt;br /&gt;
The keep-alive is a time interval measured in seconds.
It is the maximum time interval that is permitted to elapse between the point at which the client finishes transmitting one control package and the point it starts sending the next.&lt;br /&gt;
It is the responsibility of the client to ensure the interval between the control packets being sent does not exceed the keep-alive value.&lt;br /&gt;
The client can send a ping at any time, irrespective of the keep-alive value, and use the pong to determine that the network and the server are working.&lt;/p&gt;

&lt;p&gt;To configure the keep-alive period, the client can add the property to enable the feature.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;keepAliveInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;tls-over-websockets&quot;&gt;TLS over WebSockets&lt;/h3&gt;
&lt;p&gt;To achieve a secure connection, we need to enable TLS.&lt;br /&gt;
Like HTTP, WebSockets supports TLS with using the prefix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wss://&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws://&lt;/code&gt; and port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;443&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The client can enable TLS by adding a property.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;useSSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;authorization-token&quot;&gt;Authorization token&lt;/h3&gt;
&lt;p&gt;The best practice for securing your resources is to propagate your token via the query parameter.&lt;br /&gt;
If you are targeting a backend, the backend can handle this token but for this use-case, we need a reverse proxy/API gateway to validate this token for us.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Paho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MQTT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wsbroker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wsport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token={token}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{client}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;clean-session&quot;&gt;Clean Session&lt;/h3&gt;
&lt;p&gt;Clean session in the MQTT protocol means that if turned on, the server does not know on what topic the client has subscribed to.&lt;br /&gt;
When turned off, the client just needs to reconnect to its session that is stored on the server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Default is true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;quality-of-service&quot;&gt;Quality Of Service&lt;/h3&gt;
&lt;p&gt;In combination with the clean session property set to false, the QoS makes your messages durable.&lt;br /&gt;
When the client is offline, the server holds these messages until the client reconnects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Default is 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h3&gt;
&lt;p&gt;When opening the WebSocket on RabbitMQ, the broker will create a new queue on the default topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amq.topic&lt;/code&gt; with a routingKey as the subscriber endpoint.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/sockets/mqttclient.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;publishing-events-with-spring-cloud-stream&quot;&gt;Publishing Events with Spring Cloud Stream&lt;/h2&gt;
&lt;p&gt;So now we have our RabbitMQ up with the enabled plugin for MQTT over WebSockets, Spring Cloud Stream offers an abstraction for messaging with RabbitMQ as a binder.&lt;br /&gt;
Because RabbitMQ is our MQTT broker, we do not need any special configuration to handle MQTT messages. 
You can just set up a Spring Boot application with the &lt;a href=&quot;Spring Initialzr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We start by adding both the dependency for Spring Cloud Stream and the binder of choice.&lt;br /&gt;
This indicates that auto-configuration and abstraction are done for RabbitMQ.&lt;/p&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-stream&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-stream-rabbit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;message-channel&quot;&gt;Message Channel&lt;/h3&gt;
&lt;p&gt;Following up, we need a channel to publish our messages on, so we create an interface to define our channels.&lt;br /&gt;
You can have two kinds of channels, one for everyone (broadcast) or one-to-one (private).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserFeedbackChannel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOTIFICATION_EVERYONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;globalNotificationChannel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOTIFICATION_USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;specificNotificationChannel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NOTIFICATION_EVERYONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;globalNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NOTIFICATION_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;specificNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To let Spring know it is a custom channel, we need to annotate our configuration class with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableBinding({UserFeedbackChannel.class})&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configuration-1&quot;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;With RabbitMQ, some custom configuration needs to be taken care of.&lt;br /&gt;
Since MQTT takes the topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amq.topic&lt;/code&gt; as default, we need to target this as our destination for our messages.&lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routingKeyExpression&lt;/code&gt; enables us to broadcast or privately send the message.&lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers.routingKey&lt;/code&gt; is bound to the user we want to message to.&lt;br /&gt;
Our pojo event consists of audit fields that we know of whom the message belongs to.&lt;br /&gt;
This way, we can give feedback to the user who did the transaction.&lt;br /&gt;
If the header is filled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;events&lt;/code&gt;, it broadcasts the message.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;notifications&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;globalNotificationChannel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;amq.topic&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;specificNotificationChannel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;amq.topic&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rabbit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;globalNotificationChannel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;routingKeyExpression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;events'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;declareExchange&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;specificNotificationChannel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;routingKeyExpression&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;headers.routingKey&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;declareExchange&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publisher&quot;&gt;Publisher&lt;/h3&gt;
&lt;p&gt;Create the pojo you need, so we can start publishing!&lt;br /&gt;
Be aware, before pushing the pojo, it needs to be converted to a String for MQTT to understand the format.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationSocketPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserFeedbackChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotificationSocketPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserFeedbackChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPrivateNotificationToUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NotificationSocketEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;routingKey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;events.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCreatedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;specificNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;When the JS client, RabbitMQ, and Spring Cloud backend are running, you can try ìt out by triggering messages from the backend onto the RabbitMQ.&lt;br /&gt;
This will result in communication to the correct subscriber.&lt;br /&gt;
The JS subscriber will interpret these messages and parse readable content from it.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/sockets/messages.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem, Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Kevin has a strong focus on building cloud native architectures with the right mindset on security and API design.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Event-Driven" /><category term="spring" /><category term="queue" /><category term="integration" /><category term="websockets" /><category term="event-driven" /><category term="cloud" /><summary type="html">Reading time: 7 minutes and 31 seconds</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/sockets/feedback.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/sockets/feedback.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D Printing During Times of Corona</title><link href="https://ordina-jworks.github.io/iot/2020/06/15/3D-Printing-During-Times-Of-Corona.html" rel="alternate" type="text/html" title="3D Printing During Times of Corona" /><published>2020-06-15T00:00:00+00:00</published><updated>2020-06-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2020/06/15/3D-Printing-During-Times-Of-Corona</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2020/06/15/3D-Printing-During-Times-Of-Corona.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shortage-in-equipment&quot;&gt;Shortage in equipment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3d-printing-to-the-rescue&quot;&gt;3D printing to the rescue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#experimenting-with-tpu&quot;&gt;Experimenting with TPU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;These are trying times we are living in.&lt;br /&gt;
Since the outbreak of the Corona virus we have been living in some form of lockdown.
We are limited in our ability to go out and do anything, and when we do, it is recommended to take the necessary precautions like keeping a safe distance and wearing a mask.
The masks are among the things we didn’t have enough of, certainly in the beginning of the outbreak.&lt;br /&gt;
In this blog post I’ll dig a little deeper in using 3D printing tech to make masks and other equipment/material that can be of use.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/covid-19-corona-virus.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;shortage-in-equipment&quot;&gt;Shortage in equipment&lt;/h2&gt;

&lt;p&gt;The strain on our healthcare system and the supplies has been massive.
Masks were kept for healthcare workers even if they were just surgical masks and not the FFP2/3 masks.
Masks are slowly becoming more widely available for the general population again, however the government relied on people to make their own masks in the beginning.&lt;/p&gt;

&lt;p&gt;Luckily our country was spared from the overwhelming load on the hospitals like in Italy.
While the situation was very serious in the hospitals, we never had a lack of ventilators or had to turn people away because the hospitals were at or already beyond their capacity.&lt;/p&gt;

&lt;h2 id=&quot;3d-printing-to-the-rescue&quot;&gt;3D printing to the rescue&lt;/h2&gt;

&lt;p&gt;3D printing is a very handy technology.
It allows for rapid prototyping and small-scale production without the need to set up a full production line.
The 3D printing community is a very large one, and also a very active one.&lt;/p&gt;

&lt;p&gt;Because of the high load on the intensive care units in Italy with many people requiring to be put on a ventilator for life support, it became clear that the supply line could not meet the demand.
Because the hospitals were in need of these valves and the supplier could not provide them, the 3D printing community jumped in, and soon after the first version was designed and 3D printed.
However the valve design is patented and this hindered individuals and companies from stepping in and helping with printing extra valves.
The hospitals can request production of these masks, sidestepping the patent in times of emergency, but they have to be present and patient consent is also needed (depending on local laws).&lt;/p&gt;

&lt;p&gt;The pictures below show the masks.
The first picture shows the real valve (left) versus a 3D printed one using filament printing technologies.
The second picture shows later iterations of the 3D printed valves printed using polymer material that is laser fused.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/venturi-valve-real-vs-printed.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;A real Venturi valve vs a 3D printed one&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/venturi-valve-real-vs-printed.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 22%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/venturi-valve-laser-printed.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Many laser printed Venturi valves&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/venturi-valve-laser-printed.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 37.4%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/3D-printed-valves.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;3D printed Venturi valves that have been prepared for use&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/3D-printed-valves.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 39%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These valves are not officially approved for use in medical devices, but since “necessity knows no law” it might be better to use these 3D printed valves and saving lives instead of letting people die.
The STL files have not been shared publicly, except for some imitations, &lt;a href=&quot;https://cults3d.com/en/3d-model/tool/venturi-valvula-pedrovo13&quot; target=&quot;_blank&quot;&gt;linked for educational purposes only!&lt;/a&gt;
The manufacturers have not taken any legal action against this 3D printed design.
Using the original valves is still recommended and once the supply from the manufacturers can meet the demand these will once again be used as some of the intricate details of the valve are hard to mimic with current 3D printing technologies.&lt;/p&gt;

&lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/venturi-valve.stl&quot; style=&quot;border:0;margin:0;width:100%;height:350px;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;But not only valves are being 3D printed.
Since there is also a great demand for face masks, and they were, certainly in the beginning, in very short supply.
So mask designs started popping up in the online communities, at first very basic and rudimentary designs but over the following days/weeks the designs became more specialized and optimized.&lt;/p&gt;

&lt;p&gt;These masks are not meant to replace the actual FFP2/3 or N95 masks but can offer people at least protection, if not for themselves, at least for others by preventing particles from the nose or mouth to spread as far as without wearing a mask.
3D printing materials are also (usually) not medically certified so precautions have to be taken.
Especially when printing masks with &lt;a href=&quot;https://nl.wikipedia.org/wiki/Fused_deposition_modeling&quot; target=&quot;_blank&quot;&gt;FDM technology&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It might be possible for contaminants to get in between the layers and in microscopic cavities in the printed material.
Therefor it is highly recommended to either disinfect the masks after use, and even more preferred to do this in addition to also sealing the mask with a sealant.
This sealant can be varnish or any other material which does not cause irritation when touching human skin.&lt;/p&gt;

&lt;p&gt;Below are some of the designs I experimented with and my personal findings of each mask in terms of fabrication easy and wearing comfort.&lt;/p&gt;

&lt;p&gt;This was one of the first masks I printed, &lt;a href=&quot;https://www.thingiverse.com/thing:4239615&quot; target=&quot;_blank&quot;&gt;designed by The 3D Handyman on YouTube and Thingiverse.&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/v1-mask.stl&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;&quot;&gt;
        &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/v1-mask.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/v1-cap.stl&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;&quot;&gt;
        &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/v1-cap.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The mask is modelled to the face of the creator, as can be seen in the instructional video:&lt;/p&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/kBQcNBPRkh0&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It fits rather well, but when printed in PLA (or ABS) the edge can be rather uncomfortable.
I tried and succeeded in printing this mask in TPU which greatly improves the comfort when wearing it.
The TPU printed version does rely quite a bit more on the elastic strap to keep the lid with the filter pinned to the mask as the clips do not work that well when printed in this material.
I also designed an inlay for the cap/mask to hold the filter in place so that the filter cannot be blown out or sucked inside the mask.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0434.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;First attempt at making masks&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0434.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 15.3%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0580.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Mask, inlays, filter and filter cap&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0580.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 27%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0581.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Assembled masks&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0581.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 27%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0443.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Overview of all the V1 masks I printed&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0443.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 27%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This was the second mask design I printed, &lt;a href=&quot;https://www.thingiverse.com/thing:4292905&quot; target=&quot;_blank&quot;&gt;also designed by The 3D Handyman on YouTube and Thingiverse.&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/v2-mask.stl&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;&quot;&gt;
        &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/v2-mask.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/v2-cap.stl&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;&quot;&gt;
        &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/v2-cap.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/v2-mold.stl&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;&quot;&gt;
        &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/v2-mold.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This mask is much more complex, not modelled to one specific face and requires additional steps after printing.
It comes with a mold on which silicone caulk should be applied to create a comfortable seal with the wearers face.
The instructional video explains it all in great detail:&lt;/p&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/gwOZ_gwkojg&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This mask fits very well and although it requires quite a bit of extra work, I prefer it over the first version!
It sits very comfortable and does not require printing with TPU.
The silicone molding process does take some trial an error but the mask shown in the pictures is from the first attempt!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0584.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Printed mask &amp;amp; Silicone mold&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0584.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 20.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0486.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Mask with silicone seal 1&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0486.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 11.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0487.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Mask with silicone seal 2&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0487.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 11.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0488.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Mask with silicone seal 3&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0488.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 11.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0582.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Mask, filter and filter cap&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0582.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 20.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0583.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Assembled mask&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0583.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 11.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There are many, many more mask designs online.
You can always design a custom mask or look on &lt;a href=&quot;https://www.thingiverse.com/&quot; target=&quot;_blank&quot;&gt;thingiverse&lt;/a&gt; or any other 3D modelling site for designs from other people.
The community is very large and very engaged when it comes to prototyping.
A lot of trial and error is involved before getting a mask design right, and even when printing before the print is just right so it can be worn.
Printing with different materials like TPU can also be tricky and time consuming to get right, in the section below I talk a bit more about what TPU is and why it’s harder to print with.&lt;/p&gt;

&lt;p&gt;Disclaimer: These masks are not the real deal, they are not meant to be used in hospitals, they are meant to provide a means to protect oneself when not better materials/equipment is at hand.
They also only offer an additional protection at best, and it is recommended to maintain all social distancing measures, even when wearing a mask!
All the masks shown here have been sealed with varnish or paint to allow for safer use and easier disinfection.&lt;/p&gt;

&lt;p&gt;In addition to masks there are also tools/adapters being printed to more easily hold masks or holder for plastic face shield, to use in combination with a mask.&lt;/p&gt;

&lt;p&gt;The straps are a very small piece that can hold the bands of a mask, this allows the mask tightness to be adjusted and provides greater comfort for the wearer.&lt;/p&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/strap.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;These can be printed quite fast on a very rough quality setting.&lt;/p&gt;

&lt;p&gt;The second much printed item are the holders for face shields.
These face shields provide an additional layer of protection to the wearer, usually this is combined with wearing a regular face mask.
The holders fit around the wearer’s head and the plastic face shield clicks onto the holder by the pins.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/shield1.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Printed holder and plastic sheet&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/shield1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-06-15-3D-Printing-during-corona/shield2.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Assembled face shield&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/shield2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.viewstl.com/?embedded&amp;amp;url=https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/shield-holder.stl&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; height: 350px; display: inline-block;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;experimenting-with-tpu&quot;&gt;Experimenting with TPU&lt;/h2&gt;

&lt;p&gt;One of the disadvantages of regular materials like &lt;a href=&quot;https://en.wikipedia.org/wiki/Polylactic_acid&quot; target=&quot;_blank&quot;&gt;PLA&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Acrylonitrile_butadiene_styrene&quot; target=&quot;_blank&quot;&gt;ABS&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyethylene_terephthalate&quot; target=&quot;_blank&quot;&gt;PETG&lt;/a&gt; is that they are fairly rigid, they do not flex very much or at all.
When printing masks or devices that need to be worn on the head, some form of flexibility is advisable to make the printed object conform to the shape of the head/face.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://en.wikipedia.org/wiki/Thermoplastic_polyurethane&quot; target=&quot;_blank&quot;&gt;TPU or Thermoplastic Polyurethane&lt;/a&gt;.
This material is flexible and can also be 3D printed.
This makes the material suitable for use in designs that need to be able to conform to the contours of a human face.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;video width=&quot;270&quot; height=&quot;480&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
        &lt;source src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0440.MOV&quot; type=&quot;video/mp4&quot; /&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The flexibility of the material is denoted on a hardness scale: The Shore hardness scale.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Shore hardness scale&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/shore-hardness.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This scale has three scales:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scale 00&lt;/li&gt;
  &lt;li&gt;Scale A: Soft rubber types&lt;/li&gt;
  &lt;li&gt;Scale D: Hard rubber types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, these scales do somewhat overlap.
For 3D printing the harder the TPU material is, the easier it is to print.
The lower the A or D scale value of the TPU material, the lower the printing speed and the shorter the retraction distance/speed has to be!&lt;/p&gt;

&lt;p&gt;TPU is harder to print than regular PLA or ABS.
It is recommended to print TPU on a direct extruder at a lower than normal printing speed.
However, it can also be printed on bowden fed extruders, but the printing speed needs to be lowered even further to prevent the filament from spooling up or clogging in the bowden tube.
Retraction distance also needs to be lowered to prevent the extruder from clogging up.
This will increase stringing to some degree though.&lt;/p&gt;

&lt;p&gt;3D printing is already trial and error, but for printing flexibles like TPU this is even more so.
The material is a lot more unforgiving than PLA or even ABS and the settings need to be fine-tuned for each different printer and TPU material before prints will come out looking somewhat decent.&lt;/p&gt;

&lt;p&gt;The image below shows the difference between a bowden extruder (left), which has a guiding tube made of teflon and a direct drive extruder (right).
&lt;img alt=&quot;Bowden versus Direct drive extruder&quot; src=&quot;/img/2020-06-15-3D-Printing-during-corona/bowden-vs-direct.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below is a video of my 3D printer with a bowden type extruder printing TPU just fine, albeit very slowly.&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;video width=&quot;480&quot; height=&quot;270&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;
        &lt;source src=&quot;/img/2020-06-15-3D-Printing-during-corona/IMG_0442.MOV&quot; type=&quot;video/mp4&quot; /&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.3dprintingmedia.network/covid-19-3d-printed-valve-for-reanimation-device/&quot; target=&quot;_blank&quot;&gt;Italian hospital saves Covid-19 patients lives by 3D printing valves for reanimation devices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fastcompany.com/90477940/these-good-samaritans-with-a-3d-printer-are-saving-lives-by-making-new-respirator-valves-for-free&quot; target=&quot;_blank&quot;&gt;These Good Samaritans with a 3D printer are saving lives by making new respirator valves for free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cults3d.com/en/3d-model/tool/venturi-valvula-pedrovo13&quot; target=&quot;_blank&quot;&gt;Venturi Valve STL files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:4239615&quot; target=&quot;_blank&quot;&gt;Custom Fitted Respirator Filter Mask - COVID-19: Files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kBQcNBPRkh0&quot; target=&quot;_blank&quot;&gt;Custom Fitted Respirator Filter Mask - COVID-19: YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:4292905&quot; target=&quot;_blank&quot;&gt;Universal Respirator / Face Mask w/ Mold for a Silicone Seal: Files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gwOZ_gwkojg&quot; target=&quot;_blank&quot;&gt;Universal Respirator / Face Mask w/ Mold for a Silicone Seal: YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:4249113&quot; target=&quot;_blank&quot;&gt;Surgical mask strap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://3dverkstan.se/protective-visor/&quot; target=&quot;_blank&quot;&gt;Face shield holder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.x3d.com.au/blog/best-tpu-filaments-according-to-shore-hardness&quot; target=&quot;_blank&quot;&gt;Shore hardness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://all3dp.com/2/direct-vs-bowden-extruder-technology-shootout/&quot; target=&quot;_blank&quot;&gt;Direct drive vs Bowden&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a frontend consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="3D printing" /><category term="Printing" /><category term="Building" /><category term="Technology" /><category term="Smart Technology" /><category term="FDM" /><category term="PLA" /><category term="TPU" /><category term="masks" /><category term="ventilator" /><category term="respirator" /><category term="corona" /><category term="covid" /><category term="covid-19" /><category term="sars-cov-2" /><category term="FFP2" /><category term="FFP3" /><category term="N95" /><category term="Surgical mask" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-06-15-3D-Printing-during-corona/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From 6 weeks to 90 minutes: let Terraform do your work</title><link href="https://ordina-jworks.github.io/cloud/2020/06/02/terraform.html" rel="alternate" type="text/html" title="From 6 weeks to 90 minutes: let Terraform do your work" /><published>2020-06-02T00:00:00+00:00</published><updated>2020-06-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/06/02/terraform</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/06/02/terraform.html">&lt;h3 id=&quot;reading-time-7-minutes-and-2-seconds&quot;&gt;Reading time: 7 minutes and 2 seconds&lt;/h3&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#how-much-infrastructure-can-you-get-in-6-weeks-time&quot;&gt;How much infrastructure can you get in 6 weeks time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-use-terraform-to-supercharge-infrastructure-provisioning&quot;&gt;Why use Terraform to supercharge infrastructure provisioning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-structure-terraform-to-allow-for-a-two-second-tire-change&quot;&gt;How to structure Terraform to allow for a two second tire change&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-can-you-beat-us&quot;&gt;How can you beat us&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-to-draw-a-line-everything-in-terraform&quot;&gt;Where to draw a line, everything in terraform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finally-two-golden-tips-when-using-terraform&quot;&gt;Finally, two golden tips when using Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-much-infrastructure-can-you-get-in-6-weeks-time&quot;&gt;How much infrastructure can you get in 6 weeks time&lt;/h2&gt;

&lt;p&gt;The landscape discussed in this post is used to host a set of applications for a large corporation to assist one of their core products.
The end-goal of this platform is to support their target market across Europe.&lt;/p&gt;

&lt;p&gt;A single environment consists of a namespace on a shared OpenShift cluster, a database and a reverse proxy.
In order to spin up a new environment to onboard a new development team the following steps need to be executed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Order resources on the shared OpenShift cluster: ticket 1 for the OpenShift team&lt;/li&gt;
  &lt;li&gt;Order a reverse proxy: ticket 2 for reverse proxy team&lt;/li&gt;
  &lt;li&gt;Order a database: ticket 3 for the database team&lt;/li&gt;
  &lt;li&gt;Order a DNS record for the environment to point to OpenShift routers: ticket 4 for the DNS team&lt;/li&gt;
  &lt;li&gt;Create a new environment in environment repository&lt;/li&gt;
  &lt;li&gt;Run a Jenkins job to create certificates for the environment&lt;/li&gt;
  &lt;li&gt;Update the credentials for the new database in online tooling&lt;/li&gt;
  &lt;li&gt;Update the credentials for the new database in offline password storage&lt;/li&gt;
  &lt;li&gt;Git-encrypt the database credentials and put them in the environment repository&lt;/li&gt;
  &lt;li&gt;Update the database connection details in environment repository&lt;/li&gt;
  &lt;li&gt;Run an Ansible playbook to create a new namespace in OpenShift and set up the base configuration for the namespace (Docker registry credentials, custom service accounts, …)&lt;/li&gt;
  &lt;li&gt;Sync OpenShift service account credentials into Jenkins credential store&lt;/li&gt;
  &lt;li&gt;Roll out Jenkins to add the new credentials by starting a Jenkins job executing an Ansible playbook&lt;/li&gt;
  &lt;li&gt;Create reverse proxy configuration in reverse proxy repository&lt;/li&gt;
  &lt;li&gt;Use a self-service portal to request access for Jenkins to update the configuration on the reverse proxy&lt;/li&gt;
  &lt;li&gt;Roll out the reverse proxy configuration using a Jenkins job&lt;/li&gt;
  &lt;li&gt;Roll out the environment configuration and application landscape to the new namespace through a Jenkins job that runs OC process and OC applies using the configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sums up the best-case scenario.
Since it requires multiple teams to perform disconnected tasks at different times, errors are frequent and slow to resolve.
Next to that, there is a lot of manual work.
This work includes copy and pasting configuration from different sources into different repositories and systems.
Since any manual action, especially involving copying data between locations, is prone to errors, this introduces even more failure points.
Combining the time it takes for tickets to be executed, copying the manual configuration to the correct locations and the debugging involved in getting the environment online results in lead times expressed in weeks.
On one occasion the lead time to set up a single environment for a new team escalated to 6 weeks.
Due to the high lead times at least 1 or 2 spare environments are provisioned in order to provide teams with at least a minimal environment to start working with.
This of course introduces additional cost.&lt;/p&gt;

&lt;p&gt;High lead times, human errors and unnecessary operational costs were the main issues of this manual process.
Since the decision was made to migrate to the public cloud, timing was perfect.
Moving to a different infrastructure provided the perfect opportunity to optimize and automate this process.
The expectation was to reduce the lead times to hours, minimize human errors, and minimize capital and operational costs when providing a development team with a new environment.&lt;/p&gt;

&lt;h2 id=&quot;why-use-terraform-to-supercharge-infrastructure-provisioning&quot;&gt;Why use Terraform to supercharge infrastructure provisioning&lt;/h2&gt;

&lt;p&gt;As mentioned, one of the main triggers to revisit our infrastructure setup and look into automation was the move to public cloud.
We selected Azure as the cloud provider.
The reasons why Azure was selected are beyond the scope of this blog post.
We might discuss this in a future blog post though.&lt;/p&gt;

&lt;p&gt;The logical choice for automating the infrastructure provisioning would be ARM templates, since this is the native provided way for infrastructure as code in Azure.
Together with an external ARM expert, we attempted to set up the target infrastructure using this template technology.
Unfortunately, multiple walls were hit due to the nature of the corporate setup on Azure.
One of the limitations that were hit, was the inability for ARM to make changes to resources that were provided by a central team.
More specifically, using a VNET that wasn’t managed by ARM to deploy an Azure Kubernetes Service proved to be difficult or even impossible.&lt;/p&gt;

&lt;p&gt;Using the CLI and scripts to create the setup was attempted as well, but this didn’t fit the vision of a declarative setup for provisioning infrastructure.
Re-applying the same scripts either broke the setup or created additional, unneeded resources.
A clear no-go.&lt;/p&gt;

&lt;p&gt;As a third option, Terraform was investigated.
It adhered to the vision of declarative definitions and all the components required by the landscape were available in the Azure Terraform provider.
Some basic setups were created and it showed great potential for the required setup.
Terraform roll outs proved to be more stable and the import mechanism properly supports using components which aren’t fully managed by Terraform.
So Terraform to the rescue!&lt;/p&gt;

&lt;h2 id=&quot;how-to-structure-terraform-to-allow-for-a-two-second-tire-change&quot;&gt;How to structure Terraform to allow for a two second tire change&lt;/h2&gt;

&lt;p&gt;One of the challenges of creating a Terraform setup is to determine a way to structure the code.
Looking online provided more questions than answers.
A lot of documentation can be found about how to structure a specific module or how to create modules, but almost no resources discuss how to structure the modules into logical, reusable components.&lt;/p&gt;

&lt;p&gt;The setup was divided into two different categories: managed services wrappers and standardized setup modules.&lt;/p&gt;

&lt;p&gt;The first category is quite straight forward.
For every managed service that is being used, a module is created.
This module includes all the required Terraform resources for that service to operate.
For example, the key vault module contains the Azure Key Vault Terraform resource, but also the role assignments for the different Active Directory groups that require access to that key vault.
Another example is the container registry module.
It contains the Azure Container Registry (ACR) Terraform resource, some role assignments and the Azure Monitoring Diagnostics Settings for making sure the ACR logs are shipped into the correct logs analytics bucket.
This abstraction allows for opinionated grouping of resources that are required for a managed service to operate.&lt;/p&gt;

&lt;p&gt;The second category is a grouping of modules of the first category in order to provide a complete package of features.
This set of modules are the ones that are actually provisioned during a deployment.
Currently, only two of these modules exist: a cluster module and a namespace module.&lt;/p&gt;

&lt;p&gt;The cluster module contains all modules required to set up the shared resources for all environments with a similar purpose.
For example, all resources shared by all development environments.
This module contains the Kubernetes cluster module, multiple resource group modules, a key vault module, networking modules and modules that configure identity and role management.
This module is used once per cluster, meaning once for development, acceptance and production respectively.&lt;/p&gt;

&lt;p&gt;The second module is used to set up a namespace for a specific purpose: an environment for a development team, a specific testing environment or a rock-solid production environment.
This module contains the DNS zone configuration, an API gateway module, another key vault module and a database module.&lt;/p&gt;

&lt;p&gt;These cluster and namespace modules are then used in a single Terraform module per cluster: meaning a single module for the development cluster together with all namespaces in that cluster.
This makes making changes to the infrastructure as easy as running a single Jenkins job executing that module.
We decided to version the modules and created specific modules for development, acceptance and production.
This separation, in combination with the versioning, has allowed us to test module updates and upgrades of the configuration upfront.
Similar to deploying application code to an acceptance or test environment before rolling it into production.&lt;/p&gt;

&lt;h2 id=&quot;where-to-draw-a-line-everything-in-terraform&quot;&gt;Where to draw a line, everything in terraform&lt;/h2&gt;

&lt;p&gt;When we first started using Terraform, we were tempted to configure the entire landscape using it.
A good example was the API manager setup we were using.
The Terraform setup included detailed configuration of the application it was hosting.
Another example was a Kubernetes Terraform module we created, that beside infrastructure related setup for storage classes, was also creating service accounts for operators we were running.
This leakage of concerns made it hard to maintain, but it also introduced duplication of configuration towards the application deployment.&lt;/p&gt;

&lt;p&gt;We decided to take a stricter approach, and consider two main responsibilities: orchestration and provisioning.
Orchestration could be translated to an engineer that would take a screwdriver and set up all the required infrastructure.
The outcome of this work would be the minimum needed setup to start using the services and configure them for actual use.&lt;/p&gt;

&lt;p&gt;Provisioning is the work that comes after this, and doesn’t require a screwdriver, or being near the box.
We decided that the orchestration part, setting up the infrastructure, is where we use Terraform exclusively.
The provisioning part, where we start to configure the infrastructure to work with our application, is where we use tools that are native to the application deployment.&lt;/p&gt;

&lt;p&gt;We didn’t get there immediately though.
In early iterations, we had split it into two Terraform runs: an orchestration run and a configuration run.
In later iterations we were able to replace the configuration runs with components that were closer to the application landscape, which was a combination of privileged Kustomize deployment runs and building our own Kubernetes operators.&lt;/p&gt;

&lt;p&gt;A good rule of thumb is; if you can tie the component you are configuring to something that has meaning in the application domain, it should be managed in the application landscape.
Another good indication that the application domain leaked into the infrastructure domain is when you have to re-orchestrate your infrastructure together with application changes.&lt;/p&gt;

&lt;h2 id=&quot;how-can-you-beat-us&quot;&gt;How can you beat us&lt;/h2&gt;

&lt;p&gt;With this setup, lead-time for provisioning an environment went down from 6 weeks of ticketing magic to just a 90 minute Jenkins run.
The decision to adopt Terraform helped us to minimize human errors, and has enabled us to deploy new environments by a single push of a button.
Infrastructure upgrades have become more and more stable over the adoption period and the different modules have matured to the point where they barely change anymore.&lt;/p&gt;

&lt;p&gt;The work being done by the Azure Terraform provider community has helped tremendously.
They release new versions of the provider every week.
They aren’t at feature parity with ARM, not by a long shot, but at the pace they are adding support for features, they will catch up very fast.
The provider is also very stable and if an issue occurs (like &lt;a href=&quot;https://github.com/terraform-providers/terraform-provider-azurerm/issues/6525&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this&lt;/a&gt; AKS bug) it’s fixed within the next release.&lt;/p&gt;

&lt;h2 id=&quot;finally-two-golden-tips-when-using-terraform&quot;&gt;Finally, two golden tips when using Terraform&lt;/h2&gt;

&lt;p&gt;The first is to start using remote state storage as soon as possible when using Terraform.
It provides an easy way to get an accurate Terraform plan which in turn provides an accurate overview of the actions Terraform will execute during the roll-out.&lt;/p&gt;

&lt;p&gt;The second one is to roll out the modules often and validate their effects by running tests against them.
Test either outcome, not just the configuration.
The further up the application stack these tests run, the better.
In our current setup, the infrastructure runs are part of a nightly test which performs the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Completely trash the test infrastructure&lt;/li&gt;
  &lt;li&gt;Deploy the infrastructure based on the latest configuration&lt;/li&gt;
  &lt;li&gt;Deploy the application landscape on top of it&lt;/li&gt;
  &lt;li&gt;Run the application landscape end-to-end tests against that freshly created setup&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every morning the team smiles when the build is green or (less often now) starts figuring out which component broke and fix it immediately.&lt;/p&gt;

&lt;p&gt;Special thanks to the amazing Unicorn team for creating this setup and to &lt;a href=&quot;https://twitter.com/joyrex2001&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vincent van Dam&lt;/a&gt; for co-writing this post!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-vincken-a94b5153&quot;, &quot;twitter&quot;=&gt;&quot;PieterVincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Cloud" /><category term="Terraform" /><category term="Configuration Management" /><category term="Infrastructure-as-code" /><category term="Cloud" /><summary type="html">Reading time: 7 minutes and 2 seconds</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-05-30-terraform/terraform.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-05-30-terraform/terraform.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Frontend Developer Love 2020</title><link href="https://ordina-jworks.github.io/conference/2020/05/15/frontend-developer-love-2020.html" rel="alternate" type="text/html" title="Frontend Developer Love 2020" /><published>2020-05-15T00:00:00+00:00</published><updated>2020-05-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2020/05/15/frontend-developer-love-2020</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2020/05/15/frontend-developer-love-2020.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-thinking-small-is-changing-software-development-big-time-by-sander-hoogendoorn&quot;&gt;How thinking small is changing software development big time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-pack-your-webpack-by-johannes-ewald&quot;&gt;How to pack your Webpack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#svelte-the-last-framework-we-need-by-alexander-esselink&quot;&gt;Svelte: the last framework we need?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-gives-you-wings-by-yan-cui&quot;&gt;Serverless gives you wings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modern-solutions-for-e2e-testing-by-anastasiia-dragich&quot;&gt;Modern solutions for e2e testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical-a11y-for-web-apps-by-bob-bijvoet&quot;&gt;Practical a11y for web apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#micro-interactions-with-react-spring-by-emma-bostian&quot;&gt;Micro-interactions with React Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#but-youre-not-facebook-by-kitze&quot;&gt;But, you’re not Facebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#beats-rhymes-and-unit-tests-by-tony-edwards&quot;&gt;Beats, rhymes and unit tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graphql-without-a-database-by-roy-derks&quot;&gt;GraphQL without a database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dx-is-the-new-black-learnings-from-using-nuxt-and-storybook-at-scale-by-aurélie-violette&quot;&gt;DX is the new black. Learnings from using Nuxt and Storybook at scale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#refactor-your-life-by-noer-paanakker--sima-milli&quot;&gt;Refactor your life&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#blazor-with-webassembly-by-don-wibier&quot;&gt;Blazor with WebAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#audio-streaming---using-webrtc-for-building-your-own-voice-ais-by-lee-boonstra&quot;&gt;Audio Streaming - Using WebRTC for building your own Voice AIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-future-of-real-time-offline-data-by-nader-dabit&quot;&gt;The future of real-time, offline, data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-state-of-webassembly-by-sendil-kumarn&quot;&gt;The state of WebAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The Frontend Developer Love conference day was the first of 3 conference days that I was visiting in Amsterdam.
While the last 2 days were focussed on VueJS, the first day was filled with more generic frontend topics.
These topics ranged from Webpack, serverless to micro-interactions and more inspirational talks.
With a big countdown clock, the conference was about to start.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Countdown clock on screen before the Frontend Developer Love conference started&quot; src=&quot;/img/frontend-love-2020/countdown.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-thinking-small-is-changing-software-development-big-time-by-sander-hoogendoorn&quot;&gt;How thinking small is changing software development big time, by &lt;a href=&quot;https://twitter.com/aahogendoorn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sander Hoogendoorn&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As a keynote, we started the day with a non-technical talk.
These days we developers face mainly two challenges: the speed at which we have to deliver results and the legacy code that we must handle.
With the constant changing technology landscape, we can expect that software will not survive for 1000 years.
Regularly adapting and delivering is a key component of delivering quality software.
Sander talked about his current and previous experiences in the volatile world of software development.
Like how a 9-to-5 mentality is not always the right choice as not everybody is that productive during the day.
&lt;img alt=&quot;Graph depicting productivity of a geek during the day&quot; src=&quot;/img/frontend-love-2020/geek-productivity-at-work.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;
Factors such as strict working hours ruin productivity.
But the same can be said about the usage of open floor plans which explains the popularity of noise-cancelling headphones.
We need to think for ourselves and don’t copy what other big corporations might be doing.
In the end, it all boils down to trying to release as fast, as often and as small as you can.
Even if that means following weird office hours…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=64LI5v470VY&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sander’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aahogendoorn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sander’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://speakerdeck.com/aahoogendoorn/its-a-small-world-after-all-full-edition-fall-2019&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;his slides&lt;/a&gt; and the &lt;a href=&quot;https://www.insanityworks.org/acme/2013/5/14/geek-productivity-chart.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;geek productivity chart resource&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;how-to-pack-your-webpack-by-johannes-ewald&quot;&gt;How to pack your Webpack, by &lt;a href=&quot;https://twitter.com/jhnns&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Johannes Ewald&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this talk, Johannes explained more what Webpack is and how you can define your own Webpack config.
While most frontend developers use CLIs these days, a lot can be learned from actually writing a Webpack config so that you know what your favourite CLI is generating.
With the latest Webpack we now have TypeScript support in our Webpack config file.
He also described the several key components of a Webpack config.
Such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entry&lt;/code&gt; element which denotes the base of your module tree.&lt;/p&gt;

&lt;p&gt;In the end Johannes gave a couple of tips to create a good Webpack along with some tips for your code to decrease the bundle size that Webpack will generate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most apps will have a good bundle size just by setting the Webpack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt;. You don’t need to overthink your configuration, Webpack already optimises a lot for you&lt;/li&gt;
  &lt;li&gt;Lazy load modules with the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check &lt;a href=&quot;https://bundlephobia.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bundlephobia.com&lt;/a&gt; to determine if a bundle could be replaced by something more lightweight or more tree-shakeable&lt;/li&gt;
  &lt;li&gt;Measure the performance with a tool like &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Don’t overestimate long-term caching. It is ok for fonts, images and CSS but caching whole pages could be not as rewarding for the amount of effort you need to put into it&lt;/li&gt;
  &lt;li&gt;Minify your CSS with a tool like &lt;a href=&quot;https://github.com/NMFR/optimize-css-assets-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;optimize-css-assets-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=z8YP5ZEUIxA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Johannes’ talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jhnns&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Johannes’s Twitter&lt;/a&gt; and his &lt;a href=&quot;https://peerigon.github.io/talks/2020-02-19-frontend-developer-love-how-to-pack-your-webpack/slides/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;svelte-the-last-framework-we-need-by-alexander-esselink&quot;&gt;Svelte: the last framework we need?, by &lt;a href=&quot;https://twitter.com/DexterLabsNL&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alexander Esselink&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;On its website, &lt;a href=&quot;https://svelte.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Svelte&lt;/a&gt;  claims to allow you to write “cybernetically enhanced web apps”.
But what does that mean?
Alexander tried to explain why Svelte is such a great framework.
To start with, Svelte is &lt;a href=&quot;https://svelte.dev/blog/svelte-3-rethinking-reactivity&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;truly reactive&lt;/a&gt;.
While in most frameworks you need to call certain functions like a ‘set’ or ‘setState’, Svelte parses your JS to add reactivity.
So a basic statement like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count += 1;&lt;/code&gt; will be reactive as all code that relies on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; will be updated.
An example Svelte component could look like this:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{handleClick}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	Clicked {count} {count === 1 ? 'time' : 'times'}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we have grouped everything of the component into one file: styling, the script and the HTML code.
Between the style tags, you can put your regular CSS.
Between the script tags, you can put JavaScript while your HTML can reference anything that you’ve defined within your script tag such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;.
This allows for the creation of small readable components that anybody, even someone without prior knowledge of Svelte can read.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=U4ll3QWkpD4&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alexander’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/DexterLabsNL&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alexander’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://svelte.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Svelte.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;serverless-gives-you-wings-by-yan-cui&quot;&gt;Serverless gives you wings, by &lt;a href=&quot;https://twitter.com/theburningmonk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yan Cui&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These days we can expect that we will have users of our web applications that are distributed around the world and they will use our web app 24/7.
Because of this, deploying your web application into the cloud is very interesting.
It is resilient, scalable, fast and secure.
As we always need to prepare for success, these are all contributing elements to choose for something in the cloud.
For some, using Docker seems to be the holy grail, especially in combination with container services like Kubernetes.
But to quote Matt Klein: “Unless you’re an infrastructure company, infrastructure is basically overhead”.&lt;/p&gt;

&lt;p&gt;Going serverless means that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you don’t pay for it if no-one uses it&lt;/li&gt;
  &lt;li&gt;you don’t need to worry about scaling&lt;/li&gt;
  &lt;li&gt;you don’t need to provision and manage servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the help of Functions-as-a-Service tools like &lt;a href=&quot;https://cloud.google.com/functions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Cloud Functions&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/lambda/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Lambda&lt;/a&gt; and more, frontend developers can leverage whole blocks of business logic into functions that live in the cloud.
As a result, they can decrease the amount of work that backenders need to do, thus allowing them to focus on more critical stuff and not being occupied with providing some basic API.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=A6wbpkSmhrA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yan’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/theburningmonk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yan’s Twitter&lt;/a&gt; and his &lt;a href=&quot;https://www.slideshare.net/theburningmonk/serverless-gives-you-wings&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;modern-solutions-for-e2e-testing-by-anastasiia-dragich&quot;&gt;Modern solutions for e2e testing, by Anastasiia Dragich&lt;/h1&gt;
&lt;p&gt;During her talk, Anastasiia gave an overview of all current end-to-end testing frameworks.
While the &lt;a href=&quot;https://www.selenium.dev/projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Selenium WebDriver&lt;/a&gt; can be considered as Genesis, we have seen a steady rise of different e2e frameworks.
If you’re looking for an all-in-one solution, &lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cypress&lt;/a&gt; is the obvious choice.
But we have some other options although they might not be all-in-one solutions.
&lt;a href=&quot;https://pptr.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Puppeteer&lt;/a&gt; for example is a quicker alternative as its only task is to control a browser so you can add your own testrunner like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jest&lt;/code&gt;.
But while Puppeteer is a valid choice, there is a new kid on the block called &lt;a href=&quot;https://github.com/microsoft/playwright&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PlayWright&lt;/a&gt;.
PlayWright is built by the same Puppeteer people who now work for Microsoft.
It is a Node library to automate the Chromium, Webkit and Firefox browsers with a single API.&lt;/p&gt;

&lt;p&gt;An example of how powerful PlayWright is, lies in the fact that we have full control over the browser context.
For example, we can emulate that we visit a website from a specific location with a specific type of mobile browser and take a screenshot:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;playwright&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhone11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;iPhone 11 Pro&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;viewport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhone11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhone11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;geolocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.492507&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;41.889938&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;geolocation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://maps.google.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;text=&quot;Your location&quot;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.*preview&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;pwa/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;colosseum-iphone.png&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the end, there are multiple tools available to perform e2e tests on your web application, you just have to pick the one that best fits your needs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=KdjYUtjVs3I&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Anastassiia’s talk&lt;/a&gt;, &lt;a href=&quot;https://www.selenium.dev/projects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Selenium WebDriver&lt;/a&gt;, &lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cypress&lt;/a&gt;, &lt;a href=&quot;https://pptr.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Puppeteer&lt;/a&gt; and &lt;a href=&quot;https://github.com/microsoft/playwright&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PlayWright&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;practical-a11y-for-web-apps-by-bob-bijvoet&quot;&gt;Practical a11y for web apps, by Bob Bijvoet&lt;/h1&gt;
&lt;p&gt;Even before you start writing a11y specific HTML such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-label&lt;/code&gt; attribute, we can take certain tips into consideration to make our web apps more accessible.
As a start, our pages should be perceivable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logical ordering of elements: what’s important such as an article header should come first&lt;/li&gt;
  &lt;li&gt;Don’t rely on colour: be aware that not everybody can perceive colour the same way as you can. Use shapes and different sizes to distinguish between elements, colour in itself is not enough&lt;/li&gt;
  &lt;li&gt;Use contrast: all different elements should be distinguishable one from the other&lt;/li&gt;
  &lt;li&gt;Don’t rely on orientation: with the rising number of mobile users, you should keep in mind that not everybody uses their phone in portrait mode, make sure that your web application also works in landscape mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While trying to make your page as perceivable as possible, don’t forget to focus on making your page operable.
A lot of users rely on a keyboard so make sure that they can tab through your content easily.
Having a logical focus order makes most sense.
To make your page more operable, add labels to UI elements to help them describe what they do.
For example, it is of no use to add a search icon to a search button without adding the “Search” text somewhere.
Screen reader users will be very grateful for such small adaptations.&lt;/p&gt;

&lt;p&gt;Most of the tips that Bob gave were easy to verify on your own.
For example, try to use your web application with only your keyboard to check if it’s easy to operate.
Or how about turning of your CSS to see if the order is logical and if your application is still usable.
And if you can, try to use your web application with just a screen reader.
On a Windows, &lt;a href=&quot;https://www.nvaccess.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NVDA&lt;/a&gt; is a good option while MacOS X has the &lt;a href=&quot;https://www.apple.com/voiceover/info/guide/_1121.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VoiceOver&lt;/a&gt; option.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=btxOl52LTns&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bob’s talk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;micro-interactions-with-react-spring-by-emma-bostian&quot;&gt;Micro-interactions with React Spring, by &lt;a href=&quot;https://twitter.com/EmmaBostian&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emma Bostian&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Micro-interactions are small animations.
They are important in your web app as they have a lot of added value.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They enforce perceived performance&lt;/li&gt;
  &lt;li&gt;They illustrate a state change&lt;/li&gt;
  &lt;li&gt;They draw attention to something&lt;/li&gt;
  &lt;li&gt;They inform the user about the status of a task&lt;/li&gt;
  &lt;li&gt;They build habits&lt;/li&gt;
  &lt;li&gt;They delight our users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, for each interaction that results in a state change you should have an animation.
This will help improve the user experience as the user will better perceive what has changed.
It is best to keep in mind that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Animations should be accessible. Accessibility should never suffer from the introduction of an animation&lt;/li&gt;
  &lt;li&gt;You should make them relatable&lt;/li&gt;
  &lt;li&gt;You should be intentional with the placement&lt;/li&gt;
  &lt;li&gt;You don’t let your users wait. Why not already start an animation while for example your backend call is going?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During her talk, Emma showcased her live coding skills as she took a full screen menu and animated it with the use of &lt;a href=&quot;https://www.react-spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;React-spring&lt;/a&gt;.
React-spring looks to be an interesting library that exposes hooks such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useSpring()&lt;/code&gt; to easily configure animations.
Having for example a menu slide in from the top of your page with a change in opacity, could be something as simple as this in your component:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullMenuVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setFullMenuVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullMenuAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useSpring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullMenuVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`translateY(0)`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`translateY(-100%)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullMenuVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullMenuAnimation&lt;/code&gt; to your HTML with the react-spring factory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animated&lt;/code&gt;.
A menu can thus end up like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;animated.div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu menu--full&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{fullMenuAnimation}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-list menu-list--full&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-list-item menu-list-item--full&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- more elements --&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/animated.div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=NBb5Dt-uc40&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emma’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/EmmaBostian&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emma’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.react-spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;React-spring&lt;/a&gt;, the &lt;a href=&quot;https://codesandbox.io/s/boring-sun-qe6kn?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Codesandbox with the end result&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.blog/2020/01/16/how-to-create-micro-interactions-with-react-spring-part-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emma’s blog post about micro interactions part 1&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.blog/2020/01/23/micro-interactions-with-react-spring-part-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emma’s blog post about micro interactions part 2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;but-youre-not-facebook-by-kitze&quot;&gt;But, you’re not Facebook, by &lt;a href=&quot;https://twitter.com/thekitze&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kitze&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;“This is going to be the most entertaining talk of the day, mark my words”, said the friend next to me.
And he was right, Kitze was able to give a fun yet very interesting talk about the current culture in IT companies.
We tend to aim for certain goals that are just not necessary to achieve.
Why should you have a PWA portfolio for example?
Or what’s the point in having a 100 score on all Lighthouse tests?&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lighthouse scores all 100%&quot; src=&quot;/img/frontend-love-2020/kitze-lighthouse-100.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what should you do?
Stop solving solved problems! 
There are already enough methods to implement button styling, state management and so on.
There are complete design systems that you can reuse, so why not reuse them?
Because ultimately, your end-users don’t care about the technology.
Look at your analytics once in a while and see if your users like your app or not.
Because even if you have overengineered your app, if the end-users don’t like it then there’s no point.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://twitter.com/thekitze&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kitze’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://sizzy.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sizzy&lt;/a&gt;, &lt;a href=&quot;https://www.twitch.tv/thekitze&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kitze’s Twitch&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;beats-rhymes-and-unit-tests-by-tony-edwards&quot;&gt;Beats, rhymes and unit tests, by &lt;a href=&quot;https://twitter.com/tonyedwardspz&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tony Edwards&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://wicg.github.io/speech-api/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Web Speech API&lt;/a&gt; consists of 2 parts: the &lt;a href=&quot;https://wicg.github.io/speech-api/#api_description&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Speech Recognition API&lt;/a&gt; and the &lt;a href=&quot;https://wicg.github.io/speech-api/#tts-section&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Speech Synthesis API&lt;/a&gt;.
In short, the Speech Recognition API allows you to transform speech into text and the Speech Synthesis API allows you to transform text into speech.
In his talk, Tony asked himself: how good would the Speech Recognition API be in analysing hip-hop lyrics.
Tony showcased his abilities to bring a live demo of the implementation of the Speech Recognition API.
Would it be able to transform his live lyrics into text?
Even though the technology still has a long way to go, it was still impressive that it was able to transcribe more than half of his live lyrics.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;55% end result of his live lyrics correctly transcribed&quot; src=&quot;/img/frontend-love-2020/beats-rhymes-unit-tests-results.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=x_L1eQT6TyA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tony’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/tonyedwardspz&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tony’s Twitter&lt;/a&gt; and a Spotify list with &lt;a href=&quot;https://open.spotify.com/playlist/6kCeuSEq5PE7qrMebN8uNf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;songs from the talk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;graphql-without-a-database-by-roy-derks&quot;&gt;GraphQL without a database, by &lt;a href=&quot;https://twitter.com/gethackteam&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Roy Derks&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;GraphQL is one of those technologies that a lot of frontenders want to use.
But most backenders are not that keen to add a GraphQL API to their existing REST APIs.
But why would that stop you?
There are multiple options to integrate a GraphQL API in your project without having to bother your backenders.
Roy highlighted two of them.&lt;/p&gt;

&lt;p&gt;The first one was &lt;a href=&quot;https://www.apollographql.com/docs/link/links/rest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;apollo-link-rest&lt;/a&gt;.
This allows you to call REST endpoints from within your GraphQL queries while having all your data managed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApolloClient&lt;/code&gt;.
These REST endpoints can be bundled together in the same GraphQL query so that getting information about a product with ID 3 and data about its rating and categories, might end up like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;query getProduct {
	product @rest(type: &quot;Product&quot;, path: &quot;product/3&quot;) {
		id
		name
		price
		thumbnail
		categories @rest(type: &quot;Category&quot;, path: &quot;products/3/categories&quot;) {
			name
		}
		rating @rest(type: &quot;Rating&quot;, path: &quot;products/3/rating&quot;) {
			average
			count
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way to integrate a GraphQL API is to use the package &lt;a href=&quot;https://www.npmjs.com/package/openapi-to-graphql&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenAPI-to-GraphQL&lt;/a&gt;.
The idea behind this is to use an OpenAPI specification coming from something like &lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Swagger&lt;/a&gt; that will be used to generate a schema which will build a GraphQL server.
To help with all this, there even is a &lt;a href=&quot;https://github.com/IBM/openapi-to-graphql/tree/master/packages/openapi-to-graphql-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CLI&lt;/a&gt; to make your life even more easy.&lt;/p&gt;

&lt;p&gt;With these two tools, you can already start integrating the usage of GraphQL in your frontend code without having to rely on backend.
The backend is not forced to immediately start making the transition from classic REST APIs to GraphQL.
This is the perfect way to test out if GraphQL brings any added value to your project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=yygC60yamh8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Roy’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/gethackteam&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Roy’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.slideshare.net/RoyDerks1/graphql-without-a-database-frontend-developer-love&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;his slides&lt;/a&gt;, &lt;a href=&quot;https://www.apollographql.com/docs/link/links/rest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;apollo-link-rest&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;dx-is-the-new-black-learnings-from-using-nuxt-and-storybook-at-scale-by-aurélie-violette&quot;&gt;DX is the new black. Learnings from using Nuxt and Storybook at scale, by &lt;a href=&quot;https://twitter.com/purple_orwel&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aurélie Violette&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Aurélie used &lt;a href=&quot;https://storybook.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Storybook&lt;/a&gt; in her projects as a tool to demo stuff, have live documentation and to enable visually driven development.
Storybook in itself is already a great tool to showcase your components with their different use cases.
But Aurélie extended its functionality by adding the &lt;a href=&quot;https://www.npmjs.com/package/@storybook/addon-knobs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Knobs addon&lt;/a&gt; as well as the &lt;a href=&quot;https://www.npmjs.com/package/@storybook/addon-docs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docs addon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The concepts that she uses, is to bring “Nuxt logic” to your Storybook project.
By adding components into Storybook, developers are tempted to just write the visualisation of their components with some mock data.
But why not add some business logic into it instead of just being occupied with showcasing your components?
If your actual component uses data coming from a store, why not implement a store in your Storybook stories to help you mimic the real use case of your components?
Storybook’s functionality can be extended by writing decorators.
An example she gave of a decorator to add a store to your components is this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeDecorator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@storybook/addons&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;STORY_CHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@storybook/core-events&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeDecorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;withStore&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parameterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skipIfNoParametersOrOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STORY_CHANGED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unregisterModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;story&amp;gt;&amp;lt;/story&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After activating the decorator with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDecorator(withStore)&lt;/code&gt;, your components will have access to the store.
So now you can make your examples in Storybook even more linked to the real use of the components.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=R9NXT_qU7qM&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aurélie’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/purple_orwel&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aurélie’s Twitter&lt;/a&gt; and her &lt;a href=&quot;https://slides.com/aurelieviolette-1/dx-is-the-new-black#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;refactor-your-life-by-noer-paanakker--sima-milli&quot;&gt;Refactor your life, by Noer Paanakker &amp;amp; Sima Milli&lt;/h1&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/GSyQayMEID8?rel=0&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Noer and Sima talked about &lt;a href=&quot;https://www.hackyourfuture.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hack Your Future&lt;/a&gt;, a coding school for people that have limited access to education and the labour market.
They talked about a few of the heart breaking stories of their students and highlighted how the program helped these people try to build a brighter future for themselves.
In just over 4 years, they’ve helped get 120+ people land a good tech job.
With &lt;em&gt;Behind The Source&lt;/em&gt;, they highlight a couple of the other stories on how being a refugee wasn’t a choice but becoming a developer was a choice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=jczJ9IPH-Aw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Noer &amp;amp; Sima’s talk&lt;/a&gt;, &lt;a href=&quot;https://www.hackyourfuture.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hack Your Future&lt;/a&gt; and the &lt;a href=&quot;https://www.youtube.com/watch?v=GSyQayMEID8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Behind The Source video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;blazor-with-webassembly-by-don-wibier&quot;&gt;Blazor with WebAssembly, by &lt;a href=&quot;https://twitter.com/donwibier&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Don Wibier&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Blazor lets you build interactive web applications in C# instead of JavaScript.
In fact, it allows you to create a component-based UI with a combination of C#, HTML and CSS.
Both the client and server-side code are written in C#.
This has one big benefit: you can share code and libraries between your front- and backend code.&lt;/p&gt;

&lt;p&gt;A really basic example of Blazor code would be this:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;currentCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;btn btn-primary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;IncrementCount&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IncrementCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;currentCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Those familiar with C# and mainly .Net Razor pages, will recognise the syntax.
Razor allows you to write both your HTML and C# in the same file.&lt;/p&gt;

&lt;p&gt;One of the interesting features of Blazor is the ability to compile it to WebAssembly.
In fact, your client-side C# code is being run by WebAssembly in your browser.&lt;/p&gt;

&lt;p&gt;In a Blazor project, you even have your client-side and server-side code right besides each other.
A typical Blazor project has the following structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/Client&lt;/li&gt;
  &lt;li&gt;/Server&lt;/li&gt;
  &lt;li&gt;/Shared&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this structure, your whole frontend is situated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Client&lt;/code&gt; while all your backend code is situated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Server&lt;/code&gt;.
If you are in need of any code sharing, you can put it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Shared&lt;/code&gt; and it will be available in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Client&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Server&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=ZAFqw952GQM&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Don’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/donwibier&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Don’s Twitter&lt;/a&gt; and &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Blazor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;audio-streaming---using-webrtc-for-building-your-own-voice-ais-by-lee-boonstra&quot;&gt;Audio Streaming - Using WebRTC for building your own Voice AIs, by &lt;a href=&quot;https://twitter.com/ladysign&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lee Boonstra&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Tools like the &lt;a href=&quot;https://assistant.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Assistant&lt;/a&gt;, &lt;a href=&quot;https://developer.amazon.com/en-US/alexa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa&lt;/a&gt; and &lt;a href=&quot;https://www.apple.com/siri/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple’s Siri&lt;/a&gt; are becoming more popular.
The usage of voice assistants is becoming more mainstream as prices are dropping and they are becoming less of a gimmick and more of a tool to use during your everyday life.&lt;/p&gt;

&lt;p&gt;And while there are lots of developer tools available to integrate your app with these particular voice assistants, this might not be your best course of action.
You’re limited to the technical requirements of these assistants, they might be overkill for your use case or they might not fit for your enterprise usage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://webrtc.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WebRTC&lt;/a&gt; is an open web standard and is available as a regular JavaScript API in all major browsers.
It allows for real-time communication (RTC) in the form of audio and video communication via direct peer-to-peer communication.
&lt;a href=&quot;https://github.com/muaz-khan/RecordRTC&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RecordRTC&lt;/a&gt; is a WebRTC JavaScript library for audio, video, screen and canvas recording.
By combining RecordRTC together with a tool such as &lt;a href=&quot;https://dialogflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dialogflow&lt;/a&gt; that can parse voice recordings to text, we can create our very own voice assistant.&lt;/p&gt;

&lt;p&gt;Tools such as Dialogflow use machine learning to parse voice recordings to achieve intent matching.
An intent categorizes an end-user’s intention for one conversation turn.
By trying to match phrases or parts of phrases, Dialogflow tries to classify the end-user expression to the best intent.
It then tries to parse the input with the help of the intent to extract information.
For the example of weather forecast queries, if Dialogflow is able to match the queries to the forecast intent, it knows it can try to extract information such as time and location.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Intent matching diagram for weather forecast queries&quot; src=&quot;/img/frontend-love-2020/intent-match-forecast.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linked to this intent, one can add actions to perform or responses to give.
By training the system, the classification of intents can be improved as to ensure that the voice assistant gives back the correct answer.
During her talk, Lee demonstrated the &lt;a href=&quot;https://github.com/dialogflow/selfservicekiosk-audio-streaming&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Airport SelfService Kiosk&lt;/a&gt;, a demo in which microphone streaming is used to give the end-user information linked to their flight in an airport.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=6JD8WC1LV7g&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lee’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ladysign&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lee’s Twitter&lt;/a&gt;, her &lt;a href=&quot;https://speakerdeck.com/savelee/implementing-a-custom-ai-voice-assistant-by-streaming-webrtc-to-dialogflow-and-cloud-speech&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://www.webrtc-experiment.com/RecordRTC/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RecordRTC&lt;/a&gt;, &lt;a href=&quot;https://dialogflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dialogflow&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dialogflow/selfservicekiosk-audio-streaming&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Airport SelfService Kiosk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;the-future-of-real-time-offline-data-by-nader-dabit&quot;&gt;The future of real-time, offline, data, by &lt;a href=&quot;https://twitter.com/dabit3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nader Dabit&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When trying to write an offline-first app, you should take three things into account:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code should work offline &amp;amp; online&lt;/li&gt;
  &lt;li&gt;Write your data locally and replicate it to a database: you should always have a local copy of all the relevant data&lt;/li&gt;
  &lt;li&gt;Provide good user experience in case of bad internet: your app should still be usable when your user has internet issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your app should feel real-time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give your user a sense of real-time: don’t delay things and add animations to enhance the feeling of real-time&lt;/li&gt;
  &lt;li&gt;Allow for synchronisation between multiple devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tools such as &lt;a href=&quot;https://aws.amazon.com/appsync/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS AppSync&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/amplify/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Amplify&lt;/a&gt; can help you with that.
AppSync is a managed service that uses GraphQL to make it easy for applications to get the data they need from multiple sources with the option to have real-time updates.
Amplify is a framework to build cloud-based full-stack serverless apps.
By combining the forces of these two tools, we can create real-time, offline data, especially if we combine it with GraphQL.&lt;/p&gt;

&lt;p&gt;Your data model can be defined by a GraphQL schema.
In your application, you can use GraphQL subscriptions to have real-time updates for your application data.
There are options to get updates such as long polling, server sent events and web sockets.
It depends on your use case to choose what option is best for you.&lt;/p&gt;

&lt;p&gt;But getting real-time updates also forces you to think about conflict detection and resolution.
Like what do you do when you get multiple updates at the same time?
What if your connection is down for a while?
There are a couple of popular ways to tackle these issues.&lt;/p&gt;

&lt;p&gt;AppSync already uses the solution of monotonic counters combined with a base table that contains all your base data while also maintaining a change table to log all operations that happen on the base data.
AppSync will auto-merge everything for you while also offering other options if necessary.
Check the &lt;a href=&quot;https://aws-amplify.github.io/docs/js/datastore&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amplify DataStore documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=dkMEkD9OsPY&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nader’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/dabit3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nader’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/appsync/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS AppSync&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/amplify/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Amplify&lt;/a&gt; and the &lt;a href=&quot;https://aws-amplify.github.io/docs/js/datastore&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amplify DataStore documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;the-state-of-webassembly-by-sendil-kumarn&quot;&gt;The state of WebAssembly, by &lt;a href=&quot;https://twitter.com/sendilkumarn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sendil Kumarn&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The final talk of the day was by Sendil who came to explain what the current state of WebAssembly is.
WASM, short for WebAssembly, is a high-level definition of how to run bytecode in your JavaScript engine.
At its core, it’s a stack machine that uses a linear memory model by using a shared array buffer.
Contrary to what you might expect, WASM is not faster if you would use it for lots of DOM operations.
The advantage of WASM lies in the fast calculations that can be done.&lt;/p&gt;

&lt;p&gt;To write WASM, you can look at multiple higher-level languages that compile to WASM code.
If you’re a fan of C/C++, the tool &lt;a href=&quot;https://github.com/emscripten-core&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emscripten&lt;/a&gt; helps you out by compiling a C/C++ module to an HTML page.
For the Rust lovers, you can simply annotate a function with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#[wasm_bindgen]&lt;/code&gt; to activate the &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wasm-bindgen library&lt;/a&gt; and allowing to compile a WASM function.
For the TypeScript lovers, there is a strict subset of TypeScript called &lt;a href=&quot;https://docs.assemblyscript.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AssemblyScript&lt;/a&gt; that allows for compilation.&lt;/p&gt;

&lt;p&gt;So the tools are already there to write WASM code but the future looks really bright as multiple features are currently being specified:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WebAssembly/interface-types&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Interface types&lt;/a&gt; to help describe higher-level values such as strings and records&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WebAssembly/simd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single Instruction Multiple Data&lt;/a&gt; so that WASM will be more efficient on newer instruction set architectures up to 128-bit.&lt;/li&gt;
  &lt;li&gt;Garbage collection&lt;/li&gt;
  &lt;li&gt;… and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this will lead to an even better performance of WebAssembly combined with more use cases so that WASM can become a more popular standard on the web.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=2KDU1qdIobA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sendil’s talk&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sendilkumarn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sendil’s Twitter&lt;/a&gt;, &lt;a href=&quot;https://webassembly.org/getting-started/developers-guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WASM.org getting started with Emscripten&lt;/a&gt;, &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wasm-bindgen library&lt;/a&gt; and &lt;a href=&quot;https://docs.assemblyscript.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AssemblyScript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The first of three days in Amsterdam was packed with lots of great talks on a multitude of subjects.
Combine those interesting topics with a great venue (the screen opened for access to the break room!) and you have a killer combination.
If this was day 1, I could not wait for day 2 and 3 that were going to be more focused on VueJS.
I returned to my hotel satisfied with the amount of stuff I had learned that day and was excited for what was still to come.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;During breaks, the stage opened to provide access to the break room&quot; src=&quot;/img/frontend-love-2020/opening-stage.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Elke&quot;, &quot;last_name&quot;=&gt;&quot;Heymans&quot;, &quot;github&quot;=&gt;&quot;ElkeCodes&quot;, &quot;twitter&quot;=&gt;&quot;elkecodes&quot;, &quot;linkedin&quot;=&gt;&quot;elkeheymans&quot;, &quot;permalink&quot;=&gt;&quot;/author/elke-heymans/&quot;, &quot;avatar&quot;=&gt;&quot;elke-heymans.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;elke.heymans@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Elke is a Frontend Developer with a focus on Vue, TypeScript, Angular and is very interested in other frontend technologies. In her spare time you can find her taking photographs at events, training for half marathons or enjoying music by collecting records and attending concerts.&quot;}</name><email>elke.heymans@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="Vue.js" /><category term="React" /><category term="GraphQL" /><category term="WebAssembly" /><category term="a11y" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/frontend-developer-love-2020.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/frontend-developer-love-2020.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Jib: The next big thing to build your Docker images</title><link href="https://ordina-jworks.github.io/docker/2020/05/07/jib.html" rel="alternate" type="text/html" title="Jib: The next big thing to build your Docker images" /><published>2020-05-07T00:00:00+00:00</published><updated>2020-05-07T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/docker/2020/05/07/jib</id><content type="html" xml:base="https://ordina-jworks.github.io/docker/2020/05/07/jib.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jib&quot;&gt;Jib&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#useful-links&quot;&gt;Useful links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Nowadays, you hear a lot about the term ‘containerization’ and the benefits of this technology.
Containerization has become a very popular thing in software and cloud development as more users and companies start to adopt it. 
Because of this, user experience and usability also have to grow. 
In other words, how do we make the creation of a Docker image as easy as possible for a developer? After all, we do love it when things just &lt;strong&gt;work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The process of creating a Docker image has always evolved in the years to be as simple as possible. 
With the amount of resources and information we have today, it shouldn’t be hard to write your own Dockerfile. 
You can also use a Maven / Gradle plugin which interacts with your Docker CLI if you want to avoid writing Dockerfiles.&lt;/p&gt;

&lt;p&gt;But what if it could be even more simpler?&lt;/p&gt;
&lt;h1 id=&quot;jib&quot;&gt;Jib&lt;/h1&gt;
&lt;p&gt;Enter Jib. 
Jib is an image builder plugin released in 2018 and made and maintained by Google. 
To explain what it does, I will use a quote from the &lt;a href=&quot;https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official Google Blog announcement&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jib is a fast and simple container image builder that handles all the steps of packaging your application into a container image. It does not require you to write a Dockerfile or have docker installed, and it is directly integrated into Maven and Gradle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems like a big thing, doesn’t it? Overall, the biggest benefits of Jib are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No need for a Docker daemon anymore in your environment;&lt;/li&gt;
  &lt;li&gt;No seperate docker build / push commands in your pipeline;&lt;/li&gt;
  &lt;li&gt;Supports both Maven and Gradle projects;&lt;/li&gt;
  &lt;li&gt;Dockerizes your application into multiple layers and separates your dependencies from your own classes to significantly reduce build time (in contrast to building fat JARs);&lt;/li&gt;
  &lt;li&gt;Jib only builds the changed layers, so unless you add / update dependencies, it won’t rebuild the dependency layer!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;p&gt;Using the Jib plugin is pretty easy and straight-forward as it was designed to be so. 
All properties and settings work perfectly out of the box. 
This means that I can just add the plugin to my build tool and it will be able to create a Docker image without further ado. 
However, if your container setup is more complex, Jib allows you to override every property that best suits your needs. 
You no longer need a Dockerfile in your project, Jib is perfectly capable of handling your image setup on its own.&lt;/p&gt;

&lt;p&gt;You can try the Jib plugin by either using your current Java project or by cloning the &lt;a href=&quot;#https://github.com/spring-projects/spring-petclinic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Pet Clinic Sample Application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have your project open in your IDE, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; (Maven) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; (Gradle) file to start adding the Jib plugin. 
Don’t forget to build a fresh JAR!&lt;/p&gt;

&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;p&gt;To use &lt;a href=&quot;https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib in Gradle&lt;/a&gt;, you first need to add the plugin to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file. You can do this in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; block.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.cloud.tools.jib'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.1.0'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, you can add your Jib plugin configuration to the file, with the settings that you prefer.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yolanv/jib-demo:gradle'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yolanv/jib-demo:gradle'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Two ways of specifying your Jib configuration in Gradle&lt;/p&gt;

&lt;p&gt;Now you can run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle jib&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;maven&quot;&gt;Maven&lt;/h3&gt;
&lt;p&gt;With &lt;a href=&quot;https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib for Maven&lt;/a&gt;, the configuration is more or less the same as in Gradle, except that you need to write it in XML.&lt;/p&gt;

&lt;p&gt;In Maven, you have to add your preferred configuration with the plugin declaration. 
Add the following in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; element:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.cloud.tools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jib-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;to&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;yolanv/jib-demo:maven&lt;span class=&quot;nt&quot;&gt;&amp;lt;/image&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can trigger the Jib plugin with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn compile jib:build&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The plugin configuration tells Jib that, whenever Jib gets triggered, it should build an image named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yolanv/jib-demo&lt;/code&gt; with the corresponding image tag.
Running the command will trigger Jib to start building and pushing your Docker image.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In a short time, we were able to successfully build a Docker image and push it to our registry. 
It requires very little configuration (depending on your setup ofcourse), it only builds the changed layers and we don’t even need to have a Docker daemon installed!&lt;/p&gt;

&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;&lt;img alt=&quot;Docker repository&quot; src=&quot;/img/2020-03-30-jib/docker-repo.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Docker Hub repository with two pushed tags done with Jib&lt;/p&gt;

&lt;p&gt;Personally, I think this is a very powerful plugin that will be used in new and old projects. 
While I think that it is important for people to understand how Docker works and how Docker images are built, Jib still gives a lot of advantages over using regular Dockerfiles.&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful links&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib Maven Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jib Gradle Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Docker" /><category term="JIB" /><category term="Docker" /><category term="Kubernetes" /><category term="Containerization" /><summary type="html">Table of contents Introduction Jib Usage Conclusion Useful links Introduction Nowadays, you hear a lot about the term ‘containerization’ and the benefits of this technology. Containerization has become a very popular thing in software and cloud development as more users and companies start to adopt it. Because of this, user experience and usability also have to grow. In other words, how do we make the creation of a Docker image as easy as possible for a developer? After all, we do love it when things just work. The process of creating a Docker image has always evolved in the years to be as simple as possible. With the amount of resources and information we have today, it shouldn’t be hard to write your own Dockerfile. You can also use a Maven / Gradle plugin which interacts with your Docker CLI if you want to avoid writing Dockerfiles. But what if it could be even more simpler? Jib Enter Jib. Jib is an image builder plugin released in 2018 and made and maintained by Google. To explain what it does, I will use a quote from the official Google Blog announcement: Jib is a fast and simple container image builder that handles all the steps of packaging your application into a container image. It does not require you to write a Dockerfile or have docker installed, and it is directly integrated into Maven and Gradle. This seems like a big thing, doesn’t it? Overall, the biggest benefits of Jib are: No need for a Docker daemon anymore in your environment; No seperate docker build / push commands in your pipeline; Supports both Maven and Gradle projects; Dockerizes your application into multiple layers and separates your dependencies from your own classes to significantly reduce build time (in contrast to building fat JARs); Jib only builds the changed layers, so unless you add / update dependencies, it won’t rebuild the dependency layer! Usage Using the Jib plugin is pretty easy and straight-forward as it was designed to be so. All properties and settings work perfectly out of the box. This means that I can just add the plugin to my build tool and it will be able to create a Docker image without further ado. However, if your container setup is more complex, Jib allows you to override every property that best suits your needs. You no longer need a Dockerfile in your project, Jib is perfectly capable of handling your image setup on its own. You can try the Jib plugin by either using your current Java project or by cloning the Spring Pet Clinic Sample Application. Once you have your project open in your IDE, open the pom.xml (Maven) or build.gradle (Gradle) file to start adding the Jib plugin. Don’t forget to build a fresh JAR! Gradle To use Jib in Gradle, you first need to add the plugin to your build.gradle file. You can do this in the plugins block. plugins { ... id 'com.google.cloud.tools.jib' version '2.1.0' } Afterwards, you can add your Jib plugin configuration to the file, with the settings that you prefer. jib { to { image 'yolanv/jib-demo:gradle' } } --- jib.to.image = 'yolanv/jib-demo:gradle' Two ways of specifying your Jib configuration in Gradle Now you can run the following command: gradle jib Maven With Jib for Maven, the configuration is more or less the same as in Gradle, except that you need to write it in XML. In Maven, you have to add your preferred configuration with the plugin declaration. Add the following in the plugins element: &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.0&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;to&amp;gt; &amp;lt;image&amp;gt;yolanv/jib-demo:maven&amp;lt;/image&amp;gt; &amp;lt;/to&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; You can trigger the Jib plugin with the following command: mvn compile jib:build The plugin configuration tells Jib that, whenever Jib gets triggered, it should build an image named yolanv/jib-demo with the corresponding image tag. Running the command will trigger Jib to start building and pushing your Docker image. Conclusion In a short time, we were able to successfully build a Docker image and push it to our registry. It requires very little configuration (depending on your setup ofcourse), it only builds the changed layers and we don’t even need to have a Docker daemon installed! Docker Hub repository with two pushed tags done with Jib Personally, I think this is a very powerful plugin that will be used in new and old projects. While I think that it is important for people to understand how Docker works and how Docker images are built, Jib still gives a lot of advantages over using regular Dockerfiles. Useful links Jib Repository Jib Maven Documentation Jib Gradle Documentation</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-03-30-jib/jib-logo.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-03-30-jib/jib-logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>