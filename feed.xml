<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-08-28T15:50:16+00:00</updated><id>https://ordina-jworks.github.io/</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Node-RED: Development and CI</title><link href="https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html" rel="alternate" type="text/html" title="Node-RED: Development and CI" /><published>2018-08-15T00:00:00+00:00</published><updated>2018-08-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-node-red&quot;&gt;What is Node-RED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-we-are-using-node-red-or-an-alternative&quot;&gt;Why we are using Node-RED (or an alternative)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-to-the-rescue&quot;&gt;Node-RED to the rescue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration-components&quot;&gt;Configuration components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-an-instance&quot;&gt;Running an instance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-your-first-flow&quot;&gt;Creating your first flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spicing-things-up&quot;&gt;Spicing things up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#json&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-persistent-config&quot;&gt;Node-RED persistent config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-and-docker&quot;&gt;Node-RED and Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-and-ci&quot;&gt;Node-RED and CI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-node-red&quot;&gt;What is Node-RED&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.” – from docs &lt;a target=&quot;_blank&quot; href=&quot;https://nodered.org/&quot;&gt;https://nodered.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, that’s all true.
But we’re not using Node-RED for those things.
There are two use cases for which we use Node-RED, but before we go into those, we’ll take a quick look at some other Node-RED features.&lt;/p&gt;

&lt;p&gt;Some great pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node-RED is built on Node.js, taking full advantage of its event-driven, non-blocking model.
This makes it ideal to run at the edge of the network on low-cost hardware such as the Raspberry Pi as well as in the cloud. (from docs)&lt;/li&gt;
  &lt;li&gt;Node-RED comes with a web based graphical user interface, where you can manage your API flows with drag and drop functionality.&lt;/li&gt;
  &lt;li&gt;Because Node-RED is built on Node.js you can just run it locally on a lot of systems (Windows, Mac OSX, Linux,…), on a lot of devices and in the cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The graphical user interface lets you create your endpoints and flows in an easy way.
Just drag and drop your components in your flowchart and connect them by drawing a line between them.
Double clicking each component will open the detail screen where you can set some variables for that component.
When your flows are ready, there is an import and an export function available for storing and sharing your configs.&lt;/p&gt;

&lt;h1 id=&quot;why-we-are-using-node-red-or-an-alternative&quot;&gt;Why we are using Node-RED (or an alternative)&lt;/h1&gt;

&lt;h2 id=&quot;node-red-and-development&quot;&gt;Node-RED and Development&lt;/h2&gt;

&lt;p&gt;Coming from a frontend dev background, I can confirm that nothing is more frustrating than running backends, or at least part of the backend, locally, before you can start coding and testing.
Yes, Docker and Docker Compose are helping a lot but still…
In some cases, backend development, for a specific feature, is planned for the same sprint as the frontend development.
So even running a backend locally, will not help you.
Mocking can be an option.
You can start mocking the data inside the communication layer or mocking an external backend with test data.&lt;/p&gt;

&lt;p&gt;In an ideal world, teams should do some analysis of the specifications coming from business and their analysts.
Based on those specification, developers can start estimating tasks (or stories and epics), and think about the architecture and design.
At this point, technical specifications could already get written down, such as model designs and API contracts.
It’s almost impossible to do a good job in the frontend if those things are not available, or at least specified.&lt;/p&gt;

&lt;p&gt;Why do you want good test data?
If you know the characteristics, it’s easier to do some layout stuff.
You would think that mockups and designs would be accurate, but most of the time they aren’t or they are not inline with the data.&lt;/p&gt;

&lt;p&gt;So what about mocking?
Yes, you can mock stuff yourself and maybe skip the communication layer.
Or you can mock the communication part in the communication layer by means of interceptors for example.
But at some point in time, you’ll need an API and test data that is close to production data when it comes to live data specs.
When mocking inside your components, would you include everything in your code base?
Or would you exclude it, but still make it more accessible for your colleagues?
Some frameworks include this kind of functionality such as MockBackend from Angular (More info &lt;a target=&quot;_blank&quot; href=&quot;https://angular.io/api/http/testing/MockBackend&quot;&gt;here&lt;/a&gt;).
That said, I really like and prefer external tools for mocking a backend.
That way it’s separated from your app and code base, so it can easily get replaced or modified without triggering stuff in your frontend pipelines.
You can even choose to run a tool on your local machine.
Or on-premise and make it accessible for all your (frontend) developers.&lt;/p&gt;

&lt;h2 id=&quot;node-red-and-testing-ci&quot;&gt;Node-RED and Testing (CI)&lt;/h2&gt;

&lt;p&gt;Even if you have implemented your mocks inside your communication layer and it’s doing the job you expect it to do, how are you going to test your communication itself?
You can use those mocks to run unit tests, but it’s harder to run integration tests that cover your communication layer as well.
Using an external tool, gives you the possibility to reuse this part in your test setup.
You can integrate this external mock backend in your setup and redirect your frontend calls to the mock instead of a real backend.
Why you should do this, is explained in an earlier post on our tech blog.
If you’re interested, you can read all about it &lt;a target=&quot;_blank&quot; href=&quot;https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html&quot;&gt;here&lt;a&gt;.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;node-red-to-the-rescue&quot;&gt;Node-RED to the rescue&lt;/h1&gt;

&lt;p&gt;In both cases, Node-RED can help us providing a real API that responds with test data.
For the test data, I prefer test data getting delivered by the business or the client, but if that is not an option, you can create your &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; data based on the API contracts and model designs.
Again, I’m mentioning the API contracts and model design, because often, organisations fail at this.
Let’s setup a real easy API.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;Before starting this tutorial, you should download or install some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure you have a Node.js (incl npm) environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm install -g --unsafe-perm node-red&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A running Docker daemon&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull nodered/node-red-docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: To be honest, you only need one of those 2 environments.
For the other part, you can just read through it and then try it in the other setup.&lt;/p&gt;

&lt;h1 id=&quot;configuration-components&quot;&gt;Configuration components&lt;/h1&gt;

&lt;p&gt;Although we are only using Node-RED for HTTP(S) (REST) and MQTT backend mocking, Node-RED provides more options.
Node-RED can even be used as a real backend, using external databases for example.
So before we start our setup, let’s take a quick look at some basic features.&lt;/p&gt;

&lt;h2 id=&quot;inputs&quot;&gt;Inputs&lt;/h2&gt;

&lt;p&gt;HTTP, TCP, UDP are probably the most straightforward and known by all of you.
I guess no explanation is needed.
WebSockets are also used a lot nowadays.
WebSockets are an advanced technology that makes it possible to open an interactive communication channel/session for pushing messages between a client(s) and a server(s).
MQTT is one of the standards for messaging for mobile devices.
It is a lightweight messaging protocol for small sensors and mobile devices, optimized for high-latency or unreliable networks.
Inject, catch, status and link are internal inputs.
Inject provides a way of injecting a message(s) into a flow.
This can be done manually or at a regular interval.
Catch can be used to handle an error from another node.
The normal from of that node will get terminated, but with catch you can handle and catch the error providing an alternative route.
The status node is just reporting messages from other nodes and link lets the user create virtual links between flows.&lt;/p&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;Same as above for HTTPS, TCP, UDP, WebSockets, MQTT and link but now for outputs.
Debug lets you show messages in the sidebar.
The debug sidebar provides a structured view of the messages it has sent, making it easier to understand their structure.&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Node-RED comes with a lot of predefined function blocks.
The ones we are using most are the regular &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block itself and the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;- or &lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;-function to parse json and xml.
Besides those, there are function blocks that lets you run calls to external platforms, delay, reroute or redefine messages, etc.
If you need more information about one of them, Node-RED show an information screen when selecting one of them.&lt;/p&gt;

&lt;h2 id=&quot;social&quot;&gt;Social&lt;/h2&gt;

&lt;p&gt;This section provides us with functionality to intercept (input/output) email- and twitters messages.
I’ve personally never used one of them, but I can imagine they can come in handy.&lt;/p&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;

&lt;p&gt;File (input/output) is self explanatory.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; function, lets you add a watcher to a file.
As the docs describe, this cannot be used on Windows systems.
It’s based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ tail -f fileName&lt;/code&gt; command on Unix systems and watches for changes.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;This component lets you analyse a received message based on a sentiment score.
You can read all about it &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/thisandagain/sentiment/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;/h2&gt;

&lt;p&gt;Like the tail function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;-block watches for directory or file changes.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;feedparse&lt;/code&gt; can be used to monitor an RSS/atom feed for new entries.
The last one, the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;-block lets you run a system command and returns its output.&lt;/p&gt;

&lt;h1 id=&quot;running-an-instance&quot;&gt;Running an instance&lt;/h1&gt;

&lt;p&gt;First things first, let’s fire up a Node-RED instance.
(We are going to start with the npm package version)
To start using or initiating an instance of Node-RED by using the npm repositories, just run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ node-red&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If installed correctly, you should see the following log:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/log1.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There are four interesting lines in this log.
The first three of them are the settings file, the user dir and the flows file.
The last line shows us where the service is available.&lt;/p&gt;

&lt;p&gt;We’ll come back to the config later, and we are going to take a look at the User Interface based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; in the last line.
As mentioned before, Node-RED offers a user interface, to configure the service.
Open your browser and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:1880&lt;/code&gt; (default setup config).&lt;/p&gt;

&lt;p&gt;You’ll see all the components mentioned above on the left side of the screen.
In the middle you have a tabbed structure for your flow chart(s), and on the right you have debug, info and detail windows.&lt;/p&gt;

&lt;p&gt;On the top right of your screen, you have a settings dropdown and a menu with deploy options.&lt;/p&gt;

&lt;h1 id=&quot;creating-your-first-flow&quot;&gt;Creating your first flow&lt;/h1&gt;

&lt;p&gt;Let’s use the Node-RED user interface to create a simple flow.
In this case a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input connected to a function that returns its data through an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-output.&lt;/p&gt;

&lt;p&gt;Start by dragging the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; from the input list onto the chart.
Then, drag and drop a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; block from the function list and the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; from the output list onto the chart.
Connect the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input with the function block by dragging a line starting from the input node, to the function block.
Repeat this for the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block to the output.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/initial-flow.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Of course this isn’t ready for being deployed just yet, cause we did not add any logic yet.
Let’s configure our flow!&lt;/p&gt;

&lt;h3 id=&quot;input&quot;&gt;Input&lt;/h3&gt;

&lt;p&gt;Double click the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input block.
This action will open a window on the right where you can set some properties.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method: GET&lt;/li&gt;
  &lt;li&gt;URL: /data&lt;/li&gt;
  &lt;li&gt;Name: Get all data&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Confirm these settings by clicking ‘Done’.&lt;/p&gt;

&lt;h3 id=&quot;function-block&quot;&gt;Function block&lt;/h3&gt;

&lt;p&gt;Double click the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.
Again, a window will open!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: Retrieve data&lt;/li&gt;
  &lt;li&gt;Function:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE:
The information section on the right comes in handy while configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A JavaScript function block to run against the messages being received by the node.
The messages are passed in as a JavaScript object called msg.
By convention it will have a msg.payload property containing the body of the message.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explains why we are setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;msg.payload&lt;/code&gt; property.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-function.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Again, confirm these settings by clicking ‘done’.&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;

&lt;p&gt;Open the config for the &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output block.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: return all&lt;/li&gt;
  &lt;li&gt;Status Code: 200&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-output.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the output lets you choose the return status code.
This can be used later if you would like to implement failed &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt;-calls for mocking purposes.
Confirm these settings by clicking ‘Done’.&lt;/p&gt;

&lt;h3 id=&quot;deploy&quot;&gt;Deploy&lt;/h3&gt;

&lt;p&gt;On the top right of your screen, you have the deploy-dropdown.
Clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; will deploy this flow onto the running server, but you can also use the arrow to open up the menu and choose a more accurate scenario.
Since this is our first deploy and we only have one flow, we don’t have a choice.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/deploy.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;test-setup&quot;&gt;Test setup&lt;/h3&gt;

&lt;p&gt;To test our deployment and of course our flow, just navigate to http://localhost:1880/data in your browser or use curl to GET the data:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/test-browser.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:1880/data&lt;/code&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/test-curl.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;spicing-things-up&quot;&gt;Spicing things up&lt;/h1&gt;

&lt;p&gt;Let’s try and implement a &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;.
We would first drag and drop an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input, a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output onto the flow chart.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The input would look like:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;:id&lt;/code&gt;.
This way we tell Node-RED that this is a path parameter.&lt;/p&gt;

&lt;p&gt;The output would look like:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete-output.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;But what about the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block ? We could come up with something like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the id&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we’ve filtered out an element, but that’s it.
Everytime we call this function block, it will start by initialising the data array.
Since we are not persisting the data, requesting all the records, will still return all the data records.&lt;/p&gt;

&lt;h2 id=&quot;persisting-data&quot;&gt;Persisting data&lt;/h2&gt;

&lt;p&gt;There is a way to connect to a database, but that is outside of the scope of this post.
First, let’s show some ways of persisting data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node context&lt;/li&gt;
  &lt;li&gt;Flow context&lt;/li&gt;
  &lt;li&gt;Global context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The node context lets the user persist variables for that node.
Whenever that node gets redeployed, the context is gone.
The flow context is a context shared over all nodes in that flow chart while the Global context lets you share a context over the whole app.&lt;/p&gt;

&lt;p&gt;You can set and get a context variable with the getters and setters from the api.
For a flow context this will look like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// do stuff&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;initialising-data&quot;&gt;Initialising data&lt;/h2&gt;

&lt;p&gt;Now that we know how we can store data, we need to find a way to initialise the data.
We could for example launch a call to trigger a function that would store data in the flow context.
We could build this by using an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input, a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output.
But this doesn’t feel right.
Luckily, Node-RED provides us with an &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This input will get triggered periodically, or just one time. &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input is made for injecting messages of almost any type into the next component.
This message can be a string, a number, the current timestamp, …
We are going to use it as a trigger on startup to initialise our data into our flow.&lt;/p&gt;

&lt;h3 id=&quot;inject-input&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input:&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;inject-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-function:&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject-function.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;Now we know how we can inject and persist data in a context, let’s refactor our &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;.
And while we are at it, add a second &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; so we can query one record by ‘id’.&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;

&lt;p&gt;Our two &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-inputs are exactly the same except for the parameter (id).
The function-block on the other hand, will have some build-in logic:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are retrieve the data from the context and storing it in a local variable.
Based on the existence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; parameter, we are going to search for a single record, or return all records.
Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;.
This is because the id in the data is a number, where the id from the params is a string.&lt;/p&gt;

&lt;p&gt;Based on the logic, we could add a query parameter to the endpoint that let’s us filter the data on the title property for example, but that is out of scope.&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;As shown earlier, we are going to use a simple filter function to filter out the record with the given id.
We start by retrieving the data from the flow context, and then filtering this data.
Don’t forget to rewrite the new data to the flow context, so other components will get updated context data.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;all-together&quot;&gt;All together&lt;/h3&gt;

&lt;p&gt;Now we should have an &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input and 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-inputs (2 GET’s and 1 DELETE).
Our flow should look like:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/persistent.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s deploy and test this setup.
First click the deploy button and wait a second.
Then navigate with your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:1880/data&lt;/code&gt;.
This should display your data in your browser.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/all-browser.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s try to delete a record.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X DELETE http://localhost:1880/data/3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And refresh your browser:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/all-browser-delete.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Seems like one big success! No?
Not exactly.
Try and delete records 1, 2, 4 and 5.
Now what?
Our data is gone and we don’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; nor a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; implemented.&lt;/p&gt;

&lt;p&gt;Implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; is really straightforward.&lt;/p&gt;

&lt;h3 id=&quot;post-and-put&quot;&gt;POST and PUT&lt;/h3&gt;

&lt;p&gt;For the example, we are going to work with an &lt;code class=&quot;highlighter-rouge&quot;&gt;upsert&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; will trigger the same function block that will be smart enough to update (if exists) or insert.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/post-put.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The upsert &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block can look like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// quick fix making sure it's a number&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or adjusted body if needed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we have a GET, POST, PUT and DELETE.
But still, we are missing something.
Assume we are developing delete functionality in the frontend while using this setup as a backend.
Since we only have 5 records, I should inject new data to test after my 5 deletes.
Or assume we are testing a frontend, connected to this mock backend.
Wouldn’t it be nice that we can refresh the data to its initial state before running a new test suite?&lt;/p&gt;

&lt;p&gt;The point I’m getting to is, we should come up with a way of refreshing our data to its initial state.&lt;/p&gt;

&lt;h2 id=&quot;resetting-data&quot;&gt;Resetting data&lt;/h2&gt;

&lt;p&gt;When you look at your flow chart, you’ll see there is something that looks like a button on the left side of our &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input.
When you click it, you’ll notice a toast message appearing on the top of your user interface:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refresh-toast.png&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;But what if we don’t have access to the user interface, or we don’t have control over it what so ever? For example, when running automated tests against this mock backend, somewhere on a dynamic Jenkins Docker slave? To overcome this, we are using an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input to trigger the reset of our data.
Let’s take a look at our implementation:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refresh-http.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input is listening on &lt;code class=&quot;highlighter-rouge&quot;&gt;/rest&lt;/code&gt;.
As you can see, we’ve added an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output.
REST-calls are expecting a response! Don’t forget to deploy your new setup&lt;/p&gt;

&lt;p&gt;Making sure this works:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should respond with the initial data
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; DELETE http://localhost:1880/data/2   // should delete record with &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;id&quot;:&quot;7&quot;,&quot;Title&quot;:&quot;Title 7&quot;}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:1880/data   // should add record with &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;7
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should give the expected result
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/reset  // should reset the data
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should show the reset is working
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/curl-result.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;json&quot;&gt;JSON&lt;/h1&gt;

&lt;p&gt;The last refactoring we are going to do in this tutorial is switching from an hardcoded data json object to an external &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file.
As mentioned before, Node-RED provides ways of integrating storage and databases, but that is out of the scope of this post.
Still, we don’t want to include real data in this setup.
We should loosely couple our data provider and the backend mock implementation.
If some analysts, for example, provide us with new test data, we don’t want to change anything in this setup.
One way to overcome this, is to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-files.&lt;/p&gt;

&lt;p&gt;Assume we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file, called &lt;code class=&quot;highlighter-rouge&quot;&gt;data.json&lt;/code&gt; with content:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember when I mentioned some important lines in the console at startup?
One of those lines was referring to the User directory:
&lt;code class=&quot;highlighter-rouge&quot;&gt;User directory : /Path/To/Your/Home/.node-red&lt;/code&gt; (which is the default)
Because we didn’t change anything in the &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.js&lt;/code&gt; file (or didn’t point to a custom one), Node-RED creates a context folder for the current instance.
Copy your &lt;code class=&quot;highlighter-rouge&quot;&gt;data.json&lt;/code&gt; to this folder.
I will explain later why we are doing this.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/node-red-user-dir.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s read data from this json file instead of hardcoding the data:&lt;/p&gt;

&lt;h3 id=&quot;add-a-file-component-from-the-storage-section&quot;&gt;Add a file component from the storage section&lt;/h3&gt;

&lt;p&gt;On the left of the user interface, there is a storage section with an input file option.
Drag this onto the flow chart.
Unlink the connections from the &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input and the reset &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input with the ‘store’ &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and connect both with the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;-storage component.
Open the details and set the properties:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/storage-file.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Do read the text on the bottom about the patch to the file! And keep in mind we have selected the ‘single UTF-8 string’ option.&lt;/p&gt;

&lt;h3 id=&quot;add-a-json-parse-function&quot;&gt;Add a Json parse function&lt;/h3&gt;

&lt;p&gt;In the function section on the left, you have a JSON component.
Depending on its input, it will parse or stringify a string or json object.
Because we will be sending this component a ‘single UTF-8 string’, it will parse it to a JSON object.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/parse.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Integrate this component in between the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;-storage component and the store &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.&lt;/p&gt;

&lt;h3 id=&quot;refactor-the-store-function&quot;&gt;Refactor the store function&lt;/h3&gt;

&lt;p&gt;We are now ready to refactor the store &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.
Remove the data and replace it with the content of the json-parse function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refactored-store.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;result-result&quot;&gt;Result [result]&lt;/h3&gt;

&lt;p&gt;When finished, our setup should look like the following flow chart:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/result.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When the json-file gets updated, a data reset call will reload the new data into the flow context without needing to change the setup itself!&lt;/p&gt;

&lt;h1 id=&quot;node-red-persistent-config&quot;&gt;Node-RED persistent config&lt;/h1&gt;

&lt;p&gt;As mentioned before, Node-RED uses a user directory, a &lt;code class=&quot;highlighter-rouge&quot;&gt;flow.json&lt;/code&gt; file and a &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.js&lt;/code&gt; file.
If those do not exist, it will create default ones for you in the default node-red path &lt;code class=&quot;highlighter-rouge&quot;&gt;%USERPROFILE/.node-red&lt;/code&gt;.
Going through the settings file is also out of the scope of this post.
Advanced users can just read all about it in the docs or just open it and modify it.&lt;/p&gt;

&lt;p&gt;Why I’m mentioning this directory, is because of the config persistence of Node-RED.
Go ahead and kill your Node-RED server (&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL-C&lt;/code&gt; in terminal).
And now just restart it:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, Node-RED will just pick up its previous config because it’s available in the default directory.
When more people need to work with this config, we need to share it.
The easiest way to share this config, is to wrap it in a Git repository.
Keep in mind that this may not be best practice to wrap the whole directory, but this way, your colleagues and continuous integration platform can just checkout the repository and run the server, including the data files.&lt;/p&gt;

&lt;p&gt;When running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ node-red --help&lt;/code&gt; it shows the command line params.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/man-node-red.png&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; option.
Node-RED provides us with cli parameters to run custom configs.
Let’s assume we clone our newly created Git repository in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/repositories/node-red&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node-red &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ~/repositories/node-red/settings.js &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ~/repositories/node-red
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;node-red-and-docker&quot;&gt;Node-RED and Docker&lt;/h1&gt;

&lt;p&gt;Node-RED also provides a Docker image at &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/nodered/node-red-docker/&quot;&gt;Docker Hub&lt;/a&gt;.
This way you do not even need a Node.js environment preinstalled.&lt;/p&gt;

&lt;p&gt;You can just run it with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1880:1880 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mynodered nodered/node-red-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What about our persistent config?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Node-RED is started using NPM start from this /usr/src/node-red, with the –userDir
parameter pointing to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; directory on the container.
The flows configuration file is set using an environment parameter (FLOWS),
which defaults to ‘flows.json’.
This can be changed at runtime using the
following command-line flag. – from docs https://hub.docker.com/r/nodered/node-red-docker/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1880:1880 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FLOWS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_flows.json nodered/node-red-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we can choose only to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;flows.json&lt;/code&gt; file or we could map our user directory from our repository as a volume to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; in the container, providing the container our context.&lt;/p&gt;

&lt;p&gt;An other option is to bake your &lt;code class=&quot;highlighter-rouge&quot;&gt;userDir&lt;/code&gt; into your image.
This way you can provide your CI with a ready to go Docker image for this particular case.
This is probably not the best solution, but in some cases it can be very helpful.&lt;/p&gt;

&lt;h1 id=&quot;node-red-and-ci&quot;&gt;Node-RED and CI&lt;/h1&gt;

&lt;p&gt;As we now know how we can configure, dockerize and run our mock backend, we could easily include it in one of our testing stages during our Continuous Delivery pipelines setup.
For those of you whom read the article about the different stages of API testing (&lt;a href=&quot;https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html&quot;&gt;here&lt;/a&gt;), the following setup will need no further explanation.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/ci-setup.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this setup, the task at hand is running the automated tests defined in and run by our Gauge, Protractor or Nightwatch.js framework.
To be able to do this, it would be nice to launch an environment at once.
We can provide our Continuous Integration environment with a compose file that will launch and destroy our frontend and Node-RED mock backend in one environment.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It’s nice to have an external tool available that can get reused for multiple purposes, in our case development and testing.
Node-RED provides us with cool features and an easy to use User Interface to do so!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Node-RED" /><category term="docker" /><category term="Jenkins" /><category term="GoCD" /><category term="ci" /><summary type="html">Table of contents What is Node-RED Why we are using Node-RED (or an alternative) Node-RED to the rescue Configuration components Running an instance Creating your first flow Spicing things up JSON Node-RED persistent config Node-RED and Docker Node-RED and CI Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/node-red-dev-ci/node-red-dev-ci-white.png" /></entry><entry><title type="html">Testing Angular with jest</title><link href="https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest.html" rel="alternate" type="text/html" title="Testing Angular with jest" /><published>2018-08-03T00:00:00+00:00</published><updated>2018-08-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest.html">&lt;p&gt;Last year I learned about Jest, a testing framework. ‘Yet another one’ was my first thought.
Later that year my colleague and I were looking to extend our test coverage. We where using Jasmine to write the tests we had and Karma to run them.
It worked for sure and we had a lot of tests but it was like a punishment to write them every time, repeating the same code to mock things and when it finally worked and we pushed them to the CI they would sometimes fail randomly.
So we were eager to find a better way to test.&lt;/p&gt;

&lt;p&gt;Pretty quickly we started looking into Jest. It differentiated itself by not using Karma as a test runner.
We liked the idea because Karma actually has some points of failure which we encountered often.&lt;/p&gt;

&lt;h2 id=&quot;karma-vs-jest&quot;&gt;Karma vs Jest&lt;/h2&gt;

&lt;h3 id=&quot;karma&quot;&gt;Karma&lt;/h3&gt;

&lt;p&gt;Let me quickly give you an overview of what it is that Karma does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;it spawns a webserver to serve your source and test code;&lt;/li&gt;
  &lt;li&gt;it starts a browser from your machine and connects to the webserver;&lt;/li&gt;
  &lt;li&gt;it spawns a reporter which has a socket connection with the webserver;&lt;/li&gt;
  &lt;li&gt;it runs every test, awaits its result and sends it to the reporter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end we have 3 components communicating with each other. Which components exactly, dependends on the environment Karma is running on.
Our CI was a Linux machine, I had an Ubuntu to work on, my colleague was on MacOS, and other guys in the team were on Windows.
So we all had different Chrome versions which gave us some issues. And our CI used PhantomJS, which is outdated, so here we also had some issues.&lt;/p&gt;

&lt;h3 id=&quot;jest&quot;&gt;Jest&lt;/h3&gt;

&lt;p&gt;How are these issues fixed in Jest?
As I mentioned before Jest does not use Karma to run the tests, it will just start a single NodeJS process which does all the work by itself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;it compiles your code;&lt;/li&gt;
  &lt;li&gt;it runs your tests with NodeJs (or JSDOM for DOM testing);&lt;/li&gt;
  &lt;li&gt;it creates a report.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just plain and simple without too many interconnected processes to break.
Also, no real browser is needed on the machine since NodeJs and JSDOM are used.
Therefore the only tool to keep up to date is Jest, which is managed automatically via the Yarn lockfile&lt;/p&gt;

&lt;h2 id=&quot;set-up&quot;&gt;Set up&lt;/h2&gt;

&lt;p&gt;So how can you set it up and quickly replace all your tests (if you’re coming from Jasmine)?
To make Jest available in an Angular project, you first need to install Jest and &lt;a href=&quot;https://www.npmjs.com/package/jest-preset-angular&quot; target=&quot;_blank&quot;&gt;jest-preset-angular&lt;/a&gt;.
Since Jest is made for React (backed by Facebook, remember) we need jest-preset-angular to fix some things for us.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add -D @types/jest jest jest-preset-angular
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some configuration is always needed so let’s add some lines to the package.json (or export the config in a jest.config.js).
First we point to the preset that we will use. Next we provide a setup-jest.ts script in which we import some necessary files (we’ll create it later on).
Then we provide information about how Jest should transpile our code under the transform property. Therefore we point to the preprocessor from jest-preset-angular for our typescript and html files.
And for the Javascript files we’ll point to babel-jest (which ships with Jest).
The transformIgnorePatterns point to some libraries that don’t need to be transpiled for our tests. (If you get &lt;code class=&quot;highlighter-rouge&quot;&gt;Unexpected token import&lt;/code&gt; issues, you might need to add some packages here)&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jest-preset-angular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;setupTestFrameworkScriptFile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;rootDir&amp;gt;/src/setup-jest.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'^.+\\.(ts|html)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&amp;lt;rootDir&amp;gt;/node_modules/jest-preset-angular/preprocessor.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'^.+\\.js$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'babel-jest'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transformIgnorePatterns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'node_modules/(?!@ngrx|ng&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-translate|@ionic|lodash|ionic-angular)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned previously, we create a setup-jest.ts file in which we import some code from jest-preset-angular and a global mocks file.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jest-preset-angular'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./jest-global-mocks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the jest-global-mocks.ts we provide functionality that is not found in JSDOM but that we use in our code (and thus is found in our preferred browser).
So we mock things that are globally accessible, if you use certain browser API’s you should also mock them here.
For our example we needed the following code:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localStorage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sessionStorage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'getComputedStyle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-webkit-appearance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;backendUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mocked URl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, our tests use localStorage, sessionStorage, getComputedStyle and an environment property (__env) on the window.&lt;/p&gt;

&lt;p&gt;With everything set up we could run our test by running the Jest command&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course not much is running yet since all our tests use Jasmine, and ‘jasmine’ (as a keyword) is unknown to Jest.
To fix this we need to replace some Jasmine specific code by Jest specific code.&lt;/p&gt;

&lt;h2 id=&quot;jasmine-to-jest&quot;&gt;Jasmine to jest&lt;/h2&gt;

&lt;p&gt;In Jasmine we would create a mock object using Jasmine’s createSpyObj-function and passing some parameters in it.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSpyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'you'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'want'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Jest we just create an object with the expected properties, and jest.fn() creates a mock function for us.
This is a great improvement since you get better code hints and you can easily create more advanced mocks.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also to mock return values it is a bit different (for the better):&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And you can chain multiple return values if you need it&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'everyone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or even with a function which can execute simple logic.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// But you shouldn't be implementing to much logic, since you don't want to test the tests.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or provide it at initialisation which saves you a line of code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the assertions you shouldn’t have to change much, since Jest uses almost the same assertion functions as Jasmine.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mostRecent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to get the first argument of the first call (firstname)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to get the second argument of the first call (lastname)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I changed all our tests with some regexes, it is possible with some creativity, but today there are codemods which should do the hard work for you.
&lt;a href=&quot;https://jestjs.io/docs/en/migration-guide&quot; target=&quot;_blank&quot;&gt;Checkout the jest documentation&lt;/a&gt; to find out more.&lt;/p&gt;

&lt;p&gt;Jest really gets interesting when you use libraries and need to mock them:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/common/http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CompaniesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./companies.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rxjs/Observable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@angular/common/http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companiesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CompaniesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'the service should map the return value to an array of companies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;companiesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]));&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'backendUrl/companies?page=6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of mocking HttpClient we can just import it, provide the return value we know backend will give and focus on testing the output of our getPage method.
In the above example you see I have to create a instance of httpClient to get around dependency injection in Angular, but other imports can also be mocked in the same way.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So one year later we are still using Jest and testing is still a lot more enjoyable than it was before.
Not painless as Jest claims it to be, but that’s just the nature of testing I guess.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;Vergeylen&quot;, &quot;github&quot;=&gt;&quot;yannickvergeylenord&quot;, &quot;linkedin&quot;=&gt;&quot;yannickvergeylen&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-vergeylen/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-vergeylen.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;yannick.vergeylen@ordina.be&quot;, &quot;phone&quot;=&gt;32476499054, &quot;bio&quot;=&gt;&quot;Yannick is a young and driven software developer. Widely interested and with a studious attitude he keeps looking for new ways to improve the web with better software and experiences.&quot;}</name><email>yannick.vergeylen@ordina.be</email></author><category term="Testing" /><category term="JWorks" /><category term="culture" /><summary type="html">Last year I learned about Jest, a testing framework. ‘Yet another one’ was my first thought. Later that year my colleague and I were looking to extend our test coverage. We where using Jasmine to write the tests we had and Karma to run them. It worked for sure and we had a lot of tests but it was like a punishment to write them every time, repeating the same code to mock things and when it finally worked and we pushed them to the CI they would sometimes fail randomly. So we were eager to find a better way to test.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-08-03-testing-angular-with-jest/jest.png" /></entry><entry><title type="html">Agile Leadership Game</title><link href="https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game.html" rel="alternate" type="text/html" title="Agile Leadership Game" /><published>2018-07-31T00:00:00+00:00</published><updated>2018-07-31T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game.html">&lt;p&gt;Last week we, as the guild of agile coaches from Ordina, tried and tested the Agile Leadership Game developed by the Agile Consortium called ‘How Agile Are You?’.
In this blog post, we will provide you with some more information about the game.&lt;/p&gt;

&lt;h3 id=&quot;details&quot;&gt;Details&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2-6 players (even though more is possible)&lt;/li&gt;
  &lt;li&gt;Intended audience is management&lt;/li&gt;
  &lt;li&gt;Takes 1.5 hours (on average)&lt;/li&gt;
  &lt;li&gt;Needs a skilled facilitator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;game-play&quot;&gt;Game Play&lt;/h3&gt;
&lt;p&gt;This game has been designed to get discussions on agile leadership going and to ensure that people start observing behaviour that belongs (or does not belong) to an agile organisation.
It is specifically intended for management teams.
The game is focused on agile mindset and agile leadership: what do people and organisations need from management when engaged in an agile transformation?&lt;/p&gt;

&lt;p&gt;Participants are asked to very rapidly (! ten seconds per card on average :) !) divide fourty-two cards with ‘characteristics’ of organisations, over one of the quadrants on the board.
As a participant you are to decide how the characteristic manifests itself in your organisation at this moment.
The game board consists of the quadrants “LET GO, IGNORE, CREATE and KEEP” as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Agile Leadership Game&quot; src=&quot;/img/agile-leadership-game/Agile-Leadership-Game.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the characteristic on the card is behaviour that the organisation DOES HAVE at that time but that you DON’T WANT, the card gets sorted in the quadrant “LET GO”.
If the participant perceives the characteristic on the card as a behaviour the organisation DOES HAVE and that you DO WANT, it ends up at “KEEP” and so on.
An example of a characteristic is “management spends a lot of time putting out fires”.&lt;/p&gt;

&lt;p&gt;There is no right or wrong: the game provides insight in the current state of affairs.
The characteristics are labelled in types of behaviour belonging to types of organisations.
So you could end up with lots of characteristics belonging to agile organisations in the “CREATE” quadrant. :)&lt;/p&gt;

&lt;p&gt;After the time box for sorting the cards ends, the participants will discuss the characteristics that seem most relevant to them and their organisation.
Each participant gets the chance to enter at least one card/characteristic into the discussion.
This needs to be (well) facilitated by an experienced coach/agile master.
You can take as long as you like for the discussion and could do several discussion rounds, but we would recommend not to have it last for too long (1.5 hours max).&lt;/p&gt;

&lt;p&gt;After the discussion round it is useful to add an extra step in the game as to make the outcome more actionable:
the participants prioritise the top three of characteristics/topics they would like to let go or create.
These are the topics they can start working with the very next day!
This way you also prevent the session being perceived as just fun, irrelevant and/or without consequences.
Because there are fourty-two cards in the game and you won’t discuss them all, the game is most suitable to be played again at a later time – it won’t lose its value.&lt;/p&gt;

&lt;h3 id=&quot;outcomes-retrospective&quot;&gt;Outcomes retrospective:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Participants need some time to figure out how to play the game and how to work with the quadrants on the board.&lt;/li&gt;
  &lt;li&gt;An ice breaker to start with and a small warm up round increases effectiveness and actionable outcome of the game.&lt;/li&gt;
  &lt;li&gt;Making sure the topics in the discussion round are precisely those that matter most to the organisation and the participants, adds greatly to the usefulness of the session.&lt;/li&gt;
  &lt;li&gt;You need a skilled facilitator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TOP:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Very nice game to play, offering lots of insight and actionable openings to start your transformation at leadership level.&lt;/li&gt;
  &lt;li&gt;The game doesn’t take too long, can easily be played several times over time and can easily be fitted into a leadership programme, workshop, curriculum or “heidag”.&lt;/li&gt;
  &lt;li&gt;It’s a perfect self-assessment game for management teams that are wondering how agile they actually are as a team. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to try this game but don’t yet have an experienced facilitator available, don’t hesitate to reach out to us! We’d love to help!&lt;/p&gt;

&lt;p&gt;More information about the game can be found &lt;a href=&quot;https://www.agileconsortium.net/leadership-game/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maryse&quot;, &quot;last_name&quot;=&gt;&quot;Meinen&quot;, &quot;permalink&quot;=&gt;&quot;/author/maryse-meinen/&quot;, &quot;avatar&quot;=&gt;&quot;maryse-meinen.jpg&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;linkedin&quot;=&gt;&quot;mmeinen&quot;, &quot;email&quot;=&gt;&quot;maryse.meinen@ordina.nl&quot;, &quot;bio&quot;=&gt;&quot;Maryse is a Lean/Agile solution architect who has been working in IT since 2008. Inspiring more women to consider a career in tech is one of her ambitions. To Maryse, Lean and Agile philosophy is a way of life – and she’s convinced that a focus on Agile might bring about more women in IT.&quot;}</name><email>maryse.meinen@ordina.nl</email></author><category term="Agile" /><category term="Agile" /><category term="Agile Leadership Game" /><category term="Agile Consortium" /><summary type="html">Last week we, as the guild of agile coaches from Ordina, tried and tested the Agile Leadership Game developed by the Agile Consortium called ‘How Agile Are You?’. In this blog post, we will provide you with some more information about the game.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/agile-leadership-game/How-Agile-Are-You.jpg" /></entry><entry><title type="html">JWorks: A Culture of Learning</title><link href="https://ordina-jworks.github.io/culture/2018/07/03/JWorks-a-Culture-of-Learning.html" rel="alternate" type="text/html" title="JWorks: A Culture of Learning" /><published>2018-07-03T00:00:00+00:00</published><updated>2018-07-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/culture/2018/07/03/JWorks-a-Culture-of-Learning</id><content type="html" xml:base="https://ordina-jworks.github.io/culture/2018/07/03/JWorks-a-Culture-of-Learning.html">&lt;blockquote&gt;
  &lt;p&gt;People often wonder, why should we invest in people, what if they leave?
Better ask yourself, what if you don’t, and they stay?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Java unit at Ordina Belgium has always been amongst the most profitable and respected units of the entire group.
Yet, we’ve seen a big change in management style a couple years back.
While during the financial crisis the primary focus had to be on continuity and securing revenue, the last couple of years have been revolving around the people and their careers.&lt;/p&gt;

&lt;p&gt;The Java unit has been rebranded to Ordina JWorks, a separate identity with a well-defined mission.
We want to help our customer strategically, by co-creating solutions that help them disrupt their respective industry.
To do that, we had to become thought-leaders in our field, recognised for our expertise by both the tech community and our customers.&lt;/p&gt;

&lt;p&gt;In today’s market, hiring only the very best profiles doesn’t scale well.
Hence, allowing people to grow is the only way forward.
Aside from books and online courses, internal trainings and competence centers are a great way to get people to the next level.
JWorks organises at least one training or knowledge sharing session a week.
During winter and summer, entire training programs are being organised both for junior, medior and senior profiles.&lt;/p&gt;

&lt;p&gt;This begs the question though, how do we keep these trainings relevant?
The gap between repeating what others have said and found out, and actually performing new qualitative research, is what makes all the difference.
Being able to experience learnings firsthand allows people to really dig into subjects and deeply understand the trade-offs and decisions that led to solutions we use today.&lt;/p&gt;

&lt;p&gt;Part of researching a given topic consists of talking to international subject matter experts.
Thanks to the open source community we get to work in, people are very approachable.
It’s quite straightforward to get to know core committers, well-known architects or developer evangelists.
Yet, the best way to really pick someone’s brain is to meet them face to face.
JWorks facilitates this by sending our people to conferences and events around the world.&lt;/p&gt;

&lt;p&gt;San Francisco, New York, Seattle, London, Barcelona, Las Vegas, Austin, Berlin, Kiev, Riga, Paris, Amsterdam, Budapest, Casablanca, Frankfurt, Washington DC; only a few of the cities we’ve frequented during the past couple of years.
We encourage people to take a couple days extra to enjoy the city and do some sight-seeing.
Conveniently labelled “learning holidays”, this type of trips really create a community feeling inside the company.
If people are having fun, they’ll be much more motivated to go the extra mile.&lt;/p&gt;

&lt;p&gt;Upon return, the accumulated knowledge gets put into good use by giving input in training material, creating blogposts with differentiating content or by helping to shape customers’ vision and facilitating technical decision-making.&lt;/p&gt;

&lt;p&gt;We also encourage people to be vocal about the things they love, by giving a workshop, speaking at internal events, or becoming a rock star speaker at international conferences.&lt;br /&gt;
By becoming public speakers ourselves, we really get to know the nitty gritty details of whatever subject we’re talking about.
Taking a seat at conferences’ speaker dinners also helps to network and enter the world of the greatest minds of our industry.&lt;/p&gt;

&lt;p&gt;This is how JWorks builds a community of highly motivated thought-leaders.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Andreas&quot;, &quot;last_name&quot;=&gt;&quot;Evers&quot;, &quot;permalink&quot;=&gt;&quot;/author/andreas-evers/&quot;, &quot;avatar&quot;=&gt;&quot;andreas-evers.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;andreas.evers@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;andreasevers&quot;, &quot;github&quot;=&gt;&quot;andreasevers&quot;, &quot;title2&quot;=&gt;&quot;Practice Leader Backend&quot;, &quot;linkedin&quot;=&gt;&quot;eversandreas&quot;, &quot;bio&quot;=&gt;&quot;Andreas is a Principal Java consultant at Ordina, passionate about the Spring ecosystem, microservices, REST, clean code and best practices in general. An avid open source enthusiast and Spring contributor. Helps fellow developers as Competence Center leader for architecture and best practices by giving workshops, talks and courses about the newest technologies.&quot;}</name><email>andreas.evers@ordina.be</email></author><category term="Culture" /><category term="JWorks" /><category term="culture" /><summary type="html">People often wonder, why should we invest in people, what if they leave? Better ask yourself, what if you don’t, and they stay? The Java unit at Ordina Belgium has always been amongst the most profitable and respected units of the entire group. Yet, we’ve seen a big change in management style a couple years back. While during the financial crisis the primary focus had to be on continuity and securing revenue, the last couple of years have been revolving around the people and their careers. The Java unit has been rebranded to Ordina JWorks, a separate identity with a well-defined mission. We want to help our customer strategically, by co-creating solutions that help them disrupt their respective industry. To do that, we had to become thought-leaders in our field, recognised for our expertise by both the tech community and our customers. In today’s market, hiring only the very best profiles doesn’t scale well. Hence, allowing people to grow is the only way forward. Aside from books and online courses, internal trainings and competence centers are a great way to get people to the next level. JWorks organises at least one training or knowledge sharing session a week. During winter and summer, entire training programs are being organised both for junior, medior and senior profiles. This begs the question though, how do we keep these trainings relevant? The gap between repeating what others have said and found out, and actually performing new qualitative research, is what makes all the difference. Being able to experience learnings firsthand allows people to really dig into subjects and deeply understand the trade-offs and decisions that led to solutions we use today. Part of researching a given topic consists of talking to international subject matter experts. Thanks to the open source community we get to work in, people are very approachable. It’s quite straightforward to get to know core committers, well-known architects or developer evangelists. Yet, the best way to really pick someone’s brain is to meet them face to face. JWorks facilitates this by sending our people to conferences and events around the world. San Francisco, New York, Seattle, London, Barcelona, Las Vegas, Austin, Berlin, Kiev, Riga, Paris, Amsterdam, Budapest, Casablanca, Frankfurt, Washington DC; only a few of the cities we’ve frequented during the past couple of years. We encourage people to take a couple days extra to enjoy the city and do some sight-seeing. Conveniently labelled “learning holidays”, this type of trips really create a community feeling inside the company. If people are having fun, they’ll be much more motivated to go the extra mile. Upon return, the accumulated knowledge gets put into good use by giving input in training material, creating blogposts with differentiating content or by helping to shape customers’ vision and facilitating technical decision-making. We also encourage people to be vocal about the things they love, by giving a workshop, speaking at internal events, or becoming a rock star speaker at international conferences. By becoming public speakers ourselves, we really get to know the nitty gritty details of whatever subject we’re talking about. Taking a seat at conferences’ speaker dinners also helps to network and enter the world of the greatest minds of our industry.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/jworks-culture.jpg" /></entry><entry><title type="html">Agile &amp;amp; DevOps Summit Brussels</title><link href="https://ordina-jworks.github.io/conference/2018/07/03/Agile-DevOps-Summit-Brussels.html" rel="alternate" type="text/html" title="Agile &amp; DevOps Summit Brussels" /><published>2018-07-03T00:00:00+00:00</published><updated>2018-07-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/07/03/Agile-DevOps-Summit-Brussels</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/07/03/Agile-DevOps-Summit-Brussels.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.agileglobalevent.com/conference/devops/agile-devops-summit-brussels&quot; target=&quot;_blank&quot;&gt;Agile &amp;amp; DevOps Summit Brussels&lt;/a&gt; is a one day conference on agile practices and DevOps.
In this post, I will take you along to the various talks that were attended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-is-not-only-for-it&quot;&gt;Agile is (not) only for IT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-maturity&quot;&gt;Agile Maturity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bring-agile-out-of-the-software-sector&quot;&gt;How to bring Agile out of software sector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-we-wished-we-knew-before-signing-up-for-agile-and-devops-transformation&quot;&gt;What we wished we knew before signing up for Agile and DevOps Transformation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spotify-becoming-the-new-xerox&quot;&gt;Is Spotify becoming the new Xerox?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;agile-is-not-only-for-it&quot;&gt;Agile is (not) only for IT&lt;/h3&gt;

&lt;p&gt;The talk started with explaining that all &lt;a href=&quot;http://agilemanifesto.org/principles.html&quot; target=&quot;_blank&quot;&gt;12 principles of the Agile Manifesto&lt;/a&gt; can be applied to all layers of the organization, it’s not only for the IT department (hence the title). The Agile Manifesto enables everyone to focus on the same objective and towards the same goals.&lt;/p&gt;

&lt;p&gt;In order to get everyone to focus, it’s important to know in what situation you are. To find out, you can use the &lt;a href=&quot;https://hbr.org/2007/11/a-leaders-framework-for-decision-making&quot; target=&quot;_blank&quot;&gt;Cynefin framework&lt;/a&gt;. This framework explains where you belong by differentiating between 4 different domains.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The different domains of the Cynefin framework&quot; src=&quot;/img/agile-devops-brussels-2018/cynefin.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Complex&lt;/strong&gt;: non-lineair, never complete.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Complicated&lt;/strong&gt;: analysis is needed, a lot of possibilities, multiple possible answers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chaotic&lt;/strong&gt;: take action, dynamic, nothing is the same.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Obvious&lt;/strong&gt;: predictable and repeatable, one or few answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To take a real example: ‘Planning a birthday party for your child’:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you leave the children all alone the entire afternoon, you have no idea what happens during your absence or what the state of your house will be when you return: &lt;strong&gt;Chaos&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you plan the entire afternoon, with a timetable, to ensure that everything happens as planned: &lt;strong&gt;Complicated&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If the children are obedient and don’t do anything wrong at all (not exactly realistic): &lt;strong&gt;Simple&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you set boundaries, rules, adjust continuously: &lt;strong&gt;Complex&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you’re in a complex situation, you can apply the agile principles.&lt;/p&gt;

&lt;p&gt;The other part of the talk was about the Agile Wave and how it affects other parts of your organization other than IT. If the IT department starts working according to the agile principles, there is always an impact on the other domains of your organization.
For instance, if you have a team that goes agile, there’s an impact on items like budget, bonuses, costs, collaboration, estimation and so on. So the other domains need to adapt as well.&lt;/p&gt;

&lt;p&gt;So agile is not only for IT because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Agile values and principles are applicable in all domains.&lt;/li&gt;
  &lt;li&gt;Agile helps dealing with complexity, which is present in all domains.&lt;/li&gt;
  &lt;li&gt;The roots of the agile principles originate from more domains than just the IT.&lt;/li&gt;
  &lt;li&gt;The agile journey of an organization impacts all layers, not just IT.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;agile-maturity&quot;&gt;Agile Maturity&lt;/h3&gt;

&lt;p&gt;The next talk’s subject was the issue of measuring agile maturity in an organization. 
Agile maturity can be answered with 3 questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why am I doing it?&lt;/li&gt;
  &lt;li&gt;What am I doing?&lt;/li&gt;
  &lt;li&gt;I am convinced about its outcome?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you can answer those 3 questions as an organization, you’re already far ahead of others in terms of agile maturity.&lt;/p&gt;

&lt;p&gt;To determine the maturity, discuss the following items:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt;: You should know the context of what you’re doing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Team&lt;/strong&gt;: What is your motto? Know your team to avoid turnover. Important values for a team: respect, trust and humility.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discipline&lt;/strong&gt;: Agile requires much discipline, such as timeboxing, estimating, communicating with the customer, collaborating and so on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;: Must be fast to react to changes. If it’s not, it blocks various agile processes. DevOps is obviously crucial as it will enable faster reaction times.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt;: Taking ownership of what you’re doing. Never shift responsibility to someone else.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bring-agile-out-of-the-software-sector&quot;&gt;Bring Agile out of the software sector&lt;/h3&gt;

&lt;p&gt;This talk touched the same subject as the first talk, but had a bigger emphasis on why an organization should shift towards agile.
There are some organizations that don’t like change, they’re not comfortable with it. Yet inevitably, everyone needs to adapt. In general, IT departments are used to change and quickly embrace it, but other departments might not.&lt;/p&gt;

&lt;p&gt;The biggest investment that will be needed when transitioning is people’s moods and behavior.  So it’s important to state why agile is useful and what the advantages are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Time to volume&lt;/strong&gt;: It’s easier to respond to changes in requirements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: People share and collaborate more, which decreases the amount of bottlenecks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engagement&lt;/strong&gt;: You can retain and attract more talent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process of change traditionally follows the &lt;a href=&quot;https://www.cleverism.com/understanding-kubler-ross-change-curve/&quot; target=&quot;_blank&quot;&gt;Kübler-Ross model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Kübler-Ross model&quot; src=&quot;/img/agile-devops-brussels-2018/kubler-ross-model.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-we-wished-we-knew-before-signing-up-for-agile-and-devops-transformation&quot;&gt;What we wished we knew before signing up for Agile and DevOps Transformation&lt;/h3&gt;

&lt;p&gt;Unlike the other talks, this one featured a panel discussion about what you should do if you want your Agile and DevOps transformation to fail. A discussion was had with 3 panel members and the rest of the audience.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Just rebrand your middle management&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;For example, instead of having a regular project manager, now you can have agile project managers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ignore resistance and feedback&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It doesn’t matter what your employees think, the management knows better.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discourage experimentation and fire bearers of bad news&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Employees shouldn’t be allowed to try new things and if it’s bad news, everyone should ignore it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t plan for productivity loss with new people&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;If you add new people to a team, the team should be more productive right away, right?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add all agile ceremonies on top of existing meetings&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;If we have more meetings, it means we’re discussing items and are productive.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do no take minutes, assign no actions&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Everyone remembers what was discussed and knows what to do, many days later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t take metrics&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;If we don’t see the problems, there aren’t any.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t measure anything apart from badging hours&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Obviously, there’s a direct correlation between badged hours and productivity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do DevOps with Ops&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It’s a fancy name.&lt;/li&gt;
      &lt;li&gt;Infrastructure should still be separate so it can be controlled.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create DevOps department to coordinate between Dev and Ops&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;More control and coordination is better&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ban teams from using their own tools&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Management knows best what tools their teams need, all teams need the exact same things.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To be clear, this list contains a fair bit of sarcasm.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;spotify-becoming-the-new-xerox&quot;&gt;Spotify becoming the new Xerox&lt;/h3&gt;

&lt;p&gt;The last talk I attended was a discussion about the agile model of Spotify that is becoming the new Xerox. The term ‘new Xerox’ is a reference to the generic trademark that Xerox became. When you talked about photocopies in the past, you would talk about Xerox as they were the leading organization in that area.
Other examples are Bic, Sharpie, Croc and so on.&lt;/p&gt;

&lt;p&gt;The speaker then started talking about the &lt;a href=&quot;https://medium.com/the-ready/how-to-build-your-own-spotify-model-dce98025d32f&quot; target=&quot;_blank&quot;&gt;agile model that Spotify uses&lt;/a&gt; in &lt;em&gt;The Good, The Bad and The Ugly&lt;/em&gt; terms.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Spotify agile model&quot; src=&quot;/img/agile-devops-brussels-2018/spotify.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-good&quot;&gt;The Good&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;It helps to maintain a team’s autonomy and keep the various teams aligned.&lt;/li&gt;
  &lt;li&gt;It helps to scale agile by using the concept of tribes, chapters, guilds, squads and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-bad&quot;&gt;The Bad&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;It’s a mistake that it’s called a model. It’s an engineering culture which typically cannot be mapped one-on-one to another organization.&lt;/li&gt;
  &lt;li&gt;It was released 6 years ago, which is ancient in agile terms. It has evolved and might be completely different now.&lt;/li&gt;
  &lt;li&gt;It doesn’t talk about management nor budgets. While agile is less concerned about this, it should still be mentioned if you want the management to follow.&lt;/li&gt;
  &lt;li&gt;The context that was used by Spotify while creating this model is not the same as the context that is present in your organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-ugly&quot;&gt;The Ugly&lt;/h5&gt;

&lt;p&gt;The terminology that Spotify uses has some issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tribes&lt;/strong&gt;: it sounds primitive.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Squad&lt;/strong&gt;: it sounds military.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Guild&lt;/strong&gt;: it’s a blocked evolution from medieval times.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To complete the talk, he explained the acronym CALMS that is used for DevOps transformations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;: Culture
    &lt;ul&gt;
      &lt;li&gt;Empower your teams.&lt;/li&gt;
      &lt;li&gt;Roles should be used instead of functions.&lt;/li&gt;
      &lt;li&gt;T-profiles are the way to go.&lt;/li&gt;
      &lt;li&gt;Failure should be allowed as long as you learn from your mistakes.&lt;/li&gt;
      &lt;li&gt;Work together with the business to achieve the desired product.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Automation
    &lt;ul&gt;
      &lt;li&gt;Everything is code (config, code, tests and so on) and in the pipeline.&lt;/li&gt;
      &lt;li&gt;Pay attention to things that can go wrong.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;: Lean principles
    &lt;ul&gt;
      &lt;li&gt;Constant flow of small changes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: Measure to improve
    &lt;ul&gt;
      &lt;li&gt;Inspect and Adapt.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: Sharing
    &lt;ul&gt;
      &lt;li&gt;Learning from your peers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wouter&quot;, &quot;last_name&quot;=&gt;&quot;Nivelle&quot;, &quot;permalink&quot;=&gt;&quot;/author/wouter-nivelle/&quot;, &quot;avatar&quot;=&gt;&quot;wouter-nivelle.jpg&quot;, &quot;title&quot;=&gt;&quot;Scrum Master&quot;, &quot;linkedin&quot;=&gt;&quot;wouter-nivelle-34a90b31&quot;, &quot;email&quot;=&gt;&quot;wouter.nivelle@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wouter is a Scrum Master at Ordina Belgium. Passionate about agile. Eager to share knowledge. Not afraid of challenges. Always interested in learning and discovering new things.&quot;}</name><email>wouter.nivelle@ordina.be</email></author><category term="Conference" /><category term="Agile" /><category term="Scrum" /><category term="DevOps" /><summary type="html">Agile &amp;amp; DevOps Summit Brussels is a one day conference on agile practices and DevOps. In this post, I will take you along to the various talks that were attended.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/agile-devops-brussels-2018/agile-devops.png" /></entry><entry><title type="html">ViroReact: Build cross-platform AR/VR applications for Android and iOS using React</title><link href="https://ordina-jworks.github.io/iot/2018/06/27/viroreact.html" rel="alternate" type="text/html" title="ViroReact: Build cross-platform AR/VR applications for Android and iOS using React" /><published>2018-06-27T00:00:00+00:00</published><updated>2018-06-27T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2018/06/27/viroreact</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2018/06/27/viroreact.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basics-of-viroreact&quot;&gt;Basics of ViroReact&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo-application&quot;&gt;Demo app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lessons-learned-and-conclusion&quot;&gt;Lessons learned and conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-resources&quot;&gt;Extra resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Augmented Reality is a very interesting space so naturally, we wanted to do something with it.
There are many frameworks available for building cross-platform AR/VR applications.
We came across ViroReact which uses React and React Native to create immersive VR and AR applications using a single codebase for Android and iOS.
This persuaded us to give it a try.
In one day, with some tweaking afterwards, we were able to create a simple app to show the status of a meeting room.&lt;/p&gt;

&lt;h2 id=&quot;basics-of-viroreact&quot;&gt;Basics of ViroReact&lt;/h2&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;p&gt;The main building blocks of a ViroReact app are the components.&lt;/p&gt;

&lt;h4 id=&quot;the-most-important-component-is-a-scene&quot;&gt;The most important component is a Scene&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.viromedia.com/docs/scenes&quot;&gt;scene&lt;/a&gt; is the digital environment the user interacts with.
All other components live in this scene.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroScene&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroARScene&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just like many other components, the Scene comes in two variations: &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroScene&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroARScene&lt;/code&gt;.
As the name suggests &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroARScene&lt;/code&gt; is used for Augmented Reality applications
while the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroScene&lt;/code&gt; is meant for Virtual Reality.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/scene-navigation&quot;&gt;ViroSceneNavigator&lt;/a&gt; is used to navigate between these scenes.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroSceneNavigator&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroARSceneNavigator&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The SceneNavigator holds a stack of scenes to enable simple transitions from one scene to the next or previous scene.&lt;/p&gt;

&lt;h4 id=&quot;these-scenes-can-be-populated-with-all-kinds-of-components&quot;&gt;These scenes can be populated with all kinds of components&lt;/h4&gt;
&lt;p&gt;For example a &lt;a href=&quot;https://docs.viromedia.com/docs/virotext2&quot;&gt;ViroText&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroText&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,0,-5]}&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ff0000&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or perhaps a &lt;a href=&quot;https://docs.viromedia.com/docs/virobox&quot;&gt;ViroBox&lt;/a&gt;, a &lt;a href=&quot;https://docs.viromedia.com/docs/viroquad&quot;&gt;ViroQuad&lt;/a&gt; or a &lt;a href=&quot;https://docs.viromedia.com/docs/virosphere&quot;&gt;ViroSphere&lt;/a&gt;.&lt;br /&gt;
These components can be modified by setting their properties.
One of the most important properties is the position.
It takes an array of three numbers as the x, y and z coordinates.&lt;/p&gt;

&lt;h4 id=&quot;there-are-also-more-specialised-components&quot;&gt;There are also more specialised components&lt;/h4&gt;
&lt;p&gt;Like a &lt;a href=&quot;https://docs.viromedia.com/docs/viro3dobject&quot;&gt;Viro3DObject&lt;/a&gt; which lets you include custom made 3D objects in your scene.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Viro3DObject&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{require(&quot;./res/spaceship.obj&quot;)}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OBJ&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;resources=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[require('./res/spaceship.mtl'),&lt;/span&gt;
		&lt;span class=&quot;err&quot;&gt;require('./res/texture1.jpg')]}&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[1,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;3,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-5]}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[2,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2]}&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;rotation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[45,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;transformBehaviors=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[&quot;billboard&quot;]}/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These 3D objects can be created in your favourite 3D modelling tools.
ViroReact supports OBJ or VRX (converted from FBX) formats.
The billboard transform behaviour is an interesting feature to make sure the object is always facing the user.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/viro360image&quot;&gt;Viro360Image&lt;/a&gt; can be set as the background of a scene.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/viroportal&quot;&gt;ViroPortal&lt;/a&gt; lets the user take a peek into a different scene.
It basically is a window to another world.
The Viro3DObject included in it acts like the window frame.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/viroarimagemarker&quot;&gt;ViroARImageMarker&lt;/a&gt; reacts when one of the ViroARTrackingTargets is scanned.
It will show all the components inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroARImageMarker&lt;/code&gt; tag.
We have used this in our little app, more on that &lt;a href=&quot;#demo-application&quot;&gt;below&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroARImageMarker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&quot;targetOne&quot;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroBox&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0.25,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scale=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0.5,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0.5,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0.5]}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ViroARImageMarker&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ViroARTrackingTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;targetOne&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./res/targetOne.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;orientation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;physicalWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// real world width in meters&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;we-wouldnt-see-anything-without-eyes-and-light&quot;&gt;We wouldn’t see anything without eyes and light&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.viromedia.com/docs/camera&quot;&gt;Camera&lt;/a&gt; component is our eyes.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroCamera&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rotation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[45,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0])&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;active=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{true}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A default camera is provided at the origin &lt;code class=&quot;highlighter-rouge&quot;&gt;position={[0, 0, 0]}&lt;/code&gt;.
The camera always looks in the negative Z direction.
So if you want an object to be visible as soon as the scene loads up, 
make sure to set its position with a negative Z value &lt;code class=&quot;highlighter-rouge&quot;&gt;position={[0, 0, -5]}&lt;/code&gt;. 
If the object would have a positive Z value it would be placed behind you when you load up the scene.
There is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;ViroOrbitCamera&lt;/code&gt; where the camera orbits around a certain position, always keeping it in view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.viromedia.com/docs/3d-scene-lighting&quot;&gt;Lights&lt;/a&gt; are very important components in a scene.
Without any light, the user wouldn’t see anything.
Luckily a default light is provided when none is defined.
We didn’t need lights in our setup but if you want a more realistic or visually stunning experience, 
I highly recommend you to look into the different lights in the &lt;a href=&quot;https://docs.viromedia.com/v2.6.1/docs/3d-scene-lighting&quot;&gt;documentation&lt;/a&gt;.&lt;br /&gt;
There are four lighting models: Phong, Blinn, Lambert and Constant.&lt;br /&gt;
These are the algorithms that calculate what your objects will look like when influenced by light.
By default, elements use the Constant lighting model, which means lights will be ignored and the object will show its full color.&lt;br /&gt;
ViroReact supports four types of light.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.viromedia.com/docs/viroambientlight&quot;&gt;ViroAmbientLight&lt;/a&gt; is the simplest light.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroAmbientLight&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It lights up all the objects in the scene equally from every direction.
Only the color needs to be set.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/viroomnilight&quot;&gt;ViroOmniLight&lt;/a&gt; is comparable to a light bulb.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroOmniLight&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attenuationStartDistance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attenuationEndDistance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{6}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,-5,5]}&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The light originates from a specified position and moves in all directions.
The light slowly fades out if the distance is between 2 and 6, set in the attenuation properties.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.viromedia.com/docs/virospotlight1&quot;&gt;ViroSpotLight&lt;/a&gt; is comparable to a flashlight.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroSpotLight&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attenuationStartDistance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attenuationEndDistance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{6}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-5,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;5]}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;direction=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-1,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;innerAngle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{0}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;outerAngle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{45}&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The light originates from a single point and shines in a cone.
The direction and angle of the cone can be set as well as the attenuation start and end distances.
Some other properties are available to create the shadows you want.&lt;/p&gt;

&lt;p&gt;The last type of light is the &lt;a href=&quot;https://docs.viromedia.com/docs/virodirectionallight-1&quot;&gt;ViroDirectionalLight&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroDirectionalLight&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;direction=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-1,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The sun would be the prime example of a ViroDirectionalLight.
It shines over the whole scene in a specific direction.&lt;/p&gt;

&lt;h4 id=&quot;to-make-these-objects-look-good-we-need-materials&quot;&gt;To make these objects look good we need Materials&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://viro.readme.io/docs/3d-scene-lighting&quot;&gt;Materials&lt;/a&gt; are used to place texture images on 3d objects.
They can make a long box look like a brick wall or a sphere look like our planet.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ViroMaterials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createMaterials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;earth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;shininess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;lightingModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Lambert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;diffuseTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./res/earth_texture.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are many properties available for materials.
Discussing all of these is outside the scope of this article.
The diffuseColor and diffuseTexture are the main color and texture of the material.
These can be placed on basic 3D objects like ViroBox, ViroQuad and ViroSphere.
Complex Viro3DObjects can have multiple materials.&lt;/p&gt;

&lt;h4 id=&quot;move-them-around-with-animations&quot;&gt;Move them around with Animations&lt;/h4&gt;
&lt;p&gt;Our scenes are still lacking motion.
That’s where &lt;a href=&quot;https://docs.viromedia.com/docs/animation&quot;&gt;animations&lt;/a&gt; come in handy.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ViroAnimations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerAnimations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;animateImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scaleY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				  &lt;span class=&quot;na&quot;&gt;easing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bounce&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroImage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{require('./res/myimage.jpg')}&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-1,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-2]}&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;animation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Animations change the numerical value of properties over time.
Typically this is used for the position and scale properties but it can just as well be used for color values or other numerical values.
There are five easing types: Linear, EaseIn, EaseOut, EaseInEaseOut and Bounce.
These represent how the values change over time.&lt;/p&gt;

&lt;h4 id=&quot;control-the-scene-with-a-virocontroller&quot;&gt;Control the scene with a ViroController&lt;/h4&gt;
&lt;p&gt;With all of the above, we can create an awesome scene but we can’t interact with it yet. 
The &lt;a href=&quot;https://docs.viromedia.com/docs/virocontroller&quot;&gt;ViroController&lt;/a&gt; provides us the ability to interact with our scene.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroController&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;reticleVisibility=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{true}&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;controllerVisibility=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{true}&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this._onClickListenerForAllEvents}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With the reticle (the blue circle in the middle of the view) the user can select and point to objects and call the function in the onClick property.
It’s also possible to use other events like onHover, onTouch, onSwipe, onPinch, onScroll, etc…
These events are very useful for UI.&lt;/p&gt;

&lt;h4 id=&quot;there-are-many-more-fun-components&quot;&gt;There are many more fun components&lt;/h4&gt;
&lt;p&gt;Apart from the ones we mentioned here, there are many more fun components to include &lt;a href=&quot;http://viro.readme.io/docs/video&quot;&gt;video&lt;/a&gt;, &lt;a href=&quot;http://viro.readme.io/docs/audio&quot;&gt;sound&lt;/a&gt; and &lt;a href=&quot;http://viro.readme.io/docs/particle-effects&quot;&gt;particles&lt;/a&gt; in your scene.
They follow the same principles but each have their own properties.
This being built on React Native we can also declare our own components of course!&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroText&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;CustomComponent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;customProperty=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{42}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just extend from Component, define your properties in propTypes and use it in your scenes.
In our demo application, we used this to create our scene but you can create small reusable components too of course!&lt;/p&gt;

&lt;h2 id=&quot;demo-application&quot;&gt;Demo application&lt;/h2&gt;
&lt;p&gt;Before you can build a ViroReact application you need to &lt;a href=&quot;https://viromedia.com/signup&quot;&gt;request an API key from ViroMedia&lt;/a&gt;.
This should not take more than a few minutes.&lt;/p&gt;

&lt;p&gt;For our demo application, we decided to use meeting rooms as a use case.
Since ViroReact is advertised as a framework for rapidly building AR / VR applications, we wanted to put this statement to the test and try to create an application in one day with no knowledge of the framework at all.&lt;/p&gt;

&lt;h3 id=&quot;use-case-meeting-room-status-viewer&quot;&gt;Use Case: Meeting room status viewer&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/img/2018-06-26-viroreact/app-scan.png&quot; data-lightbox=&quot;app-scan&quot; data-title=&quot;meeting-room-viewer-app-foto&quot;&gt;
    &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-06-26-viroreact/mr-door.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes people want to have a quick meeting or Skype call. 
They might be standing or passing by a meeting room, 
and have the ability to immediately check if the meeting room is available for the next 30 minutes.&lt;/p&gt;

&lt;p&gt;We created an application where the user can view the status of a meeting room in Augmented Reality by scanning the room name/picture.&lt;/p&gt;

&lt;p&gt;We used &lt;a href=&quot;https://docs.viromedia.com/docs/ar-image-recognition&quot;&gt;Image Recognition in ViroReact&lt;/a&gt; to achieve this.&lt;/p&gt;

&lt;p&gt;Aside from the Image Recognition, we were also curious how ViroReact handles&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP requests&lt;/li&gt;
  &lt;li&gt;UI Updates&lt;/li&gt;
  &lt;li&gt;User interaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, I created three applications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A backend application for holding meeting room state (NestJS)&lt;/li&gt;
  &lt;li&gt;A client application for changing the state of a meeting room (Ionic PWA)&lt;/li&gt;
  &lt;li&gt;A client application for viewing the state of a meeting room (ViroReact)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this blogpost, I will only discuss how we created the ViroReact application.&lt;/p&gt;

&lt;h3 id=&quot;the-ar-meeting-room-viewer-viroreact&quot;&gt;The AR Meeting room viewer (ViroReact)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/img/2018-06-26-viroreact/app-scan.png&quot; data-lightbox=&quot;app-scan&quot; data-title=&quot;meeting-room-viewer-app-foto&quot;&gt;
    &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-06-26-viroreact/app-scan.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ViroReact is built on top of React, so basic knowledge of React is necessary. 
To get started, you can follow this great free beginner guide by Kent C. Dodds at egghead.io 
&lt;a href=&quot;https://egghead.io/courses/the-beginner-s-guide-to-react.&quot;&gt;The beginner’s guide to React&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-1-project-setup&quot;&gt;Step 1: Project setup&lt;/h4&gt;
&lt;p&gt;We began by following the Official &lt;a href=&quot;https://docs.viromedia.com/v2.7.3/docs/quick-start&quot;&gt;Quick Start guide from ViroMedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;a href=&quot;https://www.npmjs.com/package/react-viro&quot;&gt;react-viro CLI&lt;/a&gt;, we generated a ViroSample project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-viro init ARMeetingRoomViewer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-2-create-an-ar-scene-for-viewing-the-status-of-a-meeting-room&quot;&gt;Step 2: Create an AR scene for viewing the status of a meeting room.&lt;/h4&gt;
&lt;p&gt;To be able to scan the meeting room we needed a picture of the meeting room nameplate, 
this will act as the marker to scan the meeting room information.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/2018-06-26-viroreact/m07-image-marker.png&quot; data-lightbox=&quot;m07&quot; data-title=&quot;meeting-room-viewer-app-foto&quot;&gt;
    &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-06-26-viroreact/m07-image-marker.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I placed the marker image inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;**/js/res**&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Because the file extension was in capital letters (.JPG), 
I had to configure this extension in the &lt;code class=&quot;highlighter-rouge&quot;&gt;rn-cli.config.js&lt;/code&gt; file inside of the root folder.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;getAssetExts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;obj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mtl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JPG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vrx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hdr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I created the actual scene in a file called &lt;strong&gt;markerscene.js&lt;/strong&gt; in the &lt;strong&gt;/js/&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;To be able to scan the image marker, we need two important APIs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.viromedia.com/v2.7.3/docs/viroartrackingtargets&quot;&gt;ViroARTrackingTargets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.viromedia.com/v2.7.3/docs/viroarimagemarker&quot;&gt;ViroARImageMarker&lt;/a&gt; component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the scene initialises we need to setup the Tracking Target(our image marker)
&lt;strong&gt;mr7&lt;/strong&gt; refers to a meeting room name.&lt;/p&gt;

&lt;p&gt;We call this method inside of the constructor.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;setMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ViroARTrackingTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;mr7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./res/mr7.JPG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;physicalWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we need to define what to render. 
The root component will be an AR Scene:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroARScene&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onAnchorFound=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this._getInfo}&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this._getInfo}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ViroARScene&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We bind two events on the ViroARScene component, onAnchorFound and onClick. 
Every time one of these events occurs, we want to fetch the latest meeting room state.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onAnchorFound&lt;/code&gt; gets called when the Image Marker has been detected.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://rooms.meeting/rm7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;isAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Next meeting: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Free @ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Available`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Not Available'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the scene, we want to display the meeting room data when the Image Marker is scanned.
We need to use the ViroReact ImageMarker component for this.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroARImageMarker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&quot;mr7&quot;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroFlexView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this.state.isAvailable&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;styles.containerAvail&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;styles.containerNotAvail}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{3}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{3}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1.25]}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;rotation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[-100,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroText&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this.state.text}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{styles.text}/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ViroText&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this.state.nextMeeting}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[0,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-1,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0]}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2.5}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{2}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{styles.nextMeeting}/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ViroFlexView&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ViroARImageMarker&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;ViroARImageMarker&lt;/strong&gt; component has a target “mr7” assigned.
This refers to the &lt;strong&gt;ViroARTrackingTarget&lt;/strong&gt; we defined in the &lt;strong&gt;setMarker()&lt;/strong&gt; method above.&lt;/p&gt;

&lt;p&gt;When the target is successfully scanned, all the content of the ViroARImageMarker component will be rendered.
In our case, two TextViews positioned with a FlexView.&lt;/p&gt;

&lt;p&gt;We bind the data we fetched from in our &lt;code class=&quot;highlighter-rouge&quot;&gt;getInfo()&lt;/code&gt; method to the ViroText and ViroFlexView components.&lt;/p&gt;

&lt;p&gt;And these are the styles we defined for the ViroText and ViroFlexView.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;containerAvail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flexDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#E98300&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;containerNotAvail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flexDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#e91530&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our final scene&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroARScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroARTrackingTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroARImageMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ViroFlexView&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-viro'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkerScene&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set initial state here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initializing AR...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;isAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;setMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ViroARTrackingTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;mr7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./res/mr7.JPG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;physicalWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroARScene&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAnchorFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroARImageMarker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mr7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroFlexView&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containerAvail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containerNotAvail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroText&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroText&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ViroFlexView&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ViroARImageMarker&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ViroARScene&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://rooms.meeting/rm7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAvailable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;isAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Next meeting: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Free @ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;h`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTrueSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Available`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Not Available'&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nextMeeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;containerAvail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flexDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#E98300&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;containerNotAvail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flexDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#e91530&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkerScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3-load-your-marker-scene-on-application-startup&quot;&gt;Step 3: Load your marker scene on application startup&lt;/h4&gt;

&lt;p&gt;Now that we have our scene, we can load it on start-up.
In the root folder you can find the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file.
Here we can define which scene to load when starting up the application.&lt;/p&gt;

&lt;p&gt;Assign your API key from ViroMedia.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sharedProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6E2805CC-xxxx-4Ex0-8xx0-02xxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Import your marker scene.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkerScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./js/MarkerScene'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Render your AR Scene.&lt;/p&gt;

&lt;p&gt;Final result:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroARSceneNavigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-viro'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sharedProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6E2805CC-xxxx-4Ex0-8xx0-02xxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkerScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./js/MarkerScene'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViroSample&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sharedProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sharedProps&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getARNavigator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getARNavigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_getARNavigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;_getARNavigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViroARSceneNavigator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sharedProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;initialScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViroSample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/KJvIwv86Hv0&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/3kvDbDxIqdA&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned-and-conclusion&quot;&gt;Lessons learned and conclusion&lt;/h2&gt;
&lt;p&gt;Without prior knowledge it was a bit challenging for us to get our development environment set up correctly.
We had a lot of issues with debugging and cached builds. 
When we had issues, it was hard to tell if the problem was with React Native or ViroReact.&lt;/p&gt;

&lt;p&gt;Debugging was a big challenge for us and the react native development tools don’t seem to work well with ViroReact.
The documentation is quite expansive but it was not always up-to-date.&lt;/p&gt;

&lt;p&gt;But aside from that, once we were aware of which parts of the dev tools that worked and which ones that didn’t, we were able to quickly build an AR application.&lt;/p&gt;

&lt;h2 id=&quot;extra-resources&quot;&gt;Extra resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/iot/2017/12/20/Virtual-Reality.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;An introduction to virtual and alternate reality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.viromedia.com/docs/viro-platform-overview&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/viromedia/viro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sample applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/the-beginner-s-guide-to-react&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Beginner’s guide to React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ryan&quot;, &quot;last_name&quot;=&gt;&quot;de Gruyter&quot;, &quot;github&quot;=&gt;&quot;ryandegruyter&quot;, &quot;linkedin&quot;=&gt;&quot;ryandg&quot;, &quot;permalink&quot;=&gt;&quot;/author/ryan-de-gruyter/&quot;, &quot;avatar&quot;=&gt;&quot;ryan-de-gruyter.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ryan.degruyter@ordina.be&quot;, &quot;phone&quot;=&gt;32479079468, &quot;bio&quot;=&gt;&quot;Ryan is a frontend developer and interaction designer. He enjoys writing clean code and building maintainable, user friendly web applications in Typescript and Javascript. He also has a strong interest in motion design and UI/UX. In his spare time, he practices martial arts and enjoys playing the guitar.&quot;}</name><email>ryan.degruyter@ordina.be</email></author><category term="IoT" /><category term="React" /><category term="React Native" /><category term="ViroReact" /><category term="Virtual reality" /><category term="VR" /><category term="Augmented reality" /><category term="AR" /><category term="Mixed reality" /><category term="MR" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-06-26-viroreact/viroreact.jpg" /></entry><entry><title type="html">Craft Conf 2018</title><link href="https://ordina-jworks.github.io/conference/2018/06/27/Craft-Conf.html" rel="alternate" type="text/html" title="Craft Conf 2018" /><published>2018-06-27T00:00:00+00:00</published><updated>2018-06-27T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/06/27/Craft-Conf</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/06/27/Craft-Conf.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://craft-conf.com/&quot; target=&quot;_blank&quot;&gt;Craft Conf&lt;/a&gt; is a two day conference in Budapest, aimed at talks surrounding the ‘Software as a craftsmanship’ idea.
JWorks was present this year on the 10th and 11th of May and we would love to give you an overview of some of the talks we attended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#power-games-for-high-performance-team-culture-psychological-safety-and-ei---richard-kasperowski&quot;&gt;Power Games for High-performance Team Culture, Psychological Safety, and EI - Richard Kasperowski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#perceived-performance-the-only-kind-that-really-matters---eli-fitch&quot;&gt;Perceived performance: The only kind that really matters - Eli Fitch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#swarming-scaling-without-a-religious-methodology---dan-north&quot;&gt;SWARMing: Scaling Without A Religious Methodology - Dan North&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#seven-plusminus-two-ways-your-brain-screws-you-up---joseph-pelrine--jasmine-zahno&quot;&gt;Seven (plus/minus two) ways your brain screws you up - Joseph Pelrine &amp;amp; Jasmine Zahno&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#designing-a-high-performing-team---alison-coward&quot;&gt;Designing a high-performing team - Alison Coward&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#estimates-or-noestimates-lets-explore-the-possibilities---woody-zuill&quot;&gt;Estimates or NoEstimates: Let’s explore the possibilities - Woody Zuill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;power-games-for-high-performance-team-culture-psychological-safety-and-ei---richard-kasperowski&quot;&gt;Power Games for High-performance Team Culture, Psychological Safety, and EI - Richard Kasperowski&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Richard Kasperowski&quot; src=&quot;/img/craft-conf-2018/Richard-Kasperowski.jpeg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/rkasper&quot; target=&quot;_blank&quot;&gt;Richard Kasperowski&lt;/a&gt; is a speaker, trainer, coach and author focused on high performance teams.
Richard is the author of The Core Protocols: A Guide to Greatness.
He leads clients in building great teams that get great results using the Core Protocols, Agile, and Open Space Technology.&lt;/p&gt;

&lt;p&gt;During this talk, Richard provides an overview of some of the conditions that need to be met for the team to become a high performance team.
In order for this to happen, it’s very important that companies realize that they need to focus on getting the right people together instead of focusing on achievements.&lt;/p&gt;

&lt;h3 id=&quot;hierarchy-and-power-distance&quot;&gt;Hierarchy and power distance&lt;/h3&gt;
&lt;p&gt;A company needs to achieve the best possible team culture.
But what does this mean?&lt;/p&gt;

&lt;h4 id=&quot;what-is-culture&quot;&gt;What is culture?&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The collective programming of the mind which distinguishes the members of one group or category of people from another. - Geert Hofstede&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Richard talks about six different culture dimensions, researched by Geert Hofstede:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Power distance&lt;/strong&gt;:
Expresses the degree to which the less powerful members of a society accept and expect that power is distributed unequally.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Individualism versus collectivism&lt;/strong&gt;:
Individualism can be defined as a preference for a loosely-knit social framework in which individuals are expected to take care of only themselves and their immediate families.
Collectivism, however, represents a preference for a tightly-knit social framework in which individuals can expect their relatives or members of a particular group to look after them in exchange for loyalty.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Masculinity versus femininity&lt;/strong&gt;:
The masculinity side of this dimension represents a preference in society for achievement, heroism, assertiveness and material rewards for success.
This society is more competitive.
Its opposite, femininity, stands for a preference for cooperation, modesty, caring for the weak and quality of life.
This society is more consensus-oriented.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Uncertainty avoidance&lt;/strong&gt;:
This dimension expresses the degree to which the members of a society feel uncomfortable with uncertainty and ambiguity.
The big issue here is how a society deals with the fact that the future can never be known: should we try to control the future or just let it happen?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Long term orientation&lt;/strong&gt;:
Every society has to maintain some links with its own past while dealing with the challenges of the present and the future.
Societies who score low on this dimension prefer to maintain time-honoured traditions while viewing change within the society with suspicion.
Those with a culture which scores high, on the other hand, take a more pragmatic approach: they encourage efforts in modern education as a way to prepare for the future.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Indulgence versus restraint&lt;/strong&gt;:
Indulgence stands for a society that allows enjoyment of basic and natural human drives related to enjoying life and having fun.
Restraint stands for a society that suppresses enjoyment of needs and regulates it by means of strict social norms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The talk further focuses specifically on the power distance dimension.&lt;/p&gt;

&lt;h4 id=&quot;power-distance&quot;&gt;Power distance&lt;/h4&gt;
&lt;p&gt;Power distance entails hierarchy, the gaps between people in the company.
A lot of power distance means a lot of hierarchy.&lt;/p&gt;

&lt;p&gt;Next, we did some activities that let us experience hierarchy.
The first one was with a partner of our choice where one of us was the ‘leader’ and the other was the mirror.
Naturally, the mirror had to imitate everything the leader did.&lt;/p&gt;

&lt;p&gt;For the next exercise one of the two persons was again the leader, but now the other person had to keep his or her nose at a distance of 10 centimeters from the palm of the hand of the leader at all times.&lt;/p&gt;

&lt;p&gt;The last exercise was with a few volunteers from the audience where one person played the CEO, a few people played the Senior Vice Presidents and some people played the Vice Presidents.
The CEO stood in the middle of the room and directed the SVPs, the SVPs directed the VPs.
The people who were being directed were again said to keep their noses at a distance of 10 centimeters from the palm of the hand of the person that directed them.&lt;/p&gt;

&lt;p&gt;These were very interesting activities that showed that having too much hierarchy and people who direct other people can lead to chaos when for example the leaders moved too fast for the others to be able to follow the directions.
Directions are much easier to handle when there are less people involved and more trust is created.&lt;/p&gt;

&lt;h4 id=&quot;what-do-we-need-to-build-a-high-performance-team&quot;&gt;What do we need to build a high performance team?&lt;/h4&gt;
&lt;p&gt;At the core, there are six building blocks for high performance teams:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Positive bias&lt;/strong&gt;: Non-negativity, accept a positive mindset&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Freedom&lt;/strong&gt;: Every team member can choose and make decisions by themselves&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Self awareness&lt;/strong&gt;: Listen to yourself, use check-ins to discover, articulate and achieve what you want&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Connection&lt;/strong&gt;: Listen to others, connect great people into a great team and support each other towards a common goal&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Productivity&lt;/strong&gt;: Focus on results&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error handling&lt;/strong&gt;: Ensure we are maintaining the positive bias, freedom, self-awareness, connection and productivity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hierarchy and power culture erode high performance so when setting up and trying to maintain a high performance team, these building blocks are essential.
To achieve high performance, increase the team’s emotional intelligence and psychological safety.
This will decrease power distance and hierarchy.
The Core Protocols are a way to reach this goal.&lt;/p&gt;

&lt;p&gt;More info on the Core Protocols can be found &lt;a href=&quot;https://www.greatnessguild.org/tcp/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;perceived-performance-the-only-kind-that-really-matters---eli-fitch&quot;&gt;Perceived performance: The only kind that really matters - Eli Fitch&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Eli Fitch&quot; src=&quot;/img/craft-conf-2018/Eli-Fitch.jpeg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/EliFitch&quot; target=&quot;_blank&quot;&gt;Eli Fitch&lt;/a&gt; is a frontend developer with a passion for web performance, animation and all things 3D.&lt;/p&gt;

&lt;p&gt;When talking about performance, we need to account for both objective time and subjective time.
Usually, we tend to optimize for objective time by using tools like lazy loading.
But how feasible is this?&lt;/p&gt;

&lt;p&gt;Even a 20% increase in objective speed is unnoticeable to the user.
So we have to aim for an increase of 30% or even more.
Of course this is not easy at all, especially when taking into account that when working with multiple teams (possibly over different time zones), all the teams have to align on this.&lt;/p&gt;

&lt;p&gt;So how do we get the user to perceive an increase of performance?
&lt;strong&gt;We focus on the subjective time!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;active-vs-passive-phase&quot;&gt;Active vs passive phase:&lt;/h3&gt;

&lt;p&gt;What does a passive phase entail?
Our passive phase kicks in when we are waiting for something to happen, say for our water to boil.
Time spent in passive phases feels ~36% slower!&lt;br /&gt;
There are two ways to prevent users from getting bored during a passive phase and keeping them interested enough to wait:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep users in an active state&lt;/li&gt;
  &lt;li&gt;Make passive states feel faster&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-do-we-keep-users-in-an-active-state&quot;&gt;How do we keep users in an active state?&lt;/h4&gt;
&lt;p&gt;There are three ways to achieve this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t tell users they’re waiting: Use loaders wisely because they can prematurely put users in a passive state&lt;/li&gt;
  &lt;li&gt;Respond to users immediately, even if nothing is happening&lt;/li&gt;
  &lt;li&gt;Keep users in flow with more responsive event listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To respond to the users immediately, we can implement an optimistic UI.
99% of requests succeed so why not take advantage of this by &lt;em&gt;first&lt;/em&gt; updating the UI and only then doing the actual request.&lt;/p&gt;

&lt;p&gt;We can also do our best to react as soon as the user signals intent.
For example, why use the &lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt; event when the &lt;code class=&quot;highlighter-rouge&quot;&gt;onmousedown&lt;/code&gt; event exists as it shows intent much earlier?
This will provide you with a nice 100-150 millisecond head start.
This is also usable on touch devices.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;:active&lt;/code&gt; animations also buy you more time.
An animation that lasts ~200 milliseconds will provide you with 50 milliseconds extra time keeping the user in an active state.&lt;/p&gt;

&lt;h4 id=&quot;onto-topic-two-how-to-unsuck-passive-states&quot;&gt;Onto topic two: how to ‘unsuck’ passive states.&lt;/h4&gt;
&lt;p&gt;A wait of 1-4 seconds is long enough to lose people’s interest.
There are three ways of preventive loss of interest:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the right loading animation&lt;/li&gt;
  &lt;li&gt;Adapt the loading scheme to the user&lt;/li&gt;
  &lt;li&gt;Distract with shiny objects!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uncertain waits feel longer so make sure to use progress bars and loading animations when appropriate.
For example: bands with accelerating bars feel 12% faster!&lt;/p&gt;

&lt;p&gt;What about spinners?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Meh” - Eli Fitch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Less than ~1 second wait: Don’t indicate loading&lt;/li&gt;
  &lt;li&gt;More than ~2 second wait: Use progress bars!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spinners are only useful between a 1 second and 2 second wait.&lt;/p&gt;

&lt;p&gt;Don’t forget that most progress bars are fake!
This is due to the connection differences between the user’s connection and the backend.
However, we can use adaptive loading.
Measure the actual requests done!
You do need baseline times to know how long to &lt;em&gt;expect&lt;/em&gt; it to run.
Of course this needs to be normalized for the resource or payload that needs to load.
Again, adapt the loading scheme to the user that is requesting data.
For example, you can check the user’s connection to give him a personally optimized experience.&lt;/p&gt;

&lt;p&gt;We can also learn a lot from game developers.
Remember FIFA who made you play a mini football game while loading the game in the background?&lt;/p&gt;

&lt;h3 id=&quot;predictive-preloading&quot;&gt;Predictive preloading:&lt;/h3&gt;
&lt;p&gt;What if we could predict the user’s intent?
One easy to setup option is to start loading the app and data in the background when a user has just started entering credentials in a login form.
This quick win will give you a 4 second head start!&lt;/p&gt;

&lt;p&gt;Another option is to exploit behavioural quirks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;People tend to watch hover animations: Fancy hovers buy you ± 600 millisecond extra time&lt;/li&gt;
  &lt;li&gt;People slow down when approaching the target: Load on mouse deceleration!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When combining above two techniques (hover animation + futurelink) we can get a ± 1.5 second head start.
But: &lt;strong&gt;Use predictive preloading wisely!&lt;/strong&gt;
You &lt;em&gt;will&lt;/em&gt; get it wrong some of the time. Do some dry runs first and try to mitigate risk by using metrics to improve.&lt;/p&gt;

&lt;h3 id=&quot;a-quick-summary&quot;&gt;A quick summary&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Perceived performance is low hanging fruit since you can provide the user with immediate, accurate and live feedback&lt;/li&gt;
  &lt;li&gt;Tailor your loading solution to individual users&lt;/li&gt;
  &lt;li&gt;React as soon as users signal intent&lt;/li&gt;
  &lt;li&gt;Introduce predictive loading bit by bit, implement it at the places in your app where it has the most impact&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;At the end of the day, what matters is how it &lt;em&gt;feels&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eli also covers this talk on his &lt;a href=&quot;http://assets.eli.wtf/talks/perceived-perf-talk/&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;swarming-scaling-without-a-religious-methodology---dan-north&quot;&gt;SWARMing: Scaling Without A Religious Methodology - Dan North&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dan North&quot; src=&quot;/img/craft-conf-2018/Dan-North.jpg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/tastapod&quot; target=&quot;_blank&quot;&gt;Dan North&lt;/a&gt; has been coaching, coding and consulting for over 25 years, with a focus on applying systems thinking and simple technology to solve complex business problems.&lt;/p&gt;

&lt;p&gt;Business stakeholders, developers, infrastructure, the project management office and change groups don’t understand each other. What are they doing wrong?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;They are aiming at the wrong target!&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;wrong-target-cost-accounting&quot;&gt;Wrong target: Cost accounting!&lt;/h4&gt;
&lt;p&gt;Large businesses tend to look only at costs and profits since they are too big to be able to keep an eye on everything in the organization.
Local performance targets are viewed as extremely valuable, such as reducing head count or sticking to the budget.&lt;/p&gt;
&lt;h4 id=&quot;right-target-throughput-accounting&quot;&gt;Right target: Throughput accounting!&lt;/h4&gt;
&lt;p&gt;The whole business creates value.
People in the organization are either directly creating value, or they are at least enabling others to do so.
The business tries to identify and resolve bottlenecks.
They care about lead time and throughput: How quickly from identifying a need can they meet that need and how much value can be pushed through the organization?&lt;/p&gt;

&lt;p&gt;How can they reach the right target?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Agile will save us!” - Everyone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two people still waiting for Godot might help you with this one.
&lt;em&gt;Agile is no holy grail&lt;/em&gt; and people desperately holding on to the agile transformation will realize this soon enough.&lt;/p&gt;

&lt;p&gt;Q: How do we always end up at, “Whatever we did was okay, but somehow it stopped working”?&lt;/p&gt;

&lt;p&gt;A: Some things are just inevitable:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Degradation&lt;/strong&gt;: things start to wear out because of time&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dysfunction&lt;/strong&gt;: once things wear out, they stop working&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expiry&lt;/strong&gt;: after they stop working, things start to decay and fall away&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, these also stimulate positive change: degradation stimulates the idea of maintaining things and transforming them.
Dysfunction drives innovation and challenging things and expiry stimulates creating and starting over.&lt;/p&gt;

&lt;p&gt;Why does this happen?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change drives the need to adapt. If we’re not adapting, things are going to fail.&lt;/li&gt;
  &lt;li&gt;Interdependency drives the need to collaborate.&lt;/li&gt;
  &lt;li&gt;Imperfection drives the need to iterate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Surprise, surprise: adaption, collaboration and iteration are the drivers of Agile and Lean methods!&lt;/p&gt;

&lt;h4 id=&quot;what-are-our-options&quot;&gt;What are our options?&lt;/h4&gt;

&lt;p&gt;SWARM!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;caling
&lt;strong&gt;W&lt;/strong&gt;ithout
&lt;strong&gt;A&lt;/strong&gt;
&lt;strong&gt;R&lt;/strong&gt;eligious
&lt;strong&gt;M&lt;/strong&gt;ethodology&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;religion (n): The structures, constraints and rituals we humans accrete around a kernel of faith because we crave answers and we fear uncertainty. - Dan North&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The table stakes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Education&lt;/strong&gt;: we need to learn some new tricks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Practice&lt;/strong&gt;: it’s not enough to learn them, we also need to implement them (possibly with a few failures in the process and trying again and again).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;: minimum 3-5 years to have an impact.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Investment&lt;/strong&gt;: time costs money.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Influence&lt;/strong&gt;: we need to reach up and down in the organization. &lt;em&gt;Everybody&lt;/em&gt; needs to participate.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt;: needs to be in the plan from the get-go or it will not work.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External help&lt;/strong&gt;: both Amazon Prime and Netflix run on AWS. They don’t block each other, they learn from each other.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Leadership&lt;/strong&gt;: needs to be consistent, they need to be invested and resilient.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t have these factors in place, SWARM won’t work.&lt;/p&gt;

&lt;p&gt;These are based on simple principles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;People are basically good. “Everyone is trying to help”. Assume this is always true.&lt;/li&gt;
  &lt;li&gt;Sustainable flow of value is the goal. We need to learn new metrics and techniques.&lt;/li&gt;
  &lt;li&gt;Theory of Constraints: only tackle one constraint at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Underlying principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Visualize -&amp;gt; stabilize -&amp;gt; optimize!
You cannot change a system if you don’t know what that system looks like, so visualize!
Use event storming, value stream mapping or whatever you need.
Stabilizing means that even if the system is horribly bad, you want it to be consistently horribly bad because only then can you observe what impact your changes actually have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start small, get data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If we have data, let’s look at data. If all we have are opinions, let’s go with mine!” - Jim Barksdale&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Learn from mistakes, iterate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summing-it-up&quot;&gt;Summing it up&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t be fooled! It’s easy to believe that this time will be different.&lt;/li&gt;
  &lt;li&gt;You can’t defeat the universe.
Mastery is understanding how to work with the grain. Don’t try to fight all the universal, inevitable things.
That means adapting, iterating and combining techniques for your context and the changes around you.&lt;/li&gt;
  &lt;li&gt;There is no magic formula! But there definitely is hope.&lt;/li&gt;
  &lt;li&gt;This all takes education, time, practice and other things like investment and leadership.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;seven-plusminus-two-ways-your-brain-screws-you-up---joseph-pelrine--jasmine-zahno&quot;&gt;Seven (plus/minus two) ways your brain screws you up - Joseph Pelrine &amp;amp; Jasmine Zahno&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Joseph Pelrine&quot; src=&quot;/img/craft-conf-2018/Joseph-Pelrine.png&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jasmine Zahno&quot; src=&quot;/img/craft-conf-2018/Jasmine-Zahno.jpg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/josephpelrine&quot; target=&quot;_blank&quot;&gt;Joseph Pelrine&lt;/a&gt; is a senior certified Scrum Master Practitioner and Trainer as well as one of Europe’s leading experts on eXtreme Programming.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/jasminezahno&quot; target=&quot;_blank&quot;&gt;Jasmine Zahno&lt;/a&gt; is an agile coach who is passionate about the people side of product development. Her master’s degree in organisational psychology uniquely qualifies her to deal with the human issues that arise when the agile paradigm collides with traditional organisational structures.&lt;/p&gt;

&lt;p&gt;Joseph and Jasmine talk about a few subjects that they found to be powerful in understanding the complexity of ourselves and software craftmanship.&lt;/p&gt;

&lt;p&gt;The first of these subjects is that men find women who wear red to be more attractive.
Men actually don’t realize this.
A woman in red also triggers an exceptional reaction in other women.
These women tend to react more aggressive towards women who wear red.
Also, men who carry a guitar are found more attractive than men who carry a tennis racket.&lt;/p&gt;

&lt;p&gt;The next part of the talk will cover some subjects about our psychology that are relevant to use in our field, but also just fun and interesting topics.&lt;/p&gt;

&lt;p&gt;FACT: We use &lt;em&gt;more&lt;/em&gt; than 10% of our brain. Even when we sleep, we use more.&lt;/p&gt;

&lt;h3 id=&quot;willpower&quot;&gt;Willpower?&lt;/h3&gt;
&lt;p&gt;Willpower is the ability to resist short-term temptation in order to meet long-term goals.
Each day, we make 227 choices.
These are all chances to follow your long-term goals.
This has absolutely nothing to do with your intelligence and everything with willpower.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Willpower determines academic successes over intelligence.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;willpower-deteriorates&quot;&gt;Willpower deteriorates!&lt;/h4&gt;
&lt;p&gt;After multiple choices that required willpower, your willpower will start deteriorating and you will start making worse decisions.
This is actually something that supermarkets use.
The fruit and vegetables aisles are always presented to you first whilst you pass the sugary items right before checkout, when your willpower is at its lowest.&lt;/p&gt;

&lt;h4 id=&quot;how-to-boost-your-and-your-teams-willpower&quot;&gt;How to boost your and your team’s willpower?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Establish motivation - for example, align the action items in a retrospective to the team’s motivations&lt;/li&gt;
  &lt;li&gt;Focus on one goal at a time&lt;/li&gt;
  &lt;li&gt;Be authentic&lt;/li&gt;
  &lt;li&gt;Express your emotions - hiding your emotions deteriorates your willpower&lt;/li&gt;
  &lt;li&gt;Physical exercise - it will actually increase your willpower!&lt;/li&gt;
  &lt;li&gt;Eat regularly - for example, foresee fruit instead of Snickers to keep up the willpower since some will try very hard to not eat that Snickers bar&lt;/li&gt;
  &lt;li&gt;Mindfulness practices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;relative-estimating--estimating&quot;&gt;Relative estimating =/= estimating!&lt;/h3&gt;
&lt;p&gt;Social compliance is very important to keep in mind during planning poker.
Once the numbers are out there, it will influence the people who have not yet voted.
See the example of the five subjects to say which drawn lines are the same length.
Among these five people there is one actual test subject while the other four are deliberately giving the wrong answer.
The test subject will actually adjust his answer to match the others’ answers even though it is clearly the wrong answer.&lt;/p&gt;

&lt;p&gt;There are multiple factors that influence our estimations.
Let’s discuss a few.&lt;/p&gt;

&lt;h4 id=&quot;seven-plusminus-two&quot;&gt;Seven plus/minus two&lt;/h4&gt;
&lt;p&gt;There’s actually a limit on our capacity to process information.
This means that the number of objects an average human can hold in working memory is 7 ± 2.
This is frequently referred to as Miller’s law.
It has nothing at all to do with memory.
It has everything to do with the way we make decisions.&lt;/p&gt;

&lt;h4 id=&quot;linguistic-priming&quot;&gt;Linguistic priming&lt;/h4&gt;
&lt;p&gt;The way the Product Owner formulates the story has a big impact on how it is estimated.
Let’s say for example that two cars had an accident.
The following five words that were used in the experiment gave a different result:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Collided&lt;/li&gt;
  &lt;li&gt;Bumped&lt;/li&gt;
  &lt;li&gt;Contacted&lt;/li&gt;
  &lt;li&gt;Hit&lt;/li&gt;
  &lt;li&gt;Smashed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The question here is which word would give the highest estimate of speed?
The answer is the following, where 1 represents the highest estimate and 5 the lowest:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collided - 2&lt;/li&gt;
  &lt;li&gt;Bumped - 3&lt;/li&gt;
  &lt;li&gt;Contacted - 5&lt;/li&gt;
  &lt;li&gt;Hit - 4&lt;/li&gt;
  &lt;li&gt;Smashed - 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;we-are-not-as-good-with-numbers-as-we-think-we-are&quot;&gt;We are not as good with numbers as we think we are&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;We tend to ignore the base rate:
If, for example, the yellow taxis take up 80% of all the taxis in Budapest and the red ones take up 20%, when we see 10 yellow taxis pass by we will assume that the next one will be red even though the actual chance is still 20%.&lt;/li&gt;
  &lt;li&gt;The law of small numbers:
We tend to believe small numbers more than large numbers because it’s easier for us to process&lt;/li&gt;
  &lt;li&gt;We overlook the statistics when a story is involved because we tend to be more emotional than analytical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Joseph and Jasmine also refer to the Monty Hall problem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suppose you’re on a game show, and you’re given the choice of three doors:
Behind one door is a car; behind the others, goats.
You pick a door, say No. 1, and the host, who knows what’s behind the doors, opens another door, say No. 3, which has a goat.
He then says to you, “Do you want to pick door No. 2?”
Is it to your advantage to switch your choice?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer here is actually &lt;a href=&quot;https://en.wikipedia.org/wiki/Monty_Hall_problem&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;‘Yes!’&lt;/em&gt;&lt;/a&gt;, however counter intuitive that may be.&lt;/p&gt;

&lt;h3 id=&quot;we-are-not-good-psychologists&quot;&gt;We are not good psychologists&lt;/h3&gt;
&lt;p&gt;The Dunning-Kruger effect: The less intelligent a student was, the smarter they thought they actually were.
Reduced intelligence leads to a reduction in the ability to self-reflect on their own intelligence.&lt;/p&gt;

&lt;h4 id=&quot;working-in-teams&quot;&gt;Working in teams&lt;/h4&gt;
&lt;p&gt;We have the tendency to overemphasize personal characteristics and ignore situational factors when judging others’ behaviour.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When we are late, it’s because we have a good excuse&lt;/li&gt;
  &lt;li&gt;When a team member is late, he was probably just lazy&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ikea-effect&quot;&gt;IKEA effect&lt;/h4&gt;
&lt;p&gt;We have the tendency to overvalue the things we build ourselves.
One example here is using pancake mix.
These mixes didn’t sell properly until people were actually required to add their own set of eggs to the mix.&lt;/p&gt;

&lt;p&gt;To finish, Joseph and Jasmine showed us and discussed some more interesting research papers about the human psychology.
Their talk is available on the &lt;a href=&quot;https://craft-conf.com/&quot; target=&quot;_blank&quot;&gt;Craft Conf website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;designing-a-high-performing-team---alison-coward&quot;&gt;Designing a high-performing team - Alison Coward&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Alison Coward&quot; src=&quot;/img/craft-conf-2018/Alison-Coward.jpeg&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/alisoncoward&quot; target=&quot;_blank&quot;&gt;Alison Coward&lt;/a&gt; is the founder of Bracket and author of “A Pocket Guide to Effective Workshops”. She is a strategist, trainer and workshop facilitator. With over 15 years of experience of working in, leading and facilitating creative teams, Alison is passionate about finding the perfect balance between creativity and productivity.&lt;/p&gt;

&lt;p&gt;Team work today is cross-functional and self-organizing.
AirBnB for example has core teams and expand the team with the necessary expertise from within the organization when necessary.&lt;/p&gt;

&lt;p&gt;A team is made up of multiple individuals which creates a new team culture when putting these teams together.
The team’s dynamics also tend to change on different projects.
So we cannot apply a preset way of working to a new team or a familiar team working on a new project.&lt;/p&gt;

&lt;h3 id=&quot;three-principles-for-creating-high-performance-teams&quot;&gt;Three principles for creating High Performance Teams&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Can your team learn to work better together?
With a fixed mindset you believe that talent is fixed.
However, with a growth mindset, you believe that anyone can improve with practice and persistence.
See the value of continuous learning.
These teams were more successful in the past and tend to perform much better.
They challenge each other and learn together.
Don’t forget that this can actually be developed.
Each team has the potential to improve. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;What new ways of working can you create together?
Apply a design approach and a design mindset. Design a way of working that works for that team! &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How will you and your team start to work differently?
Behaviour change and building new team habits. What team habits, what rituals can we create to help our teams work better together?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;two-factors-for-designing-effective-teams&quot;&gt;Two factors for designing effective teams&lt;/h3&gt;
&lt;p&gt;Communication &amp;amp; trust.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How you work together is more important than what you’re working on and who you are working with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;mit-human-dynamics-lab&quot;&gt;MIT Human Dynamics Lab&lt;/h4&gt;
&lt;p&gt;The research conducted by the lab concluded the following:
The most effective teams&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Communicate frequently&lt;/li&gt;
  &lt;li&gt;Talk and listen in equal measure&lt;/li&gt;
  &lt;li&gt;Engage in frequent informal communication&lt;/li&gt;
  &lt;li&gt;The conversations are dynamic&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;googles-project-aristotle&quot;&gt;Google’s project Aristotle&lt;/h4&gt;
&lt;p&gt;A few years ago, Google was very interested in finding out what the factors were that made up the most effective teams.
They concluded the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The people could see the impact of the work they were doing&lt;/li&gt;
  &lt;li&gt;Meaning of work, they could see why they were doing the work&lt;/li&gt;
  &lt;li&gt;Structure and clarity, everybody knew who was doing what and what they were working on&lt;/li&gt;
  &lt;li&gt;Dependability, they knew they could depend on each other&lt;/li&gt;
  &lt;li&gt;Psychological safety, the individuals in the team were able to make mistakes and take risks in front of each other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It had nothing to do with IQ and individual talents of the people in the team and everything to do with how they worked together.&lt;/p&gt;

&lt;h4 id=&quot;self-awareness&quot;&gt;Self-awareness&lt;/h4&gt;
&lt;p&gt;95% of us think we are self-aware, while actually only 10-15% is!&lt;/p&gt;

&lt;p&gt;Self-awareness exercise:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What time do you naturally wake up?&lt;/li&gt;
  &lt;li&gt;When are your most productive hours?&lt;/li&gt;
  &lt;li&gt;When do you get your best ideas?&lt;/li&gt;
  &lt;li&gt;What does your ideal work day look like?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use these answers to set up new ways of working within the team.&lt;/p&gt;

&lt;p&gt;We can do this during the project kickoff:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Share team expertise, share what your role is and what you can bring to the table&lt;/li&gt;
  &lt;li&gt;Clarify the roles, everyone needs to know who can do what work&lt;/li&gt;
  &lt;li&gt;Talk about how you will work together, how you will meet, when you will meet, how to communicate, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;organize-better-meetings-and-workshops&quot;&gt;Organize better meetings and workshops&lt;/h3&gt;
&lt;p&gt;Make your meetings count!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is the purpose of the meeting?&lt;/li&gt;
  &lt;li&gt;What is the best format of the meeting? How long do we need? Do we need to split up the meeting?&lt;/li&gt;
  &lt;li&gt;Set meeting rhythms&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;amazons-two-pizza-teams&quot;&gt;Amazon’s two pizza teams:&lt;/h4&gt;
&lt;p&gt;If a team is too large to be fed by two pizza’s, then the team is just too large.&lt;/p&gt;

&lt;h4 id=&quot;google-ventures-anxiety-parties&quot;&gt;Google Ventures Anxiety Parties&lt;/h4&gt;
&lt;p&gt;Every three or four months they would get together with a list of all the things that were bothering them about their performance and would share that with their team.
An example of this might be that they weren’t sure if they were spending too much time going to conferences or if they’re working too slow.
They would share these concerns during the anxiety party and the team members could respond whether they felt this actually was an issue or not to them.
Someone could then find out that what they saw as an issue wasn’t being considered an issue at all by the rest of the team, or perhaps even vice versa.
These conversations build trust and better connections within the team.&lt;/p&gt;

&lt;h4 id=&quot;take-inspiration-from-workshops&quot;&gt;Take inspiration from workshops&lt;/h4&gt;
&lt;p&gt;Great workshops have the following in common:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Collaboration&lt;/li&gt;
  &lt;li&gt;Creativity&lt;/li&gt;
  &lt;li&gt;Equal contribution&lt;/li&gt;
  &lt;li&gt;Good content&lt;/li&gt;
  &lt;li&gt;Clarity (on what needs to be done)&lt;/li&gt;
  &lt;li&gt;Motivation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next paperclip exercise shows you how to make your meetings more effective:
The first question Alison asked us was, ‘Come up with as many ideas as possible on what you can do with a paperclip.’
This question was followed with, ‘Which idea would make a good business proposition?’&lt;/p&gt;

&lt;p&gt;Two different activities came up during this exercise:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Divergent thinking&lt;/strong&gt;: Trying to come up with as many ideas as possible, the focus was on the quantity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Convergent thinking&lt;/strong&gt;: Applying criteria to your ideas and being critical.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s very important to keep these two activities separate during your meetings.
Our goal is to have productive conflict and constructive discussions.
Watch out for group thinking by making sure everybody gets heard, introverts and extroverts alike.
Equal contributions are very important!&lt;/p&gt;

&lt;p&gt;Don’t forget about check-in rounds! Use the first five minutes of a meeting to ask a personal question to encourage equal contributions and build trust in the team.&lt;/p&gt;

&lt;h3 id=&quot;team-habits&quot;&gt;Team habits&lt;/h3&gt;
&lt;p&gt;How do you change behaviour?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start small!
One step at a time works best instead of a big bang!&lt;/li&gt;
  &lt;li&gt;“Implementation intention”: Make a plan!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have these team habits in place, it still needs a constant review to keep improving.
We need the following loop:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Design -&amp;gt; Test -&amp;gt; Iterate -&amp;gt; Repeat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;starting-a-new-high-performance-team&quot;&gt;Starting a new High Performance Team&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Determine how you meet&lt;/li&gt;
  &lt;li&gt;Determine how you share ideas and how you can learn from each other&lt;/li&gt;
  &lt;li&gt;Social times, find ways to get to know each other&lt;/li&gt;
  &lt;li&gt;Alone time, don’t only think about collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team work is changing&lt;/li&gt;
  &lt;li&gt;Having a growth mindset, design approach and behaviour change&lt;/li&gt;
  &lt;li&gt;Make your meetings count&lt;/li&gt;
  &lt;li&gt;Build a ‘workshop culture’&lt;/li&gt;
  &lt;li&gt;Create better team habits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on how to run effective workshops can be found &lt;a href=&quot;https://www.slideshare.net/Codemotion/how-to-run-effective-workshops-alison-coward-codemotion-amsterdam-2016&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;estimates-or-noestimates-lets-explore-the-possibilities---woody-zuill&quot;&gt;Estimates or NoEstimates: Let’s explore the possibilities - Woody Zuill&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Woody Zuill&quot; src=&quot;/img/craft-conf-2018/Woody-Zuill.png&quot; /&gt;&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/woodyzuill&quot; target=&quot;_blank&quot;&gt;Woody Zuill&lt;/a&gt; has been programming for 30+ years and works as an Agile Coach and Application Development Manager. He and his team are the originators of the Mob Programming approach to teamwork in software development and he is considered one of the founders of the “#NoEstimates” discussion.&lt;/p&gt;

&lt;p&gt;The first part of Woody’s talk is about his own personal experiences.
He was involved in a project that included over 200 developers.
He concluded that the same ‘lesson learned’ kept popping up after each iteration: ‘Our estimates need to be better!’
It was always the same lesson learned, there was never any improvement. Woody calls this the ‘Cycle of Continuous No-Improvement’.&lt;/p&gt;

&lt;p&gt;How does one get out of this cycle? Is it safe to question the status quo?&lt;/p&gt;

&lt;p&gt;There is a bigger idea behind these questions:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“The object isn’t to make art, it’s to be in that wonderful state which makes art inevitable.” - Robert Henri
If you set up the environment for good things, then good things will happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Woody’s suggestion was very simple:&lt;/p&gt;

&lt;h3 id=&quot;how-about-working-with-no-estimates&quot;&gt;How about working with no estimates?&lt;/h3&gt;

&lt;p&gt;The tweet that started it all in 2012:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;#NoEstimates Tweet&quot; src=&quot;/img/craft-conf-2018/Woody-Zuill-NoEstimates-Tweet.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-is-an-estimate&quot;&gt;What is an estimate?&lt;/h4&gt;
&lt;p&gt;Working definition: An estimate is a guess of the amount of time (usually work time) to create a project, a feature or some bit of work in developing software.&lt;/p&gt;

&lt;p&gt;We use estimates to help us make decisions and spark a conversation (to ultimately make a decision).&lt;/p&gt;

&lt;h4 id=&quot;afraid-of-change&quot;&gt;Afraid of change&lt;/h4&gt;
&lt;p&gt;Why is it that we want control and certainty over time, cost and schedule?
We don’t need help to make decisions, we need help to make &lt;em&gt;good&lt;/em&gt; decisions.
Are estimates then really the only way to make them?
Are we even able to draw the right conclusions?
Perhaps ‘on time’ and ‘on budget’ are actually not a good measure of the results of our decision if we had to cut in our feature to be able to deliver?&lt;/p&gt;

&lt;p&gt;But why hold on to estimates?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Fear of losing control is a big barrier for change.” - Bjarte Bogsnes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We tend to hold on to what we know.
A few quotes in favor of breaking the cycle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Alternative to estimates: do the most important thing until either it ships or it is no longer the most important thing.” - Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As teams progress they first struggle with estimation, then can get quite good at it, and then reach a point where they often don’t need it.” - Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When starting a project, requirements are handed over to the development teams in an orderly fashion, very neatly organized and containing everything that needs to happen.
Or so the stakeholders like to think.
The project itself, however, usually ends up being a lot more disorganized with features being added, removed or changed with no way to tell early on what the end result will look like.
Then why try to get estimates for the project if most of the requirements tend to change anyway?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s in the doing of the work that we discover the work that we must do.” - Woody Zuill&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than size and smallness, look for the following qualities in a story:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Potentially valuable&lt;/li&gt;
  &lt;li&gt;Understandable&lt;/li&gt;
  &lt;li&gt;Cohesive - does it belong together&lt;/li&gt;
  &lt;li&gt;Distinct - is it clearly separate from other stories
-&amp;gt; These don’t require estimates! When these qualities are found, we have something we can work on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-twelve-calculations-example&quot;&gt;The Twelve Calculations example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;80% of the use of the app comes from 20% of the features&lt;/li&gt;
  &lt;li&gt;80% of the use of a feature comes from 20% of its implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that with only 4% of the implementation effort (20% of 20%), we can cover the 20% of the features being actively used.&lt;/p&gt;

&lt;p&gt;Let’s try to have many, small, inexpensive attempts at value.
Let’s do, discover, validate and steer.
This is what being agile is all about!&lt;/p&gt;

&lt;p&gt;What do you think would have more payoff?
Turning up the goods on getting our estimates better?
Or turning up the goods on our ability to rapidly deliver potentially useful software?&lt;/p&gt;

&lt;p&gt;Let’s learn to control our urge to control things.
Let’s quit worrying about whether we will get done in three months for now.
Let’s get good at being done everyday.&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;http://zuill.us/WoodyZuill/beyond-estimates/&quot; target=&quot;_blank&quot;&gt;Woody’s website&lt;/a&gt;, you can find more info on his take on estimates.&lt;/p&gt;

&lt;h2 id=&quot;interested-in-more&quot;&gt;Interested in more?&lt;/h2&gt;

&lt;p&gt;As we were not able to attend all the talks at CraftConf, we only covered the ones we’ve attended in the blogpost above! 
Hope you find this blog post as interesting as we did the conference!&lt;/p&gt;

&lt;p&gt;If you’re interested in more details; all the talks were recorded and can be found on the &lt;a href=&quot;https://craft-conf.com/&quot; target=&quot;_blank&quot;&gt;CraftConf&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Thanks for reading, everyone!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Craft Conf&quot; src=&quot;/img/craft-conf-2018/Craft-Conf-peeps.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Derya&quot;, &quot;last_name&quot;=&gt;&quot;Duru&quot;, &quot;permalink&quot;=&gt;&quot;/author/derya-duru/&quot;, &quot;title&quot;=&gt;&quot;Scrum Master&quot;, &quot;email&quot;=&gt;&quot;derya.duru@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;derya-duru-52348a3a&quot;, &quot;avatar&quot;=&gt;&quot;derya-duru.jpg&quot;, &quot;twitter&quot;=&gt;&quot;deryaduru_&quot;, &quot;github&quot;=&gt;&quot;Deryaa&quot;, &quot;bio&quot;=&gt;&quot;Derya is a Scrum Master at Ordina Belgium always trying to better herself in Agile frameworks. She enjoys being challenged and as the Competence Leader Agile, she tries to improve her own skills continuously, while hoping to share her knowledge and help others with their understanding of Agile frameworks.&quot;}</name><email>derya.duru@ordina.be</email></author><category term="Conference" /><category term="Craft Conf" /><category term="Agile" /><category term="Scrum" /><category term="Coaching" /><category term="Core Protocols" /><category term="High Performance Teams" /><category term="Perceived Performance" /><category term="Estimations" /><category term="Scaling" /><summary type="html">Craft Conf is a two day conference in Budapest, aimed at talks surrounding the ‘Software as a craftsmanship’ idea. JWorks was present this year on the 10th and 11th of May and we would love to give you an overview of some of the talks we attended.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/craft-conf-2018/Craft-Conf-2018.png" /></entry><entry><title type="html">Spring IO 2018</title><link href="https://ordina-jworks.github.io/conference/2018/06/26/Spring-IO-2018.html" rel="alternate" type="text/html" title="Spring IO 2018" /><published>2018-06-26T00:00:00+00:00</published><updated>2018-06-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/06/26/Spring-IO-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/06/26/Spring-IO-2018.html">&lt;h1 id=&quot;spring-io-is-back&quot;&gt;Spring IO is back!&lt;/h1&gt;

&lt;p&gt;Marked in red on the calendar of every JWorks consultant: the yearly edition of Spring I/O.
This year, we weren’t going to wait for the explicit approval of our manager and we ordered 27 early bird tickets as soon as we could and booked our flights to sunny Barcelona!
It promised to be a special edition, since everything was gonna be &lt;strong&gt;bigger and better&lt;/strong&gt;: the venue, the speaker roster, the food, the atmosphere.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;strong&gt;Palau de Congressos de Barcelona&lt;/strong&gt; is a much bigger venue than the one we’re used to from previous years.
This is why the organizer &lt;a href=&quot;https://twitter.com/sergialmar?lang=en&quot; target=&quot;_blank&quot;&gt;Sergi Almar&lt;/a&gt; was able to accomodate &lt;strong&gt;1000 attendees&lt;/strong&gt; this year (twice as much as the year before!), which shows how much interest there is in the Spring community.
It was a really good location, it has ample space to grow in the coming years and the catering was also of good quality.
Next year we’ll most likely get the same venue, but the event will probably overlap with the nearby &lt;a href=&quot;http://www.automobilebarcelona.com/es/visitar&quot; target=&quot;_blank&quot;&gt;Barcelona International Motor Show&lt;/a&gt;, which takes place every two years.
Free test drives during a conference? Yes, please!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/spring-io-2018/venue1.jpg&quot; alt=&quot;Spring IO 2018 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/spring-io-2018/jworks.jpg&quot; alt=&quot;JWorks at Spring I/O 2018&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We’ll talk about some of the presentations this year, but it is definitely not a complete list.
There were so many interesting talks, we’re actually going to need quite some time to rewatch them all on Youtube!&lt;/p&gt;

&lt;p&gt;Let us know if we missed anything by &lt;a href=&quot;https://github.com/ordina-jworks/ordina-jworks.github.io/issues/new&quot; target=&quot;_blank&quot;&gt;filing an issue&lt;/a&gt; or contacting us at &lt;a href=&quot;mailto:jworks@ordina.be&quot; target=&quot;_blank&quot;&gt;our general JWorks email&lt;/a&gt;.
We will probably still update this blogpost with other talks.
Links to videos and resources might still be added as they become available on the Spring I/O Youtube channel.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-ddd-with-the-spring-ecosystem-by-michael-plöd&quot;&gt;Michael Plöd: Implementing DDD with the Spring ecosystem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#migrating-legacy-enterprise-java-applications-to-spring-boot-by-mark-heckler&quot;&gt;Mark Heckler: Migrating legacy enterprise Java applications to Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-security-5-workshop-by-andreas-falk&quot;&gt;Andreas Falk: Spring Security 5 Workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-framework-5---hidden-gems-by-juergen-hoeller&quot;&gt;Juergen Hoeller: Spring Framework 5 - Hidden Gems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#google-cloud-native-with-spring-boot-by-ray-tsang&quot;&gt;Ray Tsang: Google Cloud Native with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#flight-of-the-flux-by-simon-baslé&quot;&gt;Simon Baslé: Flight of the Flux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-kafka---one-more-arsenal-in-a-distributed-toolbox-by-nakul-mishra&quot;&gt;Nakul Mishra: Spring Kafka - One more arsenal in a distributed toolbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#breaking-down-monoliths-into-system-of-systems-by-oliver-gierke&quot;&gt;Oliver Gierke: Breaking Down Monoliths Into System of Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observability-with-spring-based-distributed-systems-by-tommy-ludwig&quot;&gt;Tommy Ludwig: Observability with Spring based distributed systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#machine-learning-exposed-the-fundamentals-by-james-weaver&quot;&gt;James Weaver: Machine Learning exposed: The fundamentals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing-every-level-of-your-spring-microservices-application-workshop-by-jeroen-sterken--kristof-van-sever&quot;&gt;Jeroen Sterken &amp;amp; Kristof Van Sever: Testing every level of Spring microservices application &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-1-talks--workshops&quot;&gt;Day 1: Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;h2 id=&quot;implementing-ddd-with-the-spring-ecosystem-by-michael-plöd&quot;&gt;Implementing DDD with the Spring ecosystem by &lt;a href=&quot;https://twitter.com/bitboss&quot; target=&quot;_blank&quot;&gt;Michael Plöd&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Michael Plöd&quot; src=&quot;/img/spring-io-2018/michael-plod.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;After the keynote session, one of the first talks was given by Michael Plöd.
He talked about implementing Domain-Driven Design (DDD) using the Spring ecosystem, leveraging various Spring technologies such as Spring Boot, Spring Data and Spring Cloud.&lt;/p&gt;

&lt;p&gt;Michael attributed the inspiration for and ideas around DDD to the following two books:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software, by Eric Evans.&lt;/li&gt;
  &lt;li&gt;Implementing Domain-Driven Design, by Vaughn Vernon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Domain-Driven Design is currently a very popular way of implementing and looking at microservices.
However, he immediately made an important disclaimer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everyone should be aware that DDD is not a silver bullet to be used in all projects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One should not force DDD on problems that aren’t suited for it.&lt;/p&gt;

&lt;p&gt;Another important thing to remember is to model your microservices along business capabilities.
If your microservices are highly coupled on a business level, all that fancy technology in Spring Boot won’t help you.
We will use &lt;em&gt;Strategic Design&lt;/em&gt; to find a solution that takes into account business capabilities.&lt;/p&gt;

&lt;h3 id=&quot;bounded-context&quot;&gt;Bounded Context&lt;/h3&gt;

&lt;p&gt;Every sophisticated business (sub-) domain consists of a bunch of Bounded Contexts.
We can, for example, create linguistic boundaries using Bounded Contexts if the solution has two types of “accounts”: a &lt;code class=&quot;highlighter-rouge&quot;&gt;BankAccount&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserAccount&lt;/code&gt;.
Each Bounded Context contains a domain model and is also a boundary for the meaning of a given model. We don’t nest Bounded Contexts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inside&lt;/em&gt; of a Bounded Context, it’s important to not repeat yourself.
On the other hand, &lt;em&gt;between&lt;/em&gt; several Bounded Contexts, repeating yourself is allowed for the sake of decoupling.&lt;/p&gt;

&lt;h3 id=&quot;tactical-design&quot;&gt;Tactical Design&lt;/h3&gt;

&lt;p&gt;Systems, and this applies to both monolithic and microservice architectures, should be evolvable.
DDD offers a set of patterns, which are the internal building blocks of the Tactical Design part of DDD, that helps us in this regard.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;XX&quot; src=&quot;/img/spring-io-2018/tactical-design.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Michael now talked us through each of these concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aggregates:
    &lt;ul&gt;
      &lt;li&gt;Entities&lt;/li&gt;
      &lt;li&gt;Value Objects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Factories&lt;/li&gt;
  &lt;li&gt;Repositories&lt;/li&gt;
  &lt;li&gt;Services&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;entities&quot;&gt;Entities&lt;/h4&gt;

&lt;p&gt;Entities represent the &lt;em&gt;core business&lt;/em&gt; objects (not &lt;em&gt;data&lt;/em&gt; objects) of a Bounded Context’s model.
Each of these has a constant identity which should not be your primary database key but rather a &lt;em&gt;business&lt;/em&gt; key.
Each Entity also has its own lifecycle.&lt;/p&gt;

&lt;h4 id=&quot;value-objects&quot;&gt;Value Objects&lt;/h4&gt;

&lt;p&gt;Value Objects derive their identity from a combination of various attributes.
As an example, Michael brought up the representer object he was holding: it costs 80 euros so this representer object could be identified by the value of 80 and the currency Euros. We do not care about &lt;em&gt;which&lt;/em&gt; ‘80 euros’.
Value Objects do not have their own lifecycle: they inherit it from Entities that are referencing them.&lt;/p&gt;

&lt;p&gt;It’s also important to note that for example a &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; can be an Entity in one Boundary Context but be a Value Object in a totally different Boundary Context.&lt;/p&gt;

&lt;p&gt;Take note that your DDD Entity is &lt;em&gt;not&lt;/em&gt; your JPA Entity.
Because the JPA Entity is a &lt;em&gt;data&lt;/em&gt; entity while the DDD Entity is a &lt;em&gt;business&lt;/em&gt; entity. Don’t mix these types.&lt;/p&gt;

&lt;h4 id=&quot;aggregates&quot;&gt;Aggregates&lt;/h4&gt;

&lt;p&gt;Aggregates group Entities and Value Objects together.
The Root Entity is the entry point in terms of access to the object graph and for the lifecycle.
For example, you aren’t allowed to enter a loan application form through the loan for instance: you would also have to go through the loan application form.&lt;/p&gt;

&lt;h5 id=&quot;best-practices-for-architecting-aggregates&quot;&gt;Best Practices for architecting Aggregates&lt;/h5&gt;

&lt;h6 id=&quot;small&quot;&gt;Small&lt;/h6&gt;

&lt;p&gt;Prefer small Aggregates that usually only contain an Entity and some Value Objects. Don’t build big reference graphs between Aggregates.&lt;/p&gt;

&lt;h6 id=&quot;reference-by-identity&quot;&gt;Reference by identity&lt;/h6&gt;

&lt;p&gt;Do not implement direct references to other Root Entities. Prefer referencing to identity Value Objects.&lt;/p&gt;

&lt;h6 id=&quot;one-transaction-per-aggregate&quot;&gt;One transaction per Aggregate&lt;/h6&gt;

&lt;p&gt;Aggregates should be updated in separate transactions which leads to eventual consistency.&lt;/p&gt;

&lt;h6 id=&quot;consistency-boundaries&quot;&gt;Consistency Boundaries&lt;/h6&gt;

&lt;p&gt;Take a look which parts of your model must be updated in an atomically consistent manner.&lt;/p&gt;

&lt;h5 id=&quot;best-practices-for-implementing-aggregates&quot;&gt;Best practices for implementing Aggregates&lt;/h5&gt;

&lt;p&gt;Code can be found on &lt;a href=&quot;https://github.com/mploed/ddd-with-spring&quot; target=&quot;_blank&quot;&gt;the author’s DDD-with-Spring GitHub project&lt;/a&gt; where he implemented a credit loan application consisting of three Spring Boot applications.&lt;/p&gt;

&lt;h6 id=&quot;visibility&quot;&gt;Visibility&lt;/h6&gt;

&lt;p&gt;Don’t just make everything private and expose everything with public getters and setters.
This is, in Michael’s words, the “shortcut from hell” because you aren’t doing information hiding and are exposing everything to the outside world.&lt;/p&gt;

&lt;h6 id=&quot;references&quot;&gt;References&lt;/h6&gt;

&lt;p&gt;How do we hook these up?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Referencing them from one Value Object to the other.&lt;/li&gt;
  &lt;li&gt;Create intermediary Value Objects to bind them together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael prefers Aggregates that do not reference themselves.
They are hooked together with a few shared Value Objects which leads to more decoupling.
There are 4 Aggregates in the application and we add a Value Object, &lt;code class=&quot;highlighter-rouge&quot;&gt;personID&lt;/code&gt;, to hook &lt;code class=&quot;highlighter-rouge&quot;&gt;AgencyResult&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Applicant&lt;/code&gt; together.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationNumber&lt;/code&gt; object brings &lt;code class=&quot;highlighter-rouge&quot;&gt;Applicant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Financial Situation&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoringResult&lt;/code&gt; together.&lt;/p&gt;

&lt;h6 id=&quot;keep-your-aggregates-spring-free&quot;&gt;Keep your Aggregates Spring free.&lt;/h6&gt;

&lt;p&gt;Aggregates should be plain old Java.&lt;/p&gt;

&lt;h6 id=&quot;packages&quot;&gt;Packages&lt;/h6&gt;

&lt;p&gt;When working with Aggregates, place each Aggregate in its own package and work with package level visibility in terms of information hiding.&lt;/p&gt;

&lt;h6 id=&quot;creation-of-aggregates-there-are-two-options&quot;&gt;Creation of Aggregates: there are two options&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;Use the Root Entity directly.&lt;/li&gt;
  &lt;li&gt;Explicitly create an aggregate concept around your Entities and Value Objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make up an educated decision of your own.&lt;/p&gt;

&lt;h6 id=&quot;builder-pattern&quot;&gt;Builder pattern.&lt;/h6&gt;

&lt;p&gt;The Builder pattern works very well with Aggregates as a substitute to the DDD factory. All Aggregates have Builders in this author’s project.&lt;/p&gt;

&lt;h6 id=&quot;use-an-annotation-aggregate-and-aggregatebuilder&quot;&gt;Use an annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@Aggregate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@AggregateBuilder&lt;/code&gt;.&lt;/h6&gt;

&lt;p&gt;Why?
To have a code review system in place that checks whether Aggregates are publicly visible and other non-Aggregate classes are packaged protected.
Michael recommends &lt;a href=&quot;https://www.archunit.org/&quot; target=&quot;_blank&quot;&gt;ArchUnit&lt;/a&gt;, a unit testing tool for software architectures to verify visibility of classes and other architectural rules.&lt;/p&gt;

&lt;h4 id=&quot;application-services&quot;&gt;Application Services&lt;/h4&gt;

&lt;p&gt;The ScoringApplicationService class holds a service that orchestrates between a lot of Aggregates.&lt;/p&gt;

&lt;h4 id=&quot;repositories&quot;&gt;Repositories&lt;/h4&gt;

&lt;p&gt;In Spring Data, one uses Spring Data JPA repositories with JPA Entities. But remember these JPA entities shouldn’t be your DDD Entities.&lt;/p&gt;

&lt;h3 id=&quot;architectures&quot;&gt;Architectures&lt;/h3&gt;

&lt;p&gt;The hexagonal onion architecture is not your only option and is not suitable for everything.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;DDD Architecture&quot; src=&quot;/img/spring-io-2018/ddd-architecture.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;crud&quot;&gt;CRUD&lt;/h4&gt;

&lt;p&gt;If you use a CRUD architecture, Spring Data REST or a context that doesn’t run on business Entities or Aggregates may be suitable.&lt;/p&gt;

&lt;h4 id=&quot;query-driven-contexts&quot;&gt;Query Driven contexts&lt;/h4&gt;

&lt;p&gt;All the logic resides within queries.&lt;/p&gt;

&lt;h3 id=&quot;domain-events&quot;&gt;Domain Events&lt;/h3&gt;

&lt;p&gt;For communication between Bounded Contexts there are two possible differentiations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Orchestration.&lt;/li&gt;
  &lt;li&gt;Choreography.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Orchestration is about &lt;em&gt;synchronous calls&lt;/em&gt; going somewhere.&lt;/p&gt;

&lt;p&gt;Choreography is about &lt;em&gt;events&lt;/em&gt;: domain events, event sourcing and event storming.
Choreography turns around the call flow so for example: the credit application submits a Credit Application Submitted Event and the scoring component reacts on that Event.
You model the information about your activity as a flow of discrete events.&lt;/p&gt;

&lt;h4 id=&quot;options-for-event-payload&quot;&gt;Options for Event Payload&lt;/h4&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;Event Payload Options&quot; src=&quot;/img/spring-io-2018/event-payload-options.jpg&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;full-payload&quot;&gt;Full Payload.&lt;/h5&gt;

&lt;p&gt;Put everything we filled out in the credit application in there and work with it.&lt;/p&gt;

&lt;h6 id=&quot;rest-url&quot;&gt;REST URL.&lt;/h6&gt;

&lt;p&gt;Use RESTful URLs to REST resources for the event; not the Spring Data REST repository.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Empty.&lt;/li&gt;
  &lt;li&gt;Mix.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;Infrastructure Options&quot; src=&quot;/img/spring-io-2018/infrastructure-options.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apache Kafka or message brokers are not the only options for infrastructure. You can also work with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brokers (for example Kafka or RabbitMQ): use Spring Cloud Stream.&lt;/li&gt;
  &lt;li&gt;HTTP Feeds (for example Atom): use Spring MVC with Quartz and Rome libraries.&lt;/li&gt;
  &lt;li&gt;Internal Event Bus: use Spring Application Events. Eventing within same JVM, so not using an external system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The credit application offers a HTTP feed using Atom that provides new credit agency ratings.
Feed polling happens by a combination of REST with Atom: using Spring MVC and the Rome library (to create Atom feeds).&lt;/p&gt;

&lt;p&gt;At the end of the talk, Michael referenced the &lt;a href=&quot;https://github.com/ddd-by-examples&quot; target=&quot;_blank&quot;&gt;ddd-by-examples GitHub project&lt;/a&gt; as a great resource.&lt;/p&gt;

&lt;p&gt;Michael is currently writing a book, Hands-on Domain-Driven Design by example, for which you can get notified upon release by signing up on &lt;a href=&quot;https://leanpub.com/ddd-by-example&quot; target=&quot;_blank&quot;&gt;Leanpub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The slides of this talk can be found on &lt;a href=&quot;https://speakerdeck.com/mploed/implementing-ddd-with-the-spring-ecosystem&quot; target=&quot;_blank&quot;&gt;Speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;migrating-legacy-enterprise-java-applications-to-spring-boot-by-mark-heckler&quot;&gt;Migrating legacy enterprise Java applications to Spring Boot by &lt;a href=&quot;https://twitter.com/mkheckler&quot; target=&quot;_blank&quot;&gt;Mark Heckler&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Mark Heckler&quot; src=&quot;/img/spring-io-2018/mark-heckler.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Mark explained how easy it can be to migrate an existing legacy Enterprise Java application to a modern, state-of-the-art Spring Boot app.
Many people think that migrating these kinds of applications is impossible or very hard without rewriting the whole thing, but Mark gave us some very good pointers on how to do it quickly and efficiently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generate a new skeleton project from &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot;&gt;start.spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use schema.sql and data.sql data sheets to migrate and test your database&lt;/li&gt;
  &lt;li&gt;Use Kotlin to vastly simplify your code by using data classes to simplify access to members and constructors, and by moving the constructor definition in the same line as the class definition&lt;/li&gt;
  &lt;li&gt;Using Spring Data, no more need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;PersistenceContext&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using Spring MVC with &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;, no more need to declare &lt;code class=&quot;highlighter-rouge&quot;&gt;@Produces&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@Consumes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Less code: your code vastly diminishes using Kotlin and data classes&lt;/li&gt;
  &lt;li&gt;The Spring Boot + Kotlin combination greatly reduces the amount of boilerplate code&lt;/li&gt;
  &lt;li&gt;Business logic and Service Layer of the old application remains the same and is better encapsulated&lt;/li&gt;
  &lt;li&gt;Code becomes easier to maintain, easier to test&lt;/li&gt;
  &lt;li&gt;Spring Boot offers more and better deployment options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JWorks consultants have done these kinds of migrations at multiple clients, with great success rates.
Non-technical people like functional analysts, product owners and business experts are continuously amazed at the speed with which we are able to do this.
Technical people that have been doing JEE development for years ask us how they can learn Spring Boot.&lt;/p&gt;

&lt;h2 id=&quot;spring-security-5-workshop-by-andreas-falk&quot;&gt;Spring Security 5 Workshop by &lt;a href=&quot;https://twitter.com/andifalk&quot; target=&quot;_blank&quot;&gt;Andreas Falk&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Andreas Falk&quot; src=&quot;/img/spring-io-2018/andreas-falk.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The target of this workshop was to learn how to make an initially unsecured (reactive) web application more and more secure step-by-step.
It was a very well prepared workshop and I really enjoyed the interactivity with Andreas, he answered questions on the fly and helped us understand some of the finer details and changes in Spring Security 5, especially when using it with Spring Boot.&lt;/p&gt;

&lt;p&gt;I don’t want to diminish the excellent Spring Security workshop from Andreas Falk by copying anything from him.
He deserves all the credit for his amazing work so I’m just gonna link to it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://andifalk.github.io/spring-security-5-workshop/&quot; target=&quot;_blank&quot;&gt;https://andifalk.github.io/spring-security-5-workshop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you Andreas for this great resource!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-framework-5---hidden-gems-by-juergen-hoeller&quot;&gt;Spring Framework 5 - Hidden Gems by &lt;a href=&quot;https://twitter.com/springjuergen&quot; target=&quot;_blank&quot;&gt;Juergen Hoeller&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Juergen Hoeller&quot; src=&quot;/img/spring-io-2018/juergen-hoeller.jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Since almost every feature was backported to 4.3, most of them are already known to the general public.
Though there are 7 areas of refinement within 5.0 that aren’t widely known to the public.&lt;/p&gt;

&lt;h3 id=&quot;commons-logging-bridge&quot;&gt;Commons Logging Bridge&lt;/h3&gt;

&lt;p&gt;So the Spring team came up with a new dependency called &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-jcl&lt;/code&gt; which is actually a reimplementation of a logging bridge.
It is a required dependency and is here to help streamline the logging functionality.
The main difference with this way of working is that you don’t need to go through a dependency hell where you would manually add exclusions to ignore certain logging dependencies.
Just add the logging library to your classpath and everything will switch to the logging implementation of your choice.
It now has first class support for Log4J 2 (version 1 has reached its end of life), SLF4J and JUL.&lt;/p&gt;

&lt;h3 id=&quot;build-time-components-indexer&quot;&gt;Build-Time Components Indexer&lt;/h3&gt;

&lt;p&gt;The file system traversal for classpath scanning of all packages within the specified base packages using either &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt; might be slow on startup.
This is especially true if your application is started for a small period of time or where I/O is very expensive.
Think short-running batch processes and functions, or applications being started and stopped on Google App Engine every 2 minutes.
The common solution was to narrow your base packages, or even to fully enumerate your component classes so you would skip scanning all together.
Starting with 5.0 there is a new build-time annotation processor that will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/spring.components&lt;/code&gt; file per JAR containing all the classes which in turn will be used automatically at runtime for compatible component-scan declarations.&lt;/p&gt;

&lt;h3 id=&quot;nullability&quot;&gt;Nullability&lt;/h3&gt;

&lt;p&gt;The new version contains comprehensive nullability declarations across the codebase.
Fields, method parameters and method return values are still by default non-null, but now there are individual &lt;code class=&quot;highlighter-rouge&quot;&gt;@Nullable&lt;/code&gt; declarations for actually nullable return values for example.
For Java this means that we have nullability validation in IntelliJ IDEA and Eclipse.
This allows the Spring Team to find subtle bugs or gaps within the framework’s codebase.
It will also allow us, as developers, to validate our interactions with the Spring APIs.
When you’re writing code in Kotlin it will give you straightforward assignments to non-null variables because the Kotlin compiler will only allow assignments for APIs with clear nullability.&lt;/p&gt;

&lt;h3 id=&quot;data-class-binding&quot;&gt;Data Class Binding&lt;/h3&gt;

&lt;p&gt;Spring Data can now work with immutable classes.
No need for setters anymore since it can work with named constructor arguments!
The property names are matched against the constructor parameter names.
You can do this by explicitly using &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConstructorProperties&lt;/code&gt; or they are simply inferred from the class bytecode (if you pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-parameters&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-debug&lt;/code&gt; as compilation argument).
This is a perfect match with Kotlin and Lombok data classes where the getter and setters are generated at compile time.&lt;/p&gt;

&lt;h3 id=&quot;programmatic-lookup-via-objectprovider&quot;&gt;Programmatic Lookup via ObjectProvider&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectProvider&lt;/code&gt; is a variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectFactory&lt;/code&gt;, which is designed specifically for injection points, allowing for programmatic optionality and lenient not-unique handling.
This class had the following original methods: &lt;code class=&quot;highlighter-rouge&quot;&gt;@Nullable getIfAvailable()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Nullable getIfUnique()&lt;/code&gt;.
With the new version of Spring these methods have been overloaded with &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.function&lt;/code&gt; callbacks which empowers the developer to return a default value instead of returning &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;refined-resource-interaction&quot;&gt;Refined Resource Interaction&lt;/h3&gt;

&lt;p&gt;Spring’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; abstraction in &lt;code class=&quot;highlighter-rouge&quot;&gt;core.io&lt;/code&gt; has been overhauled to expose the NIO.2 API at application level, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource.getReadableChannel()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;WritableResource.getWritableChannel()&lt;/code&gt;.
They are also using the NIO.2 API internally wherever possible, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;FileSystemResource.getInput/OutputStream()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;FileCopyUtils.copy(File, File)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;asynchronous-execution&quot;&gt;Asynchronous Execution&lt;/h3&gt;

&lt;p&gt;Spring 5.0 comes with a couple of interface changes that will help you with asynchrous execution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ListenableFuture&lt;/code&gt; now has a &lt;code class=&quot;highlighter-rouge&quot;&gt;completable()&lt;/code&gt; method which exposes the instance as a JDK &lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskScheduler&lt;/code&gt; interface has new methods as an alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt; arguments: &lt;code class=&quot;highlighter-rouge&quot;&gt;scheduleAtFixedRate(Runnable, Instant, Duration)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scheduleWithFixedDelay(Runnable, Instant, Duration)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;ScheduledTaskHolder&lt;/code&gt; interface for monitoring the current tasks, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;ScheduledTaskRegistrar.getScheduledTasks()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ScheduledAnnotationBeanPostProcessor.getScheduledTasks()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google-cloud-native-with-spring-boot-by-ray-tsang&quot;&gt;Google Cloud Native with Spring Boot by &lt;a href=&quot;https://twitter.com/saturnism&quot; target=&quot;_blank&quot;&gt;Ray Tsang&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Ray Tsang&quot; src=&quot;/img/spring-io-2018/ray-tsang.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;On one hand this workshop lowered the entry threshold for newbies.
On the other hand it provided insight about what services Google Cloud has to offer.
Google Spanner, Pub/Sub messaging system, CloudSQL, Runtime Config.
They were all addressed.&lt;/p&gt;

&lt;p&gt;It’s quite cool to see how the team at Google managed to create decent Spring Boot Starters for all these services.
They basically remove all the boilerplate code for you and offer you easy connectivity to all its cloud services.
The sensible auto-configuration pre-fills most of the settings required to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PubSub as messaging middleware&lt;/li&gt;
  &lt;li&gt;CloudSQL as a managed relational database&lt;/li&gt;
  &lt;li&gt;Runtime Config as the backing store for your application configuration&lt;/li&gt;
  &lt;li&gt;Google Spanner as a horizontally scalable, strongly consistent, relational database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the workshop, we created a guestbook application which consisted of a frontend and some backend microservices.
The workshop builds this up neatly by adding features to the application step by step.
Each step introduces you to another Google Cloud service.
Those of you who want to make the workshop yourself, check out the link below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workshop: &lt;a href=&quot;http://bit.ly/spring-gcp-lab&quot; target=&quot;_blank&quot;&gt;http://bit.ly/spring-gcp-lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code: &lt;a href=&quot;https://github.com/saturnism/spring-cloud-gcp-guestbook&quot; target=&quot;_blank&quot;&gt;https://github.com/saturnism/spring-cloud-gcp-guestbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cloud console: &lt;a href=&quot;https://console.cloud.google.com/&quot; target=&quot;_blank&quot;&gt;https://console.cloud.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-pubsub&quot;&gt;Google PubSub&lt;/h3&gt;

&lt;p&gt;What stayed with me is Google’s Pub/Sub message-oriented middleware.
A publisher that creates the messages sends them to a topic.
Consumers can subscribe to this topic to obtain the messages.
Publishers and subscribers are decoupled. Neither of them is required to know the other one.
Subscribers will either pull messages or get messages pushed from the topic.
PubSub messages will be delivered at least once, but can be processed multiple times by different subscribers.
Unprocessed PubSub messages are only kept for 7 days.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ray told us a fun story about how he wanted to really explore the capabilities of PubSub and see how many messages it could handle.
They created this website called &lt;a href=&quot;https://pi.delivery/&quot; target=&quot;_blank&quot;&gt;https://pi.delivery/&lt;/a&gt; which calculates the numbers of pi.
It’s really interesting to read how hard they were able to stress PubSub (hint: BILLIONS? TRILLIONS!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;flight-of-the-flux-by-simon-baslé&quot;&gt;Flight of the Flux by &lt;a href=&quot;https://twitter.com/simonbasle&quot; target=&quot;_blank&quot;&gt;Simon Baslé&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Simon Baslé&quot; src=&quot;/img/spring-io-2018/simon-basle.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this talk Simon went deeper into the inner workings of &lt;a href=&quot;https://projectreactor.io/&quot; target=&quot;_blank&quot;&gt;Spring Reactor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The session started off giving a brief recap of reactive programming and reactive streams
before delving deeper into the machinery behind Reactor 3.&lt;/p&gt;

&lt;h3 id=&quot;assembly-time-vs-execution-time&quot;&gt;Assembly time vs Execution time&lt;/h3&gt;

&lt;p&gt;When programming with Reactor 3 (and other functional reactive libraries like RxJava)
the programming model is quite different compared to the classic imperative style.
Basically your whole chain is lazy, you describe a sequence of operations and &lt;strong&gt;no actual
processing happens until someone subscribes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To give an example:&lt;/p&gt;

&lt;p&gt;Assembly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myFlux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As stated above, all that really happens when this code is called is creating a chain of operators
(under the hood this phase is also used for things like &lt;strong&gt;operator fusion&lt;/strong&gt;, see below).&lt;/p&gt;

&lt;p&gt;Execution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myFlux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method is called the actual chain is executed and the length of the string is printed in the console.&lt;/p&gt;

&lt;p&gt;For those familiar with Java 8 it’s basically the same as Java 8 streams,
nothing really happens until a terminal operation is used (&lt;code class=&quot;highlighter-rouge&quot;&gt;collect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;, …).&lt;/p&gt;

&lt;p&gt;One of the drawbacks of this is error handling.
Since the error doesn’t happen until the subscription, it’s harder to see where the error actually happens.
To alleviate this, Reactor provides a feature called &lt;strong&gt;assembly tracing&lt;/strong&gt; which can be enabled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;checkpoint()&lt;/code&gt; operator.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nothing happens until you subscribe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cold-and-hot-observables&quot;&gt;Cold and hot observables&lt;/h3&gt;

&lt;p&gt;Previous statement holds for most observables typically encountered in a project.
HTTP calls, data lookups, etc. No data is actually being produced until someone subscribes.
Sometimes however an observable can be a constantly emitting event stream.
When multiple subscribers subscribe on a cold observable, each of these subscriptions will trigger the whole chain from the start.
A hot observable is constantly producing data and will only give the elements to the subscriber emitted after subscription time.&lt;/p&gt;

&lt;h3 id=&quot;scheduling&quot;&gt;Scheduling&lt;/h3&gt;

&lt;p&gt;Reactor is concurrency agnostic which means it doesn’t impose a concurrency model while it does give the developer the tools to change Reactor’s executor behavior.&lt;/p&gt;

&lt;p&gt;This is done using the scheduler abstraction: a scheduler defines the execution context, this can be the same thread, another thread or using a threadpool.
The special operators &lt;code class=&quot;highlighter-rouge&quot;&gt;publishOn()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribeOn()&lt;/code&gt; allow you to change the execution context of the current chain.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;publishOn()&lt;/code&gt; changes the execution context of the downstream operators.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduler1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomethingWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;op1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;op2&lt;/code&gt; will execute in the original execution context(usually the thread in which the subscribe is called).
&lt;code class=&quot;highlighter-rouge&quot;&gt;op3&lt;/code&gt; and the action defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method itself will execute in &lt;code class=&quot;highlighter-rouge&quot;&gt;scheduler1&lt;/code&gt;’s execution context.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribeOn()&lt;/code&gt; changes the execution context of the subscription, meaning of the start of the execution of the chain.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduler1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomethingWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The whole chain will execute in scheduler1’s execution context.&lt;/p&gt;

&lt;h3 id=&quot;work-stealing&quot;&gt;Work stealing&lt;/h3&gt;

&lt;p&gt;Although previous topics surface easily and are simpler to demonstrate, this was perhaps the most abstract one of the session along with operator fusion.
When using schedulers supporting parallel execution, Reactor uses so called ‘work stealing’ algorithms to balance the load on the different threads.
If a thread is idle it can take over execution of tasks that were originally scheduled to be executed by a different thread.
Under the hood, this is achieved by using a shared queue for the tasks and a drain loop.&lt;/p&gt;

&lt;h3 id=&quot;operator-fusion&quot;&gt;Operator fusion&lt;/h3&gt;

&lt;p&gt;One of the big advantages of having a chain of tasks defined and split up in multiple steps is that it allows the engine to identify possible optimizations in the chain.
Since each individual operator also has an overhead (eg. queue for work stealing), it’s sometimes more efficient to combine some operators and execute them as one.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reactor tries to achieve this by using a negotiation process between the operators.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This talk gave us more insight into the more advanced parts of Reactor, arming us with knowledge to tackle potential problems in a reactive environment and helping us understand Reactor’s deeper mechanisms.&lt;/p&gt;

&lt;p&gt;For more information, Simon uploaded his presentation on &lt;a href=&quot;https://speakerdeck.com/simonbasle/flight-of-the-flux?slide=1&quot; target=&quot;_blank&quot;&gt;Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spring-kafka---one-more-arsenal-in-a-distributed-toolbox-by-nakul-mishra&quot;&gt;(Spring) Kafka - One more arsenal in a distributed toolbox by &lt;a href=&quot;https://twitter.com/nklmish&quot; target=&quot;_blank&quot;&gt;Nakul Mishra&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Nakul Mishra&quot; src=&quot;/img/spring-io-2018/nakul-mishra.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nakul started by describing &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt;,
a very potent messaging system which allows you very easily to act as a throughput between your applications,
as long as you stay away from &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/recreating-esb-antipatterns-with-kafka&quot; target=&quot;_blank&quot;&gt;recreating ESB anti-patterns with Kafka&lt;/a&gt;.
Kafka is more than a messaging queue, combining speed, scalability and stronger ordering guarantees then traditional messaging keys.
In order to benefit from this ordering, it is important to choose a correct partition key.
Kafka puts more emphasis on smart consumers, meaning a more client centric approach vs the broker centric approach used by Message Oriented Middleware.
By designing for retention and scale, Kafka gives consumers (clients) the time to process the messages they want to process whenever they want to.&lt;/p&gt;

&lt;p&gt;It is also possible to use Kafka as a database, by having it process a stream of data in real-time using &lt;a href=&quot;https://www.confluent.io/product/ksql/&quot; target=&quot;_blank&quot;&gt;KSQL&lt;/a&gt; of which the results can very easily be pushed to external systems (HDFS, S3, JDBC).&lt;/p&gt;

&lt;p&gt;To be scaleable, Kafka is kept simple at its core, all data is stored as a partitioned log.
This means that writes are append-only and reads are a single seek-and-scan allowing the underlying filesystem to very easily handle the storing and caching of messages.
Also when reading, data is directly copied over from the disk buffer into the network buffer bypassing the JVM, ideally for flooding your network.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-kafka&quot; target=&quot;_blank&quot;&gt;Spring Kafka&lt;/a&gt; integrates Kafka with Spring giving you all the benefits of the Spring ecosystem.
It also supports &lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot; target=&quot;_blank&quot;&gt;Kafka Streams&lt;/a&gt; since a few months.
&lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.1.6.RELEASE/reference/html/_reference.html#testing&quot; target=&quot;_blank&quot;&gt;Testing&lt;/a&gt; is made easier by providing an &lt;code class=&quot;highlighter-rouge&quot;&gt;@EmbeddedKafka&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils&lt;/code&gt; class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@EmbeddedKafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;KafkaStreamsTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STREAMING_TOPIC1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;KafkaStreamsTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STREAMING_TOPIC2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Spring Kafka also has a starter available for &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html#boot-features-kafka&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; which makes it very easy to get started with Kafka and start playing around.
As always, just go to &lt;a href=&quot;http://start.spring.io/&quot; target=&quot;_blank&quot;&gt;start.spring.io&lt;/a&gt; and get the Kafka dependency.&lt;/p&gt;

&lt;p&gt;The slides of this presentation can be found at &lt;a href=&quot;https://www.slideshare.net/nklmish/springkafka-one-more-arsenal-in-a-distributed-toolbox/&quot; target=&quot;_blank&quot;&gt;slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;breaking-down-monoliths-into-system-of-systems-by-oliver-gierke&quot;&gt;Breaking down monoliths into system of systems by &lt;a href=&quot;https://twitter.com/olivergierke&quot; target=&quot;_blank&quot;&gt;Oliver Gierke&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Oliver Gierke&quot; src=&quot;/img/spring-io-2018/oliver-gierke.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The goal of this workshop is not to provide a clear architecture of the perfect application, but more to make you think.
To let you reflect about your existing applications.&lt;/p&gt;

&lt;p&gt;There is a shorter version of this talk &lt;a href=&quot;https://www.youtube.com/watch?v=VWefNT8Lb74&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; while this one consumed a full two hours.
This gave us the possibility to have a more in-depth look at the code that Oliver prepared and look into potential problems, which would be much harder were it a one hour session.&lt;/p&gt;

&lt;p&gt;The workshop basically is a summary of observations about the workings of monoliths and microservices.
It all tends to boil down to the correct definition of bounded contexts within applications, how you can divide your application in logical modules and how these can communicate with each other.&lt;/p&gt;

&lt;p&gt;First we will observe what happens when a monolith is transformed into a microlith AKA a distributed monolith.
Subsequently we will improve the design of the monolith with these bounded contexts and end up with a modulith.
This modulith is still a single application, a monolith, but with different bounded contexts each having clearly defined borders allowing us to easier divide the work over various teams.&lt;/p&gt;

&lt;p&gt;From a modulith, one can go to a system of systems, a true microservice architecture.
In a system of systems there are two ways you can implement the communication, either via messaging or via REST.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Refactoring to a system of systems  (from Oliver Gierke workshop)&quot; src=&quot;/img/spring-io-2018/sos-workshop.png&quot; style=&quot;max-height:'1075px'; max-width='1920px'&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The sample code of this workshop can be found on &lt;a href=&quot;https://github.com/olivergierke/sos&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;monolith&quot;&gt;Monolith&lt;/h3&gt;

&lt;p&gt;The monolith is reasonably ordered and the bounded contexts have been split in various packages.&lt;/p&gt;

&lt;p&gt;When building your Java application, you should make optimal use of the package options provided by Java as mentioned in this &lt;a href=&quot;http://olivergierke.de/2013/01/whoops-where-did-my-architecture-go/&quot; target=&quot;_blank&quot;&gt;blogpost&lt;/a&gt; of 2013.
It stated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make your code package protected whenever it does not need to be accessed from the outside, a good starting point is to make your repositories no longer public.&lt;/li&gt;
  &lt;li&gt;Whenever there is leakage over the bounded contexts, for example when &lt;code class=&quot;highlighter-rouge&quot;&gt;LineItems&lt;/code&gt; contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Products&lt;/code&gt;, try to use IDs and not the actual objects of another bounded context, because whenever you update an object used within another bounded context, you will also leak into that context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also noted that badly structured applications tend to be built from the bottom up, from DB to the top.
This means that your design is going to be way too data-centric instead of focusing on the real business interactions you are supposed to handle.&lt;/p&gt;

&lt;p&gt;Try to prevent using methods which update two bounded contexts simultaneously, as these methods have the reflex of drawing more and more code in, and they tend to grow like a cancer, killing your application from the inside out.&lt;/p&gt;

&lt;p&gt;To summarize:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Move bounded contexts into packages&lt;/li&gt;
  &lt;li&gt;Inter-context interaction is processed locally and resulting in either success or an exception (method calls in the JVM are very efficient and executed exactly once)&lt;/li&gt;
  &lt;li&gt;Avoid referencing two domain classes over bounded contexts, it’s convenient but results in problems&lt;/li&gt;
  &lt;li&gt;When you leak into other bounded contexts, there is a great risk of creating circular dependencies&lt;/li&gt;
  &lt;li&gt;When there are no clear boundaries, adding a new feature often requires you to touch other parts of the system&lt;/li&gt;
  &lt;li&gt;A monolith is easy to refactor&lt;/li&gt;
  &lt;li&gt;By its nature, it has strong consistency but this is also a disadvantage as transactions become more brittle when they fail because of related business functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The monolith example code can be found &lt;a href=&quot;https://github.com/olivergierke/sos/tree/master/00-monolith&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;microlith&quot;&gt;Microlith&lt;/h3&gt;

&lt;p&gt;Creating a microlith means splitting up your systems into various smaller systems.
This doesn’t mean that suddenly all your problems have been solved.&lt;/p&gt;

&lt;p&gt;If you do not correctly define your bounded contexts in order to minimize your communication, the chance is great that you have made a microlith with the following problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You are no longer able to use local transaction consistency&lt;/li&gt;
  &lt;li&gt;Local method invocation is transformed into RPC-style HTTP calls&lt;/li&gt;
  &lt;li&gt;You have translated the transactions of your monolith into a distributed system, needing HTTP to update each other&lt;/li&gt;
  &lt;li&gt;Remote calls are executed while serving user requests and this over multiple services&lt;/li&gt;
  &lt;li&gt;Running and testing requires the other services to be available&lt;/li&gt;
  &lt;li&gt;There is a strong focus on API contracts, which tend to be very CRUD-looking with a lack of business abstraction and hypermedia&lt;/li&gt;
  &lt;li&gt;Detecting breaking API changes is prioritized over making evolvable APIs&lt;/li&gt;
  &lt;li&gt;One tends to add more technology in order to solve issues: bulkheads, retries, circuit breakers, asynchronous calls, more monitoring systems, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It tends to minimize the risks of a rollback, but it does not really solve any issue, it just distributes your problems.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first rule of distributed systems is: don’t distribute your system until you have an observable reason to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you did not define your bounded contexts properly, it is very difficult for you to observe how to distribute your system.&lt;/p&gt;

&lt;p&gt;Example code of the microlith can be found &lt;a href=&quot;https://github.com/olivergierke/sos/tree/master/10-microlith&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;modulith&quot;&gt;Modulith&lt;/h3&gt;

&lt;p&gt;We will start using events inside our modulith, as well as more domain specific methods, like an &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt;.
This makes everything more abstract, making your domain objects much more than glorified getters and setters.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We don’t do CQRS or event sourcing, but we just use eventing as a way to signal events over bounded contexts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These events make it relatively easy to split up the work, they can serve as either input or output for different services within the applications.
Your units of work will have clear boundaries making testing and design easier.&lt;/p&gt;

&lt;p&gt;The differences with a monolith are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Focus of domain logic has moved to aggregates&lt;/li&gt;
  &lt;li&gt;Integration between bounded contexts is event based&lt;/li&gt;
  &lt;li&gt;The dependency between bounded contexts is inverted&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side Step: Application Events with Spring Data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a very powerful mechanism to publish events in a Spring application.&lt;/p&gt;

&lt;p&gt;Whenever you need to send data to another bounded context, you trigger events.
This has the advantage that your business services no longer needs to know about each other, they just need to trigger an event which gets picked up by the services which are interested in this event.&lt;/p&gt;

&lt;p&gt;Transactional semantics are still retained because the eventing is synchronous, by default.
This also applies for JEE eventing.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/event/TransactionalEventListener.html&quot; target=&quot;_blank&quot;&gt;@TransactionalEventListener&lt;/a&gt; annotation allows you to delay the execution of events,
so for example, you can send out an email when an &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; has truly been completed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side Step: Error Scenarios&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a synchronous event listener fails, this will be handled by the transaction, so no worries.&lt;/p&gt;

&lt;p&gt;But when an asynchronous event listener fails, the transaction does not get rolled back and you will need to deal with retries.&lt;/p&gt;

&lt;p&gt;You can make use of an Event Publication Registry when you use &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/event/TransactionalEventListener.html&quot; target=&quot;_blank&quot;&gt;TransactionalEventListeners&lt;/a&gt; as these event listeners are decorated with a log before the commit, since the system needs to know the events need to be sent out to.
When the event has been processed, the log will be cleared.
If it doesn’t get cleared the system can keep retrying, so you don’t lose events.&lt;/p&gt;

&lt;p&gt;Example code of the modulith can be found &lt;a href=&quot;https://github.com/olivergierke/sos/tree/master/20-modulith&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;system-of-systems&quot;&gt;System of Systems&lt;/h3&gt;

&lt;h4 id=&quot;messaging&quot;&gt;Messaging&lt;/h4&gt;

&lt;p&gt;Whenever you make use of a message broker, you introduce a potential single point of failure, like with &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt; or &lt;a href=&quot;https://www.rabbitmq.com/&quot; target=&quot;_blank&quot;&gt;RabbitMQ&lt;/a&gt;.
These brokers know about all the messages of all the systems and decide how long these messages will be retained.&lt;/p&gt;

&lt;p&gt;Coupling does exist, although not explicit, but the message format will decide which version of a service can process these messages, just as with REST.
Especially if you keep your events for a long time, which is possible with Kafka, you might need to think about transforming existing events.&lt;/p&gt;

&lt;p&gt;But these messaging systems tend to be designed for scale.&lt;/p&gt;

&lt;p&gt;Pro tip: make use of &lt;a href=&quot;https://github.com/json-path/JsonPath&quot; target=&quot;_blank&quot;&gt;JsonPath&lt;/a&gt; annotations for the message payload in order to make it more robust.&lt;/p&gt;

&lt;p&gt;Example code of a system of systems with messaging can be found &lt;a href=&quot;https://github.com/olivergierke/sos/tree/master/30-messaging-sos&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;rest-messaging&quot;&gt;REST Messaging&lt;/h4&gt;

&lt;p&gt;If you use REST you will have to deal with caching, pagination and conditional requests.&lt;/p&gt;

&lt;p&gt;Messages do not tend to be stored for long periods of time and most communication tends to be synchronous.
One does have to pay attention on not to lose events as your application will immediately know if the message was processed correctly, incorrectly or timed out.&lt;/p&gt;

&lt;h4 id=&quot;rest-polling&quot;&gt;REST Polling&lt;/h4&gt;

&lt;p&gt;When using a polling mechanism, your producers do not send out messages to your consumers, but the consumers will poll the producers for new events to process.&lt;/p&gt;

&lt;p&gt;This means that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You do not need any additional infrastructure like an Apache Kafka or a Message Bus&lt;/li&gt;
  &lt;li&gt;Event publication is part of the local transaction&lt;/li&gt;
  &lt;li&gt;The publishing system (producer), controls the lifecycle of the events and can transform these if necessary&lt;/li&gt;
  &lt;li&gt;The events never leave the publishing system&lt;/li&gt;
  &lt;li&gt;There might be a bigger consistency gap, depending on how frequently the consumers poll&lt;/li&gt;
  &lt;li&gt;It does not scale that well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example code with REST can be found &lt;a href=&quot;https://github.com/olivergierke/sos/tree/master/40-restful-sos&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This was a great workshop which makes you think about the design decisions you have made for your applications.
If you ever get the opportunity to participate in one of these workshops, do not hesitate to join as they are much more valuable than regular talks that can be viewed online as well.&lt;/p&gt;

&lt;h2 id=&quot;observability-with-spring-based-distributed-systems-by-tommy-ludwig&quot;&gt;Observability with Spring based distributed systems by &lt;a href=&quot;https://twitter.com/TommyLudwig&quot; target=&quot;_blank&quot;&gt;Tommy Ludwig&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tommy Ludwig&quot; src=&quot;/img/spring-io-2018/tommy-ludwig.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tommyludwig&quot; target=&quot;_blank&quot;&gt;Tommy&lt;/a&gt;’s talk introduced three main pillars of observability: logging, metrics, and tracing.&lt;/p&gt;

&lt;p&gt;Tommy explained that observability is achieved through a set of tools and practices that aim to turn data points and contexts into insights.
Observability is something you should care about as it provides a great experience for the users of your system and it builds confidence in production where failure &lt;strong&gt;will&lt;/strong&gt; happen.
You ought to give yourself the tools you need in order to be a good owner in order to detect these failures as early as possible.
Mean time to recovery is key here.
He also quoted Werner Vogels’, the CEO of Amazon, “You build it, you run it” while also adding to it that you need to monitor it.&lt;/p&gt;

&lt;p&gt;Within a Spring Boot project, we have access to Actuator and it is awesome.
It comes with a lot of goodies out of the box.
There is also &lt;a href=&quot;https://github.com/codecentric/spring-boot-admin&quot; target=&quot;_blank&quot;&gt;Spring Boot Admin&lt;/a&gt; that makes it easy to access and use each instance’s Actuator endpoints.&lt;/p&gt;

&lt;p&gt;Distributed systems make observing them hard by design as a request spans multiple processes.
You therefore need to stitch these together in order to fully make sense of it.
There are also more points of failure and adding multiple instances of the same service, for scaling reasons, will only increase the monitoring complexity.&lt;/p&gt;

&lt;p&gt;Tommy named three sides to observability:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logging&lt;/li&gt;
  &lt;li&gt;Metrics&lt;/li&gt;
  &lt;li&gt;Tracing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;/h3&gt;

&lt;p&gt;Logs are request scoped, arbitrary messages that you want to find back later.
They are formatted to give you context via things such as logging levels and the timestamp.
The issue with logs is that they do not scale, concurrent requests intermingle logs, and searching through them can be cumbersome.
In order to tackle these issues you can make use of centralized logging while also adding a query capability to retrieve a collection of matching logs.&lt;/p&gt;

&lt;p&gt;Within Spring Boot we can configure the logging via Spring Environment and via Actuator at runtime.
&lt;a href=&quot;https://cloud.spring.io/spring-cloud-sleuth/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Sleuth&lt;/a&gt; is useful to add a trace ID for request correlation.&lt;/p&gt;

&lt;h3 id=&quot;metrics&quot;&gt;Metrics&lt;/h3&gt;

&lt;p&gt;Metrics aggregate time series data and have a bounded size.
You can slice these based on dimensions, tags and labels.
The main goal of metrics is to visualize and identify trends and deviations, and to raise alerts based on metric queries.
Some examples of metrics are: response time, the response’s body size and memory consumed.
In order to properly measure all this, you need to set up a metrics backend to which all applications publish their metrics data.&lt;/p&gt;

&lt;p&gt;In Spring Boot 2, &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer&quot; target=&quot;_blank&quot;&gt;Micrometer&lt;/a&gt; is introduced as its native metrics library.
Micrometer supports many metrics backends such as Atlas Datadog, Prometheus, SignalFX and Wavefront.
A lot of the instrumentation is auto-configured by Spring Boot and custom metrics are added easily.
These are configurable via properties and common tags such as the application name, the instance, region, zone, and more.&lt;/p&gt;

&lt;h3 id=&quot;tracing&quot;&gt;Tracing&lt;/h3&gt;

&lt;p&gt;Local tracing happens via the Actuator &lt;code class=&quot;highlighter-rouge&quot;&gt;/httptrace&lt;/code&gt; endpoint and displays the latency data.
With distributed tracing you can go across process boundaries which is useful as metrics lack request context and as logs have a local context but limited distributed info.
You define the sample size of the request to trace yourself as you don’t want to trace everything especially if you have a high load.
This sample size is configurable at runtime, especially handy to debug errors in production.
&lt;a href=&quot;https://zipkin.io&quot; target=&quot;_blank&quot;&gt;Zipkin&lt;/a&gt; with its UI helps you to see the timing information visually and is a good tracing backend for Spring applications.&lt;/p&gt;

&lt;p&gt;Using Spring Cloud Sleuth, the tracing instrumentation via &lt;a href=&quot;https://github.com/openzipkin/brave&quot; target=&quot;_blank&quot;&gt;Zipkin’s Brave&lt;/a&gt; is auto-configured.
Via properties you can configure things such as the sampling probability and whether certain endpoints should to be skipped.
It is also compatible with the &lt;a href=&quot;http://opentracing.io/&quot; target=&quot;_blank&quot;&gt;OpenTracing&lt;/a&gt; standard that is being developed under the wings of the &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;CNCF&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;correlation-everywhere&quot;&gt;Correlation everywhere&lt;/h3&gt;

&lt;p&gt;Having set up all of these, you now have correlated logging, metrics and tracing across your system, and you can find the data from each based on identifiers.&lt;/p&gt;

&lt;h3 id=&quot;observability-cycle&quot;&gt;Observability cycle&lt;/h3&gt;

&lt;p&gt;If an issue produces itself we can take the following steps to troubleshoot and bandage the situation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The issue should have been reported via an alert or report&lt;/li&gt;
  &lt;li&gt;We check the metrics of our system&lt;/li&gt;
  &lt;li&gt;If needed, we check the tracing data&lt;/li&gt;
  &lt;li&gt;If needed, we check the logs&lt;/li&gt;
  &lt;li&gt;Based on the gathered information we can triage the issue and make adjustments to prevent a recurrence&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-takeaways&quot;&gt;Key takeaways&lt;/h3&gt;

&lt;p&gt;System wide observability is crucial in distributed architectures.
The tools to help you with this exist and Spring makes it easy to integrate them in your system as the most common cases are covered out-of-the-box or are easily configurable.
Use the right tool for the job and synergise across the different tools.&lt;/p&gt;

&lt;h1 id=&quot;day-2-talks--workshops&quot;&gt;Day 2: Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;h2 id=&quot;machine-learning-exposed-the-fundamentals-by-james-weaver&quot;&gt;Machine learning exposed: The fundamentals by &lt;a href=&quot;https://twitter.com/JavaFXpert&quot; target=&quot;_blank&quot;&gt;James Weaver&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;James Weaver&quot; src=&quot;/img/spring-io-2018/james-weaver.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Machine Learning is a hot topic in tech land with all kinds of applications like predicting property prices, forecasting weather, self-driving cars, plants classification and so on. James gave a brief overview about the fundamentals of Machine Learning and its applications.&lt;/p&gt;

&lt;p&gt;But how can we define Machine Learning? &lt;a href=&quot;https://twitter.com/AndrewYNg&quot; target=&quot;_blank&quot;&gt;Andrew Ng&lt;/a&gt;, Co-founder of Coursera and Adjunct Professor of Stanford University defined Machine learning in his introduction course “Welcome To Machine Learning”&lt;sup&gt;1&lt;/sup&gt; as “&lt;em&gt;Machine Learning is the science of getting computers to learn, without being explicitly programmed&lt;/em&gt;”. An example that Andrew gave was a cleaning robot that can tidy your house. Instead you program the algorithm explicitly on how it should clean. You can for instance let the robot watch you while you demonstrate the tasks on how it should clean and learn from it.&lt;/p&gt;

&lt;p&gt;Later on he gave examples of different categories of machine learning.&lt;/p&gt;

&lt;h3 id=&quot;categories-of-machine-learning&quot;&gt;Categories of Machine Learning&lt;/h3&gt;

&lt;h4 id=&quot;supervised-learning&quot;&gt;Supervised learning&lt;/h4&gt;

&lt;p&gt;This was the category where James gave the most examples of during his talk.
Supervised learning is where you train your model with a dataset which contains the initial data and its correct answers.
The more training data you have, the more accurate your predictions will be.&lt;/p&gt;

&lt;h5 id=&quot;regression-example&quot;&gt;Regression example&lt;/h5&gt;

&lt;p&gt;An example he showed us was the prediction of housing prices using regression.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;House price prediction (From Andrew Ng Learning course)&quot; src=&quot;/img/spring-io-2018/houseprice.png&quot; style=&quot;max-height:'476px'; max-width='876px'&quot; /&gt;
&lt;small class=&quot;center&quot;&gt;(From Andrew NG’s Machine learning course)&lt;/small&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In this example, the dataset consists of instances with a square footage (input) and price (output).
With a regression, we can predict a continuous valued price.&lt;/p&gt;

&lt;h5 id=&quot;classification-example&quot;&gt;Classification example&lt;/h5&gt;

&lt;div class=&quot;row&quot;&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Iris flower classification using machine learning&quot; src=&quot;/img/spring-io-2018/iris-dataset.png&quot; class=&quot;image fit&quot; style=&quot;max-width='374.5px'; max-height='374.5px;'&quot; /&gt;
&lt;small&gt;Source:&lt;a href=&quot;https://en.wikipedia.org/wiki/User:Nicoguaro/Gallery&quot;&gt;Nicoguaro's Wikipedia media gallery&lt;/a&gt; (CC BY 4.0) An example of Supervised Learning using classification &lt;/small&gt;&lt;/span&gt;
&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;Iris flower classification using machine learning&quot; src=&quot;/img/spring-io-2018/test-data.png&quot; cslass=&quot;image fit&quot; /&gt;
&lt;small&gt;&lt;/small&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;Another example of Supervised Learning is to determine a certain species of an Iris flower.
The algorithm tries to determine the species of the flower with the Sepal and Petal size as input.&lt;/p&gt;

&lt;h4 id=&quot;unsupervised-learning&quot;&gt;Unsupervised Learning&lt;/h4&gt;

&lt;p&gt;For Unsupervised Learning on the other hand, you don’t give the right answers with your dataset.
Your learning algorithm will try to find a structure in the given data.&lt;/p&gt;

&lt;p&gt;A method to try to find a structure, is to do it by clustering.
This means the data is ‘grouped’ in clusters together with data that more or less belongs to each other.
Market segment discovery and social media analysis are examples of Unsupervised Learning.&lt;/p&gt;

&lt;h4 id=&quot;reinforcement-learning&quot;&gt;Reinforcement Learning&lt;/h4&gt;

&lt;p&gt;By Reinforcement Learning, you give your algorithm rewards when it did something well.
This type of learning is very popular in game playing.
AlphaGo for example from Google Deepmind was taught by Reinforcement Learning.&lt;/p&gt;

&lt;h3 id=&quot;neural-networks&quot;&gt;Neural networks&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Neural network example&quot; src=&quot;/img/spring-io-2018/neural-network.png&quot; class=&quot;image&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The second part of his talk was about Neural Networks.
(Artificial) Neural Networks are computing systems that are inspired by biological neural networks.
It’s made up of highly interconnected processing elements or ‘nodes’ that can process information.
A Neural Network consists of different layers.
An input layer, one or more hidden layers and an output layer.&lt;/p&gt;

&lt;p&gt;We can visually demonstrate how Neural Networks work with the help of &lt;a href=&quot;https://deeplearning4j.org&quot; target=&quot;_blank&quot;&gt;deeplearning4j&lt;/a&gt;.
You can clone and try out his example on &lt;a href=&quot;https://github.com/JavaFXpert/visual-neural-net-server&quot; target=&quot;_blank&quot;&gt;https://github.com/JavaFXpert/visual-neural-net-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use the flower classification example with our neural network.
&lt;span class=&quot;image center&quot;&gt;&lt;img alt=&quot;Iris flower classification Neural Network Example&quot; src=&quot;/img/spring-io-2018/iris-flower-neural-network.png&quot; class=&quot;image fit&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt; &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/lecture/zcAuT/welcome-to-machine-learning&quot; target=&quot;_blank&quot;&gt;1: Welcome to Machine Learning (Andrew Ng) &lt;/a&gt; &lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing-every-level-of-your-spring-microservices-application-workshop-by-jeroen-sterken--kristof-van-sever&quot;&gt;Testing every level of your Spring Microservices application (Workshop) by &lt;a href=&quot;https://twitter.com/jeroensterken&quot; target=&quot;_blank&quot;&gt;Jeroen Sterken&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/vanseverk&quot; target=&quot;_blank&quot;&gt;Kristof Van Sever&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;introduction-1&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This workshop focused on testing the different levels of a microservices application.
It was split up into two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Testing within a single microservice&lt;/li&gt;
  &lt;li&gt;Testing the relationships between microservices with Spring Cloud contract&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing-a-single-microservice-with-cucumber-and-junit&quot;&gt;Testing a single microservice with Cucumber and JUnit&lt;/h3&gt;

&lt;p&gt;The presentation started off with some of the new features that JUnit 5 has to offer.
Since JUnit 5 supports Java 8, it allows you to use lambdas in assertions, as well as using group assertions with the &lt;code class=&quot;highlighter-rouge&quot;&gt;assertAll()&lt;/code&gt; method.
It’s also possible to run tests multiple times with different parameters, by annotating them with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@ValueSource&lt;/code&gt; for the arguments.&lt;/p&gt;

&lt;h4 id=&quot;behaviour-driven-testing-with-cucumber&quot;&gt;Behaviour driven testing with Cucumber&lt;/h4&gt;

&lt;p&gt;Unit tests alone are not enough of course, you also need to test how different components work together.
Usually it’s the developer who writes such tests, but it’s also possible for non-technicals to write such tests with Cucumber.&lt;/p&gt;

&lt;p&gt;How does this work exactly?&lt;/p&gt;

&lt;p&gt;Cucumber achieves this by using Gherkin, an English plain text language.
It has &lt;code class=&quot;highlighter-rouge&quot;&gt;.feature&lt;/code&gt; files where the different scenarios for a certain feature are described.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
&lt;b&gt;Feature:&lt;/b&gt; A new empty basket can be created and filled with Tapas

&lt;b&gt;Scenario:&lt;/b&gt; Client creates a new Basket, and verifies it's empty
    &lt;b&gt;When&lt;/b&gt; the user creates a new Basket
    &lt;b&gt;Then&lt;/b&gt; the total number of items in the Basket with id 1 equals 0
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The above is a simple example of how to describe a feature and scenario.
The words in bold represent &lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Feature-Introduction&quot; target=&quot;_blank&quot;&gt;Cucumber keywords&lt;/a&gt;, called step definitions.
It’s also possible to substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;Scenario&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Scenario outline&lt;/code&gt; in case you need to test the same scenario with different values.
You can put parameters inside angle brackets (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;), which are substituted with values that you define in an &lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Scenario-Outlines&quot; target=&quot;_blank&quot;&gt;Examples data-table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step is to annotate your methods with the Cucumber step definitions (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;@Given&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;@When&lt;/code&gt;).
The text that you provide the annotations with, should match the text in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.feature&lt;/code&gt; file so that Cucumber can glue the two together.
In this case, the &lt;code&gt;&lt;b&gt;When&lt;/b&gt; the user creates a new Basket&lt;/code&gt; of the example above matches with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@When(&quot;^the user creates a new Basket$&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The annotated methods should execute what you described in the feature files, so in this case the method looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void theUserCreatesANewBasket() {
    userBasketManagement.createNewBasket();
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To try it out for yourself, go to the &lt;a href=&quot;https://github.com/faros/bdd-cucumber&quot; target=&quot;_blank&quot;&gt;Workshop repo&lt;/a&gt;.
There’s a solution branch in case you’re stuck or wish to compare your code.&lt;/p&gt;

&lt;h3 id=&quot;spring-cloud-contract&quot;&gt;Spring Cloud Contract&lt;/h3&gt;

&lt;p&gt;One of the challenges of testing chained microservices is making sure that a microservice stub reflects the actual service at all times.&lt;/p&gt;

&lt;p&gt;One way this can be achieved is by using Spring Cloud Contract.
Spring Cloud Contract enables Consumer Driven Contract development, where one service (consumer) defines its expectations of another service (producer) through a contract.&lt;/p&gt;

&lt;p&gt;The first step is for the consumer to write the test for the new feature, following the TDD approach.&lt;/p&gt;

&lt;p&gt;Next, add the Spring Cloud Starter Contract Verifier dependency and maven plugin to your producer.
Create a base test class to the test package that loads the Spring Context.
Make sure to annotate it with &lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoConfigureMessageVerifier&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should also add the contract to our resources on the producer-side:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
Contract.make{
    description &quot;should return a list of all tapas&quot;

    request{
        method GET()
        url &quot;/tapas&quot;
    }

    response{
        status 200
        headers {
            contentType applicationJson()
        }
        body (
            [
                [
                        id: 0,
                        name: &quot;All i oli&quot;,
                        price: 1.5
                ],
                [
                        id: 1,
                        name: &quot;Banderillas&quot;,
                        price: 3
                ]
             ]
        )
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The above is an example of how a contract is defined, written in Groovy (although YAML is a possibility as well).
It simply specifies that a GET request to &lt;code class=&quot;highlighter-rouge&quot;&gt;/tapas&lt;/code&gt; should return the provided body as application/json.&lt;/p&gt;

&lt;p&gt;Now it’s time to create the stub.
Since you’ve already added the dependency and plugin to your producer, simply run your build for the plugin to generate the stubs.
The built stub artifact will be stored in your local maven repository.
The plugin will also create a test class that extends the base test class we created earlier containing the necessary setup to run your tests.&lt;/p&gt;

&lt;p&gt;The next step is to add the Spring Cloud Contract Stub Runner dependency to the consumer and annotate your test class with &lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoConfigureStubRunner&lt;/code&gt;.
By annotating your class with &lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoConfigureStubRunner&lt;/code&gt; and providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;groupId&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;artifactId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;port&lt;/code&gt; on which the stub will run, your test class is configured to use the producer’s generated stub.&lt;/p&gt;

&lt;p&gt;Interested to try out this Spring Cloud Contract workshop?
You can find the Github repo &lt;a href=&quot;https://github.com/faros/spring-cloud-contract/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;got-triggered&quot;&gt;Got triggered?&lt;/h1&gt;

&lt;p&gt;All talks were recorded by the Spring IO team. You can view them on &lt;a href=&quot;https://www.youtube.com/channel/UCLMPXsvSrhNPN3i9h-u8PYg&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dieter&quot;, &quot;last_name&quot;=&gt;&quot;Hubau&quot;, &quot;github&quot;=&gt;&quot;Turbots&quot;, &quot;twitter&quot;=&gt;&quot;dhubau&quot;, &quot;linkedin&quot;=&gt;&quot;dhubau&quot;, &quot;permalink&quot;=&gt;&quot;/author/dieter-hubau/&quot;, &quot;avatar&quot;=&gt;&quot;dieter-hubau.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud and PaaS&quot;, &quot;email&quot;=&gt;&quot;dieter.hubau@ordina.be&quot;, &quot;phone&quot;=&gt;&quot;0032478458150&quot;, &quot;bio&quot;=&gt;&quot;Dieter is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he helps fellow developers as a Competence Leader for the Cloud &amp;amp; PaaS Competence Center by giving workshops, talks and courses about the newest technologies. In his spare time, Dieter enjoys playing soccer, running, (online) gaming and fiddling around with all kinds of fancy new software.&quot;}</name><email>dieter.hubau@ordina.be</email></author><category term="Conference" /><category term="Spring IO" /><category term="Spring" /><category term="Java" /><category term="Conference" /><summary type="html">Spring IO is back!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/spring-io-2018/spring-io.jpg" /></entry><entry><title type="html">Automated Canary Analysis using Spinnaker - Codelab</title><link href="https://ordina-jworks.github.io/cloud/2018/06/01/Automated-Canary-Analysis-using-Spinnaker.html" rel="alternate" type="text/html" title="Automated Canary Analysis using Spinnaker - Codelab" /><published>2018-06-01T00:00:00+00:00</published><updated>2018-06-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2018/06/01/Automated-Canary-Analysis-using-Spinnaker</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2018/06/01/Automated-Canary-Analysis-using-Spinnaker.html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Spinnaker is a multi-cloud, multi-region automated deployment tool.
Open sourced by Netflix and heavily contributed to by Google, it supports all major cloud providers including Kubernetes.&lt;/p&gt;

&lt;p&gt;Last month, &lt;a href=&quot;https://github.com/spinnaker/kayenta&quot;&gt;Kayenta&lt;/a&gt; was open sourced, a canary analysis engine.
Canary analysis is a technique to reduce the risk from deploying a new version of software into production.
A new version of the software, referred to as the canary, is deployed to a small subset of users alongside the stable running version.
Traffic is split between these two versions such that a portion of incoming requests is diverted to the canary.
This approach can quickly uncover any problems with the new version without impacting the majority of users.&lt;/p&gt;

&lt;p&gt;The quality of the canary version is assessed by comparing key metrics that describe the behavior of the old and new versions.
If there is a significant degradation in these metrics, the canary is aborted and all of the traffic is routed to the stable version in an effort to minimize the impact of unexpected behavior.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Destroy canary&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-08 at 16.08.27.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;

&lt;p&gt;Ordina helps companies through digital transformation using three main focus areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Embracing a DevOps culture and corresponding practices allows teams to focus on delivering value for the business, by changing the communication structures of the organization.
Through automation, teams are empowered and capable of delivering applications much faster to production.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having a modular decoupled architecture, our second focus area, fits well with this model.
Making these changes to our architecture in combination with a culture of automation, results in a lot more moving parts in our application landscape.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Naturally, the next step is tackling the underlying infrastructure accomodate this new architecture and way of working.
Cloud automation is therefore our final focus area in digital transformations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Releasing more often doesn’t only allow new features reaching the user faster, it also fastens the feedback loops, improves reliability and availability, developer productivity and efficiency. Spinnaker plays a crucial part in all of this, as it allows more frequent and faster deployments, without sacrificing safety.&lt;/p&gt;

&lt;p&gt;Automated canary analysis, demonstrated in this codelab, is a powerful tool in that sense.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#goal&quot;&gt;Goal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#intro-demo&quot;&gt;Introducing our Rick &amp;amp; Morty demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-demo&quot;&gt;Running the demo scenario&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;goal&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;goal&quot;&gt;Goal&lt;/h1&gt;

&lt;p&gt;The purpose of this codelab is to simplify getting up-and-running with automated canary analysis using Spinnaker on Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;prerequisites&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;We’re using Google Cloud Platform for this demonstration.
Monitoring and logging will be handled by Stackdriver, which is integrated completely with GCP.&lt;/p&gt;

&lt;p&gt;The canary functionality we’re going to use in this setup requires the use of a specific cluster version with full rights:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You must be an Owner of the project containing your cluster.&lt;/li&gt;
  &lt;li&gt;You must use Kubernetes v1.10.2-gke.0 or later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;intro-demo&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introducing-our-rick--morty-demo&quot;&gt;Introducing our Rick &amp;amp; Morty demo&lt;/h1&gt;

&lt;p&gt;Rick &amp;amp; Morty is a television show following the misadventures of cynical mad scientist Rick Sanchez and his good-hearted but fretful grandson Morty Smith, who split their time between domestic life and interdimensional adventures.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 35% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Rick and Morty&quot; src=&quot;/img/spinnaker/rick-and-morty.jpg&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our demo application is a Java Spring Boot application, running on an Apache Tomcat server, packaged inside a docker container.
The docker container runs on Kubernetes managed by Google Cloud Platform (GKE).&lt;br /&gt;
The application exposes an endpoint on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; and can be run locally by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;./mvnw spring-boot:run&lt;/code&gt;, assuming you have a JRE or JDK (v8+) installed.&lt;/p&gt;

&lt;p&gt;The endpoint returns an HTML with a background of Pickle Rick.
In season three episode three, Rick turns himself into a pickle in an attempt at escaping family therapy.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 35% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Pickle Rick&quot; src=&quot;/img/spinnaker/pickle-rick.jpeg&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pickle Rick will act as our initial &lt;em&gt;green&lt;/em&gt; deployment, running stabily on production.
We will try to replace it with a &lt;em&gt;blue&lt;/em&gt; deployment.&lt;br /&gt;
Mr. Meeseeks, featured in season one episode five, will be the protagonist of that deployment.
Meeseeks are creatures who are created to serve a singular purpose for which they will go to any length to fulfill.
After they serve their purpose, they expire and vanish into the air.
Their motivation to help others comes from the fact that existence is painful to a Meeseeks, and the only way to be removed from existence is to complete the task they were called to perform.&lt;br /&gt;
Meeseeks can however summon other Meeseeks to help, which could spiral out of control if the task at hand is unsolvable.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 35% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Meeseeks&quot; src=&quot;/img/spinnaker/meeseeks.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Therefore, Meeseeks are quite dangerous and a good candidate for our misbehaving blue deployment.&lt;/p&gt;

&lt;p&gt;Aside from the HTTP endpoint, our demo application also prints out a number of character names from the series.&lt;/p&gt;

&lt;h3 id=&quot;blue-green-differences&quot;&gt;Blue Green Differences&lt;/h3&gt;

&lt;p&gt;Aside from the leading character in our two versions, there are two specific differences in the code between both versions.&lt;/p&gt;

&lt;p&gt;The following commit shows moving from the green version to the blue version: &lt;a href=&quot;https://github.com/andreasevers/spinnaker-demo/commit/24cc45cf4d8ddfe2843e4ea105b5e43bb28c4d41&quot;&gt;24cc45cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, the background image changes, which gives a clear visual indication of which version is currently deployed.&lt;br /&gt;
Since using Meeseeks could get out of hand quickly, keeping track of how many times the Meeseeks HTTP endpoint has been hit makes a lot of sense.
Hence, the blue version prints an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;Meeseeks&lt;/code&gt; in the logs, for every request to the endpoint.&lt;/p&gt;

&lt;p&gt;Using this setup, we should be able to consider logs as a source of information for judging the canary healthiness.&lt;/p&gt;

&lt;p&gt;Note that the Github repository can constantly switch between Pickle Rick and Meeseeks.
Before starting a build and making deployments, make sure your fork is aligned with the green version.
If this isn’t the case, switching to green is demonstrated in the following commit: &lt;a href=&quot;https://github.com/andreasevers/spinnaker-demo/commit/784e616ae6de881cecf6601831383e2097149c83&quot;&gt;784e616a&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-continuous-integration&quot;&gt;Setup Continuous Integration&lt;/h3&gt;

&lt;p&gt;Making changes to our application will be the trigger for our pipelines.
Therefore, we should have a simple continuous integration flow set up.
We could use Jenkins or any other build server that uses webhooks, but since our entire demo is being deployed on GCP, we can use the build server from GCP instead.&lt;/p&gt;

&lt;p&gt;First of all, fork the &lt;a href=&quot;https://github.com/andreasevers/spinnaker-demo/commit/24cc45cf4d8ddfe2843e4ea105b5e43bb28c4d41&quot;&gt;demo application repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the GCP console, open build triggers underneath the Container Registry (GCR) tab.&lt;br /&gt;
Select Github as repository hosting, and select the forked repository to create a trigger for.
Configure the trigger to activate on any branch, using a &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudbuild.yaml&lt;/code&gt; file located in the root of the repository.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 35% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;CI &quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 16.54.36.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This will run a maven build and docker build, and push the created docker image into the GCR.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Throughout this guide we refer to the official documentation for individual parts of the installation already covered by the Spinnaker team.
However, as reference we also compiled an exhaustive list of commands to execute based on the commands found in those articles.
This means you could skip the official documentation and simply execute those commands.
However, we still recommend going through the docs to get more context.
The list of commands to execute can be found &lt;a href=&quot;#commands&quot;&gt;at the end of this chapter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Follow the guide on Spinnaker’s website: &lt;a href=&quot;https://www.spinnaker.io/setup/quickstart/halyard-gke&quot;&gt;https://www.spinnaker.io/setup/quickstart/halyard-gke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a cluster as mentioned here: &lt;a href=&quot;https://cloud.google.com/monitoring/kubernetes-engine/installing&quot;&gt;https://cloud.google.com/monitoring/kubernetes-engine/installing&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud components update

gcloud auth login
gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project &amp;lt;PROJECT_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find out the latest supported cluster version with the following command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud container get-server-config --zone=$ZONE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a cluster for your specific zone (e.g. europe-west1-d) and preferred cluster version (v1.10.2-gke.0 or later):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.10.2-gke.1
&lt;span class=&quot;nv&quot;&gt;GCP_PROJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud info &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(config.project)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ZONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;europe-west1-d

&lt;span class=&quot;nv&quot;&gt;CLOUDSDK_CONTAINER_USE_V1_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLOUDSDK_API_CLIENT_OVERRIDES_CONTAINER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v1beta1

gcloud beta container clusters create spinnaker &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster-version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CLUSTER_VERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--enable-stackdriver-kubernetes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--enable-legacy-authorization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-stackdriver-kubernetes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-legacy-authorization&lt;/code&gt; are passed.&lt;/p&gt;

&lt;h3 id=&quot;enable-apis&quot;&gt;Enable APIs&lt;/h3&gt;

&lt;p&gt;Navigate to the Google Cloud Console and enable the following APIs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.developers.google.com/apis/api/iam.googleapis.com/overview&quot;&gt;Google Identity and Access Management (IAM) API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.developers.google.com/apis/api/cloudresourcemanager.googleapis.com/overview&quot;&gt;Google Cloud Resource Manager API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;halyard-setup&quot;&gt;Halyard setup&lt;/h3&gt;

&lt;p&gt;This section complements official documentation with some recommendations and extras.
Postpone running the &lt;code class=&quot;highlighter-rouge&quot;&gt;hal deploy apply&lt;/code&gt; command until the end of this chapter.&lt;/p&gt;

&lt;h4 id=&quot;basic-spinnaker&quot;&gt;Basic Spinnaker&lt;/h4&gt;

&lt;p&gt;During the &lt;a href=&quot;https://www.spinnaker.io/setup/quickstart/halyard-gke&quot;&gt;Halyard on GKE guide on Spinnaker’s website&lt;/a&gt;, remember to use the right zone when creating the Halyard VM.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud compute instances create &lt;span class=&quot;nv&quot;&gt;$HALYARD_HOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--scopes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cloud-platform &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--service-account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HALYARD_SA_EMAIL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image-project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu-os-cloud &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu-1404-lts &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--machine-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n1-standard-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When SSH’ing into the Halyard VM, also remember to use the right zone.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud compute ssh &lt;span class=&quot;nv&quot;&gt;$HALYARD_HOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ssh-flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L 9000:localhost:9000&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ssh-flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L 8084:localhost:8084&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before you perform &lt;code class=&quot;highlighter-rouge&quot;&gt;hal deploy apply&lt;/code&gt;, add the Docker registry corresponding to your region. In case your project is located in Europe, add the eu.gcr.io registry as illustrated below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hal config provider docker-registry account add gcr-eu &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; eu.gcr.io &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--password-file&lt;/span&gt; ~/.gcp/gcp.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--username&lt;/span&gt; _json_key

hal config provider kubernetes account edit my-k8s-account &lt;span class=&quot;nt&quot;&gt;--docker-registries&lt;/span&gt; my-gcr-account gcr-eu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;iam-configuration&quot;&gt;IAM Configuration&lt;/h4&gt;

&lt;p&gt;Enable Stackdriver access for Spinnaker in &lt;a href=&quot;https://console.cloud.google.com/iam-admin/iam&quot;&gt;GCP’s IAM settings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following roles to the member with name &lt;code class=&quot;highlighter-rouge&quot;&gt;gcs-service-account&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Logging Admin&lt;/li&gt;
  &lt;li&gt;Monitoring Admin&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automated-canary-analysis&quot;&gt;Automated Canary Analysis&lt;/h4&gt;

&lt;p&gt;Before you perform &lt;code class=&quot;highlighter-rouge&quot;&gt;hal deploy apply&lt;/code&gt;, enable automated canary analysis.
Follow the guide further down, but first of all, set some variables while still SSH’d in the Halyard VM.
One of these variables is the Spinnaker bucket automatically created when installing Halyard.
Look for the right bucket identifier in the GCP GKE buckets dashboard.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud info &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(config.project)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JSON_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.gcp/gcp.json
&lt;span class=&quot;nv&quot;&gt;MY_SPINNAKER_BUCKET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;spin-48b89b5e-dd67-446a-ad9f-66e8783e9822
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow the &lt;a href=&quot;https://www.spinnaker.io/setup/canary/#quick-start&quot;&gt;official canary quickstart documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Configure the default metrics store.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hal config canary edit &lt;span class=&quot;nt&quot;&gt;--default-metrics-store&lt;/span&gt; stackdriver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally execute the rollout.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hal deploy apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;

&lt;h4 id=&quot;authentication&quot;&gt;Authentication&lt;/h4&gt;
&lt;p&gt;Sometimes an issue might occur with credentials on the Halyard VM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;! ERROR Unable to communicate with your Kubernetes cluster: Failure
  executing: GET at: https://35.205.113.166/api/v1/namespaces. Message: Forbidden!
  User gke_spinnaker-demo-184310_europe-west1-d_spinnaker-alpha doesn't have
  permission. namespaces is forbidden: User &quot;client&quot; cannot list namespaces at the
  cluster scope: Unknown user &quot;client&quot;..
? Unable to authenticate with your Kubernetes cluster. Try using
  kubectl to verify your credentials.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, enable legacy authentication in the GKE UI for the cluster.&lt;/p&gt;

&lt;h4 id=&quot;cluster-debugging&quot;&gt;Cluster Debugging&lt;/h4&gt;
&lt;p&gt;You can monitor deployment locally on your own PC by running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get pods -w --all-namespaces&lt;/code&gt;.
For this to work, kubectl needs permissions to talk to the cluster.
You can use gcloud to populate your kubeconfig file with credentials to access the cluster.
This can help you to look into specific logs of each Spinnaker pod or follow up on deployments handled by Spinnaker.&lt;/p&gt;

&lt;h4 id=&quot;audit-logging&quot;&gt;Audit Logging&lt;/h4&gt;

&lt;p&gt;You can find out which commands are sent to GCP by enabling audit logging.
Turn on audit logging: https://cloud.google.com/monitoring/audit-logging &amp;amp; https://cloud.google.com/logging/docs/audit/configure-data-access#example&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;commands&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;comprehensive-list-of-commands&quot;&gt;Comprehensive list of commands&lt;/h3&gt;

&lt;p&gt;These are all the commands we have executed in order to get everything set up.
Fill in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;PLACEHOLDER&amp;gt;&lt;/code&gt; placeholders according to your preferences.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ZONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;ZONE_NAME&amp;gt;
&lt;span class=&quot;nv&quot;&gt;CLUSTER_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;CLUSTER_VERSION&amp;gt;
&lt;span class=&quot;nv&quot;&gt;GCP_PROJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;PROJECT_NAME&amp;gt;

gcloud components update

gcloud auth login
gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;project &lt;span class=&quot;nv&quot;&gt;$PROJECT_NAME&lt;/span&gt;

gcloud container get-server-config &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CLOUDSDK_CONTAINER_USE_V1_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLOUDSDK_API_CLIENT_OVERRIDES_CONTAINER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v1beta1

gcloud beta container clusters create spinnaker &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster-version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CLUSTER_VERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--enable-stackdriver-kubernetes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--enable-legacy-authorization&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;HALYARD_SA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;halyard-service-account

gcloud iam service-accounts create &lt;span class=&quot;nv&quot;&gt;$HALYARD_SA&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--display-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HALYARD_SA&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;HALYARD_SA_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud iam service-accounts list &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;displayName:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HALYARD_SA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(email)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

gcloud projects add-iam-policy-binding &lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt; roles/iam.serviceAccountKeyAdmin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt; serviceAccount:&lt;span class=&quot;nv&quot;&gt;$HALYARD_SA_EMAIL&lt;/span&gt;

gcloud projects add-iam-policy-binding &lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt; roles/container.admin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt; serviceAccount:&lt;span class=&quot;nv&quot;&gt;$HALYARD_SA_EMAIL&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;GCS_SA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gcs-service-account

gcloud iam service-accounts create &lt;span class=&quot;nv&quot;&gt;$GCS_SA&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--display-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;GCS_SA_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud iam service-accounts list &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;displayName:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCS_SA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(email)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

gcloud projects add-iam-policy-binding &lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt; roles/storage.admin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt; serviceAccount:&lt;span class=&quot;nv&quot;&gt;$GCS_SA_EMAIL&lt;/span&gt;

gcloud projects add-iam-policy-binding &lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--member&lt;/span&gt; serviceAccount:&lt;span class=&quot;nv&quot;&gt;$GCS_SA_EMAIL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--role&lt;/span&gt; roles/browser

&lt;span class=&quot;nv&quot;&gt;HALYARD_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-halyard-&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%m%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_.'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

gcloud compute instances create &lt;span class=&quot;nv&quot;&gt;$HALYARD_HOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--scopes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cloud-platform &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--service-account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HALYARD_SA_EMAIL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image-project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu-os-cloud &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu-1404-lts &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--machine-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n1-standard-4

gcloud compute ssh &lt;span class=&quot;nv&quot;&gt;$HALYARD_HOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCP_PROJECT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZONE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ssh-flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L 9000:localhost:9000&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ssh-flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L 8084:localhost:8084&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the Halyard VM:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KUBECTL_LATEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://storage.googleapis.com/kubernetes-release/release/&lt;span class=&quot;nv&quot;&gt;$KUBECTL_LATEST&lt;/span&gt;/bin/linux/amd64/kubectl
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x kubectl
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;kubectl /usr/local/bin/kubectl
curl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash InstallHalyard.sh
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;nv&quot;&gt;GKE_CLUSTER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;spinnaker
&lt;span class=&quot;nv&quot;&gt;GKE_CLUSTER_ZONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;europe-west1-d
&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud info &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(config.project)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

gcloud config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;container/use_client_certificate &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;gcloud container clusters get-credentials &lt;span class=&quot;nv&quot;&gt;$GKE_CLUSTER_NAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GKE_CLUSTER_ZONE&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;GCS_SA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gcs-service-account
&lt;span class=&quot;nv&quot;&gt;GCS_SA_DEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.gcp/gcp.json
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GCS_SA_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gcloud iam service-accounts list &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;displayName:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GCS_SA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value(email)'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
gcloud iam service-accounts keys create &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--iam-account&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_EMAIL&lt;/span&gt;

hal config version edit &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hal version latest &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
hal config storage gcs edit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--json-path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt;
hal config storage edit &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt; gcs
hal config provider docker-registry &lt;span class=&quot;nb&quot;&gt;enable
&lt;/span&gt;hal config provider docker-registry account add my-gcr-account &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; gcr.io &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--password-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--username&lt;/span&gt; _json_key
hal config provider kubernetes &lt;span class=&quot;nb&quot;&gt;enable
&lt;/span&gt;hal config provider kubernetes account add my-k8s-account &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--docker-registries&lt;/span&gt; my-gcr-account &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;kubectl config current-context&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Only required in case you want to use eu.gcr.io&lt;/span&gt;
hal config provider docker-registry account add gcr-eu &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; eu.gcr.io &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--password-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--username&lt;/span&gt; _json_key
hal config provider kubernetes account edit my-k8s-account &lt;span class=&quot;nt&quot;&gt;--docker-registries&lt;/span&gt; my-gcr-account gcr-eu

hal config deploy edit &lt;span class=&quot;nt&quot;&gt;--account-name&lt;/span&gt; my-k8s-account
hal config deploy edit &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt; distributed

&lt;span class=&quot;nv&quot;&gt;MY_SPINNAKER_BUCKET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;SPINNAKER_BUCKET_ID&amp;gt;

hal config canary &lt;span class=&quot;nb&quot;&gt;enable
&lt;/span&gt;hal config canary google &lt;span class=&quot;nb&quot;&gt;enable
&lt;/span&gt;hal config canary google account add my-google-account &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--json-path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GCS_SA_DEST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--bucket&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MY_SPINNAKER_BUCKET&lt;/span&gt;
hal config canary google edit &lt;span class=&quot;nt&quot;&gt;--gcs-enabled&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--stackdriver-enabled&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;hal config canary edit &lt;span class=&quot;nt&quot;&gt;--default-metrics-store&lt;/span&gt; stackdriver
hal deploy apply
hal deploy connect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;configuration&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;

&lt;h3 id=&quot;application-configuration&quot;&gt;Application Configuration&lt;/h3&gt;

&lt;p&gt;This guide uses the Kubernetes V1 provider, but you can use V2 just as well.&lt;br /&gt;
Follow the &lt;a href=&quot;https://www.spinnaker.io/setup/install/providers/kubernetes-v2/#adding-an-account&quot;&gt;official documentation&lt;/a&gt; to enable the V2 provider.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&quot;http://localhost:9000&quot;&gt;localhost:9000&lt;/a&gt; to open the Spinnaker UI.&lt;br /&gt;
In the applications page, create a new application:&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;New application&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 10.58.43.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Under Infrastructure, the Clusters view should normally be opened automatically.
Click the Config link on the top right and enable Canary for this project.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Features&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.02.31.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This should enable Canary Analysis for the project.
The result should be that the Spinnaker menu for this project should be changed.
Pipelines are now nested underneath Delivery, which also now boasts Canary Configs and Canary Reports.&lt;br /&gt;
In case this is not visualised directly, you can refresh the cache by clicking on the Spinnaker logo on the top left of the page, and clicking the Refresh all caches link in the Actions drop down.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Top menu&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.08.20.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;initial-provisioning&quot;&gt;Initial Provisioning&lt;/h3&gt;

&lt;p&gt;Under Infrastructure, switch to the Load Balancers view and create a load balancer.&lt;br /&gt;
Fill in the stack, port, target port and type &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadBalancer&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Load balancer&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.12.53.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Under Infrastructure, switch to the Clusters view and create a Server Group.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Server group 1&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.06.00.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Server group 2&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.06.37.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once the server group is created, it will show up like this:&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Chicklet&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.09.45.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;By clicking on the little load balancer icon on the right-hand side, we can now visit the Ingress IP through the load balancer view on the side of the page.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 65% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Ingress&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.14.39.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Back in the server group section, clicking on the little green chicklet will display container information on the side of the page, including logs of the application.&lt;/p&gt;

&lt;p&gt;Let’s do this for PROD as well.&lt;br /&gt;
Follow exactly the same steps as for DEV, except use &lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt; as Stack instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the PROD load balancer and server group are deployed, we’d like to make sure we never have downtime on PROD.&lt;br /&gt;
We can set up a Traffic Guard, responsible for making sure our production cluster always has active instances.&lt;br /&gt;
Go to the Config link on the top right of the page, and add a Traffic Guard.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Traffic guards&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 15.47.35.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;staging-pipeline&quot;&gt;Staging Pipeline&lt;/h3&gt;

&lt;p&gt;Now that we’ve deployed a single version of our application to DEV and PROD, it’s time to create a pipeline.
This will enable us to continuously deploy new versions of our application without having to manually create new server groups every time.&lt;br /&gt;
Head over to the pipelines view and create a new pipeline called Deploy to DEV.&lt;br /&gt;
Under the first “Configuration” stage, configure an automated trigger.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Trigger DEV&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.20.11.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now add a stage to deploy our application.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Template DEV&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.23.39.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We now have to add a server group as deployment configuration.
We can reuse the existing deployment as a template.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy DEV&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.22.30.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Change the strategy to &lt;code class=&quot;highlighter-rouge&quot;&gt;Highlander&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s important to change the image being deployed, otherwise, we’d always deploy the image of our existing server group.&lt;br /&gt;
Go down to the Container section and select the Image from Trigger.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Image from trigger DEV&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.24.45.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This will automatically change the container image at the top of the dialog box under Basic Settings.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy basic DEV&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.27.00.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Keep all other settings as they are.&lt;br /&gt;
Save the server group configuration, and save the pipeline.&lt;/p&gt;

&lt;p&gt;When we now select the pipelines view, we can see the newly created Deploy to DEV pipeline.&lt;br /&gt;
We can test this by either starting a manual execution, or committing a change to our application GIT repository.&lt;/p&gt;

&lt;h3 id=&quot;production-pipeline&quot;&gt;Production Pipeline&lt;/h3&gt;

&lt;p&gt;Create new pipeline Deploy to PROD.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Trigger PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.33.58.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add a new Find Image from Cluster stage.
This stage will allow us to look for the image we deployed to DEV, and pass that information on to upcoming stages.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Find Image PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.35.51.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add a new Deploy stage to deploy the new DEV version into production.&lt;br /&gt;
Under deploy configuration, add a server group based on the one in DEV.&lt;br /&gt;
Make sure to set the right load balancer, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;spinnakedemo-prod&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy lb PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.42.31.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Scrolling down to the Container section, select the image found in DEV by the Find Image stage.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy container PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.40.12.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since this is a new version we’d like to push to production, it would be a good idea to build in some safety measures to protect us from unexpected failure.
Using a canary release strategy allows us to limit the blast radius of potential issues that might arrise.&lt;br /&gt;
In the Basic Settings section, set the stack as &lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt; and the detail as &lt;code class=&quot;highlighter-rouge&quot;&gt;canary&lt;/code&gt; to indicate that this deployment is our canary deployment. Also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; strategy, since we just want to deploy this canary server group next to the one already active in production.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy basic PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.41.03.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s test this out.&lt;br /&gt;
Change the application to respond with PickleRicks if that’s not already the case.
Otherwise, make an insignificant change to the application and push the changes to GIT (master branch).&lt;br /&gt;
This should trigger a build, which should push a docker image to the GCR.&lt;br /&gt;
That on its turn should trigger the deployment to DEV, which - if successful - should trigger a deployment to PROD.&lt;br /&gt;
Once that’s done, your cluster view should look like this:&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Infra view&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 15.44.18.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;V001&lt;/code&gt; on DEV, it has replaced the existing manual server group deployment using the highlander strategy.&lt;/p&gt;

&lt;p&gt;Currently our canary is registered under the same load balancer as our production cluster. This means traffic is split between the canary and production.&lt;br /&gt;
We could test the canary manually by going to the ingress endpoint of the load balancer as we did on DEV.
This could be sufficient for your needs, but Spinnaker offers automated canary analysis (aka. ACA), capable of automatically investigating traffic sent to the canary.&lt;br /&gt;
The ACA engine Kayenta will compare certain metrics between the currently running production version, and the newly deployed canary version.&lt;br /&gt;
Since comparing a fresh deployment with an old, potentially degraded deployment, could produce unwanted results, it’s advised to deploy both a canary and a current production instance labelled baseline, next to each other.&lt;/p&gt;

&lt;p&gt;In the Deploy to PROD pipeline configure screen, add a stage in parallel with Find Image from DEV by clicking on the outer-left Configuration stage, and adding a new stage from that point on.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Find Image PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 15.57.42.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;From that point forward, add another Deploy stage, with the prod server group as template.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Template PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 15.58.51.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At the bottom of the Deployment Cluster Configuration, switch the Container Image to the Find Image result for prod.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy container baseline PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.00.03.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;baseline&lt;/code&gt; as detail, and keep the strategy as &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy basic baseline PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.01.30.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Save the pipeline.&lt;/p&gt;

&lt;p&gt;We now have our basic setup of both a baseline and canary server group to perform canary analysis.&lt;/p&gt;

&lt;h3 id=&quot;canary-analysis&quot;&gt;Canary Analysis&lt;/h3&gt;

&lt;p&gt;Our specific demo scenario uses Meeseeks from Rick and Morty as the new version to deploy.&lt;br /&gt;
As people who watched the series probably will know, Meeseeks can quickly become a threat to our way of living if we let nature run its course.
Therefore, when switching to Meeseeks, we also write Meeseeks in the logs to keep track of them.&lt;/p&gt;

&lt;p&gt;GCP uses Stackdriver for logging and monitoring, so if we’d like to use the logs as a source of information for canary analysis, we should make a Stackdriver metric using the Meeseeks logs.&lt;br /&gt;
In the GCP left-hand menu, under the Stackdriver section, you can find Logging and drill down to Logs-based metrics.&lt;br /&gt;
Add a new metric using the following filter, replacing the location and project_id by the zone name and project id from earlier in this guide:
&lt;code class=&quot;highlighter-rouge&quot;&gt;(resource.labels.cluster_name=&quot;spinnaker&quot; AND resource.labels.location=&quot;europe-west1-d&quot; AND resource.labels.namespace_name=&quot;default&quot; AND resource.labels.project_id=&quot;spinnaker-demo-184310&quot; AND textPayload:&quot;Meeseeks”)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 65% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Meeseeks log metric&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.34.16.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;User-defined metrics&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.36.00.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Back in Spinnaker, head over to the Canary Configs view under Delivery.&lt;br /&gt;
Create a new Canary Config called Demo-config, and add a filter template.&lt;br /&gt;
The template will filter based on the replication controller of the server group:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;resource.labels.pod_name:&quot;${scope}&quot;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Filter template&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.17.57.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can add actual metrics to analyse.&lt;br /&gt;
Create a new Metrics Group called Meeseeks, with one metric underneath.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Meeseeks metric&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.37.01.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since we’d also like to know whether our CPU or memory consumption has increased, let’s add some system metrics as well.
We can investigate which filters we can construct by using the &lt;a href=&quot;https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list&quot;&gt;GCP REST API&lt;/a&gt;.&lt;br /&gt;
Add a new group called Boring System Metrics, and add the following two metrics.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;CPU metric&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 19.26.55.png&quot; /&gt;
    
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;RAM metric&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 19.27.34.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The only thing left to do for this Canary Config, is to configure thresholds for the Metric Groups.&lt;br /&gt;
The marginal is treated as a lower bound.
If an interval analysis fails to reach the marginal limit, the entire canary release will be halted and no further intervals will be analysed.
The pass limit is the upper bound, qualifying the analysis as a success.
Anything in between will be recorded and next intervals will be analysed.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Thresholds&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.43.21.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Save the Canary Config, and go back to the Deploy to PROD pipeline configuration.&lt;/p&gt;

&lt;p&gt;Join both canary and baseline deployments into the Canary Analysis stage, by using the Depends On configuration.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;ACA stage&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.03.21.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Configure the canary analysis stage as follows.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Canary config 1&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 19.09.07.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Canary config 2&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 19.09.57.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rollout-or-rollback&quot;&gt;Rollout or Rollback&lt;/h3&gt;

&lt;p&gt;After the Canary Analysis has run, the new version can safely replace the existing production server group.&lt;br /&gt;
Add a stage called Deploy to PROD, copying the production server group as template, and use the red/black (aka. blue/green) deployment strategy to avoid any downtime.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Template PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 15.58.51.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At the bottom of the Deployment Cluster Configuration, switch the Container Image to the Find Image result for DEV.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy container PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 11.40.12.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 25% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Deploy basic PROD&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 17.03.46.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Regardless whether this pipeline actually succeeds or not, we need to make sure to clean up afterwards.
Add a new pipeline called Tear Down Canary, with the following trigger.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Trigger Cleanup&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.51.42.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Add two Destroy Server Group stages in parallel.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Pipeline Cleanup&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.53.56.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Configure the first one to destroy our baseline server group.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Destroy baseline&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.54.22.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And finally also destroy the canary server group.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Destroy canary&quot; src=&quot;/img/spinnaker/Screen Shot 2018-05-28 at 16.54.08.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;running-demo&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;running-the-demo-scenario&quot;&gt;Running the demo scenario&lt;/h1&gt;

&lt;p&gt;As explained in the &lt;a href=&quot;#intro-demo&quot;&gt;introduction of the demo application&lt;/a&gt;, we have two versions of our application.
As long as we keep deploying green versions with minor changes to other parts of the application (not impacting Meeseeks logs), the whole pipeline should pass, including the canary analysis.&lt;/p&gt;

&lt;p&gt;For a canary test to be successful, we need data.
The more data our test can gather, the more informed the decision will be.
In our demo scenario, we can continuously refresh the page to generate more load and more Meeseeks in the logs, but we can also use a script for that.
In the root of the demo repository, a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;randomload.sh&lt;/code&gt; can be used to generate calls to the PROD ingress endpoint at a random interval.&lt;br /&gt;
The script uses &lt;a href=&quot;https://httpie.org/&quot;&gt;HTTPie&lt;/a&gt; to make calls, but you can also replace it with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; commands.
Also, make sure you change the IP address in your forked repository’s file.&lt;/p&gt;

&lt;h3 id=&quot;success&quot;&gt;Success&lt;/h3&gt;

&lt;p&gt;A successful canary release would look like this.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Success&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 18.16.10.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Meeseeks logs should occur at a similar rate in the canary and the baseline server group.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Success Meeseeks&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 18.53.45.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CPU and RAM metrics are also part of the comparison.
In the example below, the canary CPU metrics deviated too much from the baseline, resulting in a failure for that metric group.
However, the weight of those metrics were not high enough to fail the verdict, but it did cause the outcome to be labeled &lt;em&gt;marginal&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Success RAM&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 18.37.33.png&quot; /&gt;
    
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Success CPU&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 18.38.06.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;failure&quot;&gt;Failure&lt;/h3&gt;

&lt;p&gt;When switching to the blue Meeseeks version, the initial DEV deploy would succeed, but our canary analysis should fail after one or two intervals.&lt;/p&gt;

&lt;p&gt;A failed canary release would look like this.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Failed&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 19.08.12.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The canary server group generated a noticeable higher amount of Meeseeks than our baseline server group, resulting in a failed analysis.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Failed Meeseeks&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 19.09.31.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Even though canary CPU and RAM metrics were quite in sync with the baseline, our Meeseeks metrics were enough to fail the entire pipeline.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 15% 0 auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Failed RAM&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 19.10.09.png&quot; /&gt;
    
&lt;/figure&gt;


&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Failed CPU&quot; src=&quot;/img/spinnaker/Screen Shot 2018-06-01 at 19.08.57.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Pickle Rick and Mr. Meeseeks have shown us the power of automated canary analysis using Spinnaker.
There are still a few considerations we have to take into account, such as the importance of choosing the right metrics and filters and iterating on those after each canary release.
Yet, having a tool like this at our disposal allows us to release more often to production, without compromising safety or quality.
By reducing manual and ad hoc analysis only the most stable releases are deployed to production in a highly automated way.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Andreas&quot;, &quot;last_name&quot;=&gt;&quot;Evers&quot;, &quot;permalink&quot;=&gt;&quot;/author/andreas-evers/&quot;, &quot;avatar&quot;=&gt;&quot;andreas-evers.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;andreas.evers@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;andreasevers&quot;, &quot;github&quot;=&gt;&quot;andreasevers&quot;, &quot;title2&quot;=&gt;&quot;Practice Leader Backend&quot;, &quot;linkedin&quot;=&gt;&quot;eversandreas&quot;, &quot;bio&quot;=&gt;&quot;Andreas is a Principal Java consultant at Ordina, passionate about the Spring ecosystem, microservices, REST, clean code and best practices in general. An avid open source enthusiast and Spring contributor. Helps fellow developers as Competence Center leader for architecture and best practices by giving workshops, talks and courses about the newest technologies.&quot;}</name><email>andreas.evers@ordina.be</email></author><category term="Cloud" /><category term="Canary" /><category term="Continuous-Delivery" /><category term="Cloud" /><category term="Microservices" /><category term="Netflix" /><category term="Spring" /><summary type="html">Intro</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/spinnaker/spinnaker-logo.png" /></entry><entry><title type="html">Lagom 1.4 and Kubernetes orchestration</title><link href="https://ordina-jworks.github.io/orchestration/2018/05/22/lagom-1-4-and-kubernetes-orchestration.html" rel="alternate" type="text/html" title="Lagom 1.4 and Kubernetes orchestration" /><published>2018-05-22T00:00:00+00:00</published><updated>2018-05-22T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/orchestration/2018/05/22/lagom-1-4-and-kubernetes-orchestration</id><content type="html" xml:base="https://ordina-jworks.github.io/orchestration/2018/05/22/lagom-1-4-and-kubernetes-orchestration.html">&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#upgrading-to-lagom-14&quot;&gt;Upgrading to Lagom 1.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lightbends-orchestration-tools&quot;&gt;Lightbend’s orchestration tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-kubernetes-support-to-our-lagom-shop-scala-application&quot;&gt;Adding Kubernetes support to our Lagom Shop Scala application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-and-publishing-docker-images&quot;&gt;Building and publishing Docker images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#locally-deploying-to-kubernetes-using-minikube&quot;&gt;Locally deploying to Kubernetes using Minikube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#generating-kubernetes-resources-for-production&quot;&gt;Generating Kubernetes resources for production&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-resources&quot;&gt;Extra resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this blog post we will take a closer look at the &lt;a href=&quot;https://developer.lightbend.com/docs/lightbend-orchestration-kubernetes/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lightbend Orchestration tools&lt;/a&gt;.
Tools helping you deploy your Lagom application to Kubernetes and DC/OS.
It was already possible to deploy Lagom applications to Kubernetes as &lt;a href=&quot;https://developer.lightbend.com/guides/lagom-kubernetes-k8s-deploy-microservices/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this guide&lt;/a&gt; demonstrates but it involved more manual tasks and having to write the Kubernetes resource and configuration files yourself, as it usually goes.&lt;/p&gt;

&lt;p&gt;As it currently stands, the tools are only supported in combination with sbt so Maven users cannot fully take advantage of it just yet.
Maven support will follow soon however as the &lt;a href=&quot;https://github.com/lightbend/reactive-app-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maven equivalent plugin&lt;/a&gt; is nearing its first release version.&lt;/p&gt;

&lt;p&gt;If you are new to Lagom feel free to take a look at one of our earlier blog posts on Lagom:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/microservices/2016/04/22/Lagom-First-Impressions-and-Initial-Comparison-to-Spring-Cloud.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom: First Impressions and Initial Comparison to Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/microservices/2017/02/01/Lagom-1-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom 1.2: What’s new?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before getting to that though, we will upgrade our sample application &lt;a href=&quot;https://github.com/yannickdeturck/lagom-shop-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom Shop Scala&lt;/a&gt;, which was also referred to in our previous blog posts, 
from Lagom 1.2 to &lt;a href=&quot;https://www.lagomframework.com/blog/lagom-1-4-0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom 1.4&lt;/a&gt; to demonstrate the upgrading process.
The application consists of two Lagom microservices combined with a frontend written in Play Framework.
Afterwards we will take a closer look at how easy it is to integrate the Lightbend Orchestration tools into our project and how we can get our project up and running on Kubernetes.
Note that this blog post is not an in-depth guide on the tools themselves but more a general overview and for us to share our impressions.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-to-lagom-14&quot;&gt;Upgrading to Lagom 1.4&lt;/h2&gt;
&lt;p&gt;In this section we will upgrade our sample application &lt;a href=&quot;https://github.com/yannickdeturck/lagom-shop-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom Shop Scala&lt;/a&gt;, from version 1.3.4 to 1.4.x.
Lagom 1.4 uses Play Framework’s latest version, 2.6 for which we will also need to change a few things in our project.&lt;/p&gt;

&lt;p&gt;Lightbend provides a migration guide for each new version they release, so in this case we followed the &lt;a href=&quot;https://www.lagomframework.com/documentation/1.4.x/scala/Migration14.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom 1.4 Migration Guide&lt;/a&gt; and the &lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/Migration26&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Play 2.6 Migration Guide&lt;/a&gt;.
When upgrading multiple minor versions, it is advised to upgrade one minor version at a time to smoothen the process.
In our case we are only limited to upgrading a single minor version so we can just use the latest migration guide right away.&lt;/p&gt;

&lt;p&gt;Upgrade the Lagom version in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lightbend.lagom&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lagom-sbt-plugin&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.4.5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upgrade the sbt version in &lt;code class=&quot;highlighter-rouge&quot;&gt;project/build.properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upgrade the Scala version to &lt;code class=&quot;highlighter-rouge&quot;&gt;2.12.4&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scalaVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThisBuild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.12.4&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upgrade Play JSON Derived Codecs to 4.0.0 which adds Play 2.6 support:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playJsonDerivedCodecs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.julienrf&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;play-json-derived-codecs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4.0.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;play.api.data.validation.ValidationError&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;play.api.libs.json.JsonValidationError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mix in &lt;code class=&quot;highlighter-rouge&quot;&gt;LagomConfigComponent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFiltersComponents&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AssetsComponents&lt;/code&gt; and remove &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy val assets: Assets = wire[Assets]&lt;/code&gt; in the application loader class extending &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltInComponentsFromContext&lt;/code&gt; in the Play frontend project.&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Frontend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuiltInComponentsFromContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I18nComponents&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AhcWSComponents&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomKafkaClientComponents&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomServiceClientComponents&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomConfigComponent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpFiltersComponents&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AssetsComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;override def describeServices&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;override def describeService&lt;/code&gt; in each Lagom project’s class extending &lt;code class=&quot;highlighter-rouge&quot;&gt;LagomServerComponents&lt;/code&gt; as the other one has become deprecated.&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describeService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implement CSRF security in the frontend project by utilising CSRF form fields (&lt;code class=&quot;highlighter-rouge&quot;&gt;@CSRF.formField&lt;/code&gt;) or &lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/ScalaCsrf#Protecting-against-Cross-Site-Request-Forgery&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;one of the other approaches&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that Lagom’s development mode service locator now listens on port 9008 instead of 8000 although this can still be changed by &lt;a href=&quot;https://www.lagomframework.com/documentation/1.4.x/scala/ServiceLocator.html#Default-port&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;overriding the default port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see a complete list of changes we did, refer to commit &lt;a href=&quot;https://github.com/yannickdeturck/lagom-shop-scala/commit/bdf5ecff50df606c2f4ed15200ce76b9d14c8f0a&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bdf5ecff&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lightbends-orchestration-tools&quot;&gt;Lightbend’s orchestration tools&lt;/h2&gt;
&lt;p&gt;As we mentioned in the introduction, Lightbend offers a developer-centric suite of tools helping you deploy your Play/Akka/Lagom applications to Kubernetes and DC/OS.
The tools help you create a Docker image of all your applications, 
help with generating Kubernetes and DC/OS resource and configuration files based on the Docker images, 
and they allow you to deploy your whole Lagom project to Kubernetes using a simple command which can be pretty convenient for development. 
The generated JSON and YAML files could be put under version control after which they can be submitted to a CI/CD integrated central repository.&lt;/p&gt;

&lt;p&gt;The suite consists of three different tools:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/sbt-reactive-app&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;sbt-reactive-app&lt;/a&gt;, an sbt plugin that inspects your projects and builds annotated Docker images.
The &lt;a href=&quot;https://github.com/lightbend/reactive-app-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maven equivalent plugin&lt;/a&gt; is still being worked on and is nearing its first release version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/reactive-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;reactive-cli&lt;/a&gt;, a command-line tool with which you generate the Kubernetes and DC/OS resource and configuration files.
You need to install this on the device or environment from which you will deploy to Kubernetes.
Install guidelines are available in the &lt;a href=&quot;https://developer.lightbend.com/docs/lightbend-orchestration-kubernetes/latest/cli-installation.html#install-the-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt;.
For Mac for example this is easily accomplished with Homebrew:
    &lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;brew tap lightbend/tools &amp;amp;&amp;amp; brew install lightbend/tools/reactive-cli
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lightbend/reactive-lib/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;reactive-lib&lt;/a&gt;, a library for your application that is automatically included in your application’s build by the sbt-reactive-app sbt plugin.
It allows your application to perform service discovery, access secrets, define health and readiness checks, and more as it understands the conventions of the resources generated by the command-line tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-kubernetes-support-to-our-lagom-shop-scala-application&quot;&gt;Adding Kubernetes support to our Lagom Shop Scala application&lt;/h2&gt;
&lt;p&gt;We start off with adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-reactive-app&lt;/code&gt; sbt plugin in the &lt;code class=&quot;highlighter-rouge&quot;&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lightbend.rp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-reactive-app&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now enable the plugin for each module in the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemImpl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item-impl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commonSettings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LagomScala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SbtReactiveAppPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderImpl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;order-impl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commonSettings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LagomScala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SbtReactiveAppPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomScaladslPersistenceCassandra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomScaladslTestKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomScaladslKafkaBroker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cassandraDriverExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;macwire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;scalaTest&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lagomForkedTestSettings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frontend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commonSettings&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enablePlugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PlayScala&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomPlay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SbtReactiveAppPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomScaladslServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lagomScaladslKafkaClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;macwire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;scalaTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;org.webjars&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foundation&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;6.2.3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;org.webjars&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foundation-icon-fonts&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;d596a3cfb3&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;EclipseKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preTasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpIngressPaths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you also have a frontend module it is important to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;httpIngressPaths&lt;/code&gt;, as you might have seen in the code sample above, in order to have your frontend be accessible from outside the cluster.&lt;/p&gt;

&lt;p&gt;Mix in the &lt;code class=&quot;highlighter-rouge&quot;&gt;LagomServiceLocatorComponents&lt;/code&gt; trait in each module’s application loader:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.lightbend.rp.servicediscovery.lagom.scaladsl.LagomServiceLocatorComponents&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemApplicationLoader&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomApplicationLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LagomApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LagomApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LagomServiceLocatorComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circuitBreakerMetricsProvider&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CircuitBreakerMetricsProviderImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actorSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-and-publishing-docker-images&quot;&gt;Building and publishing Docker images&lt;/h2&gt;
&lt;p&gt;The tool suite comes with an easy way to deploy all your services to Minikube for development so you will want to set that up first.
For installation instructions, consult the &lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/minikube/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Minikube documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Start up Minikube with a sufficient amount of memory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ minikube start --memory 8192
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Getting VM IP address...
Moving files into cluster...
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You kind of need a decent device with a decent amount of RAM.
I have tested all of this on a MacBook Pro with 8GB RAM and I simply was not able to assign a sufficient amount of memory to comfortably run everything locally.&lt;/p&gt;

&lt;p&gt;Execute the following command to have our Docker environment variables point to Minikube:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;eval $(minikube docker-env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can check if Minikube is up and running with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready     &amp;lt;none&amp;gt;    1m        v1.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To figure out your Minikube IP you can utilise the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ echo &quot;http://$(minikube ip)&quot;
http://192.168.99.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also important to enable the Ingress addon:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;minikube addons enable ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to launch sbt:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ sbt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After which we can publish the images locally (you might want to grab a coffee after executing this):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;docker:publishLocal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Underneath, &lt;a href=&quot;https://github.com/sbt/sbt-native-packager&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SBT Native Packager&lt;/a&gt; is being used.
Check out its &lt;a href=&quot;http://www.scala-sbt.org/sbt-native-packager/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt; for Docker related configurations.&lt;/p&gt;

&lt;p&gt;Publishing to a Docker Registry is also possible by defining the &lt;code class=&quot;highlighter-rouge&quot;&gt;dockerRepository&lt;/code&gt; sbt setting in the project and after authenticating to the registry, see &lt;a href=&quot;https://developer.lightbend.com/docs/lightbend-orchestration-kubernetes/latest/building.html#publishing-to-a-docker-registry&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Publishing to a Docker Registry&lt;/a&gt;.
After doing so you can execute the publish command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;docker:publish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our Docker images should then be available:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
orderimpl              1.0-SNAPSHOT        e9be41c50eb2        32 seconds ago      159MB
itemimpl               1.0-SNAPSHOT        357a9d546593        9 minutes ago       159MB
frontend               1.0-SNAPSHOT        7251c13a5373        6 days ago          141MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As for the &lt;a href=&quot;https://github.com/lightbend/reactive-app-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maven equivalent plugin&lt;/a&gt;, the Docker images can be build by executing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;locally-deploying-to-kubernetes-using-minikube&quot;&gt;Locally deploying to Kubernetes using Minikube&lt;/h2&gt;
&lt;p&gt;For development we can make use of an sbt task for deploying everything to Kubernetes using Minikube.
But before that, we need to do a couple of things.
We first need to set up Lightbend’s &lt;a href=&quot;https://github.com/lightbend/reactive-sandbox&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reactive Sandbox&lt;/a&gt; which is a Docker image that contains the usual components used when developing reactive applications using the Lightbend frameworks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cassandra&lt;/li&gt;
  &lt;li&gt;Elasticsearch&lt;/li&gt;
  &lt;li&gt;Kafka&lt;/li&gt;
  &lt;li&gt;ZooKeeper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use &lt;a href=&quot;https://www.helm.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm&lt;/a&gt;, a package manager for Kubernetes, to set it up.
Install instructions of Helm are available on the &lt;a href=&quot;https://github.com/kubernetes/helm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt;.
For Mac for example you can install it using brew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ brew install kubernetes-helm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Helm we can then install the Reactive Sandbox:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;helm init
helm repo add lightbend-helm-charts https://lightbend.github.io/helm-charts
helm update
helm install lightbend-helm-charts/reactive-sandbox --name reactive-sandbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All set up, we can now utilise an sbt command to deploy all our services to Minikube!&lt;/p&gt;

&lt;p&gt;Start sbt in the root of your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ sbt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And deploy everything to Minikube using a sbt task that comes with the sbt-reactive-app plugin.
The task however is not yet supported on Windows unfortunately.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;deploy minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the setup we encountered a connection initialisation error of Helm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;Cannot initialize Kubernetes connection: Get http://localhost:8080/api: dial tcp 127.0.0.1:8080: getsockopt: connection refused
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We found a solution for this in the following Helm GitHub issue: &lt;a href=&quot;https://github.com/kubernetes/helm/issues/2464#issuecomment-381101015&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tiller pods can’t connect to k8s apiserver #2464&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ kubectl --namespace=kube-system create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all went well your application should be accessible at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://192.168.99.100&lt;/code&gt;.
You can use the Minikube dashboard to inspect everything at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.99.100:30000&lt;/code&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image&quot; style=&quot;width: 100%; max-width: 550px&quot; src=&quot;/img/lagom-kubernetes/frontend.png&quot; alt=&quot;Frontend&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Note that you can also deploy a single module instead of all of them.
For example if we only want to deploy the frontend, you simply switch to the specific project before running the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ sbt
[info] Loading global plugins from /Users/yannickdeturck/.sbt/0.13/plugins
[info] Loading project definition from /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/project
[info] Set current project to lagom-shop-scala (in build file:/Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/)
&amp;gt; projects
[info] In file:/Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/
[info] 	   common
[info] 	   frontend
[info] 	   itemApi
[info] 	   itemImpl
[info] 	   lagom-internal-meta-project-cassandra
[info] 	   lagom-internal-meta-project-kafka
[info] 	   lagom-internal-meta-project-service-locator
[info] 	 * lagom-shop-scala
[info] 	   orderApi
[info] 	   orderImpl
&amp;gt; project frontend
[info] Set current project to frontend (in build file:/Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/)
[frontend] $ deploy minikube
[info] Wrote /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/frontend/target/scala-2.12/frontend_2.12-1.0-SNAPSHOT.pom
[info] Packaging /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/frontend/target/scala-2.12/frontend_2.12-1.0-SNAPSHOT-sources.jar ...
[info] Done packaging.
[info] Packaging /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/frontend/target/scala-2.12/frontend_2.12-1.0-SNAPSHOT.jar ...
[info] Done packaging.
[info] Wrote /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/common/target/scala-2.12/common_2.12-1.0-SNAPSHOT.pom
[info] Wrote /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/item-api/target/scala-2.12/itemapi_2.12-1.0-SNAPSHOT.pom
[info] Wrote /Users/yannickdeturck/Documents/Git-projects/lagom-shop-scala/order-api/target/scala-2.12/orderapi_2.12-1.0-SNAPSHOT.pom
13:23:14.079 [pool-7-thread-1] DEBUG com.lightbend.lagom.internal.api.tools.ServiceDetector - Loading service discovery class: FrontendLoader
[info] Sending build context to Docker daemon  54.52MB
[info] Step 1/9 : FROM openjdk:8-jre-alpine
[info]  ---&amp;gt; b1bd879ca9b3
[info] Step 2/9 : RUN /sbin/apk add --no-cache bash
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; 193af79a4475
[info] Step 3/9 : WORKDIR /opt/docker
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; 741d2377c4e8
[info] Step 4/9 : ADD --chown=daemon:daemon opt /opt
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; d7884eead001
[info] Step 5/9 : USER daemon
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; cdedfe6fc10c
[info] Step 6/9 : ENTRYPOINT []
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; 2db1227ffe9e
[info] Step 7/9 : CMD []
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; bd147ead79fd
[info] Step 8/9 : COPY rp-start /rp-start
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; 340110c7c251
[info] Step 9/9 : LABEL com.lightbend.rp.app-name=&quot;frontend&quot; com.lightbend.rp.applications.0.name=&quot;default&quot; com.lightbend.rp.applications.0.arguments.0=&quot;/rp-start&quot; com.lightbend.rp.applications.0.arguments.1=&quot;bin/frontend&quot; com.lightbend.rp.app-version=&quot;1.0-SNAPSHOT&quot; com.lightbend.rp.app-type=&quot;lagom&quot; com.lightbend.rp.config-resource=&quot;rp-application.conf&quot; com.lightbend.rp.modules.akka-cluster-bootstrapping.enabled=&quot;false&quot; com.lightbend.rp.modules.akka-management.enabled=&quot;false&quot; com.lightbend.rp.modules.common.enabled=&quot;true&quot; com.lightbend.rp.modules.play-http-binding.enabled=&quot;true&quot; com.lightbend.rp.modules.secrets.enabled=&quot;false&quot; com.lightbend.rp.modules.service-discovery.enabled=&quot;true&quot; com.lightbend.rp.modules.status.enabled=&quot;false&quot; com.lightbend.rp.endpoints.0.name=&quot;http&quot; com.lightbend.rp.endpoints.0.protocol=&quot;http&quot; com.lightbend.rp.endpoints.0.ingress.0.type=&quot;http&quot; com.lightbend.rp.endpoints.0.ingress.0.ingress-ports.0=&quot;80&quot; com.lightbend.rp.endpoints.0.ingress.0.ingress-ports.1=&quot;443&quot; com.lightbend.rp.endpoints.0.ingress.0.paths.0=&quot;/&quot; com.lightbend.rp.sbt-reactive-app-version=&quot;1.1.0&quot;
[info]  ---&amp;gt; Using cache
[info]  ---&amp;gt; 7251c13a5373
[info] Successfully built 7251c13a5373
[info] Successfully tagged frontend:1.0-SNAPSHOT
[info] Built image frontend:1.0-SNAPSHOT
[info] deployment.apps &quot;frontend-v1-0-snapshot&quot; deleted
[info] service &quot;frontend&quot; deleted
[info] ingress.extensions &quot;frontend&quot; deleted
[info] deployment.apps &quot;frontend-v1-0-snapshot&quot; created
[info] service &quot;frontend&quot; created
[info] ingress.extensions &quot;frontend&quot; created
[success] Total time: 19 s, completed May 11, 2018 1:23:31 PM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can inspect everything with &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ kubectl get pods
NAME                                     READY     STATUS    RESTARTS   AGE
frontend-v1-0-snapshot-cbdbdb68b-rbrrx   1/1       Running   2          6d
reactive-sandbox-74fd955ddd-cjpw8        1/1       Running   7          6d

$ kubectl get services
NAME                             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                         AGE
frontend                         ClusterIP   10.103.128.78    &amp;lt;none&amp;gt;        10000/TCP                       6d
item                             ClusterIP   10.109.117.169   &amp;lt;none&amp;gt;        10000/TCP,10001/TCP,10002/TCP   6d
kubernetes                       ClusterIP   10.96.0.1        &amp;lt;none&amp;gt;        443/TCP                         6d
reactive-sandbox-cassandra       ClusterIP   None             &amp;lt;none&amp;gt;        9042/TCP                        6d
reactive-sandbox-elasticsearch   ClusterIP   None             &amp;lt;none&amp;gt;        9200/TCP                        6d
reactive-sandbox-kafka           ClusterIP   None             &amp;lt;none&amp;gt;        9092/TCP                        6d
reactive-sandbox-zookeeper       ClusterIP   None             &amp;lt;none&amp;gt;        2181/TCP                        6d

$ kubectl get ing
NAME       HOSTS     ADDRESS   PORTS     AGE
frontend   *                   80        6d
item       *                   80        6d

$ kubectl get deploy
NAME                     DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
frontend-v1-0-snapshot   1         1         1            1           6d
reactive-sandbox         1         1         1            1           6d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is currently no equivalent for Maven to deploy everything to Minikube in one simple command.
In the next section however, we will look at how we can utilise the reactive-cli tool for generating resource and configuration files, and deploying everything to Kubernetes which is also the way to go for development in this case.&lt;/p&gt;

&lt;h2 id=&quot;generating-kubernetes-resources-for-production&quot;&gt;Generating Kubernetes resources for production&lt;/h2&gt;
&lt;p&gt;The following workflow could also be used for development but it is more suited for deploying to your production environment as the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy minikube&lt;/code&gt; workflow in the previous section simplifies a lot of things for you.&lt;/p&gt;

&lt;p&gt;We will make use of the &lt;a href=&quot;https://github.com/lightbend/reactive-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;reactive-cli&lt;/a&gt; command-line tool to have it generate the Kubernetes resource and configuration files.
Installing is easy, as described in the &lt;a href=&quot;https://developer.lightbend.com/docs/lightbend-orchestration-kubernetes/latest/cli-installation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt;.
For Mac for example we can do this using Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;brew tap lightbend/tools &amp;amp;&amp;amp; brew install lightbend/tools/reactive-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verifying if it was installed correctly can be done by checking the version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ rp version
rp (Reactive CLI) 1.1.1
jq support: Unavailable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can utilise it to generate Kubernetes resources.
In the previous section we deployed our frontend and item service but we also have our order service to deploy.
Let us generate the Kubernetes resources and deploy it to Minikube.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ rp generate-kubernetes-resources &quot;orderimpl:1.0-SNAPSHOT&quot; --generate-services --generate-pod-controllers --pod-controller-replicas 2 --env JAVA_OPTS=&quot;-Dplay.http.secret.key=simple&quot;
---
apiVersion: &quot;apps/v1beta2&quot;
kind: Deployment
metadata:
  name: &quot;order-v1-0-snapshot&quot;
  labels:
    appName: order
    appNameVersion: &quot;order-v1-0-snapshot&quot;
spec:
  replicas: 2
  selector:
    matchLabels:
      appNameVersion: &quot;order-v1-0-snapshot&quot;
  template:
    metadata:
      labels:
        appName: order
        appNameVersion: &quot;order-v1-0-snapshot&quot;
    spec:
      restartPolicy: Always
      containers:
        - name: order
          image: &quot;orderimpl:1.0-SNAPSHOT&quot;
          imagePullPolicy: IfNotPresent
          env:
            - name: &quot;JAVA_OPTS&quot;
              value: &quot;-Dplay.http.secret.key=simple&quot;
            - name: &quot;RP_APP_NAME&quot;
              value: order
            - name: &quot;RP_APP_TYPE&quot;
              value: lagom
            - name: &quot;RP_APP_VERSION&quot;
              value: &quot;1.0-SNAPSHOT&quot;
            - name: &quot;RP_DYN_JAVA_OPTS&quot;
              value: &quot;-Dakka.discovery.kubernetes-api.pod-namespace=$RP_NAMESPACE&quot;
            - name: &quot;RP_ENDPOINTS&quot;
              value: &quot;HTTP,AKKA_REMOTE,AKKA_MGMT_HTTP&quot;
            - name: &quot;RP_ENDPOINTS_COUNT&quot;
              value: &quot;3&quot;
            - name: &quot;RP_ENDPOINT_0_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_0_BIND_PORT&quot;
              value: &quot;10000&quot;
            - name: &quot;RP_ENDPOINT_0_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_0_PORT&quot;
              value: &quot;10000&quot;
            - name: &quot;RP_ENDPOINT_1_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_1_BIND_PORT&quot;
              value: &quot;10001&quot;
            - name: &quot;RP_ENDPOINT_1_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_1_PORT&quot;
              value: &quot;10001&quot;
            - name: &quot;RP_ENDPOINT_2_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_2_BIND_PORT&quot;
              value: &quot;10002&quot;
            - name: &quot;RP_ENDPOINT_2_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_2_PORT&quot;
              value: &quot;10002&quot;
            - name: &quot;RP_ENDPOINT_AKKA_MGMT_HTTP_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_AKKA_MGMT_HTTP_BIND_PORT&quot;
              value: &quot;10002&quot;
            - name: &quot;RP_ENDPOINT_AKKA_MGMT_HTTP_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_AKKA_MGMT_HTTP_PORT&quot;
              value: &quot;10002&quot;
            - name: &quot;RP_ENDPOINT_AKKA_REMOTE_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_AKKA_REMOTE_BIND_PORT&quot;
              value: &quot;10001&quot;
            - name: &quot;RP_ENDPOINT_AKKA_REMOTE_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_AKKA_REMOTE_PORT&quot;
              value: &quot;10001&quot;
            - name: &quot;RP_ENDPOINT_HTTP_BIND_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_HTTP_BIND_PORT&quot;
              value: &quot;10000&quot;
            - name: &quot;RP_ENDPOINT_HTTP_HOST&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_ENDPOINT_HTTP_PORT&quot;
              value: &quot;10000&quot;
            - name: &quot;RP_JAVA_OPTS&quot;
              value: &quot;-Dconfig.resource=rp-application.conf -Dakka.discovery.method=kubernetes-api -Dakka.management.cluster.bootstrap.contact-point-discovery.effective-name=order -Dakka.management.cluster.bootstrap.contact-point-discovery.required-contact-point-nr=2 -Dakka.discovery.kubernetes-api.pod-label-selector=appName=%s&quot;
            - name: &quot;RP_KUBERNETES_POD_IP&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;status.podIP&quot;
            - name: &quot;RP_KUBERNETES_POD_NAME&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;metadata.name&quot;
            - name: &quot;RP_MODULES&quot;
              value: &quot;akka-cluster-bootstrapping,akka-management,common,play-http-binding,service-discovery,status&quot;
            - name: &quot;RP_NAMESPACE&quot;
              valueFrom:
                fieldRef:
                  fieldPath: &quot;metadata.namespace&quot;
            - name: &quot;RP_PLATFORM&quot;
              value: kubernetes
          ports:
            - containerPort: 10000
              name: http
            - containerPort: 10001
              name: &quot;akka-remote&quot;
            - containerPort: 10002
              name: &quot;akka-mgmt-http&quot;
          volumeMounts: []
          command:
            - &quot;/rp-start&quot;
          args:
            - &quot;bin/orderimpl&quot;
          readinessProbe:
            httpGet:
              path: &quot;/platform-tooling/ready&quot;
              port: &quot;akka-mgmt-http&quot;
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: &quot;/platform-tooling/healthy&quot;
              port: &quot;akka-mgmt-http&quot;
            periodSeconds: 10
            initialDelaySeconds: 60
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  labels:
    appName: order
  name: order
spec:
  ports:
    - name: http
      port: 10000
      protocol: TCP
      targetPort: 10000
    - name: &quot;akka-remote&quot;
      port: 10001
      protocol: TCP
      targetPort: 10001
    - name: &quot;akka-mgmt-http&quot;
      port: 10002
      protocol: TCP
      targetPort: 10002
  selector:
    appName: order
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could store the generated resources and tune it, but it is also possible to just generate everything that is necessary and just deploy it right away by chaining &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ rp generate-kubernetes-resources &quot;orderimpl:1.0-SNAPSHOT&quot; --generate-services --generate-pod-controllers --pod-controller-replicas 2 --env JAVA_OPTS=&quot;-Dplay.http.secret.key=simple&quot; | kubectl apply -f -
deployment.apps &quot;order-v1-0-snapshot&quot; created
service &quot;order&quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can verify whether it is up and running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sbtshell&quot;&gt;$ kubectl get deployments
NAME                     DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
frontend-v1-0-snapshot   1         1         1            1           6d
order-v1-0-snapshot      2         2         2            2           6m
reactive-sandbox         1         1         1            1           6d

$ kubectl get pods
NAME                                     READY     STATUS    RESTARTS   AGE
frontend-v1-0-snapshot-cbdbdb68b-mwfqq   1/1       Running   1          50m
order-v1-0-snapshot-5884754595-65wxd     1/1       Running   0          4m
order-v1-0-snapshot-5884754595-wdbng     1/1       Running   0          4m
reactive-sandbox-74fd955ddd-cjpw8        1/1       Running   7          6d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Upgrading to Lagom 1.4.x and Play 2.6 went pretty smooth as the migration guides of Lightbend cover mostly everything in detail as usual.&lt;/p&gt;

&lt;p&gt;The orchestration tools make it pretty easy to test your Lagom application running in Kubernetes locally while still having the possibility to fine-tune the generated resource and configuration files.
Integrating the tool suite into our project went smoothly.
Kubernetes has gained a lot of popularity lately and with this, Lagom shows that it wants to embrace Kubernetes to deploy your applications onto next to ConductR.&lt;/p&gt;

&lt;p&gt;The single &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy minikube&lt;/code&gt; command is not yet supported on Windows but we imagine that it will be in the near future.
Windows users can still utilise the &lt;code class=&quot;highlighter-rouge&quot;&gt;reactive-cli&lt;/code&gt; command-line tool to generate the resource and configuration files and deploy it themselves via &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; on their Minikube.
Maven users will only need to wait a little bit longer to take advantage of most things the tool suite has to offer as the plugin is nearing its first release version.&lt;/p&gt;

&lt;h2 id=&quot;extra-resources&quot;&gt;Extra resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yannickdeturck/lagom-shop-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Our Lagom Shop Scala application GitHub repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.lightbend.com/docs/lightbend-orchestration-kubernetes/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lightbend Orchestration Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lagom/online-auction-scala/blob/master/KUBERNETES.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubernetes instructions for the Lagom online-auction-scala application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fsat/hello-reactive-tooling&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hello-World for Lightbend Orchestration for Kubernetes for a sample Play application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/microservices/2016/04/22/Lagom-First-Impressions-and-Initial-Comparison-to-Spring-Cloud.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom: First Impressions and Initial Comparison to Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/microservices/2017/02/01/Lagom-1-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom 1.2: What’s new?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lagomframework.com/documentation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lagom Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/home/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubernetes Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;De Turck&quot;, &quot;twitter&quot;=&gt;&quot;YannickDeTurck&quot;, &quot;linkedin&quot;=&gt;&quot;yannickdeturck&quot;, &quot;github&quot;=&gt;&quot;yannickdeturck&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-de-turck/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-de-turck.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead JVM Languages&quot;, &quot;email&quot;=&gt;&quot;Yannick.DeTurck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yannick is a senior Java consultant and competence lead of the JVM languages competence center at Ordina Belgium. He's very much interested in everything Java and Spring related as well as reactive programming, Kotlin, Lightbend technologies, software architectures, and coaching and enabling other colleagues.&quot;}</name><email>Yannick.DeTurck@ordina.be</email></author><category term="Orchestration" /><category term="Lagom" /><category term="Java" /><category term="Scala" /><category term="Reactive" /><category term="Kubernetes" /><category term="Minikube" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/lagom-kubernetes.png" /></entry></feed>