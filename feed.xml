<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2022-02-11T14:06:44+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">What Would Discord Bot Do?</title><link href="https://ordina-jworks.github.io/development/2022/01/14/what-would-discord-bot-do.html" rel="alternate" type="text/html" title="What Would Discord Bot Do?" /><published>2022-01-14T00:00:00+00:00</published><updated>2022-01-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2022/01/14/what-would-discord-bot-do</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2022/01/14/what-would-discord-bot-do.html">&lt;p&gt;Online communication has been widespread for years already. 
But the current world situation has made it near ubiquitous. 
With social contact in real life (IRL) being restricted, our need for communication shifts to the digital world through a wide variety of platforms. 
One of those platforms that focuses heavily on the online gaming community is Discord. 
It offers text communication channels, functionality to videoconference with your friends, and share your screen as a live stream, usually showing off your gaming skills. 
It also offers a way to code interactions with those channels by employing bots.&lt;/p&gt;

&lt;p&gt;Bots in the Discord world are services that take the input presented on a discord server, and perform some automated tasks based on this input. 
Popular bots on Discord allow you to moderate the channel, script shortcut commands, play videos or music, or add all sorts of files. 
There are various possibilities out there that an administrator of a server can add or remove with the click of a button. 
It makes for a more enjoyable and streamlined experience in your interactions.&lt;/p&gt;

&lt;p&gt;But what if there is no bot available to suit the needs of your community? 
For these occasions, Discord offers a development platform where you can code your very own bot, with the functionalities you need. 
There are many possible frameworks to code such a bot (and even a few solutions that offer this functionality without the need to code), and they come in many different coding languages (Java, Python, .NET, Rust, …). 
Since my expertise with coding lies mainly in the Java world, I opted to make my bot in the &lt;a href=&quot;https://github.com/DV8FromTheWorld/JDA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java Discord API (JDA) framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started we first need to register an application in the &lt;a href=&quot;https://discord.com/developers/applications&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Discord Developer Portal&lt;/a&gt;. 
This is freely available to anyone who has registered a (free) account on Discord. 
It will look similar to the screenshot below, and presents a “New Application” button from where to start. 
After clicking the button, it prompts to enter a name for the new application, which I dubbed TestBotApplication all the while feeling like the next Shakespeare of the Digital Age.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordportal01.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This takes you to a screen that will allow you to fill in general information about your application, such as an image to identify it with, a description on what the application is for, and some tags to align your new application with searches performed by Discord members on the lookout for the next hot bot. 
It also gives you some technical information that you will need while coding such as the Application ID and the Public Key. 
To round off this section, you can optionally enter some URLs where you describe the Terms of Use and Privacy Policy.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordportal02.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this general information is set up, it is time to define a bot that is linked to this application. 
This is done by clicking on the Bot navigation item on the left side of the screen, which takes us to the Bot section, with a button labeled “Add Bot”. 
Here you can specify the name under which your bot will be visible on the servers that use it. 
Once again, in a fit of unbridled imagination, I went for “Developer Test Bot”. Nobel Prize for Literature, you will be mine!&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordportal03.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another important piece of the developer puzzle is the token that can be taken from this page. 
This will be the secret used by our code to access this bot. 
Other configurations that can be determined in this page are the visibility of your bot, as well as activating the usage of OAuth to authenticate with. 
At the bottom of the screen we can already see the different permissions we would like to give our bot. 
But the final piece of the puzzle before trying our hands with the JDA framework is to set up the permissions and connections over at the Oauth2 screen.&lt;/p&gt;

&lt;p&gt;On this page, there are only a few things that need to be set up. 
First off, the client id and secret are shown, which we need for our invite URL. 
The bot also needs a redirect in case of OAUTH2 authentication, should we choose to  activate it. 
It is clear that this should be: https://www.evolute.be/discord as we do not intend to activate OAuth for the time being. 
We therefore set the Authorization Method to In-app authorization, which will prompt the administrator of the server where the bot is activated to confirm the rights of the bot. 
We identify our bot as a “Bot” in the scope section, and decide on the rights the bot will need to perform its duties. 
Giving it the Administrator permission will allow the bot to do almost anything in the server, and is thus too wide a permission set for a bot in production, but for test purposes, we will leave it as such for now.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordportal04.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We head over the the URL Generator submenu item of the OAut2 menu, and fill in the scope “Bot” and permission set “Administrator” once more to get an INVITE URL, which will look something like this (with the client id filled in properly):&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;https://discord.com/api/oauth2/authorize?client_id=&amp;lt;clientid&amp;gt;&amp;amp;permissions=8&amp;amp;scope=bot&lt;/p&gt;

&lt;p&gt;Dropping this link in a browser will take you to a web page where you can add the bot to your Discord server. 
If everything is done correctly, it should show up in the member list of the server. 
But since there is not yet any code behind it, it will be shown as offline.&lt;/p&gt;

&lt;p&gt;Time to start coding. 
We first set up a simple Maven project with the JDA dependency wired in. 
It has its own maven repository, so that one we need to add as well. 
I am going for the latest LTS release, although more recent versions are already available (though still in alpha).&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;be.evolute.discord&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;DeveloperTestBot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0-initial&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;resources&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.dv8tion&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;JDA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.4.0_350&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;dv8tion&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;m2-dv8tion&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://m2.dv8tion.net/releases&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since Discord expects you to pilot the bot using WebSocket, I do not feel the need to create a service or a web application. 
I am just going to write a simple java class with a main method, so that I can run this from my IDE. 
This will connect to the bot by initializing the JDA context. 
With the JDBBuilder.createDefault method, you set up a WebSocket connection to your bot and to all resources the bot has been given access to (through permissions). 
This bot is identified by passing the Bot Token we can find in the Developer Portal on our bot page. 
If the JDA context cannot access the bot, it will throw a &lt;strong&gt;javax.security.auth.login.LoginException&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JDA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Booting up Developer Test Bot...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JDABuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DISCORD_TEST_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Presence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdaPresence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPresence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jdaPresence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listening&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/status...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jdaPresence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnlineStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ONLINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandsListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For those of you that are not familiar with the WebSocket protocol, it is a way to set up a stable connection between client and server to allow for bidirectional full-duplex communication between them (as opposed to the standard unidirectional requests a client sends towards server to immediately get a response). 
It is identified by the ws://-scheme (as opposed to the http:// or https:// schemes) and only a single TCP/IP socket is used for this channel (HTTP/HTTPS) throughout its existence.&lt;/p&gt;

&lt;p&gt;The exchange starts with the client sending a standard request to the server with a number of headers indicating that a WebSocket is needed (protocol switch). 
The response coming from the server (HTTP 101) indicates that it agrees to this, and passed a verification for the originator to identify it is responding to the client’s request. 
Once this WebSocket has been established, the server (or client) will send payloads wrapped in frames (ws scheme) to its counterpart. 
This will continue until either the server or the client sends a closing frame, prompting a closing reply. 
Once the closing reply is received, the WebSocket is terminated.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordwebsocket.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are various things you can do to the visualization of the bot in the server member list. 
The most common are setting the activity status of the bot and its activity label. 
My main method will set up the label the bot will show by setting its activity. 
I will set it with the label “Listening to /status…”. 
Other possible activities are Playing, Watching, Streaming… 
These activities do not do anything else than setting the label shown on the bot. 
The status of the bot (similar to your status in Teams) can be set with the setStatus method.&lt;/p&gt;

&lt;p&gt;The next thing to do, is to create a Listener for my bot that will react to events happening on the server. 
We add this listener (CommandsListener) to the JDA context with the addEventListener method. 
The Listener class itself should extend from the JDA class ListenerAdapter class. 
This gives us a number of methods we can overload to react to specific events. 
I have chosen only to react to messages posted in the text channels of my server, thus the onGuildMessageReceived method needs to be overloaded. 
A Discord guild is the collection of all particularities associated with your server: members, channels, etc…&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandsListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListenerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onGuildMessageReceived&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nonnull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuildMessageReceivedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentRaw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\s+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TextChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Danger, Will Robinson!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the commands I listen to might have parameters in the future, I decide to split up the incoming message with spaces as my delimiter. 
Then I have to verify that the incoming message is indeed a command, and not just a chat message from the guild members. 
For this reason, I check that the message is indeed the “/status” command the bot will need to react to. 
Once those checks have been made, I make the bot return the truth about any robot implementation: “Danger, Will Robinson!”. 
The messages in Discord can also be styled using a trimmed down version of Markdown. 
If you want to know what is possible, visit this &lt;a href=&quot;https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline-&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another interesting command is the sendTyping method. 
This creates the three blinking dots indicating a bot is typing something. 
This is turned off when a message is sent to the Discord server. 
As you might have noticed, there is a bit functional programming going on in these code snippets. 
In short, you can prep the message you are about send to the server with numerous options, and at the end, when you execute the queue method, it will be sent.&lt;/p&gt;

&lt;p&gt;Sending back a simple message is maybe not that useful, but you can insert any java code here that you wish for: performing calculations, calling services, … 
You might even want to pay homage to EverQuest, one of the first successful MMORPGs, and implement a “/pizza” command allowing your members to order pizza, so they don’t have to leave their chairs for anything.&lt;/p&gt;

&lt;p&gt;TextMessage replies are however very bland. 
A more fanciful option is to send an Embed message. 
This allows setting additional components such as a title, a colour board, images, a footer with thumbnail and lots of other stuff. 
This gives for more options should the need be there.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommandsListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListenerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onGuildMessageReceived&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nonnull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuildMessageReceivedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentRaw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\s+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TextChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;EmbedBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmbedBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;**Lost In Space**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The answer to your question: Danger, Will Robinson&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setThumbnail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn-icons-png.flaticon.com/512/3662/3662817.png&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFooter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Status Alert!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//st.depositphotos.com/1008244/1873/v/950/” + &lt;/span&gt;
	    &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depositphotos_18734623&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;illustration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessageEmbeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Triggering this listener will add the following message to the channel:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2022-01-14-what-would-discord-bot-do/discordembed.png&quot; alt=&quot;Workspace&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One last nugget of wisdom I will impart in this article: If you want to mention the member that typed the command for the bot in your bot’s reply, this can be done by adding the following piece of markup (&amp;lt;@!&amp;gt;):&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Replying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; + userId + &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mentionUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mentionRepliedUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your bot is ready to go and be enjoyed by all the members that grace your digital playground. 
Now that it is clear what your bot should do, you should probably go back to the permissions in the Discord Developer Platform, remove the Administrator permission, and activate only those permissions it will need.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="development" /><category term="Java" /><category term="Discord" /><category term="EDA" /><category term="architecture" /><category term="software architecture" /><summary type="html">Online communication has been widespread for years already. But the current world situation has made it near ubiquitous. With social contact in real life (IRL) being restricted, our need for communication shifts to the digital world through a wide variety of platforms. One of those platforms that focuses heavily on the online gaming community is Discord. It offers text communication channels, functionality to videoconference with your friends, and share your screen as a live stream, usually showing off your gaming skills. It also offers a way to code interactions with those channels by employing bots.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2022-01-14-what-would-discord-bot-do/discorddanger.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2022-01-14-what-would-discord-bot-do/discorddanger.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Writing End-to-End Tests in Java with Selenium</title><link href="https://ordina-jworks.github.io/development/2021/11/03/selenium-e2e-testing.html" rel="alternate" type="text/html" title="Writing End-to-End Tests in Java with Selenium" /><published>2021-11-03T00:00:00+00:00</published><updated>2021-11-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2021/11/03/selenium-e2e-testing</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2021/11/03/selenium-e2e-testing.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#end-to-end-testing&quot;&gt;End-To-End Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selenium&quot;&gt;Selenium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical-example&quot;&gt;Practical Example&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;end-to-end-testing&quot;&gt;End-to-End Testing&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/img/2021-10-04-selenium-e2e-testing/end-to-end.png&quot; class=&quot;image right medium&quot; /&gt;
End-to-end (often referred to as E2E) testing is a testing methodology used to test a complete flow from the beginning to the end of one or more specific use cases within your application.
Its main goal is to test your full application from an end user’s perspective and simulate everything that a real user would do.
This includes typing stuff, clicking buttons and/or links and test how your application responds to this behaviour.&lt;/p&gt;

&lt;p&gt;End-to-end testing can avoid, if done correctly, many complex situations and ensures that your application is stable and keeps working how it is intended to work.
If a button suddenly does not respond or does not behave in a way that you expect it to behave, end-to-end testing can detect this and warn you that your application is not functioning correctly.
Thanks to this, you can drastically improve stability, which gives you more time to implement features and reduces development costs.&lt;/p&gt;

&lt;p&gt;End-to-end testing often starts with a user interacting with a user interface which then interacts with your backend that executes code behind-the-scenes in order to display the correct information on the user interface.
This is done through an automated browser where the end-to-end test clicks and types for you.&lt;/p&gt;
&lt;h1 id=&quot;selenium&quot;&gt;Selenium&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.selenium.dev/documentation/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Selenium&lt;/a&gt; is an end-to-end testing framework which is available in many popular programming languages including Java, Python, JavaScript, … .
It provides a set of tools that allows you to connect with an automated browser that interacts with your frontend.
&lt;img src=&quot;/img/2021-10-04-selenium-e2e-testing/selenium-logo.png&quot; class=&quot;image right medium&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of Selenium’s features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cross-platform testing (PC, Android, iPhone, …);&lt;/li&gt;
  &lt;li&gt;Locating web elements on a page with advanced filtering such as XPath;&lt;/li&gt;
  &lt;li&gt;Selecting and interacting with found elements;&lt;/li&gt;
  &lt;li&gt;Capture screenshots at critical moments such as adding an entry in a table, submitting a form, …;&lt;/li&gt;
  &lt;li&gt;Keyboard &amp;amp; mouse emulation;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Selenium offers other products such as Selenium IDE and Selenium Grid, but at the core of Selenium, there is &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WebDriver&lt;/a&gt;.
WebDriver is an API provided by Selenium which controls the automated browser and is used to fluently write your test code. 
Each browser (Firefox, Chrome, …) has its own implementation of WebDriver. WebDriver then interacts with your browser’s driver in order to execute the behaviour that you have specified in your test.&lt;/p&gt;

&lt;h1 id=&quot;practical-example&quot;&gt;Practical example&lt;/h1&gt;
&lt;p&gt;This post comes with &lt;a href=&quot;https://github.com/yolanv/spring-boot-todo-demo/tree/selenium&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a repository&lt;/a&gt; (branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium&lt;/code&gt;) with a basic example of how Selenium works in a Spring Boot application.
This explains how you can use the WebDriver API to fetch and interact with certain elements and do various assertions or interactions to write your tests.
It also includes a small example of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDriverWait&lt;/code&gt;, which allows to pause the test and wait until a specific condition has been met on the page (i.e. loading an image, adding an entry to a table, …).
Both E2E tests capture a screenshot during interaction with the frontend and those screenshots can be found in the target folder. You can check in the implementation (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenshotService&lt;/code&gt;) on how easy it is to add screenshot support.
This can be combined with JUnit functionality (Rule for JUnit 4 and Extension for JUnit 5), for example when you can take a screenshot if your test ends or fails.&lt;/p&gt;

&lt;p&gt;For simplicity, I chose to use the Firefox browser. You will need the browser installed (or change the WebDriver implementation to your browser) in order for the test to work.
You can run the tests yourself and watch how Selenium interacts with the automated browser. Make sure you changed the path of the &lt;a href=&quot;https://github.com/mozilla/geckodriver/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;geckodriver&lt;/a&gt; binary in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BaseSeleniumE2ETest&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;test_e2e_assertvisiblehtmlelements&quot;&gt;test_E2E_AssertVisibleHtmlElements()&lt;/h2&gt;
&lt;p&gt;The first E2E test is a basic test that covers all the HTML elements that are visible (or, should be visible) on the main page.
In this test, various methods and approaches are used to find the desired elements and then to assert attributes like visiblity, text, colors, … .
Notice how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDriverWait&lt;/code&gt; pauses the test and waits for the image to load before proceeding.
By far the best approach to find elements on the page is to use XPath, which is a language that provides an easy way to find HTML elements on the page.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//table[@class='table']&lt;/code&gt; means that we want to find a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table&lt;/code&gt; element on the page that contains the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_E2E_AssertVisibleHtmlElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Find the content of the title by going through various HTML attributes on the page&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// You can go step-wise through your HTML elements to find the right one by chaining findElement()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;APP_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;APP_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Find the CSS value of a HTML element&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCssValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navColorHex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navColorHex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COLOR_HEX_ORANGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// We can ask the WebDriverWait to wait until the logo is done loading so we can proceed with the test&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// No chaining needed here, because 'logo' is only used by the img tag&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;waitDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Find the image through the class name 'logo'&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDisplayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Easily find the table and the button on the page through XPath&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//table[@class='table']/thead&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theadRows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;th&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theadRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theadRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theadRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Delete&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTableBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isZero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddTodoButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ADD_NEW_TODO_BUTTON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;captureScreenshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test_e2e_addnewtodototable_and_deletetodofromtable&quot;&gt;test_E2E_addNewTodoToTable_And_DeleteTodoFromTable()&lt;/h2&gt;
&lt;p&gt;The second (and last) E2E test actually interacts with the browser and asserts various elements based on these interactions.
The test is responsible for clicking on the “Add” button, fill in an item in the description text box and confirming the item, adding it to the table of TODOs.
Right after adding the item to the table, the test assures that the table contains an item and has the correct content, then deletes the item from the table.
Again, we use XPath in order to find the correct element because of the simple approach.
This time, the syntax is a little bit more advanced but definitely still easy to  use.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//div[@class='modal-body']/form/button[@type='submit']&lt;/code&gt; searches for a button of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submit&lt;/code&gt; in a form in a div with class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modal-body&lt;/code&gt;.
We can find the first element in the table by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//td[1]&lt;/code&gt;. Notice how it says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt; and not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0]&lt;/code&gt;. The starting index in XPath is always 1.
The “Delete” button is found by searching for the text inside the button (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//button[@type='submit' and text() = 'Delete']&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_E2E_addNewTodoToTable_And_DeleteTodoFromTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAddTodoButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// interact with the button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Wait two seconds to show visible changes&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Find an element on the page by using its id in the HTML element&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modalTitle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MODAL_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descriptionBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoDescription&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptionBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Type &quot;this is an E2E test&quot; in the input field&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;descriptionBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is an E2E test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Wait two seconds to show visible changes&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//div[@class='modal-body']/form/button[@type='submit']&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Interact with the &quot;Add todo&quot; button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;confirmButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;captureScreenshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTableBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use CSS selectors to find the columns of the TODO entry on the page&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cssSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tr:nth-child(1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;td&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//td[1]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is an E2E test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Wait two seconds to show visible changes&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Find the delete button based on the input type and the text in the button&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleteButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//button[@type='submit' and text() = 'Delete']&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deleteButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Verify that the item is removed from the table by checking if there are no &amp;lt;tr&amp;gt; elements&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTableBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="development" /><category term="Java" /><category term="Selenium" /><category term="Testing" /><category term="End-To-End" /><category term="E2E" /><category term="Test" /><summary type="html">Table of contents End-To-End Testing Selenium Practical Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-10-04-selenium-e2e-testing/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-10-04-selenium-e2e-testing/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5 Reasons not to go to the cloud</title><link href="https://ordina-jworks.github.io/leadership/2021/10/15/5-reasons-not-to-go-to-the-cloud.html" rel="alternate" type="text/html" title="5 Reasons not to go to the cloud" /><published>2021-10-15T00:00:00+00:00</published><updated>2021-10-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/leadership/2021/10/15/5-reasons-not-to-go-to-the-cloud</id><content type="html" xml:base="https://ordina-jworks.github.io/leadership/2021/10/15/5-reasons-not-to-go-to-the-cloud.html">&lt;p&gt;You were triggered by the title, weren’t you? 
You came here to look at the stupid arguments I wrote for defending legacy and on-premise solutions.
Unfortunately, I have to disappoint you already.
The title was indeed to trigger your interest.
This article will however provide you with some battle-tested answers to common reasons “not to go to the cloud”.
It will provide you with a strategy to counter common misconceptions for why the cloud “isn’t right for this project”.&lt;/p&gt;

&lt;p&gt;So if you’re working on a project and think you might benefit from moving to the cloud but are hitting walls of reasons not to do it, hang on tight because you might get some comebacks to counter the arguments.&lt;/p&gt;

&lt;p&gt;This blog will discuss the following 5 common scenarios which are used as reasons not to go to the cloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#we-cant-use-the-cloud-because-audit-said-we-cant&quot;&gt;We can’t use the cloud because audit said we can’t.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#we-cant-use-the-cloud-because-its-too-expensive&quot;&gt;We can’t use the cloud because it’s too expensive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#we-cant-use-the-cloud-because-its-not-secure&quot;&gt;We can’t use the cloud because it’s not secure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#we-cant-use-the-cloud-because-were-not-the-size-of-netflix&quot;&gt;We can’t use the cloud because we’re not the size of Netflix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-works-fine-why-bother&quot;&gt;This works fine, why bother?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;we-cant-use-the-cloud-because-audit-said-we-cant&quot;&gt;We can’t use the cloud because audit said we can’t&lt;/h2&gt;

&lt;p&gt;This is probably one of the most common reasons in the wild. 
You want to move some workload into a public cloud provider, but someone claims you can’t “because audit said we can’t”.&lt;/p&gt;

&lt;p&gt;This is a common misconception in a lot of projects. 
IT audits aren’t designed to prevent solutions from being created nor prevent the usage of any existing solution.
They impose a set of requirements that need to be fulfilled to comply with external regulations or internal rules.
Simply stating that “public cloud isn’t allowed by audit” is, therefore, a gross overstatement in a lot of cases.&lt;/p&gt;

&lt;h3 id=&quot;how-to-tackle-this-scenario&quot;&gt;How to tackle this scenario&lt;/h3&gt;

&lt;p&gt;As with most issues in companies, talking to the right people is paramount to getting something approved or resolved. 
This case is no different. 
Before moving workloads or spinning up resources in the cloud, ask (internal) audit about their requirements. 
Ask questions like the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What reporting information do you need to provide?&lt;/li&gt;
  &lt;li&gt;Who is allowed to perform which actions, and even more important, which roles separation needs to exist?&lt;/li&gt;
  &lt;li&gt;Which scenarios need to be covered by controls?&lt;/li&gt;
  &lt;li&gt;What measures need to be in place to prevent which scenarios?&lt;/li&gt;
  &lt;li&gt;Which public cloud services meet the requirements out-of-the-box and which need additional measures?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to include them in your journey towards the cloud and ask them about what they require additionally while you are moving workloads.
Having them on board from the get-go makes it a lot easier to have their buy-in into the solution instead of disapproving certain things afterwards.&lt;/p&gt;

&lt;p&gt;It also helps to get people with extensive knowledge about your cloud provider to talk to the auditors.
They have an overview of what features are already available in the services and even which features are on the roadmap to be implemented.&lt;/p&gt;

&lt;p&gt;As an example, infrastructure changes need to be logged, audited, and stored in a non-changeable way. 
On Microsoft Azure, this is already available through the Activity Logs which are provided out of the box.&lt;/p&gt;

&lt;h2 id=&quot;we-cant-use-the-cloud-because-its-too-expensive&quot;&gt;We can’t use the cloud because it’s too expensive&lt;/h2&gt;

&lt;p&gt;This one actually originates from a lot of horror stories about companies moving to the cloud and forgetting about the cloud bill at the end of the month. 
Or some hacker got access to the account and started spinning up expensive machines to mine bitcoins.
There are multiple examples small and not so small companies having experienced this: &lt;a href=&quot;https://arstechnica.com/information-technology/2018/02/tesla-cloud-resources-are-hacked-to-run-cryptocurrency-mining-malware/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tesla&lt;/a&gt;, &lt;a href=&quot;https://blog.tomilkieway.com/72k-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Announce&lt;/a&gt; and &lt;a href=&quot;https://www.teampay.co/insights/manage-cloud-costs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Adobe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started, the cloud isn’t for free, even though a lot of providers will give you some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; resources every month.
It’s still a service that you’re using and there will be a bill for it at the end of the month. 
But it’s not a reason to stay away from the cloud, quite the opposite.&lt;/p&gt;

&lt;h2 id=&quot;how-to-tackle-this-scenario-1&quot;&gt;How to tackle this scenario&lt;/h2&gt;

&lt;p&gt;The approach here differs somewhat compared to your starting scenario.&lt;/p&gt;

&lt;p&gt;The easiest way to counter this argument is of course to show that the public cloud is less expensive than the current platform. 
This can however be quite challenging because you need to have a platform already and the cost of that platform needs to be clear.
All major public cloud providers have an online calculator to estimate your costs based on your usage patterns. 
So if you’re in the position to input this information, this should provide you with a good estimate of the actual cost.
Being able to calculate the cost of the current platform is probably the harder part.
If you have internal cost centers, using those might be a good start if they reflect the real cost.
In some companies, the cost of the platform might actually be paid for by some central IT budget and isn’t really available to the different projects. 
If this is the case, try to ask the central department to provide you with some rough numbers or make a best-effort estimation yourself based on the budget, headcount and your own footprint in the platform. 
Make sure to include the headcount in the calculation of the platform as this is often forgotten when making these comparisons. 
And finally, if you’re in this situation and you are looking at a cloud provider, don’t forget to take the opportunity to look at re-platforming or re-architecting your solution. 
It might seem obvious, but costs could be heavily reduced by looking into managed solutions for existing components and since you’re changing anyway, you might as well invest in optimizing the solution.&lt;/p&gt;

&lt;p&gt;A second scenario is when there isn’t an application yet or it’s not live yet. 
This makes it harder to estimate how many resources you’ll need of course.
On the other hand, it will allow you to create solutions that use more integrated solutions from the public cloud provider.
These solutions are often more tightly integrated, but can also save you a lot of money because they are easier to operate and faster to build compared to traditional solutions. 
As most companies only have bare metal machines, a VM or container platform on-premise, the higher-level solutions can provide better operational abstractions and a lower cost of operating them.
Especially when you have a fully managed runtime like Google Cloud Run, AWS Lambda or Azure Functions.
With these solutions, you only provide the running code and the cloud provider actually operates the application.&lt;/p&gt;

&lt;p&gt;In both scenarios, the key to success in comparing public cloud against other options is to look at the so-called Total Cost of Ownership (TCO). 
This means you don’t only include the actual bill at the end of the month but also the cost of managing, operating and developing solutions on the platform you choose, including the headcount of the solutions.&lt;/p&gt;

&lt;p&gt;Another important practice to safeguard your cloud cost is to actively monitor them. 
Every major cloud provider allows you to set specific alerts for consumption. 
They even provide you with recommendations about sizing of resources and getting discounts based on sustained usage for example.
Setting these thresholds based on expected or budgeted amounts and acting when they are breached, should provide you with a good method to managing your cloud spends and prevent unexpected costly bills at the end of the month.&lt;/p&gt;

&lt;h2 id=&quot;we-cant-use-the-cloud-because-its-not-secure&quot;&gt;We can’t use the cloud because it’s not secure&lt;/h2&gt;

&lt;p&gt;This is one of my favourite ones because it can be both very valid and a totally bogus reason not to use the cloud.
To get the easy stuff out first, don’t use the public cloud if you have the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to be air-gapped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s about all the valid reasons, security-wise.&lt;/p&gt;

&lt;p&gt;It’s a common misconception that the public cloud isn’t as secure as your own data center.
It’s commonly told that it’s more secure to run software applications behind the firewall within an organisation because the organisation owns all the moving parts.
Looking at the multitude of security certifications that all major cloud providers have, it’s a pretty bold statement to claim that an organisation would be more secure compared to public cloud (&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/compliance/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure compliance&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/compliance/programs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/security/compliance/offerings&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google&lt;/a&gt;).
I’d personally argue that most cloud providers are an order of magnitude more secure than most on-premise datacenters. 
For every security role in your organisation, they probably have dozens. 
Just because it doesn’t run in your data center, doesn’t mean that it’s less secure.&lt;/p&gt;

&lt;p&gt;As with the audit requirements, talking to your security people upfront is key here. 
Make sure that you understand their concerns and see how you can provide the right level of trust in the public cloud solution. 
Ask them which security requirements you need to fulfil and check if and how the cloud provider fulfils them. 
If you’re already live with an on-premise solution, make sure to make the comparison with the current solution. 
You’ll often find that the cloud provides more security features and that especially auditability of these features is a lot easier compared to the on-premise solutions.&lt;/p&gt;

&lt;p&gt;Lastly, create a set of known good configurations for the services you want to use. 
For example, if your organisation requires data-at-rest to be encrypted with your own key, create automation scripts or runbooks on how to configure that service in a way that is compliant with the security requirements. 
Creating governance policies (E.g. on &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/governance/policy/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure&lt;/a&gt;) which are validated on the entire platform might help with proving that you’re in fact working securely. 
Due to the level of automation that’s possible on the cloud and the integration options between the different solutions, there are quite a lot of scenarios where the public cloud is actually more secure than an on-premise solution.&lt;/p&gt;

&lt;h2 id=&quot;we-cant-use-the-cloud-because-were-not-the-size-of-netflix&quot;&gt;We can’t use the cloud because we’re not the size of Netflix&lt;/h2&gt;

&lt;p&gt;This reason actually covers more than the title might lead you to believe. 
Some companies argue that the public cloud is not for them as they only need some small applications. 
One could actually argue that the opposite is true.
For many of the large “internet age” companies, it makes more sense to invest in their own infrastructure instead of paying public cloud providers literal millions each month to host their applications.&lt;/p&gt;

&lt;p&gt;Important to note is that cloud providers offer way more services than just plain compute capabilities also known as Virtual Machines (VMs). 
They offer a magnitude of managed services, most of them targetted at reducing the operational overhead and therefore cost, for their customers. 
Even if your requirement is to have plain vanilla VMs with some software you’re licensing, chances are high that a managed or packaged version is available on the cloud providers marketplace.&lt;/p&gt;

&lt;p&gt;So public cloud actually makes a lot of sense for a very wide range of customers. 
If you’re a small SME that basically needs some compute resources to run some licensed software, they have got you covered.
If you’re a startup looking to leverage ready to use building blocks and focus as much as possible on your added value and not on operational complexity, they’ve got you covered.
If you’re a large corporation that wants to reduce their TCO of owning, managing and operating their on-premise solutions, they’ve got you covered.&lt;/p&gt;

&lt;p&gt;I’d actually argue that the size of the organisation doesn’t really dictate if you can move to the cloud, it’s the culture and people.
Using the public cloud requires a slightly different and less siloed mindset in the organisation. 
Most of the time, you’ll get end-to-end responsibility and access to the components that you need in the cloud. 
This provides you with the flexibility to create the solution that fits you best, but it also means that there is no other team that will maintain or operate the resources you’re using.
Almost always, this freedom heavily outweighs the additional “management” of the resources and if it’s too much management, you probably need to look into one of the managed solutions offered by your cloud provider as a replacement for the resources you’re using.&lt;/p&gt;

&lt;h2 id=&quot;this-works-fine-why-bother&quot;&gt;This works fine, why bother?&lt;/h2&gt;

&lt;p&gt;This question should actually be the first one that should be asked by every manager when a potential move to anywhere (not just the public cloud) comes up.
“What’s in it for me?”
This question can be answered with all of the above arguments we already discussed, but we’ll highlight a couple of opportunities additionally here.&lt;/p&gt;

&lt;h3 id=&quot;reducing-time-to-market&quot;&gt;Reducing time to market&lt;/h3&gt;

&lt;p&gt;Being able to react to quickly changing markets and circumstances from a business standpoint is already important today, but it will only become more important in the future. 
Building software solutions that take months or even years before they see the first real usage, isn’t the best strategy in 2021 and it will be a terrible strategy soon. 
Companies that can respond quickly to changes and can validate new business ideas quickly will win the markets. 
The public cloud can help here as well. 
Since it offers a lot of managed solutions that can grow over time, it facilitates this testing and validating strategy. 
A simple application can be put live in a matter of days or even hours to validate a business idea. 
When the time comes to scale out the solution, it becomes as easy as allowing your application to scale to the required size and picking up the bill at the end of the month.&lt;/p&gt;

&lt;h3 id=&quot;attracting-talent&quot;&gt;Attracting talent&lt;/h3&gt;

&lt;p&gt;The public cloud is a hot topic within the software engineering community and there are a lot of people interested in it.
A nice advantage of using the public cloud is that you’ll have an easier time attracting highly skilled talent to work on the project.
On-premise solutions are often considered legacy and aren’t as attractive to new hires.
The cloud also provides a lot of certification and specialisation tracks, allowing you to effectively find people that have a proper record for using the solutions.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The key takeaway of this post should be to talk to people.
Ask them why they are opposed to moving to the public cloud. 
Ask them what is needed to be allowed to move, which requirements you need to fulfil and why these requirements are relevant.
Don’t accept a plain NO without valid reasoning. 
Try to look for similar projects within your organisation and find out if there are examples of projects that have moved to the public cloud already.
Failing that, look at others like the &lt;a href=&quot;https://deutsche-boerse.com/dbg-en/media/press-releases/Deutsche-B-rse-and-Microsoft-reach-a-significant-milestone-for-cloud-adoption-in-the-financial-services-industry-1540058&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Deutsche Boerse&lt;/a&gt; or &lt;a href=&quot;https://www.youtube.com/watch?v=uz4bs9EQA0E&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alphabet International Gmbh&lt;/a&gt; that have adopted public cloud as well.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to &lt;a href=&quot;https://www.linkedin.com/in/pieter-vincken-a94b5153/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;me&lt;/a&gt; or any other Ordina colleagues if you want help with starting to adopt the cloud.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-vincken-a94b5153&quot;, &quot;twitter&quot;=&gt;&quot;PieterVincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Leadership" /><category term="cloud" /><category term="technical leadership" /><category term="architecture" /><summary type="html">You were triggered by the title, weren’t you? You came here to look at the stupid arguments I wrote for defending legacy and on-premise solutions. Unfortunately, I have to disappoint you already. The title was indeed to trigger your interest. This article will however provide you with some battle-tested answers to common reasons “not to go to the cloud”. It will provide you with a strategy to counter common misconceptions for why the cloud “isn’t right for this project”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-08-01-5-reasons-not-to-go-to-the-cloud/intro.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-08-01-5-reasons-not-to-go-to-the-cloud/intro.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tips for being an influential technical team lead</title><link href="https://ordina-jworks.github.io/leadership/2021/07/06/Influential-tech-lead.html" rel="alternate" type="text/html" title="Tips for being an influential technical team lead" /><published>2021-07-06T00:00:00+00:00</published><updated>2021-07-06T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/leadership/2021/07/06/Influential-tech-lead</id><content type="html" xml:base="https://ordina-jworks.github.io/leadership/2021/07/06/Influential-tech-lead.html">&lt;p&gt;As a software engineer, I really enjoy creating applications and solving complex technical problems.
But some years ago, there it suddenly was: I was no longer only a “do-er” but an “oversee-er” as well.
At that point I had received very little formal managerial training, so learning on the job or from mentors was crucial to be successful.
The soft skills I needed for my new role turned out to be more difficult than I initially thought.
One of those difficult soft skills for me was (and often still is) the ability to influence people.
Influencing others is not just about getting them to agree with your point of view or manipulating them to get your way, nor does it involve forcing others to change by using power and control.
It’s about noticing what motivates others and using that knowledge to leverage performance and positive results.&lt;/p&gt;

&lt;p&gt;Taking up the technical team lead role is not always an easy one.
Often the skills necessary to be a great developer don’t translate easily to the role of a technical team lead.
In this post, I will give some tips on how to be an influential technical team lead.&lt;/p&gt;

&lt;h2 id=&quot;have-a-clear-vision&quot;&gt;Have a clear vision&lt;/h2&gt;
&lt;p&gt;A vision is a clear image of how you see the future.
It’s something that keeps you motivated and excited to do what you do.
A technical team lead must be able to both zoom in and zoom out on a project.
On one hand, you need to be able to look in detail into a technical requirement.
On the other hand, you also need to keep the bigger picture in mind and how the requirement fits into the greater vision.
If you’re a technical team lead that has no vision and isn’t going anywhere, then how can you expect your team will follow you?
In order to create a vision you can ask yourself questions like ”What do you want to achieve?, “Which (tangible) output do you want when achieving your goal?”, “How would that output change the way things are done now?”, …
Setting specific goals together with your team that move towards your vision will help you to achieve it.&lt;/p&gt;

&lt;p&gt;Once you have that vision and goals, being predictable is key.
By doing so, everybody knows what you’re trying to achieve.
The Don’t-Repeat-Yourself principle, which is a key principle for each software engineer, does not apply when working with people.
Communicate your vision and goals over and over again: repetition and predictability are key.&lt;/p&gt;

&lt;h2 id=&quot;be-collaborative&quot;&gt;Be collaborative&lt;/h2&gt;
&lt;p&gt;A top-down approach where nobody has a say in the process and where both vision and goals are pushed downwards, is very easy for team members to reject.
A different and more sustainable approach is to be a collaborative technical team lead.
This means that you regularly seek out a diversity of opinions and ideas amongst teammates to solve problems.
Involve your team in creating a shared vision, and identify the behaviours necessary to accomplish it.
It’s all about getting the team to think through these difficulties themselves instead of telling them what to do all the time.
As a result they are more engaged, feel trusted, and are more likely to take ownership of their work.
Building meaningful relationships is one of the key responsibilities of a technical team lead.&lt;/p&gt;

&lt;h2 id=&quot;practice-active-listening&quot;&gt;Practice active listening&lt;/h2&gt;
&lt;p&gt;We often think about influence as being what we say or how we say it, but improving your listening skills is key to gaining your team’s trust and creating psychological safety.
As technical team leads we’re often pulled in many directions throughout the day. 
The most common pitfall is that we listen to reply, not to understand.
It’s easy to be a passive listener by multitasking and only listening to the highlights. 
While it may seem like you don’t have time, making the time to really listen to your team can increase your leadership capacity significantly.
Active listening is the ability to focus completely on your team, understand their message, comprehend the information and respond thoughtfully in a relevant way.
This also includes not only capturing the message, but paying attention to subtle hints and non-verbal communication such as tone, emphasis, facial expressions and body language.
Keep in mind that a true servant leader only speaks about 20 to 30% of the time, the rest should be spent on listening.&lt;/p&gt;

&lt;p&gt;When your team members know that they will be heard, they are more likely to openly share their ideas and provide honest feedback.
Knowing how and when to gather knowledge of your team members is important, since you can then synthesize it into a better solution before deciding the course forward.&lt;/p&gt;

&lt;h2 id=&quot;influenceothers&quot;&gt;Influence others&lt;/h2&gt;
&lt;p&gt;At a basic level, influence is about compliance.
It is about getting someone to do what you want them to do, it allows you to get things done and achieve desired outcomes.
However, this can never be accomplished by power and control, but only by genuine commitment of other people.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-07-06-Influential-tech-lead/planned-behaviour.png&quot; alt=&quot;Planned Behaviour&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This simplified diagram is based on “The theory of planned behaviour” by Icek Ajzen, a social psychologist and professor emeritus at the University of Massachusetts Amherst.
His theory assumes that before every Behaviour, there is an Intention.&lt;/p&gt;

&lt;p&gt;A simple practical example: you notice a specific behaviour from a software engineer on your team, namely that he/she refuses to write unit tests.
As a technical team lead, you are interested in why he/she formed the intention not to write these unit tests because you’re convinced that unit tests have a variety of benefits such as improving of code quality, finding bugs early and facilitating change.&lt;/p&gt;

&lt;p&gt;There are three elements that can help us trying to understand why your colleague formed this intention:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Attitude a.k.a “Is the behaviour good and is it right?”&lt;/strong&gt;:  We’re deciding if the behaviour is in our own best interest or if it is the right thing to do. So if we have a positive attitude towards the behaviour, it is more likely that we will perform the behaviour. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subjective norm a.k.a “What’s everyone else doing?”&lt;/strong&gt;: We’re asking ourselves what others think of the behaviour and how they judge it. If we think that others consider the behaviour to be normal or good, it is more likely that we will perform the behaviour. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Perceived behavioural control a.k.a “Can I do it?”&lt;/strong&gt;: When we believe that behaviour is easy to perform, we are more likely to perform the behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So when you’re asking the software engineer on your team to write unit tests, the three elements listed above will cross his mind and he/she will ask himself questions like: “Is it a good thing to write unit tests?”, “Is it in my own interest to write unit tests?”, “Does everyone write unit tests or is it just me?”, “Do I know how to write unit tests and do I have enough information/time to write them?”, …
Targeting each and every one of these elements is the key to success when you want your colleague to start writing unit tests.&lt;/p&gt;

&lt;p&gt;So what can you do to influence the other person’s thinking?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“Is the behaviour good and is it right?”&lt;/strong&gt;: Identify what the other person cares about, what he/she thinks is good and what he/she thinks is the right thing to do. For example, your colleague might think it’s super important to finish his user story as quickly as possible. The key thing to do here as a technical team lead is not to be manipulative or dishonest, but to genuinely align your goals with his motivations and things he/she already cares about. Writing unit tests facilitates change, provides documentation, and ultimately saves time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“What’s everyone else doing?”&lt;/strong&gt;: You can present that writing unit tests is an industry standard and not some kind of crazy idea you’ve just come up with.
Presenting it as a good practice and being able to demonstrate why other successful teams or companies do it, is a good way to help your colleague see that what you’re asking him to do is normal in the industry.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Can I do it?”&lt;/strong&gt;: If your colleague thinks it is too difficult, he/she will never start writing unit tests. Therefore, present it as a clear and small change, and make it easy for him to do. Offer your support and show examples of good and successful unit tests so he/she gains confidence and knows he/she can do it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The key to successful leadership is influence, not authority.” – Ken Blanchard&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martin&quot;, &quot;last_name&quot;=&gt;&quot;Kwee&quot;, &quot;permalink&quot;=&gt;&quot;/author/martin-kwee/&quot;, &quot;avatar&quot;=&gt;&quot;martin-kwee.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader eHealth&quot;, &quot;email&quot;=&gt;&quot;martin.kwee@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;martinkwee&quot;, &quot;bio&quot;=&gt;&quot;Martin is a Java consultant at Ordina Belgium. He enjoys a good technical challenge and has a strong interest in architecture and eHealth.&quot;}</name><email>martin.kwee@ordina.be</email></author><category term="Leadership" /><category term="leadership" /><category term="technical leadership" /><category term="influence" /><summary type="html">As a software engineer, I really enjoy creating applications and solving complex technical problems. But some years ago, there it suddenly was: I was no longer only a “do-er” but an “oversee-er” as well. At that point I had received very little formal managerial training, so learning on the job or from mentors was crucial to be successful. The soft skills I needed for my new role turned out to be more difficult than I initially thought. One of those difficult soft skills for me was (and often still is) the ability to influence people. Influencing others is not just about getting them to agree with your point of view or manipulating them to get your way, nor does it involve forcing others to change by using power and control. It’s about noticing what motivates others and using that knowledge to leverage performance and positive results.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-07-06-Influential-tech-lead/influence.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-07-06-Influential-tech-lead/influence.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ordina Internship TC Guard</title><link href="https://ordina-jworks.github.io/internship/2021/06/15/TC-Guard.html" rel="alternate" type="text/html" title="Ordina Internship TC Guard" /><published>2021-06-15T00:00:00+00:00</published><updated>2021-06-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/internship/2021/06/15/TC-Guard</id><content type="html" xml:base="https://ordina-jworks.github.io/internship/2021/06/15/TC-Guard.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;We started our internship at Ordina in February 2021 which lasted for 15 weeks.
The internship was a part of our thesis, which was necessary to graduate.
During this internship, we developed an Android application to assist drivers while driving trough a trajectory control.
Alongside the application, we also developed an API using Spring Boot. These two components made it possible to learn and use Kubernetes. 
Certain technologies were installed on the Kubernetes cluster to enable metrics and centralized logging.
During the internship, we were introduced to a wide range of technologies that we’ve never used during our bachelor’s degree.&lt;/p&gt;

&lt;h1 id=&quot;azure-devops&quot;&gt;Azure DevOps&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/azure_devops.png&quot; class=&quot;image right medium&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure DevOps has a plethora of technologies to provide assistance throughout the development cycle.
We used a handful of these technologies for this project, including Azure Repos, Azure Pipelines, Azure Artifacts and Azure Boards.
It also allowed us to work with scrum using the built-in boards, which ensured that the mentors could track our progress.
Overall, Azure DevOps is a very useful and feature-rich platform to use.&lt;/p&gt;

&lt;h1 id=&quot;api&quot;&gt;API&lt;/h1&gt;
&lt;p&gt;Our first experience with Java was in highschool, where we learned most of the programming basics. 
In college, we only used Java during our Android Development course.
Because of this, we weren’t that well versed when it came down to Java specific features.
While working on the API, we learned quite a lot about Java, but also some programming principles.&lt;/p&gt;

&lt;h3 id=&quot;spring&quot;&gt;Spring&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/spring.png&quot; class=&quot;image left medium&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Spring framework is a Java platform that provides comprehensive infrastructure support for developing Java applications. 
We started out by creating a small RESTful API using one of the tutorials on the official Spring website. 
Alongside the tutorial we also used the extensive online documentation.&lt;/p&gt;

&lt;p&gt;In college, we had a .NET course where we used ASP.NET to build an API.
We quickly discovered while working with Spring Boot that our preference goes to Spring instead of ASP.NET.
One of the reasons is that Spring Boot does a lot for the developer while in ASP.NET you have to do more things manually.&lt;/p&gt;

&lt;h3 id=&quot;postgresql&quot;&gt;PostgreSQL&lt;/h3&gt;
&lt;p&gt;The API’s database is a PostgreSQL database, which is used to store the collected data, the recorded trajectory controls and the drivers.
Flyway is used to keep our database structure up-to-date using migrations.&lt;/p&gt;

&lt;h3 id=&quot;api-first&quot;&gt;API First&lt;/h3&gt;
&lt;p&gt;To develop the API, we used the API-first design principle. This approach includes developing APIs that are consistent and reusable.
This can be achieved by creating an API contract that describes the capabilities and behavior of the API.
This ensures that more time is spent thinking about the design of the API.
It often included additional planning and collaboration with our mentors.
We drew up this contract ourselves. 
Later we found that there is a Swagger Editor that uses the Open API type. 
Since we already had a contract we decided not to use it.
They provided feedback on the design of the API before any code was written.
The first code that was written were tests.
This method is called Test Driven Development (TDD).
Specific attention was paid to the API contract, as the tests are based on them.
TDD also allows for bugs to be found at an early stage because after writing code, the developers can run the tests and thus check whether the code works or not.&lt;/p&gt;

&lt;h1 id=&quot;android-application&quot;&gt;Android Application&lt;/h1&gt;
&lt;p&gt;The user can add trajectory controls themselves via the record button.
Once the user has passed the starting point of their trajectory control, they must press this button to start the process.
During this process the starting point is saved and a checkpoint is added every 100 meters.
When the user passes the end point of their trajectory control, they need to press this button again to define the end point and the maximum speed.
The application will ask the user for the maximum speed.
This will be automatically filled in by a speculation performed by the application.
Once the process is finished, the trajectory control will be stored in the database via the API.&lt;/p&gt;

&lt;h3 id=&quot;android-native&quot;&gt;Android Native&lt;/h3&gt;
&lt;p&gt;Android Native was already known because of the Android Development subject.
As a result, we did not encounter too many problems in terms of development.
The biggest problem we have experienced is that Android Native is not that user friendly in terms of design.
If we were to start over, we would prefer a Hybrid approach like Ionic or NativeScript instead of Android Native.&lt;/p&gt;

&lt;h3 id=&quot;finished-product&quot;&gt;Finished Product&lt;/h3&gt;

&lt;p style=&quot;display:flex; justify-content:space-around&quot;&gt;
  &lt;img src=&quot;/img/2021-05-27-TC-Guard/main.png&quot; style=&quot;width: 45vw; max-width: 350px;&quot; /&gt; 
  &lt;img src=&quot;/img/2021-05-27-TC-Guard/dashboard.png&quot; style=&quot;width: 45vw; max-width: 350px;&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/schema.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The figure above shows the block diagram of this project.
This diagram represents all the components of this internship.
Each component will be briefly discussed below.
All applications required for this internship run within a single Kubernetes cluster.
Inside this cluster, Argo CD is used to keep everything up-to-date.
The Android application is connected to the TC Guard API using Contour.
This is also used to expose the Graylog dashboard to the public.
TC Guard and Graylog are connected so that the logs from TC Guard can be sent to Graylog.
The data collected by the Android application is stored in the PostgreSQL database via the TC Guard API.
When the application needs this data, it is retrieved again via the TC Guard API.
The last block connected to the TC Guard API is Prometheus.
Prometheus is used to observe the API.
The resulting data is then displayed in the Grafana dashboard.&lt;/p&gt;

&lt;h3 id=&quot;argo-cd&quot;&gt;Argo CD&lt;/h3&gt;
&lt;p&gt;Argo CD is a Continuous Delivery GitOps tool for Kubernetes.
Within the internship assignment, this is used to install Helm charts on the Kubernetes cluster.
If a change is made on the Azure DevOps repository, Argo CD will detect this and implement the changes on the Kubernetes cluster via a rolling update.&lt;/p&gt;

&lt;p&gt;It was quite satisfying to observe the changes being applied.
Argo CD made managing our applications much easier.
For example when we updated Graylog, the only thing we had to do was change the version number in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; file and Argo CD took care of everything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/argocd.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ingress&quot;&gt;Ingress&lt;/h3&gt;
&lt;p&gt;Ingress provides routing rules to manage remote users’ access to services in a Kubernetes cluster. With Ingress, simple rules can be set for routing traffic without exposing every service on the endpoint.
While setting up Ingress, a few issues surfaced due to our inexperience with Kubernetes.
Because the online documentation of Ingress nginx was rather limited, setting up Ingress took a fair amount of time.
Afterwards, Ingress nginx was replaced by Contour.
By this time we had more experience with Kubernetes.
Because of this, the switch to Contour went smoothly.&lt;/p&gt;

&lt;h3 id=&quot;graylog&quot;&gt;Graylog&lt;/h3&gt;
&lt;p&gt;The centralized logging system aims to obtain the logs of the API and the Android application in a central place so that it would be easier to detect errors.
To obtain and view the logs in a central place, Graylog is used.
We chose Graylog because it is much easier to use than Kibana.
We knew that Kibana has more features than Graylog, but for this project it was not required.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/graylog.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;grafana&quot;&gt;Grafana&lt;/h3&gt;
&lt;p&gt;Prometheus was used to observe the API.
Prometheus collects metrics from targets by scraping given HTTP endpoints.
Actuator is a Spring Boot plugin that is used to manage and monitor your application by using HTTP endpoints. 
This makes it possible for Prometheus to gather metrics and monitor the health of the application. 
Grafana then uses Prometheus as a source to display the metrics on a custom dashboard.&lt;/p&gt;

&lt;p&gt;We were unsure how to add a target to Prometheus while it was running on Kubernetes. 
Because we were not sure how to modify the config file, a lot of time was lost.
To solve this problem we had to create a secret that contains the target.
This secret should then be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.yaml&lt;/code&gt; file.
When rebooting the Prometheus pod, the target was added.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-05-27-TC-Guard/grafana.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;During this internship there were a lot of new technologies covered such as Spring, Kubernetes, Graylog and so on.
The internship assignment consisted of three main parts including the Android application, the Spring Boot API and Kubernetes.
As described earlier, the biggest problem that we experienced was that Android Native is not that user friendly in terms of design.
If we were to start over, we would go for a Hybrid approach like Ionic or NativeScript instead of Android Native.
Once we had the basics of the application, we started working on the Spring Boot API.
Spring was completely new to us, but because of the complete and structured online documentation, the learning process went smoothly with some guidance from our mentors.
The mentors had a few remarks.
The remarks were justified, they were about our structure and programming style.
In order to improve the structure, Domain-Driven Design was recommended by our mentors.
As a last important part, we deployed the API on Kubernetes.
Besides the API, a few other things were implemented on the Kubernetes cluster such as Graylog and Grafana.
Kubernetes was completely new to us as it was not covered in the graduate program Application Development.
We found that the learning curve is quite steep in the beginning because it were all new concepts.
Because of the proper guidance from our mentors, we got through this initial period.
At the end of the internship, working with Kubernetes didn’t scare us anymore and dealing with it was less difficult.&lt;/p&gt;

&lt;p&gt;We would like to thank Frederick Bousson for offering us this wonderful opportunity.
Furthermore, we would like to thank Jeff Mesens and Nils Devos.
Thanks to their contribution we were able to successfully complete this project.
Without their help, we could not have made such a great evolution.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Vereecken&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen-vereecken/&quot;, &quot;avatar&quot;=&gt;&quot;jeroen-vereecken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Intern&quot;, &quot;email&quot;=&gt;&quot;jeroen.vereecken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Vereecken is a last year student Electronica-ICT Application Development at Thomas More Campus De Nayer.&quot;}</name><email>jeroen.vereecken@ordina.be</email></author><category term="Internship" /><category term="Spring" /><category term="Spring Boot" /><category term="Cloud-Native" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="Kubernetes" /><category term="Android" /><summary type="html">Introduction We started our internship at Ordina in February 2021 which lasted for 15 weeks. The internship was a part of our thesis, which was necessary to graduate. During this internship, we developed an Android application to assist drivers while driving trough a trajectory control. Alongside the application, we also developed an API using Spring Boot. These two components made it possible to learn and use Kubernetes. Certain technologies were installed on the Kubernetes cluster to enable metrics and centralized logging. During the internship, we were introduced to a wide range of technologies that we’ve never used during our bachelor’s degree.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-05-27-TC-Guard/schema.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-05-27-TC-Guard/schema.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Intro to mqtt</title><link href="https://ordina-jworks.github.io/iot/2021/05/26/intro-to-mqtt.html" rel="alternate" type="text/html" title="Intro to mqtt" /><published>2021-05-26T00:00:00+00:00</published><updated>2021-05-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2021/05/26/intro-to-mqtt</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2021/05/26/intro-to-mqtt.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mqtt-terminology&quot;&gt;MQTT terminology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#broker-options&quot;&gt;Broker options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-examples&quot;&gt;Basic example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mqtt.org/mqtt-specification/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTT&lt;/a&gt; or Message Queuing Telemetry Transport is a very lightweight IoT messaging protocol.
It was originally designed by IBM and has become royalty free since 2010.&lt;/p&gt;

&lt;p&gt;It is very lightweight, both on computational and network resources to send and receive messages, making it ideal for use with IoT applications as well as restrained network conditions.
The protocol is built on top of tcp/ip so both broker and client require a tcp/ip stack.
This allows for reliable bi-directional communication that supports authentication and TLS encryption and uses the publish/subscribe pattern.&lt;/p&gt;

&lt;p&gt;Using this pattern has multiple advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Space decoupling: Publisher and subscriber clients do not need to know each other.&lt;/li&gt;
  &lt;li&gt;Time decoupling: Publisher and subscribers do not need to run at the same point in time.&lt;/li&gt;
  &lt;li&gt;Synchronization decoupling: Operations do not need to be interrupted during publishing or receiving.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also be reminded that MQTT is &lt;strong&gt;NOT&lt;/strong&gt; a message queue!
By default, messages will not be stored if there are no clients to consume them, and even retained messages only keep the last retained message, overwriting any previous retained message.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-05-26-intro-to-mqtt/mqtt-publish-subscribe.png&quot; data-lightbox=&quot;ui&quot; data-title=&quot;MQTT&quot;&gt;
        &lt;img alt=&quot;MQTT&quot; src=&quot;/img/2021-05-26-intro-to-mqtt/mqtt-publish-subscribe.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mqtt-terminology&quot;&gt;MQTT terminology&lt;/h2&gt;

&lt;p&gt;Let’s go over some terminology to better understand and grasp the concepts of the MQTT protocol:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-3-client-broker-connection-establishment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Broker&lt;/a&gt;:
The host that acts as the manager for all messages.
It is responsible for receiving messages from publishers, performing checks to see which subscribers match the topic and sending the messages to those subscribers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-3-client-broker-connection-establishment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Client&lt;/a&gt;:
An MQTT client, meaning any instance that implements logic to connect to a broker.
Clients can be a publisher, a subscriber, or both.
A client who is a publisher sends messages, while a client whom is a subscriber receives and consumes messages.
It is perfectly possible, and often used, that a client is both a publisher and a subscriber at the same time.&lt;/p&gt;

&lt;p&gt;Topics &amp;amp; wildcards:
A string that acts as a subject for publishing to or subscribing to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Quality of Service (QoS)&lt;/a&gt;:
Is a setting to ensure a certain level of guaranteed delivery.
In MQTT there are 3 QoS options:&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos0.svg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;QoS level 0&quot;&gt;
        &lt;img alt=&quot;QoS level 0&quot; src=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos0.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;0: At most once&lt;br /&gt;
This service level only guarantees a best effort delivery of messages.
Delivery of messages is not guaranteed so data might be lost in transit.
No acknowledgements are sent and no data is retransmitted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos1.svg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;QoS level 1&quot;&gt;
        &lt;img alt=&quot;QoS level 1&quot; src=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos1.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;1: At least once&lt;br /&gt;
This service level guarantees that messages are delivered at least once.
The sender stores the message until it receives an acknowledgement from the broker.
If the acknowledgement is not received in a timely manner the message is retransmitted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos2.svg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;QoS level 2&quot;&gt;
        &lt;img alt=&quot;QoS level 2&quot; src=&quot;/img/2021-05-26-intro-to-mqtt/qos-levels_qos2.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;2: Exactly once&lt;br /&gt;
This service level guarantees that messages are delivered exactly once.
To enable this, a &lt;a href=&quot;https://bytesofgigabytes.com/mqtt/mqtt-protocol-handshake/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;four-way handshake&lt;/a&gt; is used between the client and the broker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-8-retained-messages/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Retained messages&lt;/a&gt;:
These are messages with the retained flag set to true.
The broker will store these messages with their QoS and send it to any client that connects.
This enables newly connected clients get an update quicker since they do not need to wait for a new message to be published.
Retained messages can also be deleted easily: the client just needs to send an empty (0 byte payload) retained message.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-9-last-will-and-testament/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Last Will and Testament (LWT)&lt;/a&gt;:
Is a feature to notify clients about a client that has disconnected in an ungraceful manner.
The message is sent to the broker when a client connects so it can be sent to other clients later on if required.
If the client disconnects gracefully the broker discards the LWT message.&lt;/p&gt;

&lt;h2 id=&quot;broker-options&quot;&gt;Broker options&lt;/h2&gt;

&lt;p&gt;As MQTT requires a broker instance to function, choosing the right one is crucial.
There many different options available, both can run locally or hosted in the cloud.&lt;/p&gt;

&lt;p&gt;There are also different versions of the MQTT protocol and not every broker supports all the different versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3.1: The older IBM based version, less used these days&lt;/li&gt;
  &lt;li&gt;3.1.1: OASIS standard compliant, the most used version nowadays&lt;/li&gt;
  &lt;li&gt;5: The newest version (2019), not yet widely used&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;eclipse-mosquitto&quot;&gt;Eclipse Mosquitto&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://mosquitto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eclipse Mosquitto&lt;/a&gt; is an open source implementation of an MQTT message broker.
It supports all three major versions of the protocol.
The broker supports all three major versions and can run on low-powered devices like the Raspberry Pi.
I use this one at home for my home automation projects.&lt;/p&gt;

&lt;p&gt;It is very easy to install on a Debian based distro:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add mosquitto-repo.gpg.key
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/apt/sources.list.d/

&lt;span class=&quot;c&quot;&gt;# Pick the correct URL for your flavour of Debian (we pick buster as the default):&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sudo wget http://repo.mosquitto.org/debian/mosquitto-wheezy.list&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sudo wget http://repo.mosquitto.org/debian/mosquitto-jessie.list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wget http://repo.mosquitto.org/debian/mosquitto-buster.list

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mosquitto

&lt;span class=&quot;c&quot;&gt;# We will add username/password auth for connections to the auth (anonymous is allowed by default, we don't want this, skip this section if you do)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# username: myuser, password: enter into the mosquitto_passwd tool (enter any valid password)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mosquitto_passwd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/mosquitto/credentials myuser
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/mosquitto/mosquitto.conf
&lt;span class=&quot;c&quot;&gt;# At the end of the file add:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# allow_anonymous false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# password_file /etc/mosquitto/credentials&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service mosquitto restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aedes&quot;&gt;Aedes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/moscajs/aedes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aedes&lt;/a&gt; is the follow-up/split from &lt;a href=&quot;https://github.com/moscajs/mosca&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mosca&lt;/a&gt; and is fully open source.
It is a node based MQTT broker that is scalable and lightweight.
The broker only has support for the 3.1 and 3.1.1 protocol versions, 5.0 is not supported yet.&lt;/p&gt;

&lt;p&gt;Installing is very simple, just make sure you have node installed and simply install it by using npm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install aedes&lt;/code&gt;.
You are responsible for creating the server instance from code.
A very basic implementation of the broker is:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aedes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aedes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aedes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Server started and listening on port &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hivemq&quot;&gt;HiveMQ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hivemq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HiveMQ&lt;/a&gt; is an MQTT-based platform that includes a broker.
It has the option to be hosted in the cloud (with a free trial tier) or to be run locally.
The broker has support for all three major versions of the protocol.&lt;/p&gt;

&lt;p&gt;It does require you to create an account before you can use the cloud tier or even download the zip package for local installation.&lt;/p&gt;

&lt;h3 id=&quot;emqttd&quot;&gt;Emqttd&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://emqtt.io/docs/v1/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emqttd&lt;/a&gt; is another fully open source broker.
The project is written in Erlang and is fully compatible with the 3.1 and 3.1.1 versions of the protocol.&lt;/p&gt;

&lt;h3 id=&quot;vernemq&quot;&gt;VerneMQ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://vernemq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VerneMQ&lt;/a&gt; is another well-known broker that is also fully open source and written in Erlang.
It has the ability to scale very well, both vertically and horizontally.
The broker has support for all three major versions of the protocol.&lt;/p&gt;

&lt;p&gt;In addition to the free-to-use broker, they also have paid tiers of support.&lt;/p&gt;

&lt;h2 id=&quot;basic-examples&quot;&gt;Basic examples&lt;/h2&gt;

&lt;p&gt;Basic C example (for use on an ESP-01):&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;EspMQTTClient.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EspMQTTClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EspMQTTClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SSID_PASS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BROKER_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MQTT_USERNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MQTT_PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CLIENT_NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//client-&amp;gt;enableDebuggingMessages(true);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableLastWillMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LAST_WILL_TOPIC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LAST_WILL_MESSAGE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onConnectionEstablished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MQTT: Connected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TOPIC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;connected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TOPIC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DATA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example uses the &lt;a href=&quot;https://github.com/plapointe6/EspMQTTClient&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;EspMQTTClient&lt;/a&gt; library to enable low powered IoT devices with WiFi connectivity to connect to an SSID and broker.
The library handles both the WiFi and broker connections.&lt;/p&gt;

&lt;p&gt;Basic node example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ISubscriptionGrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mqtt/types/lib/client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mqtt-packet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectMqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connectMqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mqtt://broker-url:1883&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Connected to MQTT broker!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;granted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ISubscriptionGrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;granted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;granted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;granted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The node code is a bit more complex but allows you to create more complex applications.
It uses the &lt;a href=&quot;https://www.npmjs.com/package/mqtt&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTT.js&lt;/a&gt; library which has very good and extensive documentation.
This is not meant to run on the IoT device but on a separate device that reacts to messages from the IoT devices.
Please note that this will not manage the WiFi/ethernet connection of the device that it is running on, which is left to the OS/User.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;MQTT is an ideal protocol to use for lightweight communication on ip enabled devices.
The pub/sub architecture allows for a decoupled environment of clients that can operate independently of each other.&lt;/p&gt;

&lt;p&gt;Thanks to the protocol and its implementations being very lightweight, it is very handy to use in combination with IoT and home automation projects.
Getting started with some simple setup is relatively easy and does not require difficult programming to wire things up.&lt;/p&gt;

&lt;p&gt;In a future blog post, I will go a bit more in depth and show off a project which makes use of MQTT to wire devices together.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mqtt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTTT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mqtt.org/mqtt-specification/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTT specifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.steves-internet-guide.com/mqtt/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Beginners guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/mqtt-essentials/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTT essentials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-3-client-broker-connection-establishment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Broker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-3-client-broker-connection-establishment/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Quality of Service (QoS)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bytesofgigabytes.com/mqtt/mqtt-protocol-handshake/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;four-way handshake&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-8-retained-messages/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Retained messages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/blog/mqtt-essentials-part-9-last-will-and-testament/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Last Will and Testament (LWT)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mosquitto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eclipse Mosquitto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/moscajs/aedes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aedes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/moscajs/mosca&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mosca&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HiveMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://emqtt.io/docs/v1/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Emqttd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vernemq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VerneMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plapointe6/EspMQTTClient&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;EspMQTTClient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/mqtt&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MQTT.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a senior consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="Home" /><category term="Smart Home" /><category term="Automation" /><category term="Home Automation" /><category term="Home Assistant" /><category term="mqtt" /><category term="publish" /><category term="subscribe" /><category term="message broker" /><category term="transport protocol" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-05-26-intro-to-mqtt/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-05-26-intro-to-mqtt/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SSE with HTTP2</title><link href="https://ordina-jworks.github.io/event-driven/2021/04/23/SSE-with-HTTP2.html" rel="alternate" type="text/html" title="SSE with HTTP2" /><published>2021-04-23T00:00:00+00:00</published><updated>2021-04-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/event-driven/2021/04/23/SSE-with-HTTP2</id><content type="html" xml:base="https://ordina-jworks.github.io/event-driven/2021/04/23/SSE-with-HTTP2.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-server-sent-events&quot;&gt;What are Server-Sent Events?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-sse-over-websockets&quot;&gt;Why SSE over Websockets?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http11-vs-http2&quot;&gt;HTTP/1.1 vs HTTP/2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo-application&quot;&gt;Demo application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-server-sent-events&quot;&gt;What are Server-Sent Events?&lt;/h1&gt;
&lt;p&gt;Server-Sent Events is a technology where the client receives data (events) pushed by a server over HTTP.
This data can be a random update (for example a tweet) or a constant stream of data (stock market price updates).
The main thing to note is that the client does not need to poll for this data. There is no communication required from client to server.
This technology may have been overshadowed by WebSockets because of SSE limitations in the past, 
but as you will see and learn in this blogpost, you have nothing to worry about anymore!&lt;/p&gt;

&lt;h1 id=&quot;why-sse-over-websockets&quot;&gt;Why SSE over WebSockets?&lt;/h1&gt;
&lt;p&gt;While it is true that WebSockets have more capabilities than SSE, when these capabilities are not part of your use case, SSE in my opinion is a much better choice. 
With Websockets, you have the ability to communicate from your client to the server.
But you are going to have to take care of this connection yourself.
One of the implications is that the connection needs to be  &lt;strong&gt;stateful&lt;/strong&gt;, which is a pretty important thing to take into consideration when you are trying to build cloud-native applications.
WebSockets are also more supported by older browsers than SSE but this is easily solved by using the &lt;strong&gt;JavaScript EventSource interface&lt;/strong&gt; to create your own connection to the server and receive the data that way.
I will demonstrate how easy it is to use this interface and solve this issue while building the demo application at the end of the blog post.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-04-23-SSE-HTTP2/SSE-vs-WS.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:70%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;but-then-why-use-sse&quot;&gt;But then why use SSE?&lt;/h1&gt;
&lt;p&gt;One of the key differences between SSE and WS is that SSE uses simple HTTP to send data to the clients.
This means it does not require a special protocol like STOMP or MQTT which in turn requires server implementation to get it working making SSE a lot easier to set up.
SSE also has built-in support for reestablishing connections and event IDs which WS lacks by design.&lt;/p&gt;

&lt;p&gt;So the main questions you have to ask yourself is whether your use-case fits into the whole SSE story?
Is it OK to have no communication back to the server?
Is the application you are trying to build supposed to be used in a cloud-native environment and if so will a stateful connection between client and server be a problem?
These questions will hopefully help make your choice between Server-sent Events and WebSockets easier.&lt;/p&gt;

&lt;h1 id=&quot;http11-vs-http2&quot;&gt;HTTP/1.1 vs HTTP/2&lt;/h1&gt;
&lt;p&gt;HTTP/1.1 is an old protocol, it loads requests one-by-one over a single TCP connection or in parallel over multiple TCP connections in an effort to decrease loading times while requiring more resources.
This was fine when this protocol was new, about 23 years ago, but as time goes by and webpages become more advanced, the limitations of this protocol are really starting to show.
This is why HTTP/2 was made, it aims to tackle the limitations set by HTTP/1.1 and be more future-proof.&lt;/p&gt;

&lt;p&gt;With HTTP/2, multiple requests can be sent over the same TCP connection with responses arriving out of order.
HTTP/2 is a binary protocol, removing security issues and error-proneness that come with text-based protocols.
It is backward compatible with earlier versions of the protocol and is compatible with almost all browsers.
HTTP/2 also avoids the round trip to the server by having the server intuitively sending resources that will be required to render the page.
All these advantages eliminate the need for developers to write best practice workarounds to deal with the limitations of older versions of the protocol,
they decrease loading times and improve the website infrastructure.
This on top of full backward compatibility makes the choice between HTTP/1.1 and HTTP/2 for Server-sent events a no-brainer.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-04-23-SSE-HTTP2/HTTP1-vs-HTTP2.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:70%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;The key takeaways in choosing WS or SSE are entirely dependent on the use-case of the application you are trying to develop.
If you are looking for a stateless approach, or you don’t have a need for client-to-server communication, SSE might be the solution for you!
The other takeaway is that you should definitely use HTTP/2 to get the most out of your application and not run into the limitations that HTTP/1.1 lays upon SSE.&lt;/p&gt;

&lt;p&gt;If after reading this blogpost you have come to the conclusion that you would be better off building a Websocket application to fit your use-case you can read through a blog post on WebSockets made by my colleague Kevin Van Houtte &lt;a href=&quot;https://ordina-jworks.github.io/event-driven/2020/06/30/user-feedback-websockets.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;demo-application&quot;&gt;Demo application&lt;/h1&gt;
&lt;p&gt;In this part of the blogpost I am going to show you how easy it is to develop your own SSE application.&lt;/p&gt;

&lt;h3 id=&quot;the-use-case&quot;&gt;The use-case&lt;/h3&gt;
&lt;p&gt;We are going to build a Spring Boot application that consumes a Chuck Norris joke REST API and uses Flux to push joke data from the server using Server-Sent events to any clients that are subscribed.&lt;/p&gt;

&lt;h1 id=&quot;the-sse-server&quot;&gt;The SSE server&lt;/h1&gt;

&lt;h3 id=&quot;pomxml&quot;&gt;pom.xml&lt;/h3&gt;
&lt;p&gt;To start off we are going to make a Spring Boot application and add the following Maven dependencies:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-webflux&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;chucknorrisjokejava&quot;&gt;ChuckNorrisJoke.java&lt;/h3&gt;
&lt;p&gt;Now we are going to add our data model, as explained in the use-case this will be a simple Chuck Norris joke object containing a String value.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jokeservicejava&quot;&gt;JokeService.java&lt;/h3&gt;
&lt;p&gt;The next step is to get the joke data by consuming a public &lt;a href=&quot;https://api.chucknorris.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chuck Norris joke API&lt;/a&gt;.
First we create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JokeService&lt;/code&gt; interface and implementation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JokeService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JokeServiceImpl&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JokeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chuckNorrisJokeUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.chucknorris.io/jokes/random&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;JokeServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpHeaders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chuckNorrisJokeUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serverconfigjava&quot;&gt;ServerConfig.java&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpHeaders&lt;/code&gt; beans are defined in the ServerConfig class as follows:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.web.client.RestTemplateBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.CacheControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RestTemplateBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnectTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReadTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACCEPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CACHE_CONTROL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;noCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cachePrivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mustRevalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaderValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jokecontroller&quot;&gt;JokeController&lt;/h3&gt;
&lt;p&gt;Now for the final part of the Java code, all we have to do is create an endpoint for clients to subscribe to and push the joke data to this endpoint.
For this we are going to create a JokeController and use a Flux which is a Reactive Stream publisher to periodically emit Server-Sent events containing ChuckNorrisJokes to this endpoint.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.codec.ServerSentEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sse-server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JokeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JokeService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jokeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;JokeController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JokeService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jokeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jokeService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jokeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/chuck-norris-joke-stream&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerSentEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;streamJokes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerSentEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jokeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomChuckNorrisJoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run our application and go to &lt;a href=&quot;http://localhost:8080/sse-server/chuck-norris-joke-stream&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://localhost:8080/sse-server/chuck-norris-joke-stream&lt;/a&gt; you can see data coming in every 5 seconds.&lt;/p&gt;

&lt;h1 id=&quot;the-web-client&quot;&gt;The web client&lt;/h1&gt;
&lt;p&gt;Now all that’s left to do is use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JavaScript EventSource interface&lt;/a&gt; to open a connection to our SSE server and transform the events into text to display in our basic HTML demo page.&lt;/p&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Server-sent events app&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/app.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jokes&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table table-striped&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Chuck Norris Jokes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;appjs&quot;&gt;app.js&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sse-server/chuck-norris-joke-stream&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;joke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;showJoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showJoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jokes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;joke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;I will leave the styling up to you but you should now have a working SSE server and client that receives data in the form of Server-Sent events.
All that is left to do for you is to enable HTTP2 by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.http2.enabled=true&lt;/code&gt; to your application.properties file and to enable HTTPS the way you would do it in any Spring Boot application.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-04-23-SSE-HTTP2/jokes.gif&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;one-final-note&quot;&gt;One final note&lt;/h1&gt;
&lt;p&gt;You can find the code for this application using HTTP/1.1 and HTTP/2 as well as an example to achieve the same thing using Websockets on my &lt;a href=&quot;https://github.com/jagostaes/sse-servers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github&lt;/a&gt;.
If you have any questions regarding this topic you can reach out to me on my &lt;a href=&quot;https://twitter.com/jagostaes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Twitter&lt;/a&gt; and I will try my best to help you out.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jago&quot;, &quot;last_name&quot;=&gt;&quot;Staes&quot;, &quot;linkedin&quot;=&gt;&quot;jago-staes-547177117&quot;, &quot;github&quot;=&gt;&quot;jagostaes&quot;, &quot;permalink&quot;=&gt;&quot;/author/jago_staes/&quot;, &quot;avatar&quot;=&gt;&quot;jago-staes.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;jago.staes@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jago Staes is a Java Consultant with a strong interest for Spring Boot projects, enjoys learning about new technologies and wants to learn more about frontend technologies and microservices.&quot;}</name><email>jago.staes@ordina.be</email></author><category term="Event-Driven" /><category term="spring" /><category term="event-driven" /><category term="server-sent-events" /><category term="cloud-native" /><category term="http" /><summary type="html">Table Of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-04-23-SSE-HTTP2/SSE-HTTP2.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-04-23-SSE-HTTP2/SSE-HTTP2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to delegate effectively as a technical team lead</title><link href="https://ordina-jworks.github.io/leadership/2021/04/14/Delegation.html" rel="alternate" type="text/html" title="How to delegate effectively as a technical team lead" /><published>2021-04-14T00:00:00+00:00</published><updated>2021-04-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/leadership/2021/04/14/Delegation</id><content type="html" xml:base="https://ordina-jworks.github.io/leadership/2021/04/14/Delegation.html">&lt;h2 id=&quot;dont-be-the-bottleneck&quot;&gt;Don’t be the bottleneck.&lt;/h2&gt;

&lt;p&gt;Although it has been quite some time, I still remember my first project as technical team lead like it was yesterday.
Before taking on that responsibility, I had worked hard as a developer and had naturally stepped into some minor leadership roles along the way.
I was very honoured to be trusted with the technical team lead role, and soon the team was coming to me for direction while my manager was looking at me for updates on how the team was performing.
Quite quickly I found out that management expected me to keep running my team efficiently, but in the meantime I was also trying to be as productive as I used to be when I was a developer by delivering all my user stories on time.
Needless to say that my tasks started to pile up, my to-do list was bursting at the seams and my frustrations grew by the day.&lt;/p&gt;

&lt;p&gt;Common pitfalls new tech leads often experience is that they feel like they must review every change to the codebase, they must have the final say on all technical decisions, or they must be involved in every discussion.
By doing this, they unintentionally become a bottleneck and slow the team down.
At worst, they even make the team members feel micromanaged and disempowered.
I realised that in order to keep my team productive and thus becoming an effective tech lead, delegation was one of the major keys to success.
At first, I struggled with learning this new skill.
After all, I was not producing anything concrete anymore.
There was no rewarding merge request afterwards, nor a notification of a successful build.
The new skill I yet had to learn did not have the same tangible output as writing code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Sometimes you just have to be willing to delegate and not feel like you’re the only one with the answer.” - Ronald D. Moore&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nothing-is-black-or-white&quot;&gt;Nothing is black or white.&lt;/h2&gt;

&lt;p&gt;“Delegating” means that you give someone else the authority to do part of your job.
Consequently, it’s not a part of their job, but you are giving them the authority to do tasks that you normally take up yourself.
It’s about letting people make decisions for themselves without micromanaging them.
The misconception a lot of people often have is that delegation is binary: it’s all or nothing.
They worry that others will screw up the things they care about a lot, and therefore rather not take the risk of delegating the task at all.
However, there actually are different shades of grey when it comes to delegation.&lt;/p&gt;

&lt;p&gt;The diagram below shows the relationship between the level of freedom that a team lead chooses to give his team and the level of authority used by the team lead.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-04-14-Delegation/ts.png&quot; alt=&quot;Tannenbaum &amp;amp; Schmidt&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the Tannenbaum &amp;amp; Schmidt Leadership Continuum, a leadership model that was designed by Robert Tannenbaum and Warren H. Schmidt and first published in the Harvard Business Review in 1958.
Their leadership model only gained popularity since then and today still is a frequently used tool to identify and select the most appropriate leadership style for any situation.
It stipulates that as you move up the slope from left to right on the diagram above, the leader gives up his authority to make solo decisions and he increases team involvement.
The team’s freedom increases when the team lead’s authority decreases and he delegates more of his tasks to the team.&lt;/p&gt;

&lt;p&gt;This means that as you shift from a work-centered leadership style to a people-centered leadership style, your area of control as a team lead relinquishes.
This might make you feel anxious and nervous at first, but luckily there are seven different levels of delegation.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Tell&lt;/strong&gt;: This type of leader does not believe his team should have any say in the decision-making process. The leader himself identifies the problem, picks the solution he considers best, communicates his decision to the team and expects that the team acts accordingly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sell&lt;/strong&gt;: This leadership approach follows the same decision-making process as the “Tell” approach. The main difference however, is that the leader provides the team with the rationale of his decision. He does remain reluctant to give up any control or to allow any additional input into the decision-making process.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Suggest&lt;/strong&gt;: The leader takes it one step further than the “Sell” approach by inviting the team to ask questions in order to get a deeper understanding of why a particular decision has been made for them. This helps build trust and is the first step towards a two-way communication process between team lead and team members.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consult&lt;/strong&gt;: The leader proposes a decision, invites the team to give their input and opens a discussion to ensure that his decision is the right one. The team is able to influence the outcome, but the team lead still remains in control of identifying the problem, possible solutions and making the preferred final decision. This leadership style can build cohesiveness and improves the team’s motivation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Join&lt;/strong&gt;: In all previous approaches, the leader was the person responsible for identifying the problem, possible solutions and making the final decision. In the “Join” approach however, the leader presents problems instead of a solution to the team. While ultimately the leader still makes the final decision, this approach enables a collaborative decision-making process. This style is often used when the team has specific expertise that the leader needs in order to make the best decision.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Delegate&lt;/strong&gt;: The role of the leader is to present the problem to the team together with any constraints. The team can then operate within these guidelines to find solutions and make the final decision. The leader needs to trust the team and provide them with the support and resources necessary to make a solid decision.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Abdicate&lt;/strong&gt;: The team is seen as a group of experts that identify problems, potential solutions and make the final decision. They are free to do whatever is necessary to solve a problem while still working under reasonable constraints. However, the leader is still accountable for the final decision and therefore must make sure the team is ready for this level of responsibility.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on these different levels, we can conclude that in any decision-making process, there are three key steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Identifying Problems&lt;/li&gt;
  &lt;li&gt;Identifying Solutions&lt;/li&gt;
  &lt;li&gt;Making a Decision&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following diagram shows that as you move through the Continuum, the control over these three steps transfers from the leader to the team.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-04-14-Delegation/ts-summary.png&quot; alt=&quot;Tannenbaum &amp;amp; Schmidt&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;context-is-everything&quot;&gt;Context is everything.&lt;/h2&gt;

&lt;p&gt;Depending on your personality as a team lead, you will probably feel that some delegation approaches listed above are more in your comfort zone than others.
However, sometimes it’s not entirely up to you as the type of delegation to follow might depend on the situation at hand:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The capability of the team in terms of skills, experience, workload, …&lt;/li&gt;
  &lt;li&gt;The nature of the project or task in terms of various aspects like complexity, difficulty, risk, time or budget constraints, relevance, …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So while the Tannenbaum &amp;amp; Schmidt Leadership Continuum does not present a clear guide for what is best, it does provide a framework for leaders. Ultimately, the unique combination of the leader’s own personality, the capabilities of the team and the nature of the project or task will determine which type of delegation is preferred.&lt;/p&gt;

&lt;p&gt;Although the appropriate level of delegation depends on the context, the advantages of effective delegation for both team lead as well as the team are clear: the team lead gets more time to focus on critical issues, and the team develops new skills and grows into future technical team leaders.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If you want to do a few small things right, do them yourself. If you want to do great things and make a big impact, learn to delegate.” – John C. Maxwell&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martin&quot;, &quot;last_name&quot;=&gt;&quot;Kwee&quot;, &quot;permalink&quot;=&gt;&quot;/author/martin-kwee/&quot;, &quot;avatar&quot;=&gt;&quot;martin-kwee.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader eHealth&quot;, &quot;email&quot;=&gt;&quot;martin.kwee@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;martinkwee&quot;, &quot;bio&quot;=&gt;&quot;Martin is a Java consultant at Ordina Belgium. He enjoys a good technical challenge and has a strong interest in architecture and eHealth.&quot;}</name><email>martin.kwee@ordina.be</email></author><category term="Leadership" /><category term="leadership" /><category term="technical leadership" /><category term="delegation" /><summary type="html">Don’t be the bottleneck.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-04-14-Delegation/delegate.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-04-14-Delegation/delegate.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Getting started with the Pi Pico</title><link href="https://ordina-jworks.github.io/iot/2021/03/25/Getting-started-with-the-pi-pico.html" rel="alternate" type="text/html" title="Getting started with the Pi Pico" /><published>2021-03-25T00:00:00+00:00</published><updated>2021-03-25T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2021/03/25/Getting-started-with-the-pi-pico</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2021/03/25/Getting-started-with-the-pi-pico.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#differences-with-the-raspberry-pi&quot;&gt;Differences with the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-to-know-the-board&quot;&gt;Getting to know the board&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#development-options&quot;&gt;Development options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#c-development&quot;&gt;C++ development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#micropython-development&quot;&gt;MicroPython development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#micropython-development&quot;&gt;CircuitPython development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-pico.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Raspberry Pi Pico&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-pico.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 60%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;By now everybody likely has heard about the Raspberry Pi single board computers.
And even more than probable some, if not most of you, have one or more of these.&lt;/p&gt;

&lt;p&gt;Recently the Raspberry Pi Foundation has released a new type of Raspberry Pi, the Raspberry Pi Pico.
Contrary to the regular Raspberry Pi, the Pico is not a single board computer which runs Linux.
The Pico is a microcontroller, like the Arduino or Teensy.
It’s cheap, it’s powerful, and in this blog post we’ll be exploring what it has to offer.&lt;/p&gt;

&lt;h2 id=&quot;differences-with-the-raspberry-pi&quot;&gt;Differences with the Raspberry Pi&lt;/h2&gt;

&lt;p&gt;Like I said in the introduction, the regular Raspberry Pi is a single board computer, as in an actual computer which can run a fully fledged operating system.
It also has interfacing options like a display and camera port, along side ethernet and USB ports as well as the 40 GPIO pins.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-vs-pico.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Raspberry Pi Model 4 vs Raspberry Pi Pico&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-vs-pico.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;As you can see in the pictures, the Raspberry Pi looks like a tiny computer and the Pico looks like a much simpler board, because it also is.
Both devices serve different purposes but do have some overlap.
The Raspberry Pi is used for more computationally intensive tasks and can be used to run very complex software.
The Pi Pico is used for far simpler tasks where power usage and device footprint are more important, it is a much more low-level device.
While they both have GPIO pins, the ones on the Pi Pico are much more capable than those on the Raspberry Pi.&lt;/p&gt;

&lt;h2 id=&quot;getting-to-know-the-board&quot;&gt;Getting to know the board&lt;/h2&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-pico-pinout.svg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;GPIO layout&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pi-pico-pinout.svg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The main technical specifications of the Pi Pico are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RP2040: Dual-core Arm Cortex-M0+ processor, flexible clock running up to 133 MHz&lt;/li&gt;
  &lt;li&gt;264KB on-chip SRAM&lt;/li&gt;
  &lt;li&gt;2MB on-board QSPI Flash&lt;/li&gt;
  &lt;li&gt;26 multi-function GPIO pins, including 3 analogue inputs&lt;/li&gt;
  &lt;li&gt;2 × UART, 2 × SPI controllers, 2 × I2C controllers, 16 × PWM channels&lt;/li&gt;
  &lt;li&gt;1 × USB 1.1 controller and PHY, with host and device support&lt;/li&gt;
  &lt;li&gt;8 × Programmable I/O (PIO) state machines for custom peripheral support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These specs are in line with some of the more popular microcontrollers like teensy and ESP32 devices.
The small footprint of microcontrollers like the Pico allows it to be integrated into DIY projects easily.&lt;/p&gt;

&lt;p&gt;The Pi Pico is built around the RP2040, the actual microcontroller that powers it.
There are other boards with varying pinouts and functions available with this microcontroller.
In this blog post we will be focussing on the Pi Pico implementation of the RP2040.&lt;/p&gt;

&lt;p&gt;The dual core chip give a lot of flexibility to create project which require a bit more processing power, as do the PIO state machines.
With 26 GPIO boards there are loads of options to connect sensors, screens, inputs and outputs.&lt;/p&gt;

&lt;h2 id=&quot;development-options&quot;&gt;Development options&lt;/h2&gt;

&lt;p&gt;One of the nice features is that the Pico supports drag and drop programming/flashing.
This is accomplished by utilizing UF2 files.
The process of doing this is very simple, simply press the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOTSEL&lt;/code&gt; button when connecting the Pico to your computer.
It will show up as a storage device, drag the UF2 file onto it and the device will reboot and the flashing is completed.&lt;/p&gt;

&lt;p&gt;The Pico has several development options available.
Three different main options are available to program it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C/C++ SDK: Oldschool hardcore mode microcontroller programming&lt;/li&gt;
  &lt;li&gt;MicroPython: More beginner friendly with lots of options&lt;/li&gt;
  &lt;li&gt;CircuitPython: Adafruit backed variation on MicroPython, made even simpler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-development&quot;&gt;C++ Development&lt;/h2&gt;

&lt;h3 id=&quot;development-setup&quot;&gt;Development setup&lt;/h3&gt;

&lt;p&gt;Setting up for development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://datasheets.raspberrypi.org/pico/raspberry-pi-pico-c-sdk.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;General C/C++ SDK documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/raspberrypi/pico-setup/master/pico_setup.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linux&lt;/a&gt;: Simply run the script&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smittytone.wordpress.com/2021/02/02/program-raspberry-pi-pico-c-mac/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mac&lt;/a&gt;: Follow the instructions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ndabas/pico-setup-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Windows&lt;/a&gt;: Follow the instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One bright point is that Arduino will also be releasing a board based on the RP2040 so there is hope that the Arduino IDE will support it later down the line and enable hassle free C++ development for the Pi Pico and other RP2040 based microcontrollers.&lt;/p&gt;

&lt;h3 id=&quot;code-example&quot;&gt;Code example&lt;/h3&gt;

&lt;p&gt;Programming microcontrollers has long been done in C and C++ and the Pi Pico forms no exception to this.
The basic code for a LED blink example is listed below.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;pico/stdlib.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef PICO_DEFAULT_LED_PIN
#warning blink example requires a board with a regular LED
#else
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_PIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PICO_DEFAULT_LED_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gpio_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gpio_set_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gpio_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gpio_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code will include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdlib.h&lt;/code&gt; header file from the Pi Pico C++ SDK and will blink the built-in LED every 500ms.
The trick is to compile this code and build the required UF2 file.&lt;/p&gt;

&lt;p&gt;While the code looks and feels very similar to what you would write for lets say an Arduino board, compiling it and to run on the Pico is a different case.
The contrast with Arduino development could not be bigger, where you simply download the Arduino IDE, write your code, click upload and you’re running your code on the device!
With the Pico it’s not that simple.
It requires a few dependencies which cannot be one-click installed and the instructions are different based on the OS you’re running.
It’s do-able but it’s not exactly hassle free and convenient.&lt;/p&gt;

&lt;h2 id=&quot;micropython-development&quot;&gt;MicroPython development&lt;/h2&gt;

&lt;p&gt;Contrary to the C++ development, using MicroPython is like a breath of fresh air.
I’m not the biggest fan of regular Python but using MicroPython for simple microcontroller programming, has in my opinion, made it a lot easier.
Another big plus of Python based development is having a REPL available.
It allows you to write and execute code on the fly, which allows for easier development and testing something quickly.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-board&quot;&gt;Preparing the board&lt;/h3&gt;

&lt;p&gt;First of all we need to prepare the Pico to accept and run MicroPython files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the latest (stable) version of MicroPython for the pico, this is a UF2 file and can be found &lt;a href=&quot;https://www.raspberrypi.org/documentation/rp2040/getting-started/#getting-started-with-micropython&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plug in your Pico while holding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOTSEL&lt;/code&gt; button&lt;/li&gt;
  &lt;li&gt;Drag the downloaded UF2 file onto the mass storage device that has just appeared in your file explorer&lt;/li&gt;
  &lt;li&gt;The board will reboot by itself and ‘install’ the UF2 file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;development-setup-1&quot;&gt;Development setup&lt;/h3&gt;

&lt;p&gt;The easiest way to do MicroPython development for the Pi Pico is by using the Thonny IDE.
Thonny is a simple code editor that can directly save your code to the Pico and also provides an easy way to access the REPL.&lt;/p&gt;

&lt;p&gt;Setting up Thonny is very easy.
Just &lt;a href=&quot;https://thonny.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download&lt;/a&gt; the binary for your operating system, install and start it.
Only one more step is required to set it up for use with the Pi Pico.
Head into the preferences, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interpreter&lt;/code&gt; tab and from the dropdown select the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroPython (Raspberry Pi Pico)&lt;/code&gt;.
Select the correct port from the dropdown.
After this Thonny is ready to be used!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/thonny-interpreter.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Thonny select interpreter&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/thonny-interpreter.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 40%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/thonny-ports.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Thonny select port&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/thonny-ports.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 50%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Another option for development is using the great PyCharm IDE.
While I view Thonny to be a glorified text editor, PyCharm (from JetBrains) is a fully fledged Python IDE, for our purposes the community edition will do just fine.
The setup is a bit more involved and has some caveats, but it is certainly workable.
&lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Download&lt;/a&gt; and install the PyCharm Community Edition.
Once done, open it up and in the welcome screen select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugins&lt;/code&gt; option.
In here, search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;micropython&lt;/code&gt; and install the MicroPython plugin by JetBrains, this will add support for flashing the device from within the IDE.
Now we can create a new project and write some code.
To upload the code to the Pico, we need to perform some more changes and enable the MicroPython support for the newly created project.
Head into the IDE preferences, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Languages &amp;amp; Frameworks&lt;/code&gt; option in the sidebar and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MicroPython&lt;/code&gt; sub option.
In this section, check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable MicroPython support&lt;/code&gt; and set the device type to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP8266&lt;/code&gt;.
Finally, we need to enter the device path.
You could try the auto-detect option, but on my machine that did nothing.
To get this path, we will open Thonny with the Pico plugged in.
It will show the device path under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preferences/Interpreter&lt;/code&gt; and we can copy it to PyCharm.&lt;/p&gt;

&lt;p&gt;With this done, we can now copy over code to the Pico.
Make sure your main code file is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;, as this will be executed automatically by the Pico.
To do this, simply right-click on the file (or entire folder) and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run Flash FILENAME&lt;/code&gt;.
Make sure you do not have the REPL open in the PyCharm terminal window, in contrary to Thonny, PyCharm will fail the copy action!
If you have copied too many files or simply want to wipe the device, from the menu, select: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools/MicroPython/Remove All Files from MicroPython Device&lt;/code&gt;.
To open the REPL and directly interact with the Pico select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools/MicroPython/MicroPython REPL&lt;/code&gt;, this will open up a REPL in a terminal window.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-micropython-plugin.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Install the MicroPython plugin&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-micropython-plugin.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 12%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-micropython-setup.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;MicroPython project settings&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-micropython-setup.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 12.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-flash-to-device.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Flash main file to device&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-flash-to-device.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 14%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-run-flash.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Flash other files to device&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-run-flash.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 15%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-run-flash-progress.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Flashing progress&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-run-flash-progress.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 23%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-tools.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;REPL and device wipe&quot;&gt;
        &lt;img alt=&quot;Pi Pico Blueprint&quot; src=&quot;/img/2021-03-25-getting-started-with-the-pi-pico/pycharm-tools.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 18%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;code-example-1&quot;&gt;Code example&lt;/h3&gt;

&lt;p&gt;The basic code for a LED blink example is listed below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code does the same as the C++ code mentioned above.
It however is far more readable.
The &lt;a href=&quot;https://docs.micropython.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MicroPython documentation&lt;/a&gt; has examples and information on what is available and what is not.
Please be reminded that MicroPython support for the Pi Pico is still very new and some APIs may contain bugs, not work at all or even not be available yet.&lt;/p&gt;

&lt;h2 id=&quot;circuitpython-development&quot;&gt;CircuitPython development&lt;/h2&gt;

&lt;p&gt;CircuitPython is a variation on MicroPython created by Adafruit industries.
It is targeted at beginners and students, and is even simpler than the regular MicroPython.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-board-1&quot;&gt;Preparing the board&lt;/h3&gt;

&lt;p&gt;First of all we need to prepare the Pico to accept and run CircuitPython files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the latest (stable) version of CircuitPython for the pico, this is a UF2 file and can be found &lt;a href=&quot;https://circuitpython.org/board/raspberry_pi_pico/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plug in your Pico while holding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOTSEL&lt;/code&gt; button&lt;/li&gt;
  &lt;li&gt;Drag the downloaded UF2 file onto the mass storage device that has just appeared in your file explorer&lt;/li&gt;
  &lt;li&gt;The board will reboot by itself and ‘install’ the UF2 file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;development-setup-2&quot;&gt;Development setup&lt;/h3&gt;

&lt;p&gt;CircuitPython can also be developed using Thonny, you however need to open the Thonny &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preferences&lt;/code&gt; once more, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interpreter&lt;/code&gt; tab and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircuitPython (generic)&lt;/code&gt; option.
Using PyCharm for CircuitPython can be done.
However, I’ve not had much success to flash the files to the Pico device.
So for CircuitPython the best option remains Thonny.
Adafruit recommends using the &lt;a href=&quot;https://learn.adafruit.com/welcome-to-circuitpython/installing-mu-editor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mu&lt;/a&gt; IDE for CircuitPython development.
However, I could never get it to work on my Big Sur installation.&lt;/p&gt;

&lt;p&gt;Developing CircuitPython does not really differ from MicroPython except for two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Language features and API&lt;/li&gt;
  &lt;li&gt;Project structure
    &lt;ul&gt;
      &lt;li&gt;No &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; but a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boot.py&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code.py&lt;/code&gt; file to do bootstrapping and have a main entry point for code execution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further in-depth information on how to get started with CircuitPython development can be found on &lt;a href=&quot;https://learn.adafruit.com/welcome-to-circuitpython/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their excellent website&lt;/a&gt; as we will be focussing on MicroPython in future projects.&lt;/p&gt;

&lt;h3 id=&quot;code-example-2&quot;&gt;Code example&lt;/h3&gt;

&lt;p&gt;The basic code for a LED blink example is listed below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;board&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;digitalio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digitalio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DigitalInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GP25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digitalio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again this code does the same as the C++ code mentioned above.
It is also more readable, but differs slightly from the MicroPython flavour of Python.
The &lt;a href=&quot;https://circuitpython.readthedocs.io/en/6.1.x/README.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CircuitPython documentation&lt;/a&gt; has examples and information on what is available and what is not.
Please be reminded that CircuitPython support for the Pi Pico is still very new and some APIs may contain bugs, not work at all or even not be available yet.&lt;/p&gt;

&lt;p&gt;Another thing to note is that the CircuitPython implementation has some additional pros and cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It does not support _thread, so you can only use one of the cores of the Pi Pico&lt;/li&gt;
  &lt;li&gt;It supports a lot more devices, if there is an Adafruit peripheral/device/sensor, chances are big they have a library/driver available for it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Pi Pico is a nice little microcontroller that has a lot of potential.
It isn’t particularly outstanding in features but it’s cheap and is backed by the Raspberry Pi foundation.&lt;/p&gt;

&lt;p&gt;Being able to use MicroPython, or CircuitPython, is like a breath of fresh air.
It allows for faster prototyping without having to deal with C/C++ per se.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/rp2040/getting-started/#getting-started-with-micropython&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pi Pico Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datasheets.raspberrypi.org/pico/raspberry-pi-pico-c-sdk.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;General C/C++ SDK documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/raspberrypi/pico-setup/master/pico_setup.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;C++ setup Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smittytone.wordpress.com/2021/02/02/program-raspberry-pi-pico-c-mac/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;C++ setup Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ndabas/pico-setup-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;C++ setup Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/rp2040/getting-started/#getting-started-with-micropython&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Getting started with MicroPython&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thonny.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thonny IDE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.micropython.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MicroPython documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circuitpython.org/board/raspberry_pi_pico/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CircuitPython download&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.adafruit.com/welcome-to-circuitpython/installing-mu-editor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mu IDE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.adafruit.com/welcome-to-circuitpython/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Getting started with CircuitPython&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circuitpython.readthedocs.io/en/6.1.x/README.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CircuitPython documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a senior consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="microcontrollers" /><category term="c" /><category term="c++" /><category term="python" /><category term="micropython" /><category term="tinkering" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-03-25-getting-started-with-the-pi-pico/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-03-25-getting-started-with-the-pi-pico/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to HAPI FHIR</title><link href="https://ordina-jworks.github.io/ehealth/2021/02/23/hapi-fhir.html" rel="alternate" type="text/html" title="Introduction to HAPI FHIR" /><published>2021-02-23T00:00:00+00:00</published><updated>2021-02-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/ehealth/2021/02/23/hapi-fhir</id><content type="html" xml:base="https://ordina-jworks.github.io/ehealth/2021/02/23/hapi-fhir.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hapi-servers-types&quot; id=&quot;markdown-toc-hapi-servers-types&quot;&gt;HAPI Servers Types&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#plain-server&quot; id=&quot;markdown-toc-plain-server&quot;&gt;Plain server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jpa-server&quot; id=&quot;markdown-toc-jpa-server&quot;&gt;JPA Server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jax-rs-server&quot; id=&quot;markdown-toc-jax-rs-server&quot;&gt;JAX-RS Server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-plain-server-implementation&quot; id=&quot;markdown-toc-custom-plain-server-implementation&quot;&gt;Custom Plain server implementation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#modules&quot; id=&quot;markdown-toc-modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#server&quot; id=&quot;markdown-toc-server&quot;&gt;Server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#security&quot; id=&quot;markdown-toc-security&quot;&gt;Security&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#cross-origin-resource-sharing-cors&quot; id=&quot;markdown-toc-cross-origin-resource-sharing-cors&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#authorizationinterceptor&quot; id=&quot;markdown-toc-authorizationinterceptor&quot;&gt;AuthorizationInterceptor&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Fast Healthcare Interoperability Resource, commonly known as FHIR, 
has quickly become one of the most popular protocols for joining disparate systems together, 
and holds great promise for the development of an application-based approach to interoperability and health information exchange.&lt;/p&gt;

&lt;p&gt;If you haven’t heard of FHIR, 
I recommend you read the &lt;a href=&quot;https://ordina-jworks.github.io/ehealth/2020/03/28/Healthcare-on-FHIR.html&quot; target=&quot;_blank&amp;quot;,rel=&amp;quot;noopener noreferrer&quot;&gt;Healthcare on FHIR&lt;/a&gt; blogpost from my colleague Martin Kwee.&lt;br /&gt;
In this article we’ll focus on implementing the FHIR specification through the open source Java libraries called HAPI-FHIR.
&lt;a href=&quot;https://hapifhir.io/&quot; target=&quot;_blank&amp;quot;,rel=&amp;quot;noopener noreferrer&quot;&gt;HAPI FHIR&lt;/a&gt; is a complete implementation of the HL7 FHIR standard for healthcare interoperability in Java.&lt;/p&gt;

&lt;h2 id=&quot;hapi-servers-types&quot;&gt;HAPI Servers Types&lt;/h2&gt;

&lt;p&gt;HAPI FHIR provides several mechanisms for building FHIR servers. 
The appropriate choice depends on the specifics of what you are trying to accomplish.&lt;/p&gt;

&lt;h3 id=&quot;plain-server&quot;&gt;Plain server&lt;/h3&gt;

&lt;p&gt;The HAPI FHIR Plain Server (often referred to as a Facade) is an implementation of a FHIR server against an arbitrary backend that you provide.
In this mode, you write code that handles resource storage and retrieval logic, and HAPI FHIR takes care of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP Processing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Parsing / Serialization&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FHIR REST semantics&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This module was originally created at &lt;a href=&quot;https://uhn.ca/&quot; target=&quot;_blank&amp;quot;,rel=&amp;quot;noopener noreferrer&quot;&gt;University Health Network&lt;/a&gt; (UHN) as a mechanism for placing a common FHIR layer on top of a series of existing data sources, 
including an electronic medical record system (EMR), an enterprise patient scheduling system, and a series of clinical data repositories. 
All of these systems existed long before FHIR was adopted at UHN and HAPI FHIR was created to make the process of adopting FHIR easier.&lt;/p&gt;

&lt;h3 id=&quot;jpa-server&quot;&gt;JPA Server&lt;/h3&gt;

&lt;p&gt;The HAPI FHIR JPA Server is a complete implementation of a FHIR server against a relational database. 
Unlike the Plain Server, the JPA server provides its own database schema and handles all storage and retrieval logic without any coding being required.&lt;/p&gt;

&lt;h3 id=&quot;jax-rs-server&quot;&gt;JAX-RS Server&lt;/h3&gt;

&lt;p&gt;The HAPI FHIR Plain Server (RestfulServer) is implemented as a standard JEE Servlet, meaning that it can be deployed in any compliant JEE web container.
The JAX-RS module is a community-supported module that was not developed by the core HAPI FHIR team. 
Before deciding to use the HAPI FHIR JAX-RS module, please be aware that it does not have as complete of support for the full FHIR REST specification as the Plain Server.&lt;/p&gt;

&lt;p&gt;For users in an environment where existing JAX-RS services have been created, 
it is often desirable to use JAX-RS for FHIR servers as well. HAPI FHIR provides a JAX-RS FHIR server implementation for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;custom-plain-server-implementation&quot;&gt;Custom Plain server implementation&lt;/h2&gt;

&lt;p&gt;As you have read above, there are different server types for different needs.
Since the JPA implementation is a fully out-of-the-box working implementation with a SQL database, I thought it would be a nice challenge to set up my own Plain server implementation using a NoSQL database.
The remainder of this blogpost will cover some practical code snippets of how I’ve set up a FHIR RESTful server using Spring Boot and a MongoDB database.&lt;/p&gt;

&lt;p&gt;Below a comparison between our custom developed Plain server and an out-of-the-box JPA server:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image&quot; style=&quot;margin:0px auto; max-width:80%&quot; alt=&quot;custom diagram&quot; src=&quot;/img/2021-01-23-hapi-fhir/diagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Out-of-the-box JPA server:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image&quot; style=&quot;margin:0px auto; max-width:80%&quot; alt=&quot;jpa diagram&quot; src=&quot;/img/2021-01-23-hapi-fhir/JPAdiagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compared to the JPA server that is provided out-of-the-box, 
there are some minor differences but by and large they are similar. 
The differences are the database technologies and mapping technologies.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;

&lt;p&gt;First of all, we will create a simple Spring Boot project and load the HAPI library using Maven.
While there are many subprojects in the FHIR Codebase we only need 3 for the FHIR Façade or as the HAPI FHIR project lead James Agnew puts it, for HAPI Plain Server implementation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hapi-fhir-base
    &lt;ul&gt;
      &lt;li&gt;This is the core HAPI FHIR library and is always required in order to use the framework. It contains the context,     parsers, and other support classes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hapi-fhir-structures
    &lt;ul&gt;
      &lt;li&gt;This module contains the StructureDefinitions, ValueSets, CodeSystems, Schemas, and Schematrons for a specific FHIR version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hapi-fhir-server
    &lt;ul&gt;
      &lt;li&gt;This module contains the HAPI FHIR Server framework, which can be used to develop FHIR compliant servers against your own data storage layer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pom.xml&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ca.uhn.hapi.fhir&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hapi-fhir-structures-r4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ca.uhn.hapi.fhir&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hapi-fhir-base&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ca.uhn.hapi.fhir&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hapi-fhir-server&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;The class in the code snippet below is going to be the heart of your custom HAPI FHIR implementation. 
We will be using Release 4 (R4) of the FHIR specification.
Here you will configure most of your HAPI server settings. 
You can add security, select which resources your server will support, 
set defaults on the server to use XML or JSON and many more options. We will implement some more later in this post.&lt;/p&gt;

&lt;p&gt;FhirRestfulServer.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.context.FhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.RestfulServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample.providors.ObservationProvidor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample.providors.PatientProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FhirRestfulServer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestfulServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;FhirRestfulServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setFhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forR4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets setup the Servlet Context. 
We’re using the standard setup of a Spring Boot application and register the FhirRestfulServer web servlet we’ve created earlier.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.web.servlet.ServletRegistrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FhirExampleApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FhirExampleApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletRegistrationBean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServletRegistrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ServletRegistrationBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletRegistrationBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FhirRestfulServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FhirServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once your server has started, open up your Postman and GET the following URL: http://localhost:8080/metadata. 
A capability statement will appear just like the screenshot below.
A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. 
Congratulations you are now FHIR enabled!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image&quot; style=&quot;margin:0px auto; max-width:80%&quot; alt=&quot;postman&quot; src=&quot;/img/2021-01-23-hapi-fhir/postman.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;The PatientProvider is where the FHIR Patient behaviour is configured. 
HAPI uses annotations to indicate what kind of REST service a class method provides. 
The procedure “createPatient” in the diagram is annotated with @Create which indicates that it handles POST/create. 
This procedure then uses a PatientDAO (DAO - data access object) class which Spring Data uses to persist the Patient resource in MongoDB.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.context.FhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.annotation.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.api.MethodOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.param.DateRangeParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.param.StringParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.param.TokenParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.IResourceProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample.dao.patient.PatientDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.instance.model.api.IBaseResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.r4.model.IdType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.r4.model.OperationOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.r4.model.Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.r4.model.Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PatientProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IResourceProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FhirContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PatientDAO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IBaseResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Search&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;searchPatient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_BIRTHDATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRangeParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_FAMILY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;familyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_GENDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_GIVEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;givenName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_IDENTIFIER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TokenParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nd&quot;&gt;@OptionalParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SP_RES_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TokenParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;familyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;givenName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@IdParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IdType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MethodOutcome&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createPatient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResourceParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Patient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;MethodOutcome&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;MethodOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCreated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;OperationOutcome&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;opOutcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;OperationOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOperationOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllPatients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  

    &lt;span class=&quot;nd&quot;&gt;@Delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@IdParam&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;IdType&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;theId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;patientDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the previous code snippet I want to highlight some important details like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The MethodOutcome object must be returned on update and create methods. This object contains the identity of the created resource. 
On a delete and validate method you have a choice between void and MethodOutcome.&lt;/li&gt;
  &lt;li&gt;Operation outcomes are sets of error, warning and information messages that provide detailed information about the outcome of an attempted system operation. 
  The operationOutcome can be used as a direct response from the server (or as a component of the response). For example when the method fails the operationOutcome can provide more information about the outcome. This can be used to provide meaningful error messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we configure our HAPI Server to support the Patient resource.&lt;/p&gt;

&lt;p&gt;FhirRestfulServer.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.context.FhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.RestfulServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.interceptor.CorsInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample.providors.ObservationProvidor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample.providors.PatientProvidor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.cors.CorsConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FhirRestfulServer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestfulServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;FhirRestfulServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   

        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setFhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FhirContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forR4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setResourceProviders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PatientProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this section we have shown you how to implement a Patient resource on a HAPI FHIR server.&lt;/p&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;
&lt;p&gt;Security is a crucial part of setting up a server especially when it comes to sensitive data like health information.
To easily facilitate this security concern, there are some out-of-the box features that HAPI provides to ensure the safeguarding of sensitive patient data
The following code snippets comes from the HAPI FHIR documentation.&lt;/p&gt;

&lt;h4 id=&quot;cross-origin-resource-sharing-cors&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/h4&gt;

&lt;p&gt;The HAPI FHIR server framework includes an interceptor that can be used to provide CORS functionality on your server. 
This mechanism relies purely on Java configuration. 
HAPI’s interceptor is a thin wrapper around Spring Framework’s CorsProcessor class, 
so it requires Spring to be present on your classpath.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.interceptor.CorsInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.cors.CorsConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlPatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/fhir/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FHIR Server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestfulServerWithCors&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestfulServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... define your resource providers here ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Define your CORS configuration. This is an example&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// showing a typical setup. You should customize this&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to your specific needs&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;CorsConfiguration&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;CorsConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x-fhir-starter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAllowedOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addExposedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addExposedHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAllowedMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PUT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OPTIONS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PATCH&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create the interceptor and register it&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;CorsInterceptor&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;interceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;CorsInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;registerInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;authorizationinterceptor&quot;&gt;AuthorizationInterceptor&lt;/h4&gt;

&lt;p&gt;HAPI FHIR provides you with an AuthorizationInterceptor which can be helpful to determine whether a user has the appropriate permission to perform a given task on a FHIR server. 
This is done by declaring a set of rules that can selectively allow (whitelist) and/or selectively block (blacklist) requests. 
The interceptor works by allowing you to declare permission based on an individual request coming in.&lt;/p&gt;

&lt;p&gt;The AuthorizationInterceptor is used by subclassing it and then registering your subclass with the RestfulServer. 
The following example shows a subclassed interceptor implementing some basic rules:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.fhirexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.api.server.RequestDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.exceptions.AuthenticationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.interceptor.auth.AuthorizationInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.interceptor.auth.IAuthRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ca.uhn.fhir.rest.server.interceptor.auth.RuleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hl7.fhir.r4.model.IdType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PatientAndAdminAuthorizationInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorizationInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IAuthRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildRuleList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theRequestDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Process authorization header - The following is a fake&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// implementation. Obviously we'd want something more real&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// for a production scenario.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// In this basic example we have two hardcoded bearer tokens,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// one which is for a user that has access to one patient, and&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// another that has full access.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;IdType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userIdPatientId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theRequestDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNormalUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This user has only access to the Patient resource with id 1.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If the user is a specific patient, we create the following rule chain:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Allow the user to read anything in their own patient compartment&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Allow the user to write anything in their own patient compartment&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If a client request doesn't pass either of the above, deny it&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;userIdPatientId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IdType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Patient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inCompartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Patient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userIdPatientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andThen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inCompartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Patient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userIdPatientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andThen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;denyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAdmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If the user is an admin, allow everything&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Throw an HTTP 401&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Missing or invalid Authorization header value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isNormalUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bearer dfw98h38r&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAdmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bearer 39ff939jgg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the server was set up and ready to use,I’ve set up a small Angular front-end application where it was possible to retrieve all the Patients and add a Patient.
Finally Observations were added which could be linked to a specific Patient.
In order not to define all the Javascript interfaces myself I used the following module &lt;a href=&quot;https://www.npmjs.com/package/@ahryman40k/ts-fhir-types&quot; target=&quot;_blank&amp;quot;,rel=&amp;quot;noopener noreferrer&quot;&gt;@ahryman40k/ts-fhir-types&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For several years, the FHIR specification has been providing enhancements at various levels
from application development to inter-application integration&lt;/p&gt;

&lt;p&gt;We can conclude that setting up a FHIR server in Java is made easy by using the HAPI libraries.
They provide different server types for different needs.
There are servers that work out-of-the box but there are also possibilities to link existing databases to a HAPI FHIR façade. 
In addition, the security libraries provided by HAPI make the development process a lot easier and secure.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Youri&quot;, &quot;last_name&quot;=&gt;&quot;Vermeir&quot;, &quot;github&quot;=&gt;&quot;Vermeir&quot;, &quot;linkedin&quot;=&gt;&quot;youri-vermeir&quot;, &quot;permalink&quot;=&gt;&quot;/author/youri_vermeir/&quot;, &quot;avatar&quot;=&gt;&quot;youri-vermeir.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;youri.vermeir@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Youri is an ambitious back-end developer with a problem-solving mindset. He is a team-oriented person who is always motivated to learn and master new skills.&quot;}</name><email>youri.vermeir@ordina.be</email></author><category term="eHealth" /><category term="eHealth" /><category term="FHIR" /><category term="Interoperability" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-01-23-hapi-fhir/hapi-logo.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-01-23-hapi-fhir/hapi-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>