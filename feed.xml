<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-10-09T07:18:35+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">NGRX vs. NGXS vs. Akita vs. RxJS: Fight!</title><link href="https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison.html" rel="alternate" type="text/html" title="NGRX vs. NGXS vs. Akita vs. RxJS: Fight!" /><published>2018-10-08T00:00:00+00:00</published><updated>2018-10-08T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison</id><content type="html" xml:base="https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison.html">&lt;h1 id=&quot;reason-for-comparing&quot;&gt;Reason for comparing&lt;/h1&gt;

&lt;p&gt;When creating a web application, one of the questions to ask is how data should be managed.
If the application must be reactive, it’s best to use &lt;a href=&quot;http://reactivex.io&quot;&gt;ReactiveX&lt;/a&gt; (or Rx for short) to create streams of data.
The next question is how this could work performant and reliable.&lt;/p&gt;

&lt;p&gt;The current trend is to use a &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;-based storage solution, which consists of a Store, Selectors to get data from the store in the form of Observables and Actions to modify the store.
This allows for a single source of truth, a read-only state and the flow of data going in one direction.
There are a couple of different solutions for Angular.
NGRX is by far the most popular, leaving the new kids in town, NGXS and Akita, far behind in popularity.&lt;/p&gt;

&lt;p&gt;It is, however, not always needed to have a storage framework solution.
Very small applications are easy to create with plain RxJS, if you are quite skilled.
In this post, I’ve stacked each of these solutions against each other to see what can be learned.&lt;/p&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#the-fighting-ring&quot;&gt;The fighting ring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-competitors&quot;&gt;The competitors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fight&quot;&gt;Fight&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#1-available-tooling&quot;&gt;Available Tooling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-boilerplate-code&quot;&gt;Boilerplate code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-dependencies-and-size&quot;&gt;Dependencies and size&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-score&quot;&gt;Final score&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-fighting-ring&quot;&gt;The fighting ring&lt;/h1&gt;

&lt;p&gt;To compare the four competitors, I’ve set up a simple To Do-application (&lt;a href=&quot;https://github.com/orjandesmet/angular-state-management-comparison&quot;&gt;GitHub&lt;/a&gt;) with &lt;strong&gt;Angular CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The master branch holds a base of the application, which cannot run on its own.
It needs a state management solution from one of the other branches.
To make the comparison easier, the base application is written in such a way that each solution only adds files to a &lt;em&gt;statemanagement&lt;/em&gt; folder and loads a service and zero or more modules into the &lt;strong&gt;AppModule&lt;/strong&gt;.
No other files (except &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;package-lock.json&lt;/em&gt; and &lt;em&gt;logo.png&lt;/em&gt;) are to be changed.
From an end-user perspective, the application would appear and behave the exact same, no matter which state management solution is used.
The logo is added to be able to differentiate which solution is running.&lt;/p&gt;

&lt;p&gt;A To Do-application is perfect to demonstrate CRUD.
A &lt;strong&gt;FakeBackendService&lt;/strong&gt; is provided to simulate a RESTful API backend.
The idea is to load the list only once in the application’s lifetime and then update the state, without needing to fetch everything from the backend again.
As such, the &lt;strong&gt;FakeBackendService&lt;/strong&gt; logs its calls to the console for monitoring.&lt;/p&gt;

&lt;h1 id=&quot;the-competitors&quot;&gt;The competitors&lt;/h1&gt;

&lt;h3 id=&quot;ngrx&quot;&gt;NGRX&lt;/h3&gt;

&lt;p&gt;(v6.1.x) &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/README.md&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxJS powered state management for Angular applications, inspired by Redux&lt;/p&gt;

  &lt;p&gt;@ngrx/store is a controlled state container designed to help write performant, consistent applications on top of Angular.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ngxs&quot;&gt;NGXS&lt;/h3&gt;

&lt;p&gt;(v3.2.x) &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NGXS is modeled after the CQRS pattern popularly implemented in libraries like Redux and NGRX but reduces boilerplate by using modern TypeScript features such as classes and decorators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;akita&quot;&gt;Akita&lt;/h3&gt;

&lt;p&gt;(v1.7.x) &lt;a href=&quot;https://netbasal.gitbook.io/akita/&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Akita is a state management pattern, built on top of RxJS, which takes the idea of multiple data stores from Flux and the immutable updates from Redux, along with the concept of streaming data, to create the Observable Data Stores model.&lt;/p&gt;

  &lt;p&gt;Akita encourages simplicity. It saves you the hassle of creating boilerplate code and offers powerful tools with a moderate learning curve, suitable for both experienced and inexperienced developers alike.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;plain-rxjs&quot;&gt;Plain RxJS&lt;/h3&gt;

&lt;p&gt;(v6.0.x) &lt;a href=&quot;https://rxjs-dev.firebaseapp.com&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the aims of a (progressive) web application is to minimize loading time by reducing the package size.
In that light, some developers opt to not use a framework, but instead use plain RxJS.
To simulate a store as much as possible, I’ve used &lt;strong&gt;BehaviorSubject&lt;/strong&gt;s to hold the state and &lt;strong&gt;pipeable operators&lt;/strong&gt; to modify the state.&lt;/p&gt;

&lt;h1 id=&quot;fight&quot;&gt;Fight&lt;/h1&gt;

&lt;h2 id=&quot;1-available-tooling&quot;&gt;1. Available tooling&lt;/h2&gt;

&lt;p&gt;Since this post is aimed at developers, it might be best to first evaluate the tools available for developers.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://extension.remotedev.io/&quot;&gt;Redux Devtools&lt;/a&gt; plugin exists for Chrome and Firefox, or it can be run as a standalone application.
It allows developers to see the impact of a Redux action and time travel between these actions.
Another useful feature available to Angular developers is &lt;a href=&quot;https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2&quot;&gt;Angular Schematics&lt;/a&gt;, which allow to create pieces of code through Angular CLI.
None of the solutions have these tools in their default packages and they need to be installed separately.&lt;/p&gt;

&lt;h3 id=&quot;redux-devtools&quot;&gt;Redux DevTools&lt;/h3&gt;

&lt;h4 id=&quot;devtools-in-ngrx&quot;&gt;DevTools in NGRX&lt;/h4&gt;

&lt;p&gt;NGRX provides &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store-devtools/README.md&quot;&gt;&lt;em&gt;@ngrx/store-devtools&lt;/em&gt;&lt;/a&gt; for DevTools.
It works as expected, displaying the latest actions with their impact and the resulting state of the store.
It’s possible to jump to specific actions and even skip actions.
It also allows devs to dispatch an action directly from the DevTools itself, but does not verify that action’s payload.
Implementing the tools is as easy as importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;StoreDevToolsModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instrument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NGRX DevTools provide options for displaying a maximum age of actions, displaying a name, logging only to console, sanitizing state and actions and serializing the state.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-ngxs&quot;&gt;DevTools in NGXS&lt;/h4&gt;

&lt;p&gt;Although NGXS is also modeled after CQRS, it behaves a bit differently.
It provides &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/devtools&quot;&gt;&lt;em&gt;@ngxs/devtools-plugin&lt;/em&gt;&lt;/a&gt; for DevTools.
It does, however, not support all functionalities.
The latest actions can be viewed with their impact and resulting state.
But while it’s possible to jump to specific actions, it’s not possible to skip actions or dispatch new ones using the DevTools.
Implementing the tools is just as easy as with NGRX, importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;NgxsReduxDevtoolsPluginModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NGXS also provides some options for displaying a maximum age of actions, displaying a name and sanitizing state and actions.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-akita&quot;&gt;DevTools in Akita&lt;/h4&gt;

&lt;p&gt;Akita is the only solution not powered by a Redux-like pattern.
That is why it also has limited functionality in the DevTools.
The DevTools are available through &lt;a href=&quot;https://netbasal.gitbook.io/akita/enhancers/devtools&quot;&gt;&lt;em&gt;@datorama/akita-ngdevtools&lt;/em&gt;&lt;/a&gt;.
Similar to NGXS, the latest actions can be viewed with their impact and the resulting state.
And similar to NGXS, it’s possible to jump to specific actions in the timeline, but impossible to skip actions or dispatch new ones using the DevTools.
What’s more is that the raw action does not present the actual payload.
When adding custom actions, you also have to name them with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@action&lt;/code&gt; decorator.
Implementing the tools is, as ever, possiblie by importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;AkitaNgDevtools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Akita’s DevTools plugin also provides some options for displaying a maximum age of actions, a blacklist and a whitelist.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-plain-rxjs&quot;&gt;DevTools in plain RxJS&lt;/h4&gt;

&lt;p&gt;Since RxJS itself is no Redux-based storage solution, it obviously does not provide any support for Redux DevTools at all.&lt;/p&gt;

&lt;h3 id=&quot;schematics&quot;&gt;Schematics&lt;/h3&gt;

&lt;h4 id=&quot;schematics-in-ngrx&quot;&gt;Schematics in NGRX&lt;/h4&gt;

&lt;p&gt;NGRX has quite a lot of schematics available through &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/schematics/README.md&quot;&gt;&lt;em&gt;@ngrx/schematics&lt;/em&gt;&lt;/a&gt;.
It allows to create stores, feature stores, reducers, actions, container components, effects, entity stores all with a lot of options.
In my To Do-applications, most of the work was done using two simple commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g @ngrx/schematics:store AppState &lt;span class=&quot;nt&quot;&gt;--module&lt;/span&gt; app.module.ts &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--statePath&lt;/span&gt; statemanagement
ng g @ngrx/schematics:entity statemanagement/TodoItem &lt;span class=&quot;nt&quot;&gt;--reducers&lt;/span&gt; index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first command added the StoreModule and StoreDevToolsModule into &lt;strong&gt;AppModule&lt;/strong&gt; and created a reducer in &lt;em&gt;statemanegement/index.ts&lt;/em&gt;.
The latter command created the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.actions.ts&lt;/em&gt;, with a lot of premade actions for inserting, updating, upserting, removing one or multiple entities.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.model.ts&lt;/em&gt;, with a premade model interface I changed to just export the &lt;strong&gt;TodoItem&lt;/strong&gt; interface which I created for the base application.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.reducer.ts&lt;/em&gt;, and its corresponding spec file handling the generated actions (the spec file did however only test ‘unknown action’) and providing several basic selectors, though I had to modify the following code for the selectors to work:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectTodoItemState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFeatureSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'todoItem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectEntities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSelectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectTodoItemState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The attempt to create extra actions using the following command was not as easy as it seemed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g @ngrx/schematics:action statemanagement/Filter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Only one action was created called &lt;strong&gt;LoadFilters&lt;/strong&gt;, with the type &lt;code class=&quot;highlighter-rouge&quot;&gt;[Filter] Load Filters&lt;/code&gt;.
It would’ve been easier if one could specify the name of the action some more.&lt;/p&gt;

&lt;p&gt;I ended up extending the generated Entity store with the filter and sorting properties for which I had to add extra reducers and selectors manually.
These properties could have been part of a separate state, but I opted to keep the store as simple as possible.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-ngxs&quot;&gt;Schematics in NGXS&lt;/h4&gt;

&lt;p&gt;NGXS does not offer any schematics extensions.
It does, however, offer a CLI through &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/cli&quot;&gt;&lt;em&gt;ngxs-cli&lt;/em&gt;&lt;/a&gt;.
Although the documentation makes mention of the package &lt;em&gt;@ngxs/ngxs-cli&lt;/em&gt;, this package was at the time of writing not available.&lt;/p&gt;

&lt;p&gt;Using the CLI, a state file &lt;em&gt;todo-items.state&lt;/em&gt; is created, along with &lt;em&gt;todo-items.actions.ts&lt;/em&gt; with 1 example action (add), to add an item to an array.
Other than that, everything must be done by yourself, including adding importing the module into &lt;em&gt;AppModule&lt;/em&gt;.
The CLI offers some options for a name, whether or not to create a spec-file, the path and the name of the folder to create.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-akita&quot;&gt;Schematics in Akita&lt;/h4&gt;

&lt;p&gt;Akita does offer schematics through &lt;a href=&quot;https://github.com/datorama/akita-schematics&quot;&gt;&lt;em&gt;akita-schematics&lt;/em&gt;&lt;/a&gt;.
It allows to separately create a store, model, query and service (meant for http), or everything together in what they call a feature.
I used the following command to create a feature store:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g akita-schematics:feature statemanagement/todoItems
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This created the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.query.ts&lt;/em&gt;, which is used for selecting items from the state.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.model.ts&lt;/em&gt;, with a premade model interface I changed to just export the &lt;strong&gt;TodoItem&lt;/strong&gt; interface which I created for the base application.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.store.ts&lt;/em&gt;, which contains the actions that can be performed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I didn’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--plain&lt;/code&gt; option, the state created by that command was an extension of &lt;strong&gt;EntityState&lt;/strong&gt;, and already has some actions available for setting, inserting, updating and removing entities.&lt;/p&gt;

&lt;p&gt;Similar to NGRX, it was easy to extend the state with a filter and a sort property.&lt;/p&gt;

&lt;p&gt;Akita also provides a &lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/akita-cli&quot;&gt;CLI tool&lt;/a&gt;, but I didn’t test this.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-plain-rxjs&quot;&gt;Schematics in plain RxJS&lt;/h4&gt;

&lt;p&gt;Since RxJS is based on operator functions, it’s nearly impossible to have useful schematics for this use case.
This means that a developer must write everything by hand.&lt;/p&gt;

&lt;h3 id=&quot;tooling-summary&quot;&gt;Tooling summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tooling&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Redux DevTools&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Schematics&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;NGRX&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, limited&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No, but limited CLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, limited&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, also CLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plain RxJS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;2-features&quot;&gt;2. Features&lt;/h2&gt;

&lt;p&gt;This is a tough one.
I didn’t have use cases in a To Do-application to research every possible feature.
But, nevertheless, let’s cover the most useful features and their solutions.&lt;/p&gt;

&lt;h3 id=&quot;feature-asynchronous-actions&quot;&gt;Feature: Asynchronous actions&lt;/h3&gt;

&lt;p&gt;What is meant with asynchronous actions, is that an action is dispatched to the store and the store is updated in an asynchronous way.
An example of this is the use of a &lt;strong&gt;FetchItems&lt;/strong&gt; action, which performs a request to the backend and dispatches one or multiple different actions when that request completes.
This is especially useful when using a realtime database or Google Cloud Firestore, which opens a socket and can emit multiple events.
In the example application, I’ve implemented this for a one-time fetch of items where possible.&lt;/p&gt;

&lt;p&gt;NGRX can handle this with &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/effects/README.md&quot;&gt;&lt;em&gt;@ngrx/effects&lt;/em&gt;&lt;/a&gt;, a separate package to be installed.
Effects can be added to the root module or to a feature module for lazy loading.
They can react on any Observable (not only emitted actions) and must emit a new action.
If multiple actions should be emitted, these must be &lt;em&gt;flatMap&lt;/em&gt;ped.
There is also a schematics extension available to generate an Effects class.&lt;/p&gt;

&lt;p&gt;NGXS allows actions to be handled &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/concepts/state#async-actions&quot;&gt;asynchronously&lt;/a&gt; out-of-the-box.
These actions can dispatch different actions, but can also modify the state directly.
An Observable or Promise must be returned to notify the dispatcher that the action has been completed.&lt;/p&gt;

&lt;p&gt;Akita does not have support for asynchronous actions.
The subscription to an asynchronous stream of data must be handled by yourself.&lt;/p&gt;

&lt;p&gt;While RxJS is effectively the reason asynchronous actions can exist in Angular, it is quite difficult for novices to update the store from a stream.&lt;/p&gt;

&lt;h3 id=&quot;feature-memoized-selectors&quot;&gt;Feature: Memoized Selectors&lt;/h3&gt;

&lt;p&gt;NGRX offers support for &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/selectors.md&quot;&gt;Selectors&lt;/a&gt; as constants.
These can be easily chained in other selectors, making them ideal when the store is being refactored.&lt;/p&gt;

&lt;p&gt;NGXS works similar, but uses &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/concepts/select&quot;&gt;functions&lt;/a&gt; inside the &lt;strong&gt;State&lt;/strong&gt; class.
They can be chained, but it’s not as clear to understand as the NGRX solution.
A neat feature within NGXS, is the so-called &lt;em&gt;shared selector&lt;/em&gt;, which allows to create a selector that can be used with different states.&lt;/p&gt;

&lt;p&gt;Akita takes a different approach.
A &lt;a href=&quot;https://netbasal.gitbook.io/akita/core-concepts/the-query&quot;&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;/a&gt; class is created, in which functions and constants can be defined.
These return Observables, which can be used to obtain a part of the store and can be combined using RxJS operators.
Unlike NGRX and NGXS, Akita does not easily offer selecting queries across different states in the store, without creating substates.&lt;/p&gt;

&lt;p&gt;As ever, RxJS, must throw in the towel for this. When you need something from the store, you’ll need to use some operators to get that specific item.&lt;/p&gt;

&lt;h3 id=&quot;feature-persistence&quot;&gt;Feature: Persistence&lt;/h3&gt;

&lt;p&gt;NGRX does not offer any persistence logic itself.
There is however a 3rd party package available, &lt;a href=&quot;https://github.com/btroncone/ngrx-store-localstorage&quot;&gt;&lt;em&gt;ngrx-store-localstorage&lt;/em&gt;&lt;/a&gt;, which works through a meta reducer.
It offers some options, one of which is setting the Storage interface and which keys to sync and how to (de)serialize those items.&lt;/p&gt;

&lt;p&gt;NGXS does have its official plugin, &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/storage&quot;&gt;&lt;em&gt;@ngxs/storage-plugin&lt;/em&gt;&lt;/a&gt;, a separate module that can be imported into the &lt;strong&gt;AppModule&lt;/strong&gt;.
It also has options for setting the Storage interface and which keys to sync and how to (de)serialize those items, but also offers &lt;strong&gt;migration strategies&lt;/strong&gt;.
This allows for a version with a radically changed store to not meet with synchronization errors.&lt;/p&gt;

&lt;p&gt;Akita’s main package includes a &lt;a href=&quot;https://netbasal.gitbook.io/akita/enhancers/persist-state&quot;&gt;&lt;em&gt;persistState()&lt;/em&gt;&lt;/a&gt; function.
Including this function in the &lt;em&gt;main.ts&lt;/em&gt; file allows the state to be stored in either localStorage or sessionStorage.
Other options include, setting the key by which the state is saved, and including/excluding several aspects of the store and how to (de)serialize those items.&lt;/p&gt;

&lt;p&gt;When using plain RxJS, you’re on your own again.&lt;/p&gt;

&lt;h3 id=&quot;other-features&quot;&gt;Other features&lt;/h3&gt;

&lt;p&gt;The frameworks offer even more features.
I’m not going into detail for each of them.
Most of them are included in the following summary.&lt;/p&gt;

&lt;h3 id=&quot;features-summary&quot;&gt;Features summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Features&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGRX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;NGXS&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Akita&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Plain RxJS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Async actions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, through effects&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(Memoized) selectors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, as queries&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cross-state selectors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Offline persistence&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd party package&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Main package&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Snapshot selection without &lt;em&gt;first()&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Forms synchronization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/MrWolfZ/ngrx-forms&quot;&gt;3rd party packages&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/form&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/plugins/persist-form&quot;&gt;Main package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Router synchronization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/router-store/README.md&quot;&gt;1st party package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/router&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WebSocket&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/avatsaev/angular-ngrx-socket-frontend&quot;&gt;3rd party package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/websocket&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angular ErrorHandler&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/errors&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Meta Reducers&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/api.md#meta-reducers&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/meta-reducer&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lazy loading&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/api.md#feature-module-state-composition&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/lazy&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cancellation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/cancellation&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Side effects&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/effects/README.md&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/action-handlers&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Web workers&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/additional-functionality/web-workers&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transactions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/transactions&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;3-boilerplate-code&quot;&gt;3. Boilerplate code&lt;/h2&gt;

&lt;p&gt;In this round the boilerplate code is evaluated.
This is code that is needed for each part of the state, but differs only a little per state.
I opted not to use &lt;a href=&quot;https://github.com/mweststrate/immer&quot;&gt;&lt;em&gt;immer&lt;/em&gt;&lt;/a&gt; for immutable state changes to give each competitor the same chances.&lt;/p&gt;

&lt;p&gt;Also within this section, there is the amount of files needed or generated for the To Do-application.&lt;/p&gt;

&lt;p&gt;Starting with NGRX, which generated &lt;strong&gt;9&lt;/strong&gt; files through schematics.
These files include the reducer file.
Even though I created an Entity store, to ease the use of an entity collection, the reducer file still contained a lot of code through the adapter.
A lot of which were the reducer cases for all the adapter’s actions, like set, insert, upsert and delete one or many items.
Even though these cases only call the adapter’s functions, most of these methods won’t change and it would be nicer if these could have been part of the &lt;em&gt;@ngrx/entity&lt;/em&gt; package, like the generated selectors.
The same argument holds for the actions created in &lt;em&gt;todo-item.actions.ts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NGXS fairs a little better in this aspect.
It generated only &lt;strong&gt;3&lt;/strong&gt; files, though each action had to be written out myself and I created extra files for other actions.
And even though the action functions can refer to Generic functions, it’s a shame an Entity State with specialized functions is not included in the package.&lt;/p&gt;

&lt;p&gt;Akita generated just &lt;strong&gt;4&lt;/strong&gt; files using the schematics.
Because I used an EntityState, a lot of Query functions and Actions were readily available, without them taking extra space.&lt;/p&gt;

&lt;p&gt;With RxJS I managed to create an operator function for each ‘action’ very simply.
The application is quite simple, but the method is scalable enough without much overhead.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Boilerplate&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Files generated&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Total files (*)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Boilerplate code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NGRX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heavy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Medium&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Akita&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Low&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plain RxJS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Medium&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;4-community&quot;&gt;4. Community&lt;/h2&gt;

&lt;p&gt;Based on Google Trends of the past &lt;a href=&quot;https://trends.google.com/trends/explore?q=ngrx,ngxs,akita%20store&quot;&gt;12 months&lt;/a&gt;, NGRX is obviously the most searched for state manager.
The reason is likely that it was the first Redux implementation available for Angular.&lt;/p&gt;

&lt;p&gt;When looking at the GitHub repositories, NGRX has the most stars (at over 3.5K), followed by NGXS (at 1.4K) and Akita (at around 480).
Again this indicates NGRX is the most popular framework.&lt;/p&gt;

&lt;p&gt;But what about contributors?
Looking at the repositories’ insights, it’s clear that the same sequence is followed.
NGRX takes the lead, NGXS a solid second and Akita last.
There it’s also visible that NGRX is still under very active development, looking at the commits.
NGXS meanwhile stagnated and Akita has a steady pace.&lt;/p&gt;

&lt;h3 id=&quot;community-summary&quot;&gt;Community summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;feat.&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Google Trends&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;GitHub stars&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Contributors&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Commits&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;NGRX&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;5-dependencies-and-size&quot;&gt;5. Dependencies and size&lt;/h2&gt;

&lt;p&gt;State management does not come out-of-the-box with Angular. There is a need to install extra dependencies.
Luckily all these dependencies are available through npm.
To make the different implementations as feature-equal as possible, I’ve decided to create entity stores where possible and include dev-tools if available.&lt;/p&gt;

&lt;p&gt;Furthermore, all implementations were built with and without production mode.
For comparison purposes, the base application measured in at &lt;strong&gt;14.6MB&lt;/strong&gt; without production mode, and a mere &lt;strong&gt;754KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;NGRX is a heavy hitter.
It included multiple dependencies for different features. &lt;em&gt;@ngrx/store&lt;/em&gt; is the basis.
&lt;em&gt;@ngrx/store-devtools&lt;/em&gt;, &lt;em&gt;@ngrx/entity&lt;/em&gt;, &lt;em&gt;@ngrx/effects&lt;/em&gt; and &lt;em&gt;@ngrx/schematics&lt;/em&gt; complement this, although the schematics are dev-only.
All this gives the packages a weight of &lt;strong&gt;14.9MB&lt;/strong&gt; without production mode and &lt;strong&gt;786KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;NGXS fairs a little better.
It only includes &lt;em&gt;@ngxs/store&lt;/em&gt; and &lt;em&gt;@ngxs/devtools-plugin&lt;/em&gt;.
This makes the packages weigh in at &lt;strong&gt;14.8MB&lt;/strong&gt; without production mode and &lt;strong&gt;778KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;Akita also has an all-in-one package for the store.
&lt;em&gt;@datorama/akita&lt;/em&gt; holds all functionality, while &lt;em&gt;@datorama/akita-ngdevtools&lt;/em&gt; and &lt;em&gt;akita-schematics&lt;/em&gt; provide some development tools.
Despite this, Akita overthrows NGRX with &lt;strong&gt;15.4MB&lt;/strong&gt; without production mode and matches NGXS with &lt;strong&gt;778KB&lt;/strong&gt; with production mode.
The difference between NGXS and Akita in production mode was a mere &lt;strong&gt;24B&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;RxJS is the clear winner here.
It needs no extra dependencies whatsoever as RxJS already is a dependency of Angular, making the packages &lt;strong&gt;14.6MB&lt;/strong&gt; without production mode and &lt;strong&gt;762KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-and-size-summary&quot;&gt;Dependencies and size summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Non-production (MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Production (KB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Base&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;14.6&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;754&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGRX&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;786&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;778&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15.4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;778&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Plain RxJS&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;14.6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;762&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;final-score&quot;&gt;Final score&lt;/h1&gt;

&lt;p&gt;It’s not easy to just say which solution is the all-time champion.
Each of the competitors has its advantages and disadvantages.
These are the podium places for each round:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Round&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGRX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGXS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Akita&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Plain RxJS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Tooling&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Features&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Boilerplate code&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Community&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dependencies and size&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on UI/UX. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Angular" /><category term="Angular" /><category term="State Management" /><category term="NGRX" /><category term="NGXS" /><category term="Akita" /><category term="RxJS" /><summary type="html">Reason for comparing</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-08-battle-of-the-state-managers/battle-of-the-state-managers.jpg" /></entry><entry><title type="html">Create a Serverless Application with AWS Lambda and DynamoDB</title><link href="https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB.html" rel="alternate" type="text/html" title="Create a Serverless Application with AWS Lambda and DynamoDB" /><published>2018-10-01T00:00:00+00:00</published><updated>2018-10-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-what--why&quot;&gt;Serverless: What &amp;amp; Why&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-we-will-build&quot;&gt;What we will build&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamodb&quot;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-scan-dynamodb&quot;&gt;Lambda: scan DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway-access-the-scan-lambda&quot;&gt;API Gateway: Access the scan Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-write-to-dynamodb&quot;&gt;Lambda: Write to DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway-access-the-write-lambda&quot;&gt;API Gateway: Access the write Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-next&quot;&gt;What is next?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-resources&quot;&gt;Extra resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ready to create a serverless application?&lt;br /&gt;
New to AWS and curious to learn more?&lt;br /&gt;
Read on and learn more about the AWS services by building a serverless app!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Introduction-Components.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;serverless-what--why&quot;&gt;Serverless: What &amp;amp; Why&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;A serverless architecture is a way to build and run your applications without having to think about infrastructure.
You no longer have to maintain servers to run your applications, databases and storage systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And most of all, &lt;strong&gt;it is so easy!&lt;/strong&gt;  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Boom-Sparkles.png&quot; alt=&quot;boom-sparkles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, once you get the hang of it, it really is mind-blowingly easy.
However, first you need to know the basic infrastructure to set up a serverless application.
Let’s do this!&lt;/p&gt;

&lt;h1 id=&quot;what-we-will-build&quot;&gt;What we will build&lt;/h1&gt;
&lt;p&gt;Join me in building a serverless application in which users can give great coding tips to each other. 
To keep it as simple as possible we will build everything through the &lt;strong&gt;AWS Console&lt;/strong&gt; and focus on the infrastructure.
No need to deploy any code from your computer to AWS.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;I could show you a frontend that uses our serverless backend to give and get coding tips.
But that would be an extra layer between you and our serverless application.
Here, I am triggering the app with &lt;strong&gt;Curl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Post a new Coding Tip to the database:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;author&quot;: &quot;Nick&quot;,
    &quot;tip&quot;: &quot;Learn by doing&quot;,
    &quot;category&quot;: &quot;General&quot;
  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A new item was added to the CodingTips database.
I added a few already and can retrieve them too.
View all the Coding Tips that are currently in the database:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Check_Item_Is_Added_To_Table.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/AWS-Lambda-and-DynamoDB-Architecture.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The coding tip items are stored in a NoSQL database AWS &lt;strong&gt;DynamoDB&lt;/strong&gt;.
There are two &lt;strong&gt;Lambda Function&lt;/strong&gt; in play.
One to &lt;strong&gt;GET&lt;/strong&gt; the coding tip items from the database and one to &lt;strong&gt;POST&lt;/strong&gt; a new coding tip item to the database.
The user can access these Lambda Functions through an API provided by the AWS &lt;strong&gt;API Gateway&lt;/strong&gt; service.
This Gateway will redirect to the right Lambda Function based on the HTTP method (POST or GET).
Both Lambda Functions are connected to &lt;strong&gt;CloudWatch&lt;/strong&gt; where you can view the logs of your functions.
&lt;strong&gt;AWS IAM&lt;/strong&gt; is used to give the services the right permissions to connect to each other.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;To follow along you need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an AWS account.
If you do not have one already, you can create one by following these steps from the official guidelines:
&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Create an AWS account&lt;/a&gt;.&lt;br /&gt;
You have to provide a credit card number to create an account.
Don’t worry! 
The &lt;strong&gt;AWS-Free-Tier&lt;/strong&gt; provides plenty of resources that widely exceed what you will use for this tutorial.
If you ask me, AWS is really offering a fantastic amount of stuff for free.
You should be grateful for this, it will give you plenty of time to get to know the AWS Services.&lt;/li&gt;
  &lt;li&gt;coding enthusiasm&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;https://docs.aws.amazon.com/amazondynamodb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a database to store your items.
Login to the AWS Console and under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;em&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt;&lt;/em&gt;.
Click on &lt;strong&gt;Create table&lt;/strong&gt;.&lt;br /&gt;
Name the table &lt;strong&gt;CodingTips&lt;/strong&gt;. 
As primary key make a &lt;em&gt;Partition key&lt;/em&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt;, type &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;’.
Check the &lt;strong&gt;Add sort key&lt;/strong&gt; checkbox and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;, type &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; as a sort key for your table.
Leave the default settings checked and hit &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Created-Empty-Full.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;strong&gt;Amazon Resource Name ARN&lt;/strong&gt; property.
We will use this later to point to this DynamoDB table.&lt;br /&gt;
You just created the DynamoDB table that the application will use.
Awesome!&lt;/p&gt;

&lt;h2 id=&quot;add-elements-to-codingtips-table&quot;&gt;Add elements to CodingTips table&lt;/h2&gt;
&lt;p&gt;Manually add some elements to the CodingTips table.
Go to the CodingTips table, open the &lt;strong&gt;Items&lt;/strong&gt; tab and click &lt;strong&gt;Create item&lt;/strong&gt;.
Add a couple of random items to the table as shown in the image below.
Notice that &lt;strong&gt;date&lt;/strong&gt; is in &lt;strong&gt;milliseconds&lt;/strong&gt;.
These are the milliseconds that have past since the Unix Epoch 1970-01-01.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;1538368878527&lt;/code&gt; equals Mon 1 October 2018 06:41:18.
Hit &lt;strong&gt;Save&lt;/strong&gt; to store the item in the database.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Add_Item.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I added a couple of items as you see in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Random_Items_Added.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice that I did not add a coding tip yet.
We will do this later by using a Lambda Function!&lt;/p&gt;

&lt;h1 id=&quot;lambda-scan-dynamodb&quot;&gt;Lambda: Scan DynamoDB&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS Lambda is a compute service that lets you run code without provisioning or managing servers. 
AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&quot;&gt;https://docs.aws.amazon.com/lambda&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s build a Lambda that scans the DynamoDB table for our items.
In the AWS Console under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;Lambda&lt;/strong&gt;.
Click the &lt;strong&gt;Create Function&lt;/strong&gt; button to start creating a Lambda.
Choose &lt;strong&gt;Author from Scratch&lt;/strong&gt; and start configuring it with the following parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name: CodingTips_Scan&lt;/li&gt;
  &lt;li&gt;Runtime: Node.js 8.10&lt;/li&gt;
  &lt;li&gt;Role: Create a custom role&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Create_From_Scratch.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Selecting &lt;strong&gt;Create a custom role&lt;/strong&gt; will take you to another page to create this new role.
The role is used to give the Lambda Function the right permissions.
Configure the role as shown in the image below.
If everything went well you should only have to adapt the name of the role.
Name it &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda_dynamodb_codingtips&lt;/code&gt;.
The rest will be automatically generated for you.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Role-Create_New_Role.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Click &lt;strong&gt;Allow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Create function&lt;/strong&gt; to create the Lambda.
This will open the designer view of your Lambda Function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Designer_View-Initial.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;One thing is missing here.
The Lambda Function has the authority to send its logs to CloudWatch.
This authority is given by the role we just gave it.
However, it is mentioned nowhere that it has the right to access the CodingTips table.
We should arrange this too.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-role-for-the-lambda-function&quot;&gt;Configuring the Role for the Lambda Function&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. 
You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&quot;&gt;https://docs.aws.amazon.com/IAM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under AWS Services navigate to &lt;strong&gt;IAM&lt;/strong&gt; (Identity and Access Management).
Under roles find the &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role and click it.
It has one policy (for the CloudWatch logs) attached to it already.
Click &lt;strong&gt;Add inline policy&lt;/strong&gt; and go to the &lt;strong&gt;JSON&lt;/strong&gt; tab. 
In the JSON tab add the following JSON to configure this new policy.
Add the &lt;strong&gt;arn&lt;/strong&gt; that points to your own CodingTips table!
You can find this in the &lt;strong&gt;Overview&lt;/strong&gt; tab of your table which we showed above.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dynamodb:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:dynamodb:eu-west-1:389795768041:table/CodingTips&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Click &lt;strong&gt;Review policy&lt;/strong&gt; and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda-DynamoDB-CodingTips-Access&lt;/code&gt;.
Hit &lt;strong&gt;Create policy&lt;/strong&gt;.
You now attached a new policy to the existing &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role.
The role summary looks like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Role-lambda_dynamodb_codingtips_access.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Go back to the designer view of the CodingTips_Scan Lambda.
Now you see that the Lambda Function has the right to connect to the DynamoDB table.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Designer_View-DynamoDB-CloudWatch.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-code&quot;&gt;Function Code&lt;/h2&gt;
&lt;p&gt;Yeah, finally it is time for some code!&lt;br /&gt;
In the configuration window of the lambda add the code in the &lt;strong&gt;Function code&lt;/strong&gt; block.
‘&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; has to contain the following code:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'function starts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aws-sdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DynamoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eu-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processing event: %j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanningParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CodingTips'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//maximum result of 100 items&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//In dynamoDB scan looks through your entire table and fetches all data&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scanningParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; the Lambda Function to persist the changes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; function is the function where the Lambda execution starts when the Lambda is triggered.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; parameter contains the data from the event that triggered the function.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scanningParameters&lt;/code&gt; are used to configure the scan of the table.&lt;/li&gt;
  &lt;li&gt;This function scans the DynamoDB table for the first 100 items it finds.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docClient.scan(scanningParameters, function(err,data)&lt;/code&gt; executes the scan and returns either the result or the error that occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-write-lambda&quot;&gt;Test write-Lambda&lt;/h2&gt;
&lt;p&gt;All right! Let’s test this thing..
On the Lambda Function configuration page you see a dropdown and test button in the upper right corner.
Click the dropdown and configure a new test event.
I called mine &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt; and added an empty test event &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Created_Empty_Test_Event.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; it and you are ready to test the Lambda.&lt;br /&gt;
From the dropdown select your test event and hit the &lt;strong&gt;Test&lt;/strong&gt; button!
Nice one, this returns the items in your table:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Execution_Result_Succeeded.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;api-gateway-access-the-scan-lambda&quot;&gt;API Gateway: Access the scan Lambda&lt;/h1&gt;
&lt;p&gt;Mmmh, fine.. We can trigger the Lambda Function with a test event.
But we want to be able to trigger it from anywhere using a URL.
In the designer view of the lambda you can still see &lt;strong&gt;add triggers from the left&lt;/strong&gt;.
Well, let’s add that trigger!
To expose a Lambda Function AWS provides the &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. 
With a few clicks in the AWS Management Console, you can create an API that acts as a “front door” for applications – from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;https://aws.amazon.com/api-gateway&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically this is the Service you use to create all of your API’s.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Click &lt;strong&gt;Create API&lt;/strong&gt; and name your api &lt;strong&gt;CodingTips&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Add a description if you like&lt;/li&gt;
  &lt;li&gt;Leave the &lt;strong&gt;Endpoint Type&lt;/strong&gt; to regional and &lt;strong&gt;Create API&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Create_API.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The API has been created.
Configure it by adding a resource.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Create Resource&lt;/strong&gt; and name it &lt;strong&gt;tips&lt;/strong&gt; with &lt;strong&gt;/tips&lt;/strong&gt; as &lt;strong&gt;Resource Path&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Enable CORS&lt;/strong&gt; to make your API accessible from anywhere&lt;/li&gt;
  &lt;li&gt;Hit &lt;strong&gt;Create Resource&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to configure the HTTP GET request.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select the &lt;strong&gt;/tips&lt;/strong&gt; endpoint&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; select &lt;strong&gt;Create Method&lt;/strong&gt; and select &lt;strong&gt;GET&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Integration type is &lt;strong&gt;Lambda Function&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;As &lt;strong&gt;Lambda Function&lt;/strong&gt; provide the name of the lambda.
In this case that is Codingtips_Scan.&lt;/li&gt;
  &lt;li&gt;Save the configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Configuration.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Only one thing left: select the API and under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Deploy API&lt;/strong&gt;. 
You will be asked to provide a name for the &lt;strong&gt;stage&lt;/strong&gt;. 
Name it &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Stages&lt;/strong&gt; tab click the &lt;strong&gt;GET&lt;/strong&gt; method and copy the &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Invoke_URL.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This is your gateway to trigger the lambda.
Since we just created a HTTP GET request you can use either your &lt;strong&gt;browser&lt;/strong&gt;, &lt;strong&gt;Curl&lt;/strong&gt; or &lt;strong&gt;Postman&lt;/strong&gt; to do this.
In a browser tab past the &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Invoke_Browser.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;From the command line with Curl execute this command with your own &lt;strong&gt;Invoke URL&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either of the above actions will return the items in the CodingTips table!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;, you just created your first serverless app!&lt;br /&gt;
&lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Party.png&quot; alt=&quot;party&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Did you know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;performing a scan on a DynamoDB table will return the items in a random order&lt;/li&gt;
  &lt;li&gt;you just joined the club of serverless application developers&lt;/li&gt;
  &lt;li&gt;you should be proud of yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;common-errors&quot;&gt;Common errors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Missing Authentication Token&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check the URL you are trying to invoke.
  Does it have the format ‘https://{domain}/{stage}/{method}’.
  &lt;strong&gt;Stage&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt; were set when creating the API Gateway.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Enable CORS&lt;/strong&gt; for your API Gateway&lt;/li&gt;
      &lt;li&gt;Made changes to the API Gateway? Make sure to redeploy the API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda Exceptions&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check CloudWatch for logs.
  Under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;strong&gt;CloudWatch&lt;/strong&gt;.
  In the &lt;strong&gt;Logs&lt;/strong&gt; tab access the &lt;strong&gt;Log Group&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/aws/lambda/CodingTips_Scan&lt;/code&gt; to view the logs of the Lambda.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trouble with &lt;strong&gt;API Gateway&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enable API Gateway logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lambda-write-to-dynamodb&quot;&gt;Lambda: Write to DynamoDB&lt;/h1&gt;
&lt;p&gt;Users should be able to &lt;strong&gt;POST&lt;/strong&gt; new items to the table.
This is possible when we create a &lt;strong&gt;Lambda Function&lt;/strong&gt; to &lt;strong&gt;write&lt;/strong&gt; to the database.&lt;/p&gt;

&lt;h2 id=&quot;create-write-lambda&quot;&gt;Create write-Lambda&lt;/h2&gt;
&lt;p&gt;In the AWS Console under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;Lambda&lt;/strong&gt;.
Click the &lt;strong&gt;Create Function&lt;/strong&gt; button to start creating a Lambda.
Choose &lt;strong&gt;Author from Scratch&lt;/strong&gt; and start configuring it with the following parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name: CodingTips_Write&lt;/li&gt;
  &lt;li&gt;Runtime: Node.js 8.10&lt;/li&gt;
  &lt;li&gt;Role: Choose an existing role&lt;/li&gt;
  &lt;li&gt;Existing role: lambda_dynamodb_codingtips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; the function.
The &lt;strong&gt;CodingTips_Write&lt;/strong&gt; Lambda Function already has access to &lt;strong&gt;CloudWatch&lt;/strong&gt; and &lt;strong&gt;DynamoDB&lt;/strong&gt;.
This is because we gave it the existing &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role that has policies which allow these access.
The designer view of the Lambda Function now looks like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Write-Designer_View-Connected_With_DynamoDB.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-code-1&quot;&gt;Function Code&lt;/h2&gt;
&lt;p&gt;Let’s add the code of this function!&lt;br /&gt;
In the configuration window of the lambda add the code in the &lt;strong&gt;Function code&lt;/strong&gt; block.
Enter the following code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'function starts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aws-sdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DynamoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eu-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processing event: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Tip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;MonthAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;YearAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;YearMonthAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

        &lt;span class=&quot;na&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CodingTips'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the Lambda Function to persist the changes.&lt;/p&gt;

&lt;p&gt;What happens in this Lambda Function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; parameter of the &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; function contains the data from the event that triggered the function.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; are used to configure the scan of the table.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; object contains the data that has to be put into the table.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; not only contains the &lt;strong&gt;Date&lt;/strong&gt; and &lt;strong&gt;Author&lt;/strong&gt;, but also other attributes like the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tip&lt;/code&gt; itself and &lt;code class=&quot;highlighter-rouge&quot;&gt;Category&lt;/code&gt;..
That’s allowed because it is a NoSQL database. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;MonthAtrribute&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YearAttribute&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YearMonthAttribute&lt;/code&gt; are added automatically.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docClient.put(params, function(err,data)&lt;/code&gt; executes the write and returns either the result or the error that occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-write-lambda-1&quot;&gt;Test write-Lambda&lt;/h2&gt;
&lt;p&gt;Configure a new test event called &lt;strong&gt;test&lt;/strong&gt; and add the following JSON attributes:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Don't hesitate to ask for help when you need it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;General&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save it and test the lambda by hitting the test button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution result: succeeded&lt;/strong&gt;? 
Go to the CodingTips table and you will see a new item that was added into your table.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Input_Item_Via_Write_Lambda.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;api-gateway-access-the-write-lambda&quot;&gt;API Gateway: Access the write Lambda&lt;/h1&gt;
&lt;p&gt;Again we need to expose our Lambda Function via an &lt;strong&gt;API Gateway&lt;/strong&gt; so that users can post messages to it.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;CodingTips&lt;/strong&gt; API that we created already for the GET Request.&lt;/li&gt;
  &lt;li&gt;You need to add a &lt;strong&gt;HTTP POST Method&lt;/strong&gt; to this API.
Under &lt;strong&gt;Resources&lt;/strong&gt; click &lt;code class=&quot;highlighter-rouge&quot;&gt;/tips&lt;/code&gt;, &lt;strong&gt;Actions&lt;/strong&gt;, &lt;strong&gt;Create Method&lt;/strong&gt; and select &lt;strong&gt;POST&lt;/strong&gt;.
The &lt;strong&gt;Integration Type&lt;/strong&gt; is Lambda Function.
The name of that Lambda function is &lt;strong&gt;CodingTips_Write&lt;/strong&gt;, which we just created.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-configuration.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Hit &lt;strong&gt;Save&lt;/strong&gt; to create the new method.&lt;/li&gt;
  &lt;li&gt;When AWS asks you, add the permission to the Lambda Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want to pass a JSON object to this API.
The API in turn has to pass on the JSON to the Lambda.
To enable this, click on &lt;strong&gt;Integration Request&lt;/strong&gt; and under Mapping Templates check &lt;strong&gt;When there are no templates defined (recommended)&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Method_Execution.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Add mapping template&lt;/strong&gt; with Content-Type &lt;strong&gt;application/json&lt;/strong&gt;.
Add this template and &lt;strong&gt;save&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.tip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.category'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Mapping_Template.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Deploy API&lt;/strong&gt;. 
You will be asked to provide a name for the &lt;strong&gt;stage&lt;/strong&gt;. 
Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; stage and &lt;strong&gt;Deploy&lt;/strong&gt;.
In the &lt;strong&gt;Stages&lt;/strong&gt; tab there is an &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Deployed.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This is your gateway to trigger the lambda.
Since we just created a HTTP POST request you can use either &lt;strong&gt;Curl&lt;/strong&gt; or &lt;strong&gt;Postman&lt;/strong&gt; to do this.
From the command line with Curl execute this command with your own &lt;strong&gt;Invoke URL&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;author&quot;: &quot;Nick&quot;,
    &quot;tip&quot;: &quot;Learn by doing&quot;,
    &quot;category&quot;: &quot;General&quot;
  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You just added a tip to the CodingTips table!
This can be checked by invoking the GET method of the API Gateway we designed in the beginning of this article.
Use your browser or curl to check the items in the table.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Check_Item_Is_Added_To_Table.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;common-errors-1&quot;&gt;Common errors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Missing Authentication Token&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check whether the &lt;strong&gt;Mapping Template&lt;/strong&gt; under the Integration Request of your API Gateway is correct&lt;/li&gt;
      &lt;li&gt;Check the URL you are trying to invoke.&lt;/li&gt;
      &lt;li&gt;Made changes to the API Gateway? Make sure to redeploy the API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda Exceptions&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check CloudWatch for logs.
  Under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;strong&gt;CloudWatch&lt;/strong&gt;.
  In the &lt;strong&gt;Logs&lt;/strong&gt; tab access the &lt;strong&gt;Log Group&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/aws/lambda/CodingTips_Write&lt;/code&gt; to view the logs of the Lambda.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trouble with &lt;strong&gt;API Gateway&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enable API Gateway logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-next&quot;&gt;What is next&lt;/h1&gt;
&lt;p&gt;Some suggestions to keep you busy:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Query DynamoDB instead of scanning&lt;/li&gt;
  &lt;li&gt;Create GSI (Global Secondary Index) to query and sort&lt;/li&gt;
  &lt;li&gt;Create a frontend that uses this serverless infrastructure as backend&lt;/li&gt;
  &lt;li&gt;Deploy this infrastructure with &lt;strong&gt;AWS Cloudformation&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Deploy using a Jenkins pipeline&lt;/li&gt;
  &lt;li&gt;Run locally with &lt;strong&gt;SAM Local&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;extra-resources&quot;&gt;Extra resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;AWS Lambda: &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Lambda Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS DynamoDB: &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS DynamoDB Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS API Gateway: &lt;a href=&quot;https://aws.amazon.com/api-gateway&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS IAM: &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS IAM Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS CloudWatch: &lt;a href=&quot;https://aws.amazon.com/cloudwatch/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Getting started with AWS CloudWatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using the DynamoDB docClient: &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/dynamodb-example-document-client.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS DocClient Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build this expertise by contributing to valuable projects. Spring, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API GateWay" /><category term="Serverless" /><summary type="html">Table of content Introduction Serverless: What &amp;amp; Why What we will build Prerequisites DynamoDB Lambda: scan DynamoDB API Gateway: Access the scan Lambda Lambda: Write to DynamoDB API Gateway: Access the write Lambda What is next? Extra resources</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-01-How-to-Build-a-Serverless-Application/AWS-Lambda-and-DynamoDB.png" /></entry><entry><title type="html">Automated E2E (End-to-End) testing on Android and iOS with Ionic, Protractor and Appium.</title><link href="https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing.html" rel="alternate" type="text/html" title="Automated E2E (End-to-End) testing on Android and iOS with Ionic, Protractor and Appium." /><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing</id><content type="html" xml:base="https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automated-testing&quot;&gt;Automated testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appium&quot;&gt;Appium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-appium&quot;&gt;Getting started with Appium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-the-e2e-testing-tools-in-your-ionic-project&quot;&gt;Configuring Protractor and the Ionic project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-and-writing-ui-tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-repository&quot;&gt;Example repository&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Many articles related to E2E testing Cordova/Ionic applications are about applications which only run in the browser.
But what if your application run’s on native mobile devices?&lt;/p&gt;

&lt;p&gt;This article will cover how to get started with E2E testing your Ionic application on native Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To follow along, I recommend having a basic understanding of Javascript, Typescript, Jasmine and automated testing in general.&lt;/p&gt;

&lt;h1 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h1&gt;

&lt;p&gt;When releasing an application, we need to make sure it was thoroughly tested.
Making sure of discovering any bugs before reaching production.
These tests or test scenarios can be done manually, but this would consume a lot of time and resources.
The more cost-effective solution would be to automatically run these test scenario’s entirely by a programmable agent.&lt;/p&gt;

&lt;p&gt;Thanks to a few technologies, we can script a bot that can perform most user interface interactions, 
such as clicking on a button, performing touch gestures (f.e. swiping), etc.&lt;/p&gt;

&lt;p&gt;The most popular solution for automated E2E tests is called Selenium which is based on the &lt;a href=&quot;https://w3c.github.io/webdriver/&quot;&gt;WebDriver protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While Selenium is a great solution for browsers, 
there is a better solution for native mobile apps called &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;appium&quot;&gt;Appium&lt;/h1&gt;

&lt;p&gt;Appium is a tool for automating mobile applications and writing cross-platform UI tests. 
It is very similar to Selenium. The difference is that Selenium is a tool for automating browsers and web applications, 
whereas Appium is a tool for automating Native / Hybrid mobile applications.&lt;/p&gt;

&lt;p&gt;Appium allows developers to write UI tests for mobile applications in any number of programming language (Javascript, Java, .NET, etc.), as it uses a superset of the Selenium WebDriver specification, called the MJSONWP protocol.&lt;/p&gt;

&lt;h2 id=&quot;cross-platform-ui-testing&quot;&gt;Cross-platform UI testing&lt;/h2&gt;

&lt;p&gt;Because we are using Ionic with Cordova, we can write our codebase using only web technologies but still build, 
deploy and run on multiple platforms.
Our mobile application can be packaged and deployed as a native application for both iOS and Android.
We can achieve the same cost-savings strategy “Write once, run anywhere” for our UI tests using Appium.
To automate our UI tests, there needs to be an agent that programmatically drives the UI of your mobile application.&lt;/p&gt;

&lt;p&gt;For each platform there are different agents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: XCUITest&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: UIAutomator, Selendroid, Espresso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Controlling these agents requires a developer to write platform-specific code.
Appium with MJSONWP (Webdriver spec) provides an abstraction layer to drive these agents programmatically in a platform agnostic way.&lt;/p&gt;

&lt;p&gt;We will explain how to set up your Appium server and run automated UI tests in your Ionic application on Android and iOS mobile devices.&lt;/p&gt;

&lt;h1 id=&quot;getting-started-with-appium&quot;&gt;Getting started with Appium&lt;/h1&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;The first step is to setup your environment.
Because we are targeting Android and iOS we will only describe the setup for &lt;strong&gt;macOS&lt;/strong&gt;, 
but it shouldn’t be too different compared to other platforms once you have followed the 
official ionic resources guide below, they have guides for all platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/docs/developer-resources/&quot;&gt;Again: On the developer resources page of the official ionic documentation&lt;/a&gt;, you wil find guides on how to setup your machine depending on the OS you are working on.&lt;/p&gt;

&lt;p&gt;Next:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://github.com/appium/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt; using npm.&lt;/li&gt;
  &lt;li&gt;Run appium-doctor –ios and fix any issues&lt;/li&gt;
  &lt;li&gt;Run appium-doctor –android and fix any issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;appium-server&quot;&gt;Appium server&lt;/h2&gt;

&lt;p&gt;There are multiple ways to start an Appium server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Appium Desktop&lt;/li&gt;
  &lt;li&gt;webdriver-manager&lt;/li&gt;
  &lt;li&gt;npm install -g appium &amp;amp;&amp;amp; npm run appium&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;appium-desktop&quot;&gt;Appium desktop&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Desktop&lt;/a&gt; is a graphical user interface for running an Appium server and starting sessions to inspect your applications.&lt;/p&gt;

&lt;p&gt;Note: For macOS make sure to drop the downloaded package in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications&lt;/code&gt; folder.
Otherwise you will encounter write permission issues.&lt;/p&gt;

&lt;p&gt;Appium desktop has two advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It comes with an inspector to show and inspect all elements of your application&lt;/li&gt;
  &lt;li&gt;Record user actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawback is inspecting and recording user actions only supports the Native context.
You cannot record actions for the Webview context.
Cordova applications always run in the webview context.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/web/hybrid/index.html&quot;&gt;https://appium.io/docs/en/writing-running-appium/web/hybrid/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;webdriver-manager&quot;&gt;webdriver-manager&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angular/webdriver-manager&quot;&gt;Selenium and appium server manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Webdriver-manager is officially supported by Angular and works well together with Protractor,
the official E2E testing framework for Angular applications.
Ionic up until version 3.x is built on top of Angular,
from version 4 and on Ionic has decoupled from the Angular framework and recreated all of their components using &lt;a href=&quot;https://stenciljs.com/&quot;&gt;StencilJS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;npm&quot;&gt;NPM&lt;/h3&gt;

&lt;p&gt;We will be using this package to start up our Appium server.&lt;/p&gt;

&lt;h2 id=&quot;language&quot;&gt;Language&lt;/h2&gt;

&lt;p&gt;Decide in which language you want to write your tests in.
You need to have a client library that can send MJSONWP / JSONWP HTTP Requests to the Appium server.&lt;/p&gt;

&lt;p&gt;For our application, we will write our tests in Typescript using Protractor since it has added support for Angular and type safety.&lt;/p&gt;

&lt;p&gt;Other webdriver javascript clients:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://webdriver.io/guide/getstarted/modes.html&lt;/li&gt;
  &lt;li&gt;https://github.com/admc/wd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.readthedocs.io/en/stable/en/writing-running-appium/other/appium-bindings/&quot;&gt;Client libraries for different languages&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We are going to use Ionic 4 and the &lt;strong&gt;super&lt;/strong&gt; template as our application to run our tests against.&lt;/p&gt;

&lt;p&gt;First, make sure your development machine has been set up correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/docs/developer-resources/&quot;&gt;On the developer resources page of the official ionic documentation&lt;/a&gt;,
you will find guides on how to set up your machine depending on the OS you are working on.&lt;/p&gt;

&lt;p&gt;Once your machine is set up, install the Ionic CLI.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; ionic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, generate the Ionic Cordova application using the Ionic CLI.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic start superApp super &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ionic-angular &lt;span class=&quot;nt&quot;&gt;--cordova&lt;/span&gt;
ionic cordova platform add android
ionic cordova platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test if you can build the application by entering the following commands&lt;/p&gt;

&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic cordova build android
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt;

&lt;p&gt;Note: You will have to open your ios project in xcode first 
to configure your code signing identity and provision profile.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic cordova build ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were able to run these commands successfully, 
we can start E2E testing our application on both iOS and Android.&lt;/p&gt;

&lt;p&gt;Before continuing, make a folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; in the root of your project.&lt;/p&gt;

&lt;h1 id=&quot;configure-the-e2e-testing-tools-in-your-ionic-project&quot;&gt;Configure the E2E testing tools in your Ionic project&lt;/h1&gt;

&lt;h2 id=&quot;appium-1&quot;&gt;Appium&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install Appium as a local dependency&lt;/li&gt;
  &lt;li&gt;Add the correct chrome driver&lt;/li&gt;
  &lt;li&gt;Create an NPM task in your package.json&lt;/li&gt;
  &lt;li&gt;Boot up the appium service&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-install-appium-as-a-local-dependency&quot;&gt;1. Install Appium as a local dependency&lt;/h3&gt;

&lt;p&gt;Just run the following command to add Appium as a local dependency, 
this will allow us to work with Appium using NPM scripts.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; appium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-add-the-correct-chrome-driver&quot;&gt;2. Add the correct chrome driver&lt;/h3&gt;

&lt;p&gt;To be able to run your tests on Android devices, 
you need to match the correct chrome driver with the Chrome version running on the Android test devices.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.readthedocs.io/en/stable/en/writing-running-appium/web/chromedriver/&quot;&gt;Here is an overview of all the chrome drivers and their respective Chrome versions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To download a chrome driver, go to the &lt;a href=&quot;http://chromedriver.chromium.org/downloads&quot;&gt;Chrome Driver Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have selected your chrome driver, download it and put in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3 id=&quot;3-create-an-npm-task-in-your-packagejson&quot;&gt;3. Create an NPM task in your package.json&lt;/h3&gt;

&lt;p&gt;Before running Appium, you can provide the downloaded chrome driver as a cli argument:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appium&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;appium --chromedriver-executable e2e/chromedriver&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-start-your-appium-server&quot;&gt;4. Start your Appium server&lt;/h3&gt;

&lt;p&gt;Now you should have everything configured correctly to start your Appium server.
Simply run:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run appium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;protractor&quot;&gt;Protractor&lt;/h2&gt;

&lt;p&gt;Protractor will be our test runner and testing framework.
&lt;a href=&quot;https://www.protractortest.org/#/&quot;&gt;Visit their website&lt;/a&gt; for more information on Protractor.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install protractor as a local NPM dependency&lt;/li&gt;
  &lt;li&gt;Configure typescript configs&lt;/li&gt;
  &lt;li&gt;Create your protractor config&lt;/li&gt;
  &lt;li&gt;Create NPM script for running your e2e tests&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-install-protractor-as-a-local-npm-dependency&quot;&gt;1. Install Protractor as a local NPM dependency&lt;/h3&gt;

&lt;p&gt;Install the test runner with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; protractor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-configure-typescript&quot;&gt;1. Configure Typescript&lt;/h3&gt;

&lt;p&gt;We require a few extra tools to be able run and write our tests in Typescript.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; ts-node @types/jasmine @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder, create a &lt;strong&gt;tsconfig.json&lt;/strong&gt; file with the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;declaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;moduleResolution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emitDecoratorMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;experimentalDecorators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2016&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;esnext.asynciterable&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;types&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jasmine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will be our tsconfig for our e2e test scripts.&lt;/p&gt;

&lt;p&gt;It’s also a good idea to write your configuration files in Typescript.
For our protractor configuration, we will use a different typescript configuration file.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e/protractor.tsconfig.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This configuration file will extend the one we created earlier, 
we want to overwrite the include and exclude parameters to make sure it only matches
and transpiles the &lt;strong&gt;&lt;em&gt;protractor.config.ts&lt;/em&gt;&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./tsconfig.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*.config.ts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exclude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-configure-protractor&quot;&gt;3. Configure protractor&lt;/h3&gt;

&lt;p&gt;Now one of the more exciting parts, configuring Protractor!
Create a file called &lt;strong&gt;/e2e/protractor.config.ts&lt;/strong&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'protractor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tsNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ts-node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://localhost:4723/wd/hub'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'**/*/*.e2e-spec.ts'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/ios/build/emulator/superApp.app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'11.4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iPhone X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My First Mobile Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;automationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'XCUITest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nativeWebTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Android'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pixel2xl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/android/build/outputs/apk/android-debug.apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-package'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'be.ryan.superApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-activity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MainActivity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoAcceptAlerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoGrantPermissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;newCommandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;allScriptsTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;multiCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jasmine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jasmineNodeOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;showColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaultTimeoutInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;seleniumAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onPrepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tsNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e2e/tsconfig.json'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get an idea of all the configuration parameters and their description, visit
&lt;a href=&quot;https://github.com/angular/protractor/blob/master/lib/config.ts&quot;&gt;The official Protractor Github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will go over the points that took me the most effort to configure correctly.&lt;/p&gt;

&lt;h3 id=&quot;capabilities&quot;&gt;Capabilities&lt;/h3&gt;

&lt;p&gt;Refers to the capabilities of a single E2E session, 
it describes which features a particular session should have, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Platform (Android / iOS / …)&lt;/li&gt;
  &lt;li&gt;Device Name&lt;/li&gt;
  &lt;li&gt;Automation framework&lt;/li&gt;
  &lt;li&gt;Location of the Application build (.apk, .ipa)&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to spin up multiple E2E testing settings, 
you need to configure the &lt;strong&gt;multiCapabilities&lt;/strong&gt; property.&lt;/p&gt;

&lt;h4 id=&quot;android-capability&quot;&gt;Android Capability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;strong&gt;&lt;em&gt;ionic cordova build android&lt;/em&gt;&lt;/strong&gt; and configure the output path in the &lt;strong&gt;app&lt;/strong&gt; property&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app-package&lt;/strong&gt; should match the package name in your config.xml&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app-activity&lt;/strong&gt; is always MainActivity by default unless you have changed this in your config.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Android'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pixel2xl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/android/build/outputs/apk/android-debug.apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-package'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'be.ryan.superApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-activity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MainActivity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoAcceptAlerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoGrantPermissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;newCommandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ios-capability&quot;&gt;iOS Capability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;strong&gt;&lt;em&gt;ionic cordova build ios&lt;/em&gt;&lt;/strong&gt; and configure the output path in the &lt;strong&gt;app&lt;/strong&gt; property&lt;/li&gt;
  &lt;li&gt;Point to the .app file and not the .ipa if you are using simulators.&lt;/li&gt;
  &lt;li&gt;Set automationName to &lt;strong&gt;XCUITest&lt;/strong&gt; instead of the deprecated &lt;strong&gt;UIAutomator&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;browserName is a mandatory parameter, but since we’re targeting Native apps, we can leave this as an empty string&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/ios/build/emulator/superApp.app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'11.4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iPhone X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My First Mobile Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;automationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'XCUITest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nativeWebTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-create-an-npm-script-for-running-e2e-tests&quot;&gt;4. Create an NPM script for running e2e tests&lt;/h3&gt;

&lt;p&gt;In your package.json, add the following task:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e2e&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tsc --p e2e/pro.tsconfig.json &amp;amp;&amp;amp; protractor e2e/protractor.config.js --verbose&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;running-and-writing-ui-tests&quot;&gt;Running and Writing UI tests&lt;/h1&gt;

&lt;p&gt;For Protractor to know which tests to run, you need to configure the 
&lt;strong&gt;specs&lt;/strong&gt; property, in our case all the files that end with .e2e-spec.ts&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'**/*/*.e2e-spec.ts'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you followed along, you should be able to run your tests by entering the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run e2e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing protractor tests is out of scope in this post, 
but here is an example test script that you should be able to run on both iOS and Android.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'protractor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tutorial Screen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should skip to the welcome screen and have the correct button labels'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'skip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;skipButtonLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skipButtonLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SKIP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'btn-login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loginBtnLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginBtnLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SIGN IN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are seven basic steps in creating an Appium test script.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the location of the application to test in the desired capabilities of the test script.&lt;/li&gt;
  &lt;li&gt;Create an Appium driver instance which points to a running Appium server&lt;/li&gt;
  &lt;li&gt;Locate an element within the mobile application.&lt;/li&gt;
  &lt;li&gt;Perform an action on the element.&lt;/li&gt;
  &lt;li&gt;Anticipate the application response to the action.&lt;/li&gt;
  &lt;li&gt;Run tests and record test results using a test framework.&lt;/li&gt;
  &lt;li&gt;Conclude the test.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;webview-and-native-context&quot;&gt;Webview And Native context&lt;/h2&gt;

&lt;p&gt;Our example application is a hybrid application.
Meaning it will be packaged and deployed as native app so we can access Native API’s.
But it will acually run inside a webview. By using Cordova our webview can communicate with Native API’s (f.e. Camera).&lt;/p&gt;

&lt;p&gt;When the Camera is launched, we enter a Native Context, 
if we exit the Camera and go back to our Hybrid application we return to the Webview Context.&lt;/p&gt;

&lt;p&gt;Appium helps us to easily switch between these contexts since locating and interacting with UI elements are very different in both contexts.&lt;/p&gt;

&lt;p&gt;For example, there are no DOM elements in the Native Context.
To locate a native UI element you need to use an Accessibility ID. At the same time, AccessibilityID’s are not available in a Webview context.&lt;/p&gt;

&lt;p&gt;TouchEvents like Tap / Swipe / Drag ‘n Drop are only supported in the Native context.
You can not use them in the Webview Context.&lt;/p&gt;

&lt;h2 id=&quot;behaviour-driven-development-with-cucumber&quot;&gt;Behaviour-driven development with Cucumber&lt;/h2&gt;

&lt;p&gt;Cucumber is a tool for BDD.
You can easily integrate Cucumber with Appium using &lt;a href=&quot;https://www.npmjs.com/package/protractor-cucumber-framework&quot;&gt;Protractor cucumber framework&lt;/a&gt; on NPM.&lt;/p&gt;

&lt;p&gt;A typical workflow looks like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Describe an app feature and corresponding scenarios in a .feature file. The contents are written in Gherkin

Feature: As an employee, I want to access the application

@Authentication
Scenario: Authenticate with AzureAD
Given I am on the Login page
When I click on &quot;Login&quot;
When I provide my credentials
When I click on the &quot;Submit&quot; button
Then I should see the Dashboard page

@Authentication Failed
Scenario: Authenticate with AzureAD fails
Given I am on the Login page
When I click on &quot;Login&quot;
When I provide incorrect credentials
When I click on the &quot;Submit&quot; button
Then I should see the Login failed page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Developers write an implementation for the feature in a step definitions file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I am on the Login page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I click on &quot;Login&quot;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{
&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;LoginPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I provide my credentials$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;WindowsAuthPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enterCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I click on the &quot;Submit&quot; button$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;WindowsAuthPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submitButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should see the Dashboard page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Dashboard'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let protractor and Appium run the step definitions in an Automated way.&lt;/p&gt;

&lt;p&gt;The advantage of using cucumber is that non-developers can easily write their own .feature files in plain English (Gherkin).&lt;/p&gt;

&lt;p&gt;This offers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better collaboration between Business &amp;amp; Developers&lt;/li&gt;
  &lt;li&gt;Feature files can act as contracts for acceptance criteria&lt;/li&gt;
  &lt;li&gt;Better reporting and readability of the UI tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cloud-testing-providers&quot;&gt;Cloud testing providers&lt;/h2&gt;

&lt;p&gt;The following providers offer great support for Appium tests in the cloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://saucelabs.com/&quot;&gt;Saucelabs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.testobject.com/&quot;&gt;TestObject&lt;/a&gt;, only real devices, has been purchased by Saucelabs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kobiton.com/&quot;&gt;Kobiton&lt;/a&gt;, only real devices, allows you to connect your local mobile device farm.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://experitest.com/&quot;&gt;Experitest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While investigating and hands-on experiencing Appium, 
I noticed the following trade-offs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests can be flaky (Simply rerunning a failing test can make it succeed)&lt;/li&gt;
  &lt;li&gt;Tests on iOS take a while to run&lt;/li&gt;
  &lt;li&gt;Appium is slower than for example running tests directly with Espresso or XCUITest&lt;/li&gt;
  &lt;li&gt;Documentation can be outdated and is scattered around the web&lt;/li&gt;
  &lt;li&gt;Setting up an environment for iOS and Android takes a lot of time initially&lt;/li&gt;
  &lt;li&gt;UI tests can differ for each platform&lt;/li&gt;
  &lt;li&gt;Sending key events can be very slow, which make the tests run very slow&lt;/li&gt;
  &lt;li&gt;You need a good knowledge of WebDriver API’s to write good tests&lt;/li&gt;
  &lt;li&gt;Debugging is hard, I mostly relied on console.log statements.&lt;/li&gt;
  &lt;li&gt;Testing on Android needs to happen with Chrome Browser version 54+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Android we are limited to recent Android API’s and devices with Chrome browser version 54+, 
this means we can not test older devices or devices with older Android versions.&lt;/p&gt;

&lt;p&gt;Setting up a local Appium server also takes a lot of setup and configuration, 
but this can be circumvented if you decide to go for a cloud testing provider like Saucelabs.&lt;/p&gt;

&lt;p&gt;Still, I believe Appium offers a lot of value because&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can write UI tests both for Android and iOS using a single programming language&lt;/li&gt;
  &lt;li&gt;You can automate manual testing for multiple platforms&lt;/li&gt;
  &lt;li&gt;There are quality cloud testing providers out there to help you with all your testing needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And once you have everything set up, it works quite well.&lt;/p&gt;

&lt;h1 id=&quot;example-repository&quot;&gt;Example repository&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryandegruyter/ordina-ionic-appium-protractor&quot;&gt;https://github.com/ryandegruyter/ordina-ionic-appium-protractor&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ryan&quot;, &quot;last_name&quot;=&gt;&quot;de Gruyter&quot;, &quot;github&quot;=&gt;&quot;ryandegruyter&quot;, &quot;linkedin&quot;=&gt;&quot;ryandg&quot;, &quot;permalink&quot;=&gt;&quot;/author/ryan-de-gruyter/&quot;, &quot;avatar&quot;=&gt;&quot;ryan-de-gruyter.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ryan.degruyter@ordina.be&quot;, &quot;phone&quot;=&gt;32479079468, &quot;bio&quot;=&gt;&quot;Ryan is a Software Engineer at Ordina Belgium. He is dedicated to writing clean code and building maintainable, user friendly web applications in Typescript. Ryan is also an Angular expert who enjoys giving beginner and advanced Angular courses. In his spare time, he practices martial arts and enjoys playing the guitar.&quot;}</name><email>ryan.degruyter@ordina.be</email></author><category term="Ionic" /><category term="ionic" /><category term="protractor" /><category term="appium" /><category term="angular" /><category term="typescript" /><category term="javascript" /><category term="jasmine" /><category term="testing" /><category term="E2E" /><category term="end-to-end" /><category term="android" /><category term="ios" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/ionic-protractor-appium.jpg" /></entry><entry><title type="html">3D Printing: An introduction</title><link href="https://ordina-jworks.github.io/iot/2018/09/28/3D-Printing-Intro.html" rel="alternate" type="text/html" title="3D Printing: An introduction" /><published>2018-09-28T00:00:00+00:00</published><updated>2018-09-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2018/09/28/3D-Printing-Intro</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2018/09/28/3D-Printing-Intro.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-3d-printing&quot;&gt;What is 3D printing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#types-of-3d-printing&quot;&gt;Types of 3D printing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-3d-printing&quot;&gt;Getting started with 3D printing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-future&quot;&gt;The future&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;3D printing is a term that has been hyped for a long time.
It’s a technology that is in essence not that new, but now more than ever is getting better and accessible to everyone.
Today we take a dive into the world of 3D printing and what it really has in store for us and the world in the coming years.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-glow.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-3d-printing&quot;&gt;What is 3D printing&lt;/h2&gt;

&lt;p&gt;Basically 3D printing can be described as: Producing 3D modeled objects by printing them with a 3D printer.
It offers a new way to do fast prototyping without the need to create very expensive molds or stencils.&lt;/p&gt;

&lt;p&gt;It has long been hyped to be the next big thing for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everyday use: recreating objects, replacing broken parts&lt;/li&gt;
  &lt;li&gt;Medical use: create patient specific casts or prostheses that fit better&lt;/li&gt;
  &lt;li&gt;Weapons: &lt;a href=&quot;https://www.bbc.com/news/technology-45018513&quot;&gt;In the news&lt;/a&gt;, 3D print a gun which can pass through metal detector, and is not registered with the authorities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although 3D printing has changed how prototyping works, a lot of misconceptions exist:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D printing is slow, very slow
    &lt;ul&gt;
      &lt;li&gt;Thus not usable to create batches of the same object&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Limited available materials (for hobby use)&lt;/li&gt;
  &lt;li&gt;3D printed parts are strong but not as strong as molded or cast parts (mainly for plastics)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;types-of-3d-printing&quot;&gt;Types of 3D printing&lt;/h2&gt;

&lt;p&gt;3D printing is not one technology, there are many different methods how a 3D print can be created.
Wherein the method the print is created varies depending on the technology used.&lt;/p&gt;

&lt;p&gt;Different technologies use different methods and materials, each with their distinct advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Some of these methods include (but are not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fused deposition modeling (FDM)&lt;/li&gt;
  &lt;li&gt;Stereolithography (SLA)&lt;/li&gt;
  &lt;li&gt;Digital Light Processing (DLP)&lt;/li&gt;
  &lt;li&gt;Masked Stereolithography (MSLA)&lt;/li&gt;
  &lt;li&gt;Direct Metal Laser Sintering (DMLS)&lt;/li&gt;
  &lt;li&gt;Selective laser melting (SLM)&lt;/li&gt;
  &lt;li&gt;Electronic Beam Melting (EBM)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below we will go into detail for some of the more used types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FDM&lt;/li&gt;
  &lt;li&gt;SLA, DLP &amp;amp; MSLA&lt;/li&gt;
  &lt;li&gt;SLS &amp;amp; SLM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;different-printing-methods&quot;&gt;Different printing methods&lt;/h3&gt;

&lt;h4 id=&quot;fdm-fused-deposition-modeling&quot;&gt;FDM: Fused Deposition Modeling&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/fdm.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;Fused Deposition Modeling&lt;/code&gt; the printed model is created by melting a compound (this being mostly PLA/ABS/PETG) and tracing the model layer by layer, each layer thickening the model as the printer deposits more material on the model.&lt;/p&gt;

&lt;p&gt;In the image above all the main pieces for an FDM printer are visible. 
The nozzle is moved on the Z-axis, and the build plate is moved on the X/Y-axes by stepper motors which control the movement up to one tenth or even one twentieth of a millimeter.
A spool of material is fed into the nozzle which melts it and deposits it onto the model by use of extrusion wheels/stepper motors.&lt;/p&gt;

&lt;p&gt;FDM printers are widely available both ready to use and as kits that require assembly, these are also the most affordable type of printers on the market.
You can always extends your printer and even print replacements for broken components.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2018-09-28-3D-Printing/fdm-print1.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Test 'benchy' stress test prints&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/fdm-print1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 35%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2018-09-28-3D-Printing/fdm-print2.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Owl test print, smoothed and non-smoothed&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/fdm-print2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 40%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;sla--dlp-stereolithography--digital-light-processing&quot;&gt;SLA &amp;amp; DLP: Stereolithography &amp;amp; Digital Light Processing&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-dlp.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These types of printers work by using either a laser or a projected image to cure a UV-reactive resin.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;Stereolithography&lt;/code&gt; a powerful UV laser traces the object layer by layer, like the FDM printer does, however it does not deposit material itself, rather it cures the resin in the tank at the point where the laser is.
Because SLA uses a laser that is moved by mirrors, it can have a very high resolution, the disadvantage is that it is as slow as an FDM printer since each layer needs to be traced.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;Digital Light Processing&lt;/code&gt; an UV projector is used, it projects an entire layer at once, this results in a lower printable resolution for the object, but yields a significant speed increase since an entire layer is printed at once, there is no need to trace the entire layer.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Masked SLA&lt;/code&gt; is a cheaper version of the DLP method where a LCD based photomask is used in front of an UV-LED array instead of an UV based projector.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-dlp-2.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-vs-dlp.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The images above show the distinct difference between these two (three) methods.
The SLA method has much better quality compared to the DLP or MSLA methods.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2018-09-28-3D-Printing/sla-print1.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Multiple eiffel towers printed at once with DLP/MSLA&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-print1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 35%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2018-09-28-3D-Printing/sla-print2.gif&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Vase print with SLA&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/sla-print2.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 42%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dmls--slm-direct-metal-laser-sintering--selective-laser-melting&quot;&gt;DMLS &amp;amp; SLM: Direct Metal Laser Sintering &amp;amp; Selective Laser Melting&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/dmls-slm.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Direct Metal Laser Sintering&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Selective Laser Melting&lt;/code&gt; are two of the more industrial methods of 3D printing. They are used, as the name suggests, to 3D print object in metal.
The main procedure for both methods is similar.
A moving arm pushes metal particles across the printing area, after which a powerful laser will trace the current layer of the object being printed.
This will fuse the particles together and is also where the biggest difference between the two methods exists.
Once the current layer is finished, the arm moves back and forth again, bringing in a new layer of metal particles.&lt;/p&gt;

&lt;p&gt;With DMLS the particles are sintered together but the metal itself has not melted completely, is hasn’t flowed.
When using SLM instead, the metal particles are actually fully molten and they fuse together much more firmly creating extremely though objects!&lt;/p&gt;

&lt;p&gt;Objects created with these methods are free of internal stresses and defects that are common and hard to prevent with other production methods.
The parts can also be printed as a whole rather than needing assembly of different parts, which further reduces the possibility for failures or errors during assembly.
This however comes at great cost, literally, since these methods are very expensive and require state of the art equipment!
Because of this high cost they are used in industries where the fault tolerance is very low, such as aerospace.&lt;/p&gt;

&lt;h3 id=&quot;different-printing-materials&quot;&gt;Different printing materials&lt;/h3&gt;

&lt;p&gt;As you might have noticed in the previous section different printing methods require different printing materials.
In the section below we’ll go more into detail about these materials.&lt;/p&gt;

&lt;h4 id=&quot;polymersplastics&quot;&gt;Polymers/plastics&lt;/h4&gt;

&lt;p&gt;FDM and DLP printers require polymer based materials.
These are plastics or plastic like materials that are easy to print.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PLA (PolyLactic Acid):&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Biologically degradable&lt;/li&gt;
  &lt;li&gt;Melting (printing) temperature: 170 ⇔ 230 °C&lt;/li&gt;
  &lt;li&gt;Can be used to print medical supplies&lt;/li&gt;
  &lt;li&gt;Many colors available + glow in the dark&lt;/li&gt;
  &lt;li&gt;Not UV stable&lt;/li&gt;
  &lt;li&gt;Cannot withstand high temperatures, do not leave it in the sun inside a car!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;ABS (Acrylonitrile Butadiene Styrene):&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not biologically degradable&lt;/li&gt;
  &lt;li&gt;Melting (printing) temperature: 220 ⇔ 260 °C&lt;/li&gt;
  &lt;li&gt;Many colors available + translucent&lt;/li&gt;
  &lt;li&gt;UV semi stable&lt;/li&gt;
  &lt;li&gt;Can withstand higher temperatures than PLA!&lt;/li&gt;
  &lt;li&gt;Harder to print than PLA and requires venting since the fumes are toxic!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PETG (PolyEthylene Terephthalate Glycol):&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not biologically degradable&lt;/li&gt;
  &lt;li&gt;Combines best of PLA and ABS&lt;/li&gt;
  &lt;li&gt;Melting (printing) temperature: 220 ⇔ 250 °C&lt;/li&gt;
  &lt;li&gt;Many colors available + translucent&lt;/li&gt;
  &lt;li&gt;UV semi stable&lt;/li&gt;
  &lt;li&gt;Can withstand higher temperatures than PLA!&lt;/li&gt;
  &lt;li&gt;No toxic fumes, odorless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three materials are commonly used in FDM printers. 
The most and safest to use is PLA, which is fully bio degradable (over a long long time), it also is the easiest material to print with.
ABS is stronger but not biodegradable and produces toxic fumes when printing, it also requires very precise cooling during printing or the print will warp and the layer will detach, ruining the print.
PETG is the best of both worlds, it is stronger than PLA and does not produce toxic fumes.
There are a lot more materials available, oftentimes with very specific properties to make it act more like rubber, be more flexible, glow in the dark,…
All these different materials require different print settings and some can be quite hard to get right, experimentation is key!
Some materials also exist that can be used in a medical context, these are however not printed with the average FDM printer since they need to match very high standards for medical use for both internal and external use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DLP materials:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Liquid polymer that undergoes photopolymerization, meaning it is cured/hardened by exposure to UV light.&lt;/li&gt;
  &lt;li&gt;Many different types of resin are available
    &lt;ul&gt;
      &lt;li&gt;Biodegradable ⇔ Non biodegradable&lt;/li&gt;
      &lt;li&gt;Flexible ⇔ Sturdy&lt;/li&gt;
      &lt;li&gt;Polymer ⇔ Ceramic&lt;/li&gt;
      &lt;li&gt;Low temp ⇔ High temp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There are also resins available that cure with regular “daylight” and do not require special UV lights to cure the printed object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;metal&quot;&gt;Metal&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/3D-print-metal.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the moment metal printing is not for the mere mortal, however larger companies/industries are already using 3D printers capable of printing metal.
Not all methods can print all metal materials, some like SLM are limited in the metals it can ‘print’.&lt;/p&gt;

&lt;p&gt;Most printed metals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Titanium&lt;/li&gt;
  &lt;li&gt;Aluminium&lt;/li&gt;
  &lt;li&gt;Cobalt chrome&lt;/li&gt;
  &lt;li&gt;Gold&lt;/li&gt;
  &lt;li&gt;Silver&lt;/li&gt;
  &lt;li&gt;Copper&lt;/li&gt;
  &lt;li&gt;Bras (alloy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aerospace industries nowadays print both external and internal parts of rockets and their engines, these objects are stronger and have less internal defects and stresses.
The medical industry can also print patient specific prostheses in titanium allowing for better patient recovery after injuries.&lt;/p&gt;

&lt;h4 id=&quot;concreteconstruction&quot;&gt;Concrete/construction&lt;/h4&gt;

&lt;p&gt;In more recent years concrete printing has caught some attention and people are experimenting with it.
It has some nice advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow cheaper construction of small buildings&lt;/li&gt;
  &lt;li&gt;Faster construction&lt;/li&gt;
  &lt;li&gt;Small area mini homes for the developing world -or- after natural disasters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The video below shows a working concept of a small 3D printed ‘home’, it is constructed in place and can be finished in very little time.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/GUdnrtnjT5Q&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;food&quot;&gt;FOOD&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/3D-print-food.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Food printing has been a hype for a long time.
Culinary experts have been experimenting with the concept, but also companies like NASA for astronauts.&lt;/p&gt;

&lt;p&gt;Simple items like chocolate and dough can already be 3D printed, based on the FDM method, the edible object is printed layer by layer.
There are ‘robots’ that can print more complex items, but these are not actual 3D printers and more automated assembly machines, the boundary between 3D printing and assembly can become a bit blurry.
At this point in time it is not yet possible to print entire meals from raw base ingredients.
This will no doubt be developed further as time progresses.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-3d-printing&quot;&gt;Getting started with 3D printing&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/3D-print-fail.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Getting started with 3D printing is not easy, it can be very daunting.
There are a lot of things you need to take into account&lt;/p&gt;

&lt;p&gt;Since it is still relatively expensive, you want to ask yourself these questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What type of 3D printing do I want?&lt;/li&gt;
  &lt;li&gt;What is the best (price/quality) printer available?&lt;/li&gt;
  &lt;li&gt;Will I use it enough to justify the purchase?&lt;/li&gt;
  &lt;li&gt;You could also just order a printed model online!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting things right is hard:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Printer calibration&lt;/li&gt;
  &lt;li&gt;Model slicing &amp;amp; print settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⇒ 3D printing remains an intensive trial and error process!
Only begin if you are willing to invest the necessary time into it.
If at first you don’t succeed, try again and again and again and again!&lt;/p&gt;

&lt;p&gt;Thankfully the online hobby community is very large and generally very helpful.
You will need to model your object or download it from a ‘makers’ website.
You will need to slice your model with settings for your specific printer, and adjust these settings based on the quality and speed you want.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Online resources:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Youtube channels:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/TheMakersMuse&quot;&gt;Maker’s Muse&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC_7aK9PpYTqt08ERh1MewlQ&quot;&gt;3D Printing Nerd&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCVc6AHfGw9b2zOE_ZGfmsnw&quot;&gt;Make Anything&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Forums:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.3dhubs.com/&quot;&gt;3D Hubs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/3Dprinting/&quot;&gt;Reddit 3D printing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;These YouTube channels and forums are an invaluable resource when getting into 3D printing, they contain loads of information, do’s and don’ts.
By watching videos and reading articles you can prevent mistakes gaining insights faster in how 3D printing works and what is possible.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Maker websites:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thingiverse.com/&quot;&gt;Thingiverse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tinkercad.com/#/&quot;&gt;Tinkercad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.myminifactory.com/&quot;&gt;MyMiniFactory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These websites provide vast libraries of models and some even offer an online modeling tool.
Before diving deep into your modeling software check if someone else had the same idea and created the object you want.
⇒ good artists copy, great artists steal - Picasso&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modeling software:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modeling software:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/3ds-max/overview&quot;&gt;3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/maya/overview&quot;&gt;Maya&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.blender.org/&quot;&gt;Blender&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CAD software:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.autodesk.com/products/fusion-360/overview&quot;&gt;Fusion 360&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/autocad/overview&quot;&gt;Autocad&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/inventor/overview&quot;&gt;Inventor&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These software suites let you create and export models.
All of these programs are easy to pickup (except for the CAD software) but are extremely hard to master!
There are also many alternatives available, but these are the most common ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Slicing software:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ultimaker.com/en/products/ultimaker-cura-software&quot;&gt;Ultimaker Cura&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slic3r.org/&quot;&gt;Slic3r&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.simplify3d.com/&quot;&gt;Simplify 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These software suites let you convert your 3D models into &lt;code class=&quot;highlighter-rouge&quot;&gt;GCODE&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;GCODE&lt;/code&gt; is the ‘language’ that 3D printers use to print an object.
It contains a set of instructions for stepper motors, extruders, fans and other peripherals that make up a 3D printer.
This code is generated from the 3D model and is layer based hence the name ‘slicer’, since it slices the model into layers and translates this to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCODE&lt;/code&gt; required to print.
The slicer software also takes into account overhangs and infill.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Overhangs&lt;/em&gt; are parts of the object that have no support beneath them, they float, but since material cannot just float in midair supports are generated that are removed (by the user) when the print is finished.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Infill&lt;/em&gt; is a way to speed up printing, the inside of and object would normally be 100% filled with material, this is slow and uses a lot of print material.
By setting the infill percentage a structure is generated inside sealed of parts of the model that contains a lot less material while maintaining most of its strength.
By playing with this setting a lot of time can be saved!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-09-28-3D-Printing/jworks-sliced.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;The future is now!&lt;/p&gt;

&lt;p&gt;3D printers are advancing at an extremely rapid pace, new printer models arrive on the market almost weekly.
Chinese firms are producing very high quality printers and production quality is going up.&lt;/p&gt;

&lt;p&gt;The future will bring a lot more:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better printers&lt;/li&gt;
  &lt;li&gt;Finer resolution&lt;/li&gt;
  &lt;li&gt;Lower cost&lt;/li&gt;
  &lt;li&gt;Lower maintenance&lt;/li&gt;
  &lt;li&gt;More and more versatile materials&lt;/li&gt;
  &lt;li&gt;A 3D printer in every home?&lt;/li&gt;
  &lt;li&gt;Repair stuff yourself ⇔ Throw away stuff that is broken, built to break…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Getting into 3D printing requires a lot of research, A LOT!
Since the technology is advancing so fast I have not listed any specific printers, they are reviewed on youtube and forums where experienced members of the community test them and give their verdict on them.&lt;/p&gt;

&lt;p&gt;Printing methods &amp;amp; materials:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://theorthocosmos.com/laser-sla-vs-dlp-vs-masked-sla-3d-printing-technology-compared/&quot;&gt;SLA vs DLP vs MSLA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.element.com/nucleus/2016/06/29/dmls-vs-slm-3d-printing-for-metal-manufacturing&quot;&gt;DMLS vs SLM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.materialise.com/en/3d-printing-materials/plastics&quot;&gt;Types of FDM polymers/plastics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.materialise.com/blog/en/3d-printed-resin-overview/&quot;&gt;Types of DLP resins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Online resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/TheMakersMuse&quot;&gt;Maker’s Muse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC_7aK9PpYTqt08ERh1MewlQ&quot;&gt;3D Printing Nerd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCVc6AHfGw9b2zOE_ZGfmsnw&quot;&gt;Make Anything&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.3dhubs.com/&quot;&gt;3D Hubs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/3Dprinting/&quot;&gt;Reddit 3D printing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maker hubs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thingiverse.com/&quot;&gt;Thingiverse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tinkercad.com/#/&quot;&gt;Tinkercad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.myminifactory.com/&quot;&gt;MyMiniFactory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modeling software:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/3ds-max/overview&quot;&gt;3DS Max&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/maya/overview&quot;&gt;Maya&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blender.org/&quot;&gt;Blender&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.autodesk.com/products/fusion-360/overview&quot;&gt;Fusion 360&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/autocad/overview&quot;&gt;Autocad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.autodesk.be/nl/products/inventor/overview&quot;&gt;Inventor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slicers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ultimaker.com/en/products/ultimaker-cura-software&quot;&gt;Ultimaker Cura&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slic3r.org/&quot;&gt;Slic3r&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.simplify3d.com/&quot;&gt;Simplify 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his roll as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="3D printing" /><category term="printing" /><category term="building" /><category term="technology" /><category term="iot" /><category term="internet of things" /><category term="SLA" /><category term="DLP" /><category term="FDM" /><category term="SLS" /><category term="PLA" /><category term="ABS" /><category term="PETG" /><category term="printer" /><category term="sintering" /><category term="melting" /><category term="construction" /><category term="tinkering" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-09-28-3D-Printing/banner.jpg" /></entry><entry><title type="html">SpringOne Platform - Fun With The Functional Web Framework</title><link href="https://ordina-jworks.github.io/spring/2018/09/28/SpringOne-fun-with-the-functional-web-framework.html" rel="alternate" type="text/html" title="SpringOne Platform - Fun With The Functional Web Framework" /><published>2018-09-28T00:00:00+00:00</published><updated>2018-09-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2018/09/28/SpringOne-fun-with-the-functional-web-framework</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2018/09/28/SpringOne-fun-with-the-functional-web-framework.html">&lt;h1 id=&quot;fun-with-the-functional-web-framework&quot;&gt;Fun with the Functional Web Framework&lt;/h1&gt;

&lt;h3 id=&quot;by-arjen-poutsma&quot;&gt;by &lt;a href=&quot;https://twitter.com/poutsma&quot; target=&quot;_blank&quot;&gt;Arjen Poutsma&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This talk is a follow-up of a talk that Arjen Poutsma has been giving a few years now, called ‘New in Spring 5: Functional Web Framework’. 
In his new talk he goes more in depth in some of the features that are offered by the framework.&lt;/p&gt;

&lt;h1 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;The Spring functional web framework (called WebFlux.fn) is an alternative to the annotational style web framework, Web MVC.
It was introduced in Spring 5.0 and for spring 5.1 they did some refinements in the API after feedback from developers.&lt;/p&gt;

&lt;h1 id=&quot;design-goals&quot;&gt;Design goals&lt;/h1&gt;

&lt;p&gt;The WebFlux.fn framework had three main goals.&lt;/p&gt;

&lt;p&gt;The first one was to create a web framework with a functional style.
By this they mean that they wanted to leverage the new functional concepts introduced in Java 8, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second goal was to make the framework fully reactive by using the functionality from &lt;a href=&quot;https://projectreactor.io&quot; target=&quot;_blank&quot;&gt;Reactor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The third goal was to act more like a library and less like a framework.
The reason for this is that many people don’t like the “automagic” things the Web MVC (annotational style) framework does.
Web MVC does a lot of things behind the scenes that you as a client of the framework don’t know about, unless you read up on how the framework works internally.
So acting more like a library instead of a framework means that a lot of things will be more explicit, so you as a client of the library will see more clearly what is going to happen.&lt;/p&gt;

&lt;p&gt;A fourth goal, that was more a side effect than intention, is that there is no more reflection in WebFlux.fn.
By not using annotations anymore to map HTTP requests to controller methods, there is no more reflection.
This has the great effect that your application will take less time to start up because Spring has to do less classpath scanning.
This is also useful for when you want to use GraalVM.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;There are three main concepts in the WebFlux.fn framework:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFilterFunction&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll discuss these in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;the-handlerfunction&quot;&gt;The HandlerFunction&lt;/h3&gt;
&lt;p&gt;Is a function that maps a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&amp;lt;ServerResponse&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;petRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;switchIfEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see in this example that there are some differences with a Web MVC controller method.&lt;/p&gt;

&lt;p&gt;A big difference is that we can only get a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; as a parameter. 
So if we want a path variable, body or anything else from the HTTP request, we have to get it from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; variable.
Spring does not inject this information as method parameters in WebFlux.fn.&lt;/p&gt;

&lt;p&gt;The second difference is that the object we return has to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&amp;lt;ServerResponse&amp;gt;&lt;/code&gt;.
In Web MVC the return type could be a lot of different things like any type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseEntity&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&quot;the-routerfunction&quot;&gt;The RouterFunction&lt;/h3&gt;
&lt;p&gt;Is a function that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt; using a &lt;code class=&quot;highlighter-rouge&quot;&gt;RequestPredicate&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routerFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pets/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXT_HTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXT_HTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderPets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pets/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showPets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The order in which you define these router functions matters.
The first router function’s  handler that matches your HTTP request will be the one that is executed.
This makes it a lot clearer when you read the router functions to know which one will be executed, it’s the first one that you define and matches.&lt;/p&gt;

&lt;p&gt;An advantage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction&lt;/code&gt; over the annotational style is that you can map multiple endpoints to the same &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt;.
This is not possible in Web MVC because you can only put one @RequestMapping on a controller method.
In the WebFlux.fn framework however, you can refer to one &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt; in as many &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction&lt;/code&gt; matchers as you want.&lt;/p&gt;

&lt;h4 id=&quot;improvements-in-the-routerfunction-spring-framework-51&quot;&gt;Improvements in the RouterFunction spring framework 5.1:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;A router DSL with less static imports:
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;//5.0 version&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//5.1 version&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;And a new pattern matcher to resolve which &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt; to call, which is a lot faster than the previous one.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;requestpredicates&quot;&gt;RequestPredicates&lt;/h4&gt;
&lt;p&gt;Is a function that maps a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is used to match your &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt; to a HTTP request.
Spring provides a lot of default predicates for paths, accept headers, etc.
But you can also create your own very easily, with lambdas, methods, or classes.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// method&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathEndsWithJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathEndsWithJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// class&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathEndsWithJsonPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PathEndsWithJsonPredicate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;nested-routerfunction&quot;&gt;nested RouterFunction&lt;/h4&gt;
&lt;p&gt;Similar to the class level &lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;, but a lot more powerful.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;petsRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetJsonHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petJsonHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PetHtmlHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petHtmlHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXT_HTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHtmlHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petHtmlHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderPets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petJsonHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;petJsonHandler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showPets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can choose on what you nest, depending on the needs of your software.&lt;/p&gt;

&lt;p&gt;In WebFlux.fn you can couple HTTP requests for the same path, but different accept headers to different classes, as in the example above.
Here you only define your path once which means no duplication, and it’s easier to change the path to for example &lt;code class=&quot;highlighter-rouge&quot;&gt;/animals&lt;/code&gt;, because there is only one place where you have to change it.&lt;/p&gt;

&lt;p&gt;In Web MVC it would look like this.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/pets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PetJsonController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/pets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_HTML_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PetHtmlController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-handlerfilterfunction&quot;&gt;The HandlerFilterFunction&lt;/h3&gt;
&lt;p&gt;Is a function that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFunction&lt;/code&gt; and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerResponse&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PetHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OwnerHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownerHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petsRouter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petsRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;petHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownerRouter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownerRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ownerHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petsRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ownerRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performanceLogging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performanceLogging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Processing request {} took {} ms &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFilterFunction&lt;/code&gt; is more flexible than Servlet filters because you can put a &lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerFilterFunction&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction&lt;/code&gt;.
This means that you can apply this filter to a subset of your routes instead of on all routes.&lt;/p&gt;

&lt;p&gt;It can be used for example for security, logging, timing, etc.&lt;/p&gt;

&lt;h3 id=&quot;future-evolutions&quot;&gt;Future evolutions&lt;/h3&gt;

&lt;p&gt;Currently the functional web framework does not work with Servlets but only with Spring’s self made &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerResponse&lt;/code&gt;.
They are however looking at creating a functional web framework that works with Servlets and without Reactor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The functional web framework is a lot better&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;in what properties of the HTTP request you can match on to choose a controller function.&lt;/li&gt;
  &lt;li&gt;in reducing duplication of your matching logic&lt;/li&gt;
  &lt;li&gt;in providing a clean way to separate controller logic and routing logic&lt;/li&gt;
  &lt;li&gt;in explicitness of routing so you can easily see how your HTTP request will be bound to a controller method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a very good alternative to the more common annotational style web framework Web MVC. 
The advantages mentioned definitely make it worth trying it out for yourself!&lt;/p&gt;

&lt;p&gt;#References&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poutsma/fun-with-functional&quot; target=&quot;_blank&quot;&gt;Code from the talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Van Hees&quot;, &quot;github&quot;=&gt;&quot;pvanhees&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-van-hees-73671133&quot;, &quot;permalink&quot;=&gt;&quot;/author/wout-meskens/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-van-hees.jpg&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vanhees@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Van Hees is a Java Software Engineer at Ordina Belgium. He is passionate about Domain Driven Design and producing clean software that works.&quot;}</name><email>pieter.vanhees@ordina.be</email></author><category term="Spring" /><category term="Spring One" /><category term="Pivotal" /><category term="Functional Programming" /><category term="Functional Web Framework" /><category term="Spring" /><category term="WebFlux.fn" /><category term="Web MVC" /><summary type="html">Fun with the Functional Web Framework</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-09-27-SpringOne-Platform/post-image.jpg" /></entry><entry><title type="html">SpringOne Platform - A birds-eye view</title><link href="https://ordina-jworks.github.io/spring/2018/09/27/SpringOne-Platform.html" rel="alternate" type="text/html" title="SpringOne Platform - A birds-eye view" /><published>2018-09-27T00:00:00+00:00</published><updated>2018-09-27T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2018/09/27/SpringOne-Platform</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2018/09/27/SpringOne-Platform.html">&lt;p&gt;This year we went again to SpringOne Platform to check out the latest changes and what’s to come.
In this post I’ll try to give an overview of everything that’s just been released or coming in the future.
Because there were A LOT of sessions, I wasn’t able to gather or note down everything.
All sessions except for the workshops were recorded and I’ll update this post to get you directed straight to the videos on YouTube when they come online!&lt;/p&gt;

&lt;h2 id=&quot;announcements&quot;&gt;Announcements&lt;/h2&gt;

&lt;p&gt;I listed some of the major announcements that were made during SpringOne.
You can find a link to the corresponding video at the end of each topic.&lt;/p&gt;

&lt;h3 id=&quot;aws-service-broker-for-pcf-open-beta&quot;&gt;AWS Service broker for PCF, open beta&lt;/h3&gt;

&lt;p&gt;Amazon will bring the AWS Service Broker to PCF, making it easier for you to connect your applications to its service catalog of over 18 services.&lt;/p&gt;

&lt;p&gt;Watch the talk &lt;a href=&quot;https://www.youtube.com/watch?v=1ezNJvajUU0&amp;amp;feature=youtu.be&amp;amp;t=8m42s&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pivotal-function-service&quot;&gt;Pivotal Function Service&lt;/h3&gt;

&lt;p&gt;Next to PAS (Pivotal Application Service) and PKS (Pivotal Container Service), Pivotal will expand PCF with PFS (Pivotal Function Service) which will be build on top of Knative.
Pivotal Greenplum, which is its “Postgres for Petabytes”, will also be coming to PCF in the near future so that the same easy-to-use experience that developers nowadays already have with the platform will be extended to the data scientists and data engineers.&lt;/p&gt;

&lt;p&gt;Watch the talk &lt;a href=&quot;https://www.youtube.com/watch?v=1ezNJvajUU0&amp;amp;feature=youtu.be&amp;amp;t=9m34s&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;first-timers-only-issues&quot;&gt;First-timers-only issues&lt;/h3&gt;

&lt;p&gt;Because it can be daunting for people to enter a community they are creating “first-timers-only” issues on the Spring Boot project, making it easier for newcomers to get connected.
While working on these issues developers of the Spring Boot project will come alongside you to teach you to contribute back, help you and coach you.
This way you will get to become part of the Spring community.&lt;/p&gt;

&lt;p&gt;Watch the talk &lt;a href=&quot;https://www.youtube.com/watch?v=1ezNJvajUU0&amp;amp;feature=youtu.be&amp;amp;t=10m39s&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pivotal-tracker-maestro&quot;&gt;Pivotal Tracker: Maestro&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What happens when your organization scales, and you end up with lots of fast-moving developers?
It’s really, really easy to get misaligned.
And when you get misaligned, it’s really easy to ship the wrong thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s why Pivotal has built a tool to help teams articulate and align around business outcomes to give organizations the high-level view so they can assure that everyone is aligned and delivering value.&lt;/p&gt;

&lt;p&gt;Watch the talk &lt;a href=&quot;https://www.youtube.com/watch?v=1ezNJvajUU0&amp;amp;feature=youtu.be&amp;amp;t=11m43s&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pivotal-act&quot;&gt;Pivotal Act&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Pivotal Act is a program that partners with humanitarian organizations and charities to identify, design, and develop practical solutions to pressing challenges around the world.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Together with developers, designers, and engineers from Pivotal Labs, Pivotal is going to apply the same methodology they use in other engagements with clients but tailored to the needs of the humanitarian and social impact sectors instead of just donating technology or funds.
This way charitable and nonprofit organisations can use the present-day technologies and put them directly to use through the partnership with Pivotal, while building up the organisation’s technology capabilities so they can continue their work after the engagement ends.&lt;/p&gt;

&lt;p&gt;If you want to find out more, just visit &lt;a href=&quot;https://pivotal.io/act&quot; target=&quot;_blank&quot;&gt;https://pivotal.io/act&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can watch the announcement &lt;a href=&quot;https://pivotal.io/act&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;r2dbc&quot;&gt;R2DBC&lt;/h3&gt;

&lt;p&gt;When using the reactive model, people were limited to NoSQL databases because those were the only ones that had a driver which supports things like streams and backpressure.
During the keynote Oliver Gierke announced the R2DBC project.
This project currently consists out of a client, an SPI and a PostgreSQL implementation to bring the reactive capabilities to SQL databases.
It also has an adapter to support the OpenJDK incubator project “ADBA”, a non-blocking database access API that Oracle is proposing as a Java standard.&lt;/p&gt;

&lt;h3 id=&quot;rsocket&quot;&gt;RSocket&lt;/h3&gt;

&lt;p&gt;On stage Stéphane Maldini announced the RSocket project.
RSocket, built by Facebook, Netifi and Pivotal, is a binary application protocol that provides reactive streams semantics.
This protocol is payload, transport AND language agnostic making it easy to send eg. JSON or protobuf payloads over TCP, UDP, WebSockets or HTTP/2 using Java, Kotlin, C++, JavaScript,…
Using this protocol we can eg. easily resume our stream of events where we left off in case the connection got interrupted.&lt;/p&gt;

&lt;p&gt;To get more in-depth knowledge of the reasoning behind the protocol visit &lt;a href=&quot;https://rsocket.io/&quot; target=&quot;_blank&quot;&gt;https://rsocket.io/&lt;/a&gt; and look up the document that explains the motivation in detail.&lt;/p&gt;

&lt;h3 id=&quot;spring-cloud-azure&quot;&gt;Spring Cloud Azure&lt;/h3&gt;

&lt;p&gt;To quickly integrate with Azure services, Microsoft has already created a couple of starters to easily connect to eg. Azure Active Directory or Azure Key Vault.
Not all starters can be found on &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot;&gt;start.spring.io&lt;/a&gt;, to get a complete overview of all their starters and modules visit their &lt;a href=&quot;https://github.com/Microsoft/spring-cloud-azure&quot; target=&quot;_blank&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Watch the talk &lt;a href=&quot;https://www.youtube.com/watch?v=P9ahKTFPx-A&amp;amp;feature=youtu.be&amp;amp;t=9m23s&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cloud-native-buildpacks&quot;&gt;Cloud Native Buildpacks&lt;/h3&gt;

&lt;p&gt;Cloud Native Buildpacks is a new effort initiated by Pivotal and Heroku which aims to unify the buildpack ecosystems with a platform-to-buildpack contract.
They embrace modern container standards, such as the OCI image format and take advantage of the latest capabilities of these standards.
This way buildpacks can be used cross-platform.&lt;/p&gt;

&lt;p&gt;You can watch the announcement &lt;a href=&quot;https://www.youtube.com/watch?v=wU5n7Sv8JL8&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;releases&quot;&gt;Releases&lt;/h2&gt;

&lt;h3 id=&quot;spring-framework-51&quot;&gt;Spring Framework 5.1&lt;/h3&gt;

&lt;p&gt;The highlights of this release are the support for JDK 11, initial refinements for GraalVM compatibility and Reactor &amp;amp; Hibernate got an upgrade to respectively Californium and 5.3.
Improved startup times and less heap memory consumption are also some benefits you get when upgrading to this release.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; by Juergen Hoeller to find out more!&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-210m4&quot;&gt;Spring Boot 2.1.0.M4&lt;/h3&gt;

&lt;p&gt;The fourth milestone of Spring Boot 2.1 got released to incorporate the 5.1 release of the Spring framework and closes over 40 issues and pull requests.&lt;/p&gt;

&lt;p&gt;Madhura Bhave wrote &lt;a href=&quot;https://spring.io/blog/2018/09/25/spring-boot-2-1-m4-available-now&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; announcing the milestone release and added some useful links to the release notes and updated reference documentation.
Make sure to check them out!&lt;/p&gt;

&lt;h3 id=&quot;spring-batch-410rc1&quot;&gt;Spring Batch 4.1.0.RC1&lt;/h3&gt;

&lt;p&gt;Mahmoud Ben Hassine &lt;a href=&quot;https://spring.io/blog/2018/09/26/spring-batch-4-1-0-rc1-is-now-available&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; yesterday the first release candidate of 4.1.0.
This release was mainly focused on running Spring Batch correctly on Java 8, 9, 10 and 11.
Their plan is to release this version by the end of October so it can be shipped with Spring Boot 2.1.&lt;/p&gt;

&lt;h3 id=&quot;spring-data-lovelace&quot;&gt;Spring Data Lovelace&lt;/h3&gt;

&lt;p&gt;With the release of Spring Framework 5.1 comes a new release of Spring Data.
This release notable topics are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for immutable objects&lt;/li&gt;
  &lt;li&gt;Deferred JPA repository initialization&lt;/li&gt;
  &lt;li&gt;Support for MongoDB 4.0 Client Sessions and Transactions&lt;/li&gt;
  &lt;li&gt;New Spring Data JDBC module&lt;/li&gt;
  &lt;li&gt;Apache Cassandra mapping improvements for Map and tuple types, Lifecycle Callbacks, and Kotlin Extensions&lt;/li&gt;
  &lt;li&gt;Replica Reads with Spring Data Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see what else has changed, check out &lt;a href=&quot;https://spring.io/blog/2018/09/21/spring-data-lovelace-ga-released&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; by Mark Paluch.&lt;/p&gt;

&lt;h3 id=&quot;spring-security-51&quot;&gt;Spring Security 5.1&lt;/h3&gt;

&lt;p&gt;In this new release a lot has been added regarding WebFlux support: OAuth 2, CORS and HTTPS redirection  are just a few to sum up.
More than &lt;a href=&quot;https://github.com/spring-projects/spring-security/milestone/107?closed=1&quot; target=&quot;_blank&quot;&gt;50 issues&lt;/a&gt; have been resolved too!&lt;/p&gt;

&lt;p&gt;To see what else has been added, check out &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.1.0.RELEASE/reference/htmlsingle/#new&quot; target=&quot;_blank&quot;&gt;what’s new&lt;/a&gt; in the reference documentation.&lt;/p&gt;

&lt;h3 id=&quot;spring-fu-001&quot;&gt;Spring Fu 0.0.1&lt;/h3&gt;

&lt;p&gt;Spring Fu is an experimental micro-framework that makes it easy to create lightweight Spring-powered applications with functional APIs instead of annotations.
It introduces Kofu (&lt;em&gt;Ko&lt;/em&gt;tlin and &lt;em&gt;fu&lt;/em&gt;nctional) and Jafu (&lt;em&gt;Ja&lt;/em&gt;va and &lt;em&gt;fu&lt;/em&gt;nctional, still a proof of concept) configuration for configuring Spring Boot in a functional way and makes use of the functional bean registration.
It also ships with coroutines support, GraalVM native images support and various other features.&lt;/p&gt;

&lt;p&gt;To learn more about this interesting project, visit this &lt;a href=&quot;https://github.com/spring-projects/spring-fu&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;spring-tools-4&quot;&gt;Spring Tools 4&lt;/h3&gt;

&lt;p&gt;Spring Tools 4 is completely re-built from scatch after a decade of updates and improvements of Spring Tool Suite (STS).
It’s a new set of IDE agnostic tools that can be installed in your favorite IDEs and editors.
Currently they support Eclipse, Visual Studio Code and Atom IDE.
With this release also comes the end of Spring Tools 3, but not until mid 2019!
STS 3.9.x will still receive updates and will be shipped as a full distribution, and the distribution will be updated to the upcoming Eclipse releases (2018-09, 2018-12, and beyond).
After mid 2019, it will no longer receive any maintenance updates.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Ysewyn&quot;, &quot;avatar&quot;=&gt;&quot;tim-ysewyn.png&quot;, &quot;twitter&quot;=&gt;&quot;TYsewyn&quot;, &quot;linkedin&quot;=&gt;&quot;tysewyn&quot;, &quot;github&quot;=&gt;&quot;TYsewyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-ysewyn/&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader API &amp; Microservices&quot;, &quot;email&quot;=&gt;&quot;Tim.Ysewyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a Principal Consultant at Ordina, where he helps fellow developers discovering top-notch technologies and methodologies as a Competence Leader for API &amp; Microservices. You can also find him working on various parts of the &lt;a href=\&quot;https://www.spring.io\&quot; target=\&quot;_blank\&quot;&gt;Spring&lt;/a&gt; framework or helping out at &lt;a href=\&quot;https://ng-be.org\&quot; target=\&quot;_blank\&quot;&gt;NG-BE&lt;/a&gt;. When you can\\'t get a hold of him, he will probably be under water since he is also an underwater photographer &amp; rescue diver.&quot;}</name><email>Tim.Ysewyn@ordina.be</email></author><category term="Spring" /><category term="SpringOne" /><category term="S1P" /><summary type="html">This year we went again to SpringOne Platform to check out the latest changes and what’s to come. In this post I’ll try to give an overview of everything that’s just been released or coming in the future. Because there were A LOT of sessions, I wasn’t able to gather or note down everything. All sessions except for the workshops were recorded and I’ll update this post to get you directed straight to the videos on YouTube when they come online!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-09-27-SpringOne-Platform/post-image.jpg" /></entry><entry><title type="html">Docker multihost networking with weave</title><link href="https://ordina-jworks.github.io/docker/2018/09/24/docker-networking-with-weave.html" rel="alternate" type="text/html" title="Docker multihost networking with weave" /><published>2018-09-24T00:00:00+00:00</published><updated>2018-09-24T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/docker/2018/09/24/docker-networking-with-weave</id><content type="html" xml:base="https://ordina-jworks.github.io/docker/2018/09/24/docker-networking-with-weave.html">&lt;blockquote&gt;
  &lt;p&gt;In my last blogpost we talked about setting up a Docker network on a single host. We talked about a very basic 3 tier application which was packaged into 3 containers.
An Angular frontend, a spring boot backend and a mysql database container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;No person in their right mind would ever run an application on a single host in production. ( If you are doing this please give us a call and we will gladly come help you out ;-) )
So today I will talk you through the process of setting up multi host networks with the help of Weave.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#why-multihost-networking&quot;&gt;Why multihost networking?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#weave&quot;&gt;Weave&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-example&quot;&gt;Basic example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#application-example&quot;&gt;Application example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#onprem-cloud-application-example&quot;&gt;Onprem cloud application example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;why-multihost-networking&quot;&gt;Why multihost networking?&lt;/h1&gt;

&lt;p&gt;In my &lt;a href=&quot;/docker/2017/12/15/Docker-basic-networking.html&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;last blogpost&lt;/a&gt; we ran our three containers on one single host network. This has a few obvious disadvantages which I will address first:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you would run all your applications as Docker containers on one machine, your environment would still be very prone to outages.
If something happens to the physical machine that you use, then you are pretty much done for and you have an outage.
Depending on how critical your applications are, this could have disastrous results.
That’s why in practice you want to spread your applications over several hosts and connect them to each other over a network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not every application that you package in a Docker container is the same.
In our example we have a web frontend, a Spring Boot backend and a MySQL database server.
A database server has fundamental different needs than a webserver.
For example, you want to make sure your database container is running on a system with large hard disks with much faster access times.
On the other side, a webserver has little use for large hard drives and has much more benefit from increased memory to allow for many concurrent connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you use a microservice architecture and you want to scale up a certain microservice, it is recommended to run the new instance of that microservice on a different machine than the first instance.
This is done for resilience of the application but also to spread the application workload over several different physical machines.
This improves the scalability of your system.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in short: multihost networking is pretty important to build &lt;strong&gt;resilient&lt;/strong&gt;, &lt;strong&gt;robust&lt;/strong&gt; applications that &lt;strong&gt;scale well&lt;/strong&gt;.
It also allows you to deploy your containers on hardware that makes most sense for each container.&lt;/p&gt;

&lt;p&gt;Now that you are convinced that we need multi host networks, at least for our production environments, let’s talk about what we can do to set this up with Docker and Weave.&lt;/p&gt;

&lt;h1 id=&quot;weave&quot;&gt;Weave&lt;/h1&gt;

&lt;p&gt;There are several options to do multihost networking with Docker.
Nowadays Docker itself even supports a basic form of this but we want to use all the good stuff like DNS lookups and service discovery.
That’s why we are going to use Weave.NET.&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;what is Weave.NET?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Weave.NET is software that is build by the company &lt;strong&gt;&lt;a href=&quot;https://weave.works&quot; title=&quot;Weaveworks&quot;&gt;Weaveworks&lt;/a&gt;&lt;/strong&gt;.
It allows you to create a virtual network across multiple hosts and enables automatic discovery of hosts and containers within the network.
The following features are the most important and useful to me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s &lt;strong&gt;easy&lt;/strong&gt; to setup. As I will show in the hands-on part of this post, the setup of Weave is done within minutes and is pretty straightforward.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It provides a &lt;strong&gt;virtual network&lt;/strong&gt; on top of your existing network.
In big organisations, the network setup can be quite complex with multiple VLANs and firewalls.
Using Weave, your network people only need to open one port.
Everything that stays within the Weave virtual network can communicate over that same port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The virtual network is very &lt;strong&gt;flexible&lt;/strong&gt;.
You can use Weave to build one virtual network between your on-prem and cloud environment.
Within this network, all your containers can communicate with each other as if they were living on the same machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An added benefit of the virtual network is that it’s pretty easy to &lt;strong&gt;secure&lt;/strong&gt;.
You can encrypt all the traffic on the Weave virtual network which adds a layer of security ontop of the existing security you have in place.
This is especially useful if you wish to build a network which spans your on-prem and cloud environment.
Since all traffic is encrypted you are not at risk when containers in the cloud communicate with containers in your on-prem environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Weave network comes with its own DNS server.
This allows you to do &lt;strong&gt;service discovery&lt;/strong&gt; within the Weave network.
This has huge benefits over addressing applications with their IP addresses.
Service discovery allows you to do easy &lt;strong&gt;loadbalancing&lt;/strong&gt; and provides your applications with &lt;strong&gt;high availablity&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Last but not least I feel obligated to point out that Weave works very well with &lt;strong&gt;Kubernetes&lt;/strong&gt;.
Kubernetes is basically the orchestration tool you want to be using to run your containers.
A deeper tour of Kubernetes is for another time, but for now I’d like to point out that the default network provider within Kubernetes is &lt;code class=&quot;highlighter-rouge&quot;&gt;flanel&lt;/code&gt; but you can replace that with Weave if you want.
You then get all the benefits of Weave plus the added value that you can make a virtual network that spans several Kubernetes clusters and/or your regular Docker applications.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main point I’m trying to make here, is that Weave.NET takes care of a lot of low level networking stuff for you.
This allows you to build a more robust and scalable environment to run your applications on without having to worry much about the lower levels in the networking stack.&lt;/p&gt;

&lt;h1 id=&quot;basic-example&quot;&gt;Basic example&lt;/h1&gt;

&lt;p&gt;In this example, I will be using Ubuntu machines on which I have already installed Docker.
Following picture shows the setup we will be build in this example:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/weave_basic_diagram.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;installing-weave&quot;&gt;Installing Weave&lt;/h3&gt;

&lt;p&gt;To install Weave on an Ubuntu system you can run the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo curl -L git.io/weave -o /usr/local/bin/weave
sudo chmod a+x /usr/local/bin/weave
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to install Weave on another system take a look on the &lt;strong&gt;&lt;a href=&quot;https://www.weave.works/docs/net/latest/install/installing-weave/&quot; title=&quot;weave install page&quot;&gt;weave install page&lt;/a&gt;&lt;/strong&gt;.
On systems which don’t support native Docker, you will have to set up something like Docker-machine to get everything to work.&lt;/p&gt;

&lt;p&gt;We will need to run the Weave install on both of the machines that we are going to use in this example.&lt;/p&gt;

&lt;h3 id=&quot;launching-weave&quot;&gt;Launching Weave&lt;/h3&gt;

&lt;p&gt;Now that we have installed Weave on both machines, let’s start it up.&lt;/p&gt;

&lt;h4 id=&quot;setting-up-host-1&quot;&gt;Setting up host 1&lt;/h4&gt;

&lt;p&gt;On the first host, type the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave launch
eval $(weave env)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first command launches Weave. Weave runs as a set of Docker containers on your system, you can see this when you run the launch command:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/install_weave_result.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; command you can take a look at all the images that Weave downloaded:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/weave_images.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The second command configures the Weave environment so that containers that get launched will automatically attach to the Weave network.
This means that you have to provide no additional arguments to your Docker run commands to use the Weave network.
Behind the scenes Weave has setup a Docker network for you on your machine, you can take a look at this with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network ls 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/docker_network.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;You can recognise the Weave network by the name &lt;strong&gt;Weave&lt;/strong&gt; and as you can see it uses the &lt;strong&gt;weavemesh&lt;/strong&gt; driver instead of one of the standard Docker network options.
When our network setup is done we will test it out with a test container.
So for now let’s start this container on the first host:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name app_on_host1 weaveworks/ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just a stripped down Ubuntu Docker image.
We will use it later to test our network setup.&lt;/p&gt;

&lt;p&gt;If you look at your machine’s network stack you will see that Weave has setup several different networks on your host machine in order to make it’s magic work.
When I run the:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command on my machine, I can see that Weave added following network stacks to my machine:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/weave_network_stack.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;What all these networks do is out of scope for this post as that operates on a pretty low level in the TCP/IP stack and we are not really interested in it in our usecase.
We just want it to work, right?&lt;/p&gt;

&lt;h4 id=&quot;setting-up-host-2&quot;&gt;Setting up host 2&lt;/h4&gt;

&lt;p&gt;In the last screenshot of the previous section we looked at the network stack of host 1.
This is important because we need the &lt;strong&gt;physical IP address&lt;/strong&gt; from that host to tell our second host to connect to host 1.
Host 1 has IP address 192.168.1.18. This gives us following command to run on host 2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave launch 192.168.1.18
eval $(weave env)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The syntax of this command is pretty straightforward.
You tell Weave to launch and to connect to every IP you supply as an argument to the launch command.
We will also setup a test container on this host:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name app_on_host2 weaveworks/ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are all the setup steps you need to do in order to setup a simple Weave network.
Now let’s see how we can verify that everything is working.&lt;/p&gt;

&lt;h4 id=&quot;verifying-our-setup&quot;&gt;Verifying our setup&lt;/h4&gt;

&lt;p&gt;There are a few things we can do to verify that our setup is working.
To start off let’s look at the status off our Weave service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This produces following result:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/weave_status.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;You can run this command on either host, it will provide you with basically the same results.
All sorts of useful stuff is available in the status overview including the range of your Weave subnet, the connected peers, the connections.
As a first step to verify that our network is working, let us examine the connections and peers in more detail with following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave status peers
weave status connections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/weave_status_details.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As you can see from the output of the commands there are now two hosts in our network and there is one connection between them.
So far everything is looking good!
Now let’s do the real test and see if the containers can find each other by the name we gave each container.
SSH into the container on host 1 and ping the application on the other host:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -ti app_on_host1 bash
ping app_on_host2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/ping_test_app_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As we can see from the results, our container was able to resolve the other container over the Weave network by making use of the Weave DNS service and the Weavemesh network.
If we reverse our test and run it on host 2 we get this result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -ti app_on_host2 bash
ping app_on_host1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see from the example outputs, both hosts are now connected, and thanks to the Weave network and DNS service, they are able to resolve each other by hostname.
Another noteworthy thing is that Weave has setup a class A network (10.xxx.xxx.xxx) range for us.
These are all IP addresses within the Weave network so you don’t have to worry about any IP conflicts with your existing network.
If you would have the need for a specific subnet you can force Weave to use whatever subnet you like (192,168.1.XXX for example).&lt;/p&gt;

&lt;h1 id=&quot;application-example&quot;&gt;Application example&lt;/h1&gt;

&lt;p&gt;For this example we will use the Weave setup we created in the previous example.
I will be running the application from the basic Docker networking blogpost on our two hosts in the Weave network.
You can checkout the code for this example at &lt;strong&gt;&lt;a href=&quot;https://github.com/basmoorkens/docker-networking-demo&quot; title=&quot;weave install page&quot;&gt;my github account&lt;/a&gt;&lt;/strong&gt;.
For this example I will be using the &lt;strong&gt;weave-basic-example&lt;/strong&gt; branch.&lt;/p&gt;

&lt;h3 id=&quot;setup-database&quot;&gt;Setup database&lt;/h3&gt;

&lt;p&gt;In the first step, we setup our database container on one of the Weave hosts.
I will be using my desktop to run the database container.
First we will run the &lt;strong&gt;run_db.sh&lt;/strong&gt; script to start up a new MySQL container and assign a root password to it.
When that container is up and running we can initialise it with a database and some data.
To initialise the database run the &lt;strong&gt;init-db.sh&lt;/strong&gt; script.
We can run following commands to verify that our database is up and running in the Weave network:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
weave ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should give you a similar output to the screenshot below:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/db_setup.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As you can see the mydb container was automatically added to the Weave network because of the &lt;strong&gt;eval $(weave env)&lt;/strong&gt; command we ran earlier in this demo.
Note that the Weave ps command shows you the container id and the IP address it has allocated to that container.
Now that our database is up and running, let’s switch over to our other machine and start the other services over there.&lt;/p&gt;

&lt;h3 id=&quot;setup-backend-application&quot;&gt;Setup backend application&lt;/h3&gt;

&lt;p&gt;Let’s install our backend service on our second host.
In the &lt;strong&gt;backend&lt;/strong&gt; folder we will run the following commands to compile our application and start up our Docker container.
Let’s start our backend container with the &lt;strong&gt;test_run_backend.sh&lt;/strong&gt; script.
This script runs the container and exposes its webservice to the outside world through port 8080.
We can then use our browser on our host to verify that the service is running correctly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install
docker build -t rest-backend .
./test_run_backend.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To verify that out application has started successfully we can run the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
weave ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows us that the container wass started correctly and it got an IP addresss within the Weave network.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/backend_setup.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now that we know our backend and our database are running within the Weave network, we can query our REST service and see if everything is working as expected:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/backend_verification.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When I do an HTTP GET to my REST backend, it comes back with a greeting it got from the database container on the other host.
Now that we have verified that our backend runs fine, we will stop it and start it up again without exposing a port to the outside world:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop rest-backend
docker rm rest-backend
./run_backend.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Docker ps command on the backend now runs without exposing a port.
Since our frontend application is calling our REST backend through the Weave network, we don’t have to expose a port to the outside world:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/rest-backend-without-port-exposed.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;setup-frontend-application&quot;&gt;Setup frontend application&lt;/h3&gt;

&lt;p&gt;Our frontend application is a bit different from the one I used in my previous demo.&lt;/p&gt;

&lt;p&gt;In the previous demo we used an Angular frontend, but I replaced it with a simple webserver I wrote in &lt;strong&gt;Golang&lt;/strong&gt;.
I want to demonstrate that applications can access each other through the internal Weave network by their container name.
I could not demonstrate this last time with Angular code since that’s rendered on the browser at client side.
Our client’s browser is not inside the Weave network so it has no way to resolve the webservice call from our frontend application to our REST service.&lt;/p&gt;

&lt;p&gt;In this example, our Go frontend app renders the HTML response on the server side.
This means the code that calls the REST service is running inside the Docker container and is thus a part of the Weave network.
We can also access our REST backend via following url:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/frontend-call-to-backend.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The source code of the Go application is on Github in the &lt;strong&gt;frontend&lt;/strong&gt; folder.
Please note: I also included a compiled binary so that you can use the program even if you don’t have a working Golang installation.
To start our frontend container, run following commands inside the frontend folder.
Only execute the first command if you wish to compile the Go program yourself:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go build
docker build -t frontend .
./run_frontend.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our Go frontend application should be up and running now so let’s check if everything is working as expected:&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/final-result.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can access our frontend application through port 8080 (which we exposed to the outside world with the Docker run command).
In this example I gave the name “john” which has no entry in our database so our REST backend returned the standard hardcoded message “hello friend”.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/final-result-2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In this example I gave “bas” as a parameter and since we have a message in our database for this name, we got the message “hello master” as a result.
Since no Docker ports are exposed to the outside world (except for our frontend application to make it accessible from our host), this is definitive proof that our Go application can access our REST backend application through the Weave network.
Likewise, our REST backend application accesses our mydb container through the Weave network as well.&lt;/p&gt;

&lt;p&gt;Oh, and by the way: You can run your containers on any host which is connected to our Weave network. Cool, huh?
Now, let’s take this one step further. In this next example we will extend our Weave network from our home network into the cloud.&lt;/p&gt;

&lt;h1 id=&quot;onprem-cloud-application-example&quot;&gt;Onprem cloud application example&lt;/h1&gt;
&lt;p&gt;In the final example of this blogpost I will show a setup where we have 1 Weave network that spans our onprem environment and connects to a cloud environment (AWS).
In this example we will run each application container on a different host. It looks like this.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/onprem_aws_setup.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;In the end result I will be running the &lt;strong&gt;mydb&lt;/strong&gt; container on my desktop (database server). The &lt;strong&gt;rest-backend&lt;/strong&gt; will run on my laptop (backend server) and our &lt;strong&gt;frontend&lt;/strong&gt; container will run on an EC2 instance on AWS.
Everything will be connected through the Weave network that we will reconfigure to encrypt our data between the cloud and onprem environment.
Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;setup-ec2-server&quot;&gt;Setup EC2 server&lt;/h3&gt;
&lt;p&gt;The first thing we have to do is create a new EC2 server on AWS that we can use for this demonstration.
I’m not going to go into full detail here about how you can do that but it’s quite easy and there are a lot of tutorials out there.
After our EC2 server is up and running we can login to it via ssh and install docker and weave.
We will start up Weave on our EC2 server with encryption enabled.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave launch --password weavetest
eval $(weave env)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;password weavetest&lt;/strong&gt; part enables the encryption for this peer. 
If another peer wants to connect to this peer it has to provide this password before a connection can be established.
After the connection is established all traffic over the connection will be encrypted.&lt;/p&gt;

&lt;p&gt;Another thing we have to take care of is make sure that Weave on the EC2 server can connect to it’s peers.
Remember, an EC2 is running in a VPC behind a firewall so we have to open certain ports for this to work.
In the case of Weave we have to open the port 6783 – which is the control port.
And we also have to open the port 6784 – which is the data port.
You can do this by editing the launch group of your EC2 and add following inbound rules to it.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/aws-inbound-rules.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;As you can see I added rules to allow TCP and UDP traffic on port 6783 from all sources. This enables the Weave control process to connect to its peers.
Afterwards I added a rule to allow UDP traffic on port 6784 from all sources. This port is used by Weave to send it’s data.
Note, I also opened port 8080 because our frontend uses this port to listen for web requests.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/ec2.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;We will use the public ip4 address and DNS name later in this demo.&lt;/p&gt;

&lt;h3 id=&quot;reconfigure-the-existing-onprem-hosts&quot;&gt;Reconfigure the existing onprem hosts&lt;/h3&gt;
&lt;p&gt;Before you can connect Weave from your homenetwork to the cloud you have to make sure that your router ports 6783(TCP/UDP) and 6784(UDP) are opened.
First lets reconfigure our database host.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave reset
weave launch --password weavetest
eval $(weave env)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;weave status&lt;/strong&gt; command on this host now shows that encryption is enabled.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/db_encrypted.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;As you can see Weave is now reporting that encryption is turned on but this Weave peer is not yet connected to any others.
Let’s take care off that now. Switch over to the backend host.
Now let’s run the magic Weave command that will make our setup run.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weave launch 34.247.178.145 192.168.1.99 --password weavetest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command launches Weave on our backend host and tells it to connect to our EC2 instance in the cloud and to our database server onprem.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/backend_host_encrypted.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;As you can see our backend host is now connected to both our EC2 server and our database server. 
Let’s check our EC2 server as well.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/ec2-encrypted-connected.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;As you can see our EC2 server now also has encrypted connections to both the backend server and the database server.
Weave will automatically connect hosts on your network as long as they can be connected though 1 common peer.
In this case our backend server has a connection to our EC2 server and a connection to our database server.
So Weave will automatically create a connection between those 2 as well.&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image&quot; style=&quot;max-width:633px&quot; alt=&quot;Weave install result&quot; src=&quot;/img/2018-09-15-docker-networking-with-weave/final_result_ec2.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;As you can see in the screenshot I browsed to the frontend application on the AWS server and it generated a correct response which means our setup works!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this blogpost we started off with a simple onprem Weave network.
After testing that the network works we deployed a distributed application on that network.
After this we extended our private Weave network with a peer on AWS in the cloud.
The end result we achieved was that our distributed application was running spread over a cloud and onprem environment.
In our final example we also enabled encryption on the Weave network so all traffic between your onprem environment and the cloud is encrypted.&lt;/p&gt;

&lt;p&gt;This can be a huge benefit for enterprises who want to move their applications into the cloud. 
With Weave you can setup your network in a hybrid cloud/onprem model and be sure that all communication is safely encrypted.
This allows the enterprise to do a gradual move to the cloud instead of having to do a big bang approach.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Bas&quot;, &quot;last_name&quot;=&gt;&quot;Moorkens&quot;, &quot;permalink&quot;=&gt;&quot;/author/bas-moorkens/&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;DevOps Engineer&quot;, &quot;email&quot;=&gt;&quot;bas.moorkens@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;basmoorkens&quot;, &quot;avatar&quot;=&gt;&quot;bas-moorkens.jpg&quot;, &quot;github&quot;=&gt;&quot;basmoorkens&quot;, &quot;bio&quot;=&gt;&quot;Bas is a Senior Java Developer at Ordina Belgium who discovered he is fascinated by cloud, containers and pipeline automation. He started off as a Java full stack developer but got more and more into the DevOps world where he currently spends most of his time.&quot;}</name><email>bas.moorkens@ordina.be</email></author><category term="docker" /><category term="Docker" /><category term="Weave" /><category term="Networking" /><category term="Kubernetes" /><summary type="html">In my last blogpost we talked about setting up a Docker network on a single host. We talked about a very basic 3 tier application which was packaged into 3 containers. An Angular frontend, a spring boot backend and a mysql database container.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/docker-basic-networking/docker-basic-networking.png" /></entry><entry><title type="html">Node-RED: Development and CI</title><link href="https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html" rel="alternate" type="text/html" title="Node-RED: Development and CI" /><published>2018-08-15T00:00:00+00:00</published><updated>2018-08-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-node-red&quot;&gt;What is Node-RED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-we-are-using-node-red-or-an-alternative&quot;&gt;Why we are using Node-RED (or an alternative)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-to-the-rescue&quot;&gt;Node-RED to the rescue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuration-components&quot;&gt;Configuration components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-an-instance&quot;&gt;Running an instance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-your-first-flow&quot;&gt;Creating your first flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spicing-things-up&quot;&gt;Spicing things up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#json&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-persistent-config&quot;&gt;Node-RED persistent config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-and-docker&quot;&gt;Node-RED and Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#node-red-and-ci&quot;&gt;Node-RED and CI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-node-red&quot;&gt;What is Node-RED&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.” – from docs &lt;a target=&quot;_blank&quot; href=&quot;https://nodered.org/&quot;&gt;https://nodered.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, that’s all true.
But we’re not using Node-RED for those things.
There are two use cases for which we use Node-RED, but before we go into those, we’ll take a quick look at some other Node-RED features.&lt;/p&gt;

&lt;p&gt;Some great pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node-RED is built on Node.js, taking full advantage of its event-driven, non-blocking model.
This makes it ideal to run at the edge of the network on low-cost hardware such as the Raspberry Pi as well as in the cloud. (from docs)&lt;/li&gt;
  &lt;li&gt;Node-RED comes with a web based graphical user interface, where you can manage your API flows with drag and drop functionality.&lt;/li&gt;
  &lt;li&gt;Because Node-RED is built on Node.js you can just run it locally on a lot of systems (Windows, Mac OSX, Linux,…), on a lot of devices and in the cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The graphical user interface lets you create your endpoints and flows in an easy way.
Just drag and drop your components in your flowchart and connect them by drawing a line between them.
Double clicking each component will open the detail screen where you can set some variables for that component.
When your flows are ready, there is an import and an export function available for storing and sharing your configs.&lt;/p&gt;

&lt;h1 id=&quot;why-we-are-using-node-red-or-an-alternative&quot;&gt;Why we are using Node-RED (or an alternative)&lt;/h1&gt;

&lt;h2 id=&quot;node-red-and-development&quot;&gt;Node-RED and Development&lt;/h2&gt;

&lt;p&gt;Coming from a frontend dev background, I can confirm that nothing is more frustrating than running backends, or at least part of the backend, locally, before you can start coding and testing.
Yes, Docker and Docker Compose are helping a lot but still…
In some cases, backend development, for a specific feature, is planned for the same sprint as the frontend development.
So even running a backend locally, will not help you.
Mocking can be an option.
You can start mocking the data inside the communication layer or mocking an external backend with test data.&lt;/p&gt;

&lt;p&gt;In an ideal world, teams should do some analysis of the specifications coming from business and their analysts.
Based on those specification, developers can start estimating tasks (or stories and epics), and think about the architecture and design.
At this point, technical specifications could already get written down, such as model designs and API contracts.
It’s almost impossible to do a good job in the frontend if those things are not available, or at least specified.&lt;/p&gt;

&lt;p&gt;Why do you want good test data?
If you know the characteristics, it’s easier to do some layout stuff.
You would think that mockups and designs would be accurate, but most of the time they aren’t or they are not inline with the data.&lt;/p&gt;

&lt;p&gt;So what about mocking?
Yes, you can mock stuff yourself and maybe skip the communication layer.
Or you can mock the communication part in the communication layer by means of interceptors for example.
But at some point in time, you’ll need an API and test data that is close to production data when it comes to live data specs.
When mocking inside your components, would you include everything in your code base?
Or would you exclude it, but still make it more accessible for your colleagues?
Some frameworks include this kind of functionality such as MockBackend from Angular (More info &lt;a target=&quot;_blank&quot; href=&quot;https://angular.io/api/http/testing/MockBackend&quot;&gt;here&lt;/a&gt;).
That said, I really like and prefer external tools for mocking a backend.
That way it’s separated from your app and code base, so it can easily get replaced or modified without triggering stuff in your frontend pipelines.
You can even choose to run a tool on your local machine.
Or on-premise and make it accessible for all your (frontend) developers.&lt;/p&gt;

&lt;h2 id=&quot;node-red-and-testing-ci&quot;&gt;Node-RED and Testing (CI)&lt;/h2&gt;

&lt;p&gt;Even if you have implemented your mocks inside your communication layer and it’s doing the job you expect it to do, how are you going to test your communication itself?
You can use those mocks to run unit tests, but it’s harder to run integration tests that cover your communication layer as well.
Using an external tool, gives you the possibility to reuse this part in your test setup.
You can integrate this external mock backend in your setup and redirect your frontend calls to the mock instead of a real backend.
Why you should do this, is explained in an earlier post on our tech blog.
If you’re interested, you can read all about it &lt;a target=&quot;_blank&quot; href=&quot;https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html&quot;&gt;here&lt;a&gt;.&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;node-red-to-the-rescue&quot;&gt;Node-RED to the rescue&lt;/h1&gt;

&lt;p&gt;In both cases, Node-RED can help us providing a real API that responds with test data.
For the test data, I prefer test data getting delivered by the business or the client, but if that is not an option, you can create your &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; data based on the API contracts and model designs.
Again, I’m mentioning the API contracts and model design, because often, organisations fail at this.
Let’s setup a real easy API.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;Before starting this tutorial, you should download or install some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure you have a Node.js (incl npm) environment&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo npm install -g --unsafe-perm node-red&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A running Docker daemon&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull nodered/node-red-docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: To be honest, you only need one of those 2 environments.
For the other part, you can just read through it and then try it in the other setup.&lt;/p&gt;

&lt;h1 id=&quot;configuration-components&quot;&gt;Configuration components&lt;/h1&gt;

&lt;p&gt;Although we are only using Node-RED for HTTP(S) (REST) and MQTT backend mocking, Node-RED provides more options.
Node-RED can even be used as a real backend, using external databases for example.
So before we start our setup, let’s take a quick look at some basic features.&lt;/p&gt;

&lt;h2 id=&quot;inputs&quot;&gt;Inputs&lt;/h2&gt;

&lt;p&gt;HTTP, TCP, UDP are probably the most straightforward and known by all of you.
I guess no explanation is needed.
WebSockets are also used a lot nowadays.
WebSockets are an advanced technology that makes it possible to open an interactive communication channel/session for pushing messages between a client(s) and a server(s).
MQTT is one of the standards for messaging for mobile devices.
It is a lightweight messaging protocol for small sensors and mobile devices, optimized for high-latency or unreliable networks.
Inject, catch, status and link are internal inputs.
Inject provides a way of injecting a message(s) into a flow.
This can be done manually or at a regular interval.
Catch can be used to handle an error from another node.
The normal from of that node will get terminated, but with catch you can handle and catch the error providing an alternative route.
The status node is just reporting messages from other nodes and link lets the user create virtual links between flows.&lt;/p&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;Same as above for HTTPS, TCP, UDP, WebSockets, MQTT and link but now for outputs.
Debug lets you show messages in the sidebar.
The debug sidebar provides a structured view of the messages it has sent, making it easier to understand their structure.&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Node-RED comes with a lot of predefined function blocks.
The ones we are using most are the regular &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block itself and the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;- or &lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;-function to parse json and xml.
Besides those, there are function blocks that lets you run calls to external platforms, delay, reroute or redefine messages, etc.
If you need more information about one of them, Node-RED show an information screen when selecting one of them.&lt;/p&gt;

&lt;h2 id=&quot;social&quot;&gt;Social&lt;/h2&gt;

&lt;p&gt;This section provides us with functionality to intercept (input/output) email- and twitters messages.
I’ve personally never used one of them, but I can imagine they can come in handy.&lt;/p&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;

&lt;p&gt;File (input/output) is self explanatory.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; function, lets you add a watcher to a file.
As the docs describe, this cannot be used on Windows systems.
It’s based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ tail -f fileName&lt;/code&gt; command on Unix systems and watches for changes.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;This component lets you analyse a received message based on a sentiment score.
You can read all about it &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/thisandagain/sentiment/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;/h2&gt;

&lt;p&gt;Like the tail function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;-block watches for directory or file changes.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;feedparse&lt;/code&gt; can be used to monitor an RSS/atom feed for new entries.
The last one, the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;-block lets you run a system command and returns its output.&lt;/p&gt;

&lt;h1 id=&quot;running-an-instance&quot;&gt;Running an instance&lt;/h1&gt;

&lt;p&gt;First things first, let’s fire up a Node-RED instance.
(We are going to start with the npm package version)
To start using or initiating an instance of Node-RED by using the npm repositories, just run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ node-red&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If installed correctly, you should see the following log:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/log1.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There are four interesting lines in this log.
The first three of them are the settings file, the user dir and the flows file.
The last line shows us where the service is available.&lt;/p&gt;

&lt;p&gt;We’ll come back to the config later, and we are going to take a look at the User Interface based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; in the last line.
As mentioned before, Node-RED offers a user interface, to configure the service.
Open your browser and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:1880&lt;/code&gt; (default setup config).&lt;/p&gt;

&lt;p&gt;You’ll see all the components mentioned above on the left side of the screen.
In the middle you have a tabbed structure for your flow chart(s), and on the right you have debug, info and detail windows.&lt;/p&gt;

&lt;p&gt;On the top right of your screen, you have a settings dropdown and a menu with deploy options.&lt;/p&gt;

&lt;h1 id=&quot;creating-your-first-flow&quot;&gt;Creating your first flow&lt;/h1&gt;

&lt;p&gt;Let’s use the Node-RED user interface to create a simple flow.
In this case a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input connected to a function that returns its data through an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-output.&lt;/p&gt;

&lt;p&gt;Start by dragging the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; from the input list onto the chart.
Then, drag and drop a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; block from the function list and the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; from the output list onto the chart.
Connect the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input with the function block by dragging a line starting from the input node, to the function block.
Repeat this for the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block to the output.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/initial-flow.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Of course this isn’t ready for being deployed just yet, cause we did not add any logic yet.
Let’s configure our flow!&lt;/p&gt;

&lt;h3 id=&quot;input&quot;&gt;Input&lt;/h3&gt;

&lt;p&gt;Double click the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input block.
This action will open a window on the right where you can set some properties.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method: GET&lt;/li&gt;
  &lt;li&gt;URL: /data&lt;/li&gt;
  &lt;li&gt;Name: Get all data&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Confirm these settings by clicking ‘Done’.&lt;/p&gt;

&lt;h3 id=&quot;function-block&quot;&gt;Function block&lt;/h3&gt;

&lt;p&gt;Double click the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.
Again, a window will open!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: Retrieve data&lt;/li&gt;
  &lt;li&gt;Function:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE:
The information section on the right comes in handy while configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A JavaScript function block to run against the messages being received by the node.
The messages are passed in as a JavaScript object called msg.
By convention it will have a msg.payload property containing the body of the message.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explains why we are setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;msg.payload&lt;/code&gt; property.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-function.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Again, confirm these settings by clicking ‘done’.&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;

&lt;p&gt;Open the config for the &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output block.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: return all&lt;/li&gt;
  &lt;li&gt;Status Code: 200&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/config-output.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the output lets you choose the return status code.
This can be used later if you would like to implement failed &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt;-calls for mocking purposes.
Confirm these settings by clicking ‘Done’.&lt;/p&gt;

&lt;h3 id=&quot;deploy&quot;&gt;Deploy&lt;/h3&gt;

&lt;p&gt;On the top right of your screen, you have the deploy-dropdown.
Clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; will deploy this flow onto the running server, but you can also use the arrow to open up the menu and choose a more accurate scenario.
Since this is our first deploy and we only have one flow, we don’t have a choice.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/deploy.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;test-setup&quot;&gt;Test setup&lt;/h3&gt;

&lt;p&gt;To test our deployment and of course our flow, just navigate to http://localhost:1880/data in your browser or use curl to GET the data:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/test-browser.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:1880/data&lt;/code&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/test-curl.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;spicing-things-up&quot;&gt;Spicing things up&lt;/h1&gt;

&lt;p&gt;Let’s try and implement a &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;.
We would first drag and drop an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input, a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output onto the flow chart.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The input would look like:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;:id&lt;/code&gt;.
This way we tell Node-RED that this is a path parameter.&lt;/p&gt;

&lt;p&gt;The output would look like:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/delete-output.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;But what about the &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block ? We could come up with something like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the id&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we’ve filtered out an element, but that’s it.
Everytime we call this function block, it will start by initialising the data array.
Since we are not persisting the data, requesting all the records, will still return all the data records.&lt;/p&gt;

&lt;h2 id=&quot;persisting-data&quot;&gt;Persisting data&lt;/h2&gt;

&lt;p&gt;There is a way to connect to a database, but that is outside of the scope of this post.
First, let’s show some ways of persisting data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node context&lt;/li&gt;
  &lt;li&gt;Flow context&lt;/li&gt;
  &lt;li&gt;Global context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The node context lets the user persist variables for that node.
Whenever that node gets redeployed, the context is gone.
The flow context is a context shared over all nodes in that flow chart while the Global context lets you share a context over the whole app.&lt;/p&gt;

&lt;p&gt;You can set and get a context variable with the getters and setters from the api.
For a flow context this will look like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// do stuff&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;initialising-data&quot;&gt;Initialising data&lt;/h2&gt;

&lt;p&gt;Now that we know how we can store data, we need to find a way to initialise the data.
We could for example launch a call to trigger a function that would store data in the flow context.
We could build this by using an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input, a &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output.
But this doesn’t feel right.
Luckily, Node-RED provides us with an &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This input will get triggered periodically, or just one time. &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input is made for injecting messages of almost any type into the next component.
This message can be a string, a number, the current timestamp, …
We are going to use it as a trigger on startup to initialise our data into our flow.&lt;/p&gt;

&lt;h3 id=&quot;inject-input&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input:&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject-input.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;inject-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-function:&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/inject-function.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;Now we know how we can inject and persist data in a context, let’s refactor our &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;.
And while we are at it, add a second &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; so we can query one record by ‘id’.&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;

&lt;p&gt;Our two &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-inputs are exactly the same except for the parameter (id).
The function-block on the other hand, will have some build-in logic:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are retrieve the data from the context and storing it in a local variable.
Based on the existence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; parameter, we are going to search for a single record, or return all records.
Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;.
This is because the id in the data is a number, where the id from the params is a string.&lt;/p&gt;

&lt;p&gt;Based on the logic, we could add a query parameter to the endpoint that let’s us filter the data on the title property for example, but that is out of scope.&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;p&gt;As shown earlier, we are going to use a simple filter function to filter out the record with the given id.
We start by retrieving the data from the flow context, and then filtering this data.
Don’t forget to rewrite the new data to the flow context, so other components will get updated context data.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;all-together&quot;&gt;All together&lt;/h3&gt;

&lt;p&gt;Now we should have an &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input and 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-inputs (2 GET’s and 1 DELETE).
Our flow should look like:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/persistent.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s deploy and test this setup.
First click the deploy button and wait a second.
Then navigate with your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:1880/data&lt;/code&gt;.
This should display your data in your browser.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/all-browser.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s try to delete a record.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X DELETE http://localhost:1880/data/3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And refresh your browser:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/all-browser-delete.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Seems like one big success! No?
Not exactly.
Try and delete records 1, 2, 4 and 5.
Now what?
Our data is gone and we don’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; nor a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; implemented.&lt;/p&gt;

&lt;p&gt;Implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; is really straightforward.&lt;/p&gt;

&lt;h3 id=&quot;post-and-put&quot;&gt;POST and PUT&lt;/h3&gt;

&lt;p&gt;For the example, we are going to work with an &lt;code class=&quot;highlighter-rouge&quot;&gt;upsert&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; will trigger the same function block that will be smart enough to update (if exists) or insert.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/post-put.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The upsert &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block can look like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// quick fix making sure it's a number&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or adjusted body if needed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we have a GET, POST, PUT and DELETE.
But still, we are missing something.
Assume we are developing delete functionality in the frontend while using this setup as a backend.
Since we only have 5 records, I should inject new data to test after my 5 deletes.
Or assume we are testing a frontend, connected to this mock backend.
Wouldn’t it be nice that we can refresh the data to its initial state before running a new test suite?&lt;/p&gt;

&lt;p&gt;The point I’m getting to is, we should come up with a way of refreshing our data to its initial state.&lt;/p&gt;

&lt;h2 id=&quot;resetting-data&quot;&gt;Resetting data&lt;/h2&gt;

&lt;p&gt;When you look at your flow chart, you’ll see there is something that looks like a button on the left side of our &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input.
When you click it, you’ll notice a toast message appearing on the top of your user interface:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refresh-toast.png&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;But what if we don’t have access to the user interface, or we don’t have control over it what so ever? For example, when running automated tests against this mock backend, somewhere on a dynamic Jenkins Docker slave? To overcome this, we are using an &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input to trigger the reset of our data.
Let’s take a look at our implementation:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refresh-http.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input is listening on &lt;code class=&quot;highlighter-rouge&quot;&gt;/rest&lt;/code&gt;.
As you can see, we’ve added an &lt;code class=&quot;highlighter-rouge&quot;&gt;http-response&lt;/code&gt;-output.
REST-calls are expecting a response! Don’t forget to deploy your new setup&lt;/p&gt;

&lt;p&gt;Making sure this works:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should respond with the initial data
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; DELETE http://localhost:1880/data/2   // should delete record with &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;id&quot;:&quot;7&quot;,&quot;Title&quot;:&quot;Title 7&quot;}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:1880/data   // should add record with &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;7
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should give the expected result
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/reset  // should reset the data
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:1880/data   // should show the reset is working
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/curl-result.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;json&quot;&gt;JSON&lt;/h1&gt;

&lt;p&gt;The last refactoring we are going to do in this tutorial is switching from an hardcoded data json object to an external &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file.
As mentioned before, Node-RED provides ways of integrating storage and databases, but that is out of the scope of this post.
Still, we don’t want to include real data in this setup.
We should loosely couple our data provider and the backend mock implementation.
If some analysts, for example, provide us with new test data, we don’t want to change anything in this setup.
One way to overcome this, is to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-files.&lt;/p&gt;

&lt;p&gt;Assume we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file, called &lt;code class=&quot;highlighter-rouge&quot;&gt;data.json&lt;/code&gt; with content:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Title 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember when I mentioned some important lines in the console at startup?
One of those lines was referring to the User directory:
&lt;code class=&quot;highlighter-rouge&quot;&gt;User directory : /Path/To/Your/Home/.node-red&lt;/code&gt; (which is the default)
Because we didn’t change anything in the &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.js&lt;/code&gt; file (or didn’t point to a custom one), Node-RED creates a context folder for the current instance.
Copy your &lt;code class=&quot;highlighter-rouge&quot;&gt;data.json&lt;/code&gt; to this folder.
I will explain later why we are doing this.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/node-red-user-dir.png&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s read data from this json file instead of hardcoding the data:&lt;/p&gt;

&lt;h3 id=&quot;add-a-file-component-from-the-storage-section&quot;&gt;Add a file component from the storage section&lt;/h3&gt;

&lt;p&gt;On the left of the user interface, there is a storage section with an input file option.
Drag this onto the flow chart.
Unlink the connections from the &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt;-input and the reset &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;-input with the ‘store’ &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block and connect both with the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;-storage component.
Open the details and set the properties:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/storage-file.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Do read the text on the bottom about the patch to the file! And keep in mind we have selected the ‘single UTF-8 string’ option.&lt;/p&gt;

&lt;h3 id=&quot;add-a-json-parse-function&quot;&gt;Add a Json parse function&lt;/h3&gt;

&lt;p&gt;In the function section on the left, you have a JSON component.
Depending on its input, it will parse or stringify a string or json object.
Because we will be sending this component a ‘single UTF-8 string’, it will parse it to a JSON object.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/parse.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Integrate this component in between the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;-storage component and the store &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.&lt;/p&gt;

&lt;h3 id=&quot;refactor-the-store-function&quot;&gt;Refactor the store function&lt;/h3&gt;

&lt;p&gt;We are now ready to refactor the store &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;-block.
Remove the data and replace it with the content of the json-parse function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/refactored-store.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;result-result&quot;&gt;Result [result]&lt;/h3&gt;

&lt;p&gt;When finished, our setup should look like the following flow chart:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/result.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When the json-file gets updated, a data reset call will reload the new data into the flow context without needing to change the setup itself!&lt;/p&gt;

&lt;h1 id=&quot;node-red-persistent-config&quot;&gt;Node-RED persistent config&lt;/h1&gt;

&lt;p&gt;As mentioned before, Node-RED uses a user directory, a &lt;code class=&quot;highlighter-rouge&quot;&gt;flow.json&lt;/code&gt; file and a &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.js&lt;/code&gt; file.
If those do not exist, it will create default ones for you in the default node-red path &lt;code class=&quot;highlighter-rouge&quot;&gt;%USERPROFILE/.node-red&lt;/code&gt;.
Going through the settings file is also out of the scope of this post.
Advanced users can just read all about it in the docs or just open it and modify it.&lt;/p&gt;

&lt;p&gt;Why I’m mentioning this directory, is because of the config persistence of Node-RED.
Go ahead and kill your Node-RED server (&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL-C&lt;/code&gt; in terminal).
And now just restart it:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, Node-RED will just pick up its previous config because it’s available in the default directory.
When more people need to work with this config, we need to share it.
The easiest way to share this config, is to wrap it in a Git repository.
Keep in mind that this may not be best practice to wrap the whole directory, but this way, your colleagues and continuous integration platform can just checkout the repository and run the server, including the data files.&lt;/p&gt;

&lt;p&gt;When running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ node-red --help&lt;/code&gt; it shows the command line params.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/man-node-red.png&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; option.
Node-RED provides us with cli parameters to run custom configs.
Let’s assume we clone our newly created Git repository in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/repositories/node-red&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node-red &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ~/repositories/node-red/settings.js &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ~/repositories/node-red
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;node-red-and-docker&quot;&gt;Node-RED and Docker&lt;/h1&gt;

&lt;p&gt;Node-RED also provides a Docker image at &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/nodered/node-red-docker/&quot;&gt;Docker Hub&lt;/a&gt;.
This way you do not even need a Node.js environment preinstalled.&lt;/p&gt;

&lt;p&gt;You can just run it with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1880:1880 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mynodered nodered/node-red-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What about our persistent config?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Node-RED is started using NPM start from this /usr/src/node-red, with the –userDir
parameter pointing to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; directory on the container.
The flows configuration file is set using an environment parameter (FLOWS),
which defaults to ‘flows.json’.
This can be changed at runtime using the
following command-line flag. – from docs https://hub.docker.com/r/nodered/node-red-docker/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1880:1880 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FLOWS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_flows.json nodered/node-red-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we can choose only to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;flows.json&lt;/code&gt; file or we could map our user directory from our repository as a volume to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; in the container, providing the container our context.&lt;/p&gt;

&lt;p&gt;An other option is to bake your &lt;code class=&quot;highlighter-rouge&quot;&gt;userDir&lt;/code&gt; into your image.
This way you can provide your CI with a ready to go Docker image for this particular case.
This is probably not the best solution, but in some cases it can be very helpful.&lt;/p&gt;

&lt;h1 id=&quot;node-red-and-ci&quot;&gt;Node-RED and CI&lt;/h1&gt;

&lt;p&gt;As we now know how we can configure, dockerize and run our mock backend, we could easily include it in one of our testing stages during our Continuous Delivery pipelines setup.
For those of you whom read the article about the different stages of API testing (&lt;a href=&quot;https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html&quot;&gt;here&lt;/a&gt;), the following setup will need no further explanation.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/node-red-dev-ci/ci-setup.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this setup, the task at hand is running the automated tests defined in and run by our Gauge, Protractor or Nightwatch.js framework.
To be able to do this, it would be nice to launch an environment at once.
We can provide our Continuous Integration environment with a compose file that will launch and destroy our frontend and Node-RED mock backend in one environment.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It’s nice to have an external tool available that can get reused for multiple purposes, in our case development and testing.
Node-RED provides us with cool features and an easy to use User Interface to do so!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Node-RED" /><category term="docker" /><category term="Jenkins" /><category term="GoCD" /><category term="ci" /><summary type="html">Table of contents What is Node-RED Why we are using Node-RED (or an alternative) Node-RED to the rescue Configuration components Running an instance Creating your first flow Spicing things up JSON Node-RED persistent config Node-RED and Docker Node-RED and CI Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/node-red-dev-ci/node-red-dev-ci-white.png" /></entry><entry><title type="html">Testing Angular with jest</title><link href="https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest.html" rel="alternate" type="text/html" title="Testing Angular with jest" /><published>2018-08-03T00:00:00+00:00</published><updated>2018-08-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest.html">&lt;p&gt;Last year I learned about Jest, a testing framework. ‘Yet another one’ was my first thought.
Later that year my colleague and I were looking to extend our test coverage. We where using Jasmine to write the tests we had and Karma to run them.
It worked for sure and we had a lot of tests but it was like a punishment to write them every time, repeating the same code to mock things and when it finally worked and we pushed them to the CI they would sometimes fail randomly.
So we were eager to find a better way to test.&lt;/p&gt;

&lt;p&gt;Pretty quickly we started looking into Jest. It differentiated itself by not using Karma as a test runner.
We liked the idea because Karma actually has some points of failure which we encountered often.&lt;/p&gt;

&lt;h2 id=&quot;karma-vs-jest&quot;&gt;Karma vs Jest&lt;/h2&gt;

&lt;h3 id=&quot;karma&quot;&gt;Karma&lt;/h3&gt;

&lt;p&gt;Let me quickly give you an overview of what it is that Karma does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;it spawns a webserver to serve your source and test code;&lt;/li&gt;
  &lt;li&gt;it starts a browser from your machine and connects to the webserver;&lt;/li&gt;
  &lt;li&gt;it spawns a reporter which has a socket connection with the webserver;&lt;/li&gt;
  &lt;li&gt;it runs every test, awaits its result and sends it to the reporter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end we have 3 components communicating with each other. Which components exactly, dependends on the environment Karma is running on.
Our CI was a Linux machine, I had an Ubuntu to work on, my colleague was on MacOS, and other guys in the team were on Windows.
So we all had different Chrome versions which gave us some issues. And our CI used PhantomJS, which is outdated, so here we also had some issues.&lt;/p&gt;

&lt;h3 id=&quot;jest&quot;&gt;Jest&lt;/h3&gt;

&lt;p&gt;How are these issues fixed in Jest?
As I mentioned before Jest does not use Karma to run the tests, it will just start a single NodeJS process which does all the work by itself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;it compiles your code;&lt;/li&gt;
  &lt;li&gt;it runs your tests with NodeJs (or JSDOM for DOM testing);&lt;/li&gt;
  &lt;li&gt;it creates a report.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just plain and simple without too many interconnected processes to break.
Also, no real browser is needed on the machine since NodeJs and JSDOM are used.
Therefore the only tool to keep up to date is Jest, which is managed automatically via the Yarn lockfile&lt;/p&gt;

&lt;h2 id=&quot;set-up&quot;&gt;Set up&lt;/h2&gt;

&lt;p&gt;So how can you set it up and quickly replace all your tests (if you’re coming from Jasmine)?
To make Jest available in an Angular project, you first need to install Jest and &lt;a href=&quot;https://www.npmjs.com/package/jest-preset-angular&quot; target=&quot;_blank&quot;&gt;jest-preset-angular&lt;/a&gt;.
Since Jest is made for React (backed by Facebook, remember) we need jest-preset-angular to fix some things for us.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add -D @types/jest jest jest-preset-angular
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some configuration is always needed so let’s add some lines to the package.json (or export the config in a jest.config.js).
First we point to the preset that we will use. Next we provide a setup-jest.ts script in which we import some necessary files (we’ll create it later on).
Then we provide information about how Jest should transpile our code under the transform property. Therefore we point to the preprocessor from jest-preset-angular for our typescript and html files.
And for the Javascript files we’ll point to babel-jest (which ships with Jest).
The transformIgnorePatterns point to some libraries that don’t need to be transpiled for our tests. (If you get &lt;code class=&quot;highlighter-rouge&quot;&gt;Unexpected token import&lt;/code&gt; issues, you might need to add some packages here)&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jest-preset-angular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;setupTestFrameworkScriptFile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;rootDir&amp;gt;/src/setup-jest.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'^.+\\.(ts|html)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&amp;lt;rootDir&amp;gt;/node_modules/jest-preset-angular/preprocessor.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'^.+\\.js$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'babel-jest'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transformIgnorePatterns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'node_modules/(?!@ngrx|ng&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-translate|@ionic|lodash|ionic-angular)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned previously, we create a setup-jest.ts file in which we import some code from jest-preset-angular and a global mocks file.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jest-preset-angular'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./jest-global-mocks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the jest-global-mocks.ts we provide functionality that is not found in JSDOM but that we use in our code (and thus is found in our preferred browser).
So we mock things that are globally accessible, if you use certain browser API’s you should also mock them here.
For our example we needed the following code:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localStorage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sessionStorage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'getComputedStyle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-webkit-appearance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;backendUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mocked URl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, our tests use localStorage, sessionStorage, getComputedStyle and an environment property (__env) on the window.&lt;/p&gt;

&lt;p&gt;With everything set up we could run our test by running the Jest command&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course not much is running yet since all our tests use Jasmine, and ‘jasmine’ (as a keyword) is unknown to Jest.
To fix this we need to replace some Jasmine specific code by Jest specific code.&lt;/p&gt;

&lt;h2 id=&quot;jasmine-to-jest&quot;&gt;Jasmine to jest&lt;/h2&gt;

&lt;p&gt;In Jasmine we would create a mock object using Jasmine’s createSpyObj-function and passing some parameters in it.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSpyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'you'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'want'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Jest we just create an object with the expected properties, and jest.fn() creates a mock function for us.
This is a great improvement since you get better code hints and you can easily create more advanced mocks.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also to mock return values it is a bit different (for the better):&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And you can chain multiple return values if you need it&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yannick vergeylen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'everyone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or even with a function which can execute simple logic.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// But you shouldn't be implementing to much logic, since you don't want to test the tests.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or provide it at initialisation which saves you a line of code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the assertions you shouldn’t have to change much, since Jest uses almost the same assertion functions as Jasmine.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jasmine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mostRecent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to get the first argument of the first call (firstname)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;serviceMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to get the second argument of the first call (lastname)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I changed all our tests with some regexes, it is possible with some creativity, but today there are codemods which should do the hard work for you.
&lt;a href=&quot;https://jestjs.io/docs/en/migration-guide&quot; target=&quot;_blank&quot;&gt;Checkout the jest documentation&lt;/a&gt; to find out more.&lt;/p&gt;

&lt;p&gt;Jest really gets interesting when you use libraries and need to mock them:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Jest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/common/http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CompaniesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./companies.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rxjs/Observable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@angular/common/http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companiesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CompaniesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'the service should map the return value to an array of companies'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockReturnValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;companiesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]));&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'backendUrl/companies?page=6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of mocking HttpClient we can just import it, provide the return value we know backend will give and focus on testing the output of our getPage method.
In the above example you see I have to create a instance of httpClient to get around dependency injection in Angular, but other imports can also be mocked in the same way.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So one year later we are still using Jest and testing is still a lot more enjoyable than it was before.
Not painless as Jest claims it to be, but that’s just the nature of testing I guess.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;Vergeylen&quot;, &quot;github&quot;=&gt;&quot;yannickvergeylenord&quot;, &quot;linkedin&quot;=&gt;&quot;yannickvergeylen&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-vergeylen/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-vergeylen.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;yannick.vergeylen@ordina.be&quot;, &quot;phone&quot;=&gt;32476499054, &quot;bio&quot;=&gt;&quot;Yannick is a young and driven software developer. Widely interested and with a studious attitude he keeps looking for new ways to improve the web with better software and experiences.&quot;}</name><email>yannick.vergeylen@ordina.be</email></author><category term="Testing" /><category term="JWorks" /><category term="culture" /><summary type="html">Last year I learned about Jest, a testing framework. ‘Yet another one’ was my first thought. Later that year my colleague and I were looking to extend our test coverage. We where using Jasmine to write the tests we had and Karma to run them. It worked for sure and we had a lot of tests but it was like a punishment to write them every time, repeating the same code to mock things and when it finally worked and we pushed them to the CI they would sometimes fail randomly. So we were eager to find a better way to test.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-08-03-testing-angular-with-jest/jest.png" /></entry><entry><title type="html">Agile Leadership Game</title><link href="https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game.html" rel="alternate" type="text/html" title="Agile Leadership Game" /><published>2018-07-31T00:00:00+00:00</published><updated>2018-07-31T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/07/31/Agile-Leadership-Game.html">&lt;p&gt;Last week we, as the guild of agile coaches from Ordina, tried and tested the Agile Leadership Game developed by the Agile Consortium called ‘How Agile Are You?’.
In this blog post, we will provide you with some more information about the game.&lt;/p&gt;

&lt;h3 id=&quot;details&quot;&gt;Details&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2-6 players (even though more is possible)&lt;/li&gt;
  &lt;li&gt;Intended audience is management&lt;/li&gt;
  &lt;li&gt;Takes 1.5 hours (on average)&lt;/li&gt;
  &lt;li&gt;Needs a skilled facilitator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;game-play&quot;&gt;Game Play&lt;/h3&gt;
&lt;p&gt;This game has been designed to get discussions on agile leadership going and to ensure that people start observing behaviour that belongs (or does not belong) to an agile organisation.
It is specifically intended for management teams.
The game is focused on agile mindset and agile leadership: what do people and organisations need from management when engaged in an agile transformation?&lt;/p&gt;

&lt;p&gt;Participants are asked to very rapidly (! ten seconds per card on average :) !) divide fourty-two cards with ‘characteristics’ of organisations, over one of the quadrants on the board.
As a participant you are to decide how the characteristic manifests itself in your organisation at this moment.
The game board consists of the quadrants “LET GO, IGNORE, CREATE and KEEP” as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Agile Leadership Game&quot; src=&quot;/img/agile-leadership-game/Agile-Leadership-Game.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the characteristic on the card is behaviour that the organisation DOES HAVE at that time but that you DON’T WANT, the card gets sorted in the quadrant “LET GO”.
If the participant perceives the characteristic on the card as a behaviour the organisation DOES HAVE and that you DO WANT, it ends up at “KEEP” and so on.
An example of a characteristic is “management spends a lot of time putting out fires”.&lt;/p&gt;

&lt;p&gt;There is no right or wrong: the game provides insight in the current state of affairs.
The characteristics are labelled in types of behaviour belonging to types of organisations.
So you could end up with lots of characteristics belonging to agile organisations in the “CREATE” quadrant. :)&lt;/p&gt;

&lt;p&gt;After the time box for sorting the cards ends, the participants will discuss the characteristics that seem most relevant to them and their organisation.
Each participant gets the chance to enter at least one card/characteristic into the discussion.
This needs to be (well) facilitated by an experienced coach/agile master.
You can take as long as you like for the discussion and could do several discussion rounds, but we would recommend not to have it last for too long (1.5 hours max).&lt;/p&gt;

&lt;p&gt;After the discussion round it is useful to add an extra step in the game as to make the outcome more actionable:
the participants prioritise the top three of characteristics/topics they would like to let go or create.
These are the topics they can start working with the very next day!
This way you also prevent the session being perceived as just fun, irrelevant and/or without consequences.
Because there are fourty-two cards in the game and you won’t discuss them all, the game is most suitable to be played again at a later time – it won’t lose its value.&lt;/p&gt;

&lt;h3 id=&quot;outcomes-retrospective&quot;&gt;Outcomes retrospective:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Participants need some time to figure out how to play the game and how to work with the quadrants on the board.&lt;/li&gt;
  &lt;li&gt;An ice breaker to start with and a small warm up round increases effectiveness and actionable outcome of the game.&lt;/li&gt;
  &lt;li&gt;Making sure the topics in the discussion round are precisely those that matter most to the organisation and the participants, adds greatly to the usefulness of the session.&lt;/li&gt;
  &lt;li&gt;You need a skilled facilitator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TOP:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Very nice game to play, offering lots of insight and actionable openings to start your transformation at leadership level.&lt;/li&gt;
  &lt;li&gt;The game doesn’t take too long, can easily be played several times over time and can easily be fitted into a leadership programme, workshop, curriculum or “heidag”.&lt;/li&gt;
  &lt;li&gt;It’s a perfect self-assessment game for management teams that are wondering how agile they actually are as a team. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to try this game but don’t yet have an experienced facilitator available, don’t hesitate to reach out to us! We’d love to help!&lt;/p&gt;

&lt;p&gt;More information about the game can be found &lt;a href=&quot;https://www.agileconsortium.net/leadership-game/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maryse&quot;, &quot;last_name&quot;=&gt;&quot;Meinen&quot;, &quot;permalink&quot;=&gt;&quot;/author/maryse-meinen/&quot;, &quot;avatar&quot;=&gt;&quot;maryse-meinen.jpg&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;linkedin&quot;=&gt;&quot;mmeinen&quot;, &quot;email&quot;=&gt;&quot;maryse.meinen@ordina.nl&quot;, &quot;bio&quot;=&gt;&quot;Maryse is a Lean/Agile solution architect who has been working in IT since 2008. Inspiring more women to consider a career in tech is one of her ambitions. To Maryse, Lean and Agile philosophy is a way of life – and she’s convinced that a focus on Agile might bring about more women in IT.&quot;}</name><email>maryse.meinen@ordina.nl</email></author><category term="Agile" /><category term="Agile" /><category term="Agile Leadership Game" /><category term="Agile Consortium" /><summary type="html">Last week we, as the guild of agile coaches from Ordina, tried and tested the Agile Leadership Game developed by the Agile Consortium called ‘How Agile Are You?’. In this blog post, we will provide you with some more information about the game.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/agile-leadership-game/How-Agile-Are-You.jpg" /></entry></feed>