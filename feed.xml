<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-10-08T03:50:21+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">API first development with OpenAPI/Swagger</title><link href="https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger.html" rel="alternate" type="text/html" title="API first development with OpenAPI/Swagger" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;p&gt;1.&lt;a href=&quot;#api-first-development---why-how-and-what&quot;&gt;API first development - Why, how and what&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&quot;#api-design-an-example&quot;&gt;API design: an example&lt;/a&gt;&lt;br /&gt;
3.&lt;a href=&quot;#api-first-development-with-openapiswagger&quot;&gt;API first development with OpenAPI/Swagger&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&quot;#hosting-your-visualisations&quot;&gt;Hosting your visualisations&lt;/a&gt;&lt;br /&gt;
5.&lt;a href=&quot;#integrating-with-postman&quot;&gt;Integrating with Postman&lt;/a&gt;&lt;br /&gt;
6.&lt;a href=&quot;#openapi-generator-generate-api-compliant-code&quot;&gt;OpenAPI Generator: generate API compliant code&lt;/a&gt;&lt;br /&gt;
7.&lt;a href=&quot;#integrating-swaggeropenapi-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Integrating with your build process: maven or gradle plugin&lt;/a&gt;&lt;br /&gt;
8.&lt;a href=&quot;#serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Serverless on AWS: OpenAPI, API Gateway Lambda and SAM&lt;/a&gt;&lt;br /&gt;
9.&lt;a href=&quot;#code-first-with-springfox&quot;&gt;Springfox&lt;/a&gt; &lt;br /&gt;
10.&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;I’ll start of with a lecture about API first development and it’s advantages.(&lt;a href=&quot;#api-first-development---why-how-and-what&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;We will discover how to visualize our API specs. (&lt;a href=&quot;#api-first-development-with-openapiswagger&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Generate a postman collection from your OpenAPI definition. (&lt;a href=&quot;#integrating-with-postman&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Next I’ll show you how to generate code that is completely compliant with your API specs. (&lt;a href=&quot;#openapi-generator-generate-api-compliant-code&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;We then dive into how to integrate this in your build process by using maven or gradle plugins. (&lt;a href=&quot;#integrating-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;To finish it up I’ll demonstrate how to use it in a cloud native serverless product with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS SAM&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Lambda&lt;/code&gt;. (&lt;a href=&quot;#serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Wrapping it up with a conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An API or Application Programming Interface is a way of exposing your company’s digital services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is the layer through which your services communicate with other services.&lt;/p&gt;

&lt;h1 id=&quot;api-first-development---why-how-and-what&quot;&gt;API first development - Why, how and what&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Great communication is key to great software engineering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That also goes for applications and services.
If your applications cannot communicate properly, you’ll never be able to expose the functionality that is key to a good product.&lt;/p&gt;

&lt;p&gt;We also see the following trends in software engineering:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Shift towards the cloud.&lt;/strong&gt;&lt;br /&gt;
Instead of big monolitic applications we are building lot’s of smaller (micro)services.
All communication between those services goes through the API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multiple frontend applications use the same backend.&lt;/strong&gt;&lt;br /&gt;
Often these applications are created by separate teams.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;An API carries business value.&lt;/strong&gt;  &lt;br /&gt;
There is real money in your API.&lt;br /&gt;
Defining APIs gives us the opportunity to expose our application’s functionality and create bridges between our provider and consumers.
The easier it is to integrate with your API, the higher the acceptance rate of consumers for your product will be.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of the cases above, there is value in good communication between services.
And that’s why you should practice API first development.
Put your communication first!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first priority in your API first development story is a clear API definition&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you practice API first development?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Design your API before implementing it.&lt;/em&gt;&lt;br /&gt;
This will allow teams to develop their applications separately because they both know and understand how communication between the services will happen.
The contract between services is set.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Understand that the API is the interface for your application.&lt;/em&gt;&lt;br /&gt;
It is the intersection where multiple services join hands to couple their functionality.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Visualize your API&lt;/em&gt;&lt;br /&gt;
An image says more then a thousand words. We’ll see how OpenAPI can help you with this.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;API first development allows teams to develop separately against a common interface, the API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we understand the importance of and value of API first design let’s see how the Swagger/OpenAPI spec can help you with that.&lt;/p&gt;

&lt;h2 id=&quot;top-down-vs-bottom-up&quot;&gt;Top-down vs bottom-up&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;API first development implies a top-down approach to build your API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically there are two approaches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Top-down aka Design First&lt;/li&gt;
  &lt;li&gt;Bottom-up aka Code First&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To quote &lt;code class=&quot;highlighter-rouge&quot;&gt;Swagger.io&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Design First: The plan is converted to a human and machine readable contract, such as a Swagger document, from which the code is built.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code First: Based on the business plan, API is directly coded, from which a human or machine readable document, such as a Swagger document can be generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog post I am using the Top-down Design First approach to facilitate API first development.
In the last paragraph of this blog I’ll briefly show an example of a Code First approach with &lt;code class=&quot;highlighter-rouge&quot;&gt;Springfox&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;api-design-an-example&quot;&gt;API design: an example&lt;/h1&gt;
&lt;p&gt;Suppose that we, &lt;strong&gt;&lt;em&gt;Ordina&lt;/em&gt;&lt;/strong&gt;, are hosting a conference where multiple technical and agile sessions will be given.
Users can check session information and register for sessions.
The backend service is accessed by a web application and two mobile apps.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/design.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The applications are created by different teams and they all embrace the &lt;strong&gt;API first&lt;/strong&gt; approach.&lt;/p&gt;

&lt;p&gt;They read this blog and realised that by agreeing on the common interface first, they could develop separately without impacting each other.
So hooray for API first development!&lt;/p&gt;

&lt;h1 id=&quot;api-first-development-with-openapiswagger&quot;&gt;API first development with OpenAPI/Swagger&lt;/h1&gt;
&lt;p&gt;Let’s continue with creating the backend application.&lt;/p&gt;

&lt;p&gt;The functional analysts and a couple of developers of the team are sitting together to agree on how the API should be defined.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A client should be able to fetch all sessions via the API&lt;/li&gt;
  &lt;li&gt;A client should be able to create a new session via the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a crucial part of the API first mindset.
We need to clearly define and communicate the API before starting to implement.
Designing an API is easier when you can visualise the API.
Let’s bring in the OpenAPI spec.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The OpenAPI specification allows you to define your API in a descriptive language (JSON or Yaml) and nicely visualise it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now use OAS to help us with our API First approach and design our API.
Note that by OAS I mean OpenAPI Specification.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OAS stands for OpenAPI Specification (formerly known as Swagger Specification)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are confused about the difference between OpenAPI and Swagger, check out &lt;a href=&quot;https://swagger.io/docs/specification/about/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Time to introduce you to &lt;a href=&quot;https://editor.swagger.io&quot; target=&quot;_blank&quot;&gt;https://editor.swagger.io&lt;/a&gt;, a portal to visualise…
Easy to use and offering all the functionality we need for this example.&lt;/p&gt;

&lt;p&gt;I’ll keep it simple, we will create the OAS for exposing the endpoint to let consumers fetch the sessions of the conference.&lt;br /&gt;
The OAS allows you to use JSON or Yaml to describe your API.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/swagger-layout.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Find the descriptive yaml via &lt;a href=&quot;https://gist.github.com/Nxtra/8ff9a7fd33186309e909df8f5a20cb28&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; gist.&lt;/p&gt;

&lt;p&gt;As you can see from the example, the OpenAPI specification is very readable.
Even if it’s new to you, you should be able to deduct what is written in the yaml.&lt;br /&gt;
You like looking at raw yaml?
Sure you don’t! 
There is a great visualisation to the right of it.
This clearly visualises what your API can do.
Clear visualisations mean clear communication.&lt;/p&gt;

&lt;p&gt;The API in the example is small.
When describing a whole real-world API, the file might become quite large.
But that’s no problem.
The OpenAPI spec allows you to split your definitions over multiple files which you can reference from within other files.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OpenAPI Takeaways: Easy descriptive language &amp;amp; great visualisations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You want to expose your beautiful visualisation to your clients.
They shouldn’t have to paste a &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml&lt;/code&gt; file in a window of their browser all the time.
How do we do that? 
Let’s find out next.&lt;/p&gt;

&lt;h1 id=&quot;hosting-your-visualisations&quot;&gt;Hosting your visualisations&lt;/h1&gt;
&lt;p&gt;The API specifications should be easily accessible for you and your clients.
The specification which you agreed upon, should be hosted somewhere for everyone to see.
Sometimes companies have there own in-house tools to visualise OAS.
If your company has no such tool there are plenty of other tools to visualize your API defined with OAS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Choose a visualisation solution that allows you to show a diff between versions of your API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A couple of hosted solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://swagger.io/tools/swaggerhub/&quot; target=&quot;_blank&quot;&gt;swaggerhub.com&lt;/a&gt;: Platform for API design and hosting by &lt;code class=&quot;highlighter-rouge&quot;&gt;SMARTBEAR&lt;/code&gt; itself&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://next.stoplight.io/&quot; target=&quot;_blank&quot;&gt;next.stoplight.io&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/next-stoplight.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://readme.com/&quot; target=&quot;_blank&quot;&gt;readme.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/readme-io.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apiary.io/&quot; target=&quot;_blank&quot;&gt;apiary&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redocly:  Redoc allows you to host via github pages. 
You can also host locally and integrate with Github pages for publishing your API.
Use this &lt;a href=&quot;https://github.com/Redocly/create-openapi-repo&quot; target=&quot;_blank&quot;&gt;Generator&lt;/a&gt; to create a repository for your API spec.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/redocly.gif&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;integrating-with-postman&quot;&gt;Integrating with Postman&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can create a working Postman collection from the OpenAPI spec&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don’t have to tell me how difficult it is to keep a Postman collection up to date with an evolving API!
More so, you have to make sure that every member of your team has the latest version of your API collection.&lt;/p&gt;

&lt;p&gt;Good news!
Postman can import a collection directly from the OAS.
In the Postman UI go to &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; and import from &lt;code class=&quot;highlighter-rouge&quot;&gt;raw text&lt;/code&gt;.
Just like I did in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/postman-oas.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see on the background of the image above, the request was correctly imported from the Swagger file.&lt;/p&gt;

&lt;h1 id=&quot;openapi-generator-generate-api-compliant-code&quot;&gt;OpenAPI Generator: generate API compliant code&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Generate code that is compliant with your API spec with OpenAPI Generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you’ve agreed upon the specification of your API it is time to start implementing it!
The specification is shared across the different teams and they can each start implementing separately.&lt;/p&gt;

&lt;p&gt;Time to code!&lt;br /&gt;
If I write code, I might make mistakes.
So let’s generate code that is completely compliant with the specs.&lt;/p&gt;

&lt;p&gt;OpenAPI Generator is a hugely popular &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot; target=&quot;_blank&quot;&gt;repository&lt;/a&gt; on github.
It allows you to generate code that is completely in line with your API specification.&lt;/p&gt;

&lt;p&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt; you can just install the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator-cli&lt;/code&gt; by installing it via brew.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openapi-generator-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also checkout the github project, build it and use that jar.&lt;/p&gt;

&lt;p&gt;You have the cli installed and created a directory which contains your api.yml file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/repo-dir.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s generate the code!&lt;/p&gt;

&lt;p&gt;You could generate a whole project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That would generate a whole Java project with a bunch of files.
Let’s start a little smaller.&lt;/p&gt;

&lt;p&gt;If you followed along clear the directory with&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For starters we only want to generate the model classes:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java &lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Models here refer to your DTO’s (Data Transfer Objects) or Resources.
These are different from your domain models or entity models.&lt;/p&gt;

&lt;p&gt;Let’s see what we did here:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate is the command that we give to the openapi-generator cli to instruct it to generate the code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The input file that contains our API specifications.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generator to use.
Here we specify that we want Java as output language.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are telling the generator to only generate the models for our API.&lt;/p&gt;

&lt;p&gt;If you want help or you forgot one of the options you can look &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/README.md#3---usage&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; or execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you execute this command you’ll see that there are a lot more options.
We could for example do the following&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-DmodelTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--model-name-suffix&lt;/span&gt; Dto &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--model-package&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.ordina.conference_app.model&quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useBeanValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; models without creating test classes and puts them in a package &lt;code class=&quot;highlighter-rouge&quot;&gt;com.ordina.conference_app.model&lt;/code&gt;.
It suffixes them with &lt;code class=&quot;highlighter-rouge&quot;&gt;Dto&lt;/code&gt; since that’s what they are.
These classes are used to transfer data in and out of the application (&lt;code class=&quot;highlighter-rouge&quot;&gt;Dto&lt;/code&gt; aka Data Transfer Object).&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/generate-dtos-in-package-with-beanvalidation.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bean-validation&quot;&gt;Bean Validation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Keep your generated class files in sync with the requirements of the API specs by setting the useBeanValidation option to true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the last example I also specified a property &lt;code class=&quot;highlighter-rouge&quot;&gt;useBeanValidation=true&lt;/code&gt;.&lt;br /&gt;
Requirements specified in the API documentation like a required field are now translated to the code.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; on the  &lt;code class=&quot;highlighter-rouge&quot;&gt;speaker&lt;/code&gt; field in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionDto&lt;/code&gt; class is now annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt;.&lt;br /&gt;
You can now use a framework like &lt;code class=&quot;highlighter-rouge&quot;&gt;JSR 380&lt;/code&gt;, known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Bean Validation 2.0.&lt;/code&gt;, to validate input and output.&lt;br /&gt;
This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt; specific example, but the same will happen when you change to other languages by using eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;-g python&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/SessionDto.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now that we got acquainted with code generation I am going to show you how to include it in your build process.&lt;/p&gt;

&lt;h1 id=&quot;integrating-swaggeropenapi-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Integrating Swagger/OpenAPI with your build process: maven or gradle plugin&lt;/h1&gt;
&lt;p&gt;There are maven and gradle plugins that support the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator&lt;/code&gt; project. 
(&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin&quot; target=&quot;_blank&quot;&gt;maven&lt;/a&gt; and &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin&quot; target=&quot;_blank&quot;&gt;gradle&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I started a maven project and included our &lt;code class=&quot;highlighter-rouge&quot;&gt;api.yml&lt;/code&gt; on the classpath.
Now it is a matter of configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator-build-plugin&lt;/code&gt; in our maven &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want to configure it to behave the same way as the example above.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.openapitools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;openapi-generator-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;generate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;inputSpec&amp;gt;&lt;/span&gt;openapi.yaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/inputSpec&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;output&amp;gt;&lt;/span&gt;${project.basedir}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generatorName&amp;gt;&lt;/span&gt;java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generatorName&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;addCompileSourceRoot&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/addCompileSourceRoot&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;skipOverwrite&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/skipOverwrite&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelNameSuffix&amp;gt;&lt;/span&gt;Dto&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelNameSuffix&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelPackage&amp;gt;&lt;/span&gt;be.ordina.conference.api.model&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelPackage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModels&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModels&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModelTests&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModelTests&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModelDocumentation&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModelDocumentation&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateApis&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateApis&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateSupportingFiles&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateSupportingFiles&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;library&amp;gt;&lt;/span&gt;jersey2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/library&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;configOptions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dateLibrary&amp;gt;&lt;/span&gt;java8-localdatetime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dateLibrary&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;java8&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java8&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;useBeanValidation&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/useBeanValidation&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sourceFolder&amp;gt;&lt;/span&gt;src/java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sourceFolder&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configOptions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Important to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The generated models will appear in the current module under &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/java/be/ordina/conference/api/model&lt;/code&gt;
That is caused by the combination of multiple options:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;output&amp;gt;${project.basedir}&amp;lt;/output&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sourceFolder&amp;gt;src/java&amp;lt;/sourceFolder&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;modelPackage&amp;gt;be.ordina.conference.api.model&amp;lt;/modelPackage&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Only the API models will be generated, with markdown documentation and no test classes.
That’s a combination of:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModels&amp;gt;true&amp;lt;/generateModels&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModelTests&amp;gt;false&amp;lt;/generateModelTests&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModelDocumentation&amp;gt;true&amp;lt;/generateModelDocumentation&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateApis&amp;gt;false&amp;lt;/generateApis&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateSupportingFiles&amp;gt;false&amp;lt;/generateSupportingFiles&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://gist.github.com/Nxtra/4c92fa9a6c2fb62a8c606128ae8ca87f&quot; target=&quot;_blank&quot;&gt;this gist&lt;/a&gt; for the xml.&lt;/p&gt;

&lt;h1 id=&quot;testing-your-api&quot;&gt;Testing your API&lt;/h1&gt;
&lt;p&gt;Testing you API would normally involve setting up a larger integration test.
In the case of AWS Lambda this means that you’d have to deploy your application since you cannot run it locally (Not that easily at least).
Luckily we have set the &lt;code class=&quot;highlighter-rouge&quot;&gt;useBeanValidation&lt;/code&gt; property to true.
This allows us to write unit tests that validate the incoming and outgoing requests of our function.&lt;/p&gt;

&lt;p&gt;After you deserialize the incoming request you can validate it against your API specs:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SessionDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If some violations are detected you can return them wrapped in a 400 response.
You could easily check this functionality by writing a unit test that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;checks that no violations are found in the case of a valid request body&lt;/li&gt;
  &lt;li&gt;checks that violations are found in case a payload is sent which is not compliant with the API specs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same goes for the responses. 
In your code validate the response against your API specifications by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;responseDto&lt;/code&gt; that was generated from the specs:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateSessionResponseDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If this finds any violations throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintValidationException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again a unit test can validate that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;no violations are found when the response is validated&lt;/li&gt;
  &lt;li&gt;no exception is thrown&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Serverless on AWS: OpenAPI, API Gateway Lambda and SAM&lt;/h1&gt;
&lt;p&gt;It’s fairly easy to create an API Gateway from an openAPI specification.
In the API Gateway console under &lt;em&gt;Create&lt;/em&gt; select &lt;em&gt;Import from Swagger or Open API 3&lt;/em&gt; and upload your specification.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/create-apigateway.gif&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Of course we want to use the specification programmatically.
Suppose we create our backend service with AWS Lambda (serverless).
I’ll be using AWS native tools and use SAM to deploy the Lambda functions and my API.
SAM allows you to use an OpenAPI specification to create your API Gateway.&lt;/p&gt;

&lt;p&gt;In your SAM template define the API Gateway resource by referencing your OAS.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;ConferenceApiGateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Serverless::Api&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;StageName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DefinitionBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;Fn::Transform:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Include&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./openapi.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Lambda function resource specify that the lambda should be triggered from this API Gateway.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;GetAllSessionsFunction&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CreateSessionApi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Api&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;RestApiId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!Ref&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConferenceApiGateway&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/sessions&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amazon-apigateway-integration&lt;/code&gt; extension in your &lt;code class=&quot;highlighter-rouge&quot;&gt;api.yml&lt;/code&gt; to specify how the api has to integrate with the backend Lambda service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/sessions&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;x-amazon-apigateway-integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_proxy&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;httpMethod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllSessionsFunction.Arn}/invocations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a full template example including the Lambda resources, check out this &lt;a href=&quot;https://gist.github.com/Nxtra/3600ccab85d92faebf3c465701ba7c21&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;code-first-with-springfox&quot;&gt;Code First with Springfox&lt;/h1&gt;
&lt;p&gt;I promised you an example of a code first approach.
Here I set up a Spring boot application with Springfox dependencies.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-bean-validators&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implementing the API and using the right annotations leads to an endpoint of your application on which your API spec is visualised: &lt;code class=&quot;highlighter-rouge&quot;&gt;/swagger-ui.html&lt;/code&gt;
There is also an endpoint to download the Swagger / OpenAPI specification:  &lt;code class=&quot;highlighter-rouge&quot;&gt;api-docs&lt;/code&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/springfox.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Here are some takeaways about API first development:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Design the API before implementing it&lt;/li&gt;
  &lt;li&gt;Visualize your API so that dependent teams can easily consult it&lt;/li&gt;
  &lt;li&gt;API first development implies a top-down approach&lt;/li&gt;
  &lt;li&gt;Swagger/OpenAPI can help you with API first development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below the pros and cons of practising API first development using Swagger/OpenAPI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Strong tooling support — AWS, Postman, visualizing the API, generate skeleton classes, …&lt;/li&gt;
  &lt;li&gt;Strong consistency between API spec and Web layer of the code&lt;/li&gt;
  &lt;li&gt;Example support&lt;/li&gt;
  &lt;li&gt;Documenting API descriptions is separated from code. Annotations are added to the generated code but you won’t be responsible for constantly updating them to keep documentation in sync.&lt;/li&gt;
  &lt;li&gt;Functional analyst can assist with creating the API specs because it’s a human readable format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No support for complex/variable request/response scenarios&lt;/li&gt;
  &lt;li&gt;Little extra documentation can be added in the API specs&lt;/li&gt;
  &lt;li&gt;If you add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; in the specification, your clients have to regenerate their code in order to be able to accept the enum.&lt;/li&gt;
  &lt;li&gt;Development can only start after API is designed&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scratchpad.blog/serverless/howto/configure-aws-api-gateway-with-swagger/&quot;&gt;https://scratchpad.blog/serverless/howto/configure-aws-api-gateway-with-swagger/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jthomerson/cloudformation-template-for-lambda-backed-api-gateway-with-dynamodb&quot;&gt;https://github.com/jthomerson/cloudformation-template-for-lambda-backed-api-gateway-with-dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/how-to-make-swagger-codegen-work-for-your-team-32194f7d97e4&quot;&gt;https://medium.com/capital-one-tech/how-to-make-swagger-codegen-work-for-your-team-32194f7d97e4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;https://github.com/OpenAPITools/openapi-generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://howtodoinjava.com/swagger2/code-generation-for-rest-api/&quot;&gt;https://howtodoinjava.com/swagger2/code-generation-for-rest-api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#globals-section&quot;&gt;https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#globals-section&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/&quot;&gt;https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java &amp; JavaScript developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build his expertise by contributing to valuable projects. Serverless, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="API" /><category term="cloud" /><summary type="html">Table of content</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/featured-image.png" /></entry><entry><title type="html">Home Automation part 1</title><link href="https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1.html" rel="alternate" type="text/html" title="Home Automation part 1" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#platforms&quot;&gt;Platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this series of blogposts we are going to take a deeper look into home automation.
Home automation is the wonderful art of automating your home so it becomes easier to do certain tasks.
It is a very wide field where there are many available options, platforms and devices.
If you are willing to get creative almost everything can be automated!&lt;/p&gt;

&lt;p&gt;In this first blogpost we’ll present some of the platforms that are available and some of the pros &amp;amp; cons of each one.
To close off this blogpost we’ll start by looking into Apple’s HomeKit and by extension HomeBridge.&lt;/p&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;In the world of home automation there are many ways to automate stuff.
We will be focussing on either cloud-enabled platforms or those that can be run on premise.
The hardware vendor based platforms (e.g.: Niko) will not be included!&lt;/p&gt;

&lt;p&gt;The platforms can be split up into two main parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud enabled, mainly from manufacturers and larger phone companies&lt;/li&gt;
  &lt;li&gt;On-premise platforms (that do not require internet/cloud access)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security is a very important aspect in the home automation world!
The best way one would go about to automating one’s home would be completely independent from any cloud-based services/APIs.
Internet access can be intermittent, cloud based API’s can be down or even be shut down permanently.
Even worse, accounts could be breached giving unknown third parties access to your home’s devices!&lt;/p&gt;

&lt;p&gt;However, most people already have some smart devices and most of these have their own app, so ditching any cloud-based systems is going to be a lot harder/more expensive.
As with any online service use a strong unique password for each different service and enable multifactor authentication whenever possible!
Using all these different apps can be very cumbersome: using app A to turn on the lights, using app B to turn on the TV, using app C to change the thermostat, you get the picture.
Some of these smart devices support home automation platforms, some do not.
As we will see later on, even those that do not support a home automation platform out of the box can mostly be made to do so!&lt;/p&gt;

&lt;p&gt;The platforms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud enabled (more well known):
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.apple.com/be-nl/shop/accessories/all-accessories/homekit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple HomeKit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://assistant.google.com/explore/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Assistant/Google Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/b/ref=aeg_lp_sh_d/ref=s9_acss_bw_cg_aegflp_4b1_w?node=17934679011&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=merchandised-search-6&amp;amp;pf_rd_r=0E90B2MD8KGD1D7KVEM1&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=02147624-e148-4901-b449-773097cfa62e&amp;amp;pf_rd_i=17934672011&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://xiaomi-mi.com/mi-smart-home/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Xiaomi Mi Smart Home&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On-premise solutions (lesser known, but safer)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.openhab.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;openHAB&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apple-homekit&quot;&gt;Apple HomeKit&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;HomeKit&quot; src=&quot;/img/2019-09-30-home-automation/homekit.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apple’s home automation platform is called HomeKit.
It can be used on all iOS and macOS X devices, giving us access to it from everywhere.
By default, HomeKit control is limited to your local network only.
If we add an Apple TV/HomePod/iPad as a hub it will allow for remote access through iCloud.
For the best results I would recommend to use an Apple TV (gen 4 or later) connected through ethernet.&lt;/p&gt;

&lt;p&gt;Automations can be made using the app (some special automations require a hub though).
These automations can be based on a number of different triggers &amp;amp; conditions (sensors/state change/people coming home or leaving/time of day/…)
An automation can change the state of a device, or change the state of multiple devices if they have been grouped into a scene.&lt;/p&gt;

&lt;p&gt;HomeKit supports many devices, which can be identified by ‘works with Apple HomeKit’ logo.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Works with HomeKit&quot; src=&quot;/img/2019-09-30-home-automation/works-with-homekit.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 250px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of these include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hue&lt;/li&gt;
  &lt;li&gt;Tadoo&lt;/li&gt;
  &lt;li&gt;Eve&lt;/li&gt;
  &lt;li&gt;and many others…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your device is not supported but has its own app/API there is a big chance you can get it to work by installing Homebridge and adding that to your home app in iOS.
Scroll down to the example section of this blogpost if you want to learn more on how to set this up yourself.&lt;/p&gt;

&lt;h3 id=&quot;google-home&quot;&gt;Google Home&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Google Assistant&quot; src=&quot;/img/2019-09-30-home-automation/google.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google’s home automation platform is called Google Assistant / Google Home. Both assistant and home are used to control smart devices.
It can be used on Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To make best use of all the features, a Google Home Hub or a Google Home (Mini) is required.
Google Assistant supports many devices (much more than HomeKit), these can be added via the app.
After setup you can ask the assistant to perform certain tasks and change the state of devices.&lt;/p&gt;

&lt;p&gt;Automations with Google Assistant are called &lt;a href=&quot;https://support.google.com/googlenest/answer/7029585&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;routines&lt;/a&gt;.
For the time being, these are not quite as extensive as HomeKit or Home Assistant/openHAB.
You can make routines that are based on a time of day event or people coming home/leaving.
Triggering routines based on state changes of the smart devices is not supported for now.
This will supposedly be added in the future.&lt;/p&gt;

&lt;h3 id=&quot;amazon-alexa&quot;&gt;Amazon Alexa&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Alexa&quot; src=&quot;/img/2019-09-30-home-automation/alexa.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon’s home automation platform is part of its Alexa assistant.
It can be used on Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To make best use of all the features an echo device is required.
Alexa supports many devices, much more than HomeKit.
These can be added via the app.
After setup you can ask Alexa to perform certain tasks and change the state of devices.&lt;/p&gt;

&lt;p&gt;Automations with Alexa are called routines.
These routines are like the scenes and routines that exist with HomeKit &amp;amp; Google Assistant.
The routines can be triggered like in HomeKit, by devices/sensors, coming home or leaving, time of day.&lt;/p&gt;

&lt;p&gt;You can get very creative with the routines, a funny example below, pity the intruder that is caught up in this encounter!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Alexa routine example&quot; src=&quot;/img/2019-09-30-home-automation/alexa-intruder-meme.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;home-assistant&quot;&gt;Home Assistant&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Home Assistant&quot; src=&quot;/img/2019-09-30-home-automation/home-assistant.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Home Assistant is a fully open source home automation platform that is fully focussed on the user’s privacy.
It can be used in the browser as well as on iOS and Android devices.&lt;/p&gt;

&lt;p&gt;It can be run locally with no need of any cloud service. A Raspberry Pi 3B is all you need.
Home Assistant has support for over a thousand integrations that are supported by the platform.
If you want to create your own integration, a fully documented &lt;a href=&quot;https://developers.home-assistant.io/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;developer portal&lt;/a&gt; will assist you.
The integrations are written in Python 3.&lt;/p&gt;

&lt;p&gt;Automations are called as what they are, automations.
They can control devices or perform actions (calling services etc.) based on triggers.
These triggers can be various things like in the previously mentioned platforms, but Home Assistant takes it one step further and allows for very fine-grained and very detailed/specific triggers.&lt;/p&gt;

&lt;p&gt;Location tracking &amp;amp; presence detection is also possible but requires the integration and use of &lt;a href=&quot;https://owntracks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Owntracks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;openhab&quot;&gt;openHAB&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;openHAB&quot; src=&quot;/img/2019-09-30-home-automation/openhab.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like Home Assistant, openHAB is a fully open source home automation platform.
It can be used in the browser as well as on iOS and Android devices.&lt;/p&gt;

&lt;p&gt;It can be run locally with no need of any cloud service.
A Raspberry Pi 3B is all you need.
It also supports well over a thousand existing integrations and can easily be extended.
It is written in Java and can be configured with a DSL.&lt;/p&gt;

&lt;p&gt;Automations are called rules.
These can be configured with the platform’s DSL.
They can control devices or perform actions (calling services etc.) based on triggers.
These triggers can really be anything you can think of, any integration or trigger action you can think of, it can be done.&lt;/p&gt;

&lt;p&gt;OpenHAB does require quite a bit of research.
Do not jump into this platform without doing some digging beforehand.
Its documentation is very extensive and is very well made.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h3 id=&quot;homekit--homebridge&quot;&gt;HomeKit &amp;amp; Homebridge&lt;/h3&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-1.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit devices 1&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2019-09-30-home-automation/homekit-1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-2.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit devices 2&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2019-09-30-home-automation/homekit-2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-3.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit automations&quot;&gt;
        &lt;img alt=&quot;HomeKit automations&quot; src=&quot;/img/2019-09-30-home-automation/homekit-3.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32.7%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Below is how my home is set up, which plugins I use (and made myself).&lt;/p&gt;

&lt;p&gt;The only official HomeKit device I own is my thermostat, all other devices are exposed to HomeKit through Homebridge.
Homebridge is a NodeJS server that exposes custom devices to be used inside the HomeKit platform.
It can be installed and configured easily, for example on a Raspberry Pi and provides a code or QR code during startup which you can use to add the HomeKit bridge to your setup.&lt;/p&gt;

&lt;p&gt;A list of all devices I use through Homebridge with their according plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nest protects - &lt;a href=&quot;https://www.npmjs.com/package/homebridge-nest&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-nest plugin&lt;/a&gt;, only possible now if you already have a nest developer account and the required keys.&lt;/li&gt;
  &lt;li&gt;Unifi protect cameras &lt;a href=&quot;https://www.npmjs.com/package/homebridge-camera-ffmpeg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-camera-ffmpeg plugin&lt;/a&gt;&lt;a href=&quot;https://www.npmjs.com/package/homebridge-unifi-protect-motion-sensors&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-unifi-protect-motion-sensors plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Smartwares smart wifi switch &amp;amp; RF outlets &lt;a href=&quot;https://www.npmjs.com/package/homebridge-homewizard-flamingo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-homewizard-flamingo plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Somfy based shutters &lt;a href=&quot;https://www.npmjs.com/package/homebridge-somfy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-somfy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LG Airco unit &lt;a href=&quot;https://www.npmjs.com/package/homebridge-lg-airco&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-lg-airco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many, many more devices and integrations available for use with Homebridge.
You can find these by looking on the &lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NPM plugin repository&lt;/a&gt; and searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;homebridge-PLUGINNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These plugins can be installed by installing the NPM package globally and adding said package to the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt; of the Homebridge instance.
The main page of the &lt;a href=&quot;https://github.com/nfarina/homebridge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repo&lt;/a&gt; explains in detail how to set everything up so you too can get started quickly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Home automation is a wonderful thing.
It can make your live easier in various ways.
It is however required to think things through and to do some research before jumping into this.
Looking into what devices are supported, out of the box, or via custom integrations/plugins is very important.
If you have some programming experience and some time to spare you can very easily make your own integrations for devices that are not supported.&lt;/p&gt;

&lt;p&gt;In the coming months we’ll be diving a bit deeper into the wonderful world of home automation with more in-depth blog posts about HomeKit with Homebridge and openHAB.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apple.com/be-nl/shop/accessories/all-accessories/homekit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple HomeKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://assistant.google.com/explore/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Assistant/Google Home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/b/ref=aeg_lp_sh_d/ref=s9_acss_bw_cg_aegflp_4b1_w?node=17934679011&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=merchandised-search-6&amp;amp;pf_rd_r=0E90B2MD8KGD1D7KVEM1&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=02147624-e148-4901-b449-773097cfa62e&amp;amp;pf_rd_i=17934672011&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xiaomi-mi.com/mi-smart-home/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Xiaomi Mi Smart Home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant developer portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owntracks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Owntracks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openhab.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;openHAB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://homebridge.io/&quot;&gt;Homebridge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;Homebridge GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/homekit/configuring_a_home_automation_device&quot;&gt;HomeKit catalog, Apple&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KhaosT/HAP-NodeJS/&quot;&gt;HomeKit application protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/search?q=homebridge-plugin&quot;&gt;Homebridge plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his role as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="Machine Learning" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="Home" /><category term="Smart Home" /><category term="Automation" /><category term="Home Automation" /><category term="Siri" /><category term="Apple" /><category term="Google Assistant" /><category term="Amazon" /><category term="Alexa" /><category term="HomeKit" /><category term="Home Assistant" /><category term="openHAB" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-30-home-automation/banner.jpg" /></entry><entry><title type="html">JavaScript Testing 101</title><link href="https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101.html" rel="alternate" type="text/html" title="JavaScript Testing 101" /><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101.html">&lt;h1 id=&quot;javascript-unit-testing-101&quot;&gt;JavaScript unit testing 101&lt;/h1&gt;

&lt;p&gt;In this blog post I will explain how to write unit tests for JavaScript. For the examples, we will be using jasmine and ts-mockito, but the theory should be applicable to every testing framework.
 Why am I using two frameworks here instead of only jasmine? Well, in my opinion, jasmine relies too much on magic strings that might give problems during refactoring and makes autocompletion impossible in a lot of cases (depending on how good your IDE is).
Ts-mockito is a mocking framework that allows you to create mocks based on a class, so you don’t have to tell it the method names to mock.
There are other good mocking frameworks for typescript as well, but my experience is with ts-mockito, so I will be using it for the examples of this blog post.
or the code examples I used the Angular CLI to generate a project for me, but I will not be using any of the Angular testing tools to keep these test cases completely framework independent.
The Angular CLI was just an easy way to quickly get everything up and running.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;p&gt;The beginning of a test is naming it. 
I write every test in the same structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe: ‘classname’

    ↪ constant values used in the test

    ↪ mock declarations

    ↪ classUnderTest declaration

    ↪ beforeEach to setup the test

    ↪ describe: ‘methodname’:

        ↪ it ‘should return this when input is so and so’

        ↪ it ‘should return this value if input is something else’
		
    ↪ describe: ‘other method name’:
	
        ↪ it‘should return this when input is so and so’
		
        ↪ it‘should return this value if input is something else’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows you to quickly see from your testing log, which method from which class has a bug.
 I personally always try to call the object you are testing something like ‘componentUnderTest’ or ‘serviceUnderTest’.
This allows you to very quickly see in a unit test, which object is actually being tested.&lt;/p&gt;

&lt;p&gt;When you want to mock certain dependencies of your class, you should always declare all the mocks at the top of the test, before your (first) beforeEach call and you should initialize them within the beforeEach.
 The reason we want to initialize our mocks in the beforeEach and not at declaration, is because you want fresh mocks for every test.
If you initialize your mock only once at declaration, the method call count and mock return values will not be removed.
This can cause tests to influence each others output, so they can complete successfully or unsuccessfully, depending on the order in which they are run, this can be a headache to debug if you don’t realize this from the beginning.
I will explain here with an example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;brown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ford&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Porsche&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cadillac&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllRedCars&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can guess, this test will fail with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Expected &quot;getCars()&quot; to be called 1 time(s). But has been called 2 time(s).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This happens because the tests don’t start with a fresh mock.
So the call to the getCars() from the first test, is still part of the callcount of the mock in the second test.
If we reinitialize the mocks every time in the beforeEach, this problem is solved.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-unit-test&quot;&gt;Writing a unit test&lt;/h2&gt;

&lt;p&gt;Every unit test has 3 parts.
First part is the setup, where you set certain values and mock the necessary method calls.
Second part is the actual call of the method you are testing.
The last part is the verification, where you will check if the output is correct or the right methods have been called.
For readability, leave a blank line between each part, so you can clearly see from a glance what your setup, call and verification part is.&lt;/p&gt;

&lt;p&gt;A good way to write your unit test is the following:&lt;/p&gt;

&lt;p&gt;You start with your empty test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you write the method call you want to test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you write your verification part:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, you run your test once. 
It should fail. 
Then you write the setup you need to get to the expected output:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a good way to work when you write unit tests.
Writing the verification part before your setup, allows you to see that your test is actually able to fail.
This is especially handy when you are testing asynchronous code, where a missing done operator can make your test be successful every time, no matter what your expects check, but more about this in the next part.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-testing&quot;&gt;Asynchronous testing&lt;/h2&gt;

&lt;p&gt;Thinking in async code, can be a bit of a challenge, especially when you start out with JavaScript as a new developer or coming from a language that works mostly with synchronous code.&lt;/p&gt;

&lt;p&gt;In this part of the post, I will show you how to test asynchronous code.
Both with promises and observables.&lt;/p&gt;

&lt;p&gt;For both promises and observables, I will test methods that show the most common usage patterns.
One scenario is where you simply get something asynchronously and set its value to a field, the other scenario is a little more complicated, where you get something asynchronously, have some side effects before it resolves, and have some more side effects after it resolves.
If that seems complicated, don’t worry, it will become clear very soon.&lt;/p&gt;

&lt;p&gt;For the promises, I will be using the async / await syntax.
If you don’t know what that is yet, I suggest you read up on it, a good article is &lt;a href=&quot;https://alligator.io/js/async-functions/&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;promises&quot;&gt;Promises&lt;/h3&gt;

&lt;h4 id=&quot;scenario-a&quot;&gt;Scenario A&lt;/h4&gt;

&lt;p&gt;The method we will be testing will be the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redCars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function just gets the cars from the &lt;code class=&quot;highlighter-rouge&quot;&gt;carService&lt;/code&gt; asynchronously and filters out all the non-red cars before returning the array.&lt;/p&gt;

&lt;p&gt;The first test, we will simply test the happy scenario, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;carService&lt;/code&gt; returns us a nice list of cars and the non-red cars are filtered out.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what exactly goes on here? 
First we mock the carService.getCarsAsPromise() method and tell it that it should always return a promise that resolves with a list of cars. 
Then we call the method that we are testing, we wait for it to resolve (by using the await keyword).
Afterward we expect that the returned array only contains the red Porsche.
Now, what is this whole try catch thingy? When the promise is rejected, the execution of the code in the try block will be stopped and the code in the catch block will be executed.
In this case, if the getCarsAsPromise() should fail, it will go into the catch block and the test will fail.
The message that will be shown by jasmine, is the error message that is given to the error that was thrown.
For instance, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;getCarsAsPromise()&lt;/code&gt; promise return value were to be rejected with the error message ‘Something went wrong.’, the test will fail with the message &lt;code class=&quot;highlighter-rouge&quot;&gt;Failed: Something went wrong.&lt;/code&gt;.
In the finally block, we call the done function, to tell jasmine that our test is done, we call it in the finally block, because the code in the finally block will always be executed, regardless of the result of the promise.&lt;/p&gt;

&lt;p&gt;Note: the done function should ALWAYS be called, regardless if your test fails or succeeds.
The reason for this is that without the done function, the test will only fail after the timeout limit has been reached.
When jasmine executes a test, it will wait for 5 seconds before timing out, if the done function has not been called within that time, it will fail.&lt;/p&gt;

&lt;p&gt;To explain with an example, if we would remove the finally block and call the done function after the expect in the try block, the test would execute as expected in the scenario where the promise is resolved, but if the promise where to be rejected, it would call the fail(e), but since jasmine does not consider the fail call as the end of a test, it would still wait until the timeout for the done function.
The test will eventually fail, but it will take 5 seconds to fail instead of 0.5 seconds.&lt;/p&gt;

&lt;p&gt;In the second test, we will test what happens when the promise is rejected:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set retrievalError to true if the promise is rejected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Call should not have succeeded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing to expect here&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see here, we call the fail function in the try block, because the method under test should throw an error.
So after calling the method under test, it should go directly to the catch block.
Since our method under test does not handle any errors, there is nothing to expect there.
In the finally block, we tell jasmine the test is done.&lt;/p&gt;

&lt;h4 id=&quot;scenario-b&quot;&gt;Scenario B&lt;/h4&gt;

&lt;p&gt;The next method we will be testing is the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So a few things are happening:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First we set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to true&lt;/li&gt;
  &lt;li&gt;Then we get the red cars asynchronously and assign them to our &lt;code class=&quot;highlighter-rouge&quot;&gt;cars&lt;/code&gt; field&lt;/li&gt;
  &lt;li&gt;If getting the red cars throws an error, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;carRetrievalError&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Afterward we always set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; back to false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, we don’t just want to test the end result of our test, but also the side effects in between, in this case, the setting of the loading field to true or false. 
For observables, these types of scenarios are a little easier to test, but with a little creativity, we can also do this for promises, without the use of special testing tools or libraries.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set all the red cars to the cars field and set loading field correctly&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;promiseResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;promiseResolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;promiseResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what’s happening here? 
In the promise callback, we assign the resolve function to a variable outside of that function, so we can use it later on.
Then we call our method under test, but notice that we don’t use the await keyword here.
Why is this? Well, if we were to use the await keyword, it would simply wait for the promise to resolve, but it would never happen because our resolve function is never called.
Instead we just want to call it, let it execute and start expecting the side effects.
As we saw in the method under test, the loading field is set to true before the red cars are retrieved, since those cars are not retrieved yet, we can check that the loading field is indeed set to true.
Ok, now we have checked that, let’s resolve the carService call.
 We do this by calling our promiseResolve function.
Now the cars are resolved, so we can check that the loading has now been set to false and the cars field has been correctly set to the right value.
The finally callback of the returned promise, will execute after we call our promiseResolve function, and will check the final result of our method and subsequently call the done function to tell jasmine our test is over.&lt;/p&gt;

&lt;p&gt;In the second test we will test the error scenario, where we want to see if the loading value is still set correctly and the &lt;code class=&quot;highlighter-rouge&quot;&gt;carRetrievalError&lt;/code&gt; is also set to true.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set the retrievalError to true and loading states correctly if the promise is rejected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;promiseReject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;promiseReject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;promiseReject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we actually do the same thing, except instead of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; function, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;observables&quot;&gt;Observables&lt;/h3&gt;

&lt;p&gt;For observables, I have created methods that do exactly the same as our previous promises scenarios, except we use observables here.&lt;/p&gt;

&lt;h4 id=&quot;scenario-a-1&quot;&gt;Scenario A&lt;/h4&gt;

&lt;p&gt;For scenario A we will test a simple observable that returns one value and then completes. 
 This is a fairly common use case, especially with http calls.
 Here is our method under test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply get all the cars as an observable and then we call the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; operator to filter the list we get. 
 Pretty simple scenario.&lt;/p&gt;

&lt;p&gt;For a simple scenario like this, there are two ways to test this. 
 The first one is this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply call our method under test, subscribe to the resulting observable, and in the subscribe callback we do our expects and in the error callback we fail the test. 
This is the easiest way to test this scenario, although, it is a little verbose. 
To reduce the lines of code, a simple scenario like this, can also be tested by transforming the observable to a promise and test it like we did in the promise scenario:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red (alternative way)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I guess in this case it depends on what you find the most readable. 
The async await syntax makes the second version very readable, but comes down to personal preference.&lt;/p&gt;

&lt;h4 id=&quot;scenario-b-1&quot;&gt;Scenario B&lt;/h4&gt;

&lt;p&gt;In the next scenario we will be testing an observable call with side effects.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;finalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same scenario as the promises, we set loading to true and subscribe to an observable, when it resolves, we set the value and when it completes, we set loading to false. 
If the observable throws an error, we set carRetrievalError to true.&lt;/p&gt;

&lt;p&gt;So our first test is the happy path, the observable resolves with an array of cars and everything goes as expected:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set all the red cars to the cars field and set loading field correctly&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This scenario is very easily tested with observables, because of Subjects. What is a subject? 
A subject can act as both an observable and an observer.
This means we can subscribe to it and receive the emitted values, or we can tell it to emit a certain value.&lt;/p&gt;

&lt;p&gt;In this case, instead of telling the carService to return an Observable that immediately resolves with a value, we tell it to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;subject.asObservable()&lt;/code&gt;.
Now we are in control of when and what value is emitted in this observable.
This allows us to check our side effects easily at the right time.&lt;/p&gt;

&lt;p&gt;Note that I am calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;carsSubject.complete()&lt;/code&gt; after I emit the car array value.
I do this because I set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt; operator.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt; operator is only called when the observable is completed.
So if I don’t call the &lt;code class=&quot;highlighter-rouge&quot;&gt;carsSubject.complete()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; will never be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and my test will fail.
The error scenario is pretty much the same logic, except we call the error method instead of the next on the subject.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set retrievalError to true if the observable throws an error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope these code examples help you to effectively unit test your (asynchronous) code. 
Readability is everything, so make sure you use blank lines to clearly differentiate between the different parts of a test. 
And don’t forget that done function, without it, your test might timeout, or even worse, it might succeed without actually having tested anything at all.&lt;/p&gt;

&lt;p&gt;All the code examples can be checked on the following repository:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/js-testing-101&quot;&gt;https://github.com/ivarvh/js-testing-101&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply clone the repo, run npm install and run npm test to execute the tests.&lt;/p&gt;

&lt;p&gt;Happy testing everyone!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ivar&quot;, &quot;last_name&quot;=&gt;&quot;van Hartingsveldt&quot;, &quot;permalink&quot;=&gt;&quot;/author/ivar-van-hartingsveldt/&quot;, &quot;avatar&quot;=&gt;&quot;ivar-van-hartingsveldt.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ivar.vanhartingsveldt@ordina.be&quot;, &quot;github&quot;=&gt;&quot;ivarvh&quot;, &quot;linkedin&quot;=&gt;&quot;ivarvh&quot;, &quot;bio&quot;=&gt;&quot;Ivar is a backend Java developer who converted to frontend. When ES6 and TypeScript came along, he really started investing his time in that and now he writes Javascript / TypeScript almost exclusively.&quot;}</name><email>ivar.vanhartingsveldt@ordina.be</email></author><category term="Testing" /><category term="JavaScript" /><category term="Testing" /><category term="TypeScript" /><category term="Jasmine" /><category term="Karma" /><category term="Unit testing" /><category term="Observables" /><summary type="html">JavaScript unit testing 101</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-07-11-js-testing.png" /></entry><entry><title type="html">Kustomize: Kubernetes configuration management, the easy way</title><link href="https://ordina-jworks.github.io/cloud/2019/09/18/kustomize.html" rel="alternate" type="text/html" title="Kustomize: Kubernetes configuration management, the easy way" /><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/09/18/kustomize</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/09/18/kustomize.html">&lt;h3 id=&quot;reading-time-8-min-29-sec&quot;&gt;Reading time: 8 min 29 sec&lt;/h3&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-problem-do-we-have&quot;&gt;What problem do we have?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-alternatives-are-available-to-solve-this-problem&quot;&gt;What alternatives are available to solve this problem?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-kustomize-and-how-to-use-it&quot;&gt;What is Kustomize and how to use it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extending-kustomize-plugins&quot;&gt;Extending Kustomize&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion-when-to-use-kustomize&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-problem-do-we-have&quot;&gt;What problem do we have?&lt;/h2&gt;

&lt;p&gt;Deploying components to a Kubernetes cluster should be as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f folder-with-deployment-manifests&lt;/code&gt;. 
This approach works very well for a single environment, but quickly become very hard to do properly when managing multiple environments (Dev, Staging, …, Production). 
The reason for this is due to the configuration differences in these environments.
Every environment needs a different configuration to: connect to different databases, use other secret values, use different deployment configurations (number of replicas for example), …
Managing these differences can be very hard to do in a single set of manifests.&lt;/p&gt;

&lt;h2 id=&quot;what-alternatives-are-available-to-solve-this-problem&quot;&gt;What alternatives are available to solve this problem?&lt;/h2&gt;

&lt;p&gt;Luckily this problem exists in many organizations and the community already created multiple tools to help solve the problem. 
In the scope of configuration management for Kubernetes the following tools are in available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.openshift.com/container-platform/4.1/welcome/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenShift Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v3.helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kustomize.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenShift Templates are part of the OpenShift platform and can be used both to template manifests in a repository and to provide an off-the-shelve experience in the OpenShift platform itself.
For example, a cluster administrator can install a template for an Apache Kafka setup.
By provisioning this template (through the online UI or the CLI) and providing the required template values, the service can be provisioned like the administrator provides it. 
This is a very powerful approach to allow developers to provision supporting systems directly in the platform.&lt;/p&gt;

&lt;p&gt;Helm 2 is a templating and deployment management tool. 
In Helm 2 a server-side component needs to be installed in the cluster named Tiller. 
Tiller is the central entrypoint and management component for all deployments using Helm 2.
It keeps the state of all deployed manifests and groups them together as a single release.
The main disadvantage of Helm 2 is the lack of proper authorization (RBAC) support as Tiller will run with almost root-level privileges on the cluster.&lt;/p&gt;

&lt;p&gt;Helm 3 is currently still in beta, but the reworked version should resolve a lot of the issues with Helm 2.
Like Helm 2 it’s still a templating engine which also manages releases. 
Unlike Helm 2, it doesn’t use the Tiller component anymore to manage all the state connected to the release.
More information about Helm can be found in a future blogpost.&lt;/p&gt;

&lt;p&gt;Kustomize is a Kubernetes configuration management tool that is provided as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; command, behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; flag.
Kustomize allows a user to use standard Kubernetes manifests and overlay any changes that they want to make using an overlay manifest.
Unlike Helm, Kustomize only provides configuration management and doesn’t manage any state about the manifests it adapts.
Unlike Helm and OpenShift Templates, the main goal of Kustomize is to allow users to adapt their existing manifests in any thinkable way, instead of templating some parts of the manifest that can be changed.&lt;/p&gt;

&lt;h2 id=&quot;what-is-kustomize-and-how-to-use-it&quot;&gt;What is Kustomize and how to use it&lt;/h2&gt;

&lt;p&gt;As briefly discussed, Kustomize is a configuration management tool that has been embedded into &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.
Originally it was a separate tool and some functionality is still only available in the Kustomize binary and not in Kubectl.
The documentation of Kustomize is therefore available in two parts, the &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;core docs&lt;/a&gt; and the &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubectl docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Important to note, especially when considering the usage of this tool, is what it doesn’t do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It doesn’t manage deployments&lt;/li&gt;
  &lt;li&gt;It doesn’t package applications in deployable artifacts&lt;/li&gt;
  &lt;li&gt;It doesn’t manage secrets securely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As discussed in the Kustomize projects &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;readme&lt;/a&gt; a Kustomize manifest exists out of two main structures: a base manifest and overlays.&lt;/p&gt;

&lt;h3 id=&quot;base-manifest&quot;&gt;Base manifest&lt;/h3&gt;

&lt;p&gt;A base manifest is, in essence, a set of bare-bones Kubernetes manifests.
For the scope of this blog post, a single base manifest will contain all configuration to deploy a single service.
Kustomize doesn’t require this, but it seems like a good fit.&lt;/p&gt;

&lt;p&gt;Let’s assume the following set of Kubernetes manifests:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── deployment.yaml
├── ingress.yaml
└── service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These manifests can deploy one of our apps to a cluster.
It will create a deployment, a service exposing the app to the cluster and an ingress object that will allow connections from outside of the cluster.
Managing a set of these manifests in separate files or even in one file, can be a bit challenging and ofter results in violating the Don’t-Repeat-Yourself (DRY) principle.
Kustomize can assist in preventing this and allows the user to more generally manage their manifests.
Adding Kustomize to a set of manifests is as easy as creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomization.yaml&lt;/code&gt; file and running &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Add labels to all objects created by this kustomize manifest.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;commonLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only a single feature of Kustomize is used, namely the &lt;code class=&quot;highlighter-rouge&quot;&gt;commonLabels&lt;/code&gt; option. 
This option makes Kustomize add the label to all managed manifests at build time (when running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -k&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;). 
Other options like image overrides, namespaces overrides and name prefixing are also available. 
For more information on these features check out the documentation &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;overlay-manifest&quot;&gt;Overlay manifest&lt;/h3&gt;

&lt;p&gt;The second half of the cake in Kustomize are the overlays. 
Overlays are YAML snippets, Kustomize configuration and/or even full manifests that can be used to adapt a base manifest.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../../base&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git::ssh://git@some-git-provider:some-repo-path.git//folder-in-repo-with-kustomize-config?ref=branch&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.com/project/repo//folder-in-repo?ref=branch&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the default setup on the Kustomize homepage, the bases are always local folders. 
However, a really useful feature is referencing remote locations, including Git repositories, as bases to be used in an overlay. 
The Git endpoints need to be specified as described in the &lt;a href=&quot;https://github.com/hashicorp/go-getter#url-format&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;hashicorp/go-getter URL format&lt;/a&gt;. 
Important to note here is that when using the Git references, the machine that is executing Kustomize builds needs have a valid Git configuration to access the referenced repositories.
As the kustomization file is checked into version control, adding credentials into the link is considered a bad practice.
Kustomize supports referencing multiple bases, which again allows for a lot of flexibility. 
The references work recursively, so multiple levels of manifests are supported.
At the time of writing, diamond composition is not possible but &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/issues/1251&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;being worked on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The way Kustomize builds a set of manifests is the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the remote bases to a temporary folder&lt;/li&gt;
  &lt;li&gt;Executed &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt; on all of the bases
    &lt;ol&gt;
      &lt;li&gt;This will include executing any generators and transformers that are configured in the bases.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Add any manifests that are listed in the resources section.&lt;/li&gt;
  &lt;li&gt;Execute the generators.&lt;/li&gt;
  &lt;li&gt;Apply any patches and execute the transformers against all manifest that are generated or available through the bases.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This order of execution is important to remember when creating setups, especially when using overrides for generators in the base. 
E.g. when using a config map generator in the overlay, a ConfigMap generator needs to be used in the base as well, otherwise Kustomize will not allow the override to be executed. 
This is because the config map generator adds a random ID to the name of each generated config map and cannot determine whether to change the config maps in the base template as well.&lt;/p&gt;

&lt;h2 id=&quot;extending-kustomize-plugins&quot;&gt;Extending Kustomize: plugins&lt;/h2&gt;

&lt;p&gt;Kustomize allows plugins to be created and used during execution. 
This mechanism allows for a lot of flexibility.
Currently, plugins are still an alpha feature and therefore not available through &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; but only through the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize&lt;/code&gt; tool itself.&lt;/p&gt;

&lt;p&gt;Writing a plugin can be done in one of two ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write a plugin in Go and link it as a shared library to the Kustomize tool&lt;/li&gt;
  &lt;li&gt;Write a plugin based on the exec model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the first way allows the code to be more easily absorbed into the Kustomize binary later on, it requires the plugin to be compiled together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize&lt;/code&gt; binary.
The second option is a lot more flexible as it only relies on the plugin being available and providing a very rudimentary interface.
More information on support for plugins can be found in the &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs/plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;docs&lt;/a&gt; and examples can be found &lt;a href=&quot;https://github.com/Agilicus/kustomize-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real-world example&lt;/h2&gt;

&lt;p&gt;In the last section of this post, a simple example setup will be shown and discussed.
Consider the following scenario: a UI, two backends (task service and process service) and a datastore.
The components have deployments, services, ConfigMaps ,and ingress manifests.
This would result in the following structure:&lt;/p&gt;

&lt;p&gt;Let’s assume the following set of Kubernetes manifests:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;frontend/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml

task-service/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml

process-service/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deploying this application is as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f &amp;lt;folder&amp;gt;&lt;/code&gt; on each of these folders. 
A very simple use case for Kustomize is to deploy all of these components at once and group them. 
The following &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomization.yaml&lt;/code&gt; should be added to each folder.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;configmap.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following Kustomization manifest could then be used to deploy everything at once by running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -k acceptance/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../frontend&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../task-service&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../process-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the execution of this command, Kustomize will generate a single (giant) file containing all the manifests. 
Note that the bases are referenced under the resources.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;bases&lt;/code&gt; key is deprecated and all references should be moved into the resources key.&lt;/p&gt;

&lt;p&gt;Making variants on the actual bases is super easy. 
For example, let’s assume that the acceptance environment needs a different configuration.
This can be achieved by just overriding the ConfigMap in the acceptance folder.
There are three different ways to override a ConfigMap.&lt;/p&gt;

&lt;h3 id=&quot;using-configmap-generator&quot;&gt;Using ConfigMap Generator&lt;/h3&gt;

&lt;p&gt;Generators can be used to ease the management of configuration. 
The ConfigMap generator makes creating ConfigMaps easier by providing a more common way to specify configuration.
More information on the ConfigMap generator can be found &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/reference/kustomize.html#configmapgenerator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;configMapGenerator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;loglevel=warn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ConfigMap generator will look for the original manifest and apply the override.
Important to note here is that the generator only works if the original manifest was generated aswell.
Using this approach thus requires both the base and overrides to use the generator.
A nice bonus to using the generator is that it will add unique IDs to the ConfigMap name every time one is generated. 
This way, a component is automatically updated when a linked ConfigMap is changed.
This provides a nice way to prevent manually triggering a rolling update when configuration changes.&lt;/p&gt;

&lt;p&gt;Currently only ConfigMap and secret generators are available by default, but as mentioned, there is a very good plugin mechanism available to add more.&lt;/p&gt;

&lt;h3 id=&quot;using-patches&quot;&gt;Using patches&lt;/h3&gt;

&lt;p&gt;Patches are the last way to override a configuration from a base.
Patches are available in two flavors: Json6902 and Strategic Merge.&lt;/p&gt;

&lt;p&gt;Json6902 is an RFC standard provided by the &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IETF&lt;/a&gt; to describe JSON patches.
In a nutshell, operations (patches) can be described using JSON path, operations ,and values.&lt;/p&gt;

&lt;p&gt;For the example earlier, this would result in the following:
&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;configs/acceptance-specific-task-service-configmap-patch.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/configs/acceptance-specific-task-service-configmap-patch.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/loglevel&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Matching is done based on the name (&lt;code class=&quot;highlighter-rouge&quot;&gt;metadata.name&lt;/code&gt;), version and kind of the resource.
This approach will result in the acceptance-specific config map overriding the base task-service ConfigMap.
It will result in the same ConfigMap manifest after the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The strategic merge is the final way to provide an override in Kustomize.
It merges the existing ConfigMaps with the new configuration provided in the override. 
It applies the same matching rules as the JSON patch approach to match base manifests with the overrides.
Note that the configuration will be added or overridden.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;patches/acceptance-specific-task-service-configmap.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/patches/acceptance-specific-task-service-configmap.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Building this Kustomize manifest will again result in the same Kubernetes ConfigMap manifest as the other two approaches. 
Note that none of the three approaches required changing the original manifests.
When multiple variants are created, updates to the base will automatically be added to all variants without having to change a single line of code.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-when-to-use-kustomize&quot;&gt;Conclusion: When to use Kustomize?&lt;/h2&gt;

&lt;p&gt;Kustomize is a great tool to have in your toolbox to simplify configuration management in Kubernetes.
DRY principles can be adhered to and managing configuration code can be done in a structured and unified way.
Kustomize is a great fit when different environments require different configuration for a microservice. 
Especially when sensible defaults can be added to the base template and only a small amount of overrides are required per environment. 
When compared to Helm, both version 2 and 3, Kustomize doesn’t pollute the original manifests with templating code.&lt;/p&gt;

&lt;p&gt;Kustomize is a configuration management tool for Kubernetes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have a lot of configuration code being duplicated across environments?&lt;/li&gt;
  &lt;li&gt;Have a complex CD setup with manual steps to deploy configuration to a specific environment?&lt;/li&gt;
  &lt;li&gt;Hate using templating engines?&lt;/li&gt;
  &lt;li&gt;Really really really like using Kubernetes?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all of the above are true for you, start using Kustomize today and experience it yourself!&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubectl-Kustomize docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize core docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs/plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Agilicus/kustomize-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize plugin examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/reference/kustomize.html#configmapgenerator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-vincken-a94b5153&quot;, &quot;twitter&quot;=&gt;&quot;PieterVincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Cloud" /><category term="Kustomize" /><category term="Configuration Management" /><category term="Kubernetes" /><category term="Cloud" /><summary type="html">Reading time: 8 min 29 sec</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-09-kustomize/banner.png" /></entry><entry><title type="html">Lessons learned on including library assets into Angular applications</title><link href="https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries.html" rel="alternate" type="text/html" title="Lessons learned on including library assets into Angular applications" /><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries.html">&lt;p&gt;With Angular 6, which has now been released ages ago, workspaces were introduced.
This meant that a repository could include multiple applications and libraries, eventually building a monorepository.
I welcomed this change, as it meant that all applications in one repository could be kept up to date easily and more.
But I’m not here to talk about all the advantages and disadvantages of a monorepo.
Instead I’d like to talk about one specific challenge with this type of repository.&lt;/p&gt;

&lt;h2 id=&quot;how-to-include-assets-used-by-libraries&quot;&gt;How to include assets used by libraries&lt;/h2&gt;

&lt;p&gt;There are multiple solutions to this problem.
But not all solutions match all criteria for a good architecture.
These criteria are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/li&gt;
  &lt;li&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/li&gt;
  &lt;li&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t worked with many monorepo tools, other than &lt;a href=&quot;https://nx.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nrwl/nx&lt;/a&gt;, so I will base my definition of affected projects on that.
Nrwl/nx uses a dependency graph to determine the affected projects.
In short: if a library has a changed file, then all projects that import this library (either directly or lazy-loaded) are affected.
This works recursively, so the projects that import those projectes are also affected and so on.
Some files, like &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; have &lt;code class=&quot;highlighter-rouge&quot;&gt;implicitDependencies&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt;, which means a change in those files will regard all projects in the workspace as affected.&lt;/p&gt;

&lt;p&gt;These are the solutions (in order) I’ve gone through to tackle this exact problem for a monorepo I’m currently managing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: In that monorepo the focus was on json-files with translations used for &lt;code class=&quot;highlighter-rouge&quot;&gt;@ngx-translate&lt;/code&gt;, but in my examples here I will use images.&lt;/em&gt;
&lt;em&gt;In the example, the application, my-app, only depends on the library neighbourhood-dogs-lib and should only display a picture of my dog and Pete’s dog, but not of Karen’s cat.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution-1---assets-in-the-application-source&quot;&gt;Solution 1 - Assets in the application source&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂assets
│     │  │  └─ 📂images
│     │  │     ├─ 🖼my-dog.jpg
│     │  │     └─ 🖼pete-dog.jpg
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
└─ 📂libs
   ├─ 📂neighbourhood-dogs-lib
   │  ├─ 📂src
   │  │  ├─ 📂lib
   │  │  │  ├─ 📄dog-list.component.ts
   │  │  │  └─ 📄dog.component.ts
   │  │  └─ ...
   │  └─ ...
   └─ 📂neighbourhood-cats-lib
      ├─ 📂src
      │  ├─ 📂lib
      │  │  ├─ 📄cat-list.component.ts
      │  │  └─ 📄cat.component.ts
      │  └─ ...
      └─ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I call this solution the “I’ll figure it out later”-solution.
The main idea was to set aside this problem because other tasks had higher priority, the monorepo wasn’t nearly as big as it is now.
Basically, the assets used by a library were put in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; folder of the application’s source directory.
This meant that the build of an application would simply include these assets out of the box.
This is fine for a single application, but as soon as a second application (let’s say, neighbourhood-animals-app) was to use this library, it, too, would need a copy of those assets in its source directory.
A change to one of the assets would also mean that two applications would need this change, which is prone to being forgotten.
Moreover, the image of Karen’s cat is nowhere to be found because at this time, no application needs it.&lt;/p&gt;

&lt;p&gt;As for the criteria:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;❌&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️**&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Kind of, if I don’t forget to copy our assets&lt;br /&gt;
**Depends on the amount of applications that need these extra assets&lt;/p&gt;

&lt;h3 id=&quot;solution-2---shared-assets-directory&quot;&gt;Solution 2 - Shared assets directory&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
├─ 📂libs
│  ├─ 📂neighbourhood-dogs-lib
│  │  ├─ 📂src
│  │  │  ├─ 📂lib
│  │  │  │  ├─ 📄dog-list.component.ts
│  │  │  │  └─ 📄dog.component.ts
│  │  │  └─ ...
│  │  └─ ...
│  └─ 📂neighbourhood-cats-lib
│     ├─ 📂src
│     │  ├─ 📂lib
│     │  │  ├─ 📄cat-list.component.ts
│     │  │  └─ 📄cat.component.ts
│     │  └─ ...
│     └─ ...
└─ 📂shared-assets
   └─ 📂images
      ├─ 🖼my-dog.jpg
      ├─ 🖼pete-dog.jpg
      └─ 🖼karen-cat.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the “Share everything”-solution. It was created to solve the main fault of the previous, namely that assets could exist twice.
Another important aspect here was to reduce the amount of times that &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; would be changed when more assets from another library would be added.
Because &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; implicitly affects all projects, this file should be kept untouched as much as possible.
So a one-time change was made to let the projects in &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; include these shared assets:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./shared-assets/images&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/images&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately this meant that all assets from all libraries would be added to those applications, which increases the bundle size significantly.
Another disadvantage is that the Nx dependency graph could not link changes in this directory with their corresponding libraries, unless every single file was mentioned in &lt;code class=&quot;highlighter-rouge&quot;&gt;nx.json&lt;/code&gt; with an implicit dependency for that library.
Ironically, this solves criteria 3 perfectly, because nothing is affected, so that’s the bare minimum.&lt;/p&gt;

&lt;p&gt;Going back through the criteria:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;❌&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*There are no longer duplicate assets, but they’re not part of the project that utilizes them&lt;/p&gt;

&lt;h3 id=&quot;solution-3---custom-angular-builders&quot;&gt;Solution 3 - Custom Angular builders&lt;/h3&gt;

&lt;p&gt;A solution I came across was to copy the assets after a build into the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;-folder using a script in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file, but for obvious reasons that wouldn’t work easily when managing different apps.
Neither would it work with the dev-server, so I didn’t even go there.
Including assets by adding them to the build target’s assets array is how Angular itself prescribes to solve this problem, so let’s keep that.
However, I still wanted to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; file (and other files) as minimally as possible.&lt;/p&gt;

&lt;p&gt;Enter Angular 8 and the stable version of the CLI Builder API!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂assets
│     │  │  └─ 📄include.json
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
└─ 📂libs
   ├─ 📂neighbourhood-dogs-lib
   │  ├─ 📂src
   │  │  ├─ 📂assets
   │  │  │  └─ 📂images
   │  │  │     ├─ 🖼my-dog.jpg
   │  │  │     └─ 🖼pete-dog.jpg
   │  │  ├─ 📂lib
   │  │  │  ├─ 📄dog-list.component.ts
   │  │  │  └─ 📄dog.component.ts
   │  │  └─ ...
   │  └─ ...
   └─ 📂neighbourhood-cats-lib
      ├─ 📂src
      │  ├─ 📂assets
      │  │  └─ 📂images
      │  │     └─ 🖼karen-cat.jpg
      │  ├─ 📂lib
      │  │  ├─ 📄cat-list.component.ts
      │  │  └─ 📄cat.component.ts
      │  └─ ...
      └─ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this new API, I was able to construct two new builders to replace the default &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular-devkit/build-angular:browser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular-devkit/build-angular:dev-server&lt;/code&gt; while still utilizing them.
These custom builders take the same options as the ones they replace and work more like a hook than a new builder.
The idea is to update the build target in the in-memory workspace before the default builder is actually executed.
Simply put, the custom builders read &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;, update the assets array and pass the updated version to the original builders.
A single configuration file (&lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; in the application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory) lets the custom builder read which libraries the application depends on.
It then determines its source directory using the workspace configuration file (&lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;) and adds the following to the assets array:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I wanted my-app to also include the neighbourhood’s cats, then I could change &lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; to also include &lt;code class=&quot;highlighter-rouge&quot;&gt;neighbourhood-cats-lib&lt;/code&gt; and the next build would add the following to the assets array:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-cats-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though I’d rather set the option that these assets are placed in sub folders, so I added that into the builders too.
That made the assets array into the following, which prevents libs from overwriting other assets:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/neighbourhood-dogs-lib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-cats-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/neighbourhood-cats-lib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: The reason this &lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; file is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory was to make a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpTranslateLoader&lt;/code&gt; (using a simple RxJS &lt;code class=&quot;highlighter-rouge&quot;&gt;mergeMap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;forkJoin&lt;/code&gt;) read that same file to determine which translation assets to download.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s go through the criteria one more time:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Because the assets are inside the library’s directory, the dependency graph can detect a change and determine the affected applications&lt;/p&gt;

&lt;p&gt;There is one caveat though: the dependency graph will only detect dependencies if the library is also imported in the code of the application, which would be the case mostly.
If that’s not the case (for example if the library containing assets has no components/services/modules/…), simply create an empty module in it and import it in the applications that depend on these assets.&lt;/p&gt;

&lt;h2 id=&quot;sharing-is-caring&quot;&gt;Sharing is caring&lt;/h2&gt;

&lt;p&gt;Because I care about the community I packaged this solution and published it to npm.
It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;ngx-library-assets&lt;/code&gt; and is available at &lt;a href=&quot;https://www.npmjs.com/package/ngx-library-assets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.npmjs.com/package/ngx-library-assets&lt;/a&gt;.
Install it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I do not actually own a dog, or a cat. Neither do Pete and Karen. I don’t even have any neighbours named Pete or Karen.&lt;/em&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on Reactive Programming and dealing with it. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Architecture" /><category term="Angular" /><category term="Builders" /><category term="Assets" /><category term="Library" /><category term="Monorepo" /><summary type="html">With Angular 6, which has now been released ages ago, workspaces were introduced. This meant that a repository could include multiple applications and libraries, eventually building a monorepository. I welcomed this change, as it meant that all applications in one repository could be kept up to date easily and more. But I’m not here to talk about all the advantages and disadvantages of a monorepo. Instead I’d like to talk about one specific challenge with this type of repository.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-09-angular-include-assets-libraries/tpryd.jpg" /></entry><entry><title type="html">Avoiding fragile tests with better design</title><link href="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html" rel="alternate" type="text/html" title="Avoiding fragile tests with better design" /><published>2019-08-23T00:00:00+00:00</published><updated>2019-08-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/08/23/test-design</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-most-basic-test-design&quot;&gt;The most basic test design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fragile-tests-example&quot;&gt;Fragile tests example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-the-api&quot;&gt;Implementing the API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/h2&gt;

&lt;p&gt;We spend quite some time thinking about the design of our production code.
We do this because we want our code to be readable and maintainable.
The easier our code can be maintained, the easier we can implement new features and perform the necessary refactorings to implement those features.&lt;/p&gt;

&lt;p&gt;The absurd thing is that we only design our &lt;em&gt;production code&lt;/em&gt; and not our tests.
Our tests should be equally readable and maintainable as our production code, because if we don’t, we’ll spend too much time fixing and rewriting our tests.&lt;/p&gt;

&lt;p&gt;If we successfully create readable tests, they will also serve as very good documentation, describing the functionality of our code, and how it is expected to behave.&lt;/p&gt;

&lt;h2 id=&quot;the-most-basic-test-design&quot;&gt;The most basic test design&lt;/h2&gt;

&lt;p&gt;A common practice in writing tests is creating a test class for each production class. 
The reason why it is such a popular practice, is because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it’s easy to find tests for the production code you’re looking at,&lt;/li&gt;
  &lt;li&gt;it’s a quick way to write new tests because you don’t have to think about how and where to write tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this approach does have advantages, it can also be harmful for the maintainability of your application.
The disadvantage of this approach becomes clear when you need to refactor some classes.
If you move logic from one class to another, or even multiple other classes, you need to create new tests to test each of those classes, if you want to keep your ‘one class means one test class’ strategy.&lt;/p&gt;

&lt;p&gt;In performing such a refactoring we should not need to change any tests because we are not adding or changing any functionality, only moving logic around. 
However, if we want to keep our &lt;em&gt;design&lt;/em&gt; of having a test class for each production class, we need to refactor our tests as well.&lt;/p&gt;

&lt;p&gt;Even if we don’t want to keep this design, our tests will have to be modified because chances are big that the API of our production code changed. 
The parameters of methods might have changed, the fields of objects might have changed, constructors might have changed, etc.
If we are lucky, the tests still compile, but they will very likely fail. 
And the larger your application becomes, the more work it will be to get all tests compiling and green again.&lt;/p&gt;

&lt;p&gt;This phenomenon is known as &lt;a href=&quot;http://xunitpatterns.com/Fragile%20Test.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fragile tests&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fragile-tests-example&quot;&gt;Fragile tests example&lt;/h2&gt;

&lt;p&gt;An example of this phenomenon that we encountered on a project is the creation of an instance of an &lt;a href=&quot;https://martinfowler.com/bliki/DDD_Aggregate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;aggregate&lt;/a&gt;.
A lot of the tests in our project needed an instance of an aggregate. 
This was not a problem at first, we just created aggregates by using the constructor of the class and passing all the necessary data in it.
We created these instances in every test where we needed them, or sometimes created a method in the test class to not duplicate the construction too much in that class.&lt;/p&gt;

&lt;p&gt;To illustrate the issue we will look at a fictional simplified example about order creation.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_active_customer_then_order_creation_should_be_successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_inactive_customer_then_order_creation_should_result_in_an_illegal_argument_exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our problems began when we realised that the number of parameters in the constructor of our aggregate became too large. 
To resolve this issue we decided to create a class that contains all the data needed to call the constructor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However when we tried to run all the tests, most of them didn’t compile anymore, which makes sense because we changed the contract.
Now we could have made it easier for ourselves by using some IntelliJ refactoring tools, but nevertheless, it’s absurd that so many tests could break by just changing the way we construct our aggregates.&lt;/p&gt;

&lt;p&gt;When we finally got all our tests green again by just creating the data class parameter, we were so happy and sick of the refactoring that we just stopped there, instead of addressing the underlying issue.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few months later, after adding some more features, we noticed that there was too much logic inside the constructor of our aggregate. 
The constructor became too big and complex so we decided to use the factory pattern to create new instances of the aggregate.&lt;/p&gt;

&lt;p&gt;Since we already used a &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderData&lt;/code&gt; as parameter of our constructor, all our tests still compiled and we were happy.
That is, until we ran our tests.&lt;/p&gt;

&lt;p&gt;Because we moved all construction logic from the constructor to the factory, the tests still compiled, but as they relied on this construction logic to create the instance the way we need it, they now failed.
Again we were faced with the issue of a large amount of tests that we had to refactor.&lt;/p&gt;

&lt;p&gt;Not having learned from our previous mistakes and being under time pressure, we decided to use the factory to create instances in all our tests. 
For the factory we needed some other services, repositories etc. which we all mocked.
This was a huge amount of work because of all the mocking we had to do just so we could create a consistent aggregate.
And we had to do this, again, in every test that needs an aggregate.&lt;/p&gt;

&lt;p&gt;After everything worked again, we were happy that the pile of work was done and we could move on with other things.&lt;/p&gt;

&lt;p&gt;In the weeks that followed, however, we started to notice that every time we changed the logic of the factory, we needed to change all the tests again because we had to add some extra mocks, data, etc. in all the tests.&lt;/p&gt;

&lt;p&gt;After a few of these iterations where we had to spend too much time fixing tests, we were fed up and decided (way too late of course) to free up some time for a more structural solution.&lt;/p&gt;

&lt;p&gt;We got some inspiration from a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; from Uncle Bob about his opinion on the statement that &lt;em&gt;TDD harms architecture&lt;/em&gt;.
One of the things he mentions in his post is that we shouldn’t make the mistake of coupling every test to the implementation of our production code.
Instead it would be better to put some sort of API in between our tests and the production code.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-api&quot;&gt;Implementing the API&lt;/h2&gt;
&lt;p&gt;We didn’t take Uncle Bob’s solution too literally and gave our own twist to it.&lt;/p&gt;

&lt;p&gt;For the specific problem of creating aggregate instances we decided to create a class that acts as a scenario builder.
In this &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderScenario&lt;/code&gt; we have a static factory method that will create a scenario that returns a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; when executed.
This means that when you need an order that is consistent and it doesn’t matter for your test which data is in the order, you can just use the default scenario when it’s executed.&lt;/p&gt;

&lt;p&gt;You could also create other default scenarios.
For example an order with an invalid customer, or with specific data that triggers a certain flow in the order process.&lt;/p&gt;

&lt;p&gt;This is very convenient for most tests.
However, in some tests we want to influence how the order is constructed, so we can test some custom cases other than a default scenario, specific for certain tests.
We implemented this by adding some methods to our scenario class that allows the scenario to be modified to the test’s needs.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the following example we created two tests that verify that the construction of an order works correctly.
In the first test, we use the default scenario without modifying anything, meaning, we test the happy path and verify that all data in the created order is correct.&lt;/p&gt;

&lt;p&gt;In the second test we verify that if we try to create an order for a customer that doesn’t exist, we get a validation exception.
We do this by creating a default scenario, then modifying the input data to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;customerId&lt;/code&gt; defined in the test, and then overriding the behaviour of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomerRepository&lt;/code&gt; mock.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidCustomerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/h2&gt;

&lt;p&gt;The advantage of this design is that our tests are not aware of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the use of a factory to create orders,&lt;/li&gt;
  &lt;li&gt;a validator class, used by the factory to validate the input for creating an order,&lt;/li&gt;
  &lt;li&gt;and how the constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; aggregate should be called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this example, it’s easy to see that our new tests are much less likely to break than our original &lt;strong&gt;design&lt;/strong&gt;. 
There is a clean layer between the implementation/design of our application, and the tests.
This lower coupling makes it easier to refactor the application, and implement new features at a higher pace.&lt;/p&gt;

&lt;p&gt;Also notice that we didn’t create a test class that maps one-to-one to a production code class.
Rather than testing our &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; object, our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactory&lt;/code&gt;, or our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt;, we test the creation of an aggregate instance. 
We test what we expect our application to do, not what we expect our class to do.&lt;/p&gt;

&lt;p&gt;Whenever we have to change the logic of how an &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is created, we know that we have to look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderTest&lt;/code&gt; class.
We don’t have to look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderTest&lt;/code&gt; class, the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactoryTest&lt;/code&gt; class, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt; test class to see where we should add some tests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In no way is this design perfect, nor will it be suitable in every project.
However, it is a good starting point to have a lower coupling between tests and production code.
And it’s also a good way to take your test design further and make it more applicable and relevant to your specific project.&lt;/p&gt;

&lt;p&gt;This creates the opportunity to make a higher level language to express your tests, making them more readable, and express your intent of what your test is verifying more clearly.&lt;/p&gt;

&lt;p&gt;And even if you’re not convinced of this design, think about a design of your own, and start to improve the readability and maintainability of your tests.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Van Hees&quot;, &quot;github&quot;=&gt;&quot;pvanhees&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-van-hees-73671133&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter-van-hees/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-van-hees.jpg&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vanhees@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Van Hees is a Java Software Engineer at Ordina Belgium. He is passionate about Domain-Driven Design and producing clean software that works.&quot;}</name><email>pieter.vanhees@ordina.be</email></author><category term="Testing" /><category term="Test Driven Development" /><category term="Test Design" /><category term="Architecture" /><category term="Testing" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/fragile5.png" /></entry><entry><title type="html">Securing Web Applications With Keycloak Using OAuth 2.0 Authorization Code Flow and PKCE</title><link href="https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html" rel="alternate" type="text/html" title="Securing Web Applications With Keycloak Using OAuth 2.0 Authorization Code Flow and PKCE" /><published>2019-08-22T00:00:00+00:00</published><updated>2019-08-22T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html">&lt;blockquote&gt;
  &lt;p&gt;Gone are the days when we had to write our own login mechanisms and permission systems.
This article is about how we can hook up our applications to an Identity and Access Management (IAM) solution such as Keycloak in a secure way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-keycloak-as-authentication-server&quot;&gt;Why Keycloak as Authentication Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-a-keycloak-server&quot;&gt;Setting up a Keycloak Server&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-new-realm&quot;&gt;Creating a New Realm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-client&quot;&gt;Creating a Client&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-roles-and-scopes&quot;&gt;Creating Roles and Scopes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-user&quot;&gt;Creating a user&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-the-front-end-and-back-end-applications&quot;&gt;Setting up the Front End and Back End Applications&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#spring-boot-back-end&quot;&gt;Spring Boot back end&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angular-app-tour-of-heroes&quot;&gt;Angular app: Tour of Heroes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-security&quot;&gt;Implementing Security&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#implicit-flow-versus-code-flow--pkce&quot;&gt;Implicit Flow versus Code Flow + PKCE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#json-web-token-jwt&quot;&gt;JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#resource-server-in-spring-boot&quot;&gt;Resource Server in Spring Boot&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#securing-the-angular-application&quot;&gt;Securing The Angular application&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-keycloak-as-authentication-server&quot;&gt;Why Keycloak as Authentication Server&lt;/h1&gt;
&lt;p&gt;You can find several platforms that handle user logins and resource access management such as &lt;a href=&quot;https://www.keycloak.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Keycloak&lt;/a&gt;, &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OKTA&lt;/a&gt;, &lt;a href=&quot;https://forgerock.github.io/openam-community-edition/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenAM&lt;/a&gt;, etc. 
All those platforms have their own features and possibilities that may be useful for your use case. 
In this article, we choose Keycloak as &lt;a href=&quot;https://en.wikipedia.org/wiki/Authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;authentication&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Authorization&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;authorization&lt;/a&gt; server which is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_source&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;open-source&lt;/a&gt; identity and access management platform (IAM) from Red Hat’s Jboss. 
We have chosen for Keycloak because &lt;a href=&quot;https://github.com/keycloak/keycloak&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;it is open-source&lt;/a&gt; and &lt;a href=&quot;https://www.keycloak.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;well-documented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keycloak comes with several handy features built-in:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two-factor authentication&lt;/li&gt;
  &lt;li&gt;Bruteforce detection&lt;/li&gt;
  &lt;li&gt;Social login (Facebook, Twitter, Google…)&lt;/li&gt;
  &lt;li&gt;LDAP/AD integration&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will go over the basics to get you started.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-a-keycloak-server&quot;&gt;Setting up a Keycloak Server&lt;/h1&gt;

&lt;p&gt;Keycloak supports &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_installation/index.html#_operating-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;multiple ways&lt;/a&gt; to be set up.
For non-production purposes, it’s easiest to just &lt;a href=&quot;https://www.keycloak.org/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download&lt;/a&gt; and run the standalone, which we will do here. 
For actual deployments that are going to be run in production you’ll need to configure a shared database for Keycloak storage and set up Keycloak to run in a cluster to avoid a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;single point of failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing, the latest release version was &lt;code class=&quot;highlighter-rouge&quot;&gt;6.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://downloads.jboss.org/keycloak/6.0.1/keycloak-6.0.1.zip &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; keycloak-6.0.1.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip keycloak-6.0.1.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;keycloak-6.0.1/bin/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./standalone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;For Windows users, there is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;standalone.bat&lt;/code&gt; in the same folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Keycloak server is now running on port 8080.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;-Djboss.socket.binding.port-offset&lt;/code&gt; to change the port.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-Djboss.socket.binding.port-offset=1000&lt;/code&gt; will run the server on port 8080 + 1000 = 9080&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://localhost:8080&lt;/a&gt; and create an administrator account.
You can now click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Administration Console &amp;gt;&lt;/code&gt; and log in using the account you’ve just created.&lt;/p&gt;

&lt;p&gt;You are now on the pre-defined Master realm. A realm manages a set of users, credentials, roles, and groups. 
A user belongs to and logs into a realm and they are isolated from one another and can only manage and authenticate the users that they control.&lt;/p&gt;

&lt;p&gt;The master realm is the highest level in the hierarchy. 
Admin accounts in this realm have permissions to view and manage any other realm. 
It’s best to create a new realm to manage our application and users.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-realm&quot;&gt;Creating a New Realm&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_realm.png&quot; alt=&quot;&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Create a new realm by clicking on the drop-down arrow next to the realm name in the upper left corner.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_realm_2.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;heroes&lt;/code&gt; is chosen as the name of the realm.
Feel free to change this to the name of your organisation if you have one.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-client&quot;&gt;Creating a Client&lt;/h2&gt;

&lt;p&gt;Every application that interacts with Keycloak is considered to be a client.&lt;br /&gt;
Let’s create one for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single-Page App&lt;/a&gt; (SPA).&lt;/p&gt;

&lt;p&gt;Look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Clients&lt;/code&gt; tab in the menu and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;br /&gt;
Pick a name you think is suitable and choose &lt;a href=&quot;https://openid.net/connect/&quot;&gt;OpenID Connect&lt;/a&gt; (OIDC) as protocol.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Root URL&lt;/code&gt; can remain blank.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_client.png&quot; alt=&quot;&quot; width=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After saving, we can see all the configuration options of the client.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Valid Redirect URIs&lt;/code&gt; should be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4200/*&lt;/code&gt; as this is the address of our SPA&lt;/li&gt;
  &lt;li&gt;Allow all origins for testing purposes&lt;/li&gt;
  &lt;li&gt;Single-page apps use a &lt;code class=&quot;highlighter-rouge&quot;&gt;public client&lt;/code&gt; because they can not securely hide client credentials&lt;/li&gt;
  &lt;li&gt;Make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;Standard Flow&lt;/code&gt; is enabled. All other flows can be disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/configure_client.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Standard flow is another name for the &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-1.3.1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Authorization Code Flow&lt;/a&gt; as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the OAuth 2.0 specification&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Direct Access Grants Enabled&lt;/code&gt; may remain enabled for now. It will be easy to test our configuration later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t forget to hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Save&lt;/code&gt; at the bottom of the form!&lt;/p&gt;

&lt;h2 id=&quot;creating-roles-and-scopes&quot;&gt;Creating Roles and Scopes&lt;/h2&gt;
&lt;p&gt;Roles and scopes can be used to provide fine-grained access control to resources. 
We want them to be present when handling requests with our Spring Boot application. 
This part is optional, but can provide better insight in managing access to resources down the road.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;Roles&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Role&lt;/code&gt;, enter any name you like. 
Some standard roles are typically user or admin.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_role.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A scope is created in a similar way under &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Scopes&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Create&lt;/code&gt;.&lt;br /&gt;
We will not show a consent screen, so you can uncheck this option.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_scope.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now add the scope to the client we created earlier under &lt;code class=&quot;highlighter-rouge&quot;&gt;Clients&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Scopes&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/assign_scope.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-user&quot;&gt;Creating a user&lt;/h2&gt;

&lt;p&gt;To use our application later, we need a user to log in with.
In most corporate environments, users are stored in Active Directory (AD) or LDAP.
Keycloak can connect to both AD and LDAP but for our example, we will simply create a user in Keycloak itself.&lt;/p&gt;

&lt;p&gt;Search for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Users&lt;/code&gt; tab in the menu on the left and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Add User&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_user.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Check &lt;code class=&quot;highlighter-rouge&quot;&gt;Email Verified&lt;/code&gt; as we do not have email configured on our Keycloak server.&lt;br /&gt;
After creation, you still have to set a password.
Go to the Credentials tab and enter a new one.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/create_user_password.png&quot; alt=&quot;&quot; width=&quot;40%&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make sure the password is not a temporary one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you created a new role in the previous section, you can assign it to your user under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Role Mappings&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;That’s all for the Keycloak part.
Now let’s look at some applications to secure.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-front-end-and-back-end-applications&quot;&gt;Setting up the Front End and Back End Applications&lt;/h1&gt;

&lt;p&gt;The demo setup will consist of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an Angular SPA project&lt;/li&gt;
  &lt;li&gt;a Spring Boot application to serve some data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spring-boot-back-end&quot;&gt;Spring Boot Back End&lt;/h2&gt;

&lt;p&gt;You can clone the base setup &lt;a href=&quot;https://github.com/jmeys/heroes-api&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt; and switch to the &lt;code class=&quot;highlighter-rouge&quot;&gt;unsecured&lt;/code&gt; branch.
It is a very simple application which serves some heroes on &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes/{id}&lt;/code&gt; on port 9090.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/heroes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeroController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pieter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someHeroes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this example, every application may request these resources, hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;@CrossOrigin(&quot;*&quot;)&lt;/code&gt;.
Open the project in your favourite IDE and run it. 
The application will run on port 9090.&lt;/p&gt;

&lt;h2 id=&quot;angular-app-tour-of-heroes&quot;&gt;Angular App: Tour of Heroes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes&lt;/a&gt; is the Angular tutorial application. 
It’s pretty simple but has all the basic components which make up a modern Angular application. 
And most importantly, it’s kept up to date with the latest version of Angular.&lt;/p&gt;

&lt;p&gt;Use these commands or &lt;a href=&quot;https://angular.io/generated/zips/toh-pt6/toh-pt6.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download&lt;/a&gt; the latest version of the Tour Of Heroes application from &lt;a href=&quot;https://angular.io/tutorial/toh-pt6&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://angular.io/generated/zips/toh-pt6/toh-pt6.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip toh-pt6.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; toh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;toh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example app uses an in-memory service to return some heroes. 
Since you’ll want to serve them from Spring Boot instead, change the url in &lt;code class=&quot;highlighter-rouge&quot;&gt;hero.service.ts&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;api/heroes&quot;&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;http://localhost:9090/api/heroes&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heroesUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:9090/api/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will still try to fetch preloaded heroes from memory, so delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can run the application with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ng serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and browse to &lt;a href=&quot;http://localhost:4200&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;localhost:4200&lt;/a&gt; to see if it works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that not all functionality of the app is working because - for brevity - we only implemented the GET functionality in the Spring Boot back end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;implementing-security&quot;&gt;Implementing Security&lt;/h1&gt;
&lt;p&gt;We will now dive into the interesting part: setting up the security of the applications.
To understand this section, you should have a basic understanding of OAuth 2.0 and OIDC. 
If this is not yet the case, this section might be more difficult to understand. 
You can fast-forward to the next section or start your journey by watching this awesome video by &lt;a href=&quot;https://twitter.com/nbarbettini&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nate Barbettini&lt;/a&gt; from &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Okta&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/996OiexHze0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-flow-versus-code-flow--pkce&quot;&gt;Implicit Flow versus Code Flow + PKCE&lt;/h2&gt;
&lt;p&gt;In this example, we will use the authorization code grant flow with Proof Key for Code Exchange (&lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCE&lt;/a&gt;) to secure the Angular app. 
It’s a very long name for what could be shortened to “code flow + PKCE” which is &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.1.2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;more secure than the implicit flow&lt;/a&gt;. &lt;br /&gt;
In fact, the implicit flow was never very secure to begin with. 
This is well-explained by &lt;a href=&quot;https://twitter.com/nbarbettini&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nate Barbettini&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/aaronpk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aaron Parecki&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/CHzERullHe8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The implicit flow was the easiest to understand, since it required one step less than the standard code flow:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/implicit_vs_code.png&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;PKCE is an addition on top of the standard code flow to make it usable for public clients. 
It is already in use for native and mobile clients. 
PKCE boils down to this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Give &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; of random value to authorization server when logging in to ask for &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Hand over the &lt;code class=&quot;highlighter-rouge&quot;&gt;random value&lt;/code&gt; to authorization server when exchanging &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;access token&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Authorization server returns &lt;code class=&quot;highlighter-rouge&quot;&gt;access token&lt;/code&gt; after verifying that &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; belongs to &lt;code class=&quot;highlighter-rouge&quot;&gt;random value&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/pkce.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If a fraudster were to intercept our authorization grant (the code), he or she would still not have the &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;, which is stored in our SPA client. 
If he/she tries to exchange the stolen authorization grant without this value, the response would not be a token but rather an &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 400&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;invalid_grant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error_description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PKCE code verifier not specified&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is why the code flow + PKCE is more secure than the implicit flow. 
Even if an attacker manages to obtain the authorization grant, it’s worthless without the &lt;code class=&quot;highlighter-rouge&quot;&gt;code_verifier&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the HTTP 400 will only occur when using PKCE. 
If no PKCE is used, the client should be confidential (requiring credentials to exchange the authorization grant) rather than be public.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So only our Angular client will be able to retrieve the access token in the form of a JSON Web Token.&lt;/p&gt;

&lt;h2 id=&quot;json-web-token-jwt&quot;&gt;JSON Web Token (JWT)&lt;/h2&gt;
&lt;p&gt;JSON Web Tokens or JWT, often pronounced as ‘jot’, is an open standard for a compact way of representing data to be transferred between two parties. 
What this means is that it’s a special kind of object which has some data in it. It can also be digitally signed to make sure it is not tampered with.&lt;/p&gt;

&lt;p&gt;In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt;:  the type of the token and the signing algorithm being used&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Payload&lt;/code&gt;: the payload, which contains the claims and additional data&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signature&lt;/code&gt;: to verify if the token was not tampered with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, a JWT typically looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xxxxx.yyyyy.zzzzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header (xxx) and payload (yyy) are base64 encoded. 
An access token is a good example of a JWT:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkdE9JZkY2NGZRYnlwWVRFdGV2eV83NUdIWTdQMmNHU1o2a2ZXWDdFblBJIn0.eyJqdGkiOiIxY2EzZTZkYS1kM2Y2LTRiYTMtYjNjZC1iMDExYmRlM2JmNmIiLCJleHAiOjE1NjYzMjk1NTYsIm5iZiI6MCwiaWF0IjoxNTY2MzI5MjU2LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvaGVyb2VzIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjBkNjg0OWI4LWUyZmEtNGU3My04NjlhLTE1ZDVhOTE1YzdhMiIsInR5cCI6IkJlYXJlciIsImF6cCI6InNwYS1oZXJvZXMiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiI4NWRjYTg0Ny00YmQzLTRiOTUtOTNiYy01MjE5ZjUzYWNiMzciLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJ1c2VyIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBoZXJvZXMgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiSmVyb2VuIE1leXMiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJqZXJvZW4iLCJnaXZlbl9uYW1lIjoiSmVyb2VuIiwiZmFtaWx5X25hbWUiOiJNZXlzIiwiZW1haWwiOiJtZUBhY21lLmJlIn0.cvn79d-n0aFYqDB3p-htDNeeYOdkvqEsmDhGKp9V3a4i6nJx7dU0_r7zicQe26ZgDsM65ILx_X-buWv-e5_eraFo1OOveCGtBbrrLwrQ0Z7SlVMHJrDooJrLEE_m8Qlz_-iLcEC2-ODroEwyLRej_Du626B48QL2bcq-8ADqGSaLf7Y4ZTVMiP_p6dsCi4GDQLq1WOy-g6--z47FKTJVuAl2yY_JNNuEd5aofw0FTE38EoEinIdcy5NXCXDhtGHr_k5lA2Swu4JvK84YB6usECigCb1_zO_c6LhZQkRTCcCojxC6Qn1trQH9epcFEKTkDCHrNf6BLp4X9rH2URWJcA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can easily decode them using online tools like &lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;jwt.io&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/jwt.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The payload section can have different kinds of data. 
Since our tokens are used for OAuth and OIDC, they have all kinds of claims, which are key-value statements about an entity. 
You can compare this to something like a coupon. A coupon has claims about how much it is worth, which product(s) it applies to and when it expires.&lt;/p&gt;

&lt;p&gt;In our example token there is a claim that &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Jeroen Meys&lt;/code&gt; and also that &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;email profile heroes&lt;/code&gt;. 
This scope claim means we can use this token to know my email, some profile info and whatever heroes is needed for (hint: keep on reading to find out!). 
If you are interested in other JWT use-cases, you should definitely give &lt;a href=&quot;https://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Using JWT for State Transfer&lt;/a&gt; a read.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be careful with online tools to analyze JWT tokens. You are exposing access tokens to the world!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we understand what an access token is and looks like, we can pass it along to the back end which will be configured as a stateless OAuth Resource Server.&lt;/p&gt;

&lt;h2 id=&quot;resource-server-in-spring-boot&quot;&gt;Resource Server in Spring Boot&lt;/h2&gt;
&lt;p&gt;Resource server is the OAuth 2.0 terminology for API server. 
It will look at our access token and decide if we are allowed to perform the requested API action.&lt;br /&gt;
What we really want to secure is the data served by our Spring Boot app.
We don’t want the villains out there to be able to access our list of heroes, do we?&lt;/p&gt;

&lt;p&gt;Let’s take care of that.&lt;/p&gt;

&lt;p&gt;While Keycloak provides its &lt;a href=&quot;https://github.com/keycloak/keycloak/tree/master/adapters/oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;own libraries&lt;/a&gt; to be used with Spring Boot, I personally favour more generic libraries that are provider unaware. 
This is in line with the &lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview-philosophy&quot;&gt;Spring framework design philosophy&lt;/a&gt; of deferring design decisions as late as possible.
This way, when we feel like it, we can more easily switch from one solution (Keycloak) to another (eg. Okta), as long as they support the OIDC protocol. 
The de facto standard for securing Spring Boot applications is Spring Boot Security. 
It has resource server support, so this is what we’ll be using.&lt;/p&gt;

&lt;h3 id=&quot;resource-server-imports&quot;&gt;Resource Server Imports&lt;/h3&gt;
&lt;p&gt;Let’s add the dependecies to our &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-security'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-oauth2-resource-server'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-oauth2-jose'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-security&lt;/code&gt;: starter dependency for Spring Security&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-security-oauth2-resource-server&lt;/code&gt;: dependency to use our application as a Resource Server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-security-oauth2-jose&lt;/code&gt;: support for the Javascript Object Signing and Encryption framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuration-of-the-resource-server&quot;&gt;Configuration of the Resource Server&lt;/h3&gt;
&lt;p&gt;Then all we have to do is some configuring.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.builders.HttpSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceServerConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/heroes/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SCOPE_heroes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;denyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oauth2ResourceServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these few lines of code, a lot is happening. We told Spring Security that all endpoints are forbidden, except for &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/heroes/**&lt;/code&gt; when the heroes scope is present. This will be checked against the JWT access token.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth2ResourceServer()&lt;/code&gt; sets up the application as a resource server. It will check if there is an access token on every request and whether it is valid or not. 
In order to verify that a token hasn’t been tampered with, we need some information from Keycloak, which it exposes via a REST endpoint.&lt;/p&gt;

&lt;p&gt;We add the endpoint to our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;spring.security.oauth2.resourceserver.jwt.jwk-set-uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://localhost:8080/auth/realms/heroes/protocol/openid-connect/certs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-the-setup&quot;&gt;Testing the setup&lt;/h3&gt;

&lt;p&gt;That’s all for the resource server part.
Don’t forget to restart the Spring Boot application after these changes!&lt;/p&gt;

&lt;p&gt;We can use curl to verify if our security is working correctly.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; http://localhost:9090/api/heroes
HTTP/1.1 401
Set-Cookie: &lt;span class=&quot;nv&quot;&gt;JSESSIONID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;A2268A4D12924631929BEBDA57CB2333&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; HttpOnly
WWW-Authenticate: Bearer
X-Content-Type-Options: nosniff
X-XSS-Protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
Cache-Control: no-cache, no-store, max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Length: 0
Date: Sun, 18 Aug 2019 21:15:14 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without a token, the server responds with HTTP 401. 
This means we are not authorized. 
As we don’t have a login form available just yet, we can use the Direct Access Grants flow to obtain a token. 
This can come in very handy for testing different scenarios as well.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;client_id=spa-heroes&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;username=jeroen&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;password=1234&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;grant_type=password&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/auth/realms/heroes/protocol/openid-connect/token | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .access_token&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TOKEN&lt;/span&gt;
eyJhbGciOeUNvcWVJVWxNIn0.eyJqdGkiOiI......Hnz5aFdcAiB-5o-yep6rcGP_H6yQoW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make sure ‘Direct Access Grants Enabled’ is enabled in the Keycloak Client settings&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now use this token to request the resource once more:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authorization: Bearer &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOKEN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; http://localhost:9090/api/heroes
HTTP/1.1 200
X-Content-Type-Options: nosniff
X-XSS-Protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
Cache-Control: no-cache, no-store, max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Type: application/json&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
Transfer-Encoding: chunked
Date: Sun, 18 Aug 2019 21:25:36 GMT

&lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Ken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:2,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:3,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Pieter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time we got the requested resource back from the server!&lt;/p&gt;

&lt;h2 id=&quot;securing-the-angular-application&quot;&gt;Securing The Angular application&lt;/h2&gt;

&lt;p&gt;When we now look at our Tour Of Heroes application again, it’s complaining a bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HeroService: getHeroes failed: Http failure response for http://localhost:9090/api/heroes: 401 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We didn’t log in (HTTP 401), so we can’t see the content. Time to fix it!&lt;/p&gt;

&lt;p&gt;There are many packages we could use to secure our Angular app. An easy one to get started with, is &lt;a href=&quot;https://github.com/manfredsteyer/angular-oauth2-oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;angular-oauth2-oidc&lt;/a&gt; from Manfred Steyer but you could use any library, as long as it’s &lt;a href=&quot;https://openid.net/certification/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;certified by OpenID&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add it to the dependencies:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i angular-oauth2-oidc &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add it to the imports of &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/common/http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HttpClientModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;OAuthModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resourceServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;allowedUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:9090/api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sendAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we configure &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:9090/api&lt;/code&gt; to be the only URL where we will send our access token to.&lt;/p&gt;

&lt;p&gt;Next up, let’s add log in and log out buttons in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;(click)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Login
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;(click)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logoff()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Logout
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all there is left to do is to configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthService&lt;/code&gt;. We do this in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component.ts&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@angular/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NullValidationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JwksValidationHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;angular-oauth2-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.component.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Tour of Heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;authConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:8080/auth/realms/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;redirectUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;spa-heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;openid profile email offline_access heroes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// at_hash is not present in JWT token&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;disableAtHashCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;showDebugInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initLoginFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenValidationHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NullValidationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oauthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadDiscoveryDocumentAndTryLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure that the name of the realm (heroes) and the client id (spa-heroes) correspond to the ones you defined in Keycloak. 
Remember how we required the heroes scope to be present in our back end? The scope property is how we fix this. 
If we omit &lt;code class=&quot;highlighter-rouge&quot;&gt;heroes&lt;/code&gt; from the scope list, we will be getting a 403 response from our resource server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keycloak is not returning the &lt;code class=&quot;highlighter-rouge&quot;&gt;at_hash&lt;/code&gt; claim in the access token. For this reason, the client library would crash while parsing it.
This is why we disable it in the config but also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NullValidationHandler&lt;/code&gt; instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwksValidationHandler&lt;/code&gt; as it would also make the application crash.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now try to log in and if all went well, we should see our heroes appear again when browsing to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dashboard&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t worry if you do not immediatly see the heroes appear. This is because we load the &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt; page before our code was exchanged for an access token.
This results in the first &lt;code class=&quot;highlighter-rouge&quot;&gt;/heroes&lt;/code&gt; call getting a 401 response. You can create a new endpoint and use it as the redirectUri to get rid of this problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit-contain&quot; src=&quot;/img/securing-web-applications-with-keycloak/result.gif&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We set up a Keycloak server and covered how we can secure a Spring Boot API by turning it into a resource server. 
We then discussed why the authorization grant flow + PKCE replaces the implicit flow and how to implement it in an Angular application.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Meys&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen-meys/&quot;, &quot;avatar&quot;=&gt;&quot;jeroen-meys.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;jeroen-meys-35416253&quot;, &quot;twitter&quot;=&gt;&quot;JeroenMeys&quot;, &quot;email&quot;=&gt;&quot;jeroen.meys@ordina.be&quot;, &quot;github&quot;=&gt;&quot;jmeys&quot;, &quot;bio&quot;=&gt;&quot;Jeroen is a Java Developer at Ordina Belgium who is passionate about security and has a secret love for the Windows operating system.&quot;}</name><email>jeroen.meys@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="OAuth" /><category term="OIDC" /><category term="PKCE" /><category term="JWT" /><category term="Keycloak" /><category term="Resource Server" /><category term="Spring Security" /><category term="Angular" /><summary type="html">Gone are the days when we had to write our own login mechanisms and permission systems. This article is about how we can hook up our applications to an Identity and Access Management (IAM) solution such as Keycloak in a secure way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/securing-web-applications-with-keycloak/keycloak.jpg" /></entry><entry><title type="html">Using Let’s Encrypt certificates in Java applications</title><link href="https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java.html" rel="alternate" type="text/html" title="Using Let's Encrypt certificates in Java applications" /><published>2019-08-14T00:00:00+00:00</published><updated>2019-08-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java.html">&lt;blockquote&gt;
  &lt;p&gt;At some point in their career, developers come accross the need to work with security certificates.
This article describes how to setup Let’s Encrypt, retrieve a certificate, renew it automatically and use the certificate in a Java application for TLS communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#certificate-authorities-and-lets-encrypt&quot;&gt;Certificate Authorities and Let’s Encrypt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-a-lets-encrypt-certificate&quot;&gt;Installing a Let’s Encrypt certificate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#certificate-renewal&quot;&gt;Certificate renewal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automating-the-renewal-process&quot;&gt;Automating the renewal process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-certificates-in-a-java-application&quot;&gt;Using the certificates in a Java application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;certificate-authorities-and-lets-encrypt&quot;&gt;Certificate Authorities and Let’s Encrypt&lt;/h1&gt;

&lt;p&gt;When you want to enable HTTPS on your website or need certificates for TLS communication, you’ll need to request this certificate from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certificate Authority&lt;/a&gt; (CA).
It acts as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Trusted_third_party&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;trusted third party&lt;/a&gt; between two parties that need to communicate with each other.
&lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Let’s Encrypt&lt;/a&gt; is such a Certificate Authority.
It is their mission to give everyone a secure and privacy-respecting web experience.
That’s why they issue certificates free of charge.&lt;/p&gt;

&lt;h1 id=&quot;installing-a-lets-encrypt-certificate&quot;&gt;Installing a Let’s Encrypt certificate&lt;/h1&gt;

&lt;p&gt;Assuming that you have shell access to your server, Let’s Encrypt recommends to use &lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot ACME Client&lt;/a&gt;, since it can automate certificate issuance and installation with zero downtime.&lt;/p&gt;

&lt;p&gt;Certbot is a free, open source software tool for automatically using Let’s Encrypt certificates on manually-administrated websites to enable HTTPS.&lt;/p&gt;

&lt;p&gt;Clear installation instructions can be found on the Certbot website.
Select your web server software (Apache, Nginx, …) and operating system and Certbot provides the installation instructions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can check your operating system on Linux by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/os-release&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note that these instructions also include setting up HTTPS for your website, which for this tutorial isn’t necessary.
We’ll use the certificate in another way, for TLS communication in a Java application.&lt;/p&gt;

&lt;p&gt;For Ubuntu, the following steps are required to install Certbot.
See also &lt;a href=&quot;https://certbot.eff.org/lets-encrypt/ubuntuxenial-apache&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache on Ubuntu 16.04 (xenial)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Certbot is installed using APT (Advanced Package Tool), a tool for installing and removing applications on Debian based systems. This tool searches in its repositories for software distributions.
Before you can install Certbot, you’ll need to add the Certbot PPA (Personal Package Archive) to your list of available APT repositories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the following command to install Certbot.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install certbot python-certbot-apache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot&lt;/code&gt; retrieves a certificate and installs it immediately on your web server by adding an extra parameter, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;--apache&lt;/code&gt; for &lt;a href=&quot;https://httpd.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache HTTP Server&lt;/a&gt;.
For our situation, it is enough to retrieve a certificate.
This is done by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;certonly&lt;/code&gt; parameter to the command as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certbot certonly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the installed Let’s Encrypt certificates in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live&lt;/code&gt; folder on your file system.&lt;/p&gt;

&lt;h1 id=&quot;certificate-renewal&quot;&gt;Certificate renewal&lt;/h1&gt;

&lt;p&gt;Let’s Encrypt CA issues short-lived certificates of 90 days.
Therefore certificates must be renewed at least once in 3 months.&lt;/p&gt;

&lt;p&gt;Certificate renewal is actually quite simple with Certbot.
You can renew the certificates with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certbot renew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt; to the command if you want to try it out without consequences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Executing this command multiple times is not a problem.
When the certificate is not due for renewal, nothing will happen and you’ll receive an output comparable to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Saving debug log to /var/log/letsencrypt/letsencrypt.log

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /etc/letsencrypt/renewal/mydomain.be.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cert not yet due for renewal
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/mydomain.be/fullchain.pem expires on 2019-09-14 (skipped)
No renewals were attempted.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;automating-the-renewal-process&quot;&gt;Automating the renewal process&lt;/h1&gt;

&lt;p&gt;Certbot &lt;a href=&quot;https://certbot.eff.org/docs/using.html?highlight=hooks#automated-renewals&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;automatically renews&lt;/a&gt; certificates on most operating systems now.&lt;/p&gt;

&lt;p&gt;Check your operating system’s crontab (typically in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.*/*&lt;/code&gt; and systemd timers (&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt;).
On our Ubuntu system we executed &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt; and found a &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot.timer&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NEXT                          LEFT          LAST                          PASSED       UNIT                         ACTIVATES
Wed 2019-08-14 10:47:41 CEST  1h 19min left Tue 2019-08-13 18:00:03 CEST  15h ago      certbot.timer                certbot.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It basically boils down to the &lt;code class=&quot;highlighter-rouge&quot;&gt;certbot renew&lt;/code&gt; command being executed periodically.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your Linux distribution package didn’t install the cronjob, you can easily set this up yourself.
Since we need to automate the keystore and truststore creation as well, you can look at the section &lt;a href=&quot;#automate-the-keystore-and-truststore-creation-process&quot;&gt;Automate the keystore and truststore creation process&lt;/a&gt; for more information on creating cronjobs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;using-the-certificates-in-a-java-application&quot;&gt;Using the certificates in a Java application&lt;/h1&gt;

&lt;p&gt;All generated keys and issued Let’s Encrypt certificates can be found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live&lt;/code&gt; folder on your file system.
We will now see how we can import them in Java keystore files to use them in a Java application.&lt;/p&gt;

&lt;h2 id=&quot;importing-certificates-into-cacerts&quot;&gt;Importing certificates into &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The first way you can use certificates in a JVM is to add them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt; file of your Java distribution.&lt;/p&gt;

&lt;p&gt;Every JRE has its own keystore, which contains all Certificate Authorities it trusts.
This is also referred to as a &lt;code class=&quot;highlighter-rouge&quot;&gt;truststore&lt;/code&gt;.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;truststore&lt;/code&gt; is stored as a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt;.
It is typically located in &lt;code class=&quot;highlighter-rouge&quot;&gt;$JAVA_HOME/jre/lib/security&lt;/code&gt; assuming &lt;code class=&quot;highlighter-rouge&quot;&gt;$JAVA_HOME&lt;/code&gt; is where your JRE or JDK is installed.
The default password for this keystore is &lt;code class=&quot;highlighter-rouge&quot;&gt;changeit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following command imports the certificates into your JRE truststore.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -import -alias mydomain.be \
	-keystore $JAVA_HOME/jre/lib/security/cacerts \
	-file /etc/letsencrypt/live/mydomain.be/cert.pem \
	-storepass changeit \
	-noprompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that adding certificates to &lt;code class=&quot;highlighter-rouge&quot;&gt;cacerts&lt;/code&gt; is not always the best solution.
Although technically it is a fully functional keystore file, its purpose is mainly for determining which third-party certificates to trust.
On top of this, it is tied to your Java installation and when you install another JRE or JDK, you’ll need to add the certificates again.&lt;/p&gt;

&lt;p&gt;Our preferred approach is to add your own certificates to a keystore and the third-party certificates to a separate truststore.
Continue reading to see how you can do that.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-separate-keystore-file&quot;&gt;Creating a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;To use a certificate in a Java application, the preferred way is to add it to a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The Java Runtime Environment (JRE) ships with a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt; to create certificates and manipulate key stores.
Adding certificates to a keystore can be done by using OpenSSL and the &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You cannot import multiple public and private &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; certificates directly in a keystore, so you’ll first need to add all &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; files to a &lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS_12&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCS 12&lt;/a&gt; archive.
We do this with the OpenSSL tool with the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs12 -export \
	 -in /etc/letsencrypt/live/mydomain.be/cert.pem \
	 -inkey /etc/letsencrypt/live/mydomain.be/privkey.pem \
	 -out /tmp/mydomain.be.p12 \
	 -name mydomain.be \
	 -CAfile /etc/letsencrypt/live/mydomain.be/fullchain.pem \
	 -caname &quot;Let's Encrypt Authority X3&quot; \
	 -password pass:changeit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.be&lt;/code&gt; with your own DNS name.&lt;/p&gt;

&lt;p&gt;The next step is to import the certificates into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -importkeystore \
	-deststorepass changeit \
	-destkeypass changeit \
	-deststoretype pkcs12 \
	-srckeystore /tmp/mydomain.be.p12 \
	-srcstoretype PKCS12 \
	-srcstorepass changeit \
	-destkeystore /tmp/mydomain.be.keystore \
	-alias mydomain.be
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now load the keystore at location &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/mydomain.be.keystore&lt;/code&gt; in your Java application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that you not only need to create a keystore with your own certificates, but also a truststore with the trusted third-party certificates.
However, the approach is exactly the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;automate-the-keystore-and-truststore-creation-process&quot;&gt;Automate the keystore and truststore creation process&lt;/h2&gt;

&lt;p&gt;Create a shell script &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/&amp;lt;username&amp;gt;/renew-keystore.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create keystore&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Refreshing '~/ssl/mydomain.be.keystore'&quot;&lt;/span&gt;
openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-export&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; /tmp/mydomain.be.p12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; mydomain.be &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-CAfile&lt;/span&gt; /etc/letsencrypt/live/mydomain.be/fullchain.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-caname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Let's Encrypt Authority X3&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-password&lt;/span&gt; pass:changeit
keytool &lt;span class=&quot;nt&quot;&gt;-importkeystore&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-deststorepass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-destkeypass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-deststoretype&lt;/span&gt; pkcs12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srckeystore&lt;/span&gt; /tmp/mydomain.be.p12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srcstoretype&lt;/span&gt; PKCS12 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-srcstorepass&lt;/span&gt; changeit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-destkeystore&lt;/span&gt; /tmp/mydomain.be.keystore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; mydomain.be
&lt;span class=&quot;c&quot;&gt;# Move certificates to other servers&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copy '~/ssl/mydomain.be.keystore' to cluster servers&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /tmp/mydomain.be.keystore /home/admin_jworks/ssl/mydomain.be.keystore
scp  /tmp/mydomain.be.keystore cc-backend-node-02:/home/admin_jworks/ssl/mydomain.be.keystore
scp  /tmp/mydomain.be.keystore cc-frontend-node-01:/home/admin_jworks/ssl/mydomain.be.keystore

&lt;span class=&quot;c&quot;&gt;# Create truststore&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Refreshing '~/ssl/theirdomain.be.keystore'&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;theirdomain.be.keystore
openssl s_client &lt;span class=&quot;nt&quot;&gt;-connect&lt;/span&gt; theirdomain.be:443 &lt;span class=&quot;nt&quot;&gt;-showcerts&lt;/span&gt; &amp;lt;/dev/null 2&amp;gt;/dev/null|openssl x509 &lt;span class=&quot;nt&quot;&gt;-outform&lt;/span&gt; DER &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;theirdomain.der
openssl x509 &lt;span class=&quot;nt&quot;&gt;-inform&lt;/span&gt; der &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; theirdomain.der &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; theirdomain.pem
keytool &lt;span class=&quot;nt&quot;&gt;-import&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; theirdomain &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; theirdomain.be.keystore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-file&lt;/span&gt; ./theirdomain.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-storepass&lt;/span&gt; theirdomain &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-noprompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copy '~/ssl/theirdomain.be.keystore' to cluster servers&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;theirdomain.be.keystore /home/admin_jworks/ssl/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;scp ssl/theirdomain.be.keystore cc-backend-node-02:/home/admin_jworks/ssl/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;scp ssl/theirdomain.be.keystore cc-frontend-node-01:/home/admin_jworks/ssl/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might not need everything from this script.
It does more than creating a new keystore:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It creates the keystore &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.be.keystore&lt;/code&gt; as described in the previous section &lt;a href=&quot;#creating-a-separate-keystore-file&quot;&gt;Creating and using a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It creates a truststore by connecting to the third-party server, writing their certificate to a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;theirdomain.pem&lt;/code&gt; and importing that file in &lt;code class=&quot;highlighter-rouge&quot;&gt;theirdomain.be.keystore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It also copies both keystore and truststore files to other servers in our cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The command to execute this shell script is installed in one of the following locations: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.*/*&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl list-timers&lt;/code&gt;.
eg. To execute the script once every hour, you can add it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.hourly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will edit the contents of the crontab file on the system with &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt;.
The line should start with a cron expression telling the system when to execute the task followed by the command to be executed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Example of job definition:
.---------------- minute (0 - 59)
| .------------- hour (0 - 23)
| | .---------- day of month (1 - 31)
| | | .------- month (1 - 12) OR jan,feb,mar,apr ...
| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
| | | | |
* * * * * command to be executed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can read more on cron expressions in the Baeldung blog &lt;a href=&quot;https://www.baeldung.com/cron-expressions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Guide To Cron Expressions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following line in crontab makes sure our script is executed every hour.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * * * * bash /home/&amp;lt;username&amp;gt;/renew-keystore.sh &amp;gt;&amp;gt; /var/log/renew-keystore.log 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to set execute permissions on the created script to allow the system to run the script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x /home/&amp;lt;username&amp;gt;/renew-keystore.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s no need to restart something after changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; file.
Cron will examine the modification time on all crontabs and reload those which contain changes.&lt;/p&gt;

&lt;h2 id=&quot;using-keystores-and-truststores-in-a-java-application&quot;&gt;Using keystores and truststores in a Java application&lt;/h2&gt;

&lt;h3 id=&quot;spring-boot-configuration-properties&quot;&gt;Spring Boot configuration properties&lt;/h3&gt;

&lt;p&gt;We’ll be using Spring Boot to externalize our TLS configuration.
First, we add properties to point to our keystore and truststore archives on the filesystem and provide the necessary passwords.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that there are existing Spring Boot properties prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;server.ssl&lt;/code&gt; to configure TLS.
However, these properties are used for securing connections to your Tomcat server.
They will not configure HTTP clients used within your application.
We also need to configure more information about the service we’re consuming, eg. the endpoint url.
We therefore specify our own properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myprefix:
    client:
        remote-service-endpoint-url: https://www.theirdomain.be/services/3.0
        trust-store: /ssl/theirdomain.be.jks
        trust-store-password: changeit
        key-store: /ssl/mydomain.be.keystore
        key-store-password: changeit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we load those properties in a &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Configuration
@ConfigurationProperties(&quot;myprefix.client&quot;)
public class MyClientProperties {
    private String remoteServiceEndpointUrl;
    private String keyStore;
    private String keyStorePassword;
    private String trustStore;
    private String trustStorePassword;
    // Getters and setters
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This class is instantiated by Spring and can be autowired in other beans.&lt;/p&gt;

&lt;h3 id=&quot;javas-sslcontext-and-http-clients&quot;&gt;Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt; and HTTP clients&lt;/h3&gt;

&lt;p&gt;In Java there are several frameworks you can use to establish an HTTP connection.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpURLConnection&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Apache HttpComponents &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-4.5.x/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HttpClient&lt;/a&gt; – Please note that this is the successor of &lt;a href=&quot;http://hc.apache.org/httpclient-legacy/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Commons HttpClient&lt;/a&gt;.
If you’ll be using this client, make sure you’re importing the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.httpcomponents&lt;/code&gt; version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://square.github.io/okhttp/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OkHttp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java supports TLS communication through its &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;We’ll be using Apache’s &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-4.5.x/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HttpClient&lt;/a&gt; to setup TLS communication.
This library has builder classes with which you can easily create an &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following Maven dependencies.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpcore&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${httpcore.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${httpclient.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.ssl.SSLContexts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.ssl.SSLContextBuilder&lt;/code&gt; to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSLContext sslContext = SSLContexts
    .custom()
    .loadKeyMaterial(Paths.get(properties.getKeyStore()).toFile(), properties.getKeyStorePassword().toCharArray(), properties.getKeyStorePassword().toCharArray())
    .loadTrustMaterial(Paths.get(properties.getTrustStore()).toFile(), properties.getTrustStorePassword().toCharArray())
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLContext&lt;/code&gt; can be used to create an Apache &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.impl.client.CloseableHttpClient&lt;/code&gt;.
We create the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.impl.client.HttpClients&lt;/code&gt; utility class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final CloseableHttpClient client = HttpClients
    .custom()
    .setSSLContext(sslContext)
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t have the &lt;code class=&quot;highlighter-rouge&quot;&gt;.setSSLContext(sslContext)&lt;/code&gt;, please check your &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.httpcomponents:httpclient&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;Each HTTP request executed using this client will be sent over a TLS connection.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that you also have the possibility to set the following Java system properties and ensure all communication uses TLS.&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.setProperty(&quot;javax.net.ssl.enabled&quot;, &quot;true&quot;);
System.setProperty(&quot;javax.net.ssl.trustStore&quot;, properties.getTrustStore());
System.setProperty(&quot;javax.net.ssl.trustStorePassword&quot;, properties.getTrustStorePassword());
System.setProperty(&quot;javax.net.ssl.keyPassword&quot;, properties.getKeyStorePassword());
System.setProperty(&quot;javax.net.ssl.keyStore&quot;, properties.getKeyStore());
System.setProperty(&quot;javax.net.ssl.keyStorePassword&quot;, properties.getKeyStorePassword());
System.setProperty(&quot;javax.net.ssl.clientAuth&quot;, &quot;need&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;Although it’s a valid possibility, these are settings for the entire system.
On top of that, when you need to integrate with multiple third-parties and are dealing with multiple trusted parties and multiple public/private keypairs, it can become a mess to add everything to single keystore and truststore files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-the-keystore-with-spring-rest&quot;&gt;Using the keystore with Spring REST&lt;/h3&gt;

&lt;p&gt;In the previous section we learned how to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.net.ssl.SSLContext&lt;/code&gt; and an Apache HttpComponents &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calling REST endpoints with Spring REST is done by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.client.RestTemplate&lt;/code&gt; class.
This class is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-web&lt;/code&gt; module, which is automatically added by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; dependency.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring’s &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; is an abstraction of the different HTTP clients we can use in Java.
Under the hood, when a request is executed on the &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt;, Spring uses the passed &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.client.ClientHttpRequestFactory&lt;/code&gt; to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.ClientHttpRequest&lt;/code&gt;, executes the request and transforms it to a &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.ClientHttpResponse&lt;/code&gt;.
There’s a specific implementation of these classes for each HTTP client.&lt;/p&gt;

&lt;p&gt;For example, for Apache’s HttpComponents HttpClient, you can find classes with the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpComponents&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpRequestFactory&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpRequest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.http.client.HttpComponentsClientHttpResponse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpComponentsClientHttpRequestFactory&lt;/code&gt; to customize the &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; and we register it with the Spring context by annotating the method with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; in one of the configuration classes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Bean
public RestTemplate restTemplate() throws Exception {
    return new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that in the above code snippet, &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; must be an instance of Apache’s HttpComponents HttpClient, eg. the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; we created in the previous section.&lt;/p&gt;

&lt;h3 id=&quot;using-the-keystore-with-spring-ws&quot;&gt;Using the keystore with Spring WS&lt;/h3&gt;

&lt;p&gt;From time to time you have to integrate with a SOAP web service from the customer or a third party and use TLS communication when doing so.&lt;/p&gt;

&lt;p&gt;In the following example, we’ll use &lt;a href=&quot;https://spring.io/projects/spring-ws&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Web Services&lt;/a&gt; to implement this.
Spring WS defines an interface &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.client.core.support.WebServiceGatewaySupport&lt;/code&gt; of which you can create an instance.
It uses an attribute of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.transport.WebServiceMessageSender&lt;/code&gt; to do the actual communication.
Like with Spring REST, there are specific implementations for each HTTP client library.
For Apache HttpComponents HttpClient, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.transport.http.HttpComponentsMessageSender&lt;/code&gt;.
It accepts an &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.http.client.HttpClient&lt;/code&gt; to use for low-level communication.&lt;/p&gt;

&lt;p&gt;Your application must provide a bean instance of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceGatewaySupport&lt;/code&gt;.
On this object, you can set an instance of a &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceMessageSender&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Bean
public Jaxb2Marshaller marshaller() {
    Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
    marshaller.setContextPath(&quot;fully.qualified.package.name.of.generated.sources&quot;);
    return marshaller;
}

@Bean
public MyClient myClientSecure(Jaxb2Marshaller marshaller) {
    MyClient client = new MyClient(properties);
    String url = properties.getRemoteServiceEndpointUrl();
    client.setDefaultUri(url);
    client.setMarshaller(marshaller);
    client.setUnmarshaller(marshaller);
    client.setMessageSender(new HttpComponentsMessageSender(client));
    return client;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like in the Spring REST example, &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; must be an instance of Apache’s HttpComponents HttpClient, eg. the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseableHttpClient&lt;/code&gt; we created earlier.&lt;/p&gt;

&lt;p&gt;Calling a service with the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.ws.client.core.WebServiceTemplate&lt;/code&gt; of our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClient&lt;/code&gt; bean now uses the configured keystore and truststore.
You can call a SOAP endpoint with &lt;code class=&quot;highlighter-rouge&quot;&gt;getWebServiceTemplate().marshalSendAndReceive(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClient&lt;/code&gt; class extends &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceGatewaySupport&lt;/code&gt;.
The code snippet below also includes a sample call.
&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestType&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseType&lt;/code&gt; are classes generated from the &lt;code class=&quot;highlighter-rouge&quot;&gt;wsdl&lt;/code&gt; file and typically reside in the &lt;code class=&quot;highlighter-rouge&quot;&gt;target/generated-sources&lt;/code&gt; directory of your project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Component
public class MyClient extends WebServiceGatewaySupport {
    public ResponseType getMonthlyAlertDetail(BigInteger alertId, String apiKey) {
        return JAXBElement&amp;lt;ResponseType&amp;gt; response = (JAXBElement&amp;lt;ResponseType&amp;gt;) getWebServiceTemplate()
                .marshalSendAndReceive(new RequestType(...), message -&amp;gt; ((SoapMessage) message).setSoapAction(&quot;SoapOperationName&quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-the-keystore-in-keycloak&quot;&gt;Using the keystore in Keycloak&lt;/h3&gt;

&lt;p&gt;If you’re using a product like eg. &lt;a href=&quot;https://www.keycloak.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Keycloak&lt;/a&gt; on your server, the way of using the certificate stays the same.
It’s even easier, as you don’t need to write code to read the &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file.
You can point to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.keystore&lt;/code&gt; file in the configuration files for that product.&lt;/p&gt;

&lt;p&gt;This is an example Keycloak configuration in the &lt;code class=&quot;highlighter-rouge&quot;&gt;standalone.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;security-realm name=&quot;ApplicationRealm&quot;&amp;gt;
    &amp;lt;server-identities&amp;gt;
        &amp;lt;ssl&amp;gt;
            &amp;lt;keystore path=&quot;/tmp/mydomain.be.keystore&quot; relative-to=&quot;jboss.server.config.dir&quot; keystore-password=&quot;changeit&quot; alias=&quot;mydomain.be&quot; key-password=&quot;changeit&quot; generate-self-signed-certificate-host=&quot;localhost&quot;/&amp;gt;
        &amp;lt;/ssl&amp;gt;
    &amp;lt;/server-identities&amp;gt;
&amp;lt;/security-realm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://letsencrypt.org/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Let’s Encrypt Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://certbot.eff.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://certbot.eff.org/docs/using.html?highlight=renew#renewing-certificates&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certbot CLI Renewing certificates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oracle Java keytool documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS_12&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PKCS 12 information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-ws&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ken&quot;, &quot;last_name&quot;=&gt;&quot;Coenen&quot;, &quot;twitter&quot;=&gt;&quot;CoenenKen&quot;, &quot;linkedin&quot;=&gt;&quot;coenenken&quot;, &quot;github&quot;=&gt;&quot;kencoenen&quot;, &quot;permalink&quot;=&gt;&quot;/author/ken-coenen/&quot;, &quot;avatar&quot;=&gt;&quot;ken-coenen.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Backend Practice Manager&quot;, &quot;email&quot;=&gt;&quot;ken.coenen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Ken is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he is also Backend Practice Manager of the Ordina JWorks unit. In this capacity, he narrows the gap between consultants and potential innovative customer projects. He does this by organizing workshops, talks and courses about the newest technologies, whereby people can grow in their role as a software consultant.&quot;}</name><email>ken.coenen@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="TLS" /><category term="Let's Encrypt" /><category term="Keycloak" /><summary type="html">At some point in their career, developers come accross the need to work with security certificates. This article describes how to setup Let’s Encrypt, retrieve a certificate, renew it automatically and use the certificate in a Java application for TLS communication.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/lets-encrypt.png" /></entry><entry><title type="html">Deploying your Spring Boot application with Kubernetes</title><link href="https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html" rel="alternate" type="text/html" title="Deploying your Spring Boot application with Kubernetes" /><published>2019-08-05T00:00:00+00:00</published><updated>2019-08-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/08/05/deploy-spring-boot-kubernetes.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Today we are going to look at the features and benefits of using a Kubernetes cluster to deploy your application. As I am mostly focused on Java development, we will use a standard Spring Boot application as an example.&lt;/p&gt;

&lt;p&gt;Assuming you have already heard of Kubernetes, you are probably aware of the continuing growth of this platform. More and more Kubernetes based platforms are growing in popularity because of the proven record of Kubernetes. Examples are OpenShift, Cloud Foundry, PKS, ….&lt;/p&gt;

&lt;p&gt;As adaptation is growing, many developers are wondering how to effectively use these platforms to deploy their application in the cloud on a Kubernetes cluster and make full use of its benefits.&lt;/p&gt;

&lt;p&gt;Many big providers have already picked up Kubernetes and are providing their own (semi) managed implementations. A couple of examples are &lt;a href=&quot;https://aws.amazon.com/eks/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Web Services (EKS)&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Cloud Platform (GKE)&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/nl-nl/services/kubernetes-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure (AKS)&lt;/a&gt;, &lt;a href=&quot;https://www.digitalocean.com/products/kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DigitalOcean&lt;/a&gt;, ….&lt;/p&gt;

&lt;p&gt;In this post we will take a look at how you can use Kubernetes to deploy a Spring Boot application.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.github.com/yolanv/kubernetesdemo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Spring Boot project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A Kubernetes cluster.
This can be a cluster in the cloud, in an on-premise datacenter or you can use &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;minikube&lt;/a&gt; if you want to try this on your local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the project from the prerequisites if you want to try it out with a sample project. This blog post will be based on this project. If you are using an other project, then change the names and labels where necessary.&lt;/p&gt;

&lt;h2 id=&quot;first-things-first-creating-a-docker-image&quot;&gt;First things first: creating a Docker image&lt;/h2&gt;

&lt;p&gt;Kubernetes works with Docker images. This means that your application needs to be dockerized so it can be pushed to a Docker registry. You can find a sample Dockerfile below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8-jre-alpine
WORKDIR /tmp
COPY target/kubernetesdemo-0.0.1-SNAPSHOT.jar app.jar
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a very basic Dockerfile but it will do for our example.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Docker&quot; src=&quot;/img/2019-07-11-deploy-spring-boot-kubernetes/docker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first line tells us to use the &lt;strong&gt;8-jre-alpine&lt;/strong&gt; image from the openJDK repository as our base image.
The second line tells the image that it should work from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory.
The third line copies the compiled JAR (which is compiled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt; command) file from your &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; folder to the Docker image (you might have to rename the file depending on the name of your project).&lt;/p&gt;

&lt;p&gt;Finally, we tell our image to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command as entry point, meaning that once the Docker image starts running, it has to execute that command.&lt;/p&gt;

&lt;p&gt;You can now push this image to your favourite Docker registry, as Kubernetes will need to pull this image from the registry later.
If you do not have a Docker registry, I suggest using &lt;a href=&quot;https://hub.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docker Hub&lt;/a&gt;.
If you are using Docker Hub, you can use the following commands to build and push your application to the registry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t DOCKER_HUB_USERNAME/APPLICATION_NAME .
docker push DOCKER_HUB_USERNAME/APPLICATION_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-the-magic-happens-deploying-your-application-on-the-kubernetes-cluster&quot;&gt;Where the magic happens: deploying your application on the Kubernetes cluster&lt;/h2&gt;

&lt;p&gt;All Kubernetes configurations are written in YAML. The reason for this is that Kubernetes configuration files are meant to be easily readable by the human eye and the Kubernetes team decided to use YAML instead of JSON.&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;Now that the Docker image is created, we can now deploy it on the Kubernetes cluster. 
First we need to create a deployment configuration file. This file contains the configuration on how the application should run.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yolanv/kubernetesdemo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There’s a lot going on here which I will be explaining step by step.
The first two lines are telling which Kubernetes API version is being used and what kind of Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;object&lt;/a&gt; is being applied. As we want to create a new Deployment, we use the Deployment object (easy, right?).&lt;/p&gt;

&lt;p&gt;Lines 3 to 6 are just basic metadata tags so the developer knows which application (s)he is working with. This does not affect the behaviour of the application in any way.&lt;/p&gt;

&lt;p&gt;Lines 7 to 21 are specifying how the container should be made and which image it has to run. This is the image that we created with the Dockerfile earlier in this post. After that, it describes the port that the container should listen to, which is 8080 in this case. The replica value specifies how many ‘instances’ (also called &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pods&lt;/a&gt;) that should be running. If the application is expecting a lot of requests, it might be useful to declare a higher number of replicas instead of only one.
Lines 13 to EOF are specifying the environment variables that the container uses. They can either be hard-coded like &lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt; or a &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Secret&lt;/a&gt; or &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap&lt;/a&gt; can be created, which can then be used in a Deployment configuration, as in the example above.&lt;/p&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;
&lt;p&gt;The Deployment is up and running, but we need some way to access our pod from the outside world. This is where a &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Service&lt;/a&gt; comes in. 
A Service provides external access to a set of Pods and decides which pod should handle the request.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesdemo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30011&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first four lines should be familiar.
Instead of a Deployment, we are now declaring a Service.&lt;/p&gt;

&lt;p&gt;There are three types of services you can declare: ClusterIP, NodePort and LoadBalancer. It is not recommended to use NodePort in a production environment because of the limited options. Instead you might want to use a LoadBalancer. Most big cloud providers can provide a LoadBalancer for you. Another option is to use an &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ingress&lt;/a&gt;, which is a recommended and popular option. If you want to learn more about this, I suggest you consult the &lt;a href=&quot;https://v1-13.docs.kubernetes.io/docs/concepts/services-networking/service/#nodeport&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official Kubernetes documentation&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;nodePort&lt;/code&gt; value can be left out if you want Kubernetes to assign a random NodePort to your service.&lt;/p&gt;

&lt;p&gt;The selector value is meant to find the Pods with the same value as &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.selector.matchLabels&lt;/code&gt; from the Deployment configuration. This is how the Service is able to find our Pods.&lt;/p&gt;
&lt;h3 id=&quot;applying-the-configuration&quot;&gt;Applying the configuration&lt;/h3&gt;

&lt;p&gt;Now that we have our YAML files, we can apply them to the cluster. You can even combine the two configurations into one file and separate them with &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;.
You can use this separator to prevent having too many YAML configuration files.&lt;/p&gt;

&lt;p&gt;You can apply the configuration by using the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f k8s/kubernetesdemo-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will be something like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment.apps/kubernetesdemo created
service/kubernetesdemo created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application is now accessible through &lt;code class=&quot;highlighter-rouge&quot;&gt;http://IP_ADDRESS:NODE_PORT&lt;/code&gt;. So if you are using Minikube, the IP should be &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.99.100:30080/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There is a lot of documentation available on the internet if you want to learn more about the power of Kubernetes. Think about the options and features that are available when using this platform. You can integrate it with your CI / CD tools (automated deployments!), autoscaling, … . The options are endless. 
If you have any questions or feedback, I would love to hear them from you.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Cloud" /><category term="Kubernetes" /><category term="Spring" /><category term="Spring Boot" /><category term="Docker" /><category term="AWS" /><category term="EKS" /><category term="Google" /><category term="GKE" /><category term="DigitalOcean" /><category term="Azure" /><category term="AKS" /><category term="kubectl" /><category term="Minikube" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-07-11-deploy-spring-boot-kubernetes/banner.jpg" /></entry><entry><title type="html">Cypress: a new kid on the E2E block</title><link href="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html" rel="alternate" type="text/html" title="Cypress: a new kid on the E2E block" /><published>2019-07-18T00:00:00+00:00</published><updated>2019-07-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/07/18/Cypress</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cypress&quot;&gt;Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison&quot;&gt;Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-cypress&quot;&gt;Setting up Cypress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amazing-features&quot;&gt;Amazing features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Those of us familiar with E2E testing a user interface, we all know the struggle.
Not only coding with waits and timeouts but setups that were harder to manage especially when running it on a continuous integration platform.
Maintaining versions, network issues, browser support, …&lt;/p&gt;

&lt;p&gt;For as long as I can remember, there was one constant in this setup!
Selenium was always there.
No matter what framework you used, Nightwatch, Protractor, Gauge, Robot, …
Selenium was the man in the middle.
All I can remember from building a Selenium setup a few years ago, are all the difficulties and frustrations.
Communication was not working, versions were not matching, timeout issues due to network lag, ….
But still, Selenium was a dependency that was needed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/selenium-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Not that I am not grateful for Selenium and its team of developers and maintainers, because let’s be honest, what would we have done without it?
But now, ohh yeah, there’s a new kid in town.&lt;/p&gt;

&lt;h1 id=&quot;cypress&quot;&gt;Cypress&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser
~&lt;a target=&quot;\_blank&quot; href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cypress is aiming to provide its users with a bundled experience for writing end-to-end tests for web applications.
While lots of other frameworks (as mentioned above) are all interacting over a Selenium server,
for remote communication and by definition, running its tests outside of the browser, Cypress is executed inside the browser.
Therefore Cypress is executed in the same runtime as your application itself.
Because of this, Cypress has native access to every single object. The &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;-element, a &lt;code class=&quot;highlighter-rouge&quot;&gt;service worker&lt;/code&gt;, … .
Cypress does not need to send commands over-the-wire and can just access everything.&lt;/p&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Selenium&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cypress&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Debugging:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hard/Remote&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy/Access to everything/Nice tool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Speed:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Remote = slow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In browser = Fast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Headless:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Language support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java, Perl PHP, Python, Ruby, C#, Javascript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Browser support:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Everything&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Only webkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;basic-architecture&quot;&gt;Basic Architecture&lt;/h2&gt;

&lt;p&gt;Cypress consists of a few different building blocks.
One of them is its own Nodejs process.
You can look at this as being a backend.
This backend then launches a browser window, sets up a proxy to this browser window and sets the domain to localhost.
The browser window has two iFrames inside.
One is for Cypress itself.
The second one will hold the application under test.
To make it possible to communicate with the application’s iFrame, it injects a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;-tag that also sets its domain to localhost.
Because now, both iFrames are running on ‘localhost’, it is possible to access everything of the application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/cypress-setup.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The proxy is proxying all requests from the web application itself to its backend.
Because the proxy is part of the Cypress-setup, Cypress can act as the man-in-the-middle and spy on, mock or modify the requests and responses.&lt;/p&gt;

&lt;p&gt;Communication between the Cypress Nodejs-backend and the Cypress iFrame, that is running the tests, is through a websocket.&lt;/p&gt;

&lt;p&gt;There are a few downsides as seen in the comparison.
Because Cypress is running inside of the browser, the language is Javascript.
Cypress only supports Chrome so far. Although Cypress is working on supporting other browsers.
Today there is no way of testing in Safari, Ìnternet Explorer, Edge, …
Cypress tests are written using Mocha and Chai.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-cypress&quot;&gt;Setting Up Cypress&lt;/h1&gt;

&lt;h2 id=&quot;installing-cypress&quot;&gt;Installing Cypress&lt;/h2&gt;

&lt;p&gt;Installation of Cypress is really simple.
You can install it through Yarn:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or plain npm:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also install it globally.
This way you do not need a local &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to run Cypress and all Cypress commands can be run straight from the command line.&lt;/p&gt;

&lt;h2 id=&quot;running-cypress&quot;&gt;Running Cypress&lt;/h2&gt;

&lt;p&gt;Depending on how you just installed Cypress, you can run Cypress by:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;
of
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ $(npm bin)/cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or globally:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first positive surprise!
When opening Cypress for the first time, it notices that you haven’t run it before and it kindly scaffolds a &lt;code class=&quot;highlighter-rouge&quot;&gt;/cypress&lt;/code&gt; folder with examples into your project.
This way, you already have a configured &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; to start from.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/firsttime2.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, Cypress opens its own application.
This is kind of a backend application that will orchestrate the tests.
Running one of the tests, means that Cypress will open a second window, which is actually just a new browser window.
It will then inject itself into that window in one frame, and load the application under test in another frame.&lt;/p&gt;

&lt;h2 id=&quot;configuring-cypress&quot;&gt;Configuring Cypress&lt;/h2&gt;

&lt;p&gt;You can custom configure Cypress by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; file in the root of your project.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://demo-app.localtest.me/demo-app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;integrationFolder&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testFiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**.spec.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mochawesome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporterOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;overwrite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportDir&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reportFilename&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can always override these settings on the command-line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run --spec src/** -c baseUrl=http://localhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a full overview of the configuration options, just check out the &lt;a href=&quot;https://docs.cypress.io/guides/references/configuration.html#Options&quot; target=&quot;blank&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reporters&quot;&gt;Reporters&lt;/h2&gt;

&lt;p&gt;Just like other frameworks, Cypress lets you add custom reporters for the test results.
As you can see above, we’ve added &lt;code class=&quot;highlighter-rouge&quot;&gt;mochawesome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install it via Yarn:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add mochawesome &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then manually add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot; target=&quot;blank&quot;&gt;documentation&lt;/a&gt; for the configuration.&lt;/p&gt;

&lt;h2 id=&quot;cypress-and-typescript&quot;&gt;Cypress and TypeScript&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cypress ships with official type declarations for TypeScript. This allows you to write your tests in TypeScript. All that is required is a little bit of configuration. ~docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation itself is linking to some different examples.
You can read all about the setup &lt;a target=&quot;blank&quot; href=&quot;https://docs.cypress.io/guides/tooling/typescript-support.html&quot;&gt;here&lt;/a&gt;.
And you can also take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm package add-typescript-to-cypress&lt;/code&gt; &lt;a href=&quot;https://www.npmjs.com/package/@bahmutov/add-typescript-to-cypress&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writing-your-first-tests&quot;&gt;Writing your first tests&lt;/h2&gt;

&lt;p&gt;As shown above, you can configure the path to your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files.
In our case, we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;.
Cypress will go through that directory and show all the spec files when using Cypress in development mode.
When running Cypress command line to only run the tests, it will just run all those &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-files and then create the report.&lt;/p&gt;

&lt;p&gt;In our small example we have an Angular demo app that has a material &lt;code class=&quot;highlighter-rouge&quot;&gt;sidenav&lt;/code&gt; with three links.
Dashboard, clients and products.
The latter two both have a material &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/demo-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s say we want to test our clients navigation and &lt;code class=&quot;highlighter-rouge&quot;&gt;datatable&lt;/code&gt;.
Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt; directory, in our case, named &lt;code class=&quot;highlighter-rouge&quot;&gt;clients.spec.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;reference types=&quot;Cypress&quot; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients page should have Clients as a title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.table-container-header h1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should initially have 20 rows&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Clients table should show 10 rows when pagesize is set to 10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-option&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mat-select&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.mat-row&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-your-first-tests&quot;&gt;Running your first tests&lt;/h2&gt;

&lt;p&gt;If you would now run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress open&lt;/code&gt;.
Cypress will open itself, showing you your new &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file.
You can now run your &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file by double clicking it, or click the ‘run all’ option on the top right of your Cypress application.&lt;/p&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;spec&lt;/code&gt;-file will trigger a reload/retest in your Cypress-environment.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/main-app.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;amazing-features&quot;&gt;Amazing features&lt;/h1&gt;

&lt;p&gt;The purpose of this post is not to provide you with some sample code, but trying to convince you to take a look at Cypress.
To do so, I’ll quickly go over some really nice features because besides the easy setup and nice main application, Cypress has much more to offer.&lt;/p&gt;

&lt;h2 id=&quot;debugging-with-cypress&quot;&gt;Debugging with Cypress&lt;/h2&gt;

&lt;p&gt;One of the hardest things when writing E2E tests is debugging.
Running tests over and over again, while logging everything to check what is going on, is now history.
Cypress injects itself in the same window as the application under test, so it has access to everything.
Everything, including the debugger.&lt;/p&gt;

&lt;p&gt;This means that you can actually debug your test code as you would debug the application itself.
Although using the debugger is not that straight forward, it’s a great help.
Check out out the documentation &lt;a href=&quot;https://docs.cypress.io/guides/guides/debugging.html#Using-debugger&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;snapshots&quot;&gt;Snapshots&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/snapshot.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Take a look at the image above.
As you can see, Cypress takes a snapshot at every stage of the test.
You can navigate through them later and see the snapshot at a specific time and even see the difference in the state of the application before a request and after its response when running &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR requests&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;network-accessibility&quot;&gt;Network accessibility&lt;/h2&gt;

&lt;p&gt;As mentioned above, Cypress can take snapshots before and after each &lt;code class=&quot;highlighter-rouge&quot;&gt;XHR request&lt;/code&gt;.
Cypress knows what is going on under the hood because it is running in the same window.
This makes it easy to implement stubs and spies.&lt;/p&gt;

&lt;p&gt;A simple example for our use case would be intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;client-service&lt;/code&gt; calls and return mocked data.
To do so, Cypress needs to run a server.
This can be done by just running &lt;code class=&quot;highlighter-rouge&quot;&gt;cy.server()&lt;/code&gt;.
Next step is to define the route you want to listen on and attach new data to it.
Cypress enables this with its &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; configuration.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;**/*/api/client-service/**/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tatiana&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Velez&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;diam.dictum@Proin.net&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;626286135&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dumfries&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;694245&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pageNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;paged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unpaged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unsorted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;numberOfElements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;stub-clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
  &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/clients&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/network-stub.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;screenshots-and-videos&quot;&gt;Screenshots and videos&lt;/h2&gt;

&lt;p&gt;Another cool embedded feature is the ability to capture screenshots or record videos.
Cypress comes with screenshot and video recording out of the box.
Screenshots always come in handy when trying to find a bug.
Cypress even lets you take a screenshot, manually, from within your code.
Before, we were always setting this up using ‘yet another plugin’ (and dependency).&lt;/p&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;/h1&gt;

&lt;p&gt;Running Cypress on a continuous integration platform is also pretty easy.
You just want Cypress to run the tests and not to open its Electron test manager for development.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cypress run&lt;/code&gt; just does that.
Just append the other options you want to override from the &lt;code class=&quot;highlighter-rouge&quot;&gt;cypress.json&lt;/code&gt; and you are good to go.
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yarn run cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress:ci&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cypress run --spec 'src/**/*' --reporter mochawesome --reporter-options reportDir=results,reportFilename=report.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/command-line.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/cypress/mochawesome.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Although there are still some downsides to this new player in the E2E testing field, such as only supporting JavaScript and Chrome, there are just too many positives to keep it on the sideline.
Cypress provides us with a new amazing test runner and manager. It strips all the hassles of previous setups and provides us with a real robust framework.
It is providing us with cool but effective features like the snapshot time travel, easy debugging, headful/headless mode for CI and more.&lt;/p&gt;

&lt;p&gt;Cypress is too good to not take a look at!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learning how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Continuous Integration" /><category term="E2E" /><category term="JavaScript" /><category term="Testing" /><category term="Selenium" /><category term="Cypress" /><summary type="html">Table of contents Intro Cypress Comparison Setting up Cypress Amazing features Continuous Integration Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/cypress/cypress-logo.png" /></entry></feed>