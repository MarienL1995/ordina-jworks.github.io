<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-04-11T13:51:38+00:00</updated><id>https://ordina-jworks.github.io/</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Complete Introduction to NodeJs</title><link href="https://ordina-jworks.github.io/nodejs/2018/04/10/complete-introduction-to-nodejs.html" rel="alternate" type="text/html" title="Complete Introduction to NodeJs" /><published>2018-04-10T00:00:00+00:00</published><updated>2018-04-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/nodejs/2018/04/10/complete-introduction-to-nodejs</id><content type="html" xml:base="https://ordina-jworks.github.io/nodejs/2018/04/10/complete-introduction-to-nodejs.html">&lt;h2 id=&quot;what-is-node&quot;&gt;What Is node&lt;/h2&gt;
&lt;p&gt;NodeJs is a program that let’s you run JavaScript code on your machine without the need of a browser.
Underneath the surface of node is the V8 JavaScript runtime which is the engine that allows your browser to run JavaScript code.
On top of that, node adds some extra functionality to create server side applications
(for example &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt; to interact with the file system, &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; to send and receive http calls, &lt;code class=&quot;highlighter-rouge&quot;&gt;net&lt;/code&gt; for tcp streams, and many more).&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Real time applications (chat, stocks, IoT)&lt;/strong&gt;&lt;br /&gt;
The event based nature of NodeJs and ‘keep-alive’ connections makes it ideal for real time applications, whenever an event occurs,
for example a chat message being received or a stock price being updated, it can emit an event on its connected sockets to update the client’s chat screen or stocks chart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REST APIs&lt;/strong&gt;&lt;br /&gt;
This will be a topic on its own, but with frameworks built on top of NodeJs like Express or Nest it is really easy to get a REST API up and running in no time at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless:&lt;/strong&gt;&lt;br /&gt;
NodeJs is supported with almost any serverless provider (Amazon Lambda, Azure functions, Google Cloud functions, …).
So developers can focus on their code and business logic instead of maintaining and setting up complicated server architectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File uploading:&lt;/strong&gt; &lt;br /&gt;
When writing applications that depend a lot on network access and accessing files on the disk we have to keep an eye on how the data is being transferred back and forward.
For ultimate efficiency, especially when dealing with large sets of data, we need to be able to access that data piece by piece.
When that happens, we can start manipulating that data as soon as it arrives at the server.
Instead of holding it in memory until all chunks have arrived and writing it to disk, node can for example create a writable stream on the disk and write the chunks directly to the files without keeping them in memory and without blocking the entire application.
This way it can also receive multiple files at the same time.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-javascript-across-the-stack&quot;&gt;Benefits of Javascript across the stack&lt;/h2&gt;
&lt;p&gt;Not only does it make development quite a bit faster and easier by having a large community with lots of reusable code for your application (npm).
It also lowers the barriers between frontend and backend developers by using the same programming language over the entire stack.
So more efficiency and faster, leaner development which in turn means lower development costs.&lt;/p&gt;

&lt;p&gt;Also worth noting is that JavaScript is currently THE most popular programming language &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/?utm_source=Iterable&amp;amp;utm_medium=email&amp;amp;utm_campaign=dev-survey-2018-promotion#most-popular-technologies&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;According to StackOverflow&lt;/a&gt;,
so more developers will be able to easily understand and contribute to the application if needed.
Another important criteria: when it comes to cloud hosting,
RAM is probably the main influencing factor when it comes to pricing and since node is designed and encourages developers to write programs to use as less memory as possible it is often a cheaper alternative.&lt;/p&gt;

&lt;h2 id=&quot;multithreading&quot;&gt;Multithreading&lt;/h2&gt;
&lt;p&gt;This is usually a big issue/talking point when it comes to node.&lt;/p&gt;

&lt;p&gt;In short: each NodeJs process is single threaded. 
If you want multiple threads, you have to have multiple processes as well.
You could say that because of that, NodeJs encourages you to implement microservices when dealing with these larger and complicated applications.
Which is a good thing since it makes not only your entire application but also each process individually very scalable.
The downside is that this might introduce some added complexity to your application.
But with Node’s lively modular ecosystem (npm) you can imagine there are already solutions to make setting this up a lot easier, (i.e. Moleculer, Seneca, …).&lt;/p&gt;

&lt;p&gt;An important characteristic of microservices is “shared nothing”.
Node has a shared-nothing model:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A shared-nothing architecture (SN) is a distributed-computing architecture in which each node is independent and self-sufficient,
and there is no single point of contention across the system. More specifically, none of the nodes share memory or disk storage.
The advantages of SN architecture versus a central entity that controls the network (a controller-based architecture) include eliminating any single point of failure,
allowing self-healing capabilities and providing an advantage with offering non-disruptive upgrade.
A shared-nothing architecture (SN) is a distributed-computing architecture in which each node is independent and self-sufficient,
and there is no single point of contention across the system. More specifically, none of the nodes share memory or disk storage.
The advantages of SN architecture versus a central entity that controls the network (a controller-based architecture) include eliminating any single point of failure,
 allowing self-healing capabilities and providing an advantage with offering non-disruptive upgrade.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(src: &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared-nothing_architecture&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Additionally, node has some other features to make use of multiple cores like for example the cluster:
a single instance of NodeJs runs in a single thread. 
To take advantage of multi-core systems, the user will sometimes want to launch a cluster of NodeJs processes to handle the load.
The cluster module allows easy creation of child processes that share server ports and automatically load balances across these processes.&lt;/p&gt;

&lt;h2 id=&quot;blocking-vs-non-blocking&quot;&gt;Blocking vs. Non-Blocking&lt;/h2&gt;
&lt;p&gt;As we’ve said before, NodeJs encourages you to take advantage of non-blocking code (like JavaScript promises).
To demonstrate how this works, I’ll give you an example in pseudo code for reading a file from the filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blocking:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    read file from filesystem,
    print content
    do something else`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Non-Blocking:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    read file from filesystem
        Whenever we're complete, print contents (callback)
    do something else
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Difference:&lt;/strong&gt;&lt;br /&gt;
When reading two files, the blocking code starts reading the file.
In case of a large file, let’s say this takes 5 seconds.
After the file has been read, it logs its content. 
Then it starts reading the second file which again takes around 5 seconds and the content gets logged.&lt;/p&gt;

&lt;p&gt;In the non-blocking code, we tell the processor to start reading the file, and when it’s done, to “let us know” (resolve promise) so that we can do more stuff with it.
At the same time since there is another file to be read, we start reading the second file and again tell the processor to notify us when it is ready so that we can do stuff with it.
Whenever a ‘Promise’ of reading a file resolves, its callback (in our case, the pseudo code: &lt;code class=&quot;highlighter-rouge&quot;&gt;print contents&lt;/code&gt;) gets executed
(this also means that, when file #2 takes less time to be read, it will be resolved and printed first which is something you might want to keep in mind).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/non-blocking.png&quot; alt=&quot;Blocking vs Non-blocking&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;v8-runtime-engine&quot;&gt;V8 Runtime Engine&lt;/h2&gt;
&lt;p&gt;Node uses Google Chrome’s V8 runtime engine to run JavaScript code, we’ve shown this video in one of our previous blog posts before,
but since it might be useful to know how it works under the hood I’ve included the video once more.
When it comes to node development there are some differences, since we don’t get events from the DOM.
In node we can get them from the NodeJs event emitter but the way it works stays the same.
It has some useful tips like avoiding to block the call stack.&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/96425312&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/96425312&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Philip Roberts: Help, I'm stuck in an event-loop.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installing-nodejs&quot;&gt;Installing NodeJs&lt;/h2&gt;
&lt;p&gt;Download the installer for your OS at &lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;.
Or, if you are a Mac user and have brew installed you can install it with brew.&lt;/p&gt;

&lt;p&gt;Open a terminal and run the following commands:&lt;/p&gt;

&lt;p&gt;Install node&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Verify if node was successfully installed (should output your node’s version number)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;node -v &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;node-modules&quot;&gt;Node Modules&lt;/h2&gt;
&lt;p&gt;Previously I talked about one of the benefits of node being its vast ecosystem of open source code that you can exploit.
To avoid having to write the same common logic over and over again, node’s greatest feature is probably its modularity.
You can put common logic in a node module that you can reuse over and over again in different components of your projects or even reuse them in other projects.&lt;/p&gt;

&lt;h2 id=&quot;npm&quot;&gt;NPM&lt;/h2&gt;
&lt;p&gt;NPM or ‘Node Package Manager’ is an online registry for node modules. 
When you’ve written a useful module, why not share it with the world.
Whenever you’ve implemented some common logic that can be reused across projects, it is a common practice in the world of JavaScript development to make it Open Source and share it with other developers who might want to implement the same logic.
This way they don’t have to write it themselves which saves times and headaches.
Just like using other people’s modules might do for you.&lt;/p&gt;

&lt;p&gt;Here are some useful npm commands to get you started:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init &lt;/code&gt; &lt;br /&gt;Start a new project. This creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file that keeps track of the installed modules (if you save them).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;module_name&amp;gt;&lt;/code&gt; &lt;br /&gt;Downloads a module that is registered (by name) on the npm registry.
To see which modules modules are available, simply visit &lt;a href=&quot;https://www.npmjs.com&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;npmjs.com&lt;/a&gt; and search for whatever you need.
The downloaded code will be saved in the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; directory. (Unless global install)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;module_name&amp;gt; —save&lt;/code&gt; &lt;br /&gt; installs and also updates your project’s dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;module_name&amp;gt; —save-dev&lt;/code&gt; &lt;br /&gt; installs and updates your project’s development dependencies in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; (dependencies that you don’t need at runtime, i.e. testing frameworks like Jasmine or Karma, build frameworks like gulp or webpack, …)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;module_name&amp;gt; --global&lt;/code&gt; &lt;br /&gt; installs the package globally, packages with command line interfaces like gulp-cli, angular-cli are installed globally.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm uninstall&lt;/code&gt; &lt;br /&gt; uninstalls packages from your project&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm update&lt;/code&gt; &lt;br /&gt; updates your packages&lt;/p&gt;

&lt;p&gt;For a full overview of npm commands and further documentation of npm, check out this page: &lt;a href=&quot;https://docs.npmjs.com/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://docs.npmjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;node-repl&quot;&gt;Node REPL&lt;/h2&gt;
&lt;p&gt;Once you have installed node you can open a terminal window and run node.
This will return a node REPL where you can run JavaScript code. For example:&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(a, b){ return a + b } &amp;lt;enter&amp;gt;
add(4, 7) &amp;lt;enter&amp;gt;
// Returns 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To terminate the REPL hit &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + C&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Using the REPL can be useful sometimes, but when we want to make some persistent programs,
we might want to write our code in a file and run the content of that file.&lt;/p&gt;

&lt;p&gt;In this example we’ll create a &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.js&lt;/code&gt; file.
Create it in your favourite IDE or run &lt;code class=&quot;highlighter-rouge&quot;&gt;touch helloworld.js&lt;/code&gt; and open it in your IDE or Vim/nano/…&lt;/p&gt;

&lt;p&gt;To keep it simple for this first project, we’ll simply make a program that logs ‘hello’ and ‘world’ in your terminal,
we’ll log them separately just to show you that there’s different ways to log data with node.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.js&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// process is a global variable that refers to the current node process you are running,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// it has a stdout property that has a write method which we can call to output data.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the \n creates a new line in the terminal&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or a bit simpler, the one we are used to from the browser, console.log&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hello-world-async&quot;&gt;Hello World Async&lt;/h2&gt;

&lt;p&gt;An example of non-blocking code&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// after 2 secs, print world&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// prints  'hello' first, then 'world'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you’ve watched the video about how the V8 Engine works, you’ll know why ‘hello’ gets logged first and ‘world’ second:
What happens is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is added to the call stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; has a timer and a callback, this fires up  V8’s timer Web API&lt;/li&gt;
  &lt;li&gt;now that the Web API is taking care of the &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;, it gets removed from the call stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; is added to the call stack, it logs ‘hello’, and removes &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; from the call stack&lt;/li&gt;
  &lt;li&gt;once the timer has completed, it pushes the callback to the task queue&lt;/li&gt;
  &lt;li&gt;since there are no more function calls on the call stack, the event loop adds the callback to the call stack&lt;/li&gt;
  &lt;li&gt;finally, ‘world’ is printed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no need for an additional thread to pause the program for 2 seconds and after that log ‘world’.
The V8 Engine handles this for us just like it does with any other async functionality in the browser.
So this is a very simple example of how non-blocking code works in NodeJs, the timeout did not block our code, ‘hello’ got logged right away.&lt;/p&gt;

&lt;h2 id=&quot;hello-module&quot;&gt;Hello Module&lt;/h2&gt;
&lt;p&gt;Now lets give you an example how to create a node module (a very simple and not a very useful one) but just to give you an idea of how you can export your code and use it in other files.&lt;/p&gt;

&lt;p&gt;We’re going to create a module that has a log function which takes a parameter (name) and logs ‘hello &lt;name&gt;' to the console.
Then we'll import it in another file and call the function from there.&lt;/name&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// create our custom hello function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Hello &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// export this functionality&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hello.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// the way we import another module into our file is by using require(), require is a global module for node&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// when requiring local modules (not the ones we install with npm), we give it the path relative to the current file,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// no need for extensions, since node looks for a .js file&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// now that we have our functionality available in the log variable, we can use it&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Mike'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// logs 'hello Mike' to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To import modules that you’ve installed with npm, don’t specify a path, but give it the package’s name.
For example:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// this imports the express module from the express package if we installed it`&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To learn more about how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; go check out this useful url: &lt;a href=&quot;https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Requiring Modules&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hello-server&quot;&gt;Hello Server&lt;/h2&gt;
&lt;p&gt;Now that we know how to require other modules, let’s create a basic server application.
We’re not going to install any server frameworks (like Express) yet, instead we’ll require a module that comes with node.
Node has some built-in modules that you can use like &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; (HTTP server), &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt; (file system), &lt;code class=&quot;highlighter-rouge&quot;&gt;net&lt;/code&gt; (TCP sockets), … &lt;br /&gt;
(a list can be found here: &lt;a href=&quot;https://www.w3schools.com/nodejs/ref_modules.asp&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.w3schools.com/nodejs/ref_modules.asp&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For this program, we’ll use node’s &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-server.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// import the http module (docs: https://nodejs.org/api/http.html)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// we create a server that will send plaintext 'Hello World' back to the client and put it in a variable server&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/plain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// we tell the server to start listening on port 3000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// once the server has successfully started listening on port 3000&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (if the port isn't already in use)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// we'll log this to the console&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Server running at localhost:3000/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can now open our browser, visit &lt;a href=&quot;localhost:3000&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;localhost:3000&lt;/a&gt; and should see our ‘Hello world’ response from the server.&lt;/p&gt;

&lt;h2 id=&quot;event-emitter&quot;&gt;Event Emitter&lt;/h2&gt;
&lt;p&gt;Another great feature that comes with NodeJs is the event emitter.
The event emitter allows us to emit and listen for named events,
whenever the EventEmitter emits an event all the functions attached to the named event are called synchronously.&lt;/p&gt;

&lt;p&gt;It’s real simple, let us show you with an example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// first we require the 'events' module that comes with node&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// next we'll create a new instance of the events module's event emitter&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// we'll tell the event emitter that we are going to listen for the 'hello' event&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and give it a callback function that gets called when the event is triggered&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// as you can see, our callback function accepts a data parameter,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// we'll check if the event was emitted with data and has a 'name' property, if so we log 'Hello name'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Hello &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if no data was passed to the callback, we'll simply log 'Hello world'&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// now that we are listening for the 'hello' event, we'll emit the event, once with data, and once without data&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mike'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// logs 'Hello Mike'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// logs 'Hello world'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;streams&quot;&gt;Streams&lt;/h2&gt;
&lt;p&gt;There are many ways that you can utilise readable/writable streams with NodeJs, for example the file system to read/write to files.
But to give you a simple example, let’s reuse our code from our hello server.
Since the request object is a readable stream and the response object is a writable stream,
we can create an application that pipes the data from the request, back to the response.
Let’s see it in action with an example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;streams.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/plain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The request is a readable stream, this means that the connection isn't immediately closed,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the connection stays open for as long as the client keeps sending data.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Streams inherit from the event emitter, so we can listen for the request stream's 'readable' and 'end' events&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the readable event is triggered whenever the request has sent a chunk of data that can be read.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'readable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// as long as we can read chunks from the request, we write those chunks to the response&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())){&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// we can keep writing to the writable response stream as long as the connection is open,&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// so we keep piping the readable data to the response&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// you can test it with curl from the terminal by sending a 'hello' string as data,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// simply run: curl -d 'hello' http://localhost:3000&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// the 'hello' string is being sent back to the client&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// once the request stream is closed, we also close the response stream&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/*
	I've written it out completely to show you what is does,
	but in fact we can use the pipe method to refactor the request's 'on readable' in some much simpler code
	req.on('readable', ()=&amp;gt;{
             request.pipe(response)
        })
   */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Server running at localhost:3000/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cluster&quot;&gt;Cluster&lt;/h2&gt;
&lt;p&gt;A single instance of NodeJs runs in a single thread.
To take advantage of multi-core systems, the user will sometimes want to launch a cluster of NodeJs processes to handle the load.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// require the cluster module&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cluster'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// we'll set up a http server on all cpus and load balance between them&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// we need to know the amount of cpus our machine has available,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// so we do this with the 'os' module's cpus method which returns an array of cpus, to get the amount we get the array's length&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numCPUs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'os'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the cluster will first start up a master process that forks itself onto the other cpus and handles the load balancing between these workers&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Master &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is running`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// fork this process to a worker for every cpu that is left (note the &amp;lt; and not &amp;lt;=)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numCPUs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// when a worker dies, it emits an exit event&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`worker &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; died`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if the cluster is not master, it (in this case) sets up our http server&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// workers can share any TCP connection&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Worker &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; started`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;More information on clusters on &lt;a href=&quot;https://nodejs.org/api/cluster.html&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://nodejs.org/api/cluster.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
&lt;p&gt;So that’s it for this blog post. I hope it was useful to you.
If you have any suggestions or feel like I’ve forgotten to mention some important stuff, feel free to comment below.
I’m currently working on some follow-up tutorials:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Building REST APIs with NestJs (TypeScript),&lt;/li&gt;
  &lt;li&gt;Microservices with NodeJs (Moleculer),&lt;/li&gt;
  &lt;li&gt;Serverless with NodeJs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once these are finished I’ll add the links below, so stay tuned!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michael&quot;, &quot;last_name&quot;=&gt;&quot;Vervloet&quot;, &quot;permalink&quot;=&gt;&quot;/author/michael-vervloet/&quot;, &quot;avatar&quot;=&gt;&quot;michael-vervloet.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;michaelvervloet&quot;, &quot;twitter&quot;=&gt;&quot;MiVvlt&quot;, &quot;github&quot;=&gt;&quot;MiVvlt&quot;, &quot;title&quot;=&gt;&quot;SoftWare Engineer&quot;, &quot;title2&quot;=&gt;&quot;Fullstack Javascript Developer&quot;, &quot;email&quot;=&gt;&quot;michael.vervloet@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Michael is a full stack JavaScript/TypeScript developer specialising himself in backend development with NodeJs and Express and has a solid background in frontend/hybrid mobile development. As a member of Ordina's core 'Internet of Things' team he has collaborated on some challenging and innovative IoT applications.&quot;}</name><email>michael.vervloet@ordina.be</email></author><category term="NodeJs" /><category term="NodeJs" /><category term="tutorial" /><category term="JavaScript" /><category term="node" /><summary type="html">What Is node NodeJs is a program that let’s you run JavaScript code on your machine without the need of a browser. Underneath the surface of node is the V8 JavaScript runtime which is the engine that allows your browser to run JavaScript code. On top of that, node adds some extra functionality to create server side applications (for example fs to interact with the file system, http or https to send and receive http calls, net for tcp streams, and many more).</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/complete-introduction-node.png" /></entry><entry><title type="html">Angular Security Best Practices</title><link href="https://ordina-jworks.github.io/angular/2018/03/30/angular-security-best-practices.html" rel="alternate" type="text/html" title="Angular Security Best Practices" /><published>2018-03-30T00:00:00+00:00</published><updated>2018-03-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/angular/2018/03/30/angular-security-best-practices</id><content type="html" xml:base="https://ordina-jworks.github.io/angular/2018/03/30/angular-security-best-practices.html">&lt;h1 id=&quot;angular-security-best-practices&quot;&gt;Angular Security Best Practices&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software security is a hot topic nowadays.
We, web developers, need to be up-to-date with all latest security issues that we could encounter when developing a web application.
In this blog we’ll check what kind of best practices we should have in mind when building an Angular app so we limit the amount of security issues we could have.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;up-to-date-angular-libraries&quot;&gt;Up-to-date Angular libraries&lt;/h2&gt;

&lt;p&gt;The angular team is doing releases at regular intervals for feature enhancements, bug fixes and security patches as appropriate.
So, it is recommended to update the Angular libraries at regular intervals.
Not doing so may allow attackers to attack the app using known security vulnerabilities present within older releases.&lt;/p&gt;

&lt;h2 id=&quot;1-preventing-cross-site-scripting-xss&quot;&gt;1. Preventing cross-site scripting (XSS)&lt;/h2&gt;

&lt;p&gt;XSS enables attackers to inject client-side scripts into web pages viewed by other users.
Such code can then, for example, steal user data or perform actions to impersonate the user.
This is one of the &lt;strong&gt;most common attacks&lt;/strong&gt; on the web.&lt;/p&gt;

&lt;h3 id=&quot;11-sanitization-and-security-contexts&quot;&gt;1.1. Sanitization and security contexts&lt;/h3&gt;

&lt;p&gt;To systematically block XSS bugs, Angular treats all values as &lt;strong&gt;untrusted by default&lt;/strong&gt;.
When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular &lt;em&gt;sanitizes&lt;/em&gt; and &lt;em&gt;escapes&lt;/em&gt; untrusted values.&lt;/p&gt;

&lt;p&gt;This is the declaration of the sanitization providers in the BrowserModule:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BROWSER_SANITIZATION_PROVIDERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useExisting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizerImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;BROWSER_SANITIZATION_PROVIDERS&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApplicationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-dom-sanitization-service&quot;&gt;The DOM sanitization service&lt;/h3&gt;
&lt;p&gt;The goal of the DomSanitizer is to clean untrusted parts of values.&lt;/p&gt;

&lt;p&gt;The skeleton of the class looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SecurityContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;STYLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SCRIPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RESOURCE_URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizer&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sanitizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sanitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SecurityContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustResourceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SafeResourceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, there are two kinds of method patterns.
The first one is the &lt;code class=&quot;highlighter-rouge&quot;&gt;sanitize&lt;/code&gt; method, which gets the &lt;em&gt;context&lt;/em&gt; and an &lt;em&gt;untrusted value&lt;/em&gt; and returns a trusted value.
The other ones are the &lt;code class=&quot;highlighter-rouge&quot;&gt;bypassSecurityTrustX&lt;/code&gt; methods which are getting the &lt;em&gt;untrusted value&lt;/em&gt; according to the value usage and are returning a trusted object.&lt;/p&gt;

&lt;h4 id=&quot;the-sanitize-method&quot;&gt;The sanitize method&lt;/h4&gt;
&lt;p&gt;If a value is trusted for the context, this sanitize method will (in case of a &lt;code class=&quot;highlighter-rouge&quot;&gt;SafeValue&lt;/code&gt;) unwrap the contained safe value and use it directly.
Otherwise, the value will be sanitized to be safe according to the security context.&lt;/p&gt;

&lt;p&gt;There are three main helper functions for sanitizing the values.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;sanitizeHtml&lt;/code&gt; function sanitizes the untrusted HTML value by parsing the value and checks its tokens.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;sanitizeStyle&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sanitizeUrl&lt;/code&gt; functions sanitize the untrusted style or URL value by regular expressions.&lt;/p&gt;

&lt;h4 id=&quot;how-can-we-disable-the-sanitization-logic&quot;&gt;How can we disable the sanitization logic?&lt;/h4&gt;
&lt;p&gt;In specific situations, it might be necessary to disable sanitization.
Users can bypass security by constructing a value with one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;bypassSecurityTrustX&lt;/code&gt; methods, and then binding to that value from the template.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/platform-browser'&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
    &amp;lt;div [innerHtml]=&quot;html&quot;&amp;gt;&amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bypassSecurityTrustHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;DomSanitizer&amp;lt;/h1&amp;gt;&amp;lt;script&amp;gt;ourSuperSafeCode()&amp;lt;/script&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be careful: If you trust a value that might be malicious, you are introducing a security vulnerability into your application!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;12-content-security-policy-csp&quot;&gt;1.2. Content security policy (CSP)&lt;/h3&gt;

&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.
These attacks are used for everything from data theft to site defacement or distribution of malware.&lt;/p&gt;

&lt;p&gt;To enable CSP, configure your web server to return an appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt; HTTP header.
You can find a very detailed manual how to enable CSP on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MDN website&lt;/a&gt;.
To check if your CSP is valid you can use the &lt;a href=&quot;https://csp-evaluator.withgoogle.com&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CSP evaluator from google&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;13-use-the-offline-template-compiler-aka-aot-compiler&quot;&gt;1.3. Use the offline template compiler (aka AOT-compiler)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Angular templates&lt;/em&gt; are the same as executable code: HTML, attributes, and binding expressions (but not the values bound) in templates are trusted to be safe.
This means that if an attacker can control a value that is being parsed by the template we have a security leak.
Never generate template source code by concatenating user input and templates.
To prevent these vulnerabilities, use the &lt;strong&gt;offline template compiler&lt;/strong&gt;, also known as &lt;em&gt;template injection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you use the Angular CLI, it’s easy to enable AOT:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ng build &lt;span class=&quot;nt&quot;&gt;--aot&lt;/span&gt;
ng serve &lt;span class=&quot;nt&quot;&gt;--aot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More info can be found on the &lt;a href=&quot;https://angular.io/guide/aot-compiler&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Angular Guide website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;14-avoid-direct-use-of-the-dom-apis&quot;&gt;1.4. Avoid direct use of the DOM APIs&lt;/h3&gt;

&lt;p&gt;The built-in browser DOM APIs don’t automatically protect you from security vulnerabilities.
For example, &lt;em&gt;document&lt;/em&gt;, the node available through &lt;em&gt;ElementRef&lt;/em&gt;, and many &lt;em&gt;third-party APIs&lt;/em&gt; contain unsafe methods.
Avoid interacting with the DOM directly and instead use &lt;strong&gt;Angular templates&lt;/strong&gt; where possible.&lt;/p&gt;

&lt;h3 id=&quot;15-server-side-xss-protection&quot;&gt;1.5. Server-side XSS protection&lt;/h3&gt;

&lt;p&gt;Injecting template code into an Angular application is the same as injecting executable code into the application.
So, validate all data on server-side code and escape appropriately to prevent XSS vulnerabilities on the server.
Also, Angular recommends &lt;em&gt;not to generate Angular templates on the server side&lt;/em&gt; using a templating language.&lt;/p&gt;

&lt;h2 id=&quot;2-http-level-vulnerabilities&quot;&gt;2. HTTP-level vulnerabilities&lt;/h2&gt;

&lt;p&gt;Angular has built-in support to help prevent two common HTTP vulnerabilities, cross-site request forgery (CSRF or XSRF) and cross-site script inclusion (XSSI).
Both of these must be mitigated primarily on the server side, but Angular provides helpers to make integration on the client side easier.&lt;/p&gt;

&lt;h3 id=&quot;21-cross-site-request-forgery-xsrf&quot;&gt;2.1. Cross-site request forgery (XSRF)&lt;/h3&gt;

&lt;p&gt;Cross-site request forgery (also known as &lt;em&gt;one-click attack&lt;/em&gt; or &lt;em&gt;session riding&lt;/em&gt;) is abbreviated as CSRF or XSRF.
It is a type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts.&lt;/p&gt;

&lt;p&gt;In a common anti-XSRF technique, the application server sends a randomly generated authentication token in a cookie.
The client code reads the cookie and adds a custom request header with the token in all subsequent requests.
The server compares the received cookie value to the request header value and rejects the request if the values are missing or don’t match.&lt;/p&gt;

&lt;p&gt;This technique is effective because all browsers implement the same origin policy.
Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site.
That means only your application can read this cookie token and set the custom header.&lt;/p&gt;

&lt;p&gt;Angular HttpClient provides built-in support for doing checks on the client side. Read further details on &lt;a href=&quot;https://angular.io/guide/http#security-xsrf-protection&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Angular XSRF Support&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;22-cross-site-script-inclusion-xssi&quot;&gt;2.2. Cross-site script inclusion (XSSI)&lt;/h3&gt;

&lt;p&gt;Cross-site script inclusion (also known as &lt;strong&gt;JSON vulnerability&lt;/strong&gt;) can allow an attacker’s website to read data from a JSON API.
The attack works on older browsers by overriding native JavaScript object constructors, and then including an API URL using a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.
This attack is only successful if the returned JSON is executable as JavaScript.&lt;/p&gt;

&lt;p&gt;Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;)]}',\n&quot;&lt;/code&gt;.
Angular’s HttpClient library recognizes this convention and automatically strips the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;)]}',\n&quot;&lt;/code&gt; from all responses before further parsing.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Frédéric&quot;, &quot;last_name&quot;=&gt;&quot;Ghijselinck&quot;, &quot;github&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;twitter&quot;=&gt;&quot;f_ghijselinck&quot;, &quot;linkedin&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;permalink&quot;=&gt;&quot;/author/frederic-ghijselinck/&quot;, &quot;avatar&quot;=&gt;&quot;frederic-ghijselinck.jpg&quot;, &quot;title&quot;=&gt;&quot;Competence Lead JavaScript&quot;, &quot;email&quot;=&gt;&quot;frederic.ghijselinck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Frédéric is a Senior developer at Ordina Belgium, focussing on Frontend Development with technologies as Angular and TypeScript. Next to frontend development, he continues to maintain his backend development skills using the Spring technology stack. Frédéric is also Competence Lead for the JavaScript Competence Center where he gives workshops, talks and courses about the newest technologies.&quot;}</name><email>frederic.ghijselinck@ordina.be</email></author><category term="Angular" /><category term="Angular" /><category term="TypeScript" /><category term="JavaScript" /><category term="Security" /><category term="XSS" /><category term="CSP" /><category term="XSRF" /><category term="XSSI" /><summary type="html">Angular Security Best Practices</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/angular-security-best-practices.png" /></entry><entry><title type="html">Kickstarter Trajectory 2018 Light Edition</title><link href="https://ordina-jworks.github.io/kickstarters/2018/03/29/Kickstarter-Trajectory-2018-light.html" rel="alternate" type="text/html" title="Kickstarter Trajectory 2018 Light Edition" /><published>2018-03-29T00:00:00+00:00</published><updated>2018-03-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kickstarters/2018/03/29/Kickstarter-Trajectory-2018-light</id><content type="html" xml:base="https://ordina-jworks.github.io/kickstarters/2018/03/29/Kickstarter-Trajectory-2018-light.html">&lt;p&gt;The Ordina Kickstarter trajectory is a collection of courses tailored and designed by the senior consultants of Ordina.
These courses are created to give the beginning software developer a broad knowledge base while also providing an in-depth view on several technologies and best practices.&lt;/p&gt;

&lt;p&gt;This year the Kickstarter trajectory spanned 15 days, with topics ranging far and wide: backend to frontend, Spring Data JPA to TypeScript and everything in between.
All of these courses will make sure the candidates will be able to hit the ground running on their first project as Ordina consultants.&lt;/p&gt;

&lt;p&gt;This post will summarize the training and experiences we’ve had while following the Kickstarter trajectory of JWorks, Ordina’s Java/JavaScript unit.&lt;/p&gt;

&lt;h1 id=&quot;backlog&quot;&gt;Backlog&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-03-02-Kickstarter-Trajectory-2018-light/kanban.jpg&quot; style=&quot;max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-we-have-done&quot;&gt;What we have done&lt;/h1&gt;

&lt;h3 id=&quot;intro-kickstarter-trajectory--dev-environment&quot;&gt;Intro Kickstarter Trajectory &amp;amp; Dev Environment&lt;/h3&gt;
&lt;p&gt;On our first day we got a brief introduction to Ordina JWorks by &lt;a href=&quot;/author/yannick-de-turck/&quot; target=&quot;_blank&quot;&gt;Yannick De Turck&lt;/a&gt;. 
We have learned that JWorks consists of 10 competence centers: Agile &amp;amp; DevOps, API &amp;amp; Microservices, Application Security, Cloud Native Platforms, Continuous Integration &amp;amp; Delivery, Big Fast Data, Internet of Things &amp;amp; Machine Learning, Javascript &amp;amp; Hybrid Mobile, JVM Languages and Software Architecture. 
Every competence center is responsible for organizing workshops and presentations. 
As an Ordina consultant it’s possible to contribute to one of these competence centers. For example by writing a blog post on the JWorks Tech Blog, writing an article on the JWorks Docs, or assisting with a workshop.&lt;/p&gt;

&lt;p&gt;We have received two books to read: &lt;a href=&quot;https://www.goodreads.com/book/show/23059696-oca&quot; target=&quot;_blank&quot;&gt;Oracle Certified Associate Java SE8&lt;/a&gt; (to obtain the Java 8 certificate) and &lt;a href=&quot;https://www.goodreads.com/book/show/3735293-clean-code?from_search=true&quot; target=&quot;_blank&quot;&gt;Clean Code&lt;/a&gt;. 
These books are an absolute must for every junior developer!
&lt;a href=&quot;/author/yannick-de-turck/&quot; target=&quot;_blank&quot;&gt;Yannick&lt;/a&gt; showed us the preferred stack of JWorks for the backend and frontend.
Later we have seen that Ordina operates according to the secure-by-design principle which means that every consultant will be trained to achieve certifications in security. 
Security should be inside every consultant’s DNA.&lt;/p&gt;

&lt;p&gt;In the afternoon we have learned about the following topics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Integrated Development Environments (IDEs) and how important it is to choose the right one&lt;/li&gt;
  &lt;li&gt;Build tools: Maven, Gradle and npm&lt;/li&gt;
  &lt;li&gt;Version Control System: Git&lt;/li&gt;
  &lt;li&gt;Continuous integration&lt;/li&gt;
  &lt;li&gt;Scrum and Agile&lt;/li&gt;
  &lt;li&gt;Improving your productivity as a developer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java&quot;&gt;Java&lt;/h3&gt;
&lt;p&gt;On Tuesday we got our first learning session from &lt;a href=&quot;/author/yannick-de-turck/&quot; target=&quot;_blank&quot;&gt;Yannick De Turck&lt;/a&gt;.&lt;br /&gt;
In the morning we talked about all the new features since Java 7.
Especially streams in Java 8 and the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword in Java 10 caught my attention.&lt;br /&gt;
Streams and lambdas were the biggest change in Java 8 and severely altered the way we write code, 
I believe &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; will do the same for Java 10. 
But it will take some time before we can use it in production environments of course,
since Oracle doesn’t provide long-term support for versions 9 and 10.&lt;/p&gt;

&lt;p&gt;In the afternoon we did some fun exercises 
where we had to implement methods to make pre-made tests pass.
Of course most of these were about Java 8 features because…
&lt;img src=&quot;/img/2018-03-02-Kickstarter-Trajectory-2018-light/most-popular-java-versions-2017.png&quot; style=&quot;max-width:70%;margin: 20px 15%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;
&lt;p&gt;During the second day of our kickstart trajectory we’ve got a brief explanation by Yannick again.
He explained us that Git is an open-source, distributed version control system that keeps track of your files and history.
Basically this means Git offers us tooling to collaborate on code bases without overwriting each others changes so easily.&lt;/p&gt;

&lt;p&gt;We saw which workflow JWorks uses in Git and which commands we can use to do so.
This way we learned how to create Git repos and create separate branches for features or different releases.
And we even saw the different ways to merge these branches.
One thing we’ll definitely won’t forget that fast is to rebase when pulling to keep a clean non-spaghetti like history,
something that is preferred by many co-workers at JWorks! 
At least that is what Yannick has told us. ;)&lt;/p&gt;

&lt;h3 id=&quot;spring-and-spring-boot&quot;&gt;Spring and Spring boot&lt;/h3&gt;

&lt;p&gt;The lectures on Spring and Spring Boot were given by &lt;a href=&quot;/author/ken-coenen&quot; target=&quot;_blank&quot;&gt;Ken Coenen&lt;/a&gt; and were spread over two days.&lt;/p&gt;

&lt;p&gt;During the first lecture, we got a recap of the concepts of JPA, beans, application contexts and other things that Spring uses in its core fundamentals. Next, we dug deeper into the framework and introduced ourselves with Spring Web Services and Spring Security and created a small backend application during the second lecture.&lt;/p&gt;

&lt;p&gt;Both lectures were rather theoretical, but very informative and elaborate with a lot of examples. So you have got everything you need to get familiar with Spring. You can find the course material on Ken’s &lt;a href=&quot;https://github.com/kencoenen/spring-course&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;
&lt;p&gt;The workshop on microservices was lectured by &lt;a href=&quot;/author/kevin-van-houtte/&quot; target=&quot;_blank&quot;&gt;Kevin Van Houtte&lt;/a&gt; and powered by Spring Cloud and Netflix OSS. 
It went pretty fast and at the end of the workshop, 
we had acquired a great overview of all the important aspects regarding the microservices architecture! 
The most important thing to know is that each microservice takes care of only one specific business function.&lt;/p&gt;

&lt;p&gt;Currently, monolith architectures are still being used a lot within companies, 
but as an up-to-date IT consultant it’s essential to know about microservices and where to use it.&lt;/p&gt;

&lt;p&gt;We learned about the 12-factor app methodology, 
which defines all the important aspects of microservices architecture: codebase, dependencies, configs, backing services, etc.&lt;/p&gt;

&lt;p&gt;In a hands-on approach we learned how to create a microservice, how to register it in a service registry (using Eureka), 
how to externalize our configuration (using Spring Cloud), 
how to create routing logic (using Zuul) and finally how to test the implementation using the Feign HTTP client.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing-and-mocking&quot;&gt;Unit testing and mocking&lt;/h3&gt;
&lt;p&gt;On Thursday we got a course about testing from &lt;a href=&quot;/author/maarten-casteels/&quot; target=&quot;_blank&quot;&gt;Maarten Casteels&lt;/a&gt;, who works as a consultant for Ordina at Belfius.  &lt;br /&gt;
The first part of the day was a very passionate and interactive theory session about the following subjects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Goals of testing&lt;/li&gt;
  &lt;li&gt;What to test&lt;/li&gt;
  &lt;li&gt;Fixtures&lt;/li&gt;
  &lt;li&gt;Mocks&lt;/li&gt;
  &lt;li&gt;Assertions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the lunch break we did some exercises together that showed us how to mock out dependencies and which pitfalls we should pay attention to.
This gave us a better understanding of the theory we saw that morning.&lt;/p&gt;

&lt;p&gt;All in all it was a great course explaining the big picture of testing but also showing us the ropes in day-to-day working with tests and code.
The open atmosphere enabled us to ask a lot of questions which Maarten always answered thoroughly.&lt;/p&gt;

&lt;h3 id=&quot;frontend-essentials&quot;&gt;Frontend Essentials&lt;/h3&gt;
&lt;p&gt;At the end of our first week we went over some of the frontend essentials
before diving deeper into the frontend frameworks and build tools the next week.
This workshop was given by &lt;a href=&quot;/author/yannick-vergeylen/&quot; target=&quot;_blank&quot;&gt;Yannick Vergeylen&lt;/a&gt;.
Our colleagues from the VisionWorks department accompanied us since they use the topics covered in this workshop as well.&lt;/p&gt;

&lt;p&gt;After a theoretical recap about HTML, CSS and JavaScript we learned how to use HTML to create web pages 
and how CSS is used to style these pages and its components. 
We also used some JavaScript and learned how it is used to modify some of the HTML-components.&lt;/p&gt;

&lt;p&gt;During the workshop we were given an exercise in which we had to recreate a given example page with the above technologies.
This way we had some hands-on experience straight away!&lt;/p&gt;
&lt;h3 id=&quot;build-tools&quot;&gt;Build Tools&lt;/h3&gt;
&lt;p&gt;We started the second week with a solid introduction of frontend build tools. 
The topics of this workshop (given by &lt;a href=&quot;/author/michael-vervloet/&quot; target=&quot;_blank&quot;&gt;Michael Vervloet&lt;/a&gt;) were &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt;, package managers and build systems &amp;amp; generators (&lt;a href=&quot;https://gulpjs.com&quot; target=&quot;_blank&quot;&gt;gulp&lt;/a&gt;, &lt;a href=&quot;https://webpack.js.org&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt; and &lt;a href=&quot;https://cli.angular.io&quot; target=&quot;_blank&quot;&gt;Angular CLI&lt;/a&gt;). 
After every topic we got the chance to put this newly acquired knowledge into practice. 
This started from scratch by installing Node.js and at the end we created an Angular project.&lt;/p&gt;
&lt;h3 id=&quot;angular&quot;&gt;Angular&lt;/h3&gt;
&lt;p&gt;One of the must see frontend frameworks is &lt;a href=&quot;https://www.angular.io&quot; target=&quot;_blank&quot;&gt;Angular&lt;/a&gt; of course.
We’ve been introduced to it by &lt;a href=&quot;/author/ryan-de-gruyter/&quot; target=&quot;_blank&quot;&gt;Ryan De Gruyter&lt;/a&gt;.
Ryan did a very good job and gave us a good base to get started with Angular.&lt;/p&gt;

&lt;p&gt;He taught us what Angular components are and how we can display data inside these components with the different types of data-binding.
We also saw how we can let these components communicate with each other
and pass data from child components to its parent component and vice versa.
On top of that, we saw how Angular directives are used to loop over objects to show multiple elements. 
And how we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;*ngIf&lt;/code&gt; directive to hide/show elements and many more of these directives.
But that’s not all, he also taught us about modules, services, dependency injection and much more.&lt;/p&gt;

&lt;p&gt;It was a very educational session for sure.
Ryan did a good job on giving us some theoretical information about the different parts of Angular.
After each theoretical part we made some exercises.&lt;br /&gt;
And the cool thing about it?&lt;br /&gt;
All these parts combined we made ourselves a small crypto currency listing application with real data!&lt;/p&gt;
&lt;p&gt;
    &lt;img style=&quot;max-width: 100%;&quot; src=&quot;/img/2018-03-02-Kickstarter-Trajectory-2018-light/angular-crypto-app.jpg&quot; /&gt;
&lt;/p&gt;
&lt;h2 id=&quot;devops--cicd&quot;&gt;DevOps &amp;amp; CI/CD&lt;/h2&gt;
&lt;p&gt;We learned that developers should share the responsibility of looking after the system they build. 
And not just hand the release over to operations. 
The development team can also simplify the deployment and maintenance for the operation team. 
This could be done by introducing a DevOps culture. 
Yes, it’s not a role. It’s a culture. 
We have learned that DevOps aims to remove the isolation between operations and software developers by encouraging collaboration. 
It should also be easier to change your code and push it to production by using Continuous Delivery (CD).&lt;/p&gt;

&lt;p&gt;Continuous Integration (CI) is the process of automating the build and testing of code every time a team member commits changes to version control. 
We have learned how we can configure a CI tool. 
We had the chance to have some hands-on experience with &lt;a href=&quot;https://www.gocd.org&quot; target=&quot;_blank&quot;&gt;GoCD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This workshop was given by &lt;a href=&quot;/author/tim-vierbergen/&quot; target=&quot;_blank&quot;&gt;Tim Vierbergen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/2018-03-02-Kickstarter-Trajectory-2018-light/security.jpg&quot; style=&quot;max-width:100%&quot; align=&quot;right&quot; /&gt;
Nowadays, security is a hot topic and it’s important to handle sensitive (personal) information in a secure manner.
Because it’s not only a PR nightmare for your business, 
it’s also a financial disaster because of &lt;a href=&quot;https://www.eugdpr.org/&quot; target=&quot;_blank&quot;&gt;GDPR&lt;/a&gt; that will take effect this May 2018. 
This fascinating lecture was presented by &lt;a href=&quot;/author/tim-de-grande&quot; target=&quot;_blank&quot;&gt;Tim De Grande&lt;/a&gt; on our last day of the Kickstarter trajectory.&lt;/p&gt;

&lt;p&gt;We discussed basic security fundamentals, common web vulnerabilities, and tips and tricks on how to secure your own applications.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;
&lt;p&gt;We started with a recap of the theory behind creating images and spinning up containers.
Soon after, we were creating our own images and learned how to run our applications in a container. 
On the way we experienced the advantages of Docker and how it fits nicely in the process
of CI/CD. Thanks &lt;a href=&quot;/author/tom-verelst/&quot; target=&quot;_blank&quot;&gt;Tom Verelst&lt;/a&gt; for guiding us into the Docker world!&lt;/p&gt;

&lt;h1 id=&quot;recap&quot;&gt;Recap&lt;/h1&gt;

&lt;p&gt;Nick: &lt;em&gt;“Ordina has given me the chance to increase my knowledge by involving me in the Kickstarter program. 
        It was great to learn about the top-notch Ordina stack from our own experts.
        This is exactly what I was looking for. 
        The Kickstarter program just ended and I’m eager to start using my knowledge in an enterprise environment again.
        Ordina also provides plenty of other learning opportunities. 
        Since I arrived, I could join an interesting seminar or workshop every week.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sam: &lt;em&gt;“The opportunity you get at Ordina to learn from experienced developers is something you can’t miss.
        The Ordina Kickstarter trajectory is the perfect example of how it should be.
        You’re presented some of the newest technologies from really kind, helpful and experienced developers.
        It’s the perfect program to get you started in your career as developer!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dries: &lt;em&gt;“As a backend developer with a few years experience I followed the program to see where I had gaps in my knowledge.
         Thanks to the great atmosphere and experienced teachers, I was able to fill those gaps.
         The sessions were very interactive which enabled me to ask any question, they were always met with well-founded answers.
         The courses on JS and Angular also sparked my interest in frontend work, which will be very useful in my further career.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Maarten: &lt;em&gt;“The courses were tons of fun and taught me a lot.
          All of our teachers were competent individuals who made sure we learned as much as we could during the time we had.
          I didn’t have any experience in frontend development, so the frontend courses were an eye-opening experience.
          To anyone that’s having doubts about this Kickstarter trajectory: go for it!
          I can definitely recommend it!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Johan:  &lt;em&gt;“I’m really eager to learn more about new technologies and the Kickstarter course suited my needs. 
It challenged me in a good way on both a personal and technical level. 
Ordina really knows how to kick start newcomers into the astonishing world of technology.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yunus: &lt;em&gt;“Ordina gave me the opportunity to put my academic knowledge in practice and learn about the latest technologies. 
I’ve learned the best practices from our seniors during this intensive Kickstarter trajectory. 
Every graduate needs to have participated in a kickstart trajectory like Ordina’s, it’s the best way to start your career.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yen: &lt;em&gt;“The Kickstarter program at Ordina really got me fast on track with the latest technologies being used in the field. 
I’m fresh out of school where I had a focus on backend and here at Ordina this got greatly improved upon. 
It was also interesting to get in depth on frontend tech! 
You notice all the coaches are experienced programmers and it was a privilege to learn from them. 
And if you need any help after a workshop, they are always quick to help. 
To summarize, I really recommend this Kickstarter program to accelerate your career!”&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-ordinas-kickstarter-trajectories&quot;&gt;About Ordina’s kickstarter trajectories&lt;/h1&gt;
&lt;p&gt;Interested in knowing more about Ordina’s kickstarter trajectories?&lt;br /&gt;
More information is available on &lt;a href=&quot;https://www.ordina.be/jobs/kickstarter-2018/&quot; target=&quot;_blank&quot;&gt;Ordina’s website&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Johan&quot;, &quot;last_name&quot;=&gt;&quot;Silkens&quot;, &quot;permalink&quot;=&gt;&quot;/author/johan-silkens/&quot;, &quot;avatar&quot;=&gt;&quot;johan-silkens.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;johan-silkens-848bb1b2&quot;, &quot;twitter&quot;=&gt;&quot;SilkensJ&quot;, &quot;email&quot;=&gt;&quot;johan.silkens@ordina.be&quot;, &quot;github&quot;=&gt;&quot;JSilkens&quot;, &quot;bio&quot;=&gt;&quot;Johan is a Java Developer at Ordina Belgium. He is passionate about technology and science since he was as kid and is always up for a challenge.&quot;}</name><email>johan.silkens@ordina.be</email></author><category term="Kickstarters" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit Test" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="Typescript" /><category term="Kickstarter" /><category term="Security" /><summary type="html">The Ordina Kickstarter trajectory is a collection of courses tailored and designed by the senior consultants of Ordina. These courses are created to give the beginning software developer a broad knowledge base while also providing an in-depth view on several technologies and best practices.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">SecAppDev 2018</title><link href="https://ordina-jworks.github.io/conference/2018/03/15/SecAppDev-2018.html" rel="alternate" type="text/html" title="SecAppDev 2018" /><published>2018-03-15T00:00:00+00:00</published><updated>2018-03-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/03/15/secappdev</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/03/15/SecAppDev-2018.html">&lt;blockquote&gt;
  &lt;p&gt;Last February I was able to attend the 2018 edition of &lt;a href=&quot;https://www.secappdev.org/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SecAppDev&lt;/a&gt;.
It’s a training/security conference in Leuven that lasts a week and which hosts top-notch speakers.
It’s organised by Philippe De Ryck of imec-DistriNet, KU Leuven.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SecAppDev for me was a week filled with learning, I’ll recap a few of the sessions I attended in this post.&lt;/p&gt;

&lt;h1 id=&quot;security-model-of-the-web---philippe-de-ryck&quot;&gt;Security model of the web - Philippe De Ryck&lt;/h1&gt;
&lt;p&gt;The most basic security control of the modern internet is the ‘Origin’.
This was thought up over 20 years ago and, at the time, was adequate for its purpose.
Nowadays however, origin is a poor security constraint: we load scripts from CDNs, we include frames from other providers, …
Because of this, more security controls have been bolted on in the last years.
In this talk, Philippe De Ryck explored some of these.
We learned how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt; and Content Security Policy (CSP) settings to limit who can include our pages in a frame.
Next up he explained how to limit the power of other sites which you might need to frame in yours using the &lt;code class=&quot;highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; attribute, which was introduced in HTML5.
Once you’ve limited what the frame can do, you can open up communications between your page and the frame through the Web Messaging API.&lt;/p&gt;

&lt;p&gt;Once you’re past frames, we come to scripts.
Nowadays, we load scripts from all over the place, often knowing nothing more than a name.
These scripts run within the context of your page and can do everything the current user can do.
To make sure these scripts aren’t tampered with you’d ideally investigate them first and then use subresource integrity (SRI) to make sure they aren’t modified.
Most CDNs nowadays offer this as a service: they provide you with the correct hashes for the scripts they host.
That does mean you need to trust your CDN to host a non-malicious file at the time you include it.&lt;/p&gt;

&lt;p&gt;After a quick look at CSP, we came to the cookies.
As we all know, cookies are not the best solution: they’re sent over both HTTP and HTTPS and they can be read and modified by (malicious) scripts.
This allows for some interesting attacks like session hijacking and session fixation.
An attempt was made to fix this through &lt;code class=&quot;highlighter-rouge&quot;&gt;Secure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt; flags.
Recently a new spec tries to restrict cookie behavior based on prefixes: &lt;code class=&quot;highlighter-rouge&quot;&gt;__Secure-&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__Host-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because browsers send your cookies on all requests to your domains, this opens you up to an attack called Cross Site Request Forgery (CSRF).
We discussed a few methods that can be used to mitigate this risk: hidden form tokens, “transparent” tokens, checking the origin header and samesite cookies.&lt;/p&gt;

&lt;p&gt;The session ended with a look at JSON Web Tokens (JWT).
Contrary to popular belief, these represent data, &lt;strong&gt;not&lt;/strong&gt; a transport mechanism.
It’s perfectly fine to store a JWT in a cookie, rendering the whole cookie vs. tokens debate a bit useless.
Putting your token on an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header, does protect against CSRF, but introduces some other complexities.&lt;/p&gt;

&lt;h1 id=&quot;owasps-top-10-proactive-controls-jim-manico&quot;&gt;OWASP’s top 10 proactive controls (Jim Manico)&lt;/h1&gt;
&lt;p&gt;In this session we had a quick look at version 2 of the OWASP &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Proactive_Controls&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;proactive controls&lt;/a&gt;.
These are the things every developer should do in order to harden their code.
The full list has 10 items, but because of some very interesting discussions, we only managed to cover the first 5.&lt;/p&gt;

&lt;h2 id=&quot;1-verify-for-security-early-and-often&quot;&gt;1. Verify for security early and often&lt;/h2&gt;
&lt;p&gt;This is not an easy thing in today’s DevOps world as code is deployed to production a lot more often.
Etsy deploys more than 25 times per day, while Amazon manages a deploy every 11.6 &lt;em&gt;seconds&lt;/em&gt;!
Make sure that security testing is part of the build process, doing that ensures that your security testing actually happens.
There are several tools available that can help you out here (e.g. OWASP ZAP or Nessus) and you can combine them for increased coverage.
Make sure you don’t end up on the “hamster wheel of pain” where you focus on the specific bugs they reveal, rather than the &lt;em&gt;class&lt;/em&gt; of bugs.&lt;/p&gt;

&lt;h2 id=&quot;2-parameterize-queries&quot;&gt;2. Parameterize queries&lt;/h2&gt;
&lt;p&gt;We should all know by now that queries should &lt;strong&gt;never&lt;/strong&gt; be built using string concatenations.
Use parameterized queries instead to prevent SQL injections.
Use parameters for &lt;em&gt;everything&lt;/em&gt;: not just the user-supplied input, but configurations and hard-coded values as well.
This can give you a performance boost as well, since parameterized queries are compiled by the database only once and then reused.&lt;/p&gt;

&lt;h2 id=&quot;3-encode-data-before-use-in-a-parser&quot;&gt;3. Encode data before use in a parser&lt;/h2&gt;
&lt;p&gt;The best known vulnerability here is Cross Site Scripting (XSS).
Allowing someone to inject HTML tags in your HTML pages gives them nearly unlimited power over your application.
Make sure to encode all user input before feeding it to a parser (a browser is basically a very powerful HTML parser) to prevent these kinds of issues.
For Java applications, you can use the &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Java_Encoder_Project&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OWASP Java encoder project&lt;/a&gt; to handle your HTML encoding.
They also have tools available for other languages (.NET, PHP, …).&lt;/p&gt;

&lt;h2 id=&quot;4-validate-all-inputs&quot;&gt;4. Validate all inputs&lt;/h2&gt;
&lt;p&gt;And don’t just do it client-side.
Client-side validations are easily bypassed, so you need to repeat them server-side as well.
If your users need to be able to post HTML, you need to sanitize it.
For that you can use the &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Java_HTML_Sanitizer_Project&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OWASP HTML Sanitizer&lt;/a&gt;.
Keep in mind that even valid data can cause issues: &lt;code class=&quot;highlighter-rouge&quot;&gt;' OR '1'='1'; --&lt;/code&gt; is a perfectly valid password, and the Irish people will be grateful that you allow the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; in name fields.&lt;/p&gt;

&lt;h3 id=&quot;what-about-files&quot;&gt;What about files?&lt;/h3&gt;
&lt;p&gt;You also need to do this if your users are allowed to upload files.
Files create even more risks: you need to make sure that the uploaded files are safe.
First validate the file name, file type and decompressed size (preferably &lt;em&gt;before&lt;/em&gt; decompressing).
Run it through a virus scanner on a separate machine to protect against exploits against your antivirus.
For images, you need to enforce size limits and you’ll want to verify that you’re actually dealing with an image.
The easiest way to do that is to rewrite the image (e.g. using ImageMagick).
Once again, you want to do this on a separate machine to prevent malicious images to take over your application.&lt;/p&gt;

&lt;h2 id=&quot;5-establish-authentication-and-identity-controls&quot;&gt;5. Establish authentication and identity controls.&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Don’t limit the password (within reason). 
Don’t enforce arbitrarily short passwords or limit the type of characters that can be used.
You &lt;strong&gt;do&lt;/strong&gt; want to limit the length, if only to prevent DOS attacks, but 100+ characters shouldn’t be an issue.&lt;/li&gt;
  &lt;li&gt;Check the chosen password against a list of the 100k most common chosen passwords&lt;/li&gt;
  &lt;li&gt;Use a strong, unique salt.
Each credential should have its own salt, and don’t skimp on the length.
64 or 32 characters (depending on the hashing algorithm) should be the norm.&lt;/li&gt;
  &lt;li&gt;Impose a difficult verification on both attacker and defender.
Use a hashing algorithm that’s appropriate, such as PBKDF2, scrypt or bcrypt.
Alternatively, you could use &lt;code class=&quot;highlighter-rouge&quot;&gt;HMAC-SHA-256( [private key], [salt] + [password] )&lt;/code&gt; to only make it hard on the attacker.
However, this introduces a lot more complexity in your system.
Other authentication best practices should also be applied, such as two factor authentication, a proper lockout policy, …&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;a-practical-introduction-to-openid-connect--oauth-20-dominick-baier&quot;&gt;A practical introduction to OpenID Connect &amp;amp; OAuth 2.0 (Dominick Baier)&lt;/h1&gt;
&lt;p&gt;Dominick Baier gave a very interesting talk on OpenID Connect and OAuth 2.0.
An important distinction he made at the start is the difference between a &lt;em&gt;user&lt;/em&gt; and a &lt;em&gt;client&lt;/em&gt;.
Users are people (carbon based life forms) while the word “client” refers to applications (or silicon based life forms).
OAuth2.0 is a protocol meant for client authentication while OpenID is the successor to SAML (and as such meant to authenticate users).
OAuth is &lt;strong&gt;not&lt;/strong&gt; meant for user authentication, even though it’s commonly (ab)used for that through various incompatible, proprietary extensions.&lt;/p&gt;

&lt;h2 id=&quot;openid-connect&quot;&gt;OpenID Connect&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://openid.net/connect&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenID Connect&lt;/a&gt; piggy backs on OAuth2.0.
&lt;img src=&quot;/img/secappdev-2018/OpenIDConnect.png&quot; alt=&quot;OpenId Connect protocol suite&quot; class=&quot;image fit&quot; style=&quot;max-width:638px&quot; /&gt;
It adds support for logging out and key rotation.
More importantly, it’s an &lt;em&gt;open&lt;/em&gt; standard and it publishes a list of &lt;a href=&quot;http://openid.net/certification/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;certified implementations&lt;/a&gt;.
Compliance with the spec is guaranteed through a set of tests.&lt;/p&gt;

&lt;h2 id=&quot;endpoints&quot;&gt;Endpoints&lt;/h2&gt;
&lt;p&gt;An OpenID Connect server (or token service) has to implement a set of endpoints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A discovery endpoint to discover where the other endpoints are.&lt;/li&gt;
  &lt;li&gt;An authorize endpoint (for users)&lt;/li&gt;
  &lt;li&gt;A token endpoint (for machine to machine processes)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;discovery-endpoint&quot;&gt;Discovery endpoint&lt;/h3&gt;
&lt;p&gt;An example of a discovery endpoint is at &lt;a href=&quot;https://accounts.google.com/.well-known/openid-configuration&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://accounts.google.com/.well-known/openid-configuration&lt;/a&gt;.
It returns an &lt;strong&gt;unsigned&lt;/strong&gt; JSON document: for security OpenID Connects relies entirely on HTTPS.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;issuer&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be the URL where the document is located.&lt;/p&gt;

&lt;h3 id=&quot;authorize-endpoint&quot;&gt;Authorize endpoint&lt;/h3&gt;
&lt;p&gt;This endpoint handles authentication for web applications and is found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorization_endpoint&lt;/code&gt; field of the discovery endpoint
The client (in this case the browser) makes a request to the authorize endpoint and passes along a few required parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The callback url: the token service will verify that this url is allowed and perform a callback to this url after the user is logged on.&lt;/li&gt;
  &lt;li&gt;A nonce (&lt;strong&gt;n&lt;/strong&gt;umber used &lt;strong&gt;once&lt;/strong&gt;) which will be echoed to the client so it can verify server responses.&lt;/li&gt;
  &lt;li&gt;And a scope which needs to include &lt;code class=&quot;highlighter-rouge&quot;&gt;openid&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server will then authenticate the user and show a consent dialog.
This dialog shows the logged in user, the application that requests access and the access that’s being requested.
&lt;img src=&quot;/img/secappdev-2018/OAuth2Consent.png&quot; alt=&quot;OpenID Connect consent dialog&quot; class=&quot;image fit&quot; style=&quot;max-width:638px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the user allows this request, the token service sends  response to the client containing a JWT based identity token as well as a cookie.
This means that the token service will remember the user for future logon requests to other applications.&lt;/p&gt;

&lt;h5 id=&quot;identity-token-validation&quot;&gt;Identity token validation&lt;/h5&gt;
&lt;p&gt;When you use an identity token to authenticate to an application, the application needs to validate this token.
It does this by making sure that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The issuer name matches the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;iss&lt;/code&gt; claim&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;aud&lt;/code&gt; must contain the client-id that was used to register the application.&lt;/li&gt;
  &lt;li&gt;The proper signing algorithm must be defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;alg&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The current time must be before &lt;code class=&quot;highlighter-rouge&quot;&gt;exp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If the token is too old (as defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;iat&lt;/code&gt; or “issued at”), it can be rejected&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nonce&lt;/code&gt; must match what client sent&lt;/li&gt;
  &lt;li&gt;And you need to validate the signature. 
For that you check the &lt;code class=&quot;highlighter-rouge&quot;&gt;kid&lt;/code&gt; field in the header and use find that key in the document you find at the &lt;code class=&quot;highlighter-rouge&quot;&gt;jwks_uri&lt;/code&gt; field from the discovery endpoint.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;session-management&quot;&gt;Session management&lt;/h2&gt;
&lt;p&gt;Since the token service places a cookie in the user’s browser, this means that you have one logon session active.
When you access another application that uses the same token service, it just needs to show you the consent dialog, without asking you to log in again.
This is called “Single Sign On” (SSO).
OpenID Connect also supports “Single Sign Out”.
When you log out of the token service (by calling the /end_session endpoint), it will try to sign you out from all applications.
It support three different ways of doing this:&lt;/p&gt;

&lt;h3 id=&quot;javascript-based-notification&quot;&gt;Javascript based notification&lt;/h3&gt;
&lt;p&gt;In order to use this, your application should always contain a specific iframe.
The source of this iframe is defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;check_session_iframe&lt;/code&gt; field of the discovery config.
This frame is loaded in the same origin as the token service and it will do a JS call to the parent page to log out.&lt;/p&gt;

&lt;h3 id=&quot;front-channel-notification&quot;&gt;Front-channel notification&lt;/h3&gt;
&lt;p&gt;Even though the spec calls this a “best-effort approach”, it’s still the method that’s most common.
It requires each client to implement a clean-up endpoint.
When the user logs out, the token service will render an HTML page that containing an invisible iframe for each client.
These iframes will call the clean-up endpoints.
Normally, these iframes will contain the session id in the url to prevent “signout spam”.
Otherwise it would be too easy for a malicious site to add an image to their pages signing you out of your sessions, causing a DOS.
The reason this approach is “best-effort” is that the browser might not be able to call all endpoints before the user navigates away from the log out page.&lt;/p&gt;

&lt;h3 id=&quot;back-channel-notification&quot;&gt;Back-channel notification&lt;/h3&gt;
&lt;p&gt;This is the safest option, as it guarantees that the user will be signed off from all applications.
Unfortunately it’s also the most complicated to implement.
In this method, the token service will call a server-endpoint on all client applications.
This means that the application server will need to implement the clean up endpoint.
Besides that, you also need to be sure that a network connection is possible between the ID provider and all application servers.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;De Grande&quot;, &quot;twitter&quot;=&gt;&quot;TimDG&quot;, &quot;linkedin&quot;=&gt;&quot;timdegrande&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-de-grande/&quot;, &quot;avatar&quot;=&gt;&quot;tim-de-grande.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Aplication Security&quot;, &quot;email&quot;=&gt;&quot;tim.degrande@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a principal Java Consultant at Ordina who is interested in security, cryptography and privacy. As Compentence Leader Application Security, he keeps his colleagues up to date on the latest security news and works to broaden their understanding by giving workshops and classes.&quot;}</name><email>tim.degrande@ordina.be</email></author><category term="Security" /><category term="SecAppDev" /><category term="Security" /><category term="Development" /><category term="Conference" /><summary type="html">Last February I was able to attend the 2018 edition of SecAppDev. It’s a training/security conference in Leuven that lasts a week and which hosts top-notch speakers. It’s organised by Philippe De Ryck of imec-DistriNet, KU Leuven.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/secappdev-2018/secappdev_wide.png" /></entry><entry><title type="html">Stairway to Health 2.0 (the Ordina version)</title><link href="https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html" rel="alternate" type="text/html" title="Stairway to Health 2.0 (the Ordina version)" /><published>2018-03-14T00:00:00+00:00</published><updated>2018-03-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Harder, Better, Faster, Stronger&lt;/h2&gt;
&lt;p&gt;Here we are again, another blog post about &lt;a href=&quot;https://stairwayto.health/dashboard&quot;&gt;Stairway to Health&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why? Well, we’ve created our own Ordina version of the &lt;a href=&quot;https://stairwayto.health/dashboard&quot;&gt;Stairway to Health&lt;/a&gt; application.
There are quite a few interesting bells and whistles, among others, here are a few of the new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;New (and awesome) frontend design, with Ordina theming obviously&lt;/li&gt;
  &lt;li&gt;Upgraded from Angular 4 to Angular 5&lt;/li&gt;
  &lt;li&gt;Material Design&lt;/li&gt;
  &lt;li&gt;Nest.js in stead of Express.js (still Express underneath, but cleaner code!)&lt;/li&gt;
  &lt;li&gt;Backend e2e tests with Mockgoose&lt;/li&gt;
  &lt;li&gt;Deployed on OpenShift&lt;/li&gt;
  &lt;li&gt;New type of sensors&lt;/li&gt;
  &lt;li&gt;Cheers feature, users can motivate and support each other&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Stairway to Health @ Ordina&lt;/h2&gt;
&lt;p&gt;As you might have read in our &lt;a href=&quot;https://ordina-jworks.github.io/iot/2017/10/12/Stairway-To-Health.html&quot;&gt;previous post&lt;/a&gt; about Stairway to Health, the purpose of the application is to improve worker health in a fun and engaging way. 
With the app we try to encourage employees to take the stairs instead of the elevator.
We’ve put up some sensors that can detect how much the stairs are used on a per floor basis and how many people take the elevator.
In the app they can see the results and thus they can do an extra effort if they are falling behind.
New in the Ordina version is that employees can now also cheer and motivate each other since we’ve added a chat feature to the application.&lt;/p&gt;

&lt;h2&gt;Internet of Things&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://stairwayto.health/dashboard&quot;&gt;Stairway to Health&lt;/a&gt; project is a simple yet great example to show what the Internet of Things can do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LoRa sensors detect door openings, these are installed on the doors of the staircases&lt;/li&gt;
  &lt;li&gt;These sensors communicate via the LoRa network to report their status&lt;/li&gt;
  &lt;li&gt;In our case, sensor data is sent to the Proximus MyThings platform which processes the data&lt;/li&gt;
  &lt;li&gt;The data gets sent to the Stairway to Health application&lt;/li&gt;
  &lt;li&gt;The Stairway to Health application interprets and visualises the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary: We install sensors on the doors (things) to measure usage and we analyse the data to persuade people to move more.
The result is a good example of how IoT can influence our daily lives.&lt;/p&gt;

&lt;p&gt;For more on this topic, check the application’s &lt;a href=&quot;https://stairwayto.health/about&quot;&gt;About page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Dive into the technical details&lt;/h2&gt;
&lt;p&gt;The reason of us writing this blog post is mainly because we want to explain some of the technical changes and improvements we’ve made
since we’ve updated (pretty much rewritten) the application. 
So let’s get started.&lt;/p&gt;

&lt;h3&gt;The API&lt;/h3&gt;
&lt;p&gt;ExpressJs to Nest.js: The main difference here is that we’ve rewritten the application to use the new framework inf favour of the old implementation with ExpressJs.
Migrating from Express to Nest is not that difficult, since Nest is a wrapper on top of the Express framework.
It provides you with some nice TypeScript decorators which makes your code a lot cleaner, more compact and easier to read.&lt;/p&gt;

&lt;h4&gt;ExpressJs example&lt;/h4&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EntityApi&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CoreApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entityController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EntityController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EntityController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// the create function would that have to be executed by the main server while bootstrapping the application&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/auth/entities'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NextFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entityController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEntityList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;NestJs example&lt;/h4&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// automatically registered to the server by nest&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// all /auth routes require user to be logged in (doesn't come standard with Nest)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/auth/entities'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;UseGuards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RolesGuard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EntitiesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entitiesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EntitiesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entitiesService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Websockets with NestJs&lt;/h3&gt;
&lt;p&gt;Working with sockets is also a lot easier and cleaner when using Nest.
We can utilise the &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebSocketGateway&lt;/code&gt; to create a new route/gateway, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SubscribeMessage&lt;/code&gt; to listen for certain events and &lt;code class=&quot;highlighter-rouge&quot;&gt;@OnGatewayConnection&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@OnGatewayDisconnect&lt;/code&gt; to know when users connect or disconnect to the server.
There wasn’t any straight forward solution for broadcasting to all clients. 
Once a user sends a message, we want to update the messages for everyone that has the client open. 
So we solved this by pushing all connected clients to an array and when we receive a ‘cheer-created’ event, we loop over the array of clients and emit an event to them one by one.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;WebSocketGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubscribeMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnGatewayConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnGatewayDisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;WsResponse&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/websockets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;WebSocketGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'events/cheers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheerEventsComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnGatewayConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnGatewayDisconnect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;handleConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;handleDisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;SubscribeMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cheer-created'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;onEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WsResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cheer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Optimising chart data and counts&lt;/h3&gt;
&lt;p&gt;On Stairway to Health we used mongo aggregations to get our chart data from the database. 
Once we hit 1.5 million logs, these calls put a lot of stress on our servers and took a long time to load, so in stead we now keep track of daily, weekly, monthly, yearly and total logs in their own collection.
Whenever we receive a log from the MyThings stream we update all these collections. 
For example the daily logs collection contains documents that look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-12-20T21:49:15.532Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;friendlyName1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;friendlyName2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hour&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;20-12-2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;counts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So when we want the hourly data from a certain day, we query the collection for the date we want and and simply return an array with all the different hours, if an hour doesn’t exist, we assume it didn’t send any logs/counts.
When we receive a log, we check if there is an entry that has “date” and “hour” equal to the log’s date. 
If so, we update, otherwise we create a new entry (upsert).
We still store the log in a “logs” collection, so that if ever our daily, weekly, … collections get corrupted, we can run a script that populates these collections with the correct data.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ILog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// We insert the log into our logs collection&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// the identifiers so we can easily query for them&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dailyIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weeklyIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monthlyIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yearlyIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// sensors send all their containers to us, we only need to update the collections&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// if they are 'counters' and they have a numeric value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'counter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// update all collections&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// by putting them in a variable, they all get executed without having to wait for each one to complete,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// and we have no 'callback hell', below te do a Promise.all so that we know when they are all done.&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dailyCountPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dailyCountsModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dailyIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hour&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// increment, not overwrite the counts&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// upsert makes sure that if the entry we try to update doesn't exist, we create one&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weeklyCountPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weeklyCountsModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weeklyIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalCountPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalCountsModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName2&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yearlyCountPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yearlyCountsModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yearlyIdentifier&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monthlyCountPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;monthlyCountsModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendlyName2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monthlyIdentifier&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;$inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numericValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// once all collections are updated, we emit a 'stream-received' event,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// which will reload the charts on the client application&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dailyCountPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;weeklyCountPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;totalCountPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;yearlyCountPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;monthlyCountPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                  &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'stream-received'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;The Visible parts&lt;/h3&gt;
&lt;p&gt;The main changes we’ve made on the frontend are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Changing the colours, we created a dark theme with Ordina branding&lt;/li&gt;
  &lt;li&gt;Used material design for a smoother user experience&lt;/li&gt;
  &lt;li&gt;Replaced Highcharts library with &lt;code class=&quot;highlighter-rouge&quot;&gt;@swimlane/ngx-charts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Migrated to Angular 5&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-4&quot;&gt;
        &lt;a href=&quot;/img/stairwaytohealth2/frontend1.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
            &lt;img alt=&quot;frontend 1&quot; src=&quot;/img/stairwaytohealth2/frontend1.png&quot; class=&quot;image fit&quot; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-4&quot;&gt;
        &lt;a href=&quot;/img/stairwaytohealth2/frontend2.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
            &lt;img alt=&quot;frontend 2&quot; src=&quot;/img/stairwaytohealth2/frontend2.png&quot; class=&quot;image fit&quot; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-4&quot;&gt;
        &lt;a href=&quot;/img/stairwaytohealth2/frontend3.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
            &lt;img alt=&quot;frontend 3&quot; src=&quot;/img/stairwaytohealth2/frontend3.png&quot; class=&quot;image fit&quot; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since users should now be able to register to the application to cheer for and motivate each other we added these new screens and functionality.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
        &lt;a href=&quot;/img/stairwaytohealth2/register.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
            &lt;img alt=&quot;register&quot; src=&quot;/img/stairwaytohealth2/register.png&quot; class=&quot;image fit&quot; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
        &lt;a href=&quot;/img/stairwaytohealth2/cheer.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
            &lt;img alt=&quot;cheers&quot; src=&quot;/img/stairwaytohealth2/cheer.png&quot; class=&quot;image fit&quot; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;Deploy on OpenShift&lt;/h3&gt;
&lt;p&gt;Since we’ve separated our frontend and backend code we used 2 separate Git repositories. 
The nice thing about deploying to OpenShift is that we can add a webhook to GitHub so that every time we merge a pull request from our develop branch to our
master branch to our Git remote, it builds and deploys the new code immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/stairwaytohealth2/stack.png&quot; data-lightbox=&quot;results&quot; data-title=&quot;&quot;&gt;
    &lt;img alt=&quot;stack&quot; src=&quot;/img/stairwaytohealth2/stack.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The new sensors: Proximus MySense&lt;/h3&gt;
&lt;p&gt;For the previous version of Stairway to Health we used Magnetic door sensors,
these use a magnet mounted on the door frame and the sensor mounted on the door itself, when the door is closed the magnet
makes contact with the sensor and the sensor detects the door is closed. This means you need to mount at two places,
and it needs to be carefully placed to align. This makes it not an ideal solution.&lt;/p&gt;

&lt;p&gt;A solution for this is the MySense sensor. This is a LoRa sensor programmable with JavaScript.&lt;/p&gt;

&lt;p&gt;The MySense is a small LoRa device containing multiple sensors.
It contains a temperature sensor, a button, …
But the most important sensor for our case is the accelerometer.
Using the accelerometer we can detect when the door is moving. After detecting a motion we will blackout the sensor
for 30 seconds to allow the door to be closed again and not count multiple motions.&lt;/p&gt;

&lt;p&gt;To save battery we do not send on every motion,
but count the amount of motions for 15 minutes and then send the counter,
also when the counter is 0 we will not send to save battery.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We made some major improvements when it comes to performance, maintainability and functionality.
By deploying our application to OpenShift, we also improved our workflow and made it a lot easier to deploy our changes.
By using the MySense as our sensor we only have to mount one piece per door. An extra advantage is that this sensor is a lot cheaper.&lt;/p&gt;

&lt;h3&gt;Interesting Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stairwayto.health/dashboard&quot;&gt;Stairway to Health 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/iot/2017/10/12/Stairway-To-Health.html&quot;&gt;Blogpost Stairway to Health 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nestjs.com/&quot;&gt;Nest.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michael&quot;, &quot;last_name&quot;=&gt;&quot;Vervloet&quot;, &quot;permalink&quot;=&gt;&quot;/author/michael-vervloet/&quot;, &quot;avatar&quot;=&gt;&quot;michael-vervloet.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;michaelvervloet&quot;, &quot;twitter&quot;=&gt;&quot;MiVvlt&quot;, &quot;github&quot;=&gt;&quot;MiVvlt&quot;, &quot;title&quot;=&gt;&quot;SoftWare Engineer&quot;, &quot;title2&quot;=&gt;&quot;Fullstack Javascript Developer&quot;, &quot;email&quot;=&gt;&quot;michael.vervloet@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Michael is a full stack JavaScript/TypeScript developer specialising himself in backend development with NodeJs and Express and has a solid background in frontend/hybrid mobile development. As a member of Ordina's core 'Internet of Things' team he has collaborated on some challenging and innovative IoT applications.&quot;}</name><email>michael.vervloet@ordina.be</email></author><category term="IoT" /><category term="NodeJS" /><category term="nestJs" /><category term="MongoDB" /><category term="Angular" /><category term="ExpressJS" /><category term="Express" /><category term="TypeScript" /><category term="Angular-CLI" /><category term="Internet of Things" /><category term="IoT" /><category term="LoRa" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/stairwaytohealth2/banner.jpg" /></entry><entry><title type="html">HPKP is deprecated. What now?</title><link href="https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now.html" rel="alternate" type="text/html" title="HPKP is deprecated. What now?" /><published>2018-02-12T00:00:00+00:00</published><updated>2018-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now.html">&lt;h1 id=&quot;hpkp-is-deprecated-what-now&quot;&gt;HPKP is deprecated. What now?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recently Google announced their intent to &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/he9tr7p3rZ8/eNMwKPmUBAAJ&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;deprecate support&lt;/a&gt; for Public Key Pinning (HPKP).
Let’s have a look at the reasons for this and what technologies we can use to replace it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;deprecated-why&quot;&gt;Deprecated? Why?&lt;/h2&gt;
&lt;p&gt;As mentioned in the &lt;a href=&quot;/conference/2017/09/18/Browser-security-features.html&quot;&gt;previous blog post&lt;/a&gt;, HPKP carries some very strong risks.
It only takes a small mistake to render your site completely inaccessible, but that’s only 1 of the reasons Google mentions for deprecating support for HPKP.
The other risks they call out are that it’s hard to build a pin-set that’s guaranteed to work and the risk of hostile pinning.
Hostile pinning hasn’t been observed &lt;em&gt;yet&lt;/em&gt;, but it’s an attack that allows someone to take your site hostage should they somehow be able to obtain a valid certificate for your domain.&lt;/p&gt;

&lt;p&gt;Because of the first 2 reasons, adoption rates of HPKP have remained very low and browser vendors have been looking for a viable replacement.&lt;/p&gt;

&lt;h2 id=&quot;expect-ct&quot;&gt;Expect-CT&lt;/h2&gt;
&lt;p&gt;One of the new headers thought up to replace HPKP is &lt;code class=&quot;highlighter-rouge&quot;&gt;Expect-CT&lt;/code&gt; (Expect Certificate Transparency).
This tells the browser to check the &lt;a href=&quot;https://www.certificate-transparency.org/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certificate Transparency&lt;/a&gt; (CT) logs to make sure the presented certificate is properly logged.&lt;/p&gt;

&lt;h3 id=&quot;certificate-transparency&quot;&gt;Certificate Transparency&lt;/h3&gt;
&lt;p&gt;CT is a project by Google that provides a framework for monitoring and auditing SSL certificates in (almost) real-time.
One of the reasons for its existence is the 2011 hack of the Dutch CA Diginotar. 
This resulted in the hackers being able to issue more than 500 fake SSL certificates (including for sites like facebook.com and google.com).
In turn, these certificates could then be used by the attacker to perform a Man-in-the-middle (MitM) attack against these sites, without alerting the user that anything fishy was going on.&lt;/p&gt;

&lt;p&gt;CT is a tool that allows you to detect when a fake certificate has been issued. 
When a CA participates in the program, it has to log all certificates they issue in a publicly searchable log.
These logs are monitored by applications which can report to you whenever a new certificate for one of your domains is issued.
If the certificate was issued in error (or maliciously), you can immediately take steps to have it revoked.&lt;/p&gt;

&lt;h3 id=&quot;how-does-expect-ct-help-me-out-here&quot;&gt;How does Expect-CT help me out here?&lt;/h3&gt;
&lt;p&gt;Expect-CT tells the browser that you only want it to trust certificates signed by CAs that have Certificate Transparency enabled.
When the server presents a certificate that’s not issued by such a CA, the browser will reject it and display a warning to the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-hpkp-deprecation/expect-ct-error.png&quot; alt=&quot;Expect CT error message&quot; class=&quot;image fit&quot; style=&quot;max-width:638px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you combine these 2 points, you can see how this protects your users:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;By monitoring the CT logs, you can quickly identify any fraudulent or misissued certificates for yur domains and have them revoked.&lt;/li&gt;
  &lt;li&gt;If the certificate is issued by a CT that doesn’t pop up in these logs, it’s simply rejected by the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-monitor-ct-logs&quot;&gt;How to monitor CT logs&lt;/h3&gt;
&lt;p&gt;Of course the whole premise of this solution is that you actually monitor the CT logs for your domains.
If you don’t do this, you’re still at risk of someone obtaining a fraudulent certificate and impersonating you.
Fortunately, there are plenty of companies and tools out there that can help you out with this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SSLMate offers an open source tool called &lt;a href=&quot;https://github.com/SSLMate/certspotter&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certspotter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you don’t want to run it yourself, you can &lt;a href=&quot;https://sslmate.com/certspotter/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;pay them&lt;/a&gt; to do it for you.&lt;/li&gt;
  &lt;li&gt;For smaller (personal) projects, you can use &lt;a href=&quot;https://developers.facebook.com/tools/ct/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Facebook&lt;/a&gt;’s monitor.&lt;/li&gt;
  &lt;li&gt;Or you use one of the other APIs or services that are available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s important is that you get the reports quickly so you can immediately take action.&lt;/p&gt;

&lt;h3 id=&quot;use-the-header&quot;&gt;Use the header&lt;/h3&gt;
&lt;p&gt;Since (to my knowledge) browsers don’t have psychic powers (yet?), you still need to tell it that you expect the CA to have CT enabled.
For that you’ll need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expect-CT&lt;/code&gt; header on your responses.
Obviously it will only look for these on an HTTPS URL, since on a simple HTTP connection it can easily be added or removed by a MitM.&lt;/p&gt;

&lt;p&gt;The header looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http request
Expect-CT: enforce, max-age=31536000, report-uri=&quot;https://example.com&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells the browser to &lt;strong&gt;enforce&lt;/strong&gt; the CT rule and to do so for the next year.
Any infractions will be sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; you mentioned.
As with all headers that contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;, you can also use &lt;a href=&quot;https://report-uri.io&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;report-uri.io&lt;/a&gt; to aggregate these logs.&lt;/p&gt;

&lt;p&gt;As with most things that stand a chance of rendering your site inaccessible, it pays to be cautious when adding this header.
Typically you don’t want to start by adding this header as defined above.
Instead, you want to deploy it first &lt;em&gt;without&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;enforce&lt;/code&gt; directive (and preferably a very low &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; such as 0)
Doing so will tell the browser that you don’t want it to &lt;strong&gt;block&lt;/strong&gt; connections with a bad certificate, but just to send the error to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;.
This setup allows you to test without impacting your users: you can now monitor this for a while to see if everything still works as expected.
After that, enable the &lt;code class=&quot;highlighter-rouge&quot;&gt;enforce&lt;/code&gt; directive and slowly increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; to the point you want it to be.&lt;/p&gt;

&lt;h3 id=&quot;risks&quot;&gt;Risks&lt;/h3&gt;
&lt;p&gt;The risk of adding this header is quite low, if you follow the procedure above.
You should only make sure that your CA actually uses CT.
However, since October 2017 Chrome has made this a requirement in order for CAs to be in the trust-store.
The main risk lies in not monitoring the CT logs properly. 
If you don’t monitor the alerts or don’t have a procedure to deal with misissued certificates, you’re still at risk of impersonation.&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Unfortunately, there’s one major caveat to using this header.
At the time of writing, only Chrome fully supports Expect-CT.
Mozilla has also indicated that they will support it, but Microsoft so far doesn’t seem to be following suit.&lt;/p&gt;

&lt;h3 id=&quot;should-you-use-it&quot;&gt;Should you use it?&lt;/h3&gt;
&lt;p&gt;Yes. The risk is minimal, the only downside at the moment is the lack of browser support.
At the very least, a large percentage of your users enjoys added protection against MitM attacks.&lt;/p&gt;

&lt;h2 id=&quot;certificate-authority-authorization&quot;&gt;Certificate Authority Authorization&lt;/h2&gt;
&lt;p&gt;The downside of Expect-CT compared to Public Key Pinning (HPKP) is that you need to make sure that your monitoring is handled correctly.
If you don’t notice on time that a certificate has been issued, an attacker may be able to impersonate you for some time.
You can make this a lot harder on the attacker by using Certificate Authority Authorization (CAA).
CAA is a way for you to indicate exactly who is allowed to issue certificates for your domain.&lt;/p&gt;

&lt;h3 id=&quot;how-to-implement&quot;&gt;How to implement?&lt;/h3&gt;
&lt;p&gt;Since the issuance of certificates is not limited to websites, CAA is not implemented through HTTPS response headers, instead it’s a record that you need to put in your DNS settings.
You simply add the correct record to your DNS like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;;&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the example above prevents all CAs from issuing certificates for your site. 
Don’t just copy-paste this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can have multiple CAA records and the value of these tells the CA exactly what you want.
Since this is a bit cryptic, lets look a bit more in detail at what’s happening here.&lt;/p&gt;

&lt;p&gt;The value above consists of 3 parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the flag (&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;the tag (&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;the value (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;;&quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The combination of tag and value can be referred to as “the property”.
The whole of CAA is governed by &lt;a href=&quot;https://tools.ietf.org/html/rfc6844&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RFC 6844&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;flags&quot;&gt;Flags&lt;/h4&gt;
&lt;p&gt;Currently, flags can have 2 values: &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;128&lt;/code&gt;.
A value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; means the property is non-critical, while a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;128&lt;/code&gt; means that is is critical.
If a property is marked as critical, the CA must completely understand it before it proceeds.
Generally it’s correct to use &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, so it’s advised to always use that value.
There is support for customized flags in the RFC, but that’s beyond the scope of this post.&lt;/p&gt;

&lt;h4 id=&quot;tags&quot;&gt;Tags&lt;/h4&gt;
&lt;p&gt;The current specification has 3 tags you can define:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt; specifies which CA is authorized to issue certificates&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt; indicates which CA is authorized to issue &lt;strong&gt;wildcard&lt;/strong&gt; certificates (e.g. for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.example.com&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iodef&lt;/code&gt; similar to report-uri you can use this to get reports on invalid requests (either to an email address or to an http endpoint)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;issue&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This tag specifies which CA is allowed to issue certificates for the domain and its subdomains.
This includes the wildcard subdomain (meaning that the certificate would be valid for &lt;em&gt;all&lt;/em&gt; subdomains).
A value of “;” indicates that no issuance is allowed.
You’re allowed to define multiple CAs, but you’ll need to use a new DNS record for each one:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;ca1.com&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;otherca.net&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;issuewild&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This one is used explicitly for wildcard certificates.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt; is present, any values in &lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt; may not be used in the issuance of a wildcard certificate.
You can use this in case you never want a wildcard certificate to be issued or when the list of CAs that are allowed to issue wildcard certificates differs from the original list.&lt;/p&gt;

&lt;h5 id=&quot;iodef&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iodef&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;You can use this tag to report invalid certificate requests:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 iodef &quot;mailto:certificates@example.com&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 iodef &quot;https://certificate.example.com/endpoint&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, you can either have these reports sent by email, of have them delivered to an HTTP endpoint.
The report is sent in the IODEF format, which also means that your endpoint needs to be &lt;a href=&quot;https://www.ietf.org/rfc/rfc6546.txt&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RFC 6546&lt;/a&gt; compliant.&lt;/p&gt;

&lt;h3 id=&quot;the-easy-way&quot;&gt;The easy way&lt;/h3&gt;
&lt;p&gt;To help you in creating your CAA, SSL Mate has released a useful tool: &lt;a href=&quot;https://sslmate.com/caa/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CAA Record Helper&lt;/a&gt;.
It can help you create a CAA record and will tell you how to set it up in your DNS service.
&lt;img src=&quot;/img/2018-hpkp-deprecation/sslmate.png&quot; alt=&quot;CAA Record Helper&quot; class=&quot;image fit&quot; style=&quot;max-width:881px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;risks-1&quot;&gt;Risks&lt;/h3&gt;
&lt;p&gt;A badly implemented CAA record can mean that your CA is not allowed to issue your certificate.
The other risk is that it relies on DNS: DNS records can be spoofed and this might allow an attacker to trick a CA into issuing a fraudulent certificate.
Because of this, the RFC recommends implementing DNSSEC (Domain Name Security Extensions).&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;I’d suggest you do. 
While having an incorrect policy can prevent the CA from issuing a certificate, this situation can be rectified quickly and shouldn’t put your users at risk.
It will make it a lot harder for an attacker to obtain a certificate.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;De Grande&quot;, &quot;twitter&quot;=&gt;&quot;TimDG&quot;, &quot;linkedin&quot;=&gt;&quot;timdegrande&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-de-grande/&quot;, &quot;avatar&quot;=&gt;&quot;tim-de-grande.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Aplication Security&quot;, &quot;email&quot;=&gt;&quot;tim.degrande@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a principal Java Consultant at Ordina who is interested in security, cryptography and privacy. As Compentence Leader Application Security, he keeps his colleagues up to date on the latest security news and works to broaden their understanding by giving workshops and classes.&quot;}</name><email>tim.degrande@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="Browser features" /><category term="Response headers" /><category term="HPKP" /><category term="CAA" /><category term="Expect-CT" /><summary type="html">HPKP is deprecated. What now?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/security/padlock_code.jpg" /></entry><entry><title type="html">Azure Draft</title><link href="https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft.html" rel="alternate" type="text/html" title="Azure Draft" /><published>2018-02-12T00:00:00+00:00</published><updated>2018-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft</id><content type="html" xml:base="https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-draft&quot;&gt;Installing Draft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-sail-with-draft&quot;&gt;Setting Sail with Draft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Azure/draft&quot;&gt;Draft&lt;/a&gt; is an open-source tool from Microsoft Azure.
It attempts to make the development for Kubernetes clusters easier, 
by getting Docker and Kubernetes out of the way.&lt;/p&gt;

&lt;p&gt;Developers no longer require Docker,
and can just push their applications to a remote Kubernetes clusters using Draft.
Draft accomplishes this by using only two simple commands.&lt;/p&gt;

&lt;p&gt;The first command is &lt;code class=&quot;highlighter-rouge&quot;&gt;draft create&lt;/code&gt;.
This tool detects the application language, 
and writes out a Dockerfile and a &lt;a href=&quot;https://github.com/kubernetes/helm&quot;&gt;Kubernetes Helm&lt;/a&gt; chart in the source tree.
These files are generated based on Draft “packs”.
These packs are simple scripts that only detect the language
and write out the Dockerfile and Helm charts.
The idea is based on some features of PaaS systems like the CloudFoundry’s &lt;em&gt;buildpacks&lt;/em&gt;.
The only difference is that the build and deployment descriptors are stored in the source tree.&lt;/p&gt;

&lt;p&gt;The second command is &lt;code class=&quot;highlighter-rouge&quot;&gt;draft up&lt;/code&gt;.
First, all source code will be uploaded to any Kubernetes cluster, 
local or remote.
Then, the application is built on the cluster using the generated Dockerfile.
Finally, the built image is deployed to a dev environment using the Helm Chart.&lt;/p&gt;

&lt;p&gt;Draft does not support many languages yet, 
but it currently supports most of the popular languages like Java, Python, Golang, JavaScript, Ruby, Swift, PHP, C# and Clojure.
It also has support for Gradle and Maven projects.
You can see all packs &lt;a href=&quot;https://github.com/Azure/draft/tree/master/packs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-draft&quot;&gt;Installing Draft&lt;/h2&gt;

&lt;p&gt;Before you can start using Draft,
there are quite a few components that need to be set up.
However, 
if you are using a remote Kubernetes cluster,
you will only need to do the setup once for multiple developers.
Other developers will only need to install the Draft client to benefit.
For this example, we will be using Minikube, 
a local Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;The total list of tools required is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minikube: a local Kubernetes cluster&lt;/li&gt;
  &lt;li&gt;kubectl: the CLI tool for working with Kubernetes&lt;/li&gt;
  &lt;li&gt;Tiller: the Helm agent running on the Kubernetes cluster which manages installations of your charts.&lt;/li&gt;
  &lt;li&gt;Helm: the Helm client&lt;/li&gt;
  &lt;li&gt;Draftd: the Draft agent running on the Kubernetes cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downloading all dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will start by installing the latest release of Minikube using &lt;a href=&quot;https://github.com/Homebrew/brew&quot;&gt;Homebrew&lt;/a&gt;.
If you do not have Homebrew,
you can check how to install Minikube &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew cask install minikube
==&amp;gt; Satisfying dependencies
All Formula dependencies satisfied.
==&amp;gt; Downloading https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-darwin-amd64
==&amp;gt; Verifying checksum for Cask minikube
==&amp;gt; Installing Cask minikube
==&amp;gt; Linking Binary 'minikube-darwin-amd64' to '/usr/local/bin/minikube'.
minikube was successfully installed!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After Minikube has been installed,
we can install Azure Draft!
First, we add the Azure Draft repository by adding a Homebrew tap.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew tap azure/draft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have added the repository,
we can install Draft!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install draft
==&amp;gt; Installing draft from azure/draft
==&amp;gt; Downloading https://azuredraft.blob.core.windows.net/draft/draft-v0.10.1-darwin-amd64.tar.gz
/usr/local/Cellar/draft/0.10.1: 5 files, 45.9MB, built in 1 second
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do not use Homebrew,
you can download the latest release of Draft &lt;a href=&quot;https://github.com/Azure/draft/releases&quot;&gt;here&lt;/a&gt;.
You will have to unzip the download and add it to your PATH manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Minikube&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have downloaded all required dependencies,
we can start setting up our cluster.
Let’s start our Kubernetes cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start
Starting local Kubernetes v1.9.0 cluster...
Starting VM...
Downloading Minikube ISO
Getting VM IP address...
Moving files into cluster...
Downloading localkube binary
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cluster is up and ready. 
As you can see from the output,
Minikube also configured our kubectl client by automatically creating a .kubeconfig file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl cluster-info
Kubernetes master is running at https://192.168.99.100:8443

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Enabling the Docker Registry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To be able to use our Draft agent on the server,
we will need to enable the embedded Docker registry on the cluster.
Minikube makes this straightforward using an addon.
We only need to enable it!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube addons enable registry
registry was successfully enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Helm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our Minikube up and running,
we can install the Helm server agent (Tiller) and the Helm client.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ helm init
$HELM_HOME has been configured at /Users/tomverelst/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.
Happy Helming!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though Tiller is installed now,
you must wait for it to be deployed.
Wait until there is one instance ready!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n kube-system get deploy tiller-deploy --watch
NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
tiller-deploy   1         1         1            1           4m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Draft&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All requirements are set up now for Draft.
Let’s install the final component: Draft!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft init --auto-accept
Installing default plugins...
Installation of default plugins complete
Installing default pack repositories...
Installing pack repo from https://github.com/Azure/draft
Error: Unable to update checked out version: exit status 128
Error: exit status 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uh, oh! Seems like Git cannot clone the Draft pack repo.
According to &lt;a href=&quot;https://github.com/Azure/draft/issues/522&quot;&gt;this GitHub issue&lt;/a&gt;,
this happens with Git version 2.16+.&lt;/p&gt;

&lt;p&gt;If you have this error, the workaround currently is to manually add a specific version of the pack repo.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft pack-repo add https://github.com/Azure/draft --version v0.10.0
Installing pack repo from https://github.com/Azure/draft
Installed pack repository github.com/Azure/draft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We manually installed the Draft pack repo now. 
Let’s try to set up Draft again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft init --auto-accept
Installing default plugins...
Installation of default plugins complete
Installing default pack repositories...
Installation of default pack repositories complete
$DRAFT_HOME has been configured at /Users/tomverelst/.draft.

Draft detected that you are using minikube as your cloud provider. AWESOME!
Draftd has been installed into your Kubernetes Cluster
Happy Sailing!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great.
The workaround works! 
As you can see, Draft is still in alpha and will not properly work yet.&lt;/p&gt;

&lt;p&gt;This setup is of course for local development.
If you want to have a production ready, RBAC enabled, Draft setup on a remote Kubernetes cluster,
you can take a look at the &lt;a href=&quot;https://github.com/Azure/draft/blob/master/docs/install-advanced.md&quot;&gt;Advanced Installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-sail-with-draft&quot;&gt;Setting Sail with Draft&lt;/h2&gt;

&lt;p&gt;If you managed to get to this point,
you either went through all the effort to set everything up,
or you skipped to this part!&lt;/p&gt;

&lt;p&gt;We can now start drafting up some applications. 
Since I am a fan of Go, 
I will start with drafting up a Go application.
Here is a simple Go application that listens on port 8080 and returns “Hello Draft!”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello Draft!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run it to see if it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go run main.go

# Open a separate terminal
$ curl localhost:8080
Hello, Draft!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application works. 
Now we can let Draft create the Dockerfile and the Helm chart.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft create
--&amp;gt; Draft detected Go (100.000000%)
--&amp;gt; Ready to sail
$ ls
Dockerfile	charts		draft.toml	main.go
$ ls charts/go
Chart.yaml	charts		templates	values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Draft detected that it was a Go application, 
It generated a Dockerfile and the Draft deployment descriptor,
and it also copied the Go pack to the &lt;code class=&quot;highlighter-rouge&quot;&gt;charts&lt;/code&gt; directory.
This is great, as it enables the possibility to customize the pack for this specific application.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the generated Dockerfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Dockerfile
FROM golang:onbuild
ENV PORT 8080
EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The official Golang &lt;em&gt;onbuild&lt;/em&gt; image is used.
This image is great for development purposes,
but I would not recommend using this image for production purposes,
as it is around &lt;strong&gt;700MB&lt;/strong&gt;, 
while the application is only a few lines of code.&lt;/p&gt;

&lt;p&gt;For demo purposes, 
let’s continue to use this generated Dockerfile,
and try to deploy our application on Kubernetes using Draft.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft up
Draft Up Started: 'goapp'
goapp: Building Docker Image: SUCCESS ?  (60.1681s)
goapp: Pushing Docker Image: SUCCESS ?  (63.0775s)
goapp: Releasing Application: SUCCESS ?  (0.5346s)
goapp: Build ID: 01C653GK70A7SR2FMT2325TBHD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Building and pushing this application took around 2 minutes,
which seems pretty long,
but that is highly likely because of the 700MB base Docker image.
This image first needs to be downloaded.
Then it needs to be pushed to the registry.&lt;/p&gt;

&lt;p&gt;We can connect to the application using &lt;code class=&quot;highlighter-rouge&quot;&gt;draft connect&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft connect
Connecting to your app...SUCCESS...Connect to your app on localhost:50066
Starting log streaming...
+ exec app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see how the application is installed on our cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get deployment
NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
goapp-go   2         2         2            2           5m

$ kubectl get svc
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
goapp-go     ClusterIP   10.103.78.13   &amp;lt;none&amp;gt;        80/TCP    4m
kubernetes   ClusterIP   10.96.0.1      &amp;lt;none&amp;gt;        443/TCP   1h

$ kubectl get pods
NAME                       READY     STATUS    RESTARTS   AGE
goapp-go-88f4b7bc7-4cltn   1/1       Running   0          4m
goapp-go-88f4b7bc7-wt7kx   1/1       Running   0          4m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see,
our application has successfully been deployed to Kubernetes,
and is deployed using a Kubernetes &lt;em&gt;Deployment&lt;/em&gt; resource.&lt;/p&gt;

&lt;p&gt;The services are not exposed by default,
so we will need to either use &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl port-forward &amp;lt;pod&amp;gt; 8080&lt;/code&gt;,
or SSH into our cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube ssh
$ curl 10.103.78.13
Hello Draft! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to expose your applications automatically using Draft,
you can use a Kubernetes &lt;em&gt;Ingress Controller&lt;/em&gt; for this.
You will need to enable an &lt;em&gt;Ingress Controller&lt;/em&gt; in Kubernetes (&lt;code class=&quot;highlighter-rouge&quot;&gt;minikube addons enable ingress&lt;/code&gt;),
and initialize draft with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--ingress-enabled&lt;/code&gt; flag.
More information about this can be found &lt;a href=&quot;https://github.com/Azure/draft/blob/master/docs/ingress.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Draft is meant to be used during development,
so it is important we can push changes.
Let’s make a change to our application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &quot;Bye Draft!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have made some changes,
let’s try to deploy our new version.
This is done using the same command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft up
Draft Up Started: 'goapp'
goapp: Building Docker Image: SUCCESS ?  (12.0163s)
goapp: Pushing Docker Image: SUCCESS ?  (16.0110s)
goapp: Releasing Application: SUCCESS ?  (0.2311s)
goapp: Build ID: 01C65507WTBX5EAJKWWR53T652
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The build time has gone down from 2 minutes, to 28 seconds.
This is because the Golang Docker image no longer needs to be downloaded and/or pushed to the Docker registry.&lt;/p&gt;

&lt;p&gt;The deployment is updated with the new version of the application.
Old pods are taken down by Kubernetes and new ones are started.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get pods
NAME                        READY     STATUS              RESTARTS   AGE
goapp-go-6fb684d887-2kq69   0/1       ContainerCreating   0          23s
goapp-go-6fb684d887-qmth6   1/1       Running             0          23s
goapp-go-88f4b7bc7-wt7kx    0/1       Terminating         0          19m

$ minikube ssh
$ curl 10.103.78.13
Bye  Draft! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our changes are now deployed to the Kubernetes cluster!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Draft is great for local development using Kubernetes.
It is meant to be used before committing and pushing your code.&lt;/p&gt;

&lt;p&gt;Applications can be deployed to Kubernetes within minutes,
without requiring to write Dockerfiles and/or Kubernetes resource files.&lt;/p&gt;

&lt;p&gt;Azure Draft is still experimental for now, 
but the development team is active, 
and I have not run into many issues yet.&lt;/p&gt;

&lt;p&gt;It brings one of CloudFoundry’s best features, namely build packs, to Kubernetes.
It’s definitely worth a try!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://draft.sh&quot;&gt;Draft website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/azure/draft&quot;&gt;Draft GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Verelst&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-verelst/&quot;, &quot;avatar&quot;=&gt;&quot;tom-verelst.png&quot;, &quot;twitter&quot;=&gt;&quot;tomverelst&quot;, &quot;linkedin&quot;=&gt;&quot;tomverelst&quot;, &quot;github&quot;=&gt;&quot;tomverelst&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud Native Platforms&quot;, &quot;email&quot;=&gt;&quot;tom.verelst@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tom is a senior software engineer at Ordina Belgium. He is fond of all things Go and DevOps.&quot;}</name><email>tom.verelst@ordina.be</email></author><category term="Docker" /><category term="Azure" /><category term="Draft" /><category term="Kubernetes" /><category term="Helm" /><category term="Docker" /><category term="CloudFoundry" /><category term="PaaS" /><summary type="html">Table of contents Introduction Installing Draft Setting Sail with Draft Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-02-12-Azure-Draft/draft-logo.png" /></entry><entry><title type="html">Mocking in Kotlin with MockK</title><link href="https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html" rel="alternate" type="text/html" title="Mocking in Kotlin with MockK" /><published>2018-02-05T00:00:00+00:00</published><updated>2018-02-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockito-and-its-shortcomings-in-kotlin&quot;&gt;Mockito and its shortcomings in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-idiomatic-mocking-framework-for-kotlin&quot;&gt;The idiomatic mocking framework for Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-it-all-up&quot;&gt;Summing it all up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-useful-links&quot;&gt;Other useful links&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have been pretty excited about Kotlin since JetBrains released the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&quot; target=&quot;_blank&quot;&gt;first official version&lt;/a&gt; on the 15th of February 2016.
It did take me a while before I managed to get my hands dirty, which was in between the version 1.1 and 1.2 release.
Besides developing in Java, which I’m doing full time as a senior Java consultant, 
I’ve also been dabbling in Scala for quite some years with Lightbend’s &lt;a href=&quot;https://www.playframework.com&quot; target=&quot;_blank&quot;&gt;Play Framework&lt;/a&gt;.
Everyone knows how verbose Java is, and how it lags a bit behind the newer, fancier programming languages.
It still misses features such as pattern matching, case/data classes and local-variable type inference.&lt;/p&gt;

&lt;p&gt;Starting from Java 8 with the introduction of Lambdas, we have finally been given the option to add a more functional programming flavour to our code which was due in time.
Scala felt very refreshing for me back then, when I started to use it which was shortly before the JDK 7 release.
It felt clean and powerful, bringing the best of both worlds of object-oriented programming and functional programming.
At the same time, Scala houses a lot of complexity since there are so many ways and styles to tackle problems.
You could compare it a bit to having the toolkit available to build a space rocket when you only plan on building a small airplane. 
And this is where Kotlin comes in, being very similar to Scala but with a focus on practicality and simplicity.
Coming from the industry instead of academia, it focuses on solving problems faced daily by programmers.&lt;/p&gt;

&lt;p&gt;I’m a big fan of Test-Driven Development and thoroughly testing the behaviour of my code by making use of mocks.
&lt;a href=&quot;http://site.mockito.org&quot; target=&quot;_blank&quot;&gt;Mockito&lt;/a&gt; has been my mocking framework of choice combined with &lt;a href=&quot;https://github.com/powermock/powermock&quot; target=&quot;_blank&quot;&gt;PowerMock&lt;/a&gt; for mocking constructors, static and private methods, and more.
As Kotlin also runs on the JVM, it can make use of the huge Java ecosystem.
It was a no-brainer for me to immediately add these testing libraries to my Kotlin project for writing my tests.&lt;/p&gt;

&lt;p&gt;And thus I set off, creating a new Kotlin project to see how it fared.&lt;/p&gt;

&lt;h2 id=&quot;mockito-and-its-shortcomings-in-kotlin&quot;&gt;Mockito and its shortcomings in Kotlin&lt;/h2&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:500px;&quot; alt=&quot;Mockito logo&quot; src=&quot;/img/writing-tests-in-kotlin-with-mockk/mockito.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;I started off with adding the Mockito dependency to my Kotlin project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And wrote a first simple test in which I wanted to test a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; class that uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt; to generate a record and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dao&lt;/code&gt; for persisting it.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`when`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifyNoMoreInteractions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing the test went pretty smooth although the code looks a bit funky.
When I ran it, I stumbled on this nice error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.mockito.exceptions.base.MockitoException: 
Cannot mock/spy class be.yannickdeturck.HelloTest$Generator
Mockito cannot mock/spy because :
 - final class
 — anonymous classes
 — primitive types
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As all classes and methods are final by default in Kotlin, using Mockito appears to be a bit problematic due to how Mockito creates its mocks.
If you are interested in how Mockito’s mocking works internally you should checkout &lt;a href=&quot;https://stackoverflow.com/a/14447878/1320126&quot; target=&quot;_blank&quot;&gt;this response on StackOverflow&lt;/a&gt; that roughly sums it up.&lt;/p&gt;

&lt;p&gt;I did a bit more research on using Mockito and stumbled upon this &lt;a href=&quot;https://github.com/nhaarman/mockito-kotlin&quot; target=&quot;_blank&quot;&gt;slightly tuned version&lt;/a&gt; for Kotlin, wrapping some of Mockito’s functionalities, providing a simpler API.
I decided to try that one out and replaced my Mockito dependency with it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.nhaarman&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-kotlin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.5.0&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I rewrote my test a bit in order to make use of the cleaner syntax the library had to offer.
Note how both defining and using the mocks is a bit more elegant:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;whenever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifyNoMoreInteractions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sadly, we still have the Mockito error.&lt;/p&gt;

&lt;p&gt;As I said, in Kotlin all classes and methods are final by default which &lt;a href=&quot;https://github.com/mockito/mockito/issues/657&quot; target=&quot;_blank&quot;&gt;Mockito cannot deal with&lt;/a&gt;.
You would have to explicitly make your classes inheritable using the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; modifier.
Another approach would be to add interfaces to everything.
Changing your code just for the sake of being able to write good tests is something I’m not exactly fond of, and in this case we are also getting around one of the key features of Kotlin.&lt;/p&gt;

&lt;p&gt;Starting from Mockito version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.0&lt;/code&gt; it did &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#unmockable&quot; target=&quot;_blank&quot;&gt;became possible to mock final classes&lt;/a&gt; although it is an incubating, opt-in feature.
This however, requires a bit of a setup really.
It basically consists of creating a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; with as content &lt;code class=&quot;highlighter-rouge&quot;&gt;mock-maker-inline&lt;/code&gt; and placing it under &lt;code class=&quot;highlighter-rouge&quot;&gt;resources/mockito-extensions&lt;/code&gt;.
It felt a bit hacky but apparently this is only a temporary way to set it up.
Although there are supposed to be plans to make it more straightforward.
&lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot;&gt;Hadi Hariri&lt;/a&gt; wrote an extensive &lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; on setting this up and you should check it out if you would like to learn more about it.&lt;/p&gt;

&lt;p&gt;Good, so this makes it possible to create mocks without having to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; modifier to all your classes and methods!
It does’t appear to be completely compatible with Mockito Kotlin even though the library depends on Mockito version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.8.9&lt;/code&gt;.
Trying to run the test resulted in the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.mockito.exceptions.base.MockitoInitializationException: 
Could not initialize inline Byte Buddy mock maker. (This mock maker is not supported on Android.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the time of writing there is a version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.0&lt;/code&gt; in alpha for Mockito Kotlin so I tried to switch to it to see if it changed anything.
Note that the dependency is a bit different and you need to use the classes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.nhaarman.mockitokotlin2&lt;/code&gt; package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.nhaarman.mockitokotlin2&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-kotlin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.0.0-alpha02&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It got rid of the above error.
I did ran into some unexpected behaviour where my mocks’ behaviour was rather unexpected when I also added partial mocking using spies.
I spent some time to get my head around it and during my quest for answers I stumbled upon this library called &lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK&lt;/a&gt;, created by &lt;a href=&quot;https://twitter.com/oleksiyp&quot; target=&quot;_blank&quot;&gt;Oleksiy Pylypenko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to check it out as I became a bit annoyed with Mockito in Kotlin so far.&lt;/p&gt;

&lt;h2 id=&quot;the-idiomatic-mocking-framework-for-kotlin&quot;&gt;The idiomatic mocking framework for Kotlin&lt;/h2&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:500px;&quot; alt=&quot;MockK logo&quot; src=&quot;/img/writing-tests-in-kotlin-with-mockk/mockk.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Although I am a huge fan of Mockito for mocking in Java, using Mockito in Kotlin just feels a bit too Java-ish when you have this elegant Kotlin code all around in your project. 
MockK’s main philosophy is offering first-class support for Kotlin features and being able to write idiomatic Kotlin code when using it.
Adding MockK is as simple as ever as you only have to add the dependency to your project and you are set to go.&lt;/p&gt;

&lt;p&gt;Maven:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.mockk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockk&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.7.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gradle:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testCompile &quot;io.mockk:mockk:1.7.1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The available &lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK documentation&lt;/a&gt; provides a really nice overview of all the different features with a lot of examples, making it very easy to get started.
If you have used a mocking framework before such as Mockito, everything should come natural as you usually do when writing tests with mocks.
You have the same three parts in which your tests are divided:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Preparing the test data and setting up the mocking&lt;/li&gt;
  &lt;li&gt;Executing the logic that you want to test&lt;/li&gt;
  &lt;li&gt;Performing the necessary validation and verification checks to see if the result and behaviour matches your expectations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The test from above is written as follows:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;every&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;every&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runs&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;verifyAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Going over the example, everything should feel familiar but more elegant.
You may however, wonder what the &lt;code class=&quot;highlighter-rouge&quot;&gt;every { dao.insert(mockedRecord) } just Runs&lt;/code&gt; line is doing exactly.
By default in MockK, mocks are strict so you need to provide some behaviour for them.
If we were to omit the line, the test would fail as we would run into the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;io.mockk.MockKException: no answer found for: Dao(#2).insert(mocked String)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A feature I was immediately fond of as I like to write strict tests.
Note that you can also define the mock as being a &lt;em&gt;relaxed mock&lt;/em&gt; in order to avoid this strict behaviour:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relaxed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mockito has something similar for verifying with &lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito.verifyNoMoreInteractions(generator, dao)&lt;/code&gt; which I also extensively use to enforce that all calls of mocked objects are verified.
Of course, the above example is only the tip of the iceberg as MockK houses a ton of other features such as annotations to simplify creating mock objects, 
spying to mix mocks and real objects, partial argument matching, capturing arguments, verification order support, matchers, coroutine mocking support, and so much more.&lt;/p&gt;

&lt;p&gt;After fiddling with Mockito, I happily continued using MockK for my little Kotlin project.&lt;/p&gt;

&lt;h2 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h2&gt;
&lt;p&gt;Mockito for me felt a bit hacky/unnatural and too Java-ish when using it in a Kotlin project.
I imagine it will probably become better in the near future.&lt;/p&gt;

&lt;p&gt;MockK, being a newer library specifically targeted at Kotlin, felt clean and pleasant to use with excellent documentation.
Oleksiy is also actively working on the library as you can see in the repo’s &lt;a href=&quot;https://github.com/oleksiyp/mockk/releases&quot; target=&quot;_blank&quot;&gt;releases section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I highly recommend checking out MockK for mocking in a Kotlin project as it is currently a better option in my humble opinion.
Oleksiy is also very active on the &lt;a href=&quot;https://gitter.im/mockk-io/Lobby&quot; target=&quot;_blank&quot;&gt;MockK Gitter&lt;/a&gt; and he helps you out quickly should you have any questions.
He is also open to feedback and enjoys being challenged in order to make MockK an even better library.
If you want to learn more about MockK, you should definitely read Oleksiy’s blog post series in the next section.&lt;/p&gt;

&lt;h2 id=&quot;other-useful-links&quot;&gt;Other useful links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK documenation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oleksiyp/mockk&quot; target=&quot;_blank&quot;&gt;MockK GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/mockk-io/Lobby&quot; target=&quot;_blank&quot;&gt;MockK Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/oleksiyp&quot; target=&quot;_blank&quot;&gt;Oleksiy Pylypenko’s Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot;&gt;Blog post by Hadi Hariri: Mocking Kotlin with Mockito&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-basics-ae55d0aadf2b&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-expected-behavior-and-behavior-verification-3862dd0e0f03&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: Expected behavior and behavior verification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-mockk-features-e5d55d735a98&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: MockK features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;De Turck&quot;, &quot;twitter&quot;=&gt;&quot;YannickDeTurck&quot;, &quot;linkedin&quot;=&gt;&quot;yannickdeturck&quot;, &quot;github&quot;=&gt;&quot;yannickdeturck&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-de-turck/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-de-turck.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead JVM Languages&quot;, &quot;email&quot;=&gt;&quot;Yannick.DeTurck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yannick is a senior Java consultant and competence lead of the JVM languages competence center at Ordina Belgium. He's very much interested in everything Java and Spring related as well as reactive programming, Kotlin, Lightbend technologies, software architectures, and coaching and enabling other colleagues.&quot;}</name><email>Yannick.DeTurck@ordina.be</email></author><category term="Testing" /><category term="Kotlin" /><category term="MockK" /><category term="Unit Testing" /><category term="Mocking" /><category term="Mockito" /><category term="TDD" /><category term="Test-Driven Development" /><summary type="html">Table of contents Introduction Mockito and its shortcomings in Kotlin The idiomatic mocking framework for Kotlin Summing it all up Other useful links</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/writing-tests-in-kotlin-with-mockk/mockk.png" /></entry><entry><title type="html">Visualizing your Spring Integration components &amp;amp; flows</title><link href="https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows.html" rel="alternate" type="text/html" title="Visualizing your Spring Integration components &amp; flows" /><published>2018-01-27T00:00:00+00:00</published><updated>2018-01-27T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows.html">&lt;blockquote&gt;
  &lt;p&gt;This post can be useful for everyone who wants to have insights on their application’s internal architecture when integrating with other systems using Spring Integration.
From the developer that just started in your team and who wants to have an overview, to the seasoned team member that needs to troubleshoot a problem in production.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currently we are working on the phased roll out of a microservices architecture at one of our clients.
To ensure that everything works as it’s supposed to we are using a lot of &lt;a href=&quot;http://enterpriseintegrationpatterns.com/&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt; to stitch both the old and the new landscape together.
The best way to achieve a solution when using Java, is to use Spring Integration.
A few days ago we wanted to have clear insights on how certain microservices are communicating with the existing systems.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-graph-of-spring-integration-components-and-flows&quot;&gt;Creating your graph of Spring Integration components and flows&lt;/h2&gt;

&lt;p&gt;A first step to expose your Spring Integration components and flows is to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrationGraphServer&lt;/code&gt; bean to your application.
This class resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;o.s.i.support.management.graph&lt;/code&gt; package, between all the required classes to collect, build and render the runtime state of Spring Integration components as a single tree-like &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;exposing-the-graph&quot;&gt;Exposing the graph&lt;/h2&gt;

&lt;p&gt;Using the Spring Integration HTTP module you can easily expose the &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrationGraphServer&lt;/code&gt; functionality as a REST service.
Just add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableIntegrationGraphController&lt;/code&gt; annotation to your application, and you’re good to go!
Or, in case you are using XML config, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;int-http:graph-controller/&amp;gt;&lt;/code&gt; XML element to your setup.
Be sure to edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;allowedOrigins&lt;/code&gt; attribute of the annotation in case you’re accessing the endpoint between 2 domains.
Sidenote: your application needs to be deployed on a web container, or it needs to use an embedded web container in case you are building on top of Spring Boot.&lt;/p&gt;

&lt;h2 id=&quot;visualizing-the-exposed-graph-of-components-and-flows&quot;&gt;Visualizing the exposed graph of components and flows&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://d3js.org/&quot; target=&quot;_blank&quot;&gt;D3.js&lt;/a&gt; we are able to visualize everything within our graph.
In &lt;a href=&quot;https://gist.github.com/TYsewyn/99f86b42ec4fbedf06db611a1a04bea4&quot; target=&quot;_blank&quot;&gt;this quick &amp;amp; dirty gist&lt;/a&gt; I created, you can find a simple example of a possible visualisation.
Download the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file, point the script to the correct endpoint by editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphEndpoint&lt;/code&gt; variable, open the file in your browser and you should see every component and flow!&lt;/p&gt;

&lt;p&gt;As Gary Russell pointed out in &lt;a href=&quot;https://twitter.com/gprussell/status/957370937741111296&quot; target=&quot;_blank&quot;&gt;his reply&lt;/a&gt; to my tweet you can also use Spring Flo for the visualization.
Spring Flo is an Angular based, embeddable graphical component for pipeline/graph building and editing.
This is used as the basis of the stream builder in Spring Cloud Data Flow.
You can find the sample application &lt;a href=&quot;https://github.com/spring-projects/spring-flo/tree/angular-1.x/samples/spring-flo-si&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;taking-it-one-step-further&quot;&gt;Taking it one step further&lt;/h2&gt;

&lt;p&gt;If you add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableIntegrationManagement&lt;/code&gt; annotation or the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;int:management /&amp;gt;&lt;/code&gt; XML element to your setup, the graph will even expose all the metrics of your Spring Integration components.
This will definitely help you out when you want to monitor your components and flows, enabling you to troubleshoot problems even faster in case something goes wrong in production.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Ysewyn&quot;, &quot;avatar&quot;=&gt;&quot;tim-ysewyn.png&quot;, &quot;twitter&quot;=&gt;&quot;TYsewyn&quot;, &quot;linkedin&quot;=&gt;&quot;tysewyn&quot;, &quot;github&quot;=&gt;&quot;TYsewyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-ysewyn/&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader API &amp; Microservices&quot;, &quot;email&quot;=&gt;&quot;Tim.Ysewyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a Principal Consultant at Ordina, where he helps fellow developers discovering top-notch technologies and methodologies as a Competence Leader for API &amp; Microservices. You can also find him working on various parts of the &lt;a href=\&quot;https://www.spring.io\&quot; target=\&quot;_blank\&quot;&gt;Spring&lt;/a&gt; framework or helping out at &lt;a href=\&quot;https://ng-be.org\&quot; target=\&quot;_blank\&quot;&gt;NG-BE&lt;/a&gt;. When you can\\'t get a hold of him, he will probably be under water since he is also an underwater photographer &amp; rescue diver.&quot;}</name><email>Tim.Ysewyn@ordina.be</email></author><category term="Architecture" /><category term="Spring" /><category term="Integration" /><category term="Spring Integration" /><category term="EIP" /><category term="Microservices" /><summary type="html">This post can be useful for everyone who wants to have insights on their application’s internal architecture when integrating with other systems using Spring Integration. From the developer that just started in your team and who wants to have an overview, to the seasoned team member that needs to troubleshoot a problem in production.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-01-27-Visualizing-your-Spring-Integration-components-and-flows/post-image.jpg" /></entry><entry><title type="html">The JWorks Tech Radar</title><link href="https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog.html" rel="alternate" type="text/html" title="The JWorks Tech Radar" /><published>2018-01-20T00:00:00+00:00</published><updated>2018-01-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog</id><content type="html" xml:base="https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog.html">&lt;blockquote&gt;
  &lt;p&gt;The JWorks Technology Radar is intended to showcase our opinion on the most important tech trends we see today.
It is based on the Thoughtworks Technology Radar and uses its open source framework for visualization.
We adopted the mechanics and methodology from Thoughtworks, as described below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our tech radar can be reached through &lt;a href=&quot;https://ordina-jworks.github.io/tech-radar&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-radar&quot;&gt;The Radar&lt;/h2&gt;

&lt;p&gt;The Radar is a document that sets out the changes that we think are currently interesting in software development - things in motion that we think you should pay attention to and consider using in your projects.
It reflects the idiosyncratic opinion of a bunch of senior technologists and is based on our day-to-day work and experiences.
While we think this is interesting, it shouldn’t be taken as a deep market analysis.&lt;/p&gt;

&lt;h2 id=&quot;quadrants&quot;&gt;Quadrants&lt;/h2&gt;

&lt;p&gt;The quadrants are a categorization of the type of blips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Programming Languages and Frameworks.&lt;/strong&gt; Quite straight-forward, languages and software frameworks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tools.&lt;/strong&gt; These can be components, such as databases, software development tools, such as Versions Control Systems; or more generic categories of tools, such as the notion of polyglot persistence.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Platforms.&lt;/strong&gt; Things that we build software on top of such as mobile technologies like Android, virtual platforms like the JVM, or generic kinds of platforms like hybrid clouds.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Techniques.&lt;/strong&gt; These include elements of a software development process, such as experience design; and ways of structuring software, such as microservices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t make a big deal out of the quadrants - they’re really just a way to break up the Radar into topic areas. We don’t think it’s important which quadrant a blip goes into, unlike the rings - which generate a lot of discussion.&lt;/p&gt;

&lt;h2 id=&quot;rings&quot;&gt;Rings&lt;/h2&gt;

&lt;p&gt;The metaphor of a radar says that the closer a blip is to you, the sooner it will be on top of you. Like most metaphors, you can’t take it too seriously, but there’s an essential sense to it.&lt;/p&gt;

&lt;p&gt;Our Radar has four rings, which we’ll describe starting from the middle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;Adopt&lt;/strong&gt; ring represents blips that we think you should be using now. We don’t say that you should use these for every project; any tool should only be used in an appropriate context. However we do think that a blip in the Adopt ring represents something where there’s no doubt that it’s proven and mature for use.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Trial&lt;/strong&gt; ring is for blips that we think are ready for use, but not as completely proven as those in the Adopt ring. So for most organizations we think you should use these on a trial basis, to decide whether they should be part of your toolkit. Typically we’re happy to use trial blips now, but we realize that most readers will be more cautious than us.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Assess&lt;/strong&gt; ring are things that you should look at closely, but not necessarily trial yet - unless you think they would be a particularly good fit for you. Typically, blips in the Assess ring are things that we’re currently trialling, on our projects.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Hold&lt;/strong&gt; ring is for things that are getting attention in the industry, but we don’t think are ready for use. Sometimes this is because we don’t think they’re mature enough yet: sometimes it means we think they’re irredeemably flawed. We don’t have an “avoid” ring, but we do throw things in the Hold ring that we wish our clients wouldn’t use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike the quadrants, we do have some quite passionate arguments about which ring a blip should go into. We don’t tend to have angry debates, but rings are what generate the most energetic discussions. Over the course of making the Radar we’ve come up with some useful rules of thumb to help us put things into rings.&lt;/p&gt;

&lt;p&gt;We can only put blips into the Trial ring when we have experience of that blip on a real project. This can mean we sometimes look behind the technology curve, because we may like the look of a technology but haven’t yet persuaded a client to try it out - and until we do that blip cannot pass into Trial.&lt;/p&gt;

&lt;p&gt;For the Adopt ring, we only include items when we think it would be a poor and potentially irresponsible choice not to use them given the appropriate project context.&lt;/p&gt;

&lt;p&gt;More information can be found on the &lt;a href=&quot;https://www.thoughtworks.com/radar/faq&quot;&gt;Thoughtworks website&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Andreas&quot;, &quot;last_name&quot;=&gt;&quot;Evers&quot;, &quot;permalink&quot;=&gt;&quot;/author/andreas-evers/&quot;, &quot;avatar&quot;=&gt;&quot;andreas-evers.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;andreas.evers@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;andreasevers&quot;, &quot;github&quot;=&gt;&quot;andreasevers&quot;, &quot;title2&quot;=&gt;&quot;Practice Leader Backend&quot;, &quot;linkedin&quot;=&gt;&quot;eversandreas&quot;, &quot;bio&quot;=&gt;&quot;Andreas is a Principal Java consultant at Ordina, passionate about the Spring ecosystem, microservices, REST, clean code and best practices in general. An avid open source enthusiast and Spring contributor. Helps fellow developers as Competence Center leader for architecture and best practices by giving workshops, talks and courses about the newest technologies.&quot;}</name><email>andreas.evers@ordina.be</email></author><category term="Tech" /><category term="Tech Radar" /><summary type="html">The JWorks Technology Radar is intended to showcase our opinion on the most important tech trends we see today. It is based on the Thoughtworks Technology Radar and uses its open source framework for visualization. We adopted the mechanics and methodology from Thoughtworks, as described below.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/techradar/TechRadar.png" /></entry></feed>