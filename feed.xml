<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-11-12T15:45:50+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">eXperience Agile 2019</title><link href="https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019.html" rel="alternate" type="text/html" title="eXperience Agile 2019" /><published>2019-11-12T00:00:00+00:00</published><updated>2019-11-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/11/12/experience-agile-2019.html">&lt;p&gt;This year, it was already the 6th edition of eXperienceAgile, organised in Portugal, Lisbon by Radtac and Hugo Lourenço - a DevOps and Enterprise Agility Advisor. This global conference focuses on gathering wisdom and best practices on business agility as well as technical agility, and therefor it was the perfect conference for JWorks Agile &amp;amp; DevOps practitioners and enthusiasts.&lt;/p&gt;

&lt;p&gt;The first day contained fourteen talks on team and business agility with speakers from Europe and America, whereas the second day contained DevOps talks and deep-dive workshops with some of the speakers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/experienceagile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@experienceagile&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/hashtag/XA19&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;#xa19&lt;/a&gt; / &lt;a href=&quot;http://www.experienceagile.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;experienceagile.org&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#half-agile--5-leadership-mistakes-diluting-your-transformation-by-jesse-fewell&quot;&gt;Half-Agile:  5 Leadership Mistakes Diluting Your Transformation, by Jesse Fewell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-toyota-flow-system-by-nigel-thurlow&quot;&gt;The Toyota Flow System, by Nigel Thurlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-agile-futurist-by-mario-moreira&quot;&gt;The Agile Futurist, by Mario Moreira&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#escape-velocity-by-doc-norton&quot;&gt;Escape Velocity, by Doc Norton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;half-agile-5-leadership-mistakes-diluting-your-transformation-by-jesse-fewell&quot;&gt;Half-Agile: 5 Leadership Mistakes Diluting Your Transformation, by Jesse Fewell&lt;/h2&gt;

&lt;p&gt;Jesse shares with us five patterns on our journey to an Agile organisation. 
He explains why this journey can be so hard, especially for leaders (team leads, scrum masters, technical leads, managers or executives).&lt;/p&gt;

&lt;p&gt;You start with a good decision, then for some reason you get frustrated and agitated. Once you discover the mistake made, you can take action to correct it.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Jessy Fewell&quot; src=&quot;/img/2019-11-12-experience-agile-2019/jesse-fewell.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;buy-in-engagement&quot;&gt;Buy-in, Engagement&lt;/h3&gt;

&lt;p&gt;Very often you have a good idea and just tell the people around you to execute it. 
But along the way you forget to explain the reasoning behind this idea, which leads to misunderstanding and frustration.
As leaders it’s your job to create context for the change and communicate methodically and excessively. 
This is hard, because it takes time, repetition and requires patience.&lt;/p&gt;

&lt;h3 id=&quot;impact&quot;&gt;Impact&lt;/h3&gt;

&lt;p&gt;The first good step, as a leader, is to take initiative. 
Other departments may not want to be Agile, so you will start alone. You’ll be the role model to set the tone for the organisation.&lt;/p&gt;

&lt;p&gt;However, this leads to a team trying to be Agile in an environment that is not Agile. 
And you end up doing Water-SCRUM-fall or Modern Waterfall.&lt;/p&gt;

&lt;p&gt;So you need to take the next action: invite others to the table.
If you want the Agile journey to move forward it has to be about Agile, not just YOUR Agile. 
Allow the journey to evolve instead of following a fixed methodology.&lt;/p&gt;

&lt;h3 id=&quot;practices&quot;&gt;Practices&lt;/h3&gt;

&lt;p&gt;You often tell colleagues to follow standard techniques, including daily stand-ups, spring planning, retrospectives, etc… 
These are practices that everyone uses. 
So, if you want to be like everyone else, you should definitely apply these techniques.&lt;/p&gt;

&lt;p&gt;Let me tell you a little secret: if you try to be like everyone else, you’ll never be ahead of everyone else!&lt;/p&gt;

&lt;p&gt;You need to experiment, try things out. 
Not just do things because others do them or because you read them in a book.
You need to find YOUR Agile. 
Don’t just copy-paste your Agile.&lt;/p&gt;

&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;/h3&gt;

&lt;p&gt;Everybody is struggling with more complexity, more change and more requirements, but there are loads of good opportunities and you want to do all of them.&lt;/p&gt;

&lt;p&gt;People get overwhelmed by this, because there is so much work and now we want to do an Agile change or transformation.&lt;/p&gt;

&lt;p&gt;You should try not to over-commit.
Find your One Thing that you can focus on, so that you can make more progress with the same effort.
Learn to say NO, with diplomacy.&lt;/p&gt;

&lt;h3 id=&quot;talent&quot;&gt;Talent&lt;/h3&gt;

&lt;p&gt;When you want to go on an Agile journey, you want everyone else to get better. 
As a leader, you take the role of a mentor. 
You show and teach that you are Agile and they need to follow you.&lt;/p&gt;

&lt;p&gt;But you get frustrated, because they are not changing fast enough. 
You feel like you are Agile, but they are not.
Because you forgot about yourself as the leader. 
If you want to transform your organisation, you need to first transform yourself as a leader in the organisation.&lt;/p&gt;

&lt;p&gt;You need to challenge your own assumptions. 
Take a leadership training or workshop and get inspired.
Maybe you need to think about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;delegating&lt;/strong&gt; more instead of doing;&lt;/li&gt;
  &lt;li&gt;shifting from explaining methods to articulating &lt;strong&gt;goals&lt;/strong&gt;; or&lt;/li&gt;
  &lt;li&gt;instead of telling people what to do, give them the &lt;strong&gt;ability to do it themselves&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This personal growth requires that you go on a long-term journey of transforming yourself as a leader.&lt;/p&gt;

&lt;h2 id=&quot;the-toyota-flow-system-by-nigel-thurlow&quot;&gt;The Toyota Flow System, by Nigel Thurlow&lt;/h2&gt;
&lt;p&gt;We all know that Toyota has always been a frontrunner with regard to Lean thinking, bringing the customer in the center point of attention and establishing flow in the value creation pipeline. 
The Toyota Production System (TPS) - with its two pillars: continuous improvement &amp;amp; respect for people - as developed by Taiichi Ohno and Eiji Toyoda, is globally recognised as a strategic and human centered foundation to become a Lean and thriving enterprise. 
On this foundation ‘the Toyota Way’ has been developed as a philosophy with a set of principles and behaviors that can guide companies through their change and towards the right mindset.&lt;/p&gt;

&lt;p&gt;Recently, with the Toyota Flow System (TFS) the Toyota thinkers take this strategy yet a few steps further with the purpose of being an inspiration for companies with human centricity, continuous improvement in their strategic roadmap. 
Together with co-facilitator Dirk van Goubergen, Nigel Thurlow - Chief of Agile, Toyota Connected - has given us a hands-on introduction to the extra dimension that this evolution entails.&lt;/p&gt;

&lt;h3 id=&quot;building-on-lessons-learnt-and-extensive-research&quot;&gt;Building on lessons learnt and extensive research&lt;/h3&gt;
&lt;p&gt;Nigel Thurlow puts it this way:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;There are fantastic lessons to be learned all around, from Systems Thinking to Scrum. 
The body of knowledge at our disposal is immense, and there are countless ways to apply it. 
But to truly leverage this wealth of information, we must &lt;strong&gt;change the narrative&lt;/strong&gt; and realize that &lt;em&gt;context&lt;/em&gt; is everything: different environments call for different approaches and tools, and with something as complex as a business transformation, sticking to a one-size-fits-all methodology is dangerous. 
Instead, we need to be able to &lt;strong&gt;mix and match&lt;/strong&gt; the techniques that best suit our situation, while ensuring that key aspects of a transformation are considered.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;get-the-basics-right&quot;&gt;Get the basics right&lt;/h3&gt;
&lt;p&gt;With the &lt;em&gt;Red Bead experiment&lt;/em&gt;, we experienced that we need to verify that companies apply the right kind of Lean, and not the &lt;em&gt;evil&lt;/em&gt; version, when trying to &lt;strong&gt;eliminate waste&lt;/strong&gt;. 
Waste is not caused by the workers most of the time, but by the system. 
Failing to recognise this can bring leadership to take the wrong decisions and apply counterproductive measures - like hiring or firing employees, or introducing contradictory KPIs among workers, thus creating steady erosion of psychological safety within teams - and in the meantime not tackling the actual process issues in the pipeline.&lt;/p&gt;

&lt;p&gt;Three questions can help us define waste, explained by Dirk:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is value for the customer?&lt;/li&gt;
  &lt;li&gt;What products are we making?&lt;/li&gt;
  &lt;li&gt;Which activities contribute to this result?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing activities and highlighting the ones that are simply &lt;em&gt;uselessly getting tired&lt;/em&gt; is a very important exercise for every contributor in the process, whether it be workers in a factory, developers, testers, consultants, or third parties or managers. 
Show respect for people by allowing them to focus on value adding activities. 
Since the management and people with leadership roles often organise the system, it is key they recognise this responsibility.&lt;/p&gt;

&lt;p&gt;Once the activities are inspected and the process of value creation is established, the next step is to enable flow, by designing your &lt;em&gt;value stream like a river&lt;/em&gt;, allowing the value to grow without interruption, without waiting time or blockages. 
Here again, managers have a task to focus on not being a flow stopper. 
It is important for them to acknowledge that &lt;strong&gt;resource efficiency can kill flow efficiency&lt;/strong&gt;. 
Just like a train company should focus on timely arrival and departure and not on getting as much travelers in one train by waiting until it’s completely full before taking off again.
For Toyota, as well as for any development team, the key is to ensure a &lt;em&gt;flexible workforce, with engaged cross-trained employees&lt;/em&gt; that have a thorough understanding of the value adding processes throughout the company. 
This enables them to flexibly partake in flow efficiency whenever and wherever needed.&lt;/p&gt;

&lt;h3 id=&quot;toyota-flow-system-the-dna-for-organisations&quot;&gt;Toyota Flow System, the DNA for organisations&lt;/h3&gt;
&lt;p&gt;The TFS model aims to &lt;em&gt;sustain&lt;/em&gt; the flow of value to the customer. 
And Toyota offers a body of knowledge that helps companies to understand the different aspects of &lt;strong&gt;customer first value delivery&lt;/strong&gt; with a systemic approach to optimize for the whole, and not the subparts, or silos.&lt;/p&gt;

&lt;p&gt;These aspects - visualised as three &lt;em&gt;pillars&lt;/em&gt; - are supporting this motto and form the DNA of the Toyota Flow System. But let it be clear that these three cannot exist without each other. 
The helix structure of the pillars points to their intertwined importance, making the structure trustworthier and stronger.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Complexity thinking: understanding uncertainty and complex adaptive systems&lt;/li&gt;
  &lt;li&gt;Distributed Leadership: the behavior patterns of those who lead people and teams&lt;/li&gt;
  &lt;li&gt;Team Science: the science of teams, their interdependencies and interactions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For every pillar, Toyota has listed a number of possible theories and practices that need to be considered when trying to achieve the motto. 
For every context, the combination of selected theories, practices and models can be different. 
By giving this list of researched and tested material, they offer a good starting point for companies on a transformation journey, allowing them make the founded decisions within their own particular business context.&lt;/p&gt;

&lt;p&gt;Take a good look at what Toyota suggests for every pillar. 
There sure is a lot to discover!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;TFS&quot; src=&quot;/img/2019-11-12-experience-agile-2019/Toyota-Flow-System.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Key takeaways were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Teams need to learn &lt;em&gt;how&lt;/em&gt; to do team work and be more than the sum of the team members. 
Teams do not have the set of skills and behaviors automatically, and so they need coaching to focus on team communication and collaboration aspects as well as team personality dynamics.&lt;/li&gt;
  &lt;li&gt;Intent based leadership - as coined by D. Marquet - helps you to move authority where the information is available. 
It is about designing an environment where people give intent to each other and they feel valued and proud of their work. 
It is about actively giving control to people who maintain the information so they can make informed decisions.&lt;/li&gt;
  &lt;li&gt;Scrum is disciplined PDCA - the Plan/Do/Check/Act (or Adjust) approach from William Edwards Deming&lt;/li&gt;
  &lt;li&gt;Beware of &lt;em&gt;failure demand&lt;/em&gt;, which is waste disguised as value for the customer and service excellence.&lt;/li&gt;
  &lt;li&gt;People are spending the best years of their lives in companies.. take up the responsibility to make it as enjoyable as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More reading: &lt;a href=&quot;https://planet-lean.com/introducing-the-toyota-flow-system/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://planet-lean.com/introducing-the-toyota-flow-system/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The author of the mentioned article wraps it up saying:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is the first time someone has brought all these elements together and made sense of them, explaining how they fit within a company like Toyota. 
Complexity thinking is a change in mental models and management practices. 
The Toyota Flow System is the first to externalize it with tools and in a contextual setting. 
The next step will be testing it in the field in different contextual settings, to see what works and what doesn’t. 
It will be exciting to see how it evolves, which we are sure it will. 
That’s the beauty of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-agile-futurist-by-mario-moreira&quot;&gt;The Agile Futurist, by Mario Moreira&lt;/h2&gt;
&lt;p&gt;This was an energizing talk, giving us a view on the trends in the Agile movement for the coming ten years. 
Mario Moreira is an enthusing and influential Agile transformation Leader, Agile enterprise coach and change agent who has written four books a.o. &lt;em&gt;Being Agile: Your Roadmap to Successful Adoption of Agile&lt;/em&gt;, and &lt;em&gt;The Agile enterprise: Building and Running Agile organizations&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What is Agile?… is what he asked the eager crowd.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s a set of Values and Principles&lt;/li&gt;
  &lt;li&gt;focused on the delivery of value to the customer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is Agile not?… on the other hand.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a certification&lt;/li&gt;
  &lt;li&gt;a tool&lt;/li&gt;
  &lt;li&gt;a silver bullet&lt;/li&gt;
  &lt;li&gt;a process&lt;/li&gt;
  &lt;li&gt;it’s also not merely &lt;em&gt;redefining roles&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;and… it is definitely not &lt;em&gt;undisciplined&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;agile-trends-for-2029&quot;&gt;Agile trends for 2029&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;agiles-future&quot; src=&quot;/img/2019-11-12-experience-agile-2019/Agiles-Future.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;bring-back-the-basics&quot;&gt;Bring Back the Basics&lt;/h4&gt;

&lt;p&gt;We will all go back to the core, to rediscover and be inspired by the central purpose and initial intent of the Agile movement.
Returning to the core implies that we need to make sure we understand the heart of the &lt;a href=&quot;https://agilemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Agile manifesto&lt;/a&gt;, that we try and urge to live the principles and lead with the items on the left in mind.&lt;/p&gt;

&lt;h4 id=&quot;stop-doing-agile-for-agiles-sake&quot;&gt;Stop doing Agile for Agile’s sake&lt;/h4&gt;

&lt;p&gt;Agile is not the goal or outcome. 
So let’s stop talking about it as if it were.&lt;/p&gt;

&lt;p&gt;Rather we should look at the purpose for applying Agile.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better interactions&lt;/li&gt;
  &lt;li&gt;Better working software (or services and products for that matter)&lt;/li&gt;
  &lt;li&gt;Better customer collaboration&lt;/li&gt;
  &lt;li&gt;Ability to respond to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And people will gradually focus on better business outcomes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deliver increased Customer &lt;strong&gt;Value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Optimize the &lt;strong&gt;Flow&lt;/strong&gt; for faster delivery&lt;/li&gt;
  &lt;li&gt;Increase &lt;strong&gt;Quality&lt;/strong&gt; with Feedback Loops&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;leading-with-uncertainty&quot;&gt;Leading with uncertainty&lt;/h4&gt;

&lt;p&gt;Because leading with uncertainty is the smarter thing to do, in a world where we - as customers - don’t always know what we want, we - as product creators - don’t always know exactly how to build the product, and where things and people tend to change along the way.&lt;/p&gt;

&lt;p&gt;Uncertainty requires the right behavior and mindset to tackle it: e.g. cultivate and kindle a discovery mindset, experimental and incremental thinking, and implementing feedback loops.
We all need to practice and keep on practicing, to walk the talk, and eventually lead by example.&lt;/p&gt;

&lt;h4 id=&quot;agile-throughout-the-enterprise&quot;&gt;Agile throughout the enterprise&lt;/h4&gt;

&lt;p&gt;The way organisations are structured today is a remnant of what was required in the industrial age. 
But focusing on the customer and tracking the value stream has led to insights on how work and collaboration should be organised in a smarter, more valuable way, for all parties involved. 
Working together cross-departmental with an empowered team, focusing on a common &lt;em&gt;customer inspired&lt;/em&gt; goal, helps to limit handovers, approval flows and delayed communication. 
To make this happen, every person who’s directly involved in this end-to-end value stream, from any silo throughout the company, needs to be allowed and be able to work dedicatedly, and transparently as well as make local decisions on matters that require her/his expertise.&lt;/p&gt;

&lt;p&gt;This way of working depends upon efficient alignment and trust… in people and their abilities, to make the magic happen. 
Trust is not given, it should be &lt;em&gt;a given&lt;/em&gt; that people perceive and recognise, from the moment they first enter the company building.
When trust is present, people take decisions, and cultivate ownership.&lt;/p&gt;

&lt;h4 id=&quot;solve-holistic-problems&quot;&gt;Solve Holistic Problems&lt;/h4&gt;

&lt;p&gt;The sky is the limit. And it always has been for the intrepid.
No business domain or sector is simple and predictable enough to allow it to acquiesce in the industrial way of working.
With IT and AI permeating every nook and cranny of this global society, and with companies being ushered by market disruptions to the verge of survival, we need to realise that focusing on value creation and optimizing the whole (the team, the company, the system) to service the customer is the smartest way forward.&lt;/p&gt;

&lt;p&gt;Seeing and understanding the bigger picture of what we - as a team, as a company, as a sector - deliver to society is the next step.
From then on we will be solving holistic problems, in a holistic way. 
With our thriving society as the customer.&lt;/p&gt;

&lt;h2 id=&quot;escape-velocity-by-doc-norton&quot;&gt;Escape Velocity, by Doc Norton&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;doc-norton-introduction&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-introduction.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A recurring problem with agile projects is reporting. 
When you search for information online, everyone seems to encounter the same problems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What metrics should I use?&lt;/li&gt;
  &lt;li&gt;How can I make the team’s performance visible?&lt;/li&gt;
  &lt;li&gt;How can I identify possible bottlenecks?&lt;/li&gt;
  &lt;li&gt;How do I forecast?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most common metric that everyone uses is velocity. 
And, as the title of this section already indicates, that’s not always a good idea. 
&lt;a href=&quot;http://docondev.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Doc Norton&lt;/a&gt; had a good talk at this conference as well as the accompanying workshop the day after.&lt;/p&gt;

&lt;p&gt;In short, velocity is a lagging indicator and thus not good for predictions. 
Now, what does this mean, a lagging indicator? 
It indicates data from the past, it lags behind.&lt;/p&gt;

&lt;p&gt;Another problem when using only velocity as a metric is that it tries to explain a complex system. 
A dip or peak in velocity doesn’t explain anything, it’s just an indication that something might be wrong. 
To find the real cause, more metrics are needed.&lt;/p&gt;

&lt;p&gt;So as Doc said:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity is a &lt;strong&gt;lagging indicator&lt;/strong&gt; of a &lt;strong&gt;complex system&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as a result:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity is &lt;strong&gt;not good for predictions&lt;/strong&gt; and &lt;strong&gt;not good for diagnostics&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;predictions&quot;&gt;Predictions&lt;/h3&gt;
&lt;p&gt;Everyone has already experienced the typical management question during the lifecycle of a project:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;How long will it take to deliver feature X?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The usual solution is to take the velocity of the past sprints, estimate the feature and then simply divide the feature by the velocity. 
That gives you the amount of sprints needed to complete the feature.
Now, think about this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Are these forecasts accurate? &lt;em&gt;They might be, we don’t know for sure.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Are these forecasts definite? &lt;em&gt;Possibly.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Are these forecasts probable? &lt;em&gt;Again, they might be.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example given by Doc was the following:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Velocity (11, 10, 9), backlog size of 130 and start date is today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, the velocity in this case is 10: &lt;code class=&quot;highlighter-rouge&quot;&gt;130 / 10 = 13&lt;/code&gt;.&lt;br /&gt;
So the estimation would be that the backlog is finished in 13 sprints. 
My experience is that these estimations are usually incorrect since 13 weeks is too far in the future.&lt;br /&gt;
A great tool that he showed was the Throughput Forecaster, an Excel file in which you can enter a lot of data and in return it shows the probability of achieving the goal.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;throughput-forecasting&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-throughput.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More details about the tool above will follow in a future blogpost.&lt;/p&gt;

&lt;h3 id=&quot;diagnostics&quot;&gt;Diagnostics&lt;/h3&gt;
&lt;p&gt;As we have already said above, a dip or peak in velocity can indicate that there might be a problem with the team.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;velocity-chart&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-velocity-chart.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when looking at this chart, how you do know what’s going on?
Exactly, you don’t. 
You just know something’s probably not okay.&lt;/p&gt;

&lt;p&gt;A metric that helps is the cumulative flow diagram.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;cumulative-flow-chart&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-cumulative-chart.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It shows the different stages of sprint items during the lifecycle of the sprint. 
You could see that it takes too long to validate an item or to deploy it.&lt;br /&gt;
For example, the image above shows that the items stay too long in &lt;em&gt;Ready for Approval&lt;/em&gt;. 
The team can use this to address the problem.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;velocity-workshop&quot; src=&quot;/img/2019-11-12-experience-agile-2019/doc-norton-workshop-cumulative.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This picture was taken during the workshop from Doc about this subject where he went into more detail.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Velocity is a metric for Agile teams, but only velocity doesn’t indicate much. 
It needs to be combined with other metrics in order to resolve problems.
And use the metrics together with the team so they can detect themselves when there are problems, so they can be resolved as soon as possible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Metrics are not &lt;strong&gt;just&lt;/strong&gt; for managers, metrics are for teams.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kristof&quot;, &quot;last_name&quot;=&gt;&quot;Eekhaut&quot;, &quot;github&quot;=&gt;&quot;kristof-eekhaut&quot;, &quot;permalink&quot;=&gt;&quot;/author/kristof-eekhaut/&quot;, &quot;avatar&quot;=&gt;&quot;kristof-eekhaut.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java consultant&quot;, &quot;email&quot;=&gt;&quot;kristof.eekhaut@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kristof is a senior Java consultant and architect, who has a passion for Agile software development, Domain-Driven Design and Collaborative modelling. He is eager to learn new technologies and architectures. He loves working with a team to build complex applications that users enjoy.&quot;}</name><email>kristof.eekhaut@ordina.be</email></author><category term="Conference" /><category term="Agile" /><category term="Conference" /><summary type="html">This year, it was already the 6th edition of eXperienceAgile, organised in Portugal, Lisbon by Radtac and Hugo Lourenço - a DevOps and Enterprise Agility Advisor. This global conference focuses on gathering wisdom and best practices on business agility as well as technical agility, and therefor it was the perfect conference for JWorks Agile &amp;amp; DevOps practitioners and enthusiasts.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-11-12-experience-agile-2019/ExperienceAgile2019.png" /></entry><entry><title type="html">Ordina Young Professional Programme 2019 Summer Edition</title><link href="https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition.html" rel="alternate" type="text/html" title="Ordina Young Professional Programme 2019 Summer Edition" /><published>2019-10-24T00:00:00+00:00</published><updated>2019-10-24T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition</id><content type="html" xml:base="https://ordina-jworks.github.io/young%20professional%20programme/2019/10/24/Ordina-Young-Professional-Programme-2019-Summer-Edition.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;65 young professionals started the Ordina Young Professional Programme this summer, on the 1st of August. 
JWorks counted 8 trainees: Mohammed, Jasper, Nicholas, Lennert, Duncan, Lore, Brecht and Imad. 
All looking for a challenge and a fresh start. Most of them just graduated, Brecht on the other hand already had other work experience. 
During the young professional programme, we were introduced to a wide range of technologies.
Technologies that play an important role in IT. 
The courses were focused mainly on providing a very hands-on experience as to learn how the different technologies work in practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the three months long programme there were two main periods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The first six weeks were filled with various trainings: security, backend, frontend, soft skill trainings,…&lt;/li&gt;
  &lt;li&gt;During the remaining six weeks we got split up into two teams to work on different dev cases: Chatbot Dina and Zero Plastic Rivers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blogpost will talk about both periods separately below. The first period is further separated into technical and non-technical trainings.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-trainings&quot;&gt;Technical trainings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#non-technical-trainings&quot;&gt;Non-technical trainings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dev-cases&quot;&gt;Dev cases&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;first-day&quot;&gt;First Day&lt;/h2&gt;
&lt;p&gt;On our first arrival at Ordina, we were warmly welcomed by Anja, our Resource Manager, and two of the Practice Managers: Ken and Yannick. 
We were introduced to the structure of Ordina and got to know some of the other trainees. 
After the introduction, we were given a tour of the entire building, during which we met some of the colleagues at JWorks.
Four of the trainees already did an internship at Ordina before coming to work officially, so they already knew a lot of the colleagues in Mechelen.
This didn’t make any difference however, since everyone was very open and welcoming.
Finally, we got our laptops and the keys to our cars so that the next day we could get started with the courses focused on both technical and soft skills.&lt;/p&gt;

&lt;h1 id=&quot;technical-trainings&quot;&gt;Technical trainings&lt;/h1&gt;

&lt;p&gt;During the six weeks of trainings there were a lot of very interesting technical sessions. 
The most important ones to us are discussed below.
Other than those mentioned below, there are a lot of others, such as the course on Git, DevOps, Java,…&lt;/p&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;
&lt;p&gt;During the young professional programme the Spring Boot course was taught by &lt;a href=&quot;/author/ken-coenen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ken Coenen&lt;/a&gt;.
He explained what sits at the core of Spring and how Spring Boot works. 
Before taking a deep dive into Spring Boot, we were taught the ins and outs of the Spring Framework.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;SpringBoot&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/SpringBoot.png&quot; width=&quot;20%&quot; height=&quot;20%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot takes away a lot of configuration by providing defaults based on industry standards. 
Therefore, Spring Boot makes it easy to create stand-alone, production grade Spring based applications that need minimum configuration. 
They still allow you to take the whole configuration in your own hands and of course provide a handful of third-party libraries to get you started. 
When generating a new Spring Boot project, you get to pick between a Maven or Gradle based project.&lt;/p&gt;

&lt;h3 id=&quot;day-1&quot;&gt;Day 1&lt;/h3&gt;
&lt;p&gt;On the first day, we took a first dive into the core fundamentals: Inversion Of Control (IOC), Bean Injection, and so on. 
In the afternoon, we went further and looked into Spring Web Services and Spring Security.&lt;/p&gt;

&lt;h3 id=&quot;day-2&quot;&gt;Day 2&lt;/h3&gt;
&lt;p&gt;The second day, we built a small application to test the range of possibilities Spring Boot offers. 
The app was built to provide a system to save houses with their address, the inhabitants and some of the features it has, like the type of garage.
It was a fun little project which taught us a lot of what Spring Boot can be used for. 
We’ve all used Spring Boot in our dev case, so it was definitely worth following.&lt;/p&gt;

&lt;h4 id=&quot;duncan-casteleyn&quot;&gt;&lt;a href=&quot;/author/duncan-casteleyn&quot;&gt;Duncan Casteleyn&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;What I really liked about Ken’s Spring Boot session was that we did a lot of hands-on live coding.
This made the course very interactive, providing possibilities for both feedback to Ken as input of our own.
I learned a lot from this session, even though I already had a lot of prior knowledge of Spring Boot.
The theoretical start on Spring was a very useful refresh to get up to speed again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;The Docker course, given by &lt;a href=&quot;/author/tom-verelst&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tom Verelst&lt;/a&gt;, started with a theoretical explanation about the advantages of containerization, the difference with virtual machines and how a container is built. 
The main part of the course was a hands-on session. 
We learned to create an image of our application and push it to Docker hub, spin up a Docker container and write efficient Docker compose files.&lt;/p&gt;

&lt;h4 id=&quot;brecht-porrez&quot;&gt;&lt;a href=&quot;/author/brecht-porrez&quot;&gt;Brecht Porrez&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;During this training I really experienced the advantages of Docker. 
I now use it almost daily during the Zero Plastic Rivers dev case.
For example, if I need a test database, I quickly start up a Docker container.
If I have written a backend application, I quickly turn it into a container so my frontend colleagues can test with it and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Kubernetes&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Kubernetes.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To better understand the use of Docker, Tom also gave us an introduction to Kubernetes (K8s). 
In the K8s session, we learned to work with the commands of Kubernetes by using them on Minikube, a tool to run Kubernetes locally. 
Later that day we learned to deploy a prebuilt application to Minikube. 
We wrote our own deployment files for the frontend, backend and RabbitMQ. 
By doing this we had more insight into the possibilities of Kubernetes.&lt;/p&gt;

&lt;h4 id=&quot;nicholas-meyers&quot;&gt;&lt;a href=&quot;/author/nicholas-meyers&quot;&gt;Nicholas Meyers&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’m very interested in how applications are built and deployed, which is why I found the Kubernetes session very interesting. 
I’d love to learn more about this technology in the future. 
The hands-on way of working helped me a lot, because this was quite new to me, which made it not the easiest course to follow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;test-driven-development&quot;&gt;Test-Driven Development&lt;/h2&gt;

&lt;p&gt;In the DevOps track, we received an interesting lesson about Test-Driven Development from &lt;a href=&quot;/author/pieter-van-hees&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pieter Van Hees&lt;/a&gt;.
In school, TDD is usually not taught and testing comes after developing. 
What TDD aims to do is speeding up the development process by thinking about what exactly you want your program to do and which exact results you want.
After pouring those requirements into unit tests, you can start developing and immediately testing whatever you wrote. 
There are many advantages of working with TDD, but it mainly makes it easier later on in the development process. 
In the beginning, there’s more work involved because you need to write all the tests. 
In the long run however, it saves a lot of time because you can immediately spot mistakes using your unit tests.
Another good use case is refactoring code. 
With the test already in place, you can be sure that the behaviour of the functionality is still the same and no regressions are introduced as a result of the refactoring.&lt;/p&gt;

&lt;h4 id=&quot;lennert-peeters&quot;&gt;&lt;a href=&quot;/author/lennert-peeters&quot;&gt;Lennert Peeters&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’ll be looking more into TDD in the future and continue to develop using this philosophy. 
We’ve used the method in our Zero Plastic Rivers dev case.
It worked out great, saving us quite some time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/TDD.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;non-technical-trainings&quot;&gt;Non-technical trainings&lt;/h1&gt;

&lt;p&gt;Ordina organised some non-technical trainings alongside the ones above. 
These were focused on Agile and Scrum, as well as some soft skills like how to present yourself in front of others.&lt;/p&gt;

&lt;h2 id=&quot;agile--scrum&quot;&gt;Agile &amp;amp; Scrum&lt;/h2&gt;

&lt;p&gt;The first of the courses in the soft skill department was an introduction into Agile and Scrum. 
Projects ran by Ordina teams get planned in short sprints of two weeks (or even less), making sure the Product Owner is able to give frequent feedback and the team has preplanned time slots for reflection. 
A Scrum team consists of three major parts: the developer team, the Product Owner and the Scrum Master. 
The dev team isn’t broken down into multiple roles but works as one whole. 
This is a very powerful and important part about how a Scrum Team works, since having the team work as a whole allows them to be fluent in their activities. 
This gives the project a more versatile approach with less frequent congestions and problems compared to the Waterfall methodology.&lt;/p&gt;

&lt;h4 id=&quot;jasper-rosiers&quot;&gt;&lt;a href=&quot;/author/jasper-rosiers&quot;&gt;Jasper Rosiers&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;What I found most interesting about the Scrum framework and the Agile way of working is that there are many moments to reflect on how the work is going and how well the team is working together. 
The daily scrum is a very powerful moment, which made us use it in our Chatbot dev case. 
Frequent meetings with the Product Owner and keeping him close to the project is another aspect I love about the Scrum framework. 
I will definitely look more into it in the future, since I’m aiming to become a Scrum Master.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/ScrumLayout.jpg&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;agile-hands-on&quot;&gt;Agile Hands-On&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/author/michaela-broeckx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Michaëla Broeckx&lt;/a&gt; gave us an introduction to how Agile development works in practice. 
It was a very hands-on session that helped us gain more knowledge and experience in the world of Agile development. 
First, we saw how the waterfall method worked, but then quickly noticed it wasn’t perfect and had a lot of flaws. 
This is why Michaëla introduced us to Agile which helped us to communicate and work better as a team.&lt;/p&gt;

&lt;p&gt;She did this by means of a productivity game.
The game worked as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everyone stands in a circle and the group gets one (small) ball.&lt;/li&gt;
  &lt;li&gt;The team was to throw around the ball during two minutes, while a metronome was ticking in the background.&lt;/li&gt;
  &lt;li&gt;Every time the ball got caught on a tick, one task was completed.&lt;/li&gt;
  &lt;li&gt;After two minutes, the team got 30 seconds to decide on a new strategy, but were only allowed to change one thing at a time (an extra amount of balls, a different way of throwing, reverting back to a previous way of working,…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Playing this game for 6 rounds, the productivity went up exponentially. The team had matters in its own hands, which made them think for themselves.
At the end we refreshed a couple of famous agile practices such as the SCRUM framework, which is a popular way of working together to quickly and reliably release new features.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Agile%20game.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;lore-vanderlinden&quot;&gt;&lt;a href=&quot;/author/lore-vanderlinden&quot;&gt;Lore Vanderlinden&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The agile session was a very enriching experience. We learned the basic concepts of agile the right way. 
Michaëla was a very inspiring agile coach, making the learning process easier by using a hands-on way of teaching. 
She used real life examples to show us the advantages of working in an agile manner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;final-day&quot;&gt;Final day&lt;/h1&gt;

&lt;p&gt;On the day after the final course day, all the trainees gave a short presentation about themselves in front of the others and the management. 
This way, everyone present got to know the others, with both their professional interests and achievements, as well as a little on the personal side. 
Afterwards, there was a moment for networking and socializing with everyone, and an official graduation. 
The next day, the dev cases started, which we’ll explain below!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/FinalDay.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;dev-cases&quot;&gt;Dev cases&lt;/h1&gt;

&lt;p&gt;With two different dev cases, the team of 8 JWorks trainees was divided into two:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Brecht, Imad, Lennert, Lore and Mohammed worked together on the Zero Plastic Rivers case for the University of Antwerp&lt;/li&gt;
  &lt;li&gt;Duncan, Jasper and Nicholas were set on the task of designing Chatbot Dina for internal use&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zero-plastic-rivers&quot;&gt;Zero Plastic Rivers&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;ZeroPlasticRivers&quot; src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/ZeroPlasticRivers.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the young professional programme, we were asked to develop a web application to monitor the plastic as it travels through the Schelde. 
For this purpose, we’d be using GPS trackers alongside QR-scanners.
This application is aimed at a PhD carried out at the University of Antwerp that consists of visualizing the plastic flow through the entire river, from the basin to the mouth. 
After visualizing it, an efficient remediation strategy could be made.&lt;/p&gt;

&lt;p&gt;The main objective of the application is to create a monitoring network to collect plastic waste, for example, in dams, locks or water treatment plants. 
This way, plastic flows can be calculated for example in sub-basins or piers to estimate the total flow to the estuary.
To activate this system, plastic bottles in the Schelde river will be released at different strategic points with GPS trackers and personalized labels. 
These contain relevant information such as the identifier or the url to the application.&lt;/p&gt;

&lt;p&gt;The application consists of two parts.
The first part is aimed at citizens who wish to help the cause, who can notify this surveillance network when they find a bottle as shown in the image on the right.
The second part is aimed at the researchers, and could be seen as the “backend” of the project, where the data given by the GPS trackers and the citizens is visualized in a clear and orderly way.&lt;/p&gt;

&lt;h2 id=&quot;chatbot-dina&quot;&gt;Chatbot Dina&lt;/h2&gt;

&lt;p&gt;In the second DevCase, we built chatbot Dina for the Fleet department of Ordina. 
The Chatbot team set off using the Chatlayer bot framework, later to be joined by an implementation in Dialogflow. 
Since chatbots are a relatively new technology, we wanted to keep our options open and look for the best possible implementation.&lt;/p&gt;

&lt;p&gt;The Fleet department at Ordina gets a lot of repetitive questions on a daily basis, which often have easy to research answers. 
To reduce this workload and make possible a better layout of their time, we designed a chatbot using two different bot services. 
The chatbot is made accessible via multiple online channels, such as Microsoft Teams, Telegram and Slack. 
The implementations of these social media weren’t integrated within Chatlayer natively, so we had to build adapters to take care of the communication back and forth between the different platforms.&lt;/p&gt;

&lt;p&gt;The bot interprets what the user says and formulates its reply depending on the subject. 
Dina can also ask questions to get more information, use API calls to look up tire centers etc. 
Using a well-designed chatbot, conversations should feel natural to the user, as if he was talking to a human. An example can be found below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-24-Ordina-Young-Professional-Programme-2019-Summer-Edition/Chatlayer.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The past three months have been a really busy, but great experience. 
We met new people every day, got to learn (and teach!) new things every day and dive deeper into our interests. 
We would like to thank Ordina and the whole JWorks unit for welcoming us to the team and for giving us this opportunity!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Brecht&quot;, &quot;last_name&quot;=&gt;&quot;Porrez&quot;, &quot;github&quot;=&gt;&quot;BrechtPorrez&quot;, &quot;linkedin&quot;=&gt;&quot;brecht-porrez-a952a98&quot;, &quot;permalink&quot;=&gt;&quot;/author/brecht-porrez/&quot;, &quot;avatar&quot;=&gt;&quot;brecht-porrez.png&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;brecht.porrez@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Brecht is a Java Developer at Ordina with a passion for IoT and related technologies. He also has a special interest in writing clean and maintainable code.&quot;}</name><email>brecht.porrez@ordina.be</email></author><category term="Young Professional Programme" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit testing" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="TypeScript" /><category term="Kickstarter" /><category term="Young Professional Program" /><category term="Security" /><summary type="html">Introduction 65 young professionals started the Ordina Young Professional Programme this summer, on the 1st of August. JWorks counted 8 trainees: Mohammed, Jasper, Nicholas, Lennert, Duncan, Lore, Brecht and Imad. All looking for a challenge and a fresh start. Most of them just graduated, Brecht on the other hand already had other work experience. During the young professional programme, we were introduced to a wide range of technologies. Technologies that play an important role in IT. The courses were focused mainly on providing a very hands-on experience as to learn how the different technologies work in practice.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">VueJS London 2019</title><link href="https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019.html" rel="alternate" type="text/html" title="VueJS London 2019" /><published>2019-10-18T00:00:00+00:00</published><updated>2019-10-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/10/18/vuejs-london-2019.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#vuejs-london-2019-time-to-get-hyped-about-composition-api-and-vue-3&quot;&gt;VueJS London 2019: time to get hyped about Composition API and Vue 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#animations-any-vue-app-can-use-by-adam-jahr&quot;&gt;Animations any Vue app can use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scripting-in-style-whats-your-vue-by-maya-shavin&quot;&gt;Scripting in style, what’s your Vue?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#identifying-and-solving-performance-issues-in-vue-applications-by-filip-rakowski&quot;&gt;Identifying and solving performance issues in Vue applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scalable-data-visualisation-with-d3-and-vue-by-ramona-biscoveanu&quot;&gt;Scalable data visualisation with D3 and Vue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-new-router-to-guide-your-apps-by-eduardo-san-martin-morote&quot;&gt;A new router to guide your apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lightning-talks&quot;&gt;Lightning talks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vue3s-composition-api-explained-visually-by-gregg-pollack&quot;&gt;Vue3’s Composition API explained visually&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-new-composition-api-by-thorsten-luenborg&quot;&gt;The new Composition API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#live-coding-the-new-composition-api-by-jason-yu&quot;&gt;Live coding: the new Composition API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#evan-yous-keynote-launch-of-vue3-open-source-by-evan-you&quot;&gt;Evan You’s keynote: launch of Vue3 open-source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#workshop-hands-on-with-the-composition-api-by-vue-vixens&quot;&gt;Workshop: hands-on with the Composition API, by Vue Vixens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vuejs-london-2019-time-to-get-hyped-about-composition-api-and-vue-3&quot;&gt;VueJS London 2019: time to get hyped about Composition API and Vue 3&lt;/h2&gt;

&lt;p&gt;As it is a goal of me to focus more on Vue this year, I had the opportunity to travel to London to attend &lt;a href=&quot;https://vuejs.london&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueJS London 2019&lt;/a&gt;.
With a conference on the 4th of October and a workshop provided by &lt;a href=&quot;https://vuevixens.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueVixens&lt;/a&gt; on the 5th October, I was hoping to learn a lot about the future developments of Vue.
The conference and the workshop delivered on my expectations as we learned about accessibility, animations, data visualisations, performance, the new Composition API and much more.
We even had a conference call with Evan You where he announced that Vue 3 was going open source.
During the workshop, I had the opportunity to play around with the brand new Composition API.
In this blog post, I will highlight some key elements that I have learned during the conference and workshop.&lt;/p&gt;

&lt;h1 id=&quot;conference-day&quot;&gt;Conference day&lt;/h1&gt;

&lt;p&gt;With 8 talks, 1 keynote and 4 lightning talks, the conference day promised to be quite busy.
The conference was held at O2 Cineworld, which is not that far from the city center.
As a venue this was exquisite as the accommodation was top-notch, the visuals were beautiful, the talks were clearly audible and the food was great.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/venue.jpg&quot; class=&quot;image fit&quot; alt=&quot;The VueJS London venue&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Before noon, a total of 5 talks were planned with topics ranging from animations, styling, visualisations and performance to the future of the Vue router.&lt;/p&gt;

&lt;h2 id=&quot;animations-any-vue-app-can-use-by-adam-jahr&quot;&gt;Animations any Vue app can use, by &lt;a href=&quot;https://twitter.com/adamjahr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Adam Jahr&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In a scattered world, the attention of the user of our web applications is often lost quickly.
We really need to capture the user’s attention and make sure that they focus on what we want them to focus on.
For example in a web shop when the user is looking at the details of a product, we want to make sure he knows exactly where the buy button is.
To achieve this, we can divert his attention to this button by adding a small but effective animation.
We want to inspire a certain action that will keep the user on the happy path of our application, whether that is selling a product, successfully entering the details for a client registration or something other specific to our application.
With the help of the Vue directives &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter-active&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-enter-to&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave-active&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v-leave-to&lt;/code&gt; we have the tools to add the necessary CSS classes that define certain states such as the default state, the hovered state and others.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/animation-transitions.png&quot; class=&quot;image fit&quot; alt=&quot;Diagram showing the animation transition directives that are available in Vue&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.vuemastery.com/courses/animating-vue/why-animate&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Course on VueMastery&lt;/a&gt; and an introduction on &lt;a href=&quot;https://medium.com/vue-mastery/intro-to-vue-animations-df9594b48800&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueMastery’s Medium&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scripting-in-style-whats-your-vue-by-maya-shavin&quot;&gt;Scripting in style, what’s your Vue?, by &lt;a href=&quot;https://twitter.com/MayaShavin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maya Shavin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Currently CSS has a lot of scaling issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everything is put into a global namespace&lt;/li&gt;
  &lt;li&gt;There are implicit dependencies&lt;/li&gt;
  &lt;li&gt;A lot of dead code can exist and is not easily found&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the use of scoped CSS, we can already tackle a lot of these issues.
Vue not only provides us with the tools to add CSS styling next to our component definition but also CSS that is specific for a component.
This is with the help of the &lt;code class=&quot;highlighter-rouge&quot;&gt;scoped&lt;/code&gt; attribute that we can add to our styling:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* your CSS here */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But we still need to watch out as some other rules might be more specific from within another component that is not scoped.
We are also lacking certain functionalities such as scripting in our styles.
So is there a way to be able to script in our CSS while also solving certain issues currently present in CSS?&lt;/p&gt;

&lt;p&gt;With the use of &lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CSS modules&lt;/a&gt;, we can already alleviate several scaling issues as we get certain functionalities such as composition.
Sadly we can not solve all CSS scaling issues such as the fact we do not have an easy way for theming.
Also, scripting is still not possible.&lt;/p&gt;

&lt;p&gt;One method of solving the remaining problems is by using &lt;a href=&quot;https://www.styled-components.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Styled Components&lt;/a&gt; for which there exists a Vue plugin called &lt;a href=&quot;https://github.com/styled-components/vue-styled-components&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-styled-components&lt;/a&gt;.
The idea behind styled components is to utilise tagged template literals to write actual CSS in your JS.
We can thus write a styled &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tag that has a switch to set a primary and secondary state like this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue-styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btnProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyledButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btnProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
  background: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;palevioletred&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;
  color: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;palevioletred&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;
`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyledButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with CSS in JS we can script in our styles.
It also allows us to solve certain scaling issues since we now have typing, composition and more.&lt;/p&gt;

&lt;p&gt;But does this mean that we should use CSS in JS by default? 
Is there still a place for vanilla CSS?
CSS in JS is ideal if you need full control over component styling and when you want dynamic styling via props.
Using the scoped CSS that is available in Vue is a good option as you isolate the styling per component.
If you reuse components between projects, you have all relevant styling close to your reused component.
The conclusion is that you should use the right tool for the right job.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://slides.com/mayashavin/styling-with-vue/fullscreen#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and &lt;a href=&quot;https://codesandbox.io/embed/style-with-vue-fzzci&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;code demos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;identifying-and-solving-performance-issues-in-vue-applications-by-filip-rakowski&quot;&gt;Identifying and solving performance issues in Vue applications, by &lt;a href=&quot;https://twitter.com/filrakowski&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Filip Rakowski&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;“Every millisecond counts”, a statement that holds a lot of truth as &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/why-performance-matters&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;studies have shown&lt;/a&gt;.
To make sure that every millisecond is won and that you get the most out of your application, there are certain actions we can take on our source code to directly improve the speed of our application.&lt;/p&gt;

&lt;h3 id=&quot;lazy-loading-routes&quot;&gt;Lazy loading routes&lt;/h3&gt;

&lt;p&gt;By default most people will define their routes as such:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/bar.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By changing our import statements for our components we can directly impact the bundle size.
When we used to have this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can now rewrite it to this:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pages/foo.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is that our bundle size can get a lot smaller as components are only loaded when they are actually requested for that specific page.
With the help of &lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Webpack Bundle Analyzer&lt;/a&gt;, we can visualise this.&lt;/p&gt;

&lt;h3 id=&quot;using-tree-shakeable-packages&quot;&gt;Using tree-shakeable packages&lt;/h3&gt;

&lt;p&gt;A package that is often used in web applications is &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt;.
By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt; is not tree-shakeable but with the introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash-es&lt;/code&gt;, we now have access to all functions of &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt; that are tree-shakeable.
So instead of:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lodash&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now use:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lodash-es&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the help of &lt;a href=&quot;https://bundlephobia.com/result?p=lodash-es&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bundlephobia.com&lt;/a&gt;, we can see the individual sizes of all the lodash packages.
If we do not use functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;differenceBy&lt;/code&gt; from lodash, we can shave of a couple of kilobytes from our bundle size.&lt;/p&gt;

&lt;h3 id=&quot;activate-dynamic-imports-of-child-components&quot;&gt;Activate dynamic imports of child components&lt;/h3&gt;

&lt;p&gt;When a page is loaded, not all child components are required to already be loaded in.
The reason for this is that not all child components are directly visible.
For example when they are somewhere on the bottom of the page or they are off screen.
But another big reason is that they are used to render a modal.
As not all modals are always needed from the moment the page is opened, we can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; to that component.
For example in a product page where we can have a modal with more product details, we might have something like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ProductDetails&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; that holds a boolean to tell if the model should be visible, we delay the actual execution of all the &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductDetails&lt;/code&gt; code, thus achieving a performance increase:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ProductDetails&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isProductDetailsOpened&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason behind this, is that Vue doesn’t render elements contained in a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; until the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; returns true.&lt;/p&gt;

&lt;h3 id=&quot;prefetching&quot;&gt;Prefetching&lt;/h3&gt;

&lt;p&gt;Prefetching is a technique in which we use the idle time of our web page to load other assets.
This is a much used technique in for example an infinite scroll where we can already preload one of the next elements that would be shown when the user scrolls down.
Another example is to prefetch the components that we are lazy loading for our pages.
Thanks to Webpack we can &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;add a specific comment&lt;/a&gt; to accommodate this behaviour:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* webpackPrefetch:true */&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;product.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-performance-wins&quot;&gt;More performance wins&lt;/h3&gt;

&lt;p&gt;In order to further improve the performance of our web application, we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lazy load images&lt;/li&gt;
  &lt;li&gt;Use functional components for lists&lt;/li&gt;
  &lt;li&gt;Optimise initial state when using ServerSide Rendering&lt;/li&gt;
  &lt;li&gt;Cache static assets in a Service Worker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With some basic changes, we can already achieve a lot of performance improvement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;More information can be found on his &lt;a href=&quot;https://medium.com/@frakowski&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scalable-data-visualisation-with-d3-and-vue-by-ramona-biscoveanu&quot;&gt;Scalable data visualisation with D3 and Vue, by &lt;a href=&quot;https://twitter.com/CodesOfRa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ramona Biscoveanu&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When wanting to do data visualistions with D3 in a Vue web application, it often happens that Vue is only used as a shelf for the actual D3 code.
This is inherently a bad idea as the D3 code gets complex, not maintainable and it is also not reactive.
We can use the functionalities of Vue to generate part of our D3 code.
Since a lot of D3 can be rendered declaratively in HTML code, we can use Vue to bind all the data to the necessary attributes.
In our component, we could have something like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(d, index) in data&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;generateLine(d.values, index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d.country&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:stroke=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colours(index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;:stroke-width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selected(index)&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;
			&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mouseover=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onSelected(d, index)&quot;&lt;/span&gt;
			&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onClick(d)&quot;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; we can retrieve the correct data from within our Vue component.
In our &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; lifecycle hook, we can do all necessary D3 code to use all of our generated SVGs to create the diagrams that we want.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/CodesOfRa/d3-vue-graph/blob/master/src/components/Tree.vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Code example on Ramona’s GitHub&lt;/a&gt; with the &lt;a href=&quot;https://outofmylens-flowers.netlify.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;live application available online&lt;/a&gt; and the &lt;a href=&quot;https://slides.com/codesofra/data-visualization-in-2#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides of her talk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-new-router-to-guide-your-apps-by-eduardo-san-martin-morote&quot;&gt;A new router to guide your apps, by &lt;a href=&quot;https://twitter.com/posva&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eduardo San Martin Morote&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;There are three kinds of routers possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Imperative: we define the routes and add a callback function to determine how the page should be rendered. An example of this is &lt;a href=&quot;https://github.com/visionmedia/page.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;page.js&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Declarative: routes are defined on a component level by using for example a specific attribute. The &lt;a href=&quot;https://reach.tech/router/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reach Router&lt;/a&gt; is an example of this.&lt;/li&gt;
  &lt;li&gt;Configuration based: routes are defined separately with the components that they are linked to. The Vue router is a configuration based router.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of this configuration based nature of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-router&lt;/code&gt;, we are missing the option to add or remove routes and we also lack declarative routing.&lt;/p&gt;

&lt;p&gt;The current implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-router&lt;/code&gt; has a lot of functionalities built in that are specific to managing the history while we actually want to separate this.
In an ideal situation, we want the router to be the connection between the components and the code that manages the browser history.
When a user navigates to a new page, the router calls the history code to add the new page to the history.
When the user navigates back, the router retrieves the previous page from the history.
In the current implementation, this is all not clearly separated.&lt;/p&gt;

&lt;p&gt;So what are the next steps for the Vue router?
One major improvement would be the use of TypeScript as this would help developers on using and extending the Vue router in the right way.
This is in the same spirit as Vue 3 that is also written fully in TypeScript.&lt;/p&gt;

&lt;p&gt;Another improvement lies in the use of a ranking system for the routes.
Currently routes are checked for a match based on the order in which they are defined.
This means that a catch-all route such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(.*)&lt;/code&gt; in the beginning of the routes definition would render the other routes useless.&lt;/p&gt;

&lt;p&gt;A major addition to Vue router would be the ability to have dynamic routing.
Components could thus add or remove routes.
A final addition would be the full use of the Composition API so we have functionalities such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useLink&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;useLocation&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onBeforeRouteLeave&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onBeforeRouteUpdate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The focus of the new router will be mainly on supporting Vue 3 while smaller improvements will be done for Vue 2.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://slides.com/posva/a-new-router-to-guide-your-apps&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h2&gt;

&lt;h3 id=&quot;how-to-get-your-product-owners-to-write-your-functional-tests-by-callum-silcock&quot;&gt;How to get your product owners to write your functional tests, by &lt;a href=&quot;https://twitter.com/csiilk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Callum Silcock&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the help of the &lt;a href=&quot;https://github.com/TheBrainFamily/cypress-cucumber-preprocessor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cypress Cucumber preprocessor&lt;/a&gt; Callum was able to demonstrate how code like this could be processed by Cypress:&lt;/p&gt;

&lt;div class=&quot;language-cucumber highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Logging In

  Tests the user can successfully login and log out

  &lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Logging In Sucessfully
    &lt;span class=&quot;nf&quot;&gt;Given &lt;/span&gt;I am on the &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; page
    &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;I input my &lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt; as &lt;span class=&quot;s&quot;&gt;&quot;contact@csi.lk&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;I input my &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; as &lt;span class=&quot;s&quot;&gt;&quot;hunter2&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;I click the &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt; button
    &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;I should be on the &lt;span class=&quot;s&quot;&gt;&quot;dashboard&quot;&lt;/span&gt; page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea behind this, is that functional tests can be written in a very clear and understandable format so that even product owners can help with writing them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/csilk/then-with-cypress&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and an &lt;a href=&quot;https://github.com/csi-lk/cypress-gwt-example&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;example implementation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;awesome-js-is-awesome-by-guillaume-chau&quot;&gt;Awesome JS is Awesome, by &lt;a href=&quot;https://twitter.com/Akryum&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Guillaume Chau&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;awesome-vue&lt;/a&gt; repository we can already find a curated list of interesting resources for when you want to develop an application with Vue.
Guillaume decided to create a specific website that has an overview of all good packages for your project, whether it is a Vue project or a Nuxt project or others.
The website will keep on growing with new project types and packages added regularly so that it could grown into a knowledge base on what good packages would be for your future projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The website is available at &lt;a href=&quot;https://awesomejs.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;awesomejs.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;focus-management-with-vue-by-maria-lamardo&quot;&gt;Focus Management with Vue, by &lt;a href=&quot;https://twitter.com/MariaLamardo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maria Lamardo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Maria is very enthousiastic about accessibility on the web.
One of the quirks she has found is that when a page is loaded or something dynamic happens on the page like opening a modal, the focus is incorrect.
Basically this means that people who rely on a screen reader, often have issues with navigating when for example a modal is opened.
By adding a basic directive to your component that uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted&lt;/code&gt; &lt;a href=&quot;https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;hook&lt;/a&gt;, you can alleviate this issue:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... other component code&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;directives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;She also talked about how you can have hidden HTML elements to help users with a screen reader to have feedback on what just happened when they for example submitted a form.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Maria’s &lt;a href=&quot;https://github.com/mlama007/FocusManagement&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;repository for her talk&lt;/a&gt; and for working examples&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;application-shortcuts-with-a-renderless-event-component-by-rolf-haug&quot;&gt;Application Shortcuts with a Renderless Event Component, by &lt;a href=&quot;https://twitter.com/rahaug&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rolf Haug&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;$listeners&lt;/code&gt; in a Vue component, Rolf managed to create a renderless event component that handles everything you need to act on global events.
The sourcecode can be found on his &lt;a href=&quot;https://github.com/vueschool/application-shortcuts/blob/master/src/components/EventListenerFinal.vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One example use could be this in the template of a video player component:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;event-listener&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keydown.space=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleVideo&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now whenever the user presses on the spacebar of his keyboard, the handler &lt;code class=&quot;highlighter-rouge&quot;&gt;toggleVideo&lt;/code&gt; will be called to toggle the video from/to playing/pausing.&lt;/p&gt;

&lt;p&gt;The same can be achieved by using the &lt;a href=&quot;https://www.npmjs.com/package/vue-global-events&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-global-events package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rolf’s &lt;a href=&quot;https://github.com/vueschool/application-shortcuts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;repository for his talk&lt;/a&gt; and the &lt;a href=&quot;https://www.npmjs.com/package/vue-global-events&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-global-events package&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vue3s-composition-api-explained-visually-by-gregg-pollack&quot;&gt;Vue3’s Composition API explained visually, by &lt;a href=&quot;https://twitter.com/greggpollack&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gregg Pollack&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With the upcoming arrival of the Composition API, a visual explanation of the possible changes to your code was very useful.
The Composition API allows you to focus more on the features instead of only the components.
If we would colour code every feature in our code, a component in the options-based API with a lot of features would end up having elements of the same feature all over the component.
For example our sorting feature would be red, our searching feature would be purple and so on.
This is because the current options-based API forces you to group everything into elements such as &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/options-api-vs-composition-api.png&quot; class=&quot;image fit&quot; alt=&quot;Comparison of options-based API and Composition API with each feature colour coded&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With the Composition API we would introduce the use of a &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; method for each component.
In this &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;, we declare the scope that will be available to our template.
While in the options-based API we defined our scope in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; properties and they are bound to the object instance, we now can group all this scope into &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;.
With the Composition API we have the freedom to group our features in the &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; method and even extract them into separate functions so they can be reused in other components.
This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; returns the scope that can be used in our template.
Parts of that scope could be retrieved from separate functions.
Each colour in the image above can thus be potentially extracted into separate functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useSorting&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;useSearch&lt;/code&gt; and so on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.vuemastery.com/pdf/Vue-3-Cheat-Sheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue 3 Composition API cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-new-composition-api-by-thorsten-luenborg&quot;&gt;The new Composition API, by &lt;a href=&quot;https://twitter.com/linus_borg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thorsten Luenborg&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;After we had the visual explanation of what the Composition API encompasses, it was time to dive into more details and see some example code as can be found on &lt;a href=&quot;https://github.com/LinusBorg/composition-api-demos&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thorsten’s GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While in the past your components would become a clutter of all your features together spread out over your component, the Composition API allows them to be grouped together.
For example when you have a component that supports multiple features such as sorting and pagination, these features would be spread out over the component.
The data necessary for the sorting and pagination would be put into &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;.
The functions that actually implement these functionalities would be scattered over &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;.
Thanks to the portable reactivity of the Composition API, we can simplify our components that use for example pagination to:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./use-pagination&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// other features defined here&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// other scopes returned here&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;usePagination&lt;/code&gt; is a function that encapsulates all functionality specific for pagination:&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usePagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amountOfPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;perPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// other functionalities here&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toRefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;amountOfPages&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our component we will then be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;amountOfPages&lt;/code&gt; and such, just like when we would have defined them in &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;.
Currently Composition API is already available in Vue 2 thanks to the &lt;a href=&quot;https://github.com/vuejs/composition-api&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@vue/composition-api package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/LinusBorg/talks/raw/master/2019-10-04%20Vuejs%20London/New%20composition%20API%20%20-%20Vue.js%20London%202019-10-04.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt; and a full explanation can be found in the &lt;a href=&quot;https://vue-composition-api-rfc.netlify.com/#summary&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Composition API RFC&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;live-coding-the-new-composition-api-by-jason-yu&quot;&gt;Live coding: the new Composition API, by &lt;a href=&quot;https://twitter.com/ycmjason&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jason Yu&lt;/a&gt;&lt;/h2&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/keyboard-keyboard.jpg&quot; class=&quot;image right&quot; alt=&quot;The KeyboardKeyboard app Jason was building&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The best way to get to know the new Composition API is seeing it live in action.
So Jason took the challenge upon himself to live code something called a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyboardKeyboard&lt;/code&gt;.
As a musician and a programmer, he is very enthusiastic about keyboards.
So he decided to program his computer keyboard to sound like a piano keyboard.
With the use of Web Audio API he managed to program a web app in Vue with Composition API in just over 30 minutes.
He mainly used Composition API to encapsulate certain key features such as &lt;code class=&quot;highlighter-rouge&quot;&gt;useMusicNote&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;useKeyDown&lt;/code&gt;. 
It was a fun live coding session as he was able to really captive the audience’s attention.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/ycmjason-talks/2019-10-04-vuejs-london-conference-2019/tree/completed&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The source code is on his GitHub&lt;/a&gt; and a screen capture can be found on &lt;a href=&quot;https://www.youtube.com/watch?v=_K5zbgJ_z9w&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;evan-yous-keynote-launch-of-vue3-open-source-by-evan-you&quot;&gt;Evan You’s keynote: launch of Vue3 open-source, by &lt;a href=&quot;https://twitter.com/youyuxi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Evan You&lt;/a&gt;&lt;/h2&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/evan-you-during-keynote.jpg&quot; class=&quot;image right&quot; alt=&quot;Evan You during his keynote&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We ended the conference with a keynote from Evan You, the creator of Vue.
There was already a lot of talk about Vue 3 in the last couple of months and in this keynote he had a great preview of what the power of Vue 3 will look like.
For Vue 3, he and his core team have been very active to rewrite the whole project.
By rewriting the whole runtime and compiler from scratch, they were able to add native TypeScript support everywhere.
They were also able to make the compiler completely modular.
With some clever tricks during compilation time such as hoisting static elements in the DOM tree, the runtime can be optimised to only take the dynamic elements into account.
A major announcement about the upcoming Vue 3 is the fact that it is fully tree shakeable.&lt;/p&gt;

&lt;p&gt;Tree shakeability in combination with all the other upcoming features will result in a major performance improvement as Evan briefly demonstrated.
The current speed improvement is already sevenfold.
With some features still in development, Evan expects an even bigger improvement in speed before the actual release of Vue 3.&lt;/p&gt;

&lt;p&gt;As a special treat, Evan had set the visibility of the repository from private to public.
From the 4th of October onwards, Vue 3 is fully open source.&lt;/p&gt;

&lt;h1 id=&quot;workshop-hands-on-with-the-composition-api-by-vue-vixens&quot;&gt;Workshop: hands-on with the Composition API, by &lt;a href=&quot;https://twitter.com/VueVixens&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens&lt;/a&gt;&lt;/h1&gt;

&lt;p class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/vuevixens-logo.png&quot; class=&quot;image right&quot; alt=&quot;The Vue Vixens logo&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With almost half of the conference day spent on talks about the new Composition API, the opportunity to actually incorporate it into a workshop was taken by the Vue Vixens.
Vue Vixens are foxy people who identify as women and who want to learn Vue.js to make websites and mobile apps.
The workshop was held at CCT Venues, not that far from the O2 Cineworld.&lt;/p&gt;

&lt;p&gt;The first goal of the workshop was to implement our own version of a Spotify client in the browser, built with the Composition API in Vue.
Sadly Spotify has limited the use of their SDK to only premium users of Spotify.
So after having gotten a good explanation about what the Composition API is made of along with some interesting discussions on how to use it, we changed it up a bit.&lt;/p&gt;

&lt;p&gt;As Vue Vixens also organises other workshops, we took one of the solutions for one of those workshops.
We rewrote that solution from an implementation in the options-based API to the Composition API.
Since almost everybody present had been at the conference the day before and the Composition API was well explained, we were able to finish up quickly.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vuejs-london-2019/vuevixens-workshop.jpg&quot; class=&quot;image fit&quot; alt=&quot;The people who attended the Vue Vixens workshop&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to the organisers &lt;a href=&quot;https://twitter.com/marialamardo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maria Lamardo&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kristinruben&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kristin Ruben&lt;/a&gt; for the great workshop!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://vuevixens.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens website&lt;/a&gt; and the &lt;a href=&quot;https://workshops.vuevixens.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Vixens workshops&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;London was a great city to visit and with an excellent organised conference, this was a pleasant experience.
With the future release of Vue 3, it was no surprise that most of the conference was focused on Vue 3.
I’ve learned a lot and with the help of the workshop given by the Vue Vixens, I am convinced that Vue 3 has a bright future ahead.
I look forward to putting this new knowledge into practice.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Elke&quot;, &quot;last_name&quot;=&gt;&quot;Heymans&quot;, &quot;github&quot;=&gt;&quot;ElkeBxl&quot;, &quot;linkedin&quot;=&gt;&quot;elkeheymans&quot;, &quot;permalink&quot;=&gt;&quot;/author/elke-heymans/&quot;, &quot;avatar&quot;=&gt;&quot;elke-heymans.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;elke.heymans@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Elke is a Frontend Developer with a focus on Vue, Angular and is very interested in other frontend technologies. In her spare time you can find her taking photographs at events, training for half marathons or enjoying music by collecting records and attending concerts.&quot;}</name><email>elke.heymans@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="Vue.js" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/vuejs-london-2019/vuejs-london.png" /></entry><entry><title type="html">Monitoring serverless apps on AWS</title><link href="https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS.html" rel="alternate" type="text/html" title="Monitoring serverless apps on AWS" /><published>2019-10-15T00:00:00+00:00</published><updated>2019-10-15T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/10/15/Monitoring-serverless-apps-on-AWS.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about&quot;&gt;What about&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges-of-serverless-applications&quot;&gt;Challenges of Serverless applications&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-1-finding-the-error-in-a-distributed-serverless-landscape&quot;&gt;Challenge 1: Finding the error in a distributed serverless landscape&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-1-structured-logging&quot;&gt;Solution 1: Structured logging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-2-finding-performance-bottlenecks&quot;&gt;Challenge 2: Finding performance bottlenecks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-2-distributed-tracing-with-aws-xray&quot;&gt;Solution 2: Distributed tracing with Xray&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-3-testing-whether-our-application-still-behaves-as-expected&quot;&gt;Challenge 3: Testing whether our application still behaves as expected&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-3a-smoke-testing&quot;&gt;Solution 3a: Smoke Testing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-3b-load-testing&quot;&gt;Solution 3b: Load Testing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#side-note-on-cloudwatch-dashboards&quot;&gt;Side note on CloudWatch Dashboards&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#third-party-tools&quot;&gt;Third party tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-about&quot;&gt;What about?&lt;/h1&gt;
&lt;p&gt;Serverless is a great technology that comes with the advantage of being scalable, durable and high available.&lt;br /&gt;
It allows you to decouple functionality into multiple serverless Functions.&lt;/p&gt;

&lt;p&gt;But with new technologies come new challenges.
Having an application that exist of a lot of decoupled lambda functions means that your serverless landscape will be heavily distributed.&lt;br /&gt;
I mean that there is a lot of stuff happening in a lot of different places.&lt;/p&gt;

&lt;p&gt;We still want to be able to monitor our landscape though.&lt;br /&gt;
This means that a distributed serverless landscape has to be observable.&lt;br /&gt;
Let’s see some of the best practices on how to make your serverless landscape observable.&lt;/p&gt;

&lt;h1 id=&quot;challenges-of-serverless-applications&quot;&gt;Challenges of Serverless applications&lt;/h1&gt;
&lt;p&gt;What does a typical serverless application look like?&lt;/p&gt;

&lt;p&gt;Let’s look at an app that was build for a conference. 
Speakers can create a session that they want to speak about. 
People can also retrieve all sessions that have already been submitted.&lt;br /&gt;
When a new session is created a slack notification is sent out.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We can identify certain milestones that indicate that a request has passed this milestone.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture-with-milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The serverless architecture above is actually quite small.
I’ve seen architectures containing tens of Lambda Functions and other AWS services.&lt;/p&gt;

&lt;p&gt;Some of the challenges that come with a serverless architecture are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It might crash somewhere in my distributed landscape.
If it does, where did it go wrong?&lt;/li&gt;
  &lt;li&gt;Which part of my flow is performing poorly. 
Let’s find the performance bottlenecks.&lt;/li&gt;
  &lt;li&gt;I cannot run all cloud services on my computer.
So I can’t run my system locally anymore.
How do I test whether my system is behaving as it is supposed to?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next part we’ll focus on solving these challenges.&lt;/p&gt;

&lt;h1 id=&quot;challenge-1-finding-the-error-in-a-distributed-serverless-landscape&quot;&gt;Challenge 1: Finding the error in a distributed serverless landscape&lt;/h1&gt;

&lt;p&gt;When things go wrong we want to be notified.
We can do this by configuring a CloudWatch alarm that will go of when an error appears.&lt;/p&gt;

&lt;p&gt;Below we see that Cloudwatch is ‘watching’ our cloud for errors.
When an error event appears an alarm will go of and message will be pushed to a topic.
We can then listen on this topic using a Lambda function.
This Lambda function will send out the notification to our slack channel.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/cloudwatch-alarm-notification.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;AWS provides a Lambda function that can send out these alerts that are triggered by an alarm.&lt;br /&gt;
If you look in the Lambda blueprints via the AWS Lambda Console you’ll find the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudwatch-alarm-to-slack-python&lt;/code&gt; Lambda function that you can use.&lt;/p&gt;

&lt;h2 id=&quot;digging-into-the-logs&quot;&gt;Digging into the logs&lt;/h2&gt;
&lt;p&gt;What do we do when stuff goes south?&lt;br /&gt;
We check the logs!&lt;/p&gt;

&lt;p&gt;Right, logging tells us the story of what happened in our application.
The logs contain information about this story.&lt;br /&gt;
Only now the logs are not coming from one place. 
The story is told in multiple Lambda functions.&lt;/p&gt;

&lt;p&gt;On top of that the logging might tell multiple stories at once.
Multiple execution environments of the same Lambda function can run at the same time.
This is that scalability of the cloud.
Lambda functions can run concurrently.&lt;/p&gt;

&lt;p&gt;We need two things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We need to correlate the logs coming from different places.&lt;/li&gt;
  &lt;li&gt;We need to get the valuable information out of our logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution-1-structured-logging&quot;&gt;Solution 1: structured logging&lt;/h2&gt;
&lt;p&gt;Structured logging to the rescue!&lt;/p&gt;

&lt;p&gt;Below you see a normal log versus a structured log.&lt;/p&gt;

&lt;p&gt;Normal plain text log:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/normal-log.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Structured log:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/structured-log.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Yes, the structured log is a lot more bloated.
But it is also a lot more machine readable and contains much more information.&lt;/p&gt;

&lt;p&gt;You recognize the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; format.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It contains contextual information like &lt;code class=&quot;highlighter-rouge&quot;&gt;functionName&lt;/code&gt; which is the function that created the log and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSRequestId&lt;/code&gt; which is the identifier for the invocation of the lambda function.&lt;/li&gt;
  &lt;li&gt;We see the &lt;code class=&quot;highlighter-rouge&quot;&gt;milestone&lt;/code&gt; key which refers to a certain milestone that the request passed while processing.&lt;/li&gt;
  &lt;li&gt;We still recognize the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The logs contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;traceId&lt;/code&gt; which we can use to correlate logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS offers us a service to get insights in our logs, &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt;. (What’s in a name right?)&lt;/p&gt;

&lt;p&gt;Since we used structured logging CloudWatch will pick up all &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; fields from our logs automatically.&lt;/p&gt;

&lt;p&gt;Now we can use these logs to query the milestones that a request passed.
We can correlate these milestones since we have the traceId correlating logs over multiple functions.
Our logs are generated by multiple functions.
&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt; allows you to query over multiple logGroups related to these functions.&lt;/p&gt;

&lt;p&gt;Suppose that something went wrong for session with sessionId: &lt;code class=&quot;highlighter-rouge&quot;&gt;a2db023e-6565-4a5c-b7dc-b53a420898e7&lt;/code&gt;.&lt;br /&gt;
We now can lookup the traceId to track the concerning request in our landscape.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields traceId
| filter &lt;span class=&quot;nv&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;865ccaad-ced0-4de5-aec3-b3692b2e06a0&quot;&lt;/span&gt;
| limit 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/traceId-by-sessionId.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Then we can use this traceId to find the milestones that the request has already passed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields milestone, functionName, timestamp
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt; and ispresent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;milestone&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;timestamp asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We see that we never got the milestone &lt;code class=&quot;highlighter-rouge&quot;&gt;SAVED_IN_DATABASE&lt;/code&gt;.
So it went wrong somewhere in the &lt;code class=&quot;highlighter-rouge&quot;&gt;conference-save-session-dynamodb-lambda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can checkout the logs of this faulty execution using the &lt;code class=&quot;highlighter-rouge&quot;&gt;traceId&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields @message
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt; and &lt;span class=&quot;nv&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conference-save-session-dynamodb-lambda&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or we could check for an exception that occurred.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields exception, traceId, functionName
| filter &lt;span class=&quot;nv&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bf769e94-4d48-4994-8c04-ebd00b51ecbd&quot;&lt;/span&gt;
| limit 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both will lead us to the exception.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/exception-found-by-looking-for-exception.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The outcome of this queries can be visualized and added to a &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Dashboard&lt;/code&gt;.
More on that later.&lt;/p&gt;

&lt;p&gt;Structured logging helped us querying our logs for information and finding the error in our flow.&lt;br /&gt;
Challenge 1 completed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;challenge-2-finding-performance-bottlenecks&quot;&gt;Challenge 2: Finding performance bottlenecks&lt;/h1&gt;
&lt;p&gt;I wrote a &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; query that allows me to check how long it took for a request to pass through the whole landscape.
That means from the moment the creation request arrived till the moment we send out a slack notification for it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fields @timestamp, @message
| filter  &lt;span class=&quot;nv&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CREATE_REQUEST_RECEIVED&quot;&lt;/span&gt; or &lt;span class=&quot;nv&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SLACK_NOTIFICATION_NEW_SESSION_SENT&quot;&lt;/span&gt;
| stats &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;latest&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@timestamp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - earliest&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@timestamp&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;/1000 as LeadTimeInSeconds by traceId
| filter LeadTimeInSeconds!&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
| &lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;LeadTimeInSeconds desc
| limit 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/slack-notification-lead-time.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We see that even when the system is warm, it takes us up to 10 seconds to send out a slack notification.
We need to dig into the performance of our lambda functions using &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Xray&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-distributed-tracing-with-aws-xray&quot;&gt;Solution 2: distributed tracing with AWS Xray&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Xray helps us understand the behavior of our system and thus allows us to analyze the performance of specific parts.
It does this by visualizing the flow and dividing the flow into traces and segments.
A trace is actually build up from multiple segments.&lt;/p&gt;

&lt;p&gt;It does this by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sampling your requests. 
By default Xray will trace 5% of your requests.&lt;/li&gt;
  &lt;li&gt;Tracing calls made by ths AWS SDK.
This happens automatically when you use Xray as a dependency for your project.&lt;/li&gt;
  &lt;li&gt;Creating custom segments.
You can create your own segments as you see below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Subsegment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AWSXRay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginSubsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sessions.saveSessionDynamoDB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;storeInDatabase&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DynamoDB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;company&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ordina&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mockingIssues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDynamoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDynamoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;AWSXRay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endSubsegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example of the Xray service map.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-service-map.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Xray doesn’t trace async requests (yet).
That means that publishing on an &lt;code class=&quot;highlighter-rouge&quot;&gt;SNS&lt;/code&gt; topic or going via a &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDB Stream&lt;/code&gt; is not part of the full trace but will show up as a new client in the service map.
Recently tracing over &lt;code class=&quot;highlighter-rouge&quot;&gt;SQS&lt;/code&gt; was added.&lt;/p&gt;

&lt;p&gt;When we click the lambda service we can see the response distribution.
This visualizes how quickly the lambda function responded.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-response-distribution.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Something is definitely wrong here since even the quickest executions take more than 3 seconds.
We can dig deeper by clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;view traces&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-overview-traces.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Digging even deeper into one of these traces we can see how long every segment of this trace took.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/xray-segments-of-trace.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Below we see that first some data was saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;caching table&lt;/code&gt;.
This happened blazingly quick in 8.0 ms.&lt;/p&gt;

&lt;p&gt;We see however that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sessions.saveSessionDynamoDB&lt;/code&gt; segment took over 3.0 seconds.
Of these 3 seconds, only 8 ms was spent actually saving the request.
We found our performance bottleneck.
Something is waiting around in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sessions.saveSessionDynamoDB&lt;/code&gt; segment.
In this case it was me introducing an artificial &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hooray, we found the performance bottleneck.&lt;br /&gt;
Challenge 2 completed.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;challenge-3-testing-whether-our-application-still-behaves-as-expected&quot;&gt;Challenge 3: Testing whether our application still behaves as expected&lt;/h1&gt;
&lt;p&gt;We can’t run our complete cloud infrastructure on our local machine.&lt;br /&gt;
So when we make changes and redeploy, we should test if our system is still behaving as it should.&lt;/p&gt;

&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Running smoke tests to detect hazards.&lt;/li&gt;
  &lt;li&gt;Running load tests to view if the system can still handle the load.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution-3a-smoke-testing&quot;&gt;Solution 3a: smoke testing&lt;/h2&gt;
&lt;p&gt;You should automate testing your system.
In the image below you see how I automate a test to check if a new session that is entered via the API is still forwarded.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/smoke-test.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I create this test using &lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit&lt;/code&gt; and mocked the http endpoints with &lt;a href=&quot;http://wiremock.org/&quot; target=&quot;_blank&quot;&gt;wiremock&lt;/a&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Wiremock&lt;/code&gt; is a great tool to mock http endpoints that I personally use a lot.&lt;br /&gt;
You can ask Wiremock to create certain endpoints and configure the response for it.&lt;br /&gt;
Below you see me creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;/sessions/forward&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$wiremock_url&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;request&quot;: {
        &quot;method&quot;: &quot;POST&quot;,
        &quot;url&quot;: &quot;/session/forward&quot;
    },
    &quot;response&quot;: {
        &quot;status&quot;: 200,
        &quot;body&quot;: &quot;I have received the session correctly&quot;,
         &quot;delayDistribution&quot;: {
                    &quot;type&quot;: &quot;lognormal&quot;,
                    &quot;median&quot;: 100,
                    &quot;sigma&quot;: 0.1
           },
        &quot;headers&quot;: {
            &quot;Content-Type&quot;: &quot;text/plain&quot;
        }
    }
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution-3b-load-testing&quot;&gt;Solution 3b: load testing&lt;/h2&gt;
&lt;p&gt;Yes, serverless scales automatically.
But things might not always behave as expected.
Listening on events of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Kinesis&lt;/code&gt; stream for example is only possible with one Lambda function per &lt;code class=&quot;highlighter-rouge&quot;&gt;Shard&lt;/code&gt;.
Thus limiting your throughput if you don’t watch out.&lt;/p&gt;

&lt;p&gt;To run my load test I use &lt;a href=&quot;https://artillery.io&quot; target=&quot;_blank&quot;&gt;artillery&lt;/a&gt;. 
Below you find the file that I use to configure this load test.
It ramps up the amount of request per second from 1 to 10 during 2 minutes.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://your-own-url.com'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;phases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;120&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;arrivalRate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rampTo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ramp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;warm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sessions.csv&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;firstName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lastName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;companyName&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;companyCity&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scenarios&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/sessions&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1570202335000&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;speaker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;companyName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;companyCity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;questionPhrase&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again I checked the lead time (time between incoming request and sending out the notification) and found these huge numbers.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/huge-lead-time.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Using structured logging and &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Logs Insights&lt;/code&gt; we could start looking deeper into the cause of this delay.
I already showed you how to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt;, so I’ll get straight to the cause here.&lt;/p&gt;

&lt;p&gt;The reason it takes so much time to send out all slack notifications is that the Lambda function which listens on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDB stream&lt;/code&gt; is sending out these requests one by one.
It takes about 1 second for every request.&lt;br /&gt;
But the requests come in much faster. This means that they are queueing up in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;conference-slack-notification-lambda&lt;/code&gt; to be send out.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/simpler-architecture-with-milestones.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We reached our goal.
We found another bottleneck in our system by running the load tests.
Challenge 3 completed!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/completed.png&quot; width=&quot;10%&quot; height=&quot;10%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;side-note-on-cloudwatch-dashboards&quot;&gt;Side note on CloudWatch Dashboards&lt;/h1&gt;
&lt;p&gt;Along the way we wrote a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; queries.&lt;br /&gt;
AWS allows you to bundle the results of these queries into dashboards via &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatch Dashboards&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below you see how I made a dashboard that visualizes the number of invocations and associated costs per lambda function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/billing-overview.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To find the total cost I used the following query:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter @type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;REPORT&quot;&lt;/span&gt;
| fields @memorySize/1000000 as MemorySetInMB, @billedDuration/1000&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;MemorySetInMB/1024 as BilledDurationInGBSeconds, @logStream
| stats &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as TotalBilledDurationInGBSeconds, &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 0.00001667 as TotalCostInDollar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get the stats per Lambda function I did:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter @type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REPORT&quot;&lt;/span&gt;
| fields @memorySize/1000000 as MemorySetInMB, @billedDuration/1000&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;MemorySetInMB/1024 as BilledDurationInGBSeconds
| stats 
count&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@billedDuration&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as NumberOfInvocations,
ceil&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@duration&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; as AverageExecutionTime,
max&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@duration&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; as MaxExecutionTime,
&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BilledDurationInGBSeconds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 0.00001667 as TotalCostInDollar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;third-party-tools&quot;&gt;Third party tools&lt;/h1&gt;
&lt;p&gt;We just saw the things that we can do to increase the observability of our serverless landscape.&lt;br /&gt;
To achieve this, you’ll have to do some custom work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;setup structured logging&lt;/li&gt;
  &lt;li&gt;pass on a traceId&lt;/li&gt;
  &lt;li&gt;create dashboards in CloudWatch&lt;/li&gt;
  &lt;li&gt;get familiar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs Insights&lt;/code&gt; query language&lt;/li&gt;
  &lt;li&gt;configure the right alarms in CloudWatch&lt;/li&gt;
  &lt;li&gt;setup the infrastructure to notify you when an error appears in your landscape&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are things that take time.&lt;br /&gt;
And time is money.&lt;/p&gt;

&lt;p&gt;You can also consider using this money to work with a third party tool.
This tool then allows you to monitor and troubleshoot your serverless applications.&lt;/p&gt;

&lt;p&gt;Personally I have used &lt;a href=&quot;https://lumigo.io&quot; target=&quot;_blank&quot;&gt;Lumigo&lt;/a&gt;  to achieve just that.&lt;br /&gt;
The things you have to customize, will be provided out of the box.&lt;/p&gt;

&lt;p&gt;You get a high-level dashboard to visualize the problems in your application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/lumigo-dashboard.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It will also automatically trace a request through your landscape by creating a transaction.
This is about the same as we did by forwarding traceIds.&lt;/p&gt;

&lt;p&gt;It comes with a handy visualization.
On the left you see the transaction while on the right it gives you the logs that correspond with the error that appeared.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-15-Monitoring-serverless-apps-on-AWS/lumigo-transaction-and-error.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This allows you to drill down to the source of the error quickly.&lt;br /&gt;
On top of that you can also create the necessary alerts to notify you in case things go south.&lt;/p&gt;

&lt;p&gt;These tools often have a &lt;a href=&quot;https://platform.lumigo.io/signup&quot; target=&quot;_blank&quot;&gt;free tier&lt;/a&gt;  that allows you to explore the product.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We improved the observability of our system by implementing structured logs and using appropriate testing and tooling.
By doing this, it becomes way easier to monitor your system and create visibility on its behavior.&lt;/p&gt;

&lt;p&gt;Remember that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you need structured logging to get the maximum out of your logs&lt;/li&gt;
  &lt;li&gt;CloudWatch Logs Insights allows you to query your logs and analyze them for errors&lt;/li&gt;
  &lt;li&gt;distributed tracing with AWS Xray helps you identifying bottlenecks in your system&lt;/li&gt;
  &lt;li&gt;you can create smoke tests and load tests to check if your system is behaving as it is supposed to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you want some of these things being done for you automatically, choose a third party monitoring tool to help you with it.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lumigo.io/blog/&quot; target=&quot;_blank&quot;&gt;https://lumigo.io/blog/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theburningmonk.com/2017/09/tips-and-tricks-for-logging-and-monitoring-aws-lambda-functions/&quot; target=&quot;_blank&quot;&gt;https://theburningmonk.com/2017/09/tips-and-tricks-for-logging-and-monitoring-aws-lambda-functions/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/&quot; target=&quot;_blank&quot;&gt;https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.loggly.com/blog/why-json-is-the-best-application-log-format-and-how-to-switch/&quot; target=&quot;_blank&quot;&gt;https://www.loggly.com/blog/why-json-is-the-best-application-log-format-and-how-to-switch/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackify.com/what-is-structured-logging-and-why-developers-need-it/&quot; target=&quot;_blank&quot;&gt;https://stackify.com/what-is-structured-logging-and-why-developers-need-it/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-nodejs-subsegments.html&quot; target=&quot;_blank&quot;&gt;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-nodejs-subsegments.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AmazonWebServices/monitoring-and-troubleshooting-in-a-serverless-world-srv303-reinvent-2017&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/AmazonWebServices/monitoring-and-troubleshooting-in-a-serverless-world-srv303-reinvent-2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lumigo.io&quot; target=&quot;_blank&quot;&gt;https://lumigo.io&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is passionate about cloud technology. He has major expertise in AWS and AWS serverless but he appreciates other clouds just as well. He wants to be ahead of change and thus he's also working with IoT and AI.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API Gateway" /><category term="CloudWatch" /><category term="Distributed Tracing" /><category term="Monitoring" /><summary type="html">Table of content What about Challenges of Serverless applications Challenge 1: Finding the error in a distributed serverless landscape Solution 1: Structured logging Challenge 2: Finding performance bottlenecks Solution 2: Distributed tracing with Xray Challenge 3: Testing whether our application still behaves as expected Solution 3a: Smoke Testing Solution 3b: Load Testing Side note on CloudWatch Dashboards Third party tools Conclusion Resources</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-10-15-Monitoring-serverless-apps-on-AWS/featured-image.png" /></entry><entry><title type="html">API first development with OpenAPI/Swagger</title><link href="https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger.html" rel="alternate" type="text/html" title="API first development with OpenAPI/Swagger" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/10/02/API-first-development-with-OpenAPI-or-Swagger.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;p&gt;1.&lt;a href=&quot;#api-first-development---why-how-and-what&quot;&gt;API first development - Why, how and what&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&quot;#api-design-an-example&quot;&gt;API design: an example&lt;/a&gt;&lt;br /&gt;
3.&lt;a href=&quot;#api-first-development-with-openapiswagger&quot;&gt;API first development with OpenAPI/Swagger&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&quot;#hosting-your-visualisations&quot;&gt;Hosting your visualisations&lt;/a&gt;&lt;br /&gt;
5.&lt;a href=&quot;#integrating-with-postman&quot;&gt;Integrating with Postman&lt;/a&gt;&lt;br /&gt;
6.&lt;a href=&quot;#openapi-generator-generate-api-compliant-code&quot;&gt;OpenAPI Generator: generate API compliant code&lt;/a&gt;&lt;br /&gt;
7.&lt;a href=&quot;#integrating-swaggeropenapi-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Integrating with your build process: maven or gradle plugin&lt;/a&gt;&lt;br /&gt;
8.&lt;a href=&quot;#serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Serverless on AWS: OpenAPI, API Gateway Lambda and SAM&lt;/a&gt;&lt;br /&gt;
9.&lt;a href=&quot;#code-first-with-springfox&quot;&gt;Springfox&lt;/a&gt; &lt;br /&gt;
10.&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;I’ll start of with a lecture about API first development and it’s advantages.(&lt;a href=&quot;#api-first-development---why-how-and-what&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;We will discover how to visualize our API specs. (&lt;a href=&quot;#api-first-development-with-openapiswagger&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Generate a postman collection from your OpenAPI definition. (&lt;a href=&quot;#integrating-with-postman&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Next I’ll show you how to generate code that is completely compliant with your API specs. (&lt;a href=&quot;#openapi-generator-generate-api-compliant-code&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;We then dive into how to integrate this in your build process by using maven or gradle plugins. (&lt;a href=&quot;#integrating-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;To finish it up I’ll demonstrate how to use it in a cloud native serverless product with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS SAM&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Lambda&lt;/code&gt;. (&lt;a href=&quot;#serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Jump to section&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Wrapping it up with a conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An API or Application Programming Interface is a way of exposing your company’s digital services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is the layer through which your services communicate with other services.&lt;/p&gt;

&lt;h1 id=&quot;api-first-development---why-how-and-what&quot;&gt;API first development - Why, how and what&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Great communication is key to great software engineering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That also goes for applications and services.
If your applications cannot communicate properly, you’ll never be able to expose the functionality that is key to a good product.&lt;/p&gt;

&lt;p&gt;We also see the following trends in software engineering:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Shift towards the cloud.&lt;/strong&gt;&lt;br /&gt;
Instead of big monolitic applications we are building lot’s of smaller (micro)services.
All communication between those services goes through the API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multiple frontend applications use the same backend.&lt;/strong&gt;&lt;br /&gt;
Often these applications are created by separate teams.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;An API carries business value.&lt;/strong&gt;  &lt;br /&gt;
There is real money in your API.&lt;br /&gt;
Defining APIs gives us the opportunity to expose our application’s functionality and create bridges between our provider and consumers.
The easier it is to integrate with your API, the higher the acceptance rate of consumers for your product will be.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of the cases above, there is value in good communication between services.
And that’s why you should practice API first development.
Put your communication first!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first priority in your API first development story is a clear API definition&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you practice API first development?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Design your API before implementing it.&lt;/em&gt;&lt;br /&gt;
This will allow teams to develop their applications separately because they both know and understand how communication between the services will happen.
The contract between services is set.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Understand that the API is the interface for your application.&lt;/em&gt;&lt;br /&gt;
It is the intersection where multiple services join hands to couple their functionality.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Visualize your API&lt;/em&gt;&lt;br /&gt;
An image says more then a thousand words. We’ll see how OpenAPI can help you with this.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;API first development allows teams to develop separately against a common interface, the API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we understand the importance of and value of API first design let’s see how the Swagger/OpenAPI spec can help you with that.&lt;/p&gt;

&lt;h2 id=&quot;top-down-vs-bottom-up&quot;&gt;Top-down vs bottom-up&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;API first development implies a top-down approach to build your API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically there are two approaches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Top-down aka Design First&lt;/li&gt;
  &lt;li&gt;Bottom-up aka Code First&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To quote &lt;code class=&quot;highlighter-rouge&quot;&gt;Swagger.io&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Design First: The plan is converted to a human and machine readable contract, such as a Swagger document, from which the code is built.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code First: Based on the business plan, API is directly coded, from which a human or machine readable document, such as a Swagger document can be generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog post I am using the Top-down Design First approach to facilitate API first development.
In the last paragraph of this blog I’ll briefly show an example of a Code First approach with &lt;code class=&quot;highlighter-rouge&quot;&gt;Springfox&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;api-design-an-example&quot;&gt;API design: an example&lt;/h1&gt;
&lt;p&gt;Suppose that we, &lt;strong&gt;&lt;em&gt;Ordina&lt;/em&gt;&lt;/strong&gt;, are hosting a conference where multiple technical and agile sessions will be given.
Users can check session information and register for sessions.
The backend service is accessed by a web application and two mobile apps.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/design.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The applications are created by different teams and they all embrace the &lt;strong&gt;API first&lt;/strong&gt; approach.&lt;/p&gt;

&lt;p&gt;They read this blog and realised that by agreeing on the common interface first, they could develop separately without impacting each other.
So hooray for API first development!&lt;/p&gt;

&lt;h1 id=&quot;api-first-development-with-openapiswagger&quot;&gt;API first development with OpenAPI/Swagger&lt;/h1&gt;
&lt;p&gt;Let’s continue with creating the backend application.&lt;/p&gt;

&lt;p&gt;The functional analysts and a couple of developers of the team are sitting together to agree on how the API should be defined.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A client should be able to fetch all sessions via the API&lt;/li&gt;
  &lt;li&gt;A client should be able to create a new session via the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a crucial part of the API first mindset.
We need to clearly define and communicate the API before starting to implement.
Designing an API is easier when you can visualise the API.
Let’s bring in the OpenAPI spec.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The OpenAPI specification allows you to define your API in a descriptive language (JSON or Yaml) and nicely visualise it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now use OAS to help us with our API First approach and design our API.
Note that by OAS I mean OpenAPI Specification.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OAS stands for OpenAPI Specification (formerly known as Swagger Specification)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are confused about the difference between OpenAPI and Swagger, check out &lt;a href=&quot;https://swagger.io/docs/specification/about/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Time to introduce you to &lt;a href=&quot;https://editor.swagger.io&quot; target=&quot;_blank&quot;&gt;https://editor.swagger.io&lt;/a&gt;, a portal to visualise…
Easy to use and offering all the functionality we need for this example.&lt;/p&gt;

&lt;p&gt;I’ll keep it simple, we will create the OAS for exposing the endpoint to let consumers fetch the sessions of the conference.&lt;br /&gt;
The OAS allows you to use JSON or Yaml to describe your API.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/swagger-layout.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Find the descriptive yaml via &lt;a href=&quot;https://gist.github.com/Nxtra/8ff9a7fd33186309e909df8f5a20cb28&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; gist.&lt;/p&gt;

&lt;p&gt;As you can see from the example, the OpenAPI specification is very readable.
Even if it’s new to you, you should be able to deduct what is written in the yaml.&lt;br /&gt;
You like looking at raw yaml?
Sure you don’t! 
There is a great visualisation to the right of it.
This clearly visualises what your API can do.
Clear visualisations mean clear communication.&lt;/p&gt;

&lt;p&gt;The API in the example is small.
When describing a whole real-world API, the file might become quite large.
But that’s no problem.
The OpenAPI spec allows you to split your definitions over multiple files which you can reference from within other files.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OpenAPI Takeaways: Easy descriptive language &amp;amp; great visualisations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You want to expose your beautiful visualisation to your clients.
They shouldn’t have to paste a &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml&lt;/code&gt; file in a window of their browser all the time.
How do we do that? 
Let’s find out next.&lt;/p&gt;

&lt;h1 id=&quot;hosting-your-visualisations&quot;&gt;Hosting your visualisations&lt;/h1&gt;
&lt;p&gt;The API specifications should be easily accessible for you and your clients.
The specification which you agreed upon, should be hosted somewhere for everyone to see.
Sometimes companies have there own in-house tools to visualise OAS.
If your company has no such tool there are plenty of other tools to visualize your API defined with OAS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Choose a visualisation solution that allows you to show a diff between versions of your API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A couple of hosted solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://swagger.io/tools/swaggerhub/&quot; target=&quot;_blank&quot;&gt;swaggerhub.com&lt;/a&gt;: Platform for API design and hosting by &lt;code class=&quot;highlighter-rouge&quot;&gt;SMARTBEAR&lt;/code&gt; itself&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://next.stoplight.io/&quot; target=&quot;_blank&quot;&gt;next.stoplight.io&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/next-stoplight.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://readme.com/&quot; target=&quot;_blank&quot;&gt;readme.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/readme-io.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apiary.io/&quot; target=&quot;_blank&quot;&gt;apiary&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redocly:  Redoc allows you to host via github pages. 
You can also host locally and integrate with Github pages for publishing your API.
Use this &lt;a href=&quot;https://github.com/Redocly/create-openapi-repo&quot; target=&quot;_blank&quot;&gt;Generator&lt;/a&gt; to create a repository for your API spec.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/redocly.gif&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;integrating-with-postman&quot;&gt;Integrating with Postman&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can create a working Postman collection from the OpenAPI spec&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don’t have to tell me how difficult it is to keep a Postman collection up to date with an evolving API!
More so, you have to make sure that every member of your team has the latest version of your API collection.&lt;/p&gt;

&lt;p&gt;Good news!
Postman can import a collection directly from the OAS.
In the Postman UI go to &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; and import from &lt;code class=&quot;highlighter-rouge&quot;&gt;raw text&lt;/code&gt;.
Just like I did in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/postman-oas.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see on the background of the image above, the request was correctly imported from the Swagger file.&lt;/p&gt;

&lt;h1 id=&quot;openapi-generator-generate-api-compliant-code&quot;&gt;OpenAPI Generator: generate API compliant code&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Generate code that is compliant with your API spec with OpenAPI Generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you’ve agreed upon the specification of your API it is time to start implementing it!
The specification is shared across the different teams and they can each start implementing separately.&lt;/p&gt;

&lt;p&gt;Time to code!&lt;br /&gt;
If I write code, I might make mistakes.
So let’s generate code that is completely compliant with the specs.&lt;/p&gt;

&lt;p&gt;OpenAPI Generator is a hugely popular &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot; target=&quot;_blank&quot;&gt;repository&lt;/a&gt; on github.
It allows you to generate code that is completely in line with your API specification.&lt;/p&gt;

&lt;p&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt; you can just install the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator-cli&lt;/code&gt; by installing it via brew.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openapi-generator-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also checkout the github project, build it and use that jar.&lt;/p&gt;

&lt;p&gt;You have the cli installed and created a directory which contains your api.yml file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/repo-dir.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s generate the code!&lt;/p&gt;

&lt;p&gt;You could generate a whole project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That would generate a whole Java project with a bunch of files.
Let’s start a little smaller.&lt;/p&gt;

&lt;p&gt;If you followed along clear the directory with&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For starters we only want to generate the model classes:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java &lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Models here refer to your DTO’s (Data Transfer Objects) or Resources.
These are different from your domain models or entity models.&lt;/p&gt;

&lt;p&gt;Let’s see what we did here:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate is the command that we give to the openapi-generator cli to instruct it to generate the code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The input file that contains our API specifications.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generator to use.
Here we specify that we want Java as output language.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are telling the generator to only generate the models for our API.&lt;/p&gt;

&lt;p&gt;If you want help or you forgot one of the options you can look &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/README.md#3---usage&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; or execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you execute this command you’ll see that there are a lot more options.
We could for example do the following&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openapi-generator generate &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; api.yml &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; java &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-Dmodels&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-DmodelTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--model-name-suffix&lt;/span&gt; Dto &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--model-package&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.ordina.conference_app.model&quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useBeanValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; models without creating test classes and puts them in a package &lt;code class=&quot;highlighter-rouge&quot;&gt;com.ordina.conference_app.model&lt;/code&gt;.
It suffixes them with &lt;code class=&quot;highlighter-rouge&quot;&gt;Dto&lt;/code&gt; since that’s what they are.
These classes are used to transfer data in and out of the application (&lt;code class=&quot;highlighter-rouge&quot;&gt;Dto&lt;/code&gt; aka Data Transfer Object).&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/generate-dtos-in-package-with-beanvalidation.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bean-validation&quot;&gt;Bean Validation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Keep your generated class files in sync with the requirements of the API specs by setting the useBeanValidation option to true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the last example I also specified a property &lt;code class=&quot;highlighter-rouge&quot;&gt;useBeanValidation=true&lt;/code&gt;.&lt;br /&gt;
Requirements specified in the API documentation like a required field are now translated to the code.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; on the  &lt;code class=&quot;highlighter-rouge&quot;&gt;speaker&lt;/code&gt; field in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionDto&lt;/code&gt; class is now annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt;.&lt;br /&gt;
You can now use a framework like &lt;code class=&quot;highlighter-rouge&quot;&gt;JSR 380&lt;/code&gt;, known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Bean Validation 2.0.&lt;/code&gt;, to validate input and output.&lt;br /&gt;
This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt; specific example, but the same will happen when you change to other languages by using eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;-g python&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/SessionDto.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now that we got acquainted with code generation I am going to show you how to include it in your build process.&lt;/p&gt;

&lt;h1 id=&quot;integrating-swaggeropenapi-with-your-build-process-maven-or-gradle-plugin&quot;&gt;Integrating Swagger/OpenAPI with your build process: maven or gradle plugin&lt;/h1&gt;
&lt;p&gt;There are maven and gradle plugins that support the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator&lt;/code&gt; project. 
(&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin&quot; target=&quot;_blank&quot;&gt;maven&lt;/a&gt; and &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin&quot; target=&quot;_blank&quot;&gt;gradle&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I started a maven project and included our &lt;code class=&quot;highlighter-rouge&quot;&gt;api.yml&lt;/code&gt; on the classpath.
Now it is a matter of configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi-generator-build-plugin&lt;/code&gt; in our maven &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want to configure it to behave the same way as the example above.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.openapitools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;openapi-generator-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;generate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;inputSpec&amp;gt;&lt;/span&gt;openapi.yaml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/inputSpec&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;output&amp;gt;&lt;/span&gt;${project.basedir}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generatorName&amp;gt;&lt;/span&gt;java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generatorName&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;addCompileSourceRoot&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/addCompileSourceRoot&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;skipOverwrite&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/skipOverwrite&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelNameSuffix&amp;gt;&lt;/span&gt;Dto&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelNameSuffix&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelPackage&amp;gt;&lt;/span&gt;be.ordina.conference.api.model&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelPackage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModels&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModels&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModelTests&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModelTests&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateModelDocumentation&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateModelDocumentation&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateApis&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateApis&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;generateSupportingFiles&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generateSupportingFiles&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;library&amp;gt;&lt;/span&gt;jersey2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/library&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;configOptions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dateLibrary&amp;gt;&lt;/span&gt;java8-localdatetime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dateLibrary&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;java8&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java8&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;useBeanValidation&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/useBeanValidation&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sourceFolder&amp;gt;&lt;/span&gt;src/java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sourceFolder&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configOptions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Important to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The generated models will appear in the current module under &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/java/be/ordina/conference/api/model&lt;/code&gt;
That is caused by the combination of multiple options:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;output&amp;gt;${project.basedir}&amp;lt;/output&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sourceFolder&amp;gt;src/java&amp;lt;/sourceFolder&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;modelPackage&amp;gt;be.ordina.conference.api.model&amp;lt;/modelPackage&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Only the API models will be generated, with markdown documentation and no test classes.
That’s a combination of:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModels&amp;gt;true&amp;lt;/generateModels&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModelTests&amp;gt;false&amp;lt;/generateModelTests&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateModelDocumentation&amp;gt;true&amp;lt;/generateModelDocumentation&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateApis&amp;gt;false&amp;lt;/generateApis&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;generateSupportingFiles&amp;gt;false&amp;lt;/generateSupportingFiles&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://gist.github.com/Nxtra/4c92fa9a6c2fb62a8c606128ae8ca87f&quot; target=&quot;_blank&quot;&gt;this gist&lt;/a&gt; for the xml.&lt;/p&gt;

&lt;h1 id=&quot;testing-your-api&quot;&gt;Testing your API&lt;/h1&gt;
&lt;p&gt;Testing you API would normally involve setting up a larger integration test.
In the case of AWS Lambda this means that you’d have to deploy your application since you cannot run it locally (Not that easily at least).
Luckily we have set the &lt;code class=&quot;highlighter-rouge&quot;&gt;useBeanValidation&lt;/code&gt; property to true.
This allows us to write unit tests that validate the incoming and outgoing requests of our function.&lt;/p&gt;

&lt;p&gt;After you deserialize the incoming request you can validate it against your API specs:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SessionDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If some violations are detected you can return them wrapped in a 400 response.
You could easily check this functionality by writing a unit test that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;checks that no violations are found in the case of a valid request body&lt;/li&gt;
  &lt;li&gt;checks that violations are found in case a payload is sent which is not compliant with the API specs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same goes for the responses. 
In your code validate the response against your API specifications by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;responseDto&lt;/code&gt; that was generated from the specs:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateSessionResponseDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If this finds any violations throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintValidationException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again a unit test can validate that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;no violations are found when the response is validated&lt;/li&gt;
  &lt;li&gt;no exception is thrown&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;serverless-on-aws-openapi-api-gateway-lambda-and-sam&quot;&gt;Serverless on AWS: OpenAPI, API Gateway Lambda and SAM&lt;/h1&gt;
&lt;p&gt;It’s fairly easy to create an API Gateway from an openAPI specification.
In the API Gateway console under &lt;em&gt;Create&lt;/em&gt; select &lt;em&gt;Import from Swagger or Open API 3&lt;/em&gt; and upload your specification.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/create-apigateway.gif&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Of course we want to use the specification programmatically.
Suppose we create our backend service with AWS Lambda (serverless).
I’ll be using AWS native tools and use SAM to deploy the Lambda functions and my API.
SAM allows you to use an OpenAPI specification to create your API Gateway.&lt;/p&gt;

&lt;p&gt;In your SAM template define the API Gateway resource by referencing your OAS.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;ConferenceApiGateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Serverless::Api&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;StageName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DefinitionBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;Fn::Transform:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Include&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./openapi.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Lambda function resource specify that the lambda should be triggered from this API Gateway.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;GetAllSessionsFunction&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CreateSessionApi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Api&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;RestApiId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!Ref&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ConferenceApiGateway&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/sessions&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amazon-apigateway-integration&lt;/code&gt; extension in your &lt;code class=&quot;highlighter-rouge&quot;&gt;api.yml&lt;/code&gt; to specify how the api has to integrate with the backend Lambda service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/sessions&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;x-amazon-apigateway-integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_proxy&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;httpMethod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllSessionsFunction.Arn}/invocations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a full template example including the Lambda resources, check out this &lt;a href=&quot;https://gist.github.com/Nxtra/3600ccab85d92faebf3c465701ba7c21&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;code-first-with-springfox&quot;&gt;Code First with Springfox&lt;/h1&gt;
&lt;p&gt;I promised you an example of a code first approach.
Here I set up a Spring boot application with Springfox dependencies.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-bean-validators&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${springfox.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implementing the API and using the right annotations leads to an endpoint of your application on which your API spec is visualised: &lt;code class=&quot;highlighter-rouge&quot;&gt;/swagger-ui.html&lt;/code&gt;
There is also an endpoint to download the Swagger / OpenAPI specification:  &lt;code class=&quot;highlighter-rouge&quot;&gt;api-docs&lt;/code&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/springfox.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Here are some takeaways about API first development:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Design the API before implementing it&lt;/li&gt;
  &lt;li&gt;Visualize your API so that dependent teams can easily consult it&lt;/li&gt;
  &lt;li&gt;API first development implies a top-down approach&lt;/li&gt;
  &lt;li&gt;Swagger/OpenAPI can help you with API first development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below the pros and cons of practising API first development using Swagger/OpenAPI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Strong tooling support — AWS, Postman, visualizing the API, generate skeleton classes, …&lt;/li&gt;
  &lt;li&gt;Strong consistency between API spec and Web layer of the code&lt;/li&gt;
  &lt;li&gt;Example support&lt;/li&gt;
  &lt;li&gt;Documenting API descriptions is separated from code. Annotations are added to the generated code but you won’t be responsible for constantly updating them to keep documentation in sync.&lt;/li&gt;
  &lt;li&gt;Functional analyst can assist with creating the API specs because it’s a human readable format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No support for complex/variable request/response scenarios&lt;/li&gt;
  &lt;li&gt;Little extra documentation can be added in the API specs&lt;/li&gt;
  &lt;li&gt;If you add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; in the specification, your clients have to regenerate their code in order to be able to accept the enum.&lt;/li&gt;
  &lt;li&gt;Development can only start after API is designed&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scratchpad.blog/serverless/howto/configure-aws-api-gateway-with-swagger/&quot;&gt;https://scratchpad.blog/serverless/howto/configure-aws-api-gateway-with-swagger/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jthomerson/cloudformation-template-for-lambda-backed-api-gateway-with-dynamodb&quot;&gt;https://github.com/jthomerson/cloudformation-template-for-lambda-backed-api-gateway-with-dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/how-to-make-swagger-codegen-work-for-your-team-32194f7d97e4&quot;&gt;https://medium.com/capital-one-tech/how-to-make-swagger-codegen-work-for-your-team-32194f7d97e4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;https://github.com/OpenAPITools/openapi-generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://howtodoinjava.com/swagger2/code-generation-for-rest-api/&quot;&gt;https://howtodoinjava.com/swagger2/code-generation-for-rest-api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#globals-section&quot;&gt;https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#globals-section&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/&quot;&gt;https://www.47northlabs.com/knowledge-base/generate-spring-boot-rest-api-using-swagger-openapi/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is passionate about cloud technology. He has major expertise in AWS and AWS serverless but he appreciates other clouds just as well. He wants to be ahead of change and thus he's also working with IoT and AI.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="API" /><category term="cloud" /><summary type="html">Table of content</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/featured-image.png" /></entry><entry><title type="html">Home Automation part 1</title><link href="https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1.html" rel="alternate" type="text/html" title="Home Automation part 1" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2019/09/30/Home-automation-part-1.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#platforms&quot;&gt;Platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this series of blogposts we are going to take a deeper look into home automation.
Home automation is the wonderful art of automating your home so it becomes easier to do certain tasks.
It is a very wide field where there are many available options, platforms and devices.
If you are willing to get creative almost everything can be automated!&lt;/p&gt;

&lt;p&gt;In this first blogpost we’ll present some of the platforms that are available and some of the pros &amp;amp; cons of each one.
To close off this blogpost we’ll start by looking into Apple’s HomeKit and by extension HomeBridge.&lt;/p&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;In the world of home automation there are many ways to automate stuff.
We will be focussing on either cloud-enabled platforms or those that can be run on premise.
The hardware vendor based platforms (e.g.: Niko) will not be included!&lt;/p&gt;

&lt;p&gt;The platforms can be split up into two main parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud enabled, mainly from manufacturers and larger phone companies&lt;/li&gt;
  &lt;li&gt;On-premise platforms (that do not require internet/cloud access)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security is a very important aspect in the home automation world!
The best way one would go about to automating one’s home would be completely independent from any cloud-based services/APIs.
Internet access can be intermittent, cloud based API’s can be down or even be shut down permanently.
Even worse, accounts could be breached giving unknown third parties access to your home’s devices!&lt;/p&gt;

&lt;p&gt;However, most people already have some smart devices and most of these have their own app, so ditching any cloud-based systems is going to be a lot harder/more expensive.
As with any online service use a strong unique password for each different service and enable multifactor authentication whenever possible!
Using all these different apps can be very cumbersome: using app A to turn on the lights, using app B to turn on the TV, using app C to change the thermostat, you get the picture.
Some of these smart devices support home automation platforms, some do not.
As we will see later on, even those that do not support a home automation platform out of the box can mostly be made to do so!&lt;/p&gt;

&lt;p&gt;The platforms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud enabled (more well known):
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.apple.com/be-nl/shop/accessories/all-accessories/homekit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple HomeKit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://assistant.google.com/explore/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Assistant/Google Home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/b/ref=aeg_lp_sh_d/ref=s9_acss_bw_cg_aegflp_4b1_w?node=17934679011&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=merchandised-search-6&amp;amp;pf_rd_r=0E90B2MD8KGD1D7KVEM1&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=02147624-e148-4901-b449-773097cfa62e&amp;amp;pf_rd_i=17934672011&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://xiaomi-mi.com/mi-smart-home/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Xiaomi Mi Smart Home&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On-premise solutions (lesser known, but safer)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.openhab.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;openHAB&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apple-homekit&quot;&gt;Apple HomeKit&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;HomeKit&quot; src=&quot;/img/2019-09-30-home-automation/homekit.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apple’s home automation platform is called HomeKit.
It can be used on all iOS and macOS X devices, giving us access to it from everywhere.
By default, HomeKit control is limited to your local network only.
If we add an Apple TV/HomePod/iPad as a hub it will allow for remote access through iCloud.
For the best results I would recommend to use an Apple TV (gen 4 or later) connected through ethernet.&lt;/p&gt;

&lt;p&gt;Automations can be made using the app (some special automations require a hub though).
These automations can be based on a number of different triggers &amp;amp; conditions (sensors/state change/people coming home or leaving/time of day/…)
An automation can change the state of a device, or change the state of multiple devices if they have been grouped into a scene.&lt;/p&gt;

&lt;p&gt;HomeKit supports many devices, which can be identified by ‘works with Apple HomeKit’ logo.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Works with HomeKit&quot; src=&quot;/img/2019-09-30-home-automation/works-with-homekit.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 250px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of these include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hue&lt;/li&gt;
  &lt;li&gt;Tadoo&lt;/li&gt;
  &lt;li&gt;Eve&lt;/li&gt;
  &lt;li&gt;and many others…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your device is not supported but has its own app/API there is a big chance you can get it to work by installing Homebridge and adding that to your home app in iOS.
Scroll down to the example section of this blogpost if you want to learn more on how to set this up yourself.&lt;/p&gt;

&lt;h3 id=&quot;google-home&quot;&gt;Google Home&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Google Assistant&quot; src=&quot;/img/2019-09-30-home-automation/google.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google’s home automation platform is called Google Assistant / Google Home. Both assistant and home are used to control smart devices.
It can be used on Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To make best use of all the features, a Google Home Hub or a Google Home (Mini) is required.
Google Assistant supports many devices (much more than HomeKit), these can be added via the app.
After setup you can ask the assistant to perform certain tasks and change the state of devices.&lt;/p&gt;

&lt;p&gt;Automations with Google Assistant are called &lt;a href=&quot;https://support.google.com/googlenest/answer/7029585&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;routines&lt;/a&gt;.
For the time being, these are not quite as extensive as HomeKit or Home Assistant/openHAB.
You can make routines that are based on a time of day event or people coming home/leaving.
Triggering routines based on state changes of the smart devices is not supported for now.
This will supposedly be added in the future.&lt;/p&gt;

&lt;h3 id=&quot;amazon-alexa&quot;&gt;Amazon Alexa&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Alexa&quot; src=&quot;/img/2019-09-30-home-automation/alexa.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon’s home automation platform is part of its Alexa assistant.
It can be used on Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To make best use of all the features an echo device is required.
Alexa supports many devices, much more than HomeKit.
These can be added via the app.
After setup you can ask Alexa to perform certain tasks and change the state of devices.&lt;/p&gt;

&lt;p&gt;Automations with Alexa are called routines.
These routines are like the scenes and routines that exist with HomeKit &amp;amp; Google Assistant.
The routines can be triggered like in HomeKit, by devices/sensors, coming home or leaving, time of day.&lt;/p&gt;

&lt;p&gt;You can get very creative with the routines, a funny example below, pity the intruder that is caught up in this encounter!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Alexa routine example&quot; src=&quot;/img/2019-09-30-home-automation/alexa-intruder-meme.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;home-assistant&quot;&gt;Home Assistant&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Home Assistant&quot; src=&quot;/img/2019-09-30-home-automation/home-assistant.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Home Assistant is a fully open source home automation platform that is fully focussed on the user’s privacy.
It can be used in the browser as well as on iOS and Android devices.&lt;/p&gt;

&lt;p&gt;It can be run locally with no need of any cloud service. A Raspberry Pi 3B is all you need.
Home Assistant has support for over a thousand integrations that are supported by the platform.
If you want to create your own integration, a fully documented &lt;a href=&quot;https://developers.home-assistant.io/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;developer portal&lt;/a&gt; will assist you.
The integrations are written in Python 3.&lt;/p&gt;

&lt;p&gt;Automations are called as what they are, automations.
They can control devices or perform actions (calling services etc.) based on triggers.
These triggers can be various things like in the previously mentioned platforms, but Home Assistant takes it one step further and allows for very fine-grained and very detailed/specific triggers.&lt;/p&gt;

&lt;p&gt;Location tracking &amp;amp; presence detection is also possible but requires the integration and use of &lt;a href=&quot;https://owntracks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Owntracks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;openhab&quot;&gt;openHAB&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;openHAB&quot; src=&quot;/img/2019-09-30-home-automation/openhab.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like Home Assistant, openHAB is a fully open source home automation platform.
It can be used in the browser as well as on iOS and Android devices.&lt;/p&gt;

&lt;p&gt;It can be run locally with no need of any cloud service.
A Raspberry Pi 3B is all you need.
It also supports well over a thousand existing integrations and can easily be extended.
It is written in Java and can be configured with a DSL.&lt;/p&gt;

&lt;p&gt;Automations are called rules.
These can be configured with the platform’s DSL.
They can control devices or perform actions (calling services etc.) based on triggers.
These triggers can really be anything you can think of, any integration or trigger action you can think of, it can be done.&lt;/p&gt;

&lt;p&gt;OpenHAB does require quite a bit of research.
Do not jump into this platform without doing some digging beforehand.
Its documentation is very extensive and is very well made.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h3 id=&quot;homekit--homebridge&quot;&gt;HomeKit &amp;amp; Homebridge&lt;/h3&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-1.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit devices 1&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2019-09-30-home-automation/homekit-1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-2.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit devices 2&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2019-09-30-home-automation/homekit-2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-09-30-home-automation/homekit-3.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;HomeKit automations&quot;&gt;
        &lt;img alt=&quot;HomeKit automations&quot; src=&quot;/img/2019-09-30-home-automation/homekit-3.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 32.7%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Below is how my home is set up, which plugins I use (and made myself).&lt;/p&gt;

&lt;p&gt;The only official HomeKit device I own is my thermostat, all other devices are exposed to HomeKit through Homebridge.
Homebridge is a NodeJS server that exposes custom devices to be used inside the HomeKit platform.
It can be installed and configured easily, for example on a Raspberry Pi and provides a code or QR code during startup which you can use to add the HomeKit bridge to your setup.&lt;/p&gt;

&lt;p&gt;A list of all devices I use through Homebridge with their according plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nest protects - &lt;a href=&quot;https://www.npmjs.com/package/homebridge-nest&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-nest plugin&lt;/a&gt;, only possible now if you already have a nest developer account and the required keys.&lt;/li&gt;
  &lt;li&gt;Unifi protect cameras &lt;a href=&quot;https://www.npmjs.com/package/homebridge-camera-ffmpeg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-camera-ffmpeg plugin&lt;/a&gt;&lt;a href=&quot;https://www.npmjs.com/package/homebridge-unifi-protect-motion-sensors&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-unifi-protect-motion-sensors plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Smartwares smart wifi switch &amp;amp; RF outlets &lt;a href=&quot;https://www.npmjs.com/package/homebridge-homewizard-flamingo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-homewizard-flamingo plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Somfy based shutters &lt;a href=&quot;https://www.npmjs.com/package/homebridge-somfy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-somfy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LG Airco unit &lt;a href=&quot;https://www.npmjs.com/package/homebridge-lg-airco&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;homebridge-lg-airco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many, many more devices and integrations available for use with Homebridge.
You can find these by looking on the &lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NPM plugin repository&lt;/a&gt; and searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;homebridge-PLUGINNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These plugins can be installed by installing the NPM package globally and adding said package to the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt; of the Homebridge instance.
The main page of the &lt;a href=&quot;https://github.com/nfarina/homebridge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repo&lt;/a&gt; explains in detail how to set everything up so you too can get started quickly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Home automation is a wonderful thing.
It can make your live easier in various ways.
It is however required to think things through and to do some research before jumping into this.
Looking into what devices are supported, out of the box, or via custom integrations/plugins is very important.
If you have some programming experience and some time to spare you can very easily make your own integrations for devices that are not supported.&lt;/p&gt;

&lt;p&gt;In the coming months we’ll be diving a bit deeper into the wonderful world of home automation with more in-depth blog posts about HomeKit with Homebridge and openHAB.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apple.com/be-nl/shop/accessories/all-accessories/homekit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple HomeKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://assistant.google.com/explore/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Assistant/Google Home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/b/ref=aeg_lp_sh_d/ref=s9_acss_bw_cg_aegflp_4b1_w?node=17934679011&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=merchandised-search-6&amp;amp;pf_rd_r=0E90B2MD8KGD1D7KVEM1&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=02147624-e148-4901-b449-773097cfa62e&amp;amp;pf_rd_i=17934672011&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xiaomi-mi.com/mi-smart-home/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Xiaomi Mi Smart Home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant developer portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owntracks.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Owntracks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openhab.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;openHAB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://homebridge.io/&quot;&gt;Homebridge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;Homebridge GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/homekit/configuring_a_home_automation_device&quot;&gt;HomeKit catalog, Apple&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KhaosT/HAP-NodeJS/&quot;&gt;HomeKit application protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/search?q=homebridge-plugin&quot;&gt;Homebridge plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his role as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="Machine Learning" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="Home" /><category term="Smart Home" /><category term="Automation" /><category term="Home Automation" /><category term="Siri" /><category term="Apple" /><category term="Google Assistant" /><category term="Amazon" /><category term="Alexa" /><category term="HomeKit" /><category term="Home Assistant" /><category term="openHAB" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-30-home-automation/banner.jpg" /></entry><entry><title type="html">JavaScript Testing 101</title><link href="https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101.html" rel="alternate" type="text/html" title="JavaScript Testing 101" /><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/09/18/JS-testing-101.html">&lt;h1 id=&quot;javascript-unit-testing-101&quot;&gt;JavaScript unit testing 101&lt;/h1&gt;

&lt;p&gt;In this blog post I will explain how to write unit tests for JavaScript. For the examples, we will be using jasmine and ts-mockito, but the theory should be applicable to every testing framework.
 Why am I using two frameworks here instead of only jasmine? Well, in my opinion, jasmine relies too much on magic strings that might give problems during refactoring and makes autocompletion impossible in a lot of cases (depending on how good your IDE is).
Ts-mockito is a mocking framework that allows you to create mocks based on a class, so you don’t have to tell it the method names to mock.
There are other good mocking frameworks for typescript as well, but my experience is with ts-mockito, so I will be using it for the examples of this blog post.
or the code examples I used the Angular CLI to generate a project for me, but I will not be using any of the Angular testing tools to keep these test cases completely framework independent.
The Angular CLI was just an easy way to quickly get everything up and running.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;p&gt;The beginning of a test is naming it. 
I write every test in the same structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe: ‘classname’

    ↪ constant values used in the test

    ↪ mock declarations

    ↪ classUnderTest declaration

    ↪ beforeEach to setup the test

    ↪ describe: ‘methodname’:

        ↪ it ‘should return this when input is so and so’

        ↪ it ‘should return this value if input is something else’
		
    ↪ describe: ‘other method name’:
	
        ↪ it‘should return this when input is so and so’
		
        ↪ it‘should return this value if input is something else’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows you to quickly see from your testing log, which method from which class has a bug.
 I personally always try to call the object you are testing something like ‘componentUnderTest’ or ‘serviceUnderTest’.
This allows you to very quickly see in a unit test, which object is actually being tested.&lt;/p&gt;

&lt;p&gt;When you want to mock certain dependencies of your class, you should always declare all the mocks at the top of the test, before your (first) beforeEach call and you should initialize them within the beforeEach.
 The reason we want to initialize our mocks in the beforeEach and not at declaration, is because you want fresh mocks for every test.
If you initialize your mock only once at declaration, the method call count and mock return values will not be removed.
This can cause tests to influence each others output, so they can complete successfully or unsuccessfully, depending on the order in which they are run, this can be a headache to debug if you don’t realize this from the beginning.
I will explain here with an example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;brown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ford&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Porsche&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cadillac&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllRedCars&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can guess, this test will fail with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Expected &quot;getCars()&quot; to be called 1 time(s). But has been called 2 time(s).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This happens because the tests don’t start with a fresh mock.
So the call to the getCars() from the first test, is still part of the callcount of the mock in the second test.
If we reinitialize the mocks every time in the beforeEach, this problem is solved.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-unit-test&quot;&gt;Writing a unit test&lt;/h2&gt;

&lt;p&gt;Every unit test has 3 parts.
First part is the setup, where you set certain values and mock the necessary method calls.
Second part is the actual call of the method you are testing.
The last part is the verification, where you will check if the output is correct or the right methods have been called.
For readability, leave a blank line between each part, so you can clearly see from a glance what your setup, call and verification part is.&lt;/p&gt;

&lt;p&gt;A good way to write your unit test is the following:&lt;/p&gt;

&lt;p&gt;You start with your empty test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you write the method call you want to test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you write your verification part:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, you run your test once. 
It should fail. 
Then you write the setup you need to get to the expected output:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should only return the cars where the color is black&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedFerrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllBlackCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a good way to work when you write unit tests.
Writing the verification part before your setup, allows you to see that your test is actually able to fail.
This is especially handy when you are testing asynchronous code, where a missing done operator can make your test be successful every time, no matter what your expects check, but more about this in the next part.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-testing&quot;&gt;Asynchronous testing&lt;/h2&gt;

&lt;p&gt;Thinking in async code, can be a bit of a challenge, especially when you start out with JavaScript as a new developer or coming from a language that works mostly with synchronous code.&lt;/p&gt;

&lt;p&gt;In this part of the post, I will show you how to test asynchronous code.
Both with promises and observables.&lt;/p&gt;

&lt;p&gt;For both promises and observables, I will test methods that show the most common usage patterns.
One scenario is where you simply get something asynchronously and set its value to a field, the other scenario is a little more complicated, where you get something asynchronously, have some side effects before it resolves, and have some more side effects after it resolves.
If that seems complicated, don’t worry, it will become clear very soon.&lt;/p&gt;

&lt;p&gt;For the promises, I will be using the async / await syntax.
If you don’t know what that is yet, I suggest you read up on it, a good article is &lt;a href=&quot;https://alligator.io/js/async-functions/&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;promises&quot;&gt;Promises&lt;/h3&gt;

&lt;h4 id=&quot;scenario-a&quot;&gt;Scenario A&lt;/h4&gt;

&lt;p&gt;The method we will be testing will be the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redCars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redCars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function just gets the cars from the &lt;code class=&quot;highlighter-rouge&quot;&gt;carService&lt;/code&gt; asynchronously and filters out all the non-red cars before returning the array.&lt;/p&gt;

&lt;p&gt;The first test, we will simply test the happy scenario, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;carService&lt;/code&gt; returns us a nice list of cars and the non-red cars are filtered out.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what exactly goes on here? 
First we mock the carService.getCarsAsPromise() method and tell it that it should always return a promise that resolves with a list of cars. 
Then we call the method that we are testing, we wait for it to resolve (by using the await keyword).
Afterward we expect that the returned array only contains the red Porsche.
Now, what is this whole try catch thingy? When the promise is rejected, the execution of the code in the try block will be stopped and the code in the catch block will be executed.
In this case, if the getCarsAsPromise() should fail, it will go into the catch block and the test will fail.
The message that will be shown by jasmine, is the error message that is given to the error that was thrown.
For instance, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;getCarsAsPromise()&lt;/code&gt; promise return value were to be rejected with the error message ‘Something went wrong.’, the test will fail with the message &lt;code class=&quot;highlighter-rouge&quot;&gt;Failed: Something went wrong.&lt;/code&gt;.
In the finally block, we call the done function, to tell jasmine that our test is done, we call it in the finally block, because the code in the finally block will always be executed, regardless of the result of the promise.&lt;/p&gt;

&lt;p&gt;Note: the done function should ALWAYS be called, regardless if your test fails or succeeds.
The reason for this is that without the done function, the test will only fail after the timeout limit has been reached.
When jasmine executes a test, it will wait for 5 seconds before timing out, if the done function has not been called within that time, it will fail.&lt;/p&gt;

&lt;p&gt;To explain with an example, if we would remove the finally block and call the done function after the expect in the try block, the test would execute as expected in the scenario where the promise is resolved, but if the promise where to be rejected, it would call the fail(e), but since jasmine does not consider the fail call as the end of a test, it would still wait until the timeout for the done function.
The test will eventually fail, but it will take 5 seconds to fail instead of 0.5 seconds.&lt;/p&gt;

&lt;p&gt;In the second test, we will test what happens when the promise is rejected:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set retrievalError to true if the promise is rejected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Call should not have succeeded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// nothing to expect here&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see here, we call the fail function in the try block, because the method under test should throw an error.
So after calling the method under test, it should go directly to the catch block.
Since our method under test does not handle any errors, there is nothing to expect there.
In the finally block, we tell jasmine the test is done.&lt;/p&gt;

&lt;h4 id=&quot;scenario-b&quot;&gt;Scenario B&lt;/h4&gt;

&lt;p&gt;The next method we will be testing is the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So a few things are happening:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First we set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to true&lt;/li&gt;
  &lt;li&gt;Then we get the red cars asynchronously and assign them to our &lt;code class=&quot;highlighter-rouge&quot;&gt;cars&lt;/code&gt; field&lt;/li&gt;
  &lt;li&gt;If getting the red cars throws an error, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;carRetrievalError&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Afterward we always set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; back to false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, we don’t just want to test the end result of our test, but also the side effects in between, in this case, the setting of the loading field to true or false. 
For observables, these types of scenarios are a little easier to test, but with a little creativity, we can also do this for promises, without the use of special testing tools or libraries.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set all the red cars to the cars field and set loading field correctly&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;promiseResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;promiseResolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;promiseResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what’s happening here? 
In the promise callback, we assign the resolve function to a variable outside of that function, so we can use it later on.
Then we call our method under test, but notice that we don’t use the await keyword here.
Why is this? Well, if we were to use the await keyword, it would simply wait for the promise to resolve, but it would never happen because our resolve function is never called.
Instead we just want to call it, let it execute and start expecting the side effects.
As we saw in the method under test, the loading field is set to true before the red cars are retrieved, since those cars are not retrieved yet, we can check that the loading field is indeed set to true.
Ok, now we have checked that, let’s resolve the carService call.
 We do this by calling our promiseResolve function.
Now the cars are resolved, so we can check that the loading has now been set to false and the cars field has been correctly set to the right value.
The finally callback of the returned promise, will execute after we call our promiseResolve function, and will check the final result of our method and subsequently call the done function to tell jasmine our test is over.&lt;/p&gt;

&lt;p&gt;In the second test we will test the error scenario, where we want to see if the loading value is still set correctly and the &lt;code class=&quot;highlighter-rouge&quot;&gt;carRetrievalError&lt;/code&gt; is also set to true.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set the retrievalError to true and loading states correctly if the promise is rejected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;promiseReject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;promiseReject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsPromiseWithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;promiseReject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we actually do the same thing, except instead of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; function, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;observables&quot;&gt;Observables&lt;/h3&gt;

&lt;p&gt;For observables, I have created methods that do exactly the same as our previous promises scenarios, except we use observables here.&lt;/p&gt;

&lt;h4 id=&quot;scenario-a-1&quot;&gt;Scenario A&lt;/h4&gt;

&lt;p&gt;For scenario A we will test a simple observable that returns one value and then completes. 
 This is a fairly common use case, especially with http calls.
 Here is our method under test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply get all the cars as an observable and then we call the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; operator to filter the list we get. 
 Pretty simple scenario.&lt;/p&gt;

&lt;p&gt;For a simple scenario like this, there are two ways to test this. 
 The first one is this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply call our method under test, subscribe to the resulting observable, and in the subscribe callback we do our expects and in the error callback we fail the test. 
This is the easiest way to test this scenario, although, it is a little verbose. 
To reduce the lines of code, a simple scenario like this, can also be tested by transforming the observable to a promise and test it like we did in the promise scenario:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should get the cars where the color is red (alternative way)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBrownCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I guess in this case it depends on what you find the most readable. 
The async await syntax makes the second version very readable, but comes down to personal preference.&lt;/p&gt;

&lt;h4 id=&quot;scenario-b-1&quot;&gt;Scenario B&lt;/h4&gt;

&lt;p&gt;In the next scenario we will be testing an observable call with side effects.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;finalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same scenario as the promises, we set loading to true and subscribe to an observable, when it resolves, we set the value and when it completes, we set loading to false. 
If the observable throws an error, we set carRetrievalError to true.&lt;/p&gt;

&lt;p&gt;So our first test is the happy path, the observable resolves with an array of cars and everything goes as expected:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set all the red cars to the cars field and set loading field correctly&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlackCadillac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aRedPorsche&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This scenario is very easily tested with observables, because of Subjects. What is a subject? 
A subject can act as both an observable and an observer.
This means we can subscribe to it and receive the emitted values, or we can tell it to emit a certain value.&lt;/p&gt;

&lt;p&gt;In this case, instead of telling the carService to return an Observable that immediately resolves with a value, we tell it to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;subject.asObservable()&lt;/code&gt;.
Now we are in control of when and what value is emitted in this observable.
This allows us to check our side effects easily at the right time.&lt;/p&gt;

&lt;p&gt;Note that I am calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;carsSubject.complete()&lt;/code&gt; after I emit the car array value.
I do this because I set &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt; operator.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt; operator is only called when the observable is completed.
So if I don’t call the &lt;code class=&quot;highlighter-rouge&quot;&gt;carsSubject.complete()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; will never be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and my test will fail.
The error scenario is pretty much the same logic, except we call the error method instead of the next on the subject.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;should set retrievalError to true if the observable throws an error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCarsAsObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllRedCarsAsObservablewithStuffHappeningInBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;carsSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carRetrievalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentUnderTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope these code examples help you to effectively unit test your (asynchronous) code. 
Readability is everything, so make sure you use blank lines to clearly differentiate between the different parts of a test. 
And don’t forget that done function, without it, your test might timeout, or even worse, it might succeed without actually having tested anything at all.&lt;/p&gt;

&lt;p&gt;All the code examples can be checked on the following repository:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/js-testing-101&quot;&gt;https://github.com/ivarvh/js-testing-101&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply clone the repo, run npm install and run npm test to execute the tests.&lt;/p&gt;

&lt;p&gt;Happy testing everyone!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ivar&quot;, &quot;last_name&quot;=&gt;&quot;van Hartingsveldt&quot;, &quot;permalink&quot;=&gt;&quot;/author/ivar-van-hartingsveldt/&quot;, &quot;avatar&quot;=&gt;&quot;ivar-van-hartingsveldt.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ivar.vanhartingsveldt@ordina.be&quot;, &quot;github&quot;=&gt;&quot;ivarvh&quot;, &quot;linkedin&quot;=&gt;&quot;ivarvh&quot;, &quot;bio&quot;=&gt;&quot;Ivar is a backend Java developer who converted to frontend. When ES6 and TypeScript came along, he really started investing his time in that and now he writes Javascript / TypeScript almost exclusively.&quot;}</name><email>ivar.vanhartingsveldt@ordina.be</email></author><category term="Testing" /><category term="JavaScript" /><category term="Testing" /><category term="TypeScript" /><category term="Jasmine" /><category term="Karma" /><category term="Unit testing" /><category term="Observables" /><summary type="html">JavaScript unit testing 101</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-07-11-js-testing.png" /></entry><entry><title type="html">Kustomize: Kubernetes configuration management, the easy way</title><link href="https://ordina-jworks.github.io/cloud/2019/09/18/kustomize.html" rel="alternate" type="text/html" title="Kustomize: Kubernetes configuration management, the easy way" /><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/09/18/kustomize</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/09/18/kustomize.html">&lt;h3 id=&quot;reading-time-8-min-29-sec&quot;&gt;Reading time: 8 min 29 sec&lt;/h3&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-problem-do-we-have&quot;&gt;What problem do we have?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-alternatives-are-available-to-solve-this-problem&quot;&gt;What alternatives are available to solve this problem?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-kustomize-and-how-to-use-it&quot;&gt;What is Kustomize and how to use it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extending-kustomize-plugins&quot;&gt;Extending Kustomize&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion-when-to-use-kustomize&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-problem-do-we-have&quot;&gt;What problem do we have?&lt;/h2&gt;

&lt;p&gt;Deploying components to a Kubernetes cluster should be as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f folder-with-deployment-manifests&lt;/code&gt;. 
This approach works very well for a single environment, but quickly become very hard to do properly when managing multiple environments (Dev, Staging, …, Production). 
The reason for this is due to the configuration differences in these environments.
Every environment needs a different configuration to: connect to different databases, use other secret values, use different deployment configurations (number of replicas for example), …
Managing these differences can be very hard to do in a single set of manifests.&lt;/p&gt;

&lt;h2 id=&quot;what-alternatives-are-available-to-solve-this-problem&quot;&gt;What alternatives are available to solve this problem?&lt;/h2&gt;

&lt;p&gt;Luckily this problem exists in many organizations and the community already created multiple tools to help solve the problem. 
In the scope of configuration management for Kubernetes the following tools are in available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.openshift.com/container-platform/4.1/welcome/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenShift Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v3.helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kustomize.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenShift Templates are part of the OpenShift platform and can be used both to template manifests in a repository and to provide an off-the-shelve experience in the OpenShift platform itself.
For example, a cluster administrator can install a template for an Apache Kafka setup.
By provisioning this template (through the online UI or the CLI) and providing the required template values, the service can be provisioned like the administrator provides it. 
This is a very powerful approach to allow developers to provision supporting systems directly in the platform.&lt;/p&gt;

&lt;p&gt;Helm 2 is a templating and deployment management tool. 
In Helm 2 a server-side component needs to be installed in the cluster named Tiller. 
Tiller is the central entrypoint and management component for all deployments using Helm 2.
It keeps the state of all deployed manifests and groups them together as a single release.
The main disadvantage of Helm 2 is the lack of proper authorization (RBAC) support as Tiller will run with almost root-level privileges on the cluster.&lt;/p&gt;

&lt;p&gt;Helm 3 is currently still in beta, but the reworked version should resolve a lot of the issues with Helm 2.
Like Helm 2 it’s still a templating engine which also manages releases. 
Unlike Helm 2, it doesn’t use the Tiller component anymore to manage all the state connected to the release.
More information about Helm can be found in a future blogpost.&lt;/p&gt;

&lt;p&gt;Kustomize is a Kubernetes configuration management tool that is provided as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; command, behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; flag.
Kustomize allows a user to use standard Kubernetes manifests and overlay any changes that they want to make using an overlay manifest.
Unlike Helm, Kustomize only provides configuration management and doesn’t manage any state about the manifests it adapts.
Unlike Helm and OpenShift Templates, the main goal of Kustomize is to allow users to adapt their existing manifests in any thinkable way, instead of templating some parts of the manifest that can be changed.&lt;/p&gt;

&lt;h2 id=&quot;what-is-kustomize-and-how-to-use-it&quot;&gt;What is Kustomize and how to use it&lt;/h2&gt;

&lt;p&gt;As briefly discussed, Kustomize is a configuration management tool that has been embedded into &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.
Originally it was a separate tool and some functionality is still only available in the Kustomize binary and not in Kubectl.
The documentation of Kustomize is therefore available in two parts, the &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;core docs&lt;/a&gt; and the &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubectl docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Important to note, especially when considering the usage of this tool, is what it doesn’t do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It doesn’t manage deployments&lt;/li&gt;
  &lt;li&gt;It doesn’t package applications in deployable artifacts&lt;/li&gt;
  &lt;li&gt;It doesn’t manage secrets securely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As discussed in the Kustomize projects &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;readme&lt;/a&gt; a Kustomize manifest exists out of two main structures: a base manifest and overlays.&lt;/p&gt;

&lt;h3 id=&quot;base-manifest&quot;&gt;Base manifest&lt;/h3&gt;

&lt;p&gt;A base manifest is, in essence, a set of bare-bones Kubernetes manifests.
For the scope of this blog post, a single base manifest will contain all configuration to deploy a single service.
Kustomize doesn’t require this, but it seems like a good fit.&lt;/p&gt;

&lt;p&gt;Let’s assume the following set of Kubernetes manifests:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── deployment.yaml
├── ingress.yaml
└── service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These manifests can deploy one of our apps to a cluster.
It will create a deployment, a service exposing the app to the cluster and an ingress object that will allow connections from outside of the cluster.
Managing a set of these manifests in separate files or even in one file, can be a bit challenging and ofter results in violating the Don’t-Repeat-Yourself (DRY) principle.
Kustomize can assist in preventing this and allows the user to more generally manage their manifests.
Adding Kustomize to a set of manifests is as easy as creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomization.yaml&lt;/code&gt; file and running &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Add labels to all objects created by this kustomize manifest.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;commonLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only a single feature of Kustomize is used, namely the &lt;code class=&quot;highlighter-rouge&quot;&gt;commonLabels&lt;/code&gt; option. 
This option makes Kustomize add the label to all managed manifests at build time (when running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -k&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;). 
Other options like image overrides, namespaces overrides and name prefixing are also available. 
For more information on these features check out the documentation &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;overlay-manifest&quot;&gt;Overlay manifest&lt;/h3&gt;

&lt;p&gt;The second half of the cake in Kustomize are the overlays. 
Overlays are YAML snippets, Kustomize configuration and/or even full manifests that can be used to adapt a base manifest.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../../base&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git::ssh://git@some-git-provider:some-repo-path.git//folder-in-repo-with-kustomize-config?ref=branch&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.com/project/repo//folder-in-repo?ref=branch&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the default setup on the Kustomize homepage, the bases are always local folders. 
However, a really useful feature is referencing remote locations, including Git repositories, as bases to be used in an overlay. 
The Git endpoints need to be specified as described in the &lt;a href=&quot;https://github.com/hashicorp/go-getter#url-format&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;hashicorp/go-getter URL format&lt;/a&gt;. 
Important to note here is that when using the Git references, the machine that is executing Kustomize builds needs have a valid Git configuration to access the referenced repositories.
As the kustomization file is checked into version control, adding credentials into the link is considered a bad practice.
Kustomize supports referencing multiple bases, which again allows for a lot of flexibility. 
The references work recursively, so multiple levels of manifests are supported.
At the time of writing, diamond composition is not possible but &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/issues/1251&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;being worked on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The way Kustomize builds a set of manifests is the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the remote bases to a temporary folder&lt;/li&gt;
  &lt;li&gt;Executed &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt; on all of the bases
    &lt;ol&gt;
      &lt;li&gt;This will include executing any generators and transformers that are configured in the bases.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Add any manifests that are listed in the resources section.&lt;/li&gt;
  &lt;li&gt;Execute the generators.&lt;/li&gt;
  &lt;li&gt;Apply any patches and execute the transformers against all manifest that are generated or available through the bases.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This order of execution is important to remember when creating setups, especially when using overrides for generators in the base. 
E.g. when using a config map generator in the overlay, a ConfigMap generator needs to be used in the base as well, otherwise Kustomize will not allow the override to be executed. 
This is because the config map generator adds a random ID to the name of each generated config map and cannot determine whether to change the config maps in the base template as well.&lt;/p&gt;

&lt;h2 id=&quot;extending-kustomize-plugins&quot;&gt;Extending Kustomize: plugins&lt;/h2&gt;

&lt;p&gt;Kustomize allows plugins to be created and used during execution. 
This mechanism allows for a lot of flexibility.
Currently, plugins are still an alpha feature and therefore not available through &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; but only through the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize&lt;/code&gt; tool itself.&lt;/p&gt;

&lt;p&gt;Writing a plugin can be done in one of two ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write a plugin in Go and link it as a shared library to the Kustomize tool&lt;/li&gt;
  &lt;li&gt;Write a plugin based on the exec model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the first way allows the code to be more easily absorbed into the Kustomize binary later on, it requires the plugin to be compiled together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize&lt;/code&gt; binary.
The second option is a lot more flexible as it only relies on the plugin being available and providing a very rudimentary interface.
More information on support for plugins can be found in the &lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs/plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;docs&lt;/a&gt; and examples can be found &lt;a href=&quot;https://github.com/Agilicus/kustomize-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real-world example&lt;/h2&gt;

&lt;p&gt;In the last section of this post, a simple example setup will be shown and discussed.
Consider the following scenario: a UI, two backends (task service and process service) and a datastore.
The components have deployments, services, ConfigMaps ,and ingress manifests.
This would result in the following structure:&lt;/p&gt;

&lt;p&gt;Let’s assume the following set of Kubernetes manifests:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;frontend/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml

task-service/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml

process-service/
├── deployment.yaml
├── ingress.yaml
├── configmap.yaml
└── service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deploying this application is as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f &amp;lt;folder&amp;gt;&lt;/code&gt; on each of these folders. 
A very simple use case for Kustomize is to deploy all of these components at once and group them. 
The following &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomization.yaml&lt;/code&gt; should be added to each folder.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress.yaml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;configmap.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following Kustomization manifest could then be used to deploy everything at once by running &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -k acceptance/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Kustomization&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../frontend&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../task-service&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../process-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the execution of this command, Kustomize will generate a single (giant) file containing all the manifests. 
Note that the bases are referenced under the resources.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;bases&lt;/code&gt; key is deprecated and all references should be moved into the resources key.&lt;/p&gt;

&lt;p&gt;Making variants on the actual bases is super easy. 
For example, let’s assume that the acceptance environment needs a different configuration.
This can be achieved by just overriding the ConfigMap in the acceptance folder.
There are three different ways to override a ConfigMap.&lt;/p&gt;

&lt;h3 id=&quot;using-configmap-generator&quot;&gt;Using ConfigMap Generator&lt;/h3&gt;

&lt;p&gt;Generators can be used to ease the management of configuration. 
The ConfigMap generator makes creating ConfigMaps easier by providing a more common way to specify configuration.
More information on the ConfigMap generator can be found &lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/reference/kustomize.html#configmapgenerator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;configMapGenerator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;loglevel=warn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ConfigMap generator will look for the original manifest and apply the override.
Important to note here is that the generator only works if the original manifest was generated aswell.
Using this approach thus requires both the base and overrides to use the generator.
A nice bonus to using the generator is that it will add unique IDs to the ConfigMap name every time one is generated. 
This way, a component is automatically updated when a linked ConfigMap is changed.
This provides a nice way to prevent manually triggering a rolling update when configuration changes.&lt;/p&gt;

&lt;p&gt;Currently only ConfigMap and secret generators are available by default, but as mentioned, there is a very good plugin mechanism available to add more.&lt;/p&gt;

&lt;h3 id=&quot;using-patches&quot;&gt;Using patches&lt;/h3&gt;

&lt;p&gt;Patches are the last way to override a configuration from a base.
Patches are available in two flavors: Json6902 and Strategic Merge.&lt;/p&gt;

&lt;p&gt;Json6902 is an RFC standard provided by the &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IETF&lt;/a&gt; to describe JSON patches.
In a nutshell, operations (patches) can be described using JSON path, operations ,and values.&lt;/p&gt;

&lt;p&gt;For the example earlier, this would result in the following:
&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;configs/acceptance-specific-task-service-configmap-patch.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/configs/acceptance-specific-task-service-configmap-patch.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/loglevel&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Matching is done based on the name (&lt;code class=&quot;highlighter-rouge&quot;&gt;metadata.name&lt;/code&gt;), version and kind of the resource.
This approach will result in the acceptance-specific config map overriding the base task-service ConfigMap.
It will result in the same ConfigMap manifest after the &lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The strategic merge is the final way to provide an override in Kustomize.
It merges the existing ConfigMaps with the new configuration provided in the override. 
It applies the same matching rules as the JSON patch approach to match base manifests with the overrides.
Note that the configuration will be added or overridden.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/kustomization.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...original yaml...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;patches/acceptance-specific-task-service-configmap.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptance/patches/acceptance-specific-task-service-configmap.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;task-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Building this Kustomize manifest will again result in the same Kubernetes ConfigMap manifest as the other two approaches. 
Note that none of the three approaches required changing the original manifests.
When multiple variants are created, updates to the base will automatically be added to all variants without having to change a single line of code.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-when-to-use-kustomize&quot;&gt;Conclusion: When to use Kustomize?&lt;/h2&gt;

&lt;p&gt;Kustomize is a great tool to have in your toolbox to simplify configuration management in Kubernetes.
DRY principles can be adhered to and managing configuration code can be done in a structured and unified way.
Kustomize is a great fit when different environments require different configuration for a microservice. 
Especially when sensible defaults can be added to the base template and only a small amount of overrides are required per environment. 
When compared to Helm, both version 2 and 3, Kustomize doesn’t pollute the original manifests with templating code.&lt;/p&gt;

&lt;p&gt;Kustomize is a configuration management tool for Kubernetes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have a lot of configuration code being duplicated across environments?&lt;/li&gt;
  &lt;li&gt;Have a complex CD setup with manual steps to deploy configuration to a specific environment?&lt;/li&gt;
  &lt;li&gt;Hate using templating engines?&lt;/li&gt;
  &lt;li&gt;Really really really like using Kubernetes?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all of the above are true for you, start using Kustomize today and experience it yourself!&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/app_management/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubectl-Kustomize docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize core docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kustomize/tree/master/docs/plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Agilicus/kustomize-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kustomize plugin examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubectl.docs.kubernetes.io/pages/reference/kustomize.html#configmapgenerator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ConfigMap Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Vincken&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-vincken-a94b5153&quot;, &quot;twitter&quot;=&gt;&quot;PieterVincken&quot;, &quot;github&quot;=&gt;&quot;pietervincken&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter_vincken/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-vincken.jpeg&quot;, &quot;title&quot;=&gt;&quot;Cloud Automation Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vincken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.&quot;}</name><email>pieter.vincken@ordina.be</email></author><category term="Cloud" /><category term="Kustomize" /><category term="Configuration Management" /><category term="Kubernetes" /><category term="Cloud" /><summary type="html">Reading time: 8 min 29 sec</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-09-kustomize/banner.png" /></entry><entry><title type="html">Lessons learned on including library assets into Angular applications</title><link href="https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries.html" rel="alternate" type="text/html" title="Lessons learned on including library assets into Angular applications" /><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2019/09/13/angular-include-assets-libraries.html">&lt;p&gt;With Angular 6, which has now been released ages ago, workspaces were introduced.
This meant that a repository could include multiple applications and libraries, eventually building a monorepository.
I welcomed this change, as it meant that all applications in one repository could be kept up to date easily and more.
But I’m not here to talk about all the advantages and disadvantages of a monorepo.
Instead I’d like to talk about one specific challenge with this type of repository.&lt;/p&gt;

&lt;h2 id=&quot;how-to-include-assets-used-by-libraries&quot;&gt;How to include assets used by libraries&lt;/h2&gt;

&lt;p&gt;There are multiple solutions to this problem.
But not all solutions match all criteria for a good architecture.
These criteria are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/li&gt;
  &lt;li&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/li&gt;
  &lt;li&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t worked with many monorepo tools, other than &lt;a href=&quot;https://nx.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nrwl/nx&lt;/a&gt;, so I will base my definition of affected projects on that.
Nrwl/nx uses a dependency graph to determine the affected projects.
In short: if a library has a changed file, then all projects that import this library (either directly or lazy-loaded) are affected.
This works recursively, so the projects that import those projectes are also affected and so on.
Some files, like &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; have &lt;code class=&quot;highlighter-rouge&quot;&gt;implicitDependencies&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt;, which means a change in those files will regard all projects in the workspace as affected.&lt;/p&gt;

&lt;p&gt;These are the solutions (in order) I’ve gone through to tackle this exact problem for a monorepo I’m currently managing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: In that monorepo the focus was on json-files with translations used for &lt;code class=&quot;highlighter-rouge&quot;&gt;@ngx-translate&lt;/code&gt;, but in my examples here I will use images.&lt;/em&gt;
&lt;em&gt;In the example, the application, my-app, only depends on the library neighbourhood-dogs-lib and should only display a picture of my dog and Pete’s dog, but not of Karen’s cat.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution-1---assets-in-the-application-source&quot;&gt;Solution 1 - Assets in the application source&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂assets
│     │  │  └─ 📂images
│     │  │     ├─ 🖼my-dog.jpg
│     │  │     └─ 🖼pete-dog.jpg
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
└─ 📂libs
   ├─ 📂neighbourhood-dogs-lib
   │  ├─ 📂src
   │  │  ├─ 📂lib
   │  │  │  ├─ 📄dog-list.component.ts
   │  │  │  └─ 📄dog.component.ts
   │  │  └─ ...
   │  └─ ...
   └─ 📂neighbourhood-cats-lib
      ├─ 📂src
      │  ├─ 📂lib
      │  │  ├─ 📄cat-list.component.ts
      │  │  └─ 📄cat.component.ts
      │  └─ ...
      └─ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I call this solution the “I’ll figure it out later”-solution.
The main idea was to set aside this problem because other tasks had higher priority, the monorepo wasn’t nearly as big as it is now.
Basically, the assets used by a library were put in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; folder of the application’s source directory.
This meant that the build of an application would simply include these assets out of the box.
This is fine for a single application, but as soon as a second application (let’s say, neighbourhood-animals-app) was to use this library, it, too, would need a copy of those assets in its source directory.
A change to one of the assets would also mean that two applications would need this change, which is prone to being forgotten.
Moreover, the image of Karen’s cat is nowhere to be found because at this time, no application needs it.&lt;/p&gt;

&lt;p&gt;As for the criteria:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;❌&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️**&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Kind of, if I don’t forget to copy our assets&lt;br /&gt;
**Depends on the amount of applications that need these extra assets&lt;/p&gt;

&lt;h3 id=&quot;solution-2---shared-assets-directory&quot;&gt;Solution 2 - Shared assets directory&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
├─ 📂libs
│  ├─ 📂neighbourhood-dogs-lib
│  │  ├─ 📂src
│  │  │  ├─ 📂lib
│  │  │  │  ├─ 📄dog-list.component.ts
│  │  │  │  └─ 📄dog.component.ts
│  │  │  └─ ...
│  │  └─ ...
│  └─ 📂neighbourhood-cats-lib
│     ├─ 📂src
│     │  ├─ 📂lib
│     │  │  ├─ 📄cat-list.component.ts
│     │  │  └─ 📄cat.component.ts
│     │  └─ ...
│     └─ ...
└─ 📂shared-assets
   └─ 📂images
      ├─ 🖼my-dog.jpg
      ├─ 🖼pete-dog.jpg
      └─ 🖼karen-cat.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the “Share everything”-solution. It was created to solve the main fault of the previous, namely that assets could exist twice.
Another important aspect here was to reduce the amount of times that &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; would be changed when more assets from another library would be added.
Because &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; implicitly affects all projects, this file should be kept untouched as much as possible.
So a one-time change was made to let the projects in &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; include these shared assets:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./shared-assets/images&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/images&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately this meant that all assets from all libraries would be added to those applications, which increases the bundle size significantly.
Another disadvantage is that the Nx dependency graph could not link changes in this directory with their corresponding libraries, unless every single file was mentioned in &lt;code class=&quot;highlighter-rouge&quot;&gt;nx.json&lt;/code&gt; with an implicit dependency for that library.
Ironically, this solves criteria 3 perfectly, because nothing is affected, so that’s the bare minimum.&lt;/p&gt;

&lt;p&gt;Going back through the criteria:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;⚠️*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;❌&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*There are no longer duplicate assets, but they’re not part of the project that utilizes them&lt;/p&gt;

&lt;h3 id=&quot;solution-3---custom-angular-builders&quot;&gt;Solution 3 - Custom Angular builders&lt;/h3&gt;

&lt;p&gt;A solution I came across was to copy the assets after a build into the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;-folder using a script in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file, but for obvious reasons that wouldn’t work easily when managing different apps.
Neither would it work with the dev-server, so I didn’t even go there.
Including assets by adding them to the build target’s assets array is how Angular itself prescribes to solve this problem, so let’s keep that.
However, I still wanted to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; file (and other files) as minimally as possible.&lt;/p&gt;

&lt;p&gt;Enter Angular 8 and the stable version of the CLI Builder API!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─ 📂apps
│  └─ 📂my-app
│     ├─ 📂src
│     │  ├─ 📂assets
│     │  │  └─ 📄include.json
│     │  ├─ 📂app
│     │  │  └─ ...
│     │  ├─ 📄index.html
│     │  └─ ...
│     └─ ...
└─ 📂libs
   ├─ 📂neighbourhood-dogs-lib
   │  ├─ 📂src
   │  │  ├─ 📂assets
   │  │  │  └─ 📂images
   │  │  │     ├─ 🖼my-dog.jpg
   │  │  │     └─ 🖼pete-dog.jpg
   │  │  ├─ 📂lib
   │  │  │  ├─ 📄dog-list.component.ts
   │  │  │  └─ 📄dog.component.ts
   │  │  └─ ...
   │  └─ ...
   └─ 📂neighbourhood-cats-lib
      ├─ 📂src
      │  ├─ 📂assets
      │  │  └─ 📂images
      │  │     └─ 🖼karen-cat.jpg
      │  ├─ 📂lib
      │  │  ├─ 📄cat-list.component.ts
      │  │  └─ 📄cat.component.ts
      │  └─ ...
      └─ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this new API, I was able to construct two new builders to replace the default &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular-devkit/build-angular:browser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular-devkit/build-angular:dev-server&lt;/code&gt; while still utilizing them.
These custom builders take the same options as the ones they replace and work more like a hook than a new builder.
The idea is to update the build target in the in-memory workspace before the default builder is actually executed.
Simply put, the custom builders read &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;, update the assets array and pass the updated version to the original builders.
A single configuration file (&lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; in the application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory) lets the custom builder read which libraries the application depends on.
It then determines its source directory using the workspace configuration file (&lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;) and adds the following to the assets array:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I wanted my-app to also include the neighbourhood’s cats, then I could change &lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; to also include &lt;code class=&quot;highlighter-rouge&quot;&gt;neighbourhood-cats-lib&lt;/code&gt; and the next build would add the following to the assets array:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-cats-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though I’d rather set the option that these assets are placed in sub folders, so I added that into the builders too.
That made the assets array into the following, which prevents libs from overwriting other assets:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-dogs-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/neighbourhood-dogs-lib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./libs/neighbourhood-cats-lib/src/assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/neighbourhood-cats-lib&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: The reason this &lt;code class=&quot;highlighter-rouge&quot;&gt;include.json&lt;/code&gt; file is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory was to make a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpTranslateLoader&lt;/code&gt; (using a simple RxJS &lt;code class=&quot;highlighter-rouge&quot;&gt;mergeMap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;forkJoin&lt;/code&gt;) read that same file to determine which translation assets to download.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s go through the criteria one more time:&lt;/p&gt;

&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Assets should exist only once, preferably in the project that utilizes them.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;An update on an asset should trigger the rebuild of all those applications depending on the library using the asset, and only those.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;A dependency on another library should be added with minimal change and with minimal affected projects.&lt;/td&gt;
            &lt;td style=&quot;width: 70px&quot;&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Because the assets are inside the library’s directory, the dependency graph can detect a change and determine the affected applications&lt;/p&gt;

&lt;p&gt;There is one caveat though: the dependency graph will only detect dependencies if the library is also imported in the code of the application, which would be the case mostly.
If that’s not the case (for example if the library containing assets has no components/services/modules/…), simply create an empty module in it and import it in the applications that depend on these assets.&lt;/p&gt;

&lt;h2 id=&quot;sharing-is-caring&quot;&gt;Sharing is caring&lt;/h2&gt;

&lt;p&gt;Because I care about the community I packaged this solution and published it to npm.
It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;ngx-library-assets&lt;/code&gt; and is available at &lt;a href=&quot;https://www.npmjs.com/package/ngx-library-assets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.npmjs.com/package/ngx-library-assets&lt;/a&gt;.
Install it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I do not actually own a dog, or a cat. Neither do Pete and Karen. I don’t even have any neighbours named Pete or Karen.&lt;/em&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on Reactive Programming and dealing with it. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Architecture" /><category term="Angular" /><category term="Builders" /><category term="Assets" /><category term="Library" /><category term="Monorepo" /><summary type="html">With Angular 6, which has now been released ages ago, workspaces were introduced. This meant that a repository could include multiple applications and libraries, eventually building a monorepository. I welcomed this change, as it meant that all applications in one repository could be kept up to date easily and more. But I’m not here to talk about all the advantages and disadvantages of a monorepo. Instead I’d like to talk about one specific challenge with this type of repository.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-09-09-angular-include-assets-libraries/tpryd.jpg" /></entry><entry><title type="html">Avoiding fragile tests with better design</title><link href="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html" rel="alternate" type="text/html" title="Avoiding fragile tests with better design" /><published>2019-08-23T00:00:00+00:00</published><updated>2019-08-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2019/08/23/test-design</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2019/08/23/test-design.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-most-basic-test-design&quot;&gt;The most basic test design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fragile-tests-example&quot;&gt;Fragile tests example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementing-the-api&quot;&gt;Implementing the API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-should-we-design-our-tests&quot;&gt;Why should we design our tests&lt;/h2&gt;

&lt;p&gt;We spend quite some time thinking about the design of our production code.
We do this because we want our code to be readable and maintainable.
The easier our code can be maintained, the easier we can implement new features and perform the necessary refactorings to implement those features.&lt;/p&gt;

&lt;p&gt;The absurd thing is that we only design our &lt;em&gt;production code&lt;/em&gt; and not our tests.
Our tests should be equally readable and maintainable as our production code, because if we don’t, we’ll spend too much time fixing and rewriting our tests.&lt;/p&gt;

&lt;p&gt;If we successfully create readable tests, they will also serve as very good documentation, describing the functionality of our code, and how it is expected to behave.&lt;/p&gt;

&lt;h2 id=&quot;the-most-basic-test-design&quot;&gt;The most basic test design&lt;/h2&gt;

&lt;p&gt;A common practice in writing tests is creating a test class for each production class. 
The reason why it is such a popular practice, is because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it’s easy to find tests for the production code you’re looking at,&lt;/li&gt;
  &lt;li&gt;it’s a quick way to write new tests because you don’t have to think about how and where to write tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this approach does have advantages, it can also be harmful for the maintainability of your application.
The disadvantage of this approach becomes clear when you need to refactor some classes.
If you move logic from one class to another, or even multiple other classes, you need to create new tests to test each of those classes, if you want to keep your ‘one class means one test class’ strategy.&lt;/p&gt;

&lt;p&gt;In performing such a refactoring we should not need to change any tests because we are not adding or changing any functionality, only moving logic around. 
However, if we want to keep our &lt;em&gt;design&lt;/em&gt; of having a test class for each production class, we need to refactor our tests as well.&lt;/p&gt;

&lt;p&gt;Even if we don’t want to keep this design, our tests will have to be modified because chances are big that the API of our production code changed. 
The parameters of methods might have changed, the fields of objects might have changed, constructors might have changed, etc.
If we are lucky, the tests still compile, but they will very likely fail. 
And the larger your application becomes, the more work it will be to get all tests compiling and green again.&lt;/p&gt;

&lt;p&gt;This phenomenon is known as &lt;a href=&quot;http://xunitpatterns.com/Fragile%20Test.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fragile tests&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fragile-tests-example&quot;&gt;Fragile tests example&lt;/h2&gt;

&lt;p&gt;An example of this phenomenon that we encountered on a project is the creation of an instance of an &lt;a href=&quot;https://martinfowler.com/bliki/DDD_Aggregate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;aggregate&lt;/a&gt;.
A lot of the tests in our project needed an instance of an aggregate. 
This was not a problem at first, we just created aggregates by using the constructor of the class and passing all the necessary data in it.
We created these instances in every test where we needed them, or sometimes created a method in the test class to not duplicate the construction too much in that class.&lt;/p&gt;

&lt;p&gt;To illustrate the issue we will look at a fictional simplified example about order creation.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_active_customer_then_order_creation_should_be_successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_an_inactive_customer_then_order_creation_should_result_in_an_illegal_argument_exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our problems began when we realised that the number of parameters in the constructor of our aggregate became too large. 
To resolve this issue we decided to create a class that contains all the data needed to call the constructor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer should be active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However when we tried to run all the tests, most of them didn’t compile anymore, which makes sense because we changed the contract.
Now we could have made it easier for ourselves by using some IntelliJ refactoring tools, but nevertheless, it’s absurd that so many tests could break by just changing the way we construct our aggregates.&lt;/p&gt;

&lt;p&gt;When we finally got all our tests green again by just creating the data class parameter, we were so happy and sick of the refactoring that we just stopped there, instead of addressing the underlying issue.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few months later, after adding some more features, we noticed that there was too much logic inside the constructor of our aggregate. 
The constructor became too big and complex so we decided to use the factory pattern to create new instances of the aggregate.&lt;/p&gt;

&lt;p&gt;Since we already used a &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderData&lt;/code&gt; as parameter of our constructor, all our tests still compiled and we were happy.
That is, until we ran our tests.&lt;/p&gt;

&lt;p&gt;Because we moved all construction logic from the constructor to the factory, the tests still compiled, but as they relied on this construction logic to create the instance the way we need it, they now failed.
Again we were faced with the issue of a large amount of tests that we had to refactor.&lt;/p&gt;

&lt;p&gt;Not having learned from our previous mistakes and being under time pressure, we decided to use the factory to create instances in all our tests. 
For the factory we needed some other services, repositories etc. which we all mocked.
This was a huge amount of work because of all the mocking we had to do just so we could create a consistent aggregate.
And we had to do this, again, in every test that needs an aggregate.&lt;/p&gt;

&lt;p&gt;After everything worked again, we were happy that the pile of work was done and we could move on with other things.&lt;/p&gt;

&lt;p&gt;In the weeks that followed, however, we started to notice that every time we changed the logic of the factory, we needed to change all the tests again because we had to add some extra mocks, data, etc. in all the tests.&lt;/p&gt;

&lt;p&gt;After a few of these iterations where we had to spend too much time fixing tests, we were fed up and decided (way too late of course) to free up some time for a more structural solution.&lt;/p&gt;

&lt;p&gt;We got some inspiration from a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; from Uncle Bob about his opinion on the statement that &lt;em&gt;TDD harms architecture&lt;/em&gt;.
One of the things he mentions in his post is that we shouldn’t make the mistake of coupling every test to the implementation of our production code.
Instead it would be better to put some sort of API in between our tests and the production code.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-api&quot;&gt;Implementing the API&lt;/h2&gt;
&lt;p&gt;We didn’t take Uncle Bob’s solution too literally and gave our own twist to it.&lt;/p&gt;

&lt;p&gt;For the specific problem of creating aggregate instances we decided to create a class that acts as a scenario builder.
In this &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderScenario&lt;/code&gt; we have a static factory method that will create a scenario that returns a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; when executed.
This means that when you need an order that is consistent and it doesn’t matter for your test which data is in the order, you can just use the default scenario when it’s executed.&lt;/p&gt;

&lt;p&gt;You could also create other default scenarios.
For example an order with an invalid customer, or with specific data that triggers a certain flow in the order process.&lt;/p&gt;

&lt;p&gt;This is very convenient for most tests.
However, in some tests we want to influence how the order is constructed, so we can test some custom cases other than a default scenario, specific for certain tests.
We implemented this by adding some methods to our scenario class that allows the scenario to be modified to the test’s needs.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the following example we created two tests that verify that the construction of an order works correctly.
In the first test, we use the default scenario without modifying anything, meaning, we test the happy path and verify that all data in the created order is correct.&lt;/p&gt;

&lt;p&gt;In the second test we verify that if we try to create an order for a customer that doesn’t exist, we get a validation exception.
We do this by creating a default scenario, then modifying the input data to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;customerId&lt;/code&gt; defined in the test, and then overriding the behaviour of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomerRepository&lt;/code&gt; mock.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_happyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createOrder_customerInactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateOrderScenario&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultScenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifyCreateOrderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;overrideCustomerRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidCustomerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;advantages-of-using-an-api&quot;&gt;Advantages of using an API&lt;/h2&gt;

&lt;p&gt;The advantage of this design is that our tests are not aware of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the use of a factory to create orders,&lt;/li&gt;
  &lt;li&gt;a validator class, used by the factory to validate the input for creating an order,&lt;/li&gt;
  &lt;li&gt;and how the constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; aggregate should be called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this example, it’s easy to see that our new tests are much less likely to break than our original &lt;strong&gt;design&lt;/strong&gt;. 
There is a clean layer between the implementation/design of our application, and the tests.
This lower coupling makes it easier to refactor the application, and implement new features at a higher pace.&lt;/p&gt;

&lt;p&gt;Also notice that we didn’t create a test class that maps one-to-one to a production code class.
Rather than testing our &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; object, our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactory&lt;/code&gt;, or our &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt;, we test the creation of an aggregate instance. 
We test what we expect our application to do, not what we expect our class to do.&lt;/p&gt;

&lt;p&gt;Whenever we have to change the logic of how an &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is created, we know that we have to look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderTest&lt;/code&gt; class.
We don’t have to look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderTest&lt;/code&gt; class, the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderFactoryTest&lt;/code&gt; class, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderValidator&lt;/code&gt; test class to see where we should add some tests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In no way is this design perfect, nor will it be suitable in every project.
However, it is a good starting point to have a lower coupling between tests and production code.
And it’s also a good way to take your test design further and make it more applicable and relevant to your specific project.&lt;/p&gt;

&lt;p&gt;This creates the opportunity to make a higher level language to express your tests, making them more readable, and express your intent of what your test is verifying more clearly.&lt;/p&gt;

&lt;p&gt;And even if you’re not convinced of this design, think about a design of your own, and start to improve the readability and maintainability of your tests.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Van Hees&quot;, &quot;github&quot;=&gt;&quot;pvanhees&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-van-hees-73671133&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter-van-hees/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-van-hees.jpg&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vanhees@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Van Hees is a Java Software Engineer at Ordina Belgium. He is passionate about Domain-Driven Design and producing clean software that works.&quot;}</name><email>pieter.vanhees@ordina.be</email></author><category term="Testing" /><category term="Test Driven Development" /><category term="Test Design" /><category term="Architecture" /><category term="Testing" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/fragile5.png" /></entry></feed>