<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-11-20T19:57:17+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">MongoDB Europe 2018</title><link href="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html" rel="alternate" type="text/html" title="MongoDB Europe 2018" /><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html">&lt;blockquote&gt;
  &lt;p&gt;MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products.
This year the venue took place in Old Billingsgate Walk, London.
Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#atlas&quot;&gt;Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-university&quot;&gt;MongoDB University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#common-query-mistakes&quot;&gt;Common query mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stitch&quot;&gt;Stitch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#meet-the-experts&quot;&gt;Meet the experts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-charts&quot;&gt;MongoDB Charts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing&quot;&gt;Closing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;atlas&quot;&gt;Atlas&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Atlas for your Enterprise&lt;/a&gt;, Vladislava Stevanovic &amp;amp; Veronica Tudor)&lt;/p&gt;

&lt;p&gt;Atlas is the database as a service offering (DBaaS) by MongoDB itself.
You can run your MongoDB in the cloud with the cloud provider of your choice, secured by default and automatically backed up.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;It is very easy to get started since a free tier is provided for everyone and you can deploy with the cloud provider of your choice (Azure , GCP, AWS).
A cluster can be started for free in just a few clicks.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/create-mongodb-atlas-cluster.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Start your own cluster: &lt;a href=&quot;https://cloud.mongodb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://cloud.mongodb.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloud&quot;&gt;Cloud&lt;/h3&gt;
&lt;p&gt;MongoDB Atlas is a cross-platform database which you can run on Amazon Web Services, Google Cloud or Microsoft Azure. 
It provides you an availability map that shows you which users are served from where and what the expected latency is.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/global-clusters.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;
&lt;p&gt;When your database grows it is easy to scale up or out.
You can scale up by increasing the size of the instance on which your database runs.
Scaling out is done by the process of sharding.
Here we are storing data of the same collection across multiple smaller partitions so we can distribute these partitions over multiple machines and increase read-write performance.
This way you do not run into the limitations of a single server.&lt;/p&gt;

&lt;p&gt;To ensure that MongoDB stores data equally across shards you need the right strategy of choosing a partition key.&lt;/p&gt;

&lt;h3 id=&quot;high-availability&quot;&gt;High availability&lt;/h3&gt;
&lt;p&gt;When a primary node goes down, a new primary is chosen immediately by a system of voting.
All nodes vote on who should become the new primary. 
The node with the majority of votes becomes the new primary.
A general guideline is to have a replica set that consists of one primary node and at least two secondary nodes.
To ensure maximum uptime the procedure to recover from instance failures is completely automated.&lt;/p&gt;

&lt;h1 id=&quot;mongodb-university&quot;&gt;MongoDB University&lt;/h1&gt;

&lt;p&gt;With &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB University&lt;/a&gt;, Mongo has its own platform for online courses.
A lot of them are available for free.
You can pick out courses according to your needs or profession.
There are training tracks for Developers, DBA’s and everyone else…
The courses are ideal to get you started or to deepen your knowledge when you want to be more advanced.
If you want you can even get certified!
I speak from my own experience when I say that the University platform is great to work with, and the courses are very well taught.
Find all available resources here: &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://university.mongodb.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/h1&gt;

&lt;p&gt;Recently the aggregation pipeline builder was introduced in &lt;a href=&quot;https://www.mongodb.com/products/compass&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Compass&lt;/a&gt;.
This allows you to create an aggregation pipeline step by step and that makes it easy to debug the pipeline along the way.
Let’s see an example: &lt;br /&gt;
Suppose I have a collection which contains documents that represent a person, like this :
Here are two examples of elements in the collections:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d073&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Didi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Verhoft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1996&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d074&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A person has the fields lastName, firstName and birthYear (and of course for some people more info could be stored).
I want to build a pipeline with the following functionality:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to filter out all people that share my lastname “Van Hoof”&lt;/li&gt;
  &lt;li&gt;Then I want to count how many times these people also share the same firstname and birthyear&lt;/li&gt;
  &lt;li&gt;Next I want to group them by birthYear so that I can see how many people were named “Nick Van Hoof “ (my fullname) in 1992.&lt;/li&gt;
  &lt;li&gt;Finally, I want them sorted on year in ascending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filter all with last name  “Van Hoof” and group by lastName, firstName and year:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Group by year and sort in ascending order:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see from the images above, Compass will show all the intermediary results. 
With one push of a button you can generate a command line query or the translation to a programming language.
Compass tells me the full aggregate will look like :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                        &lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$birthYear&quot;&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;na&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
                      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;occurences&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                              &lt;span class=&quot;s2&quot;&gt;&quot;$push&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$count&quot;&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&quot;_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would have been a lot harder to write this query manually, without the pipeline builder.&lt;/p&gt;

&lt;h1 id=&quot;common-query-mistakes&quot;&gt;Common query mistakes&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tips And Tricks for Avoiding Common Query Pitfalls, Christian Kurze&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;key-takeaways-from-this-session&quot;&gt;Key takeaways from this session&lt;/h3&gt;

&lt;p&gt;Generally speaking, there are three major causes of query slowness:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blocking operations&lt;/li&gt;
  &lt;li&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator&lt;/li&gt;
  &lt;li&gt;Case insensitive searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not uncommon that a properly tuned query delivers a factor 1000 speed-up.
So it’s definitely worth investigating.&lt;/p&gt;

&lt;h3 id=&quot;problem-1-blocking-operations&quot;&gt;Problem 1: blocking operations&lt;/h3&gt;
&lt;p&gt;This happens when you use an operator that needs all the data before producing results, so results can’t be streamed.
The most common culprits are the aggregation operators such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$sort&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$bucket&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$facet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a compound index to support your query and make sure that the sort order in the index is the same as in your query.&lt;/li&gt;
  &lt;li&gt;Offload the query to a secondary member.&lt;/li&gt;
  &lt;li&gt;Work around the issue by using a precalculated count.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-2-and-is-fast-or-is-slow&quot;&gt;Problem 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; is fast, &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; is slow&lt;/h3&gt;
&lt;p&gt;Sometimes a query is fast when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; operator but slow when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use a compound index to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; queries.&lt;/li&gt;
  &lt;li&gt;Use separate single field indexes to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-3-case-insensitive-searches-are-slow&quot;&gt;Problem 3: case insensitive searches are slow!&lt;/h3&gt;
&lt;p&gt;It is much harder for MongoDB to perform case insensitive searches because it has to match all possible permutations of the search string. 
For example, if you do a case insensitive search for the string “ace”, it has to match “ace”,”Ace”,”aCe”,”ACe”, and so on…&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(3.4 and higher) Support the query with a case insensitive index.&lt;/li&gt;
  &lt;li&gt;Alternatively, store a toLower() copy of the string in another field and index and query that field instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general-tips-and-tricks&quot;&gt;General tips and tricks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create an index on an element you are interested in instead of scanning the whole table.&lt;/li&gt;
  &lt;li&gt;When you query on a combination of fields create a compound index for these fields and not separate indices on each field.&lt;/li&gt;
  &lt;li&gt;…but be careful with the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt;!&lt;/li&gt;
  &lt;li&gt;Build indices in the background instead of making it a blocking operation.&lt;/li&gt;
  &lt;li&gt;Do not index all fields as this will negatively impact write performance. 
Investigate what you really need!&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.explain()&lt;/code&gt; to analyze queries.&lt;/li&gt;
  &lt;li&gt;Ops Manager and Atlas have a &lt;a href=&quot;https://docs.atlas.mongodb.com/performance-advisor/&quot;&gt;Performance Advisor&lt;/a&gt; to help you identify problematic queries.&lt;/li&gt;
  &lt;li&gt;Train your people.&lt;/li&gt;
  &lt;li&gt;Work smarter, not harder!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;stitch&quot;&gt;Stitch&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAJ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ch-Ch-Ch-Ch-Changes: Taking Your MongoDB Stitch Application to the Next Level With Triggers, Andrew Morgan&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Write less code and build apps faster!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stitch is the ‘Serverless platform from MongoDB’, and it comes with a free tier to play around!
It provides a very easy way to create an application without having to write lots of code in a separate backend.
The functionalities of Stitch are provided through an SDK.
Currently there are SDK’s for JavaScript, React Native, IOS and Android.
There is even an Electric Imp Library for IoT devices.&lt;/p&gt;

&lt;p&gt;Stitch has four main services :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stitch QueryAnywhere&lt;/li&gt;
  &lt;li&gt;Stitch Functions&lt;/li&gt;
  &lt;li&gt;Stitch Triggers&lt;/li&gt;
  &lt;li&gt;Stitch Mobile Sync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stitch-queryanywhere&quot;&gt;Stitch QueryAnywhere&lt;/h3&gt;
&lt;p&gt;QueryAnywhere enables you to query the database directly instead of going through a REST api.
The benefit here is that as a client application you are not restricted to what a REST api would expose but you can use all the power of the MongoDB Query Language directly:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, all of this is secured with authentication and fine grained authorization based on the logged in user or the contents of the documents.&lt;/p&gt;

&lt;h3 id=&quot;stitch-functions&quot;&gt;Stitch Functions&lt;/h3&gt;
&lt;p&gt;You can write JavaScript functions in the Stitch serverless platform and combine database calls with cloud services.
For example, send a message with Twilio to all users:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongodb-atlas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilioNumber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Then call callFunction from the client side&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stitchClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sendMessage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello from Stitch!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stitch-triggers&quot;&gt;Stitch Triggers&lt;/h3&gt;
&lt;p&gt;MongoDB does not provide triggers, as known in the RDBMS world.
With MongoDB change streams you can build your own triggers in your application.
This comes with the cost of handling the complexity of change streams yourself. 
For example: how to resume the change stream after a network issue?
So that’s why there is Stitch Triggers to make this easier.&lt;/p&gt;

&lt;p&gt;Stitch triggers combines change streams with Stitch Functions.
So when the inventory of an article goes up, Stitch Trigger calls a function that uses Twilio to send a text message to your client.&lt;/p&gt;

&lt;h3 id=&quot;stitch-mobile-sync&quot;&gt;Stitch Mobile Sync&lt;/h3&gt;
&lt;p&gt;Since 4.0, MongoDB provides a &lt;a href=&quot;https://www.mongodb.com/products/mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mobile&lt;/a&gt; version for IOS and Android.
With Stitch, you can sync your data in your mobile application with your database.
So now you can use the full MongoDB Query Language, including aggregations, on your mobile device and sync it with your database.&lt;/p&gt;

&lt;h3 id=&quot;built-in-external-integrations&quot;&gt;Built-in external Integrations&lt;/h3&gt;
&lt;p&gt;The fun with Stitch really starts when you combine all the goodness of Stitch with its integrations with cloud services like Twilio, AWS, Google, etc…
You can authenticate with Google, store files on S3 or spin up a cluster on Redshift after you send a text message with Twilio.
All of this can be hidden behind a simple function call for your application, or a trigger on your Atlas cluster.&lt;/p&gt;

&lt;h3 id=&quot;limited-to-stitch-ui&quot;&gt;Limited to Stitch UI?&lt;/h3&gt;
&lt;p&gt;Luckily MongoDB builds its products with developers in mind.
So you can import and export your Stitch applications and put them in a source control of your choice.&lt;/p&gt;

&lt;h1 id=&quot;meet-the-experts&quot;&gt;Meet the experts&lt;/h1&gt;
&lt;p&gt;At the conference you had the chance to book a 20 minute session with a MongoDB expert.
This was of great help in getting to know the new MongoDB Aggregation Pipeline builder.
The expert also gave some more tips in “thinking noSQL”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When data is shown together it is stored together – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data should be stored in the same way it is used – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;&lt;a href=&quot;https://sched.co/FmAp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Appliances Online, &lt;a href=&quot;https://ao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AO&lt;/a&gt;, is an international online appliances retailer.
They wanted to solve the issue of having data locked in different places so they wanted a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_customer_view/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single Customer View&lt;/a&gt;.
The idea was to get the data from all the different places and consolidate this in MongoDB.
We are talking here about data stored in legacy databases or messages going through queues.
The data could be the usual customer data and phone calls with customer care.
But also about parcels moving through the warehouse and delivery tracking.
They wanted to get the data while it’s hot, not in hourly or daily (or worse…) batches.
It was decided to use MongoDB to build up this materialised view of all different data streams, and Atlas to be able to focus on the application and not the database administration.&lt;/p&gt;

&lt;p&gt;The vast majority of the data resides in MsSql databases.
Extraction happens with &lt;a href=&quot;https://www.confluent.io/connector/kafka-connect-cdc-microsoft-sql/&quot;&gt;Kafka Connect SQL CDC&lt;/a&gt; to generate a stream of all create, update and delete operations into a stream, and push it to Kafka.&lt;br /&gt;
All with a simple piece of configuration like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msSqlSourceConnector1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connector.class&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;io.confluent.connect.cdc.mssql.MsSqlSourceConnector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tasks.max&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;initial.database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cdc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db-01.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.port&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1433&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They use Avro for the schema definition in combination with a schema-registry.
Interested clients can then read the data off the topics and do their single-view-thing on the data and save it to MongoDB.
The view is being built up, message per message.
Afterwards this view in  MongoDB is then pushed back to Kafka as another stream to provide this data to interested parties.
This avoids locking the data in one place.&lt;/p&gt;

&lt;p&gt;To finish it of they shared some lessons learned :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Watch out for frameworks generating queries.&lt;br /&gt;
 They can create bad performing aggregations or queries.&lt;br /&gt;
 For them it was better to write some queries explicitly.&lt;/li&gt;
  &lt;li&gt;Use custom _id for unique determination of your model, it saves an index and RAM&lt;/li&gt;
  &lt;li&gt;Watch out for unbounded document growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;&lt;a href=&quot;https://sched.co/FmAc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://amadeus.com/en&quot;&gt;Amadeus&lt;/a&gt; is the world’s largest technology company dedicated to the travel industry.
They have developed an impressive MongoDB farm, a large environment with 100 clusters.
Some of these clusters run more than 100 shards, while others have 100TB MongoDB databases.
Amadeus processes more than 1 trillion flight availability requests per day. 
For each single search you do on a website they receive 500.000 availability requests.
So search responsibly ;-)
The number of requests per day grows by 50% each year.
The second of January has by far the most requests, due to new years resolutions!
If this day is in the weekend all systems are pushed to their limits.
The airline fare database for one of their big clients, Kayak, is 100TB in size and changes daily.
That’s some pretty big numbers there.
No wonder that Amadeus is a happy user of the MongoDB Enterprise Operator for Kubernetes.&lt;/p&gt;

&lt;p&gt;Starting with the MongoDB Ops Manager v4.0, MongoDB officially supports the management and deployment of MongoDB in Kubernetes with Backup, Automation, Alerting and Monitoring.
A &lt;a href=&quot;https://github.com/mongodb/mongodb-enterprise-kubernetes&quot;&gt;MongoDB Enterprise Kubernetes Operator&lt;/a&gt; has app-specific awareness about stateful applications, so it knows how to deploy them.
This operator helps automating scripted tasks and enables MongoDB-as-a-service for developers.
It talks to Ops Manager and delegates the creation of clusters, shards, backups and automation to Ops Manager.
The underlying necessary Kubernetes infrastructure is orchestrated by the operator itself and so they work in conjunction.
This provides for clusters to be setup, scaled up/down/out/in, with a single simple yaml file.
And kubernetes provides the self-healing capabilities, how nice is that!?&lt;/p&gt;

&lt;p&gt;The following yaml file is all you need to spin up a 3 node replica set :&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb.com/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MongoDbReplicaSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myReplicaSet&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4.0.1&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;projectName&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myUberSecretCredentials&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I kid you not, that’s it.&lt;/p&gt;

&lt;p&gt;Scale out or back in with a simple change in the config yaml and&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; file.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mongodb-charts&quot;&gt;MongoDB Charts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sched.co/FtWP&quot;&gt;Bringing Data to Life with MongoDB Charts&lt;/a&gt;, Guillaume Meister.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, if you want to visualize data in a MongoDB database you either have to code it yourself, or rely on a 3rd party tool and migrate your data to a different platform (for example: Kibana with Elasticsearch is very popular).
Needless to say that this can be quite cumbersome.
&lt;a href=&quot;https://www.mongodb.com/products/charts&quot;&gt;MongoDB Charts&lt;/a&gt; intends to solve this.&lt;/p&gt;

&lt;p&gt;So what is it? 
MongoDB Charts is a visualization tool that runs as a standalone webserver so you can access it via a web browser.&lt;/p&gt;

&lt;p&gt;In Charts you define data sources by pointing to a collection or view on a MongoDB instance.
Then you can create all kinds of visualizations based on the data source, using various aggregation and filter functions.
Finally, you can combine charts into dashboards with a customized layout and you can share these with other users.&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, so to give you a better idea of what it is all about, let’s look at an animation of Charts in action:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/mongodb-charts-01.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Charts is still in beta but you can already try it out. 
MongoDB provides a docker image that you can &lt;a href=&quot;https://www.mongodb.com/download-center/charts&quot;&gt;download&lt;/a&gt; via the MongoDB download center.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;It was a great day being submerged in MongoDB-knowledge. 
This conference gave us plenty of opportunity to talk to other experts and learn about the new and upcoming features.&lt;/p&gt;

&lt;p&gt;Keep an eye on this space for more MongoDB goodness.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Chris&quot;, &quot;last_name&quot;=&gt;&quot;De Bruyne&quot;, &quot;permalink&quot;=&gt;&quot;/author/chris-de-bruyne&quot;, &quot;avatar&quot;=&gt;&quot;chris-de-bruyne.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;Principal MongoDB Consultant&quot;, &quot;email&quot;=&gt;&quot;chris.debruyne@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;ceedeebee2901&quot;, &quot;bio&quot;=&gt;&quot;Chris is a Senior Java Developer at Ordina Belgium, passionate about Java and MongoDB. Chris is passionate to help colleagues and clients to get the most out of MongoDB and the Java eco system.&quot;}</name><email>chris.debruyne@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="MongoDB" /><category term="DBA" /><category term="Data" /><category term="Kubernetes" /><category term="Conference" /><summary type="html">MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products. This year the venue took place in Old Billingsgate Walk, London. Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-mongodb-europe-2018/main-image-mdbe.png" /></entry><entry><title type="html">JOIN 2018</title><link href="https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018.html" rel="alternate" type="text/html" title="JOIN 2018" /><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018.html">&lt;h1 id=&quot;join-is-back&quot;&gt;JOIN is back!&lt;/h1&gt;

&lt;p&gt;As has become tradition, Ordina JWorks organised the annual JOIN conference on Oct 4th.
This edition was the 6th and once again it was bigger and better than the previous editions.&lt;/p&gt;

&lt;p&gt;JOIN is a free conference hosted every year by Ordina JWorks, by and for our own employees.
External colleagues, and basically anyone interested in Ordina JWorks, is also invited to come over and indulge themselves in the JWorks atmosphere.
To learn about new technologies, trends and best practices in our domain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/join-2018/join-food.jpg&quot; alt=&quot;Join 2018 Food&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/join-2018/join-crowd.jpg&quot; alt=&quot;Join 2018 crowd&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;talks--workshops&quot;&gt;Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#unbeatable-at-connect-4-with-wearables-and-computer-vision-by-frederick-bousson&quot;&gt;Frederick Bousson: Unbeatable at Connect 4 with Wearables and Computer Vision&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testimonial-tvh-myassetplanner-by-tom-verelst&quot;&gt;Tom Verelst: Testimonial TVH MyAssetPlanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visualizing-mandelbrot-fractals-using-riff-and-spring-cloud-function-by-dieter-hubau&quot;&gt;Dieter Hubau: Visualizing Mandelbrot fractals using Riff and Spring Cloud Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testimonial-hziv-by-pieter-van-hees&quot;&gt;Pieter Van Hees: Testimonial HZIV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-10-worst-mistakes-your-product-owner-can-make-by-julia-müller&quot;&gt;Julia Müller: The 10 worst mistakes your product owner can make&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deep-learning-in-practice-by-remco-runge&quot;&gt;Remco Runge: Deep learning in practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#innovation-without-asking-permission-by-bart-blommaerts&quot;&gt;Bart Blommaerts: Innovation without asking permission&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unbeatable-at-connect-4-with-wearables-and-computer-vision-by-frederick-bousson&quot;&gt;Unbeatable at Connect 4 with Wearables and Computer Vision by &lt;a href=&quot;https://twitter.com/fbousson&quot; target=&quot;_blank&quot;&gt;Frederick Bousson&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Frederick Bousson&quot; src=&quot;/img/join-2018/speaker-bousson.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Frederick Bousson kicked off the technology track with his talk about wearables.&lt;/p&gt;

&lt;p&gt;Wearables are becoming more mainstream every day as proven by the prevalence of fitness trackers and smart watches.
Smart glasses on the other hand are still very rare.
Mainly because they still look awful.
But improvement is on its way here as well: better looking sets are starting to appear like the &lt;a href=&quot;https://www.vuzix.com/products/blade-smart-glasses&quot; target=&quot;_blank&quot;&gt;Vuzix Blade&lt;/a&gt;.
This is important as humans are very vision-oriented: 90% of the information on the internet is processed via the eyes.&lt;/p&gt;

&lt;h3 id=&quot;connect-4&quot;&gt;Connect 4&lt;/h3&gt;
&lt;p&gt;To really demonstrate the power of smart glasses, Frederick was looking for an interesting case he could use as a demonstration.
The result of this quest was a way to help you become unbeatable at Connect 4.&lt;/p&gt;

&lt;p&gt;Connect 4 is a “solved game”, which means that there’s an algorithm that can’t be defeated (provided you get to go first).
Frederick went hunting in the Open Source community and discovered a program written by &lt;a href=&quot;http://www.brian-borowski.com/&quot; target=&quot;_blank&quot;&gt;Brian Borowski&lt;/a&gt; which contained this algorithm.&lt;/p&gt;

&lt;p&gt;4 years ago, &lt;a href=&quot;https://github.com/ScottBouloutian/OpenCV-Connect-Four-AI&quot; target=&quot;_blank&quot;&gt;Scott Bouloutian&lt;/a&gt; added visual processing code on top of that and yet another person ported the result to Google Glass.
Nice to see how, with open source, you have people who build upon each others’ work.&lt;/p&gt;

&lt;h3 id=&quot;image-processing&quot;&gt;Image processing&lt;/h3&gt;
&lt;p&gt;If you want to have your smart glasses solve your game of Connect 4, you’ll need to do some image processing.
And since the game revolves around colour which means your program doesn’t just need to see, it has to reason about these colours as well.&lt;/p&gt;

&lt;p&gt;Reasoning in colour is a pain in the ass though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opencv.org/&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt;, Open Computer Vision, is a great library for image processing and it’s available for a lot of programming languages.
Unfortunately it doesn’t use RGB (Red-Green-Blue) as a color space, it uses &lt;a href=&quot;https://www.learnopencv.com/why-does-opencv-use-bgr-color-format/&quot; target=&quot;_blank&quot;&gt;BGR&lt;/a&gt; (Blue-Green-Red) instead.
If your brain is conditioned to think in RGB, switching to BGR is not an easy task.&lt;/p&gt;

&lt;p&gt;Before you can start solving the game you need to know the position of the pieces that were already played.
And before you can find those pieces you need to know where the board is.
In order to find the board you’ll need to look for a large, blue rectangle.
Then you draw lines around it and find the corners.
Now your application “sees” the board.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/join-2018/draw-boxes.jpg&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The next step is to look at the location of the played pieces.
For this you need to look inside the board for concentrations of the right color.
If you’re using a board that has a tray for the game pieces this tray is also part of the board and you’ll need to cut off a bit from the bottom.&lt;/p&gt;

&lt;p&gt;Of course if you’re using a different light source, colours are perceived differently by the camera (e.g. the same colour in fluorescent lighting is green while it will be matched to yellow when using a light bulb). 
This means that the colours found by openCV might no longer match the ones you programmed in so you’ll also have to take the white balance into account.&lt;/p&gt;

&lt;p&gt;The resulting data is then mapped into a 2-dimensional array which then can be fed to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimax&quot; target=&quot;_blank&quot;&gt;Minimax AI&lt;/a&gt; solver.
This solver will use a decision tree and you can define the amount of positions it needs to think ahead.&lt;/p&gt;

&lt;p&gt;This process also takes advantage of alpha-beta pinning. 
It uses a binary tree to decide which option is the best, but as soon as it sees that one branch scores too low it will no long check that part of the tree.&lt;/p&gt;

&lt;p&gt;All in all it’s a pretty performant bit of code: OpenCV can take the image, process it and spit out the results in about 50ms.&lt;/p&gt;

&lt;h3 id=&quot;everything-is-possible&quot;&gt;Everything is possible&lt;/h3&gt;
&lt;p&gt;AR/VR can do anything, but that makes you wonder why it is not everywhere yet.&lt;/p&gt;

&lt;p&gt;There are quite a few reasons for this: first of all you need a business case.
Companies won’t invest a lot of money into something that doesn’t have a return on investment.
And even if there’s money to be made in it you still need customers.
People actually have to want your product.&lt;/p&gt;

&lt;h3 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h3&gt;
&lt;p&gt;The key takeaways of Frederick around image processing are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everything is possible&lt;/li&gt;
  &lt;li&gt;Think before you act&lt;/li&gt;
  &lt;li&gt;Just do it&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=ADk3GFbTks4&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt; on Youtube.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testimonial-tvh-myassetplanner-by-tom-verelst&quot;&gt;Testimonial TVH MyAssetPlanner by &lt;a href=&quot;https://twitter.com/tomverelst&quot; target=&quot;_blank&quot;&gt;Tom Verelst&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tom Verelst&quot; src=&quot;/img/join-2018/tomverelst-speaker-zoom.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Tom spoke about the application MyAssetPlanner he has been working on at &lt;a href=&quot;https://www.tvh.com/&quot; target=&quot;_blank&quot;&gt;TVH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TVH is a company which rents out equipment and can provide you with spare parts for a lot of tools and vehicles.&lt;/p&gt;

&lt;h3 id=&quot;myassetplanner&quot;&gt;MyAssetPlanner&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tomorrowland.com/&quot; target=&quot;_blank&quot;&gt;Tomorrowland&lt;/a&gt; is quite a big event and for setting up and tearing down they rent up to 160 machines (or “assets”).
For every asset a contractor will need to schedule it to be available at a certain time, resulting in more than 300 phone calls which need to be handled by the asset planner.&lt;/p&gt;

&lt;p&gt;TVH wanted to improve the customer experience and decided they were going to develop a new application to help with the planning of these assets: MyAssetPlanner was born.&lt;/p&gt;

&lt;p&gt;First there was a design sprint by &lt;a href=&quot;https://clockwork.ordina.be/&quot; target=&quot;_blank&quot;&gt;Clockwork&lt;/a&gt; in order to come up with a prototype and the most important business needs which needed to be implemented. 
This part took about two weeks.&lt;/p&gt;

&lt;p&gt;After this prototype, TVH started with the implementation of the first version which was put into production two months later.
This first version has currently been in use for four months including for the last iteration of Tomorrowland.&lt;/p&gt;

&lt;p&gt;For development, the &lt;a href=&quot;https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/&quot; target=&quot;_blank&quot;&gt;Spotify model&lt;/a&gt; was used which is focussed around:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;autonomous squads&lt;/li&gt;
  &lt;li&gt;do it yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The architecture is driven by events and uses &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot;&gt;Kafka&lt;/a&gt; as a backbone allowing you to just consume what you need, the events in which you are interested.&lt;/p&gt;

&lt;p&gt;The entire CI/CD pipeline is fully automated thanks to &lt;a href=&quot;https://www.spinnaker.io/&quot; target=&quot;_blank&quot;&gt;Spinnaker&lt;/a&gt;.
This allows a developer to commit a feature which gets automatically deployed to an acceptance environment.
As soon as the product owner approves the feature it will be rolled out to production.&lt;/p&gt;

&lt;p&gt;The teams work with Scrum Agile, it was interesting to hear about how they handle the sprint review.
After every sprint, different business stakeholders receive a scenario and one person of the team is present for assistance.
All the stakeholders must go through the scenario themselves.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;forces&lt;/code&gt; your stakeholders to work with the application instead of just watching a demo, resuling in a ton of valuable feedback.&lt;/p&gt;

&lt;h3 id=&quot;what-is-next&quot;&gt;What is next&lt;/h3&gt;
&lt;p&gt;For the moment there are a 17 customers using the tool. 
Very soon this will scale up to 5% of all TVH customers which amounts to 3.000.
After that there will be a gradual ramp up towards 20.000 customers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=K396nSVtfrE&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;visualizing-mandelbrot-fractals-using-riff-and-spring-cloud-function-by-dieter-hubau&quot;&gt;Visualizing Mandelbrot fractals using Riff and Spring Cloud Function by &lt;a href=&quot;https://twitter.com/dhubau&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dieter Hubau&quot; src=&quot;/img/join-2018/speaker-hubau.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;function-as-a-service&quot;&gt;Function as a Service&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://pivotal.io/platform/pivotal-function-service&quot; target=&quot;_blank&quot;&gt;Pivotal Function Service&lt;/a&gt; (PFS) is a pretty new addition to the Pivotal landscape.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://projectriff.io/&quot; target=&quot;_blank&quot;&gt;Riff&lt;/a&gt;, an open source project, is the base of PFS.
The idea behind Riff is to easily create functions and move these to the cloud.
Its name is derived from the guitar world as you can see &lt;a href=&quot;https://en.wikipedia.org/wiki/Ostinato#Riff&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, the project lead is &lt;a href=&quot;https://www.twitter.com/m_f_&quot; target=&quot;_blank&quot;&gt;Mark Fisher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially Zookeeper and Kafka were used to send messages between functions but this did mean a lot of extra overhead to set up.&lt;/p&gt;

&lt;p&gt;Google found out about Riff and came to Pivotal with &lt;a href=&quot;https://cloud.google.com/knative/&quot; target=&quot;_blank&quot;&gt;Knative&lt;/a&gt; which runs on &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;.
You can find its repository on &lt;a href=&quot;https://github.com/knative/&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Knative allowed Pivotal to remove a lot of the boilerplate needed to run with Kafka and Zookeeper.&lt;/p&gt;

&lt;p&gt;Knative has four components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/serving&quot; target=&quot;_blank&quot;&gt;Knative Serving&lt;/a&gt;: request/reply messages.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/build&quot; target=&quot;_blank&quot;&gt;Knative Build&lt;/a&gt;: auto-detect your code and create the required containers and sidecars.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/eventing&quot; target=&quot;_blank&quot;&gt;Knative Eventing&lt;/a&gt;: replaces Kafka and Zookeeper providing channels and subscriptions.&lt;/li&gt;
  &lt;li&gt;Fourth Knative block: makes it run really well on Google Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;riff&quot;&gt;Riff&lt;/h4&gt;
&lt;p&gt;A new version was released a couple of weeks ago.
Since this is a very fresh and new project, this did mean a lot of late nighters to migrate the code of the demo.
Experimental projects like this do tend to make frequent API changes during their initial development phase as backwards compatibility is currently not (yet) a requirement.&lt;/p&gt;

&lt;h3 id=&quot;mandelbrot&quot;&gt;Mandelbrot&lt;/h3&gt;
&lt;p&gt;One of the simplest mathematical functions which creates the most complex objects is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot; target=&quot;_blank&quot;&gt;Mandelbrot&lt;/a&gt; set.&lt;/p&gt;

&lt;p&gt;You can keep zooming in, resulting in more calculations the deeper you go.
It also tends to create pretty graphics which is nice for a demo.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;
&lt;p&gt;For a 400 x 400 image we will send a request to the backend to calculate the result for every pixel.&lt;/p&gt;

&lt;p&gt;This means that around 160.000 calls will be sent to do the calculation.
It is not the most efficient way to do the calculation but this demo is about using functions and not about calculating a Mandelbrot really fast.&lt;/p&gt;

&lt;p&gt;Riff uses containers to package your business logic.
There are two kinds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UserContainer: actual container contains the actual function&lt;/li&gt;
  &lt;li&gt;InitContainer: they run before your container.
You can use these to instantiate a database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For one function you need about 200MB of memory as it spins up a slimmed down Spring Boot in the backend.
All in all it is still pretty performant.
Dieter mentioned a talk of Dave Syer about performance in Spring which is very interesting to watch: &lt;a href=&quot;https://www.youtube.com/watch?v=97UTDmonq7w&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a nice talk showing what you can do with Riff but also a warning that it still is under development and using it might have you encounter bugs.
If that does happen do not hesitate to reach out to the Riff team.
When working on his talk, Dieter also raised several issues.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=812V9pAOxPw&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testimonial-hziv-by-pieter-van-hees&quot;&gt;Testimonial: HZIV by &lt;a href=&quot;https://twitter.com/pvanhees91&quot; target=&quot;_blank&quot;&gt;Pieter Van Hees&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Pieter Van Hees&quot; src=&quot;/img/join-2018/speaker-pieter.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pieter is currently on a project at &lt;a href=&quot;https://www.caami-hziv.fgov.be/en&quot; target=&quot;_blank&quot;&gt;HZIV&lt;/a&gt;, a government health agency which offers its members legal health and disability insurance.&lt;/p&gt;

&lt;h3 id=&quot;the-old-situation&quot;&gt;The old situation&lt;/h3&gt;
&lt;p&gt;A lot of old applications still run with the almighty &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;Cobol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;10 years ago, HZIV wanted to rewrite these using Java 5 and Swing but that rewrite didn’t go so well.
So they are still using these old beasts.&lt;/p&gt;

&lt;h3 id=&quot;a-new-start&quot;&gt;A new start&lt;/h3&gt;
&lt;p&gt;With more time comes more insight and it was decided to do a new rewrite and also to give the teams more freedom in how to set up their development environment and choosing the technologies that are best suited.&lt;/p&gt;

&lt;p&gt;Chosen technologies are, most notably:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 8 &amp;amp; 10&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/elk-stack&quot; target=&quot;_blank&quot;&gt;ELK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently the teams are working in an agile way, delivering fancy new features.&lt;/p&gt;

&lt;h3 id=&quot;working--hziv&quot;&gt;Working @ HZIV&lt;/h3&gt;
&lt;h4 id=&quot;what-is-great&quot;&gt;What is great?&lt;/h4&gt;
&lt;p&gt;You have great freedom to choose and test out new stuff. 
At the same time the atmosphere is relaxed, allowing you to explore without pressure.&lt;/p&gt;

&lt;h4 id=&quot;what-is-bad&quot;&gt;What is bad?&lt;/h4&gt;
&lt;p&gt;There is the risk of Developer Anarchy, where developers just introduce fancy new stuff without properly ironing out the edges.&lt;/p&gt;

&lt;p&gt;Some managers like to micro-manage.
The same managers also tend to introduce frequent scope changes which does not combine well.&lt;/p&gt;

&lt;h4 id=&quot;why-should-you-want-to-work-here&quot;&gt;Why should you want to work here?&lt;/h4&gt;
&lt;p&gt;Appearantly working at HZIV feels like being in a spy HQ.
The combination of some old furniture and modern technology create a very particular atmosphere.&lt;/p&gt;

&lt;p&gt;Very interesting to hear about an organization who has embraced a new way of working and is currently in the process of finding their way around it.
To see what goes well and what does not.&lt;/p&gt;

&lt;p&gt;It is also surprising that this can happen in a government agency as most of them in Belgium are not known to be very innovative.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=R-4nHw77yMY&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-10-worst-mistakes-your-product-owner-can-make-by-julia-müller&quot;&gt;The 10 worst mistakes your Product Owner can make by &lt;a href=&quot;https://twitter.com/JM_AgileAnalyst&quot; target=&quot;_blank&quot;&gt;Julia Müller&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Julia Müller&quot; src=&quot;/img/join-2018/speaker-julia1.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-product-owner&quot;&gt;A product owner&lt;/h3&gt;
&lt;p&gt;Is responsible for maximizing the value of the product and the work of the development team.&lt;/p&gt;

&lt;h3 id=&quot;1-po-doesnt-know-hisher-product&quot;&gt;1. PO doesn’t know his/her product&lt;/h3&gt;
&lt;p&gt;Having no knowledge of your product is fatal, because you are responsible and accountable for the success of your product.&lt;/p&gt;

&lt;p&gt;A good tip is that as a product owner you should be able to explain your product in 3 minutes.&lt;/p&gt;

&lt;p&gt;Use a &lt;a href=&quot;https://medium.com/qdivision/the-product-canvas-edf8df531&quot; target=&quot;_blank&quot;&gt;product canvas&lt;/a&gt; to help you understand your product.&lt;/p&gt;

&lt;h3 id=&quot;2-team-doesnt-have-a-product&quot;&gt;2. Team doesn’t have a product&lt;/h3&gt;
&lt;p&gt;If a team does a lot of little tasks, it will miss context and will have to endure frequent scope changes.&lt;/p&gt;

&lt;p&gt;This means that the team will have very little focus which is not very effective.&lt;/p&gt;

&lt;h3 id=&quot;3-there-is-no-vision-for-the-product&quot;&gt;3. There is no vision for the product&lt;/h3&gt;
&lt;p&gt;It is bad when user stories describe solutions like: &lt;code class=&quot;highlighter-rouge&quot;&gt;The user needs a button to be able to ... &lt;/code&gt;
This causes the team to stop thinking about what would be the best possible solution.
Do not forget that a team of people has more knowledge than one individual.&lt;/p&gt;

&lt;p&gt;Scrum is developing towards a goal and is about autonomous teams.
The vision which you as production owner provide must provide direction and guidance for the team.&lt;/p&gt;

&lt;p&gt;A helpful tool is a &lt;a href=&quot;https://www.linkedin.com/pulse/postcards-from-future-agile-technique-ryan-thomas-hewitt&quot; target=&quot;_blank&quot;&gt;“postcard from the future”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;4-the-non-economic-dreamer&quot;&gt;4. The non-economic dreamer&lt;/h3&gt;
&lt;p&gt;Every feature adds complexity, increases the chance of failure, and makes future changes more expensive.&lt;/p&gt;

&lt;p&gt;A product owner must be able to reason economically as every feature should add a clear benefit.&lt;/p&gt;

&lt;p&gt;A product owner should also not hide behind ‘something’ the tech team does.
As those ‘things’ also determine the cost and business value of your product.&lt;/p&gt;

&lt;h3 id=&quot;5-tech-debt-not-my-problem&quot;&gt;5. Tech Debt not my Problem.&lt;/h3&gt;
&lt;p&gt;A good technical design is important for the success of your product. 
&lt;a href=&quot;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;XX&quot; src=&quot;/img/join-2018/designStaminaGraph.gif&quot; width=&quot;60%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example: 
Investing in delivery speed might not add a direct business feature but will reduce development cost and allow you to provide new features faster in the future.
Customer value is different to business value.
An investment can also lead to business value.&lt;/p&gt;

&lt;h3 id=&quot;6-the-yes-sayer&quot;&gt;6. The YES-sayer&lt;/h3&gt;
&lt;p&gt;If you always say ‘yes’ to every feature request then your product may become a Frankenstein monster.&lt;/p&gt;

&lt;p&gt;It is better to discuss more upfront instead of implementing features you might need to remove later.&lt;/p&gt;

&lt;h4 id=&quot;wishful-thinking&quot;&gt;Wishful thinking&lt;/h4&gt;
&lt;p&gt;Don’t fall in the trap of wishful thinking.
Do not just assume that your product will be a success.&lt;/p&gt;

&lt;p&gt;Know how to validate your assumptions and make sure that you have a good feedback loop so that you know that the features you provided fulfil the business requirements.&lt;/p&gt;

&lt;h4 id=&quot;ignoring-the-facts&quot;&gt;Ignoring the facts&lt;/h4&gt;
&lt;p&gt;Ignoring the obvious signs that you are not going to meet your goal.&lt;/p&gt;

&lt;p&gt;So many demos are made with Powerpoint, a real sprint review should be the user starting the application and using it themselves.
If they get stuck you need to ask them why, as these situations will give you great feedback.&lt;/p&gt;

&lt;h3 id=&quot;7-obsessing-over-details&quot;&gt;7. Obsessing over details&lt;/h3&gt;
&lt;p&gt;The product owner who used to be an analyst.&lt;/p&gt;

&lt;p&gt;A huge backlog is not good, a good exercise is to take the top 50 and delete the rest.&lt;/p&gt;

&lt;p&gt;In a huge backlog there is a lot ‘relevant’ information in the stories, however this information tends to become stale.
Later on it will also become increasingly difficult to implement these stories as there is no certainty that the information they contain is still correct.&lt;/p&gt;

&lt;p&gt;Another big no-no is having a ‘definition of done’ being more than one page long for a user story.&lt;/p&gt;

&lt;p&gt;A nice concept is the three C’s:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Card (post it - fat pen): a story is just a single card. This is a reminder that we need to talk about this.&lt;/li&gt;
  &lt;li&gt;Criteria: Only Acceptance Criteria on the story.&lt;/li&gt;
  &lt;li&gt;Conversation: During refinement there will be a conversation with the team and then you will expand the story.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also be careful not to be a perfectionist.
No first release is going to be perfect.
Being fast in the market beats having a complete product.&lt;/p&gt;

&lt;h3 id=&quot;8-no-presence-no-communication&quot;&gt;8. No presence, no communication&lt;/h3&gt;
&lt;p&gt;Communication is one of the most important factors of failure in an organization.
A product owner must be with the team and not communicate from the sidelines.&lt;/p&gt;

&lt;h3 id=&quot;9-crossing-competences&quot;&gt;9. Crossing competences&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;This is not a 13, but it is much smaller&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your team says it is a 13, it is a 13.
They have the knowledge to estimate and implement a story.&lt;/p&gt;

&lt;h3 id=&quot;10-product-owner-is-the-only-one-filling-the-backlog&quot;&gt;10. Product owner is the only one filling the backlog&lt;/h3&gt;
&lt;p&gt;Let the team bring their own ideas to the backlog.
This will help them focus and deliver a better solution.&lt;/p&gt;

&lt;p&gt;Focus on what truly matters for your product.&lt;/p&gt;

&lt;h3 id=&quot;questions&quot;&gt;Questions&lt;/h3&gt;
&lt;h4 id=&quot;the-product-owner-has-a-lot-of-hats-how-can-he-manage-all-this&quot;&gt;The product owner has a lot of hats, how can he manage all this?&lt;/h4&gt;
&lt;p&gt;The product owner is indeed responsible for a lot of stuff.&lt;/p&gt;

&lt;p&gt;But being responsible does not mean that you need to deliver everything yourself. 
Learn to delegate.&lt;/p&gt;

&lt;p&gt;The product owner should also not be the only one who meets the stakeholders and not everybody should have to be a stakeholder.
Learn to remove stakeholders who do not contribute to the business value.
Remember the Frankenstein monster.&lt;/p&gt;

&lt;h4 id=&quot;can-a-product-owner-ignore-stakeholders-wishes&quot;&gt;Can a product owner ignore stakeholders wishes?&lt;/h4&gt;
&lt;p&gt;A Product Owner should be able to take his own decisions and decide to run some tests on customers and collect the resulting data.&lt;/p&gt;

&lt;p&gt;It is sometimes better to ask for forgiveness later.&lt;/p&gt;

&lt;p&gt;If the product owner has no trust of the organization making him/her unable to take decisions, then that person should not be the product owner.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch her &lt;a href=&quot;https://www.youtube.com/watch?v=edI6wDzIo8k&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;deep-learning-in-practice-by-remco-runge&quot;&gt;Deep learning in practice by Remco Runge&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Remco Runge&quot; src=&quot;/img/join-2018/remco-speaker-zoom.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Machine learning: you try to get the good algorithm to find the stuff you want to find.&lt;/p&gt;

&lt;p&gt;Deep Learning is based on biology, about how people thought the brain functioned. 
The assumption was proven wrong but the basic principles still work.&lt;/p&gt;

&lt;p&gt;Tensorflow has a nice &lt;a href=&quot;https://playground.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;playground&lt;/a&gt; where you can see these effects live in action.&lt;/p&gt;

&lt;p&gt;Deep learning has two flows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Forward propagation: feed data through it.&lt;/li&gt;
  &lt;li&gt;Backward propagation: update weights so the next iteration will be better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can define weights on input in order to make certain inputs more important.&lt;/p&gt;

&lt;p&gt;Deep learning requires a very large network with a large amount of nodes and a lot of hidden layers.&lt;/p&gt;

&lt;p&gt;The early layers allow your network to distinguish basic structures within your data.
Further down in the layers the network will learn more detailed features like; eyes, ears, …&lt;/p&gt;

&lt;p&gt;It is cool that the network learns these features about how to recoginize a person just by providing it with pictures of faces. 
We did not provide it with the concept &lt;code class=&quot;highlighter-rouge&quot;&gt;eyes&lt;/code&gt; but eventually, in one of the iterations the network started to take eyes into consideration.&lt;/p&gt;

&lt;h3 id=&quot;deep-learning-at-ordina&quot;&gt;Deep Learning at Ordina&lt;/h3&gt;

&lt;h4 id=&quot;workshop-hack-a-drone&quot;&gt;Workshop: hack a drone.&lt;/h4&gt;
&lt;p&gt;A small drone was equiped with deep learning to detect and identify objects by using the &lt;a href=&quot;https://deeplearning4j.org/&quot; target=&quot;_blank&quot;&gt;Deep Learning for Java&lt;/a&gt;.
In a short demo we saw it could identify a notebook.&lt;/p&gt;

&lt;h4 id=&quot;tic-tac-toe&quot;&gt;Tic Tac Toe&lt;/h4&gt;
&lt;p&gt;In contrary to &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(game)&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt;, Tic Tac Toe just has 360.000 possible moves making it easier to use for a demo.&lt;/p&gt;

&lt;p&gt;The network for this demo learned by playing against some random opponents without any real strategy, this made it quite dumb. 
You could improve this by letting it play against itself.&lt;/p&gt;

&lt;h4 id=&quot;digital-railway-survey&quot;&gt;Digital Railway Survey&lt;/h4&gt;
&lt;p&gt;The idea is to recognize signs next to the railway and verify if these have been installed at the correct place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_detection&quot; target=&quot;_blank&quot;&gt;You Only Look Once&lt;/a&gt; is a very cool algorithm which gives you very nice bounded boxes around the objects on the images making it easier for your network to know where it needs to look and thus preventing you from processing unrelevant pictures.&lt;/p&gt;

&lt;p&gt;It was also nice to see that with deep learning the system can distinguish signs from a passing train even when we would be unable to see these signs, let alone see what has been written on it.&lt;/p&gt;

&lt;h3 id=&quot;questions-1&quot;&gt;Questions&lt;/h3&gt;
&lt;h4 id=&quot;how-long-does-it-take-to-get-started&quot;&gt;How long does it take to get started?&lt;/h4&gt;
&lt;p&gt;If you work with existing data sets and known algorithms, 15 lines of code is enough.&lt;/p&gt;

&lt;p&gt;Remco mentioned that for a brand new project it can easily take up to 55 days just to show that deep learning is possible for a specific business case.
It takes a long time to gather the required data.
You need to label it and make sure it is diverse enough so your model is not too focussed on one specific subset of input.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=NcT7Hif19hk&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;innovation-without-asking-permission-by-bart-blommaerts&quot;&gt;Innovation without asking permission by &lt;a href=&quot;https://twitter.com/DaggieBe&quot; target=&quot;_blank&quot;&gt;Bart Blommaerts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bart Blommaerts&quot; src=&quot;/img/join-2018/speaker-bart.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;service-decomposition&quot;&gt;Service decomposition&lt;/h3&gt;
&lt;p&gt;When you want to split up a monolith into smaller applications there are three patterns you can follow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Split: define vertical functional boundaries.
This does not happen to be possible in all old applications.&lt;/li&gt;
  &lt;li&gt;Strangle: extract and re-implement logic in new components.&lt;/li&gt;
  &lt;li&gt;Extend: new functionality in new microservices. Do pay attention to not create a distributed micro-&lt;strong&gt;**&lt;/strong&gt;** fest, also known as a distributed monolith.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally you will not just use one pattern but all three.&lt;/p&gt;

&lt;h3 id=&quot;anti-corruption-layer&quot;&gt;Anti-corruption layer&lt;/h3&gt;
&lt;p&gt;The anti-corruption layer translates to and from different models.
It allows you to enforce loose coupling between contexts.&lt;/p&gt;

&lt;p&gt;You can use different patterns for it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shared repository: just share the same repository between various services.&lt;/li&gt;
  &lt;li&gt;Data-synchronized repository: each microservice has one database asynchronously synchronize the data.&lt;/li&gt;
  &lt;li&gt;Event-driven synchronised repository: the main idea behind events, do not wait for data to be asked but just publish it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An event happened in the past and it contains three types of data:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data it owns: this is data tied owned by the publisher in the event&lt;/li&gt;
  &lt;li&gt;Data it needs: this is data which can originate from other services but which is necessary to handle the event&lt;/li&gt;
  &lt;li&gt;Referenced Data: data which might be relevant for the event. 
For example when booking a holiday, the reference temperatures of the location to where you want to travel to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event should contain enough information so that consumers do not need to query for additional data.
Otherwise you will not think properly about your bounded contexts and you will not be able to build a loosely coupled system.&lt;/p&gt;

&lt;p&gt;In an ideal world you can talk with your business stakeholders about how these events should look like.&lt;/p&gt;

&lt;h3 id=&quot;bounded-contexts&quot;&gt;Bounded contexts&lt;/h3&gt;
&lt;p&gt;Bart indicated that it is very interesting to look at the &lt;a href=&quot;https://skillsmatter.com/skillscasts/1431-greg-young-ddd-projects&quot; target=&quot;_blank&quot;&gt;DDD lite movie&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/gregyoung&quot; target=&quot;_blank&quot;&gt;Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It may look complex and after watching it the first time you might decide that you don’t ever want to do Domain-Driven Design, but make sure to watch it a second time and things will definitely become more clear. ;-)&lt;/p&gt;

&lt;h4 id=&quot;identify-the-domain&quot;&gt;Identify the domain&lt;/h4&gt;
&lt;h5 id=&quot;where-does-your-microservice-start&quot;&gt;Where does your microservice start?&lt;/h5&gt;
&lt;p&gt;Identify domains and subdomains.
These subdomains tend to correspond with your bounded contexts.&lt;/p&gt;

&lt;h5 id=&quot;how&quot;&gt;How?&lt;/h5&gt;
&lt;p&gt;Look at the data model:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Talk to business stakeholders.
Make the list of subdomains explicit.&lt;/li&gt;
  &lt;li&gt;Look at the data.&lt;/li&gt;
  &lt;li&gt;Look at the code, both existing and historically.
If two files always get committed together, they most likely belong to the same bounded context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;integration-patterns&quot;&gt;Integration patterns&lt;/h4&gt;
&lt;p&gt;Between bounded contexts there can be lots of integration patterns. A great source of information about these patterns can be found on the site of Gregor Hohpe: &lt;a href=&quot;https://www.enterpriseintegrationpatterns.com/gregor.html&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;
&lt;p&gt;The previous concepts were then shown in a short live demo providing a real implementation.&lt;/p&gt;

&lt;p&gt;What was interesting to see was that &lt;a href=&quot;https://avro.apache.org/docs/1.8.1/spec.html&quot; target=&quot;_blank&quot;&gt;Apache Avro&lt;/a&gt; was used as a schema for the events.
This shared schema repository is then the only coupling between your services.
Using a schema allows your consumer services to see if they can process an event or not.&lt;/p&gt;

&lt;h3 id=&quot;apis&quot;&gt;APIs&lt;/h3&gt;
&lt;p&gt;There exist a lot of API guidelines which you can use as baseline for your own, for example: &lt;a href=&quot;https://developer.paypal.com/docs/api/&quot; target=&quot;_blank&quot;&gt;Paypal&lt;/a&gt;, &lt;a href=&quot;https://zalando.github.io/restful-api-guidelines/&quot; target=&quot;_blank&quot;&gt;Zalando&lt;/a&gt;, …&lt;/p&gt;

&lt;p&gt;This talk is not about API design but when you design an API please keep Postel’s law in the back of your head.
Postel’s Law: &lt;code class=&quot;highlighter-rouge&quot;&gt;Be conservative in what you do, be liberal in what you accept from others&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do make sure that you have documented your API using: Swagger, Avro, HAL, RAML.&lt;/p&gt;

&lt;h3 id=&quot;without-asking-permission&quot;&gt;Without asking permission?&lt;/h3&gt;
&lt;p&gt;Continuous experimentation is the first thing to introduce.
You should really try to introduce that culture.
Microservices are small and thus can be easily thrown away.&lt;/p&gt;

&lt;p&gt;Use feature toggles and monitor your users in order to gather user feedback about which business features are the most interesting for your stakeholders.
With traffic routing you can make sure that only certain users get access to certain features allowing you to experiment with a very low risk.&lt;/p&gt;

&lt;p&gt;Use this data, these metrics you gathered, to convince your business stakeholders.&lt;/p&gt;

&lt;h3 id=&quot;distributed-systems&quot;&gt;Distributed systems&lt;/h3&gt;
&lt;p&gt;Are hard, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot; target=&quot;_blank&quot;&gt;eight fallacies of distributed computing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;See the hard nature of distributed systems as a way to introduce monitoring and logging (&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;Grafana&lt;/a&gt;, &lt;a href=&quot;https://prometheus.io/&quot; target=&quot;_blank&quot;&gt;Prometheus&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You can also provide this monitoring data to your users to give them more insights in the application, giving them direct feedback of their actions.&lt;/p&gt;

&lt;p&gt;Which can give you new opportunities.
For example: They will see failures and they will want this to be resolved.&lt;/p&gt;

&lt;h3 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h3&gt;
&lt;p&gt;Do not forget to take maintenance into consideration before adopting some new technology.
Because you should not forget that you will still need to maintain it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=OWwciV6Z6jA&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the &lt;a href=&quot;https://www.slideshare.net/BartBlommaerts/innovation-without-asking-permission-102804954&quot; target=&quot;_blank&quot;&gt;slides&lt;/a&gt; of his talk on Slideshare.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;thanks-kevin&quot;&gt;Thanks Kevin&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Kevin Van den Abeele&quot; src=&quot;/img/join-2018/join-kevin.jpg&quot; /&gt;&lt;/span&gt;
Many thanks to our colleague Kevin for organizing the JOIN event.
Without all of his work it would not have been as great as it was.&lt;/p&gt;

&lt;h1 id=&quot;there-is-much-more&quot;&gt;There is much more&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;This was just summary of some of the talks we had on JOIN, there were many more as you can see on &lt;a href=&quot;https://www.youtube.com/watch?v=bnWMnSAdAi8&amp;amp;list=PLgWyY-g33NlUUIkxhIyI6A-6DveDVI4D1&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;next-year&quot;&gt;Next Year&lt;/h2&gt;
&lt;p&gt;Hope to see you around next year. Keep an eye out for future updates on our &lt;a href=&quot;https://ordina-jworks.github.io/join/&quot; target=&quot;_blank&quot;&gt;JOIN site&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Conference" /><category term="Join" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">JOIN is back!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/join-2018/join-2018.png" /></entry><entry><title type="html">Managing translations with Crowdin</title><link href="https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin.html" rel="alternate" type="text/html" title="Managing translations with Crowdin" /><published>2018-11-05T00:00:00+00:00</published><updated>2018-11-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin.html">&lt;blockquote&gt;
  &lt;p&gt;As your application continues to grow, you may want to support more and more languages.
Managing all that in the source code will become very hard and prone to errors.
Luckily there’s an easy solution to that and it’s called Crowdin!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-crowdin&quot;&gt;What is Crowdin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-features&quot;&gt;Key features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-app-translations&quot;&gt;In app translations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-crowdin&quot;&gt;What is Crowdin&lt;/h2&gt;
&lt;p&gt;Crowdin is an online platform that allows you to do translations through a visual interface.
You can appoint people as translators for any natural language.
Either an integration with your Git repository or a CLI tool can be used to get the source strings into Crowdin.
After uploading the source strings, the translators can get to work.
They’ll be notified whenever there’s something new to translate.
When they’re done, approvers can start proof-reading with the help of some thorough quality assurance functionalities.
You’ll never miss a translation again because it will clearly be marked as not being translated.
Strings that are removed from the source file will also be removed from all translations.
The translated files can be downloaded at any moment and will be in the exact same format as the source file.
In other words, clean and up-to-date translation files!&lt;/p&gt;

&lt;p&gt;Translator view:
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1422px;&quot; alt=&quot;Crowdin translator view&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/translator_mode.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Approver view:
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1439px;&quot; alt=&quot;Crowdin approver view&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/approver_mode.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-features&quot;&gt;Key features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A large number of file formats are supported, ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt; files.
It can thus be used for Angular, React, Vue … applications as well as a Spring Boot service and so on.&lt;/li&gt;
  &lt;li&gt;Crowdin has a very clever parser and detects thing such as HTML tags and variables.
It will warn you if they are translated and no longer match the original tags/names.&lt;/li&gt;
  &lt;li&gt;Quality assurance checks will help the approver in verifying the translations.&lt;/li&gt;
  &lt;li&gt;Extra context can be provided for each source string to help translators understand what exactly they need to translate.&lt;/li&gt;
  &lt;li&gt;Integration with source control systems is very easy and will make sure that the source strings are up-to-date with your Git repository. 
Translations will automatically be pushed to your Git repository.&lt;/li&gt;
  &lt;li&gt;There’s even the possibility to integrate it with your website and have people do the translations on your website directly.
That way the translators get a lot of context of what to translate.&lt;/li&gt;
  &lt;li&gt;If you’re unable to do the translation for a certain language, 
Crowdin allows you to easily hire professional translators!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;h3 id=&quot;account&quot;&gt;Account&lt;/h3&gt;
&lt;p&gt;To start using Crowdin, you of course need an account at &lt;a href=&quot;https://crowdin.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Crowdin.com&lt;/a&gt;. 
There’s a limited free trial. 
After that you can choose from a variety of payment plans depending on the number of source strings and projects you’ll have.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The number of projects you need on Crowdin depends on your setup.
However, it’s recommended to create a project for each Git repository.
So if your front- and backend application live in the same repository, you can configure multiple source files within one project.
If not, you’ll need to create two separate projects on Crowdin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once logged in, you can create a new project. 
You can choose the source language and the languages you wish to translate to. 
Then go to the project’s settings and then to &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;.
There you’ll find a project identifier and a API key. 
We’ll need those later when setting up Crowdin in our project.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 744px;&quot; alt=&quot;Crowdin project settings&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/languages.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-in-your-project&quot;&gt;Setup in your project&lt;/h3&gt;
&lt;p&gt;First we need to install the Crowdin CLI. 
For Mac you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install crowdin&lt;/code&gt;. 
For Windows an &lt;a href=&quot;https://support.crowdin.com/cli-tool/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;installer&lt;/a&gt; is available.&lt;/p&gt;

&lt;p&gt;Once installed, open a terminal and go to the root of your project and run &lt;code class=&quot;highlighter-rouge&quot;&gt;crowdin generate&lt;/code&gt;.
This will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;crowdin.yml&lt;/code&gt; file that is used to configure Crowdin in your project.
In that file four things need to be changed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;project_identifier&lt;/code&gt;: the one you find under &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; on the Crowdin site&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_key&lt;/code&gt;: also under &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;: this should point to the source translation file (e.g. in an Angular app &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/assets/i18n/en.json&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;translation&lt;/code&gt;: the translated files will end up here (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/assets/i18n/%two_letters_code%.json&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t recommend selecting the source language as a target language, because it will then be overwritten when downloading the translations.
You could put the source language file in a separate directory if you prefer the source language being editable on Crowdin as well.
However, you would have to update the source file manually when there are changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are &lt;a href=&quot;https://support.crowdin.com/configuration-file/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;more options&lt;/a&gt; and regexes available, but these are the only ones required to set up Crowdin in an Angular app for example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;upload-and-download-translations&quot;&gt;Upload and download translations&lt;/h3&gt;
&lt;p&gt;There are two options here: either you integrate Crowdin with your Git repository or you up and download the translations manually (or automate it using CLI commands).
I personally prefer integrating it with Git so we’ll get to that first.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;It’s not possible to use both at the same time because you’ll end up with multiple source files on Crowdin.com.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git-integration&quot;&gt;Git integration&lt;/h4&gt;
&lt;p&gt;On the Crowdin website, go to the project’s settings again, then to &lt;code class=&quot;highlighter-rouge&quot;&gt;Integration&lt;/code&gt;.
Choose the source control system you’re using and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Set Up Integration&lt;/code&gt; (or choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt; if you’re on a self-hosted version).
For GitHub and GitLab you’ll be redirected to their website to authorize Crowdin to use your account.
If you chose &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt; you’ll need to generate a token yourself and paste it into the correct field together with the URL to your self-hosted source control system.
Next you can choose which branches you want to watch for changes to the source language file and choose a name of the branch to where translations should be pushed.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Which source branch you wish to use depends on your workflow. 
In my case, we work with short-lived feature branches and once they are done, we merge them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.
So, the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch is the one being watched by Crowdin, since it will have all the correct source strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 903px;&quot; alt=&quot;Crowdin Git integration&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/git_integration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this setup, each change to the source language file will be reflected on the Crowdin site.
When a source string is translated and approved, Crowdin will push the translation to the target branch (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;i18n_master&lt;/code&gt;) and even open up a merge request for your review!&lt;/p&gt;

&lt;p&gt;A great benefit of this is that your stories don’t have to wait for all translations to be done.
Translations are now the responsibility of the people that you appointed to do the translations.
When they do, you’ll be notified with a merge request!&lt;/p&gt;

&lt;h4 id=&quot;manual-up--and-download&quot;&gt;Manual up- and download&lt;/h4&gt;
&lt;p&gt;If you don’t want to integrate with your Git repo, you can use the Crowdin CLI.
There are two simple commands that let you upload the source files and download the translations.&lt;/p&gt;

&lt;p&gt;Upload:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crowdin upload sources
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crowdin download
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-app-translations&quot;&gt;In app translations&lt;/h2&gt;
&lt;p&gt;Another nifty feature is that you can do translations directly in you webapp.
All you need to do is add a JavaScript snippet to your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and select a pseudo language called &lt;code class=&quot;highlighter-rouge&quot;&gt;Acholi&lt;/code&gt;.
Crowdin will give unique identifiers to all of your source strings and use those as translations.
Because of the snippet, these IDs will be located and replaced with translated strings for the language you’re translating to.
You will also be able to edit the translations inline in your application and they will immediately be reflected on Crowdin.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 960px;&quot; alt=&quot;In context localization&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/in_context_animation.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, this isn’t something you want to do in your production environment.
Ideally you’d only have a specific environment setup that loads the JavaScript snippet.
If the snippet is loaded you’ll always see the Crowdin tools in your webapp,
so it’s up to you whether you want to use it and where.&lt;/p&gt;

&lt;p&gt;More info &lt;a href=&quot;https://support.crowdin.com/in-context-localization/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Crowdin has really helped me and my team in the way we manage our translations.
At first we were sending out emails for every label to get it translated.
Of course we missed quite some translations in various languages.
The variables in the translated string would sometimes be translated as well which meant that they wouldn’t work.&lt;/p&gt;

&lt;p&gt;With Crowdin we now have a clear overview of what is translated and what isn’t.
Instead of sending emails, translators get notified and can do the translations through a nice UI.
Because of the thorough quality assurance tools, less mistakes are made and those translated variables can be fixed before approving the translation and bringing it to production.&lt;/p&gt;

&lt;p&gt;In short, it’s a must-have tool when you need to manage translations, especially for languages you do not speak yourself!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martijn&quot;, &quot;last_name&quot;=&gt;&quot;Willekens&quot;, &quot;linkedin&quot;=&gt;&quot;mwillekens&quot;, &quot;twitter&quot;=&gt;&quot;MaWi_137&quot;, &quot;github&quot;=&gt;&quot;Mawi137&quot;, &quot;permalink&quot;=&gt;&quot;/author/martijn-willekens/&quot;, &quot;avatar&quot;=&gt;&quot;martijn-willekens.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend developer&quot;, &quot;email&quot;=&gt;&quot;martijn.willekens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Martijn is a frontend developer at Ordina Belgium. He primarily devotes himself to building Angular and Ionic apps written in TypeScript. ReactiveX is his favorite set of tools to work with.&quot;}</name><email>martijn.willekens@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="Translations" /><category term="Angular" /><category term="i18n" /><category term="Crowdin" /><summary type="html">As your application continues to grow, you may want to support more and more languages. Managing all that in the source code will become very hard and prone to errors. Luckily there’s an easy solution to that and it’s called Crowdin!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-05-managing-translations-with-crowdin/main-image.png" /></entry><entry><title type="html">Communication in a distributed system with OpenFeign: Tips &amp;amp; Tricks</title><link href="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html" rel="alternate" type="text/html" title="Communication in a distributed system with OpenFeign: Tips &amp; Tricks" /><published>2018-11-02T00:00:00+00:00</published><updated>2018-11-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html">&lt;p&gt;In contrast to monolithic applications, services in a distributed system are running on multiple machines. 
To let these services interact with each other, we need some kind of inter-process communication mechanism.
With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#intercepting-requests&quot;&gt;Intercepting requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#give-it-a-retry&quot;&gt;Give it a (re)try&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-your-api&quot;&gt;Securing your API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;communication-with-openfeign&quot;&gt;Communication with OpenFeign&lt;/h1&gt;
&lt;p&gt;To understand the basics of inter-process communication, we need to look at what kind of interactions we can do.
&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign&lt;/a&gt;, a declarative HTTP client by Netflix simplifies our way of interacting with other services. 
When we decide that it is time to decompose our modulith because of numerous reasons, we would have to look for a way to handle our inter-process communication.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To use OpenFeign we need to add it to our classpath&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we inspect the dependency module, we see that there is a lot coming out-of-the-box with the Spring Cloud Starter.
If you are providing your own resilience or load balancing library you can just add the necessary dependencies you need.
Be aware that the syntax is different between using the Spring wrapper or OpenFeign itself.
To let your Spring context know that it has to search for OpenFeign clients, we just add &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableFeignClients&lt;/code&gt;. 
You can add this annotation to any class annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootApplication&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringCloudApplication&lt;/code&gt;
After we’ve enabled OpenFeign on our classpath, we can start adding OpenFeign clients. 
When defining these clients, we have two solutions you can choose from. 
The OpenFeign library, which provides us with the basics but very customizable OpenFeign clients, and the Spring library, that adds a few extra libraries to it for cloud tooling.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FallbackAuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeignConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@FeignClient&lt;/code&gt;: is the annotation for Spring to recognize OpenFeign clients, OpenFeign clients have to be interfaces as it is self-declarative.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;value/name&lt;/code&gt;: is the name of the Feign client that will be used to create a &lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt; load balancer which can then be linked to the target application using service discovery or a fixed list of servers. 
You could also use the url attribute to point your client to the target application when you’re not using Ribbon.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fallback&lt;/code&gt;: if &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt; is enabled, you can implement a fallback method.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FallbackAuthClient&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt;: is for extra configuration like logging, interceptors, etc… more on that below.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;: Spring Cloud adds support for Spring MVC annotations and for using the same &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter's&lt;/code&gt; used by default in Spring Web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openfeign&quot;&gt;OpenFeign&lt;/h2&gt;
&lt;p&gt;To create an OpenFeign client we need an interface and a Feign builder that tells the interface it is an OpenFeign client.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestLine&lt;/code&gt;: is defining which verb and which URI path you are communicating to.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Headers&lt;/code&gt;: is defining the request headers that come with the request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-builder&quot;&gt;The builder&lt;/h1&gt;
&lt;p&gt;OpenFeign provides us with a builder-like pattern for our clients.
When we want to customize, we just add our own customization to the builder. 
To see the builder at work, let’s create a bean of our client and return a Feign builder.
It’s important to let the builder know which interface he has to target for communication. 
The second parameter is most likely the base url where all the requests begin. 
Get your URLs from the yml or properties file with the help of &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${base.url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/h1&gt;
&lt;p&gt;The default HTTP client of OpenFeign uses &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpUrlConnection&lt;/code&gt; to execute its HTTP requests.
You can configure another client (&lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OkHttpClient&lt;/code&gt;, …) as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;okhttpclient&quot;&gt;OkHttpClient&lt;/h2&gt;
&lt;p&gt;OkHttp is an HTTP client that’s efficient by default:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/2 support allows all requests to the same host to share a socket.&lt;/li&gt;
  &lt;li&gt;Connection pooling reduces request latency (if HTTP/2 isn’t available).&lt;/li&gt;
  &lt;li&gt;Transparent GZIP shrinks download sizes.&lt;/li&gt;
  &lt;li&gt;Response caching avoids the network completely for repeat requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apachehttpclient&quot;&gt;ApacheHttpClient&lt;/h2&gt;
&lt;p&gt;The advantage of using &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; over the default client is that &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; sends more headers with the request, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;, which some servers expect.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside from these clients, there are a few more to research if you want : &lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;OpenFeign clients&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/h1&gt;
&lt;p&gt;Mutual SSL is supported in all of these clients.
To achieve this in an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, we have to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; that builds the SSL context.
When the SSL context is valid, we wrap this inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; for being compliant with OpenFeign.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add it to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;give-it-a-retry&quot;&gt;Give it a (re)try&lt;/h1&gt;
&lt;p&gt;When we want to build some resilience in our communication, we can setup a retry mechanism in our OpenFeign client. 
If the other service is unreachable, we will try again until it is healthy or until the max attempts you have set in your configuration has been reached. 
When we want to use the retryer of OpenFeign, we got three properties we can set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;period&lt;/code&gt;: How long it takes before the retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxPeriod&lt;/code&gt;: That’s what the maximum is of how long it can take before a retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxAttempts&lt;/code&gt;: How many retries may the client trigger before it fails&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.period:3000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxPeriod:30000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxAttempts:5}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;intercepting-requests&quot;&gt;Intercepting requests&lt;/h1&gt;
&lt;p&gt;If you need some basic authorization, custom headers or some extra information in every request of the client, we can use interceptors. 
This becomes very useful in situations where every request needs this extra information.
To add an interceptor, we just add an extra method that returns the OpenFeign interceptor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestInterceptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMimeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To enable the customization, we add the interceptor to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;securing-your-api&quot;&gt;Securing your API&lt;/h1&gt;
&lt;p&gt;When we want to add the security layer between our services, there are a couple solutions to look at. 
Here are a few that can be handled by OpenFeign.&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;
&lt;p&gt;When you want to send basic credentials you can just add an &lt;a href=&quot;#intercepting-requests&quot;&gt;interceptor&lt;/a&gt; for the OpenFeign client and add the username and password.&lt;/p&gt;

&lt;h2 id=&quot;bearer&quot;&gt;Bearer&lt;/h2&gt;
&lt;p&gt;For only Bearer token communication, you can just pass it down in the request header of your method call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Spring&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//OpenFeign&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;oauth2&quot;&gt;OAuth2&lt;/h2&gt;
&lt;p&gt;This link provides a good explanation about the use of OAuth2 with OpenFeign: 
&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/h1&gt;
&lt;p&gt;Besides JSON encoders and decoders, you can also enable support for XML.
If you ever have to integrate with SOAP third party APIs, OpenFeign supports it.
There is a very detailed explanation on how to use it in the &lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; of OpenFeign.&lt;/p&gt;

&lt;h1 id=&quot;handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/h1&gt;
&lt;p&gt;The OpenFeign API provides an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; to handle erroneous responses from servers.
Since there are many kind of errors we can get, we want a place where we can handle each one of them accordingly. 
An OpenFeign &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; must be added to the configuration of the client object as you can see in the code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than throwing an exception in the &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, you return an exception to Feign and Feign will throw it for you.
The default error decoder &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder.Default&lt;/code&gt; always throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt;.
The problem with ending up with a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt; is that it does not contain a lot of structure. 
It is a plain &lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt; which only contains a message with a stringified response body. 
No way of interpreting that exception to rethrow a more functional exception eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotFoundException&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;error-decoder&quot;&gt;Error decoder&lt;/h2&gt;
&lt;p&gt;To handle the errors, we have to look at the structure of these errors. 
From that structure, we build up our own exception and throw it so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerAdvice&lt;/code&gt; class can handle our exception.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomErrorDecoder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorDecoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomExceptionException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.errors&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; 
Working with checked exceptions and Feign is a bit tricky for several reasons.
Returning a checked exception is possible in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, but to avoid Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;UndeclaredThrowableException&lt;/code&gt;, you’ll have to add it to the method signature in the Feign interface. 
Doing this however, causes Sonar to complain because there’s no actual code which throws that exception.
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These were my experiences with OpenFeign and I like the simplicity of it. 
If you choose for the Spring wrapper or OpenFeign, the client is an advanced tool for enabling inter-service communication.
As of now, they just released a new version that is compliant with Java 11.
So go experiment and learn on the way!&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.0.1.RELEASE/single/spring-cloud-openfeign.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;SOAP integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;Other HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem, Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Kevin has a strong focus on building cloud native architectures with the right mindset on security and API design.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="Spring" /><category term="Cloud" /><category term="OpenFeign" /><summary type="html">In contrast to monolithic applications, services in a distributed system are running on multiple machines. To let these services interact with each other, we need some kind of inter-process communication mechanism. With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/intercommunication/intercomm_header.jpg" /></entry><entry><title type="html">Kickstarter Trajectory 2018 Summer Edition</title><link href="https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer.html" rel="alternate" type="text/html" title="Kickstarter Trajectory 2018 Summer Edition" /><published>2018-10-29T00:00:00+00:00</published><updated>2018-10-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer</id><content type="html" xml:base="https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;54 young professionals started the Ordina kickstarter trajectory this summer, on the 1st of August. 
JWorks counted 5 kickstarters: Sander, Steven, Ken, Wout en Michaël. All looking for a challenge and a fresh start. 
Some freshly graduated from school, others having multiple years of experience, IT related or not. 
The goal was to broaden every kickstarter’s knowledge of the fast evolving IT world. 
We learned the basics of every hot topic which will definitely give us enough credits for our first project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The kickstarter trajectory consisted of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One month covering all kinds of trainings: technical, non-technical, backend, frontend, DevOps…&lt;/li&gt;
  &lt;li&gt;After our minds were filled with all this information, there was a DevCase where we could put everything we learned into practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;first-day&quot;&gt;First Day&lt;/h2&gt;
&lt;p&gt;On the first day of the kickstarter trajectory we were welcomed into Ordina and got an introduction about the structure of the company. 
After that we took a tour around the building, and we were told what the different workspaces are and where the different teams work. 
It was nice to notice that everyone we met was very friendly and helpful. 
This made us feel directly at ease.
On the first day we also received the keys of our car and a laptop, so we were equipped to begin our journey at Ordina.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;
&lt;p&gt;In the beginning of the trajectory we got an introduction by &lt;a href=&quot;/author/time-de-grande&quot; target=&quot;_blank&quot;&gt;Tim De Grande&lt;/a&gt; of the most important security principles like GDPR. 
This is very important to Ordina because all its consultants need to keep this information in the back of their minds when working at a customer.
We also followed a more technical security course which explained some of the most common attacks and how to avoid them.&lt;/p&gt;

&lt;h2 id=&quot;backend&quot;&gt;Backend&lt;/h2&gt;

&lt;h3 id=&quot;java&quot;&gt;Java&lt;/h3&gt;
&lt;p&gt;In this lecture given by &lt;a href=&quot;/author/yannick-de-turck/&quot; target=&quot;_blank&quot;&gt;Yannick De Turck&lt;/a&gt;, we were introduced to all new features of Java 7, 8 and 9 aswell as Java 10.&lt;/p&gt;

&lt;p&gt;We started off with Java 7 where we learned:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Switch-statement with String values&lt;/li&gt;
  &lt;li&gt;Automatic Resource Management&lt;/li&gt;
  &lt;li&gt;Diamond Syntax&lt;/li&gt;
  &lt;li&gt;Better exception handling with multi-catch&lt;/li&gt;
  &lt;li&gt;Literal Enhancements&lt;/li&gt;
  &lt;li&gt;The new IO API&lt;/li&gt;
  &lt;li&gt;Fork Join Framework&lt;/li&gt;
  &lt;li&gt;JVM Enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 8 also introduced some useful new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda Expressions&lt;/li&gt;
  &lt;li&gt;Extension Methods&lt;/li&gt;
  &lt;li&gt;Functional Interfaces&lt;/li&gt;
  &lt;li&gt;Method and Constructor References&lt;/li&gt;
  &lt;li&gt;Streams and Bulk Data Operations for Collections&lt;/li&gt;
  &lt;li&gt;Removal of PermGen&lt;/li&gt;
  &lt;li&gt;New Date &amp;amp; Time API&lt;/li&gt;
  &lt;li&gt;New Default API for Base64 Encoding&lt;/li&gt;
  &lt;li&gt;Improvements for Annotations&lt;/li&gt;
  &lt;li&gt;Performance Improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 9 introduces:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Project Jigsaw: Modules&lt;/li&gt;
  &lt;li&gt;Project Kulla: JShell&lt;/li&gt;
  &lt;li&gt;Factory Methods for collections&lt;/li&gt;
  &lt;li&gt;Diamond operator for anonymous inner classes&lt;/li&gt;
  &lt;li&gt;Try-with-resources enhancement&lt;/li&gt;
  &lt;li&gt;CompletableFuture API improvements&lt;/li&gt;
  &lt;li&gt;Private methods in interfaces&lt;/li&gt;
  &lt;li&gt;HTTP 2.0 Client&lt;/li&gt;
  &lt;li&gt;Process API Improvements&lt;/li&gt;
  &lt;li&gt;Reactive Streams&lt;/li&gt;
  &lt;li&gt;Optional Improvements&lt;/li&gt;
  &lt;li&gt;Collectors Improvements&lt;/li&gt;
  &lt;li&gt;Stream Improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least we had an introduction of Java 10 which delivers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Local Variable Type Inference&lt;/li&gt;
  &lt;li&gt;Unmodifiable Collections&lt;/li&gt;
  &lt;li&gt;New Optional.orElseThrow() method&lt;/li&gt;
  &lt;li&gt;Performance Improvements&lt;/li&gt;
  &lt;li&gt;Container awareness&lt;/li&gt;
  &lt;li&gt;Root CA Certificates included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the afternoon we made a few exercises on these new features and improvements which gave us a brighter view on the possibilities within present Java development.&lt;/p&gt;

&lt;h3 id=&quot;spring-and-spring-boot&quot;&gt;Spring and Spring Boot&lt;/h3&gt;
&lt;p&gt;The lectures of Spring and Spring Boot were given by &lt;a href=&quot;/author/ken-coenen&quot; target=&quot;_blank&quot;&gt;Ken Coenen&lt;/a&gt;. 
These were spread over two days where the first day was an overal introduction to Spring fundamentals, followed by a second day where we have put everything into practice.&lt;/p&gt;

&lt;h4 id=&quot;day-1&quot;&gt;Day 1:&lt;/h4&gt;
&lt;p&gt;The first day we got an introduction to Spring and Spring Boot about the core fundamentals and concepts of JPA, Beans and application contexts. 
After that we went further into the features of the framework where we were introduced to Spring Web Services and Spring Security.&lt;/p&gt;

&lt;h4 id=&quot;day-2&quot;&gt;Day 2:&lt;/h4&gt;
&lt;p&gt;On the second day we made a small project where we created a backend application to fetch all information of different digital coins (cryptocurrencies). 
We learned how to read data from an API using DTOs and storing them into a database. 
At the end of the day we had a fully working backend application which fetched all information automatically and exposed it to different endpoints.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;SpringBoot&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/be-course.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/author/tim-ysewyn&quot; target=&quot;_blank&quot;&gt;Tim Ysewyn&lt;/a&gt; and &lt;a href=&quot;/author/kevin-van-houtte&quot; target=&quot;_blank&quot;&gt;Kevin Van Houtte&lt;/a&gt; gave a brief overview of the microservices architecture. 
We learned when this is best applicable. 
This can be applied when there is a monolith that is responsible for multiple different tasks. 
It could be better in that case to split off these different tasks into multiple microservices. 
One of the advantages of doing that is the possibility to deploy the different microservices separately and the possibility to upscale the resources of the microservices that receive the biggest loads.&lt;/p&gt;

&lt;h3 id=&quot;clean-code&quot;&gt;Clean Code&lt;/h3&gt;
&lt;p&gt;During this course of clean code, &lt;a href=&quot;/author/pieter-van-hees&quot; target=&quot;_blank&quot;&gt;Pieter Van Hees&lt;/a&gt; taught us the best practices of how to write clean code. 
This improves the readability and performance of our applications which is of great importance to Ordina.&lt;/p&gt;

&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;p&gt;The frontend courses started off with HTML/CSS/JavaScript given by &lt;a href=&quot;/author/yannick-vergeylen&quot; target=&quot;_blank&quot;&gt;Yannick Vergeylen&lt;/a&gt; after which we went more in-depth of other topics.&lt;/p&gt;

&lt;h4 id=&quot;build-tools&quot;&gt;Build tools:&lt;/h4&gt;
&lt;p&gt;In this course given by &lt;a href=&quot;/author/michael-vervloet&quot; target=&quot;_blank&quot;&gt;Michael Vervloet&lt;/a&gt;, we started off with Node.js and its features like asynchronous programming and event emitters.
Later, we learned about NPM and other package managers and how to use them inside a project like an Angular app. 
At the end, Angular-CLI was covered, the start of one of the most important frameworks we use at JWorks.&lt;/p&gt;

&lt;h4 id=&quot;typescript&quot;&gt;Typescript:&lt;/h4&gt;
&lt;p&gt;In the TypeScript course given by &lt;a href=&quot;/author/kevin-van-houtte&quot; target=&quot;_blank&quot;&gt;Kevin Van Houtte&lt;/a&gt;, we built further on Node.js and NPM. 
We did an exercise about school management where we used OO-programming and CRUD in TypeScript. 
This was pretty challenging but with each other’s help, we managed to get the final assessment done.&lt;/p&gt;

&lt;h4 id=&quot;angular&quot;&gt;Angular:&lt;/h4&gt;
&lt;p&gt;Angular was the last frontend course given by &lt;a href=&quot;/author/ryan-de-gruyter&quot; target=&quot;_blank&quot;&gt;Ryan De Gruyter&lt;/a&gt;. This helped us to quickly create a frontend that is connected to a backend project. Here, we went more in-depth on the SPA framework and how different components interact with each other.&lt;/p&gt;

&lt;h2 id=&quot;devops&quot;&gt;Devops&lt;/h2&gt;
&lt;p&gt;The trajectory also included courses about the DevOps culture. 
We got some introductions to Docker, Kubernetes and CI/CD given by &lt;a href=&quot;/author/tim-vierbergen&quot; target=&quot;_blank&quot;&gt;Tim Vierbergen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;docker--kubernetes&quot;&gt;Docker &amp;amp; Kubernetes&lt;/h3&gt;
&lt;p&gt;These courses were given by &lt;a href=&quot;/author/tom-verelst&quot; target=&quot;_blank&quot;&gt;Tom Verelst&lt;/a&gt;. 
He explained us the basics of containerization, more specifically how this is done by Docker.
During this hands-on session we learned how to work with containers and images. 
We learned how to use, create and delete them. 
There was also an explanation of the theory behind containerization and what the advantages are of using this, especially when compared to using virtual machines.&lt;/p&gt;

&lt;p&gt;To orchestrate the containers, we received a course on Kubernetes. There we learned about the concepts of pods, secrets, and more.
We practiced this in a small exercise where we needed to configure a Minikube and run a simple application.&lt;/p&gt;

&lt;h3 id=&quot;cloud&quot;&gt;Cloud&lt;/h3&gt;
&lt;p&gt;The last technical session we followed was about different cloud technologies. This was given by &lt;a href=&quot;/author/dieter-hubau/&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt; and &lt;a href=&quot;/author/bas-moorkens/&quot; target=&quot;_blank&quot;&gt;Bas Moorkens&lt;/a&gt;.
We learned about the advantages of running applications in the cloud and what the differences are between the different operation models.
To make this more tangible, we went into multiple cloud platforms to see what the possibilities were. 
At the end we focussed on OpenShift Origin as this is one of the preferred container management packages inside JWorks.&lt;/p&gt;

&lt;h2 id=&quot;soft-skills&quot;&gt;Soft Skills&lt;/h2&gt;
&lt;p&gt;Besides sharpening our technical skills we worked on our soft skills as well.
In the 2-day session ‘Essentials of Communication’ we learned how to present ourselves by means of role playing games and cases that reflect real world scenarios.
After an additional ‘Brand Yourself’ session we were ready to prove and present ourselves as worthy consultants to the management of Ordina.
All these techniques are also useful in the Agile &amp;amp; Scrum methodologies where we learned the importance of being prepared for change.&lt;/p&gt;

&lt;h2 id=&quot;devcase&quot;&gt;DevCase&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;DevCase&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/fe-preview1.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction-1&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;During the second month of the kickstarter trajectory we were assigned to develop an event planner.
The purpose was to have more of an overview and control of the upcoming JWorks events.
In short, JWorks employees can create and approve events depending on their rights.
In addition, a weekly digest of the events is sent to the JWorks Telegram chat group and a Telegram bot is made available with some defined commands.&lt;/p&gt;

&lt;h4 id=&quot;technology--methodologies&quot;&gt;Technology &amp;amp; Methodologies&lt;/h4&gt;
&lt;p&gt;Together with our coaches &lt;a href=&quot;/author/orjan-de-smet&quot; target=&quot;_blank&quot;&gt;Orjan De Smet&lt;/a&gt;, &lt;a href=&quot;/author/axel-bergmans&quot; target=&quot;_blank&quot;&gt;Axel Bergmans&lt;/a&gt; and Haroun Pacquée we started off with an introduction to the project.
The user stories were presented on the Scrum board.
After defining the sprint goal for the first upcoming two weeks we divided ourselves into a frontend and a backend group. 
Using Scrum methodology we held our daily stand-up meetings and as soon as a new functionality was developed a pull request was made and reviewed by our coaches.
Every two weeks, at the end of the sprint, a demo was shown to our coaches followed by a retrospective and a sprint planning.
By making use of Continuous Integration, code changes in Github were automatically deployed to OpenShift where a Jenkins pipeline went through different stages ranging from testing the code and code quality, to building the Docker image.&lt;/p&gt;

&lt;p&gt;Frontend tools that were used in the project:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;Angular-CLI&lt;/li&gt;
  &lt;li&gt;Angular Material&lt;/li&gt;
  &lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the backend we made use of the following technologies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 8&lt;/li&gt;
  &lt;li&gt;Spring Boot&lt;/li&gt;
  &lt;li&gt;Mockito and JUnit&lt;/li&gt;
  &lt;li&gt;Telegram API&lt;/li&gt;
  &lt;li&gt;Keycloak Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more technical details of the used tools and technologies of the DevCase, a separate blog post will follow!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;DevCase&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/fe-preview2.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;personal-experiences&quot;&gt;Personal Experiences&lt;/h3&gt;
&lt;h4 id=&quot;ken-keymolen&quot;&gt;&lt;a href=&quot;/author/ken-keymolen&quot; target=&quot;_blank&quot;&gt;Ken Keymolen&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory provides the means to learn new evolutions &amp;amp; technologies within the IT world.
The DevCase gave us a good understanding on how to incorporate new technologies within an IT project. 
These trainings provide a solid base to continue to build our skills &amp;amp; expertise in the different areas IT has to offer,
making sure we are positioned to provide the best solutions for our customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sander-smets&quot;&gt;&lt;a href=&quot;/author/sander-smets&quot; target=&quot;_blank&quot;&gt;Sander Smets&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Before the kickstarter trajectory, I did not really have an in-depth view on deployment and cloud automation. 
Our DevCase and trainings made sure that all of us have a complete understanding of frontend and backend technologies, cloud automation and new architecture strategies like DDD and microservices. 
Now I feel like a more complete developer and ready to tackle day-to-day problems at customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;wout-meskens&quot;&gt;&lt;a href=&quot;/author/wout-meskens&quot; target=&quot;_blank&quot;&gt;Wout Meskens&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I am very happy that I have been given the opportunity to follow the kickstarter trajectory. 
The first month updated my knowledge about a lot of interesting topics. 
It was especially interesting to learn about the DevOps technologies. 
The DevCase was very helpful to put all this new knowledge into practice. 
It was fun to see that we could make an exciting application with all these technologies. 
The kickstarter trajectory made me excited to use these technologies to help customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;steven-deleye&quot;&gt;&lt;a href=&quot;/author/steven-deleye&quot; target=&quot;_blank&quot;&gt;Steven Deleye&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory was the chance for me to learn a lot about new technologies in a short amount of time.
Putting this information into practice during the DevCase gave me more understanding in how and when we use these technologies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;michael-de-wree&quot;&gt;&lt;a href=&quot;/author/michael-de-wree&quot; target=&quot;_blank&quot;&gt;Michael De Wree&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory was not easy, but achievable. 
This made me so much more excited. 
Especially the DevCase was a good way to gain technical experience. 
Besides the possibility to learn and grow, Ordina makes me feel at home. 
I look forward to the next couple of years!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wout&quot;, &quot;last_name&quot;=&gt;&quot;Meskens&quot;, &quot;github&quot;=&gt;&quot;meskensw&quot;, &quot;linkedin&quot;=&gt;&quot;meskenswout&quot;, &quot;permalink&quot;=&gt;&quot;/author/wout-meskens/&quot;, &quot;avatar&quot;=&gt;&quot;wout-meskens.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;wout.meskens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wout is a Java Developer at Ordina Belgium who also is interested in frontend technologies. He likes to keep learning new things and improve his knowledge about the newest technologies.&quot;}</name><email>wout.meskens@ordina.be</email></author><category term="Kickstarters" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit Test" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="Typescript" /><category term="Kickstarter" /><category term="Security" /><summary type="html">Introduction 54 young professionals started the Ordina kickstarter trajectory this summer, on the 1st of August. JWorks counted 5 kickstarters: Sander, Steven, Ken, Wout en Michaël. All looking for a challenge and a fresh start. Some freshly graduated from school, others having multiple years of experience, IT related or not. The goal was to broaden every kickstarter’s knowledge of the fast evolving IT world. We learned the basics of every hot topic which will definitely give us enough credits for our first project.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">The Lead Developer London 2018</title><link href="https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018.html" rel="alternate" type="text/html" title="The Lead Developer London 2018" /><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018.html">&lt;h2 id=&quot;london&quot;&gt;London!&lt;/h2&gt;

&lt;p&gt;For the fourth year in a row &lt;a href=&quot;https://www.whiteoctoberevents.co.uk/&quot; target=&quot;_blank&quot;&gt;White October Events&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/Geek_Manager&quot; target=&quot;_blank&quot;&gt;Meri Williams&lt;/a&gt; organised &lt;a href=&quot;https://theleaddeveloper.com/&quot; target=&quot;_blank&quot;&gt;The Lead Developer&lt;/a&gt;: a two-day conference covering topics from leadership to self-improvement and team dynamics, mixed with some technical talks. 
This year Ordina JWorks travelled to the Barbican Centre in London to attend this amazing and inspiring conference for the very first time and returned home energized and full of ideas!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As tech lead you have to be a great developer. 
But you also need to be a good team leader, be commercially astute, and stay on top of all the tech developments and trends coming over the horizon. 
With a balance of content across team, tools and tech, The Lead Developer conference is designed with the complexities of the job in mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/lead-dev-venue.jpg&quot; alt=&quot;The Lead Developer 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this blogpost we will summarize some of the talks that are mainly focused on personal development of a team lead. All talks were recorded and can be found on &lt;a href=&quot;https://www.youtube.com/playlist?list=PLBzScQzZ83I_VX8zgmLqIfma_kJs3RRmu&quot; target=&quot;_blank&quot;&gt;The Lead Developer London 2018 YouTube channel&lt;/a&gt;. Highly recommended!&lt;/p&gt;

&lt;h2 id=&quot;first-steps-as-a-lead-by-dan-persa&quot;&gt;‘First steps as a lead’ by &lt;a href=&quot;https://twitter.com/danpersa&quot; target=&quot;_blank&quot;&gt;Dan Persa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dan Persa&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/dan-persa.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Why become a lead in the first place?
According to Dan Persa, dealing with people problems is much more interesting than dealing with computers, but each company interprets this in a slightly different way. 
Some call it “tech lead”, others call it “people manager”, but in either case it is your job to understand what the role is all about and check that it fits your expectations.
Becoming a lead is not a natural evolution for a developer. 
It’s a career switch and not a promotion; because a different skillset is required.
The Don’t-Repeat-Yourself principle, which is a key principle for each software developer, does not apply when working with people. 
Communicate things over and over again.
Repetition is key.&lt;/p&gt;

&lt;p&gt;Getting into leadership is not trivial, so ask people around you for help. How do you learn these leadership skills very fast?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shadow a mentor to ensure a smooth transition and not feeling lost.&lt;/li&gt;
  &lt;li&gt;Don’t just read books, but put them in practice as well.&lt;/li&gt;
  &lt;li&gt;Reflect and remember good and not-so-good behaviour from your former leads.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a lead you need to create an open and safe environment with mutual trust.
But how you do earn the trust and respect of your team?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open yourself up to be vulnerable.&lt;/li&gt;
  &lt;li&gt;Have regular one-to-ones.&lt;/li&gt;
  &lt;li&gt;Be transparent in decision-making, especially around performance evaluations.&lt;/li&gt;
  &lt;li&gt;The best solutions to problems come from the team, let them take ownership of the problem.&lt;/li&gt;
  &lt;li&gt;Create a feedback culture: give feedback as soon as possible after the action in need of feedback happened, decouple development feedback from performance evaluations, and organise health checks meetings.&lt;/li&gt;
  &lt;li&gt;Celebrate successes!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Not taking a decision is a decision: we are accountable for the decisions we take as well as for the ones we decide not to take.” &lt;a href=&quot;https://twitter.com/danpersa&quot; target=&quot;_blank&quot;&gt;@danpersa&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-sustainable-teams-to-handle-uncertainty-by-jenny-duckett&quot;&gt;‘Building sustainable teams to handle uncertainty’ by &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;Jenny Duckett&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jenny Duckett&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/jenny-duckett.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can disrupt a team?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we frequently make deliberate changes about how we’re working in our team, change is often a good thing. However, there’s uncertainty involved.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;People can leave or join the team; team members can feel un(der)valued. The dynamics of personalities and opinions change whenever people change.&lt;/li&gt;
  &lt;li&gt;It can be hard for teams to make decisions and handle roadmaps while senior leaders move. Revisiting decisions that you thought you’d settled and making progress can be hard.&lt;/li&gt;
  &lt;li&gt;Shifting wider priorities can make a team feel frustrated and disempowered.&lt;/li&gt;
  &lt;li&gt;Re-organising teams out of existence can make people feel undervalued as individuals.&lt;/li&gt;
  &lt;li&gt;Even things like desk moves can have a significant impact on people. More about this on &lt;a href=&quot;https://larahogan.me/blog/desk-moves/&quot; target=&quot;_blank&quot;&gt;Lara Hogan’s blogpost&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting people through these things more than occasionally, will result in a retention problem.
The way changes make people feel is at least as important as the change itself.
Emotions are critical.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“An empowered, open team who understands its context can adapt to change.” &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;@jenny_duckett&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What can you do to prepare?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, work on yourself so you can sustain through these disruptive changes and be able to support your team better as a result.
You don’t need to do it all yourself: let go of details, give people your trust and assume positive intent.
Set yourself up to lead sustainably.&lt;/p&gt;

&lt;p&gt;Make your team’s work ownable by stopping to split efforts and starting to define a single and clear goal. 
Communicate this goal over and over again.
It will feel like you’re just repeating yourself and you’re boring people, but it’s reassuring just to know that the goal hasn’t changed.
Give your team the background they need for each piece of work by adding context to user stories, organizing story kickoffs and running workshops.&lt;/p&gt;

&lt;p&gt;Empower your team to take ownership by embracing opportunities for positive change.
Also become great at integrating new people by assigning them a mentor. 
Let them improve your onboarding guide and technical documentation.
Make it clear that you value learning as part of everyday work, recognise that everyone is always learning.
Share understanding of your work in the team, the whole context is important.
This can be done by writing good commit messages (also the why not just the what), but also by documenting decisions and the reasons for it, and keeping your documentation up-to-date.
Taking ownership helps people handle change.&lt;/p&gt;

&lt;p&gt;Support and grow individuals. Use every piece of work to help someone grow and start with individual needs.
Effective delegation can be accomplished by being clear and explicit, explain what’s happening and why.
Also set the scope and boundaries, what’s the problem that they’re trying to solve, who’s involved and when should they bring questions to you.
Grow the next generation of leaders by teaching people to do your job and make yourself dispensable.&lt;/p&gt;

&lt;p&gt;Show your team where they fit into the wider organisation and how they relate to its goals.
A wider view helps people adapt when things change.
Don’t over-insulate your team because when something gets through your shield, it will be very disruptive.
Grow people for a resilient team and organisation, and encourage your team to show off their work, to be proud of it.&lt;/p&gt;

&lt;p&gt;Make sure that your manager understands how much work it takes from everyone to build a team that works well and the time it takes to become familiar with the domain they’re working in.
Ask them for support to build a sustainable team and show why all your team’s work matters.
Good communication about change is vital.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When stressful things happen, it’s easy to default back to not communicating. But that’s when it’s even more important to empower people during tough times.” &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;@jenny_duckett&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-hardest-scaling-challenge-of-all---yourself-by-christian-mccarrick&quot;&gt;‘The hardest scaling challenge of all - yourself’ by &lt;a href=&quot;https://twitter.com/cmccarrick&quot; target=&quot;_blank&quot;&gt;Christian McCarrick&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Christian McCarrick&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/christian-mccarrick.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be an effective communicator: as you grow, you’ll get better at getting your point across to larger and larger groups.&lt;/li&gt;
  &lt;li&gt;Communicate up to the manager, across peers and down to your team.&lt;/li&gt;
  &lt;li&gt;Personal branding and self-promotion are important: have confidence and show the value of your work.&lt;/li&gt;
  &lt;li&gt;Create a safe environment by genuinely praising other people and giving honest feedback.&lt;/li&gt;
  &lt;li&gt;Seek out for negative feedback and ask specific questions for better feedback.&lt;/li&gt;
  &lt;li&gt;The most important communication skill to learn is how to say “no” without feeling guilty.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prioritization &amp;amp; Time management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you don’t prioritize your life, someone else will.&lt;/li&gt;
  &lt;li&gt;The Eisenhower Matrix: How to make decisions on what’s urgent and important.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;The Eisenhower Matrix&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/eisenhower.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multitasking is an anti-pattern, so write down all the things you need to do and keep a journal.&lt;/li&gt;
  &lt;li&gt;Turn off email notifications. Instead, schedule short blocks during the day when you quickly check emails and schedule longer blocks at the end of the day where you tidy things up.&lt;/li&gt;
  &lt;li&gt;Get into the zone by blocking your calendar: dedicate time to specific things.&lt;/li&gt;
  &lt;li&gt;Make yourself a priority once in a while. It’s not selfish, it’s necessary.&lt;/li&gt;
  &lt;li&gt;Obsess with the things that matter!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Delegation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Move away from “How can I get things done?” to “How can this task/decision/goal get done?”.&lt;/li&gt;
  &lt;li&gt;Not delegating properly is one of the biggest anti-patterns and limits the scaling your entire team because you become the bottleneck around decision making.&lt;/li&gt;
  &lt;li&gt;Let things go!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Personal development &amp;amp; mental health&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Leading takes energy and often gets lonely.&lt;/li&gt;
  &lt;li&gt;If athletes get injured, they sit on the bench. Mental fatigue and burnout are issues that affects us more than we might think.&lt;/li&gt;
  &lt;li&gt;Excercise, meditate (tip: &lt;a href=&quot;https://www.headspace.com/&quot; target=&quot;_blank&quot;&gt;Headspace&lt;/a&gt;), and read every day.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Your job as a manager is to make your team more badass.” &lt;a href=&quot;https://twitter.com/cmccarrick&quot; target=&quot;_blank&quot;&gt;@cmccarrick&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;go-slow-to-go-fast-building-strong-foundations-for-leadership-by-alicia-liu&quot;&gt;‘Go slow to go fast: building strong foundations for leadership’ by &lt;a href=&quot;https://twitter.com/aliciatweet&quot; target=&quot;_blank&quot;&gt;Alicia Liu&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Alicia Liu&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/alicia-liu.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Alicia talked about how her rapid increase in job responsibilities in a rapidly growing startup led to an increase in stress, difficulty sleeping, and ultimately depression. 
She wrote a great &lt;a href=&quot;https://betterhumans.coach.me/how-depression-made-me-a-morning-person-cda4889662ff&quot; target=&quot;_blank&quot;&gt;blogpost&lt;/a&gt; and gave a very inspiring talk about the tools she used to recover from depression and insomnia, and how she became a better leader and manager.&lt;/p&gt;

&lt;p&gt;A lot of engineers are promoted into management because they’re good engineers, regardless of their management skills.
Some people are naturally good at both, but if you’re good at engineering, it might actually be harder to develop leadership skills. 
Coding drains a lot of mental energy, while managing others requires lots of emotional energy.
Being a good engineer doesn’t make you a good leader because information is not the same as knowledge. 
You can’t study to be a leader, you’ll have to change and embrace discomfort to become a good leader. 
Be humble by listening to others, being present with each person and regularly switching context is a hard thing to do.
Focus first on form then speed.
Mastering others is power, mastering yourself is true strength.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A gardener doesn’t tell plants how to grow. A gardener creates the best environment for the plants to flourish. But you still need to know how to garden, and you need to know what to weed out. Leadership is about dealing with the unknowns.” &lt;a href=&quot;https://twitter.com/aliciatweet&quot; target=&quot;_blank&quot;&gt;@aliciatweet&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martin&quot;, &quot;last_name&quot;=&gt;&quot;Kwee&quot;, &quot;permalink&quot;=&gt;&quot;/author/martin-kwee/&quot;, &quot;avatar&quot;=&gt;&quot;martin-kwee.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;martin.kwee@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;kw33m&quot;, &quot;github&quot;=&gt;&quot;kweem&quot;, &quot;linkedin&quot;=&gt;&quot;martinkwee&quot;, &quot;bio&quot;=&gt;&quot;Martin is a Principal Java Consultant at Ordina Belgium. He enjoys a good technical challenge and is passionate about learning new innovative technologies and architectures.&quot;}</name><email>martin.kwee@ordina.be</email></author><category term="Conference" /><category term="The Lead Developer" /><category term="Conference" /><summary type="html">London!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-26-Lead-Dev-London-2018/lead-dev.png" /></entry><entry><title type="html">Team under High Voltage</title><link href="https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage.html" rel="alternate" type="text/html" title="Team under High Voltage" /><published>2018-10-23T00:00:00+00:00</published><updated>2018-10-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage.html">&lt;p&gt;Recently a client called on us to help bring motivation back to a development team.
Although the final deadline for delivery was nearing rapidly, team members started to leave the project, worn out and fed up.
Need it be said that this didn’t exactly promote work joy and team spirit – or, for that matter, diminish the already unrealistic workload.
How had matters come to these dire straits?
It surely wasn’t the case that a dedicated multi-skilled dev team was lacking.
Only, apart from this, the project seemed to be tainted with all the stains one can think of to make being Agile and rolling out Scrum difficult or impossible.
When teams are immersed in a waterfall culture and stuck in the iron triangle of project management, there is little chance for Agility to be a success.
Making matters worse, a belated start of the project (due to a delayed go) had gradually created a growing requirement/necessity to work quickly rather than focusing on quality.&lt;/p&gt;

&lt;p&gt;The easy answer would be… just fix Scrum and all the rest will follow.
That makes sense, for indeed, Scrum can fix a whole lot, with effort, time and a great deal of customer convincing.
Creating customer satisfaction by maximizing the business value, is of course the ultimate goal of every software project.
But the belated launch of the project and the sheer impossibility of still attaining the definition of success – made me realize that it would be very wrong to talk about story points or speeding up velocity.
It wouldn’t even be right to keep focusing on minimizing the MVP – which in this case is at a bare minimum already.
We all have to choose our battles wisely.
The first thing to do, I thought, is enable the team to find a common denominator, a list of preferred behaviours and shared interests that would make them feel better as a team.
Primary focus is ensuring that the project mood board switches from taking to giving energy to the people working on it.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;High Voltage&quot; src=&quot;/img/teams-under-high-voltage/voltage.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This exercise makes it possible to disconnect the team members’ degree of happiness and motivation from the looming deadlines and the ever-changing backlog.
This makes success somehow achievable again, albeit a more personal sort of success, focused on growth and team dynamics.
I know this sounds like a long shot, but at least it could possibly lead to a solution with a long-term outcome.
In working together the Agile way, we must always remember that people and interactions come first.
Read the &lt;a href=&quot;http://agilemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Manifesto&lt;/a&gt; carefully – and you will see that the psychological safety of a team is key to the whole lot – enabling flow away from the items on the right and making room for the items on the left.
From there, all the rest is due to follow.
Burning up story points should never be accompanied by burning up energy.
What is burning down at one side should be building up at the other.
Once this is ensured, progress comes at a steady pace.&lt;/p&gt;

&lt;h2 id=&quot;details-about-the-exercise&quot;&gt;Details about the exercise&lt;/h2&gt;

&lt;p&gt;Are you interested in knowing how I helped the team detect these common denominators?
For that I used the liberating structure 1-2-4-All, which goes like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everybody gets a card and a thin marker.&lt;/li&gt;
  &lt;li&gt;In a time box of one minute, everyone by themselves writes down what comes after “I hate it when people…”
(Somehow it’s easier for people to find examples of unwanted behaviour, than asking them for what they appreciate.)&lt;/li&gt;
  &lt;li&gt;Next two minutes they pair up and share their examples, thinking the value and good behaviour that could counterbalance the negative one.
This value should be written on the other side of each card.&lt;/li&gt;
  &lt;li&gt;Team up to make a group of four and share your good behaviours and values during a time box of four minutes.
Start clustering them when doubles or connections start to emerge.&lt;/li&gt;
  &lt;li&gt;For ten to fifteen minutes (depending on how big the group is), everybody explains to the group their preferred behaviour and the related value.
Try to cluster them into groups and define a common denominator for each cluster, to make it more manageable.
Make sure that everyone understands them and that nobody perceives any contradictory combinations.&lt;/li&gt;
  &lt;li&gt;Ask for commitment of the group to try and stick to these behaviours and values.
Anyone who doesn’t respect them, can be made accountable and should be addressed by the others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t hesitate to reach out if you have any questions regarding this topic!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="Coaching" /><category term="Demotivation" /><category term="Definition of Success" /><category term="Team Dynamics" /><category term="Psychological Safety" /><summary type="html">Recently a client called on us to help bring motivation back to a development team. Although the final deadline for delivery was nearing rapidly, team members started to leave the project, worn out and fed up. Need it be said that this didn’t exactly promote work joy and team spirit – or, for that matter, diminish the already unrealistic workload. How had matters come to these dire straits? It surely wasn’t the case that a dedicated multi-skilled dev team was lacking. Only, apart from this, the project seemed to be tainted with all the stains one can think of to make being Agile and rolling out Scrum difficult or impossible. When teams are immersed in a waterfall culture and stuck in the iron triangle of project management, there is little chance for Agility to be a success. Making matters worse, a belated start of the project (due to a delayed go) had gradually created a growing requirement/necessity to work quickly rather than focusing on quality.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/teams-under-high-voltage/main-image.png" /></entry><entry><title type="html">Kafka Streams introduction</title><link href="https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction.html" rel="alternate" type="text/html" title="Kafka Streams introduction" /><published>2018-10-23T00:00:00+00:00</published><updated>2018-10-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction</id><content type="html" xml:base="https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction.html">&lt;h1 id=&quot;kafka-stream---a-practical-introduction&quot;&gt;Kafka Stream - A practical introduction&lt;/h1&gt;

&lt;h2 id=&quot;the-goal&quot;&gt;The Goal&lt;/h2&gt;

&lt;p&gt;The aim of this article is to give an introduction to Streaming API, and more specifically to the Kafka streaming API.&lt;/p&gt;

&lt;p&gt;Since I’m not really into writing huge loads of theory, I’m going to try and keep the theory to the minimum to understand the basics and dive directly into the code by using an example.
That left the task to find a useful example, for which I got inspired by the work of some collegues. 
They created an IOT system that measures the usage of the staircase in big buildings with Lora IOT sensors (&lt;a href=&quot;https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stairway To Health&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So I thought that this is indeed streaming data, the people that open the doors of the staircase are considered as being the stream.&lt;/p&gt;

&lt;p&gt;With that done let’s go to the theory …&lt;/p&gt;

&lt;h2 id=&quot;the-theory&quot;&gt;The theory&lt;/h2&gt;

&lt;h3 id=&quot;ease-of-use&quot;&gt;Ease of Use&lt;/h3&gt;

&lt;p&gt;Kafka Streams is a simple client library which only depends on Kafka.
So if you have Kafka, there is nothing else you will need to do in order to be able to work with Kafka Streams.&lt;/p&gt;

&lt;h3 id=&quot;guarantees&quot;&gt;Guarantees&lt;/h3&gt;
&lt;p&gt;Kafka Streams provides you with guarantees making it safer for you to process records.&lt;/p&gt;

&lt;p&gt;The (intermediate) state of the stream processors is stored within replicated changelog topics allowing Kafka Streams to recover from failures and resume processing after replaying the changelog topics.&lt;/p&gt;

&lt;p&gt;A Kafka Streams stream processor will receive one input record at a time.
It will apply its operation to it, like: &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; and send out one or more output records to the downstream processors.&lt;/p&gt;

&lt;p&gt;Since 0.11.0, Kafka is able to process deliver messages exactly once, the same logic can be used within Kafka Streams so a record will only be processed exactly once.
Just set &lt;code class=&quot;highlighter-rouge&quot;&gt;processing.guarantee&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;exactly_once&lt;/code&gt;with the default being &lt;code class=&quot;highlighter-rouge&quot;&gt;at_least_once&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dsl&quot;&gt;DSL&lt;/h3&gt;
&lt;p&gt;Kafka Streams provides a &lt;a href=&quot;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain Specific Language&lt;/a&gt; which is recommended for most users, especially beginners.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KStream: a &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; is created from a specified Kafka input topic and interprets the data as a record stream. 
  It will only receive records of a subset of the topic partitions.
  All of the topics’ available partitions will be processed by Kafka Streams instances.&lt;/li&gt;
  &lt;li&gt;KTable: a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; is also based on a Kafka topic, but is interpreted as a changelog stream. 
  So that for every record key only the most recent value will be returned, it will also handle a subset of partitions.&lt;/li&gt;
  &lt;li&gt;GlobalKTable: a special type of &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;, as its data will be populated with records from all the partitions of the input topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you have created your &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; you can start with a variety of transformations on your record stream, like: &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;groupBy&lt;/code&gt;, …&lt;/p&gt;

&lt;p&gt;As you will see later in the example we provide, it is all quite easy to grasp.&lt;/p&gt;

&lt;h3 id=&quot;topology&quot;&gt;Topology&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/11/documentation/streams/core-concepts#streams_topology&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; alt=&quot;Kafka Streams Topology&quot; src=&quot;/img/kafka/streams-architecture-topology.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;source-processor&quot;&gt;Source Processor&lt;/h4&gt;
&lt;p&gt;A Source Processor does not have any upstream processors and it will produce an input stream from one or more Kafka topics.&lt;/p&gt;

&lt;h4 id=&quot;stream-processor&quot;&gt;Stream Processor&lt;/h4&gt;
&lt;p&gt;A node within the processor topology representing a single processing step, it is used to transform data.&lt;/p&gt;

&lt;h4 id=&quot;sink-processor&quot;&gt;Sink Processor&lt;/h4&gt;
&lt;p&gt;A Sink Processor will act like a sink, it will send any of the received records to a specific Kafka topic without any further processing.&lt;/p&gt;

&lt;h4 id=&quot;stream&quot;&gt;Stream&lt;/h4&gt;
&lt;p&gt;This corresponds to an unbounded, continuously updating data set. 
Like a Kafka topic it will consist of one or more stream partitions.&lt;/p&gt;

&lt;h3 id=&quot;local-state&quot;&gt;Local State&lt;/h3&gt;

&lt;p&gt;Every stream task in a Kafka Streams topology can use one or more local state stores.&lt;/p&gt;

&lt;p&gt;These state stores can be a &lt;a href=&quot;https://rocksdb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RocksDB&lt;/a&gt; database or an in-memory hash map.
When data is persisted to a local state store Kafka Streams provides automatic recovery in the case of some failure allowing the processing to continue.&lt;/p&gt;

&lt;h3 id=&quot;windowing&quot;&gt;Windowing&lt;/h3&gt;

&lt;p&gt;Time is pretty important when dealing with streams, we distinguish the following notions of time within streams:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event time: when the event occured.&lt;/li&gt;
  &lt;li&gt;Processing time: the time when the event was processed by the stream processing application.&lt;/li&gt;
  &lt;li&gt;Ingestion time: the time when the event was stored within a topic by Kafka.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows will allow you to group your records with the same record key towards that time.&lt;/p&gt;

&lt;p&gt;We have the following types of windows:&lt;/p&gt;
&lt;h4 id=&quot;tumbling-time-windows&quot;&gt;Tumbling time windows&lt;/h4&gt;
&lt;p&gt;These feature fixed-size, non-overlapping, gap-less windows.
Since the windows do not overlap, a data record will belong to only one window.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Tumbling Window&quot; src=&quot;/img/kafka/streams-time-windows-tumbling.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hopping-time-windows&quot;&gt;Hopping time windows&lt;/h3&gt;
&lt;p&gt;Hopping time windows feature a fixed size, but the advance interval (aka “hop”) can be different to that fixed size.
These windows can also overlap, so that a data record may belong to more then one window.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Hopping Window&quot; src=&quot;/img/kafka/streams-time-windows-hopping.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;session-windows&quot;&gt;Session windows&lt;/h3&gt;
&lt;p&gt;These represent a period of activity separated by a defined gap of inactivity.
All events within that gap will be merged with an existing session.
If the gap is too large, a new session window will be created, the size of the window itself will thus vary.
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Session Window&quot; src=&quot;/img/kafka/streams-session-windows-02.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-practical-part&quot;&gt;The Practical Part&lt;/h2&gt;
&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This project is intended as a first step into the world of streaming, so some shortcuts were taken, and not all design decisions are production ready. 
A good example is the use of strings as the content of the messages, this should be done in a more structured way (with &lt;a href=&quot;https://avro.apache.org/&quot;&gt;Avro&lt;/a&gt; for example){:target=”_blank” rel=”noopener noreferrer”}.&lt;/p&gt;

&lt;h3 id=&quot;setup-of-the-project&quot;&gt;Setup of the project&lt;/h3&gt;
&lt;p&gt;This is the really easy part, to use the streaming api from Kafka only 1 dependency must be added. 
Here is the example to do it in Maven.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;kafka-streams&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that is it. Sometimes life can be simple. :)&lt;/p&gt;

&lt;h3 id=&quot;creation-of-the-input&quot;&gt;Creation of the input&lt;/h3&gt;
&lt;p&gt;In the real world this would be done by the IOT devices that send their data through the network to the central system. 
But since it is not easy for demo purposes to have a sensor and a door nearby, and even less handy to open and close it a couple of hundred times to test it out,
I created a simulator that just sends data to the Kafka cluster.&lt;/p&gt;

&lt;p&gt;This simulator creates two kinds of messages:
&lt;code class=&quot;highlighter-rouge&quot;&gt;key = 0E7E346406100585, value = T_7&lt;/code&gt;
configuration information about on which floor a certain device is located.
&lt;code class=&quot;highlighter-rouge&quot;&gt;key = 0E7E346406100585, value = pulse@1496309915&lt;/code&gt;
each time a person opens the door, the key is the unique id of the device, and then a pulse and the time at which it occurred&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KafkaProducer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//send the device information&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s@%s@%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;T&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pulse@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This wil create three floors with a random device id, and afterwards it will send an event for a random door being opened 10 times.&lt;/p&gt;

&lt;h3 id=&quot;reading-of-the-output&quot;&gt;Reading of the output&lt;/h3&gt;

&lt;p&gt;For checking what happens in the system a data dumper was created that outputs all the messages on all the topics of interest (the input, the output and the intermediate queues included).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DumpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DumpData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;KafkaConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;your_client_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listTopics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streamName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;log:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ConsumerRecords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic = {}, partition = {}, offset = {}, key = {}, value = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will subscribe to all the topics that start with ‘stream_’ on the Kafka.&lt;/p&gt;

&lt;h3 id=&quot;the-main-part&quot;&gt;The main part&lt;/h3&gt;

&lt;p&gt;So we finally arrived at the part where it all happens.&lt;/p&gt;

&lt;p&gt;Just as a recap, the goal of this stream is to transform both input streams into a stream that gives how many people took the stairs at each floor.&lt;/p&gt;

&lt;p&gt;As a start we must create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamBuilder&lt;/code&gt; from the Kafka library&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to get the data somewhere, here we get it from the same topics our data simulater writes to.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceDev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// which device is where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the pulse messages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first stream (&lt;code class=&quot;highlighter-rouge&quot;&gt;stream_in_dev&lt;/code&gt;) will be converted into a lookup table that is used when handling the second stream. 
This lookup table will contain which device is installed on which floor.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamKtableDev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceDev&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_ktable_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since one of the shortcuts we took is creating all the topics with only one partition, we don’t have any problems with streams not having the data it needs.
If using multiple partitions, then we should have used either the &lt;code class=&quot;highlighter-rouge&quot;&gt;KGlobalTable&lt;/code&gt; 
or we should have made sure that the partitioning is done in such a way that we get the corresponding data from both partitions on this node.&lt;/p&gt;

&lt;p&gt;The second stream contains the pulses. Each time a person takes the stair, a message is sent, and this must be added to the counter of the people taking the stairs at that specific minute.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;stream_in&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;leftJoin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streamKtableDev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MINUTES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofEpochMilli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_out&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This seems to do a lot of things and this is indeed the case. But the API makes a clean chain that is not hard to follow.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; We only want the inputs that start with a pulse, the real IOT devices also send battery information and so on, on the same topic.
This could also be solved by sending them to different topics but it shows that filtering is possible&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.leftJoin() &lt;/code&gt; we join with the devices lookup table created with the previous KTable statement. This allows us to translate the device id into the location.
key is ‘0E7E346406100585’ and value is ‘pulse@1496309915’ will be translated to the same key but with value ‘T_7@1496309915’&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.map()&lt;/code&gt; we map the message into something more useful. 
in stead of the key ‘0E7E346406100585’ and value ‘T_7@1496309915’ format we now get a key of ‘T_7’ and a value of ‘1496309915’.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.groupByKey()&lt;/code&gt; we want to group these by key (which is now the floor number and not the device id like it was in the beginning)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.windowedBy()&lt;/code&gt; and create a tumbling window for each minute&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.count()&lt;/code&gt; and within the window count the number of items&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toStream()&lt;/code&gt; This means that the last three lines together change the stream into a stream that gives the number of messages per minute for a certain floor&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mapValues()&lt;/code&gt; map the result of this into a new stream that gives the amount per minute where the key is the floor (T_7) and the value is a combination of the amount and the when (5 - Thu Oct 10 16:28:04 CEST 2018)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;to()&lt;/code&gt; send it to the output stream&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Hans&quot;, &quot;last_name&quot;=&gt;&quot;Vanbellingen&quot;, &quot;permalink&quot;=&gt;&quot;/author/hans-vanbellingen/&quot;, &quot;avatar&quot;=&gt;&quot;hans-vanbellingen.png&quot;, &quot;linkedin&quot;=&gt;&quot;hans-vanbellingen-62009a5&quot;, &quot;github&quot;=&gt;&quot;pluimpje&quot;, &quot;title&quot;=&gt;&quot;Java Architect&quot;, &quot;email&quot;=&gt;&quot;hans.vanbellingen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Hans is a Java architect at Ordina Belgium. He is passionate about Stream Processing.&quot;}</name><email>hans.vanbellingen@ordina.be</email></author><category term="Kafka" /><category term="Kafka" /><category term="Stream" /><summary type="html">Kafka Stream - A practical introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kafka/kafka-logo-thumb.png" /></entry><entry><title type="html">Make your own CLI with golang and cobra</title><link href="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html" rel="alternate" type="text/html" title="Make your own CLI with golang and cobra" /><published>2018-10-20T00:00:00+00:00</published><updated>2018-10-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-functionality&quot;&gt;Adding functionality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-flags&quot;&gt;Adding flags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-environment-variables-instead-of-flags&quot;&gt;Using environment variables instead of flags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#taking-a-file-as-input&quot;&gt;Taking a file as input&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thats-it&quot;&gt;That’s it!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are lots of command line interfaces (CLIs) available these days, some of which are written in Golang.
There’s even a big chance that you’re using one of them.
Docker or Kubernetes for example, have a CLI written in Go.
These were written using a framework called Cobra.
And that’s exactly what I’m going to use to show you how to write your own simple CLI with Golang.
I’m also going to show you ways to provide parameters like environment variables and config files to your CLI, so you can do more than just the basics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;
&lt;p&gt;The framework &lt;a href=&quot;https://github.com/spf13/cobra&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cobra&lt;/a&gt; provides a generator that adds some boilerplate code for you.
This is handy because now you can focus more on the logic of your CLI instead of figuring out how to parse flags.
Assuming you have Golang correctly installed, you can get the generator by doing the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go get github.com/spf13/cobra/cobra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This creates an executable which you can run from anywhere, because it is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/bin&lt;/code&gt; directory, which is in turn added to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable if you installed Go correctly.&lt;/p&gt;

&lt;p&gt;You can go ahead and create a new folder for your Go code.
The name of the folder will be used as the name of your CLI.
Navigate inside this folder with your terminal and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;$ cobra init&lt;/code&gt; to start a new project.
It should generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; file and a cmd package.&lt;/p&gt;

&lt;p&gt;Sidenote: by default Cobra will add an Apache License.
If you don’t want this, you can add the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-l none&lt;/code&gt; to all the generator commands.
It will however add a copyright claim at the top of every file (&lt;code class=&quot;highlighter-rouge&quot;&gt;// Copyright © 2018 NAME HERE &amp;lt;EMAIL ADDRESS&amp;gt;&lt;/code&gt;).
If you pass the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-a YOUR NAME&lt;/code&gt; the claim will contain your name. These flags are optional though.&lt;/p&gt;

&lt;p&gt;When you look inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; file, there’s not much going on. It just calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt; function of the cmd package.
This function resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root.go&lt;/code&gt; file, which is doing a lot more. For now, just focus on this part:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// rootCmd represents the base command when called without any subcommands&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello-cobra&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A brief description of your application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`A longer description that spans multiple lines and likely contains
examples and usage of using your application. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Uncomment the following line if your bare application&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// has an action associated with it:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//  Run: func(cmd *cobra.Command, args []string) { },&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here you can define how to use the CLI, together with a short and a long description.&lt;/p&gt;

&lt;h1 id=&quot;adding-functionality&quot;&gt;Adding functionality&lt;/h1&gt;
&lt;p&gt;In the next step we need to think about which actions we want the CLI to perform.
A good practice is to work with verbs like get, post, describe,… For our example we want the CLI to say hello, so I’m going to construct it as follows:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To do this we can leverage the generator again to add a new command for us:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cobra add say
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It will generate a file inside the cmd package called &lt;code class=&quot;highlighter-rouge&quot;&gt;say.go&lt;/code&gt;.
In this file you can again specify the way you want the command to be used and describe its function.
You’ll also see the execute function which gets executed every time you call &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-cli say&lt;/code&gt;.
You’re probably never going to use it like that, except with a &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag. If a user calls it like that, we want the user to know he needs to provide additional items to the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command.
So we’re going to return an error if that happens.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function of the cobra command doesn’t return anything by default.
You can however change &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;RunE&lt;/code&gt;, which expects the function to return an error if there is any:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RunE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Provide item to the say command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RunE&lt;/code&gt; function also shows the help output if there’s an error.
This is to show the user how to properly use your command.&lt;/p&gt;

&lt;p&gt;At the bottom of the file you’ll see a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Here you will define your flags and configuration settings.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Cobra supports Persistent Flags which will work for this command&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// and all subcommands, e.g.:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// sayCmd.PersistentFlags().String(&quot;foo&quot;, &quot;&quot;, &quot;A help for foo&quot;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Cobra supports local flags which will only run when this command&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// is called directly, e.g.:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// sayCmd.Flags().BoolP(&quot;toggle&quot;, &quot;t&quot;, false, &quot;Help message for toggle&quot;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here you can add subcommands and flags.
By default, the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command is added to the root command, which is exactly what we want.
Let’s add a sub command to say hello:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cobra add sayhello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Like the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command, &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello&lt;/code&gt; is added to the root command.
In this case we want it to be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command instead:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To make the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello&lt;/code&gt; print “Hello World”, edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now execute the following inside your projectfolder:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Followed by:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If everything worked correctly, your CLI should output “Hello World!”.&lt;/p&gt;

&lt;h1 id=&quot;adding-flags&quot;&gt;Adding flags&lt;/h1&gt;
&lt;p&gt;To make your CLI a bit more interesting, we are going to add some flags.
You can choose between local and persistent ones.
Local flags are available only for that command, whereas persistent flags are also available for the subcommands of that command.
For this example we want to greet a person by name.
We’re going to do this by making a &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; flag.
Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello.go&lt;/code&gt; file, and add a flag:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first string is the full name of the flag, and can be executed with two dashes like &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;.
The second string is the short notation, which can be executed with one dash.
The third one is the default value, and the fourth is a description.&lt;/p&gt;

&lt;p&gt;To make the flag do something we need to add some logic to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
       		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hallo &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do a quick go install, and check if it works:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello-cli say hello &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; Nick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output should be “Hello Nick”.&lt;/p&gt;

&lt;h1 id=&quot;using-environment-variables-instead-of-flags&quot;&gt;Using environment variables instead of flags&lt;/h1&gt;
&lt;p&gt;If you don’t want to pollute your command line, or if you’re working with sensitive data which you don’t want to show up in the history, it’s a good idea to work with environment variables.
To do this, you can use &lt;a href=&quot;https://github.com/spf13/viper&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viper&lt;/a&gt;. Viper is another dependency from &lt;a href=&quot;https://github.com/spf13&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Steve Francia&lt;/a&gt;.
Cobra already uses Viper in the generated code, so why not use it as well.
You can however achieve the same result by using the os package from the Go standard library.&lt;/p&gt;

&lt;p&gt;We want to make the environment variable the default value.
If you remember, the default value is set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; function.:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ENVNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s all you need to do to parse environment variables.&lt;/p&gt;

&lt;h1 id=&quot;taking-a-file-as-input&quot;&gt;Taking a file as input&lt;/h1&gt;
&lt;p&gt;For this next part,  we want to provide multiple parameters to our CLI.
You can provide flags for every single one of them, but when you have a lot of parameters, a config file can be a better option.
So create a new file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; extension, and add the following contents:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Billy&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Howdy&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you used the generator, There will already be a flag configured that expects the path to an initial config file.
You can find this flag in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root.go&lt;/code&gt; file under the &lt;code class=&quot;highlighter-rouge&quot;&gt;initConfig()&lt;/code&gt; function.
As you can see, it uses Viper again to do this.&lt;/p&gt;

&lt;p&gt;Good news! We don’t have to do it ourselves!
The only thing we need to do is to extract the variables from the file:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again use Viper in the same way as you did before with the environment variables.
Try it out by doing another install and entering the following command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;You have successfully written a CLI in Golang that can parse about any variable around the block! 
All sample code can be found on &lt;a href=&quot;https://github.com/nickgeudens/hello-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Geudens&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-geudens/&quot;, &quot;avatar&quot;=&gt;&quot;nick-geudens.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;nickgeudens&quot;, &quot;github&quot;=&gt;&quot;nickgeudens&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;nick.geudens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java developer with a focus on backend development. This is certainly not an exclusion. Outside the Java world, you can also see him messing around with Angular, Go and Kubernetes and lots of other technologies.&quot;}</name><email>nick.geudens@ordina.be</email></author><category term="Development" /><category term="Golang" /><category term="Cobra" /><category term="CLI" /><category term="Go" /><summary type="html">Table of contents Getting started Adding functionality Adding flags Using environment variables instead of flags Taking a file as input That’s it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/make-your-own-cli-with-golang-and-cobra/banner.jpg" /></entry><entry><title type="html">Integrate Angular in Spring Boot using Gradle</title><link href="https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle.html" rel="alternate" type="text/html" title="Integrate Angular in Spring Boot using Gradle" /><published>2018-10-12T00:00:00+00:00</published><updated>2018-10-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle.html">&lt;p&gt;I often found myself struggling when I had to integrate Angular into a Spring Boot project. This is something that should
not take a lot of your valuable development time. That’s why I want to share how I did it with Gradle in a very fast and easy way.&lt;/p&gt;

&lt;p&gt;I set up an example repo which you can find &lt;a href=&quot;https://github.com/gurtjun/angular-spring-boot-gradle&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;application-structure&quot;&gt;Application structure&lt;/h2&gt;

&lt;p&gt;This guide assumes you have a root directory that contains two child directories. 
One with the Angular code, and another one with the Spring Boot code. By keeping these apart from each other
it will be easier to develop within the application.&lt;/p&gt;

&lt;p&gt;We’ll make use of &lt;a href=&quot;https://docs.gradle.org/current/userguide/intro_multi_project_builds.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gradle’s multi-project builds&lt;/a&gt;
to split the application into multiple modules.&lt;/p&gt;

&lt;p&gt;Because I generated my Spring Boot project with &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializr&lt;/a&gt;
I already have a Gradle Wrapper, &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew&lt;/code&gt; file, &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.bat&lt;/code&gt; file and &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; file available. 
We want to move those to our root directory. 
Keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file within the Spring Boot directory.&lt;/p&gt;

&lt;p&gt;We should also add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file to the root directory and another one to the child directory with our Angular code.&lt;/p&gt;

&lt;p&gt;Your application structure should look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradle.bat
├── todo-api
│   └── build.gradle
├── todo-ui
│   └── build.gradle
└── settings.gradle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have three &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; files, we’ll check their content within a minute. 
But we first have to tell Gradle the name of our project and make sure it will recognize the two modules. 
This can be done in &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo-api'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo-ui'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;todo&lt;/code&gt; as the project name and include both the backend and frontend module by specifying their directory name.
It’s important that this name matches the path of the directory, otherwise Gradle cannot find these modules.&lt;/p&gt;

&lt;p&gt;Gradle will now recognize both child directories as a subproject.&lt;/p&gt;

&lt;h2 id=&quot;angular&quot;&gt;Angular&lt;/h2&gt;

&lt;p&gt;For the Angular part we want to create a jar with a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; directory that contains the result of our Angular build. 
By doing this we can include the jar in our backend module. And because Spring Boot will automatically add static web 
resources located within &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;, the Angular application will be visible when we launch the application.&lt;/p&gt;

&lt;p&gt;This can be done by using the &lt;a href=&quot;https://plugins.gradle.org/plugin/com.moowork.node&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;com.moowork.node&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file in our &lt;code class=&quot;highlighter-rouge&quot;&gt;todo-ui&lt;/code&gt; project.&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.moowork.node&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.2.0&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9.2.0'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;npmVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'6.4.1'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'npm_run_build'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist/todo-ui'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me explain step-by-step what we’re doing here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We need the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; plugin to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task available and the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.moowork.node&lt;/code&gt; plugin to execute node scripts like &lt;code class=&quot;highlighter-rouge&quot;&gt;npm_run_build&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We have to specify which node and NPM version we want to use.&lt;/li&gt;
  &lt;li&gt;Before creating the jar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task we want to build our Angular project, otherwise we don’t have any static files to serve. 
This can be done by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm_run_build&lt;/code&gt; task.&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;When we build the Angular project our static files will become available in &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/todo-ui&lt;/code&gt;. We want those files into &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;from 'dist/todo-ui' into 'static'&lt;/code&gt; command in the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task will simply copy everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/todo-ui&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;.&lt;sup&gt;2&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we build the subproject it will run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and create a new jar with the build result in the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;We can now setup Spring Boot to include the jar.&lt;/p&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;

&lt;p&gt;Our Spring Boot project already has a &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file generated. 
We just have to add one line within our dependencies to include the todo-ui module.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':todo-ui'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build the project, execute the generated Spring Boot jar and go to &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;localhost:8080&lt;/a&gt;, 
you should see your Angular web application. That’s all folks!&lt;/p&gt;

&lt;h2 id=&quot;note&quot;&gt;Note&lt;/h2&gt;

&lt;p&gt;There are several ways to integrate Angular in Spring Boot using Gradle (or Maven). 
To me, this is the easiest and fastest way to do it. Because we’ve separated the backend from the frontend it will be 
a lot easier to find your way in both modules.&lt;/p&gt;

&lt;p&gt;Now go and apply this on your own projects! Don’t hesitate to contact me if you have any questions.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;&lt;sup&gt;
&lt;sup&gt;1&lt;/sup&gt; by default, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; will execute &lt;code class=&quot;highlighter-rouge&quot;&gt;ng build&lt;/code&gt; (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;)&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; by default, Angular will output the build result in &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/{project-name}&lt;/code&gt; (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;)
&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Gert-jan&quot;, &quot;last_name&quot;=&gt;&quot;Theunissen&quot;, &quot;permalink&quot;=&gt;&quot;/author/gert-jan-theunissen/&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;gert-jan.theunissen@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;gertjantheunissen&quot;, &quot;avatar&quot;=&gt;&quot;gert-jan-theunissen.jpg&quot;, &quot;github&quot;=&gt;&quot;gurtjun&quot;, &quot;bio&quot;=&gt;&quot;Gert-jan is a Software Developer at Ordina Belgium. He is passionate about front end stuff, but you can easily throw him in the back end jungle and he will survive. In his spare time he's practising some knee dragging on his motorcycle.&quot;}</name><email>gert-jan.theunissen@ordina.be</email></author><category term="Architecture" /><category term="Angular" /><category term="Spring Boot" /><category term="Gradle" /><summary type="html">I often found myself struggling when I had to integrate Angular into a Spring Boot project. This is something that should not take a lot of your valuable development time. That’s why I want to share how I did it with Gradle in a very fast and easy way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-12-spring-boot-angular-gradle/angular-spring-boot-gradle.jpg" /></entry></feed>