<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-11-02T15:53:07+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Communication in a distributed system with OpenFeign: Tips &amp;amp; Tricks</title><link href="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html" rel="alternate" type="text/html" title="Communication in a distributed system with OpenFeign: Tips &amp; Tricks" /><published>2018-11-02T00:00:00+00:00</published><updated>2018-11-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html">&lt;p&gt;In contrast to monolithic applications, services in a distributed system are running on multiple machines. 
To let these services interact with each other, we need some kind of inter-process communication mechanism.
With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#intercepting-requests&quot;&gt;Intercepting requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#give-it-a-retry&quot;&gt;Give it a (re)try&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-your-api&quot;&gt;Securing your API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;communication-with-openfeign&quot;&gt;Communication with OpenFeign&lt;/h1&gt;
&lt;p&gt;To understand the basics of inter-process communication, we need to look at what kind of interactions we can do.
&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign&lt;/a&gt;, a declarative HTTP client by Netflix simplifies our way of interacting with other services. 
When we decide that it is time to decompose our modulith because of numerous reasons, we would have to look for a way to handle our inter-process communication.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To use OpenFeign we need to add it to our classpath&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we inspect the dependency module, we see that there is a lot coming out-of-the-box with the Spring Cloud Starter.
If you are providing your own resilience or load balancing library you can just add the necessary dependencies you need.
Be aware that the syntax is different between using the Spring wrapper or OpenFeign itself.
To let your Spring context know that it has to search for OpenFeign clients, we just add &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableFeignClients&lt;/code&gt;. 
You can add this annotation to any class annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootApplication&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringCloudApplication&lt;/code&gt;
After we’ve enabled OpenFeign on our classpath, we can start adding OpenFeign clients. 
When defining these clients, we have two solutions you can choose from. 
The OpenFeign library, which provides us with the basics but very customizable OpenFeign clients, and the Spring library, that adds a few extra libraries to it for cloud tooling.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FallbackAuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeignConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@FeignClient&lt;/code&gt;: is the annotation for Spring to recognize OpenFeign clients, OpenFeign clients have to be interfaces as it is self-declarative.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;value/name&lt;/code&gt;: is the name of the Feign client that will be used to create a &lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt; load balancer which can then be linked to the target application using service discovery or a fixed list of servers. 
You could also use the url attribute to point your client to the target application when you’re not using Ribbon.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fallback&lt;/code&gt;: if &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt; is enabled, you can implement a fallback method.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FallbackAuthClient&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt;: is for extra configuration like logging, interceptors, etc… more on that below.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;: Spring Cloud adds support for Spring MVC annotations and for using the same &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter's&lt;/code&gt; used by default in Spring Web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openfeign&quot;&gt;OpenFeign&lt;/h2&gt;
&lt;p&gt;To create an OpenFeign client we need an interface and a Feign builder that tells the interface it is an OpenFeign client.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestLine&lt;/code&gt;: is defining which verb and which URI path you are communicating to.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Headers&lt;/code&gt;: is defining the request headers that come with the request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-builder&quot;&gt;The builder&lt;/h1&gt;
&lt;p&gt;OpenFeign provides us with a builder-like pattern for our clients.
When we want to customize, we just add our own customization to the builder. 
To see the builder at work, let’s create a bean of our client and return a Feign builder.
It’s important to let the builder know which interface he has to target for communication. 
The second parameter is most likely the base url where all the requests begin. 
Get your URLs from the yml or properties file with the help of &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${base.url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/h1&gt;
&lt;p&gt;The default HTTP client of OpenFeign uses &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpUrlConnection&lt;/code&gt; to execute its HTTP requests.
You can configure another client (&lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OkHttpClient&lt;/code&gt;, …) as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;okhttpclient&quot;&gt;OkHttpClient&lt;/h2&gt;
&lt;p&gt;OkHttp is an HTTP client that’s efficient by default:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/2 support allows all requests to the same host to share a socket.&lt;/li&gt;
  &lt;li&gt;Connection pooling reduces request latency (if HTTP/2 isn’t available).&lt;/li&gt;
  &lt;li&gt;Transparent GZIP shrinks download sizes.&lt;/li&gt;
  &lt;li&gt;Response caching avoids the network completely for repeat requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apachehttpclient&quot;&gt;ApacheHttpClient&lt;/h2&gt;
&lt;p&gt;The advantage of using &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; over the default client is that &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; sends more headers with the request, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;, which some servers expect.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside from these clients, there are a few more to research if you want : &lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;OpenFeign clients&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/h1&gt;
&lt;p&gt;Mutual SSL is supported in all of these clients.
To achieve this in an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, we have to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; that builds the SSL context.
When the SSL context is valid, we wrap this inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; for being compliant with OpenFeign.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add it to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;give-it-a-retry&quot;&gt;Give it a (re)try&lt;/h1&gt;
&lt;p&gt;When we want to build some resilience in our communication, we can setup a retry mechanism in our OpenFeign client. 
If the other service is unreachable, we will try again until it is healthy or until the max attempts you have set in your configuration has been reached. 
When we want to use the retryer of OpenFeign, we got three properties we can set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;period&lt;/code&gt;: How long it takes before the retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxPeriod&lt;/code&gt;: That’s what the maximum is of how long it can take before a retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxAttempts&lt;/code&gt;: How many retries may the client trigger before it fails&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.period:3000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxPeriod:30000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxAttempts:5}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;intercepting-requests&quot;&gt;Intercepting requests&lt;/h1&gt;
&lt;p&gt;If you need some basic authorization, custom headers or some extra information in every request of the client, we can use interceptors. 
This becomes very useful in situations where every request needs this extra information.
To add an interceptor, we just add an extra method that returns the OpenFeign interceptor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestInterceptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMimeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To enable the customization, we add the interceptor to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;securing-your-api&quot;&gt;Securing your API&lt;/h1&gt;
&lt;p&gt;When we want to add the security layer between our services, there are a couple solutions to look at. 
Here are a few that can be handled by OpenFeign.&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;
&lt;p&gt;When you want to send basic credentials you can just add an &lt;a href=&quot;#intercepting-requests&quot;&gt;interceptor&lt;/a&gt; for the OpenFeign client and add the username and password.&lt;/p&gt;

&lt;h2 id=&quot;bearer&quot;&gt;Bearer&lt;/h2&gt;
&lt;p&gt;For only Bearer token communication, you can just pass it down in the request header of your method call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Spring&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//OpenFeign&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;oauth2&quot;&gt;OAuth2&lt;/h2&gt;
&lt;p&gt;This link provides a good explanation about the use of OAuth2 with OpenFeign: 
&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/h1&gt;
&lt;p&gt;Besides JSON encoders and decoders, you can also enable support for XML.
If you ever have to integrate with SOAP third party APIs, OpenFeign supports it.
There is a very detailed explanation on how to use it in the &lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; of OpenFeign.&lt;/p&gt;

&lt;h1 id=&quot;handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/h1&gt;
&lt;p&gt;The OpenFeign API provides an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; to handle erroneous responses from servers.
Since there are many kind of errors we can get, we want a place where we can handle each one of them accordingly. 
An OpenFeign &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; must be added to the configuration of the client object as you can see in the code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than throwing an exception in the &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, you return an exception to Feign and Feign will throw it for you.
The default error decoder &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder.Default&lt;/code&gt; always throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt;.
The problem with ending up with a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt; is that it does not contain a lot of structure. 
It is a plain &lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt; which only contains a message with a stringified response body. 
No way of interpreting that exception to rethrow a more functional exception eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotFoundException&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;error-decoder&quot;&gt;Error decoder&lt;/h2&gt;
&lt;p&gt;To handle the errors, we have to look at the structure of these errors. 
From that structure, we build up our own exception and throw it so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerAdvice&lt;/code&gt; class can handle our exception.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomErrorDecoder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorDecoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomExceptionException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.errors&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; 
Working with checked exceptions and Feign is a bit tricky for several reasons.
Returning a checked exception is possible in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, but to avoid Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;UndeclaredThrowableException&lt;/code&gt;, you’ll have to add it to the method signature in the Feign interface. 
Doing this however, causes Sonar to complain because there’s no actual code which throws that exception.
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These were my experiences with OpenFeign and I like the simplicity of it. 
If you choose for the Spring wrapper or OpenFeign, the client is an advanced tool for enabling inter-service communication.
As of now, they just released a new version that is compliant with Java 11.
So go experiment and learn on the way!&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.0.1.RELEASE/single/spring-cloud-openfeign.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;SOAP integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;Other HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem, Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Kevin has a strong focus on building cloud native architectures with the right mindset on security and API design.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="Spring" /><category term="Cloud" /><category term="OpenFeign" /><summary type="html">In contrast to monolithic applications, services in a distributed system are running on multiple machines. To let these services interact with each other, we need some kind of inter-process communication mechanism. With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/intercommunication/intercomm_header.jpg" /></entry><entry><title type="html">Kickstarter Trajectory 2018 Summer Edition</title><link href="https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer.html" rel="alternate" type="text/html" title="Kickstarter Trajectory 2018 Summer Edition" /><published>2018-10-29T00:00:00+00:00</published><updated>2018-10-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer</id><content type="html" xml:base="https://ordina-jworks.github.io/kickstarters/2018/10/29/Kickstarter-Trajectory-2018-Summer.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;54 young professionals started the Ordina kickstarter trajectory this summer, on the 1st of August. 
JWorks counted 5 kickstarters: Sander, Steven, Ken, Wout en Michaël. All looking for a challenge and a fresh start. 
Some freshly graduated from school, others having multiple years of experience, IT related or not. 
The goal was to broaden every kickstarter’s knowledge of the fast evolving IT world. 
We learned the basics of every hot topic which will definitely give us enough credits for our first project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The kickstarter trajectory consisted of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One month covering all kinds of trainings: technical, non-technical, backend, frontend, DevOps…&lt;/li&gt;
  &lt;li&gt;After our minds were filled with all this information, there was a DevCase where we could put everything we learned into practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;first-day&quot;&gt;First Day&lt;/h2&gt;
&lt;p&gt;On the first day of the kickstarter trajectory we were welcomed into Ordina and got an introduction about the structure of the company. 
After that we took a tour around the building, and we were told what the different workspaces are and where the different teams work. 
It was nice to notice that everyone we met was very friendly and helpful. 
This made us feel directly at ease.
On the first day we also received the keys of our car and a laptop, so we were equipped to begin our journey at Ordina.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;
&lt;p&gt;In the beginning of the trajectory we got an introduction by &lt;a href=&quot;/author/time-de-grande&quot; target=&quot;_blank&quot;&gt;Tim De Grande&lt;/a&gt; of the most important security principles like GDPR. 
This is very important to Ordina because all its consultants need to keep this information in the back of their minds when working at a customer.
We also followed a more technical security course which explained some of the most common attacks and how to avoid them.&lt;/p&gt;

&lt;h2 id=&quot;backend&quot;&gt;Backend&lt;/h2&gt;

&lt;h3 id=&quot;java&quot;&gt;Java&lt;/h3&gt;
&lt;p&gt;In this lecture given by &lt;a href=&quot;/author/yannick-de-turck/&quot; target=&quot;_blank&quot;&gt;Yannick De Turck&lt;/a&gt;, we were introduced to all new features of Java 7, 8 and 9 aswell as Java 10.&lt;/p&gt;

&lt;p&gt;We started off with Java 7 where we learned:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Switch-statement with String values&lt;/li&gt;
  &lt;li&gt;Automatic Resource Management&lt;/li&gt;
  &lt;li&gt;Diamond Syntax&lt;/li&gt;
  &lt;li&gt;Better exception handling with multi-catch&lt;/li&gt;
  &lt;li&gt;Literal Enhancements&lt;/li&gt;
  &lt;li&gt;The new IO API&lt;/li&gt;
  &lt;li&gt;Fork Join Framework&lt;/li&gt;
  &lt;li&gt;JVM Enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 8 also introduced some useful new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda Expressions&lt;/li&gt;
  &lt;li&gt;Extension Methods&lt;/li&gt;
  &lt;li&gt;Functional Interfaces&lt;/li&gt;
  &lt;li&gt;Method and Constructor References&lt;/li&gt;
  &lt;li&gt;Streams and Bulk Data Operations for Collections&lt;/li&gt;
  &lt;li&gt;Removal of PermGen&lt;/li&gt;
  &lt;li&gt;New Date &amp;amp; Time API&lt;/li&gt;
  &lt;li&gt;New Default API for Base64 Encoding&lt;/li&gt;
  &lt;li&gt;Improvements for Annotations&lt;/li&gt;
  &lt;li&gt;Performance Improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 9 introduces:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Project Jigsaw: Modules&lt;/li&gt;
  &lt;li&gt;Project Kulla: JShell&lt;/li&gt;
  &lt;li&gt;Factory Methods for collections&lt;/li&gt;
  &lt;li&gt;Diamond operator for anonymous inner classes&lt;/li&gt;
  &lt;li&gt;Try-with-resources enhancement&lt;/li&gt;
  &lt;li&gt;CompletableFuture API improvements&lt;/li&gt;
  &lt;li&gt;Private methods in interfaces&lt;/li&gt;
  &lt;li&gt;HTTP 2.0 Client&lt;/li&gt;
  &lt;li&gt;Process API Improvements&lt;/li&gt;
  &lt;li&gt;Reactive Streams&lt;/li&gt;
  &lt;li&gt;Optional Improvements&lt;/li&gt;
  &lt;li&gt;Collectors Improvements&lt;/li&gt;
  &lt;li&gt;Stream Improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least we had an introduction of Java 10 which delivers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Local Variable Type Inference&lt;/li&gt;
  &lt;li&gt;Unmodifiable Collections&lt;/li&gt;
  &lt;li&gt;New Optional.orElseThrow() method&lt;/li&gt;
  &lt;li&gt;Performance Improvements&lt;/li&gt;
  &lt;li&gt;Container awareness&lt;/li&gt;
  &lt;li&gt;Root CA Certificates included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the afternoon we made a few exercises on these new features and improvements which gave us a brighter view on the possibilities within present Java development.&lt;/p&gt;

&lt;h3 id=&quot;spring-and-spring-boot&quot;&gt;Spring and Spring Boot&lt;/h3&gt;
&lt;p&gt;The lectures of Spring and Spring Boot were given by &lt;a href=&quot;/author/ken-coenen&quot; target=&quot;_blank&quot;&gt;Ken Coenen&lt;/a&gt;. 
These were spread over two days where the first day was an overal introduction to Spring fundamentals, followed by a second day where we have put everything into practice.&lt;/p&gt;

&lt;h4 id=&quot;day-1&quot;&gt;Day 1:&lt;/h4&gt;
&lt;p&gt;The first day we got an introduction to Spring and Spring Boot about the core fundamentals and concepts of JPA, Beans and application contexts. 
After that we went further into the features of the framework where we were introduced to Spring Web Services and Spring Security.&lt;/p&gt;

&lt;h4 id=&quot;day-2&quot;&gt;Day 2:&lt;/h4&gt;
&lt;p&gt;On the second day we made a small project where we created a backend application to fetch all information of different digital coins (cryptocurrencies). 
We learned how to read data from an API using DTOs and storing them into a database. 
At the end of the day we had a fully working backend application which fetched all information automatically and exposed it to different endpoints.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;SpringBoot&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/be-course.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/author/tim-ysewyn&quot; target=&quot;_blank&quot;&gt;Tim Ysewyn&lt;/a&gt; and &lt;a href=&quot;/author/kevin-van-houtte&quot; target=&quot;_blank&quot;&gt;Kevin Van Houtte&lt;/a&gt; gave a brief overview of the microservices architecture. 
We learned when this is best applicable. 
This can be applied when there is a monolith that is responsible for multiple different tasks. 
It could be better in that case to split off these different tasks into multiple microservices. 
One of the advantages of doing that is the possibility to deploy the different microservices separately and the possibility to upscale the resources of the microservices that receive the biggest loads.&lt;/p&gt;

&lt;h3 id=&quot;clean-code&quot;&gt;Clean Code&lt;/h3&gt;
&lt;p&gt;During this course of clean code, &lt;a href=&quot;/author/pieter-van-hees&quot; target=&quot;_blank&quot;&gt;Pieter Van Hees&lt;/a&gt; taught us the best practices of how to write clean code. 
This improves the readability and performance of our applications which is of great importance to Ordina.&lt;/p&gt;

&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;p&gt;The frontend courses started off with HTML/CSS/JavaScript given by &lt;a href=&quot;/author/yannick-vergeylen&quot; target=&quot;_blank&quot;&gt;Yannick Vergeylen&lt;/a&gt; after which we went more in-depth of other topics.&lt;/p&gt;

&lt;h4 id=&quot;build-tools&quot;&gt;Build tools:&lt;/h4&gt;
&lt;p&gt;In this course given by &lt;a href=&quot;/author/michael-vervloet&quot; target=&quot;_blank&quot;&gt;Michael Vervloet&lt;/a&gt;, we started off with Node.js and its features like asynchronous programming and event emitters.
Later, we learned about NPM and other package managers and how to use them inside a project like an Angular app. 
At the end, Angular-CLI was covered, the start of one of the most important frameworks we use at JWorks.&lt;/p&gt;

&lt;h4 id=&quot;typescript&quot;&gt;Typescript:&lt;/h4&gt;
&lt;p&gt;In the TypeScript course given by &lt;a href=&quot;/author/kevin-van-houtte&quot; target=&quot;_blank&quot;&gt;Kevin Van Houtte&lt;/a&gt;, we built further on Node.js and NPM. 
We did an exercise about school management where we used OO-programming and CRUD in TypeScript. 
This was pretty challenging but with each other’s help, we managed to get the final assessment done.&lt;/p&gt;

&lt;h4 id=&quot;angular&quot;&gt;Angular:&lt;/h4&gt;
&lt;p&gt;Angular was the last frontend course given by &lt;a href=&quot;/author/ryan-de-gruyter&quot; target=&quot;_blank&quot;&gt;Ryan De Gruyter&lt;/a&gt;. This helped us to quickly create a frontend that is connected to a backend project. Here, we went more in-depth on the SPA framework and how different components interact with each other.&lt;/p&gt;

&lt;h2 id=&quot;devops&quot;&gt;Devops&lt;/h2&gt;
&lt;p&gt;The trajectory also included courses about the DevOps culture. 
We got some introductions to Docker, Kubernetes and CI/CD given by &lt;a href=&quot;/author/tim-vierbergen&quot; target=&quot;_blank&quot;&gt;Tim Vierbergen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;docker--kubernetes&quot;&gt;Docker &amp;amp; Kubernetes&lt;/h3&gt;
&lt;p&gt;These courses were given by &lt;a href=&quot;/author/tom-verelst&quot; target=&quot;_blank&quot;&gt;Tom Verelst&lt;/a&gt;. 
He explained us the basics of containerization, more specifically how this is done by Docker.
During this hands-on session we learned how to work with containers and images. 
We learned how to use, create and delete them. 
There was also an explanation of the theory behind containerization and what the advantages are of using this, especially when compared to using virtual machines.&lt;/p&gt;

&lt;p&gt;To orchestrate the containers, we received a course on Kubernetes. There we learned about the concepts of pods, secrets, and more.
We practiced this in a small exercise where we needed to configure a Minikube and run a simple application.&lt;/p&gt;

&lt;h3 id=&quot;cloud&quot;&gt;Cloud&lt;/h3&gt;
&lt;p&gt;The last technical session we followed was about different cloud technologies. This was given by &lt;a href=&quot;/author/dieter-hubau/&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt; and &lt;a href=&quot;/author/bas-moorkens/&quot; target=&quot;_blank&quot;&gt;Bas Moorkens&lt;/a&gt;.
We learned about the advantages of running applications in the cloud and what the differences are between the different operation models.
To make this more tangible, we went into multiple cloud platforms to see what the possibilities were. 
At the end we focussed on OpenShift Origin as this is one of the preferred container management packages inside JWorks.&lt;/p&gt;

&lt;h2 id=&quot;soft-skills&quot;&gt;Soft Skills&lt;/h2&gt;
&lt;p&gt;Besides sharpening our technical skills we worked on our soft skills as well.
In the 2-day session ‘Essentials of Communication’ we learned how to present ourselves by means of role playing games and cases that reflect real world scenarios.
After an additional ‘Brand Yourself’ session we were ready to prove and present ourselves as worthy consultants to the management of Ordina.
All these techniques are also useful in the Agile &amp;amp; Scrum methodologies where we learned the importance of being prepared for change.&lt;/p&gt;

&lt;h2 id=&quot;devcase&quot;&gt;DevCase&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;DevCase&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/fe-preview1.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction-1&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;During the second month of the kickstarter trajectory we were assigned to develop an event planner.
The purpose was to have more of an overview and control of the upcoming JWorks events.
In short, JWorks employees can create and approve events depending on their rights.
In addition, a weekly digest of the events is sent to the JWorks Telegram chat group and a Telegram bot is made available with some defined commands.&lt;/p&gt;

&lt;h4 id=&quot;technology--methodologies&quot;&gt;Technology &amp;amp; Methodologies&lt;/h4&gt;
&lt;p&gt;Together with our coaches &lt;a href=&quot;/author/orjan-de-smet&quot; target=&quot;_blank&quot;&gt;Orjan De Smet&lt;/a&gt;, &lt;a href=&quot;/author/axel-bergmans&quot; target=&quot;_blank&quot;&gt;Axel Bergmans&lt;/a&gt; and Haroun Pacquée we started off with an introduction to the project.
The user stories were presented on the Scrum board.
After defining the sprint goal for the first upcoming two weeks we divided ourselves into a frontend and a backend group. 
Using Scrum methodology we held our daily stand-up meetings and as soon as a new functionality was developed a pull request was made and reviewed by our coaches.
Every two weeks, at the end of the sprint, a demo was shown to our coaches followed by a retrospective and a sprint planning.
By making use of Continuous Integration, code changes in Github were automatically deployed to OpenShift where a Jenkins pipeline went through different stages ranging from testing the code and code quality, to building the Docker image.&lt;/p&gt;

&lt;p&gt;Frontend tools that were used in the project:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;Angular-CLI&lt;/li&gt;
  &lt;li&gt;Angular Material&lt;/li&gt;
  &lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the backend we made use of the following technologies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 8&lt;/li&gt;
  &lt;li&gt;Spring Boot&lt;/li&gt;
  &lt;li&gt;Mockito and JUnit&lt;/li&gt;
  &lt;li&gt;Telegram API&lt;/li&gt;
  &lt;li&gt;Keycloak Security&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more technical details of the used tools and technologies of the DevCase, a separate blog post will follow!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;DevCase&quot; src=&quot;/img/2018-08-06-Kickstarter-Trajectory-2018-Summer/fe-preview2.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;personal-experiences&quot;&gt;Personal Experiences&lt;/h3&gt;
&lt;h4 id=&quot;ken-keymolen&quot;&gt;&lt;a href=&quot;/author/ken-keymolen&quot; target=&quot;_blank&quot;&gt;Ken Keymolen&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory provides the means to learn new evolutions &amp;amp; technologies within the IT world.
The DevCase gave us a good understanding on how to incorporate new technologies within an IT project. 
These trainings provide a solid base to continue to build our skills &amp;amp; expertise in the different areas IT has to offer,
making sure we are positioned to provide the best solutions for our customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sander-smets&quot;&gt;&lt;a href=&quot;/author/sander-smets&quot; target=&quot;_blank&quot;&gt;Sander Smets&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Before the kickstarter trajectory, I did not really have an in-depth view on deployment and cloud automation. 
Our DevCase and trainings made sure that all of us have a complete understanding of frontend and backend technologies, cloud automation and new architecture strategies like DDD and microservices. 
Now I feel like a more complete developer and ready to tackle day-to-day problems at customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;wout-meskens&quot;&gt;&lt;a href=&quot;/author/wout-meskens&quot; target=&quot;_blank&quot;&gt;Wout Meskens&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;I am very happy that I have been given the opportunity to follow the kickstarter trajectory. 
The first month updated my knowledge about a lot of interesting topics. 
It was especially interesting to learn about the DevOps technologies. 
The DevCase was very helpful to put all this new knowledge into practice. 
It was fun to see that we could make an exciting application with all these technologies. 
The kickstarter trajectory made me excited to use these technologies to help customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;steven-deleye&quot;&gt;&lt;a href=&quot;/author/steven-deleye&quot; target=&quot;_blank&quot;&gt;Steven Deleye&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory was the chance for me to learn a lot about new technologies in a short amount of time.
Putting this information into practice during the DevCase gave me more understanding in how and when we use these technologies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;michael-de-wree&quot;&gt;&lt;a href=&quot;/author/michael-de-wree&quot; target=&quot;_blank&quot;&gt;Michael De Wree&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;The kickstarter trajectory was not easy, but achievable. 
This made me so much more excited. 
Especially the DevCase was a good way to gain technical experience. 
Besides the possibility to learn and grow, Ordina makes me feel at home. 
I look forward to the next couple of years!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wout&quot;, &quot;last_name&quot;=&gt;&quot;Meskens&quot;, &quot;github&quot;=&gt;&quot;meskensw&quot;, &quot;linkedin&quot;=&gt;&quot;meskenswout&quot;, &quot;permalink&quot;=&gt;&quot;/author/wout-meskens/&quot;, &quot;avatar&quot;=&gt;&quot;wout-meskens.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;wout.meskens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wout is a Java Developer at Ordina Belgium who also is interested in frontend technologies. He likes to keep learning new things and improve his knowledge about the newest technologies.&quot;}</name><email>wout.meskens@ordina.be</email></author><category term="Kickstarters" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit Test" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="Typescript" /><category term="Kickstarter" /><category term="Security" /><summary type="html">Introduction 54 young professionals started the Ordina kickstarter trajectory this summer, on the 1st of August. JWorks counted 5 kickstarters: Sander, Steven, Ken, Wout en Michaël. All looking for a challenge and a fresh start. Some freshly graduated from school, others having multiple years of experience, IT related or not. The goal was to broaden every kickstarter’s knowledge of the fast evolving IT world. We learned the basics of every hot topic which will definitely give us enough credits for our first project.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">The Lead Developer London 2018</title><link href="https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018.html" rel="alternate" type="text/html" title="The Lead Developer London 2018" /><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/10/26/lead-dev-london-2018.html">&lt;h2 id=&quot;london&quot;&gt;London!&lt;/h2&gt;

&lt;p&gt;For the fourth year in a row &lt;a href=&quot;https://www.whiteoctoberevents.co.uk/&quot; target=&quot;_blank&quot;&gt;White October Events&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/Geek_Manager&quot; target=&quot;_blank&quot;&gt;Meri Williams&lt;/a&gt; organised &lt;a href=&quot;https://theleaddeveloper.com/&quot; target=&quot;_blank&quot;&gt;The Lead Developer&lt;/a&gt;: a two-day conference covering topics from leadership to self-improvement and team dynamics, mixed with some technical talks. 
This year Ordina JWorks travelled to the Barbican Centre in London to attend this amazing and inspiring conference for the very first time and returned home energized and full of ideas!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As tech lead you have to be a great developer. 
But you also need to be a good team leader, be commercially astute, and stay on top of all the tech developments and trends coming over the horizon. 
With a balance of content across team, tools and tech, The Lead Developer conference is designed with the complexities of the job in mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/lead-dev-venue.jpg&quot; alt=&quot;The Lead Developer 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this blogpost we will summarize some of the talks that are mainly focused on personal development of a team lead. All talks were recorded and can be found on &lt;a href=&quot;https://www.youtube.com/playlist?list=PLBzScQzZ83I_VX8zgmLqIfma_kJs3RRmu&quot; target=&quot;_blank&quot;&gt;The Lead Developer London 2018 YouTube channel&lt;/a&gt;. Highly recommended!&lt;/p&gt;

&lt;h2 id=&quot;first-steps-as-a-lead-by-dan-persa&quot;&gt;‘First steps as a lead’ by &lt;a href=&quot;https://twitter.com/danpersa&quot; target=&quot;_blank&quot;&gt;Dan Persa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dan Persa&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/dan-persa.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Why become a lead in the first place?
According to Dan Persa, dealing with people problems is much more interesting than dealing with computers, but each company interprets this in a slightly different way. 
Some call it “tech lead”, others call it “people manager”, but in either case it is your job to understand what the role is all about and check that it fits your expectations.
Becoming a lead is not a natural evolution for a developer. 
It’s a career switch and not a promotion; because a different skillset is required.
The Don’t-Repeat-Yourself principle, which is a key principle for each software developer, does not apply when working with people. 
Communicate things over and over again.
Repetition is key.&lt;/p&gt;

&lt;p&gt;Getting into leadership is not trivial, so ask people around you for help. How do you learn these leadership skills very fast?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shadow a mentor to ensure a smooth transition and not feeling lost.&lt;/li&gt;
  &lt;li&gt;Don’t just read books, but put them in practice as well.&lt;/li&gt;
  &lt;li&gt;Reflect and remember good and not-so-good behaviour from your former leads.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a lead you need to create an open and safe environment with mutual trust.
But how you do earn the trust and respect of your team?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open yourself up to be vulnerable.&lt;/li&gt;
  &lt;li&gt;Have regular one-to-ones.&lt;/li&gt;
  &lt;li&gt;Be transparent in decision-making, especially around performance evaluations.&lt;/li&gt;
  &lt;li&gt;The best solutions to problems come from the team, let them take ownership of the problem.&lt;/li&gt;
  &lt;li&gt;Create a feedback culture: give feedback as soon as possible after the action in need of feedback happened, decouple development feedback from performance evaluations, and organise health checks meetings.&lt;/li&gt;
  &lt;li&gt;Celebrate successes!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Not taking a decision is a decision: we are accountable for the decisions we take as well as for the ones we decide not to take.” &lt;a href=&quot;https://twitter.com/danpersa&quot; target=&quot;_blank&quot;&gt;@danpersa&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-sustainable-teams-to-handle-uncertainty-by-jenny-duckett&quot;&gt;‘Building sustainable teams to handle uncertainty’ by &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;Jenny Duckett&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jenny Duckett&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/jenny-duckett.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can disrupt a team?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we frequently make deliberate changes about how we’re working in our team, change is often a good thing. However, there’s uncertainty involved.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;People can leave or join the team; team members can feel un(der)valued. The dynamics of personalities and opinions change whenever people change.&lt;/li&gt;
  &lt;li&gt;It can be hard for teams to make decisions and handle roadmaps while senior leaders move. Revisiting decisions that you thought you’d settled and making progress can be hard.&lt;/li&gt;
  &lt;li&gt;Shifting wider priorities can make a team feel frustrated and disempowered.&lt;/li&gt;
  &lt;li&gt;Re-organising teams out of existence can make people feel undervalued as individuals.&lt;/li&gt;
  &lt;li&gt;Even things like desk moves can have a significant impact on people. More about this on &lt;a href=&quot;https://larahogan.me/blog/desk-moves/&quot; target=&quot;_blank&quot;&gt;Lara Hogan’s blogpost&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting people through these things more than occasionally, will result in a retention problem.
The way changes make people feel is at least as important as the change itself.
Emotions are critical.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“An empowered, open team who understands its context can adapt to change.” &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;@jenny_duckett&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What can you do to prepare?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, work on yourself so you can sustain through these disruptive changes and be able to support your team better as a result.
You don’t need to do it all yourself: let go of details, give people your trust and assume positive intent.
Set yourself up to lead sustainably.&lt;/p&gt;

&lt;p&gt;Make your team’s work ownable by stopping to split efforts and starting to define a single and clear goal. 
Communicate this goal over and over again.
It will feel like you’re just repeating yourself and you’re boring people, but it’s reassuring just to know that the goal hasn’t changed.
Give your team the background they need for each piece of work by adding context to user stories, organizing story kickoffs and running workshops.&lt;/p&gt;

&lt;p&gt;Empower your team to take ownership by embracing opportunities for positive change.
Also become great at integrating new people by assigning them a mentor. 
Let them improve your onboarding guide and technical documentation.
Make it clear that you value learning as part of everyday work, recognise that everyone is always learning.
Share understanding of your work in the team, the whole context is important.
This can be done by writing good commit messages (also the why not just the what), but also by documenting decisions and the reasons for it, and keeping your documentation up-to-date.
Taking ownership helps people handle change.&lt;/p&gt;

&lt;p&gt;Support and grow individuals. Use every piece of work to help someone grow and start with individual needs.
Effective delegation can be accomplished by being clear and explicit, explain what’s happening and why.
Also set the scope and boundaries, what’s the problem that they’re trying to solve, who’s involved and when should they bring questions to you.
Grow the next generation of leaders by teaching people to do your job and make yourself dispensable.&lt;/p&gt;

&lt;p&gt;Show your team where they fit into the wider organisation and how they relate to its goals.
A wider view helps people adapt when things change.
Don’t over-insulate your team because when something gets through your shield, it will be very disruptive.
Grow people for a resilient team and organisation, and encourage your team to show off their work, to be proud of it.&lt;/p&gt;

&lt;p&gt;Make sure that your manager understands how much work it takes from everyone to build a team that works well and the time it takes to become familiar with the domain they’re working in.
Ask them for support to build a sustainable team and show why all your team’s work matters.
Good communication about change is vital.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When stressful things happen, it’s easy to default back to not communicating. But that’s when it’s even more important to empower people during tough times.” &lt;a href=&quot;https://twitter.com/jenny_duckett&quot; target=&quot;_blank&quot;&gt;@jenny_duckett&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-hardest-scaling-challenge-of-all---yourself-by-christian-mccarrick&quot;&gt;‘The hardest scaling challenge of all - yourself’ by &lt;a href=&quot;https://twitter.com/cmccarrick&quot; target=&quot;_blank&quot;&gt;Christian McCarrick&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Christian McCarrick&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/christian-mccarrick.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be an effective communicator: as you grow, you’ll get better at getting your point across to larger and larger groups.&lt;/li&gt;
  &lt;li&gt;Communicate up to the manager, across peers and down to your team.&lt;/li&gt;
  &lt;li&gt;Personal branding and self-promotion are important: have confidence and show the value of your work.&lt;/li&gt;
  &lt;li&gt;Create a safe environment by genuinely praising other people and giving honest feedback.&lt;/li&gt;
  &lt;li&gt;Seek out for negative feedback and ask specific questions for better feedback.&lt;/li&gt;
  &lt;li&gt;The most important communication skill to learn is how to say “no” without feeling guilty.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prioritization &amp;amp; Time management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you don’t prioritize your life, someone else will.&lt;/li&gt;
  &lt;li&gt;The Eisenhower Matrix: How to make decisions on what’s urgent and important.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;The Eisenhower Matrix&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/eisenhower.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multitasking is an anti-pattern, so write down all the things you need to do and keep a journal.&lt;/li&gt;
  &lt;li&gt;Turn off email notifications. Instead, schedule short blocks during the day when you quickly check emails and schedule longer blocks at the end of the day where you tidy things up.&lt;/li&gt;
  &lt;li&gt;Get into the zone by blocking your calendar: dedicate time to specific things.&lt;/li&gt;
  &lt;li&gt;Make yourself a priority once in a while. It’s not selfish, it’s necessary.&lt;/li&gt;
  &lt;li&gt;Obsess with the things that matter!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Delegation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Move away from “How can I get things done?” to “How can this task/decision/goal get done?”.&lt;/li&gt;
  &lt;li&gt;Not delegating properly is one of the biggest anti-patterns and limits the scaling your entire team because you become the bottleneck around decision making.&lt;/li&gt;
  &lt;li&gt;Let things go!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Personal development &amp;amp; mental health&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Leading takes energy and often gets lonely.&lt;/li&gt;
  &lt;li&gt;If athletes get injured, they sit on the bench. Mental fatigue and burnout are issues that affects us more than we might think.&lt;/li&gt;
  &lt;li&gt;Excercise, meditate (tip: &lt;a href=&quot;https://www.headspace.com/&quot; target=&quot;_blank&quot;&gt;Headspace&lt;/a&gt;), and read every day.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Your job as a manager is to make your team more badass.” &lt;a href=&quot;https://twitter.com/cmccarrick&quot; target=&quot;_blank&quot;&gt;@cmccarrick&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;go-slow-to-go-fast-building-strong-foundations-for-leadership-by-alicia-liu&quot;&gt;‘Go slow to go fast: building strong foundations for leadership’ by &lt;a href=&quot;https://twitter.com/aliciatweet&quot; target=&quot;_blank&quot;&gt;Alicia Liu&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Alicia Liu&quot; src=&quot;/img/2018-10-26-Lead-Dev-London-2018/alicia-liu.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Alicia talked about how her rapid increase in job responsibilities in a rapidly growing startup led to an increase in stress, difficulty sleeping, and ultimately depression. 
She wrote a great &lt;a href=&quot;https://betterhumans.coach.me/how-depression-made-me-a-morning-person-cda4889662ff&quot; target=&quot;_blank&quot;&gt;blogpost&lt;/a&gt; and gave a very inspiring talk about the tools she used to recover from depression and insomnia, and how she became a better leader and manager.&lt;/p&gt;

&lt;p&gt;A lot of engineers are promoted into management because they’re good engineers, regardless of their management skills.
Some people are naturally good at both, but if you’re good at engineering, it might actually be harder to develop leadership skills. 
Coding drains a lot of mental energy, while managing others requires lots of emotional energy.
Being a good engineer doesn’t make you a good leader because information is not the same as knowledge. 
You can’t study to be a leader, you’ll have to change and embrace discomfort to become a good leader. 
Be humble by listening to others, being present with each person and regularly switching context is a hard thing to do.
Focus first on form then speed.
Mastering others is power, mastering yourself is true strength.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A gardener doesn’t tell plants how to grow. A gardener creates the best environment for the plants to flourish. But you still need to know how to garden, and you need to know what to weed out. Leadership is about dealing with the unknowns.” &lt;a href=&quot;https://twitter.com/aliciatweet&quot; target=&quot;_blank&quot;&gt;@aliciatweet&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/LeadDevLondon?src=hash&quot; target=&quot;_blank&quot;&gt;#LeadDevLondon&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martin&quot;, &quot;last_name&quot;=&gt;&quot;Kwee&quot;, &quot;permalink&quot;=&gt;&quot;/author/martin-kwee/&quot;, &quot;avatar&quot;=&gt;&quot;martin-kwee.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;martin.kwee@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;kw33m&quot;, &quot;github&quot;=&gt;&quot;kweem&quot;, &quot;linkedin&quot;=&gt;&quot;martinkwee&quot;, &quot;bio&quot;=&gt;&quot;Martin is a Principal Java Consultant at Ordina Belgium. He enjoys a good technical challenge and is passionate about learning new innovative technologies and architectures.&quot;}</name><email>martin.kwee@ordina.be</email></author><category term="Conference" /><category term="The Lead Developer" /><category term="Conference" /><summary type="html">London!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-26-Lead-Dev-London-2018/lead-dev.png" /></entry><entry><title type="html">Team under High Voltage</title><link href="https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage.html" rel="alternate" type="text/html" title="Team under High Voltage" /><published>2018-10-23T00:00:00+00:00</published><updated>2018-10-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/10/23/Team-under-High-Voltage.html">&lt;p&gt;Recently a client called on us to help bring motivation back to a development team.
Although the final deadline for delivery was nearing rapidly, team members started to leave the project, worn out and fed up.
Need it be said that this didn’t exactly promote work joy and team spirit – or, for that matter, diminish the already unrealistic workload.
How had matters come to these dire straits?
It surely wasn’t the case that a dedicated multi-skilled dev team was lacking.
Only, apart from this, the project seemed to be tainted with all the stains one can think of to make being Agile and rolling out Scrum difficult or impossible.
When teams are immersed in a waterfall culture and stuck in the iron triangle of project management, there is little chance for Agility to be a success.
Making matters worse, a belated start of the project (due to a delayed go) had gradually created a growing requirement/necessity to work quickly rather than focusing on quality.&lt;/p&gt;

&lt;p&gt;The easy answer would be… just fix Scrum and all the rest will follow.
That makes sense, for indeed, Scrum can fix a whole lot, with effort, time and a great deal of customer convincing.
Creating customer satisfaction by maximizing the business value, is of course the ultimate goal of every software project.
But the belated launch of the project and the sheer impossibility of still attaining the definition of success – made me realize that it would be very wrong to talk about story points or speeding up velocity.
It wouldn’t even be right to keep focusing on minimizing the MVP – which in this case is at a bare minimum already.
We all have to choose our battles wisely.
The first thing to do, I thought, is enable the team to find a common denominator, a list of preferred behaviours and shared interests that would make them feel better as a team.
Primary focus is ensuring that the project mood board switches from taking to giving energy to the people working on it.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;High Voltage&quot; src=&quot;/img/teams-under-high-voltage/voltage.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This exercise makes it possible to disconnect the team members’ degree of happiness and motivation from the looming deadlines and the ever-changing backlog.
This makes success somehow achievable again, albeit a more personal sort of success, focused on growth and team dynamics.
I know this sounds like a long shot, but at least it could possibly lead to a solution with a long-term outcome.
In working together the Agile way, we must always remember that people and interactions come first.
Read the &lt;a href=&quot;http://agilemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Manifesto&lt;/a&gt; carefully – and you will see that the psychological safety of a team is key to the whole lot – enabling flow away from the items on the right and making room for the items on the left.
From there, all the rest is due to follow.
Burning up story points should never be accompanied by burning up energy.
What is burning down at one side should be building up at the other.
Once this is ensured, progress comes at a steady pace.&lt;/p&gt;

&lt;h2 id=&quot;details-about-the-exercise&quot;&gt;Details about the exercise&lt;/h2&gt;

&lt;p&gt;Are you interested in knowing how I helped the team detect these common denominators?
For that I used the liberating structure 1-2-4-All, which goes like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everybody gets a card and a thin marker.&lt;/li&gt;
  &lt;li&gt;In a time box of one minute, everyone by themselves writes down what comes after “I hate it when people…”
(Somehow it’s easier for people to find examples of unwanted behaviour, than asking them for what they appreciate.)&lt;/li&gt;
  &lt;li&gt;Next two minutes they pair up and share their examples, thinking the value and good behaviour that could counterbalance the negative one.
This value should be written on the other side of each card.&lt;/li&gt;
  &lt;li&gt;Team up to make a group of four and share your good behaviours and values during a time box of four minutes.
Start clustering them when doubles or connections start to emerge.&lt;/li&gt;
  &lt;li&gt;For ten to fifteen minutes (depending on how big the group is), everybody explains to the group their preferred behaviour and the related value.
Try to cluster them into groups and define a common denominator for each cluster, to make it more manageable.
Make sure that everyone understands them and that nobody perceives any contradictory combinations.&lt;/li&gt;
  &lt;li&gt;Ask for commitment of the group to try and stick to these behaviours and values.
Anyone who doesn’t respect them, can be made accountable and should be addressed by the others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t hesitate to reach out if you have any questions regarding this topic!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="Coaching" /><category term="Demotivation" /><category term="Definition of Success" /><category term="Team Dynamics" /><category term="Psychological Safety" /><summary type="html">Recently a client called on us to help bring motivation back to a development team. Although the final deadline for delivery was nearing rapidly, team members started to leave the project, worn out and fed up. Need it be said that this didn’t exactly promote work joy and team spirit – or, for that matter, diminish the already unrealistic workload. How had matters come to these dire straits? It surely wasn’t the case that a dedicated multi-skilled dev team was lacking. Only, apart from this, the project seemed to be tainted with all the stains one can think of to make being Agile and rolling out Scrum difficult or impossible. When teams are immersed in a waterfall culture and stuck in the iron triangle of project management, there is little chance for Agility to be a success. Making matters worse, a belated start of the project (due to a delayed go) had gradually created a growing requirement/necessity to work quickly rather than focusing on quality.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/teams-under-high-voltage/main-image.png" /></entry><entry><title type="html">Kafka Streams introduction</title><link href="https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction.html" rel="alternate" type="text/html" title="Kafka Streams introduction" /><published>2018-10-23T00:00:00+00:00</published><updated>2018-10-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction</id><content type="html" xml:base="https://ordina-jworks.github.io/kafka/2018/10/23/kafka-stream-introduction.html">&lt;h1 id=&quot;kafka-stream---a-practical-introduction&quot;&gt;Kafka Stream - A practical introduction&lt;/h1&gt;

&lt;h2 id=&quot;the-goal&quot;&gt;The Goal&lt;/h2&gt;

&lt;p&gt;The aim of this article is to give an introduction to Streaming API, and more specifically to the Kafka streaming API.&lt;/p&gt;

&lt;p&gt;Since I’m not really into writing huge loads of theory, I’m going to try and keep the theory to the minimum to understand the basics and dive directly into the code by using an example.
That left the task to find a useful example, for which I got inspired by the work of some collegues. 
They created an IOT system that measures the usage of the staircase in big buildings with Lora IOT sensors (&lt;a href=&quot;https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stairway To Health&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So I thought that this is indeed streaming data, the people that open the doors of the staircase are considered as being the stream.&lt;/p&gt;

&lt;p&gt;With that done let’s go to the theory …&lt;/p&gt;

&lt;h2 id=&quot;the-theory&quot;&gt;The theory&lt;/h2&gt;

&lt;h3 id=&quot;ease-of-use&quot;&gt;Ease of Use&lt;/h3&gt;

&lt;p&gt;Kafka Streams is a simple client library which only depends on Kafka.
So if you have Kafka, there is nothing else you will need to do in order to be able to work with Kafka Streams.&lt;/p&gt;

&lt;h3 id=&quot;guarantees&quot;&gt;Guarantees&lt;/h3&gt;
&lt;p&gt;Kafka Streams provides you with guarantees making it safer for you to process records.&lt;/p&gt;

&lt;p&gt;The (intermediate) state of the stream processors is stored within replicated changelog topics allowing Kafka Streams to recover from failures and resume processing after replaying the changelog topics.&lt;/p&gt;

&lt;p&gt;A Kafka Streams stream processor will receive one input record at a time.
It will apply its operation to it, like: &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; and send out one or more output records to the downstream processors.&lt;/p&gt;

&lt;p&gt;Since 0.11.0, Kafka is able to process deliver messages exactly once, the same logic can be used within Kafka Streams so a record will only be processed exactly once.
Just set &lt;code class=&quot;highlighter-rouge&quot;&gt;processing.guarantee&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;exactly_once&lt;/code&gt;with the default being &lt;code class=&quot;highlighter-rouge&quot;&gt;at_least_once&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dsl&quot;&gt;DSL&lt;/h3&gt;
&lt;p&gt;Kafka Streams provides a &lt;a href=&quot;https://kafka.apache.org/20/documentation/streams/developer-guide/dsl-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain Specific Language&lt;/a&gt; which is recommended for most users, especially beginners.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KStream: a &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; is created from a specified Kafka input topic and interprets the data as a record stream. 
  It will only receive records of a subset of the topic partitions.
  All of the topics’ available partitions will be processed by Kafka Streams instances.&lt;/li&gt;
  &lt;li&gt;KTable: a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; is also based on a Kafka topic, but is interpreted as a changelog stream. 
  So that for every record key only the most recent value will be returned, it will also handle a subset of partitions.&lt;/li&gt;
  &lt;li&gt;GlobalKTable: a special type of &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;, as its data will be populated with records from all the partitions of the input topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you have created your &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; you can start with a variety of transformations on your record stream, like: &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;groupBy&lt;/code&gt;, …&lt;/p&gt;

&lt;p&gt;As you will see later in the example we provide, it is all quite easy to grasp.&lt;/p&gt;

&lt;h3 id=&quot;topology&quot;&gt;Topology&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/11/documentation/streams/core-concepts#streams_topology&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 300px;&quot; alt=&quot;Kafka Streams Topology&quot; src=&quot;/img/kafka/streams-architecture-topology.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;source-processor&quot;&gt;Source Processor&lt;/h4&gt;
&lt;p&gt;A Source Processor does not have any upstream processors and it will produce an input stream from one or more Kafka topics.&lt;/p&gt;

&lt;h4 id=&quot;stream-processor&quot;&gt;Stream Processor&lt;/h4&gt;
&lt;p&gt;A node within the processor topology representing a single processing step, it is used to transform data.&lt;/p&gt;

&lt;h4 id=&quot;sink-processor&quot;&gt;Sink Processor&lt;/h4&gt;
&lt;p&gt;A Sink Processor will act like a sink, it will send any of the received records to a specific Kafka topic without any further processing.&lt;/p&gt;

&lt;h4 id=&quot;stream&quot;&gt;Stream&lt;/h4&gt;
&lt;p&gt;This corresponds to an unbounded, continuously updating data set. 
Like a Kafka topic it will consist of one or more stream partitions.&lt;/p&gt;

&lt;h3 id=&quot;local-state&quot;&gt;Local State&lt;/h3&gt;

&lt;p&gt;Every stream task in a Kafka Streams topology can use one or more local state stores.&lt;/p&gt;

&lt;p&gt;These state stores can be a &lt;a href=&quot;https://rocksdb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RocksDB&lt;/a&gt; database or an in-memory hash map.
When data is persisted to a local state store Kafka Streams provides automatic recovery in the case of some failure allowing the processing to continue.&lt;/p&gt;

&lt;h3 id=&quot;windowing&quot;&gt;Windowing&lt;/h3&gt;

&lt;p&gt;Time is pretty important when dealing with streams, we distinguish the following notions of time within streams:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event time: when the event occured.&lt;/li&gt;
  &lt;li&gt;Processing time: the time when the event was processed by the stream processing application.&lt;/li&gt;
  &lt;li&gt;Ingestion time: the time when the event was stored within a topic by Kafka.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows will allow you to group your records with the same record key towards that time.&lt;/p&gt;

&lt;p&gt;We have the following types of windows:&lt;/p&gt;
&lt;h4 id=&quot;tumbling-time-windows&quot;&gt;Tumbling time windows&lt;/h4&gt;
&lt;p&gt;These feature fixed-size, non-overlapping, gap-less windows.
Since the windows do not overlap, a data record will belong to only one window.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Tumbling Window&quot; src=&quot;/img/kafka/streams-time-windows-tumbling.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hopping-time-windows&quot;&gt;Hopping time windows&lt;/h3&gt;
&lt;p&gt;Hopping time windows feature a fixed size, but the advance interval (aka “hop”) can be different to that fixed size.
These windows can also overlap, so that a data record may belong to more then one window.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Hopping Window&quot; src=&quot;/img/kafka/streams-time-windows-hopping.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;session-windows&quot;&gt;Session windows&lt;/h3&gt;
&lt;p&gt;These represent a period of activity separated by a defined gap of inactivity.
All events within that gap will be merged with an existing session.
If the gap is too large, a new session window will be created, the size of the window itself will thus vary.
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; alt=&quot;Session Window&quot; src=&quot;/img/kafka/streams-session-windows-02.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-practical-part&quot;&gt;The Practical Part&lt;/h2&gt;
&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This project is intended as a first step into the world of streaming, so some shortcuts were taken, and not all design decisions are production ready. 
A good example is the use of strings as the content of the messages, this should be done in a more structured way (with &lt;a href=&quot;https://avro.apache.org/&quot;&gt;Avro&lt;/a&gt; for example){:target=”_blank” rel=”noopener noreferrer”}.&lt;/p&gt;

&lt;h3 id=&quot;setup-of-the-project&quot;&gt;Setup of the project&lt;/h3&gt;
&lt;p&gt;This is the really easy part, to use the streaming api from Kafka only 1 dependency must be added. 
Here is the example to do it in Maven.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;kafka-streams&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that is it. Sometimes life can be simple. :)&lt;/p&gt;

&lt;h3 id=&quot;creation-of-the-input&quot;&gt;Creation of the input&lt;/h3&gt;
&lt;p&gt;In the real world this would be done by the IOT devices that send their data through the network to the central system. 
But since it is not easy for demo purposes to have a sensor and a door nearby, and even less handy to open and close it a couple of hundred times to test it out,
I created a simulator that just sends data to the Kafka cluster.&lt;/p&gt;

&lt;p&gt;This simulator creates two kinds of messages:
&lt;code class=&quot;highlighter-rouge&quot;&gt;key = 0E7E346406100585, value = T_7&lt;/code&gt;
configuration information about on which floor a certain device is located.
&lt;code class=&quot;highlighter-rouge&quot;&gt;key = 0E7E346406100585, value = pulse@1496309915&lt;/code&gt;
each time a person opens the door, the key is the unique id of the device, and then a pulse and the time at which it occurred&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KafkaProducer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//send the device information&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s@%s@%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;T&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pulse@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This wil create three floors with a random device id, and afterwards it will send an event for a random door being opened 10 times.&lt;/p&gt;

&lt;h3 id=&quot;reading-of-the-output&quot;&gt;Reading of the output&lt;/h3&gt;

&lt;p&gt;For checking what happens in the system a data dumper was created that outputs all the messages on all the topics of interest (the input, the output and the intermediate queues included).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DumpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DumpData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;KafkaConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;your_client_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listTopics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streamName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;log:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ConsumerRecords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic = {}, partition = {}, offset = {}, key = {}, value = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will subscribe to all the topics that start with ‘stream_’ on the Kafka.&lt;/p&gt;

&lt;h3 id=&quot;the-main-part&quot;&gt;The main part&lt;/h3&gt;

&lt;p&gt;So we finally arrived at the part where it all happens.&lt;/p&gt;

&lt;p&gt;Just as a recap, the goal of this stream is to transform both input streams into a stream that gives how many people took the stairs at each floor.&lt;/p&gt;

&lt;p&gt;As a start we must create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamBuilder&lt;/code&gt; from the Kafka library&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to get the data somewhere, here we get it from the same topics our data simulater writes to.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceDev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// which device is where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the pulse messages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first stream (&lt;code class=&quot;highlighter-rouge&quot;&gt;stream_in_dev&lt;/code&gt;) will be converted into a lookup table that is used when handling the second stream. 
This lookup table will contain which device is installed on which floor.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamKtableDev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceDev&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_ktable_dev&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since one of the shortcuts we took is creating all the topics with only one partition, we don’t have any problems with streams not having the data it needs.
If using multiple partitions, then we should have used either the &lt;code class=&quot;highlighter-rouge&quot;&gt;KGlobalTable&lt;/code&gt; 
or we should have made sure that the partitioning is done in such a way that we get the corresponding data from both partitions on this node.&lt;/p&gt;

&lt;p&gt;The second stream contains the pulses. Each time a person takes the stair, a message is sent, and this must be added to the counter of the people taking the stairs at that specific minute.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;stream_in&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;leftJoin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streamKtableDev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pulse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MINUTES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofEpochMilli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stream_out&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This seems to do a lot of things and this is indeed the case. But the API makes a clean chain that is not hard to follow.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; We only want the inputs that start with a pulse, the real IOT devices also send battery information and so on, on the same topic.
This could also be solved by sending them to different topics but it shows that filtering is possible&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.leftJoin() &lt;/code&gt; we join with the devices lookup table created with the previous KTable statement. This allows us to translate the device id into the location.
key is ‘0E7E346406100585’ and value is ‘pulse@1496309915’ will be translated to the same key but with value ‘T_7@1496309915’&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.map()&lt;/code&gt; we map the message into something more useful. 
in stead of the key ‘0E7E346406100585’ and value ‘T_7@1496309915’ format we now get a key of ‘T_7’ and a value of ‘1496309915’.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.groupByKey()&lt;/code&gt; we want to group these by key (which is now the floor number and not the device id like it was in the beginning)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.windowedBy()&lt;/code&gt; and create a tumbling window for each minute&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.count()&lt;/code&gt; and within the window count the number of items&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toStream()&lt;/code&gt; This means that the last three lines together change the stream into a stream that gives the number of messages per minute for a certain floor&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mapValues()&lt;/code&gt; map the result of this into a new stream that gives the amount per minute where the key is the floor (T_7) and the value is a combination of the amount and the when (5 - Thu Oct 10 16:28:04 CEST 2018)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;to()&lt;/code&gt; send it to the output stream&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Hans&quot;, &quot;last_name&quot;=&gt;&quot;Vanbellingen&quot;, &quot;permalink&quot;=&gt;&quot;/author/hans-vanbellingen/&quot;, &quot;avatar&quot;=&gt;&quot;hans-vanbellingen.png&quot;, &quot;linkedin&quot;=&gt;&quot;hans-vanbellingen-62009a5&quot;, &quot;github&quot;=&gt;&quot;pluimpje&quot;, &quot;title&quot;=&gt;&quot;Java Architect&quot;, &quot;email&quot;=&gt;&quot;hans.vanbellingen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Hans is a Java architect at Ordina Belgium. He is passionate about Stream Processing.&quot;}</name><email>hans.vanbellingen@ordina.be</email></author><category term="Kafka" /><category term="Kafka" /><category term="Stream" /><summary type="html">Kafka Stream - A practical introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kafka/kafka-logo-thumb.png" /></entry><entry><title type="html">Make your own CLI with golang and cobra</title><link href="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html" rel="alternate" type="text/html" title="Make your own CLI with golang and cobra" /><published>2018-10-20T00:00:00+00:00</published><updated>2018-10-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-functionality&quot;&gt;Adding functionality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-flags&quot;&gt;Adding flags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-environment-variables-instead-of-flags&quot;&gt;Using environment variables instead of flags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#taking-a-file-as-input&quot;&gt;Taking a file as input&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thats-it&quot;&gt;That’s it!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are lots of command line interfaces (CLIs) available these days, some of which are written in Golang.
There’s even a big chance that you’re using one of them.
Docker or Kubernetes for example, have a CLI written in Go.
These were written using a framework called Cobra.
And that’s exactly what I’m going to use to show you how to write your own simple CLI with Golang.
I’m also going to show you ways to provide parameters like environment variables and config files to your CLI, so you can do more than just the basics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;
&lt;p&gt;The framework &lt;a href=&quot;https://github.com/spf13/cobra&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cobra&lt;/a&gt; provides a generator that adds some boilerplate code for you.
This is handy because now you can focus more on the logic of your CLI instead of figuring out how to parse flags.
Assuming you have Golang correctly installed, you can get the generator by doing the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go get github.com/spf13/cobra/cobra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This creates an executable which you can run from anywhere, because it is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/bin&lt;/code&gt; directory, which is in turn added to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable if you installed Go correctly.&lt;/p&gt;

&lt;p&gt;You can go ahead and create a new folder for your Go code.
The name of the folder will be used as the name of your CLI.
Navigate inside this folder with your terminal and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;$ cobra init&lt;/code&gt; to start a new project.
It should generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; file and a cmd package.&lt;/p&gt;

&lt;p&gt;Sidenote: by default Cobra will add an Apache License.
If you don’t want this, you can add the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-l none&lt;/code&gt; to all the generator commands.
It will however add a copyright claim at the top of every file (&lt;code class=&quot;highlighter-rouge&quot;&gt;// Copyright © 2018 NAME HERE &amp;lt;EMAIL ADDRESS&amp;gt;&lt;/code&gt;).
If you pass the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-a YOUR NAME&lt;/code&gt; the claim will contain your name. These flags are optional though.&lt;/p&gt;

&lt;p&gt;When you look inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; file, there’s not much going on. It just calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt; function of the cmd package.
This function resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root.go&lt;/code&gt; file, which is doing a lot more. For now, just focus on this part:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// rootCmd represents the base command when called without any subcommands&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello-cobra&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A brief description of your application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`A longer description that spans multiple lines and likely contains
examples and usage of using your application. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Uncomment the following line if your bare application&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// has an action associated with it:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//  Run: func(cmd *cobra.Command, args []string) { },&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here you can define how to use the CLI, together with a short and a long description.&lt;/p&gt;

&lt;h1 id=&quot;adding-functionality&quot;&gt;Adding functionality&lt;/h1&gt;
&lt;p&gt;In the next step we need to think about which actions we want the CLI to perform.
A good practice is to work with verbs like get, post, describe,… For our example we want the CLI to say hello, so I’m going to construct it as follows:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To do this we can leverage the generator again to add a new command for us:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cobra add say
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It will generate a file inside the cmd package called &lt;code class=&quot;highlighter-rouge&quot;&gt;say.go&lt;/code&gt;.
In this file you can again specify the way you want the command to be used and describe its function.
You’ll also see the execute function which gets executed every time you call &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-cli say&lt;/code&gt;.
You’re probably never going to use it like that, except with a &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag. If a user calls it like that, we want the user to know he needs to provide additional items to the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command.
So we’re going to return an error if that happens.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function of the cobra command doesn’t return anything by default.
You can however change &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;RunE&lt;/code&gt;, which expects the function to return an error if there is any:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RunE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Provide item to the say command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RunE&lt;/code&gt; function also shows the help output if there’s an error.
This is to show the user how to properly use your command.&lt;/p&gt;

&lt;p&gt;At the bottom of the file you’ll see a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Here you will define your flags and configuration settings.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Cobra supports Persistent Flags which will work for this command&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// and all subcommands, e.g.:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// sayCmd.PersistentFlags().String(&quot;foo&quot;, &quot;&quot;, &quot;A help for foo&quot;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Cobra supports local flags which will only run when this command&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// is called directly, e.g.:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// sayCmd.Flags().BoolP(&quot;toggle&quot;, &quot;t&quot;, false, &quot;Help message for toggle&quot;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here you can add subcommands and flags.
By default, the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command is added to the root command, which is exactly what we want.
Let’s add a sub command to say hello:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cobra add sayhello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Like the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command, &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello&lt;/code&gt; is added to the root command.
In this case we want it to be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;say&lt;/code&gt; command instead:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To make the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello&lt;/code&gt; print “Hello World”, edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now execute the following inside your projectfolder:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Followed by:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If everything worked correctly, your CLI should output “Hello World!”.&lt;/p&gt;

&lt;h1 id=&quot;adding-flags&quot;&gt;Adding flags&lt;/h1&gt;
&lt;p&gt;To make your CLI a bit more interesting, we are going to add some flags.
You can choose between local and persistent ones.
Local flags are available only for that command, whereas persistent flags are also available for the subcommands of that command.
For this example we want to greet a person by name.
We’re going to do this by making a &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; flag.
Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayhello.go&lt;/code&gt; file, and add a flag:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first string is the full name of the flag, and can be executed with two dashes like &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;.
The second string is the short notation, which can be executed with one dash.
The third one is the default value, and the fourth is a description.&lt;/p&gt;

&lt;p&gt;To make the flag do something we need to add some logic to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
       		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hallo &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do a quick go install, and check if it works:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello-cli say hello &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; Nick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output should be “Hello Nick”.&lt;/p&gt;

&lt;h1 id=&quot;using-environment-variables-instead-of-flags&quot;&gt;Using environment variables instead of flags&lt;/h1&gt;
&lt;p&gt;If you don’t want to pollute your command line, or if you’re working with sensitive data which you don’t want to show up in the history, it’s a good idea to work with environment variables.
To do this, you can use &lt;a href=&quot;https://github.com/spf13/viper&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Viper&lt;/a&gt;. Viper is another dependency from &lt;a href=&quot;https://github.com/spf13&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Steve Francia&lt;/a&gt;.
Cobra already uses Viper in the generated code, so why not use it as well.
You can however achieve the same result by using the os package from the Go standard library.&lt;/p&gt;

&lt;p&gt;We want to make the environment variable the default value.
If you remember, the default value is set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; function.:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayhelloCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ENVNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s all you need to do to parse environment variables.&lt;/p&gt;

&lt;h1 id=&quot;taking-a-file-as-input&quot;&gt;Taking a file as input&lt;/h1&gt;
&lt;p&gt;For this next part,  we want to provide multiple parameters to our CLI.
You can provide flags for every single one of them, but when you have a lot of parameters, a config file can be a better option.
So create a new file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; extension, and add the following contents:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Billy&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Howdy&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you used the generator, There will already be a flag configured that expects the path to an initial config file.
You can find this flag in the &lt;code class=&quot;highlighter-rouge&quot;&gt;root.go&lt;/code&gt; file under the &lt;code class=&quot;highlighter-rouge&quot;&gt;initConfig()&lt;/code&gt; function.
As you can see, it uses Viper again to do this.&lt;/p&gt;

&lt;p&gt;Good news! We don’t have to do it ourselves!
The only thing we need to do is to extract the variables from the file:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cobra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again use Viper in the same way as you did before with the environment variables.
Try it out by doing another install and entering the following command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hello-cli say hello &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;You have successfully written a CLI in Golang that can parse about any variable around the block! 
All sample code can be found on &lt;a href=&quot;https://github.com/nickgeudens/hello-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Geudens&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-geudens/&quot;, &quot;avatar&quot;=&gt;&quot;nick-geudens.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;nickgeudens&quot;, &quot;github&quot;=&gt;&quot;nickgeudens&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;nick.geudens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java developer with a focus on backend development. This is certainly not an exclusion. Outside the Java world, you can also see him messing around with Angular, Go and Kubernetes and lots of other technologies.&quot;}</name><email>nick.geudens@ordina.be</email></author><category term="Development" /><category term="Golang" /><category term="Cobra" /><category term="CLI" /><category term="Go" /><summary type="html">Table of contents Getting started Adding functionality Adding flags Using environment variables instead of flags Taking a file as input That’s it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/make-your-own-cli-with-golang-and-cobra/banner.jpg" /></entry><entry><title type="html">Integrate Angular in Spring Boot using Gradle</title><link href="https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle.html" rel="alternate" type="text/html" title="Integrate Angular in Spring Boot using Gradle" /><published>2018-10-12T00:00:00+00:00</published><updated>2018-10-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2018/10/12/spring-boot-angular-gradle.html">&lt;p&gt;I often found myself struggling when I had to integrate Angular into a Spring Boot project. This is something that should
not take a lot of your valuable development time. That’s why I want to share how I did it with Gradle in a very fast and easy way.&lt;/p&gt;

&lt;p&gt;I set up an example repo which you can find &lt;a href=&quot;https://github.com/gurtjun/angular-spring-boot-gradle&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;application-structure&quot;&gt;Application structure&lt;/h2&gt;

&lt;p&gt;This guide assumes you have a root directory that contains two child directories. 
One with the Angular code, and another one with the Spring Boot code. By keeping these apart from each other
it will be easier to develop within the application.&lt;/p&gt;

&lt;p&gt;We’ll make use of &lt;a href=&quot;https://docs.gradle.org/current/userguide/intro_multi_project_builds.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gradle’s multi-project builds&lt;/a&gt;
to split the application into multiple modules.&lt;/p&gt;

&lt;p&gt;Because I generated my Spring Boot project with &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializr&lt;/a&gt;
I already have a Gradle Wrapper, &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew&lt;/code&gt; file, &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.bat&lt;/code&gt; file and &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; file available. 
We want to move those to our root directory. 
Keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file within the Spring Boot directory.&lt;/p&gt;

&lt;p&gt;We should also add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file to the root directory and another one to the child directory with our Angular code.&lt;/p&gt;

&lt;p&gt;Your application structure should look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradle.bat
├── todo-api
│   └── build.gradle
├── todo-ui
│   └── build.gradle
└── settings.gradle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have three &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; files, we’ll check their content within a minute. 
But we first have to tell Gradle the name of our project and make sure it will recognize the two modules. 
This can be done in &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo-api'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'todo-ui'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;todo&lt;/code&gt; as the project name and include both the backend and frontend module by specifying their directory name.
It’s important that this name matches the path of the directory, otherwise Gradle cannot find these modules.&lt;/p&gt;

&lt;p&gt;Gradle will now recognize both child directories as a subproject.&lt;/p&gt;

&lt;h2 id=&quot;angular&quot;&gt;Angular&lt;/h2&gt;

&lt;p&gt;For the Angular part we want to create a jar with a &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; directory that contains the result of our Angular build. 
By doing this we can include the jar in our backend module. And because Spring Boot will automatically add static web 
resources located within &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;, the Angular application will be visible when we launch the application.&lt;/p&gt;

&lt;p&gt;This can be done by using the &lt;a href=&quot;https://plugins.gradle.org/plugin/com.moowork.node&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;com.moowork.node&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file in our &lt;code class=&quot;highlighter-rouge&quot;&gt;todo-ui&lt;/code&gt; project.&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.moowork.node&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.2.0&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9.2.0'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;npmVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'6.4.1'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'npm_run_build'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist/todo-ui'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me explain step-by-step what we’re doing here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We need the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; plugin to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task available and the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.moowork.node&lt;/code&gt; plugin to execute node scripts like &lt;code class=&quot;highlighter-rouge&quot;&gt;npm_run_build&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We have to specify which node and NPM version we want to use.&lt;/li&gt;
  &lt;li&gt;Before creating the jar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task we want to build our Angular project, otherwise we don’t have any static files to serve. 
This can be done by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm_run_build&lt;/code&gt; task.&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;When we build the Angular project our static files will become available in &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/todo-ui&lt;/code&gt;. We want those files into &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;from 'dist/todo-ui' into 'static'&lt;/code&gt; command in the &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; task will simply copy everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/todo-ui&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;.&lt;sup&gt;2&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we build the subproject it will run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and create a new jar with the build result in the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;We can now setup Spring Boot to include the jar.&lt;/p&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;

&lt;p&gt;Our Spring Boot project already has a &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file generated. 
We just have to add one line within our dependencies to include the todo-ui module.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':todo-ui'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build the project, execute the generated Spring Boot jar and go to &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;localhost:8080&lt;/a&gt;, 
you should see your Angular web application. That’s all folks!&lt;/p&gt;

&lt;h2 id=&quot;note&quot;&gt;Note&lt;/h2&gt;

&lt;p&gt;There are several ways to integrate Angular in Spring Boot using Gradle (or Maven). 
To me, this is the easiest and fastest way to do it. Because we’ve separated the backend from the frontend it will be 
a lot easier to find your way in both modules.&lt;/p&gt;

&lt;p&gt;Now go and apply this on your own projects! Don’t hesitate to contact me if you have any questions.&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;&lt;sup&gt;
&lt;sup&gt;1&lt;/sup&gt; by default, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; will execute &lt;code class=&quot;highlighter-rouge&quot;&gt;ng build&lt;/code&gt; (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;)&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; by default, Angular will output the build result in &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/{project-name}&lt;/code&gt; (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt;)
&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Gert-jan&quot;, &quot;last_name&quot;=&gt;&quot;Theunissen&quot;, &quot;permalink&quot;=&gt;&quot;/author/gert-jan-theunissen/&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;gert-jan.theunissen@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;gertjantheunissen&quot;, &quot;avatar&quot;=&gt;&quot;gert-jan-theunissen.jpg&quot;, &quot;github&quot;=&gt;&quot;gurtjun&quot;, &quot;bio&quot;=&gt;&quot;Gert-jan is a Software Developer at Ordina Belgium. He is passionate about front end stuff, but you can easily throw him in the back end jungle and he will survive. In his spare time he's practising some knee dragging on his motorcycle.&quot;}</name><email>gert-jan.theunissen@ordina.be</email></author><category term="Architecture" /><category term="Angular" /><category term="Spring Boot" /><category term="Gradle" /><summary type="html">I often found myself struggling when I had to integrate Angular into a Spring Boot project. This is something that should not take a lot of your valuable development time. That’s why I want to share how I did it with Gradle in a very fast and easy way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-12-spring-boot-angular-gradle/angular-spring-boot-gradle.jpg" /></entry><entry><title type="html">NGRX vs. NGXS vs. Akita vs. RxJS: Fight!</title><link href="https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison.html" rel="alternate" type="text/html" title="NGRX vs. NGXS vs. Akita vs. RxJS: Fight!" /><published>2018-10-08T00:00:00+00:00</published><updated>2018-10-08T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison</id><content type="html" xml:base="https://ordina-jworks.github.io/angular/2018/10/08/angular-state-management-comparison.html">&lt;h1 id=&quot;reason-for-comparing&quot;&gt;Reason for comparing&lt;/h1&gt;

&lt;p&gt;When creating a web application, one of the questions to ask is how data should be managed.
If the application must be reactive, it’s best to use &lt;a href=&quot;http://reactivex.io&quot;&gt;ReactiveX&lt;/a&gt; (or Rx for short) to create streams of data.
The next question is how this could work performant and reliable.&lt;/p&gt;

&lt;p&gt;The current trend is to use a &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;-based storage solution, which consists of a Store, Selectors to get data from the store in the form of Observables and Actions to modify the store.
This allows for a single source of truth, a read-only state and the flow of data going in one direction.
There are a couple of different solutions for Angular.
NGRX is by far the most popular, leaving the new kids in town, NGXS and Akita, far behind in popularity.&lt;/p&gt;

&lt;p&gt;It is, however, not always needed to have a storage framework solution.
Very small applications are easy to create with plain RxJS, if you are quite skilled.
In this post, I’ve stacked each of these solutions against each other to see what can be learned.&lt;/p&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#the-fighting-ring&quot;&gt;The fighting ring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-competitors&quot;&gt;The competitors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fight&quot;&gt;Fight&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#1-available-tooling&quot;&gt;Available Tooling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-boilerplate-code&quot;&gt;Boilerplate code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-dependencies-and-size&quot;&gt;Dependencies and size&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-score&quot;&gt;Final score&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-fighting-ring&quot;&gt;The fighting ring&lt;/h1&gt;

&lt;p&gt;To compare the four competitors, I’ve set up a simple To Do-application (&lt;a href=&quot;https://github.com/orjandesmet/angular-state-management-comparison&quot;&gt;GitHub&lt;/a&gt;) with &lt;strong&gt;Angular CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The master branch holds a base of the application, which cannot run on its own.
It needs a state management solution from one of the other branches.
To make the comparison easier, the base application is written in such a way that each solution only adds files to a &lt;em&gt;statemanagement&lt;/em&gt; folder and loads a service and zero or more modules into the &lt;strong&gt;AppModule&lt;/strong&gt;.
No other files (except &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;package-lock.json&lt;/em&gt; and &lt;em&gt;logo.png&lt;/em&gt;) are to be changed.
From an end-user perspective, the application would appear and behave the exact same, no matter which state management solution is used.
The logo is added to be able to differentiate which solution is running.&lt;/p&gt;

&lt;p&gt;A To Do-application is perfect to demonstrate CRUD.
A &lt;strong&gt;FakeBackendService&lt;/strong&gt; is provided to simulate a RESTful API backend.
The idea is to load the list only once in the application’s lifetime and then update the state, without needing to fetch everything from the backend again.
As such, the &lt;strong&gt;FakeBackendService&lt;/strong&gt; logs its calls to the console for monitoring.&lt;/p&gt;

&lt;h1 id=&quot;the-competitors&quot;&gt;The competitors&lt;/h1&gt;

&lt;h3 id=&quot;ngrx&quot;&gt;NGRX&lt;/h3&gt;

&lt;p&gt;(v6.1.x) &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/README.md&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxJS powered state management for Angular applications, inspired by Redux&lt;/p&gt;

  &lt;p&gt;@ngrx/store is a controlled state container designed to help write performant, consistent applications on top of Angular.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ngxs&quot;&gt;NGXS&lt;/h3&gt;

&lt;p&gt;(v3.2.x) &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NGXS is modeled after the CQRS pattern popularly implemented in libraries like Redux and NGRX but reduces boilerplate by using modern TypeScript features such as classes and decorators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;akita&quot;&gt;Akita&lt;/h3&gt;

&lt;p&gt;(v1.7.x) &lt;a href=&quot;https://netbasal.gitbook.io/akita/&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Akita is a state management pattern, built on top of RxJS, which takes the idea of multiple data stores from Flux and the immutable updates from Redux, along with the concept of streaming data, to create the Observable Data Stores model.&lt;/p&gt;

  &lt;p&gt;Akita encourages simplicity. It saves you the hassle of creating boilerplate code and offers powerful tools with a moderate learning curve, suitable for both experienced and inexperienced developers alike.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;plain-rxjs&quot;&gt;Plain RxJS&lt;/h3&gt;

&lt;p&gt;(v6.0.x) &lt;a href=&quot;https://rxjs-dev.firebaseapp.com&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the aims of a (progressive) web application is to minimize loading time by reducing the package size.
In that light, some developers opt to not use a framework, but instead use plain RxJS.
To simulate a store as much as possible, I’ve used &lt;strong&gt;BehaviorSubject&lt;/strong&gt;s to hold the state and &lt;strong&gt;pipeable operators&lt;/strong&gt; to modify the state.&lt;/p&gt;

&lt;h1 id=&quot;fight&quot;&gt;Fight&lt;/h1&gt;

&lt;h2 id=&quot;1-available-tooling&quot;&gt;1. Available tooling&lt;/h2&gt;

&lt;p&gt;Since this post is aimed at developers, it might be best to first evaluate the tools available for developers.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://extension.remotedev.io/&quot;&gt;Redux Devtools&lt;/a&gt; plugin exists for Chrome and Firefox, or it can be run as a standalone application.
It allows developers to see the impact of a Redux action and time travel between these actions.
Another useful feature available to Angular developers is &lt;a href=&quot;https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2&quot;&gt;Angular Schematics&lt;/a&gt;, which allow to create pieces of code through Angular CLI.
None of the solutions have these tools in their default packages and they need to be installed separately.&lt;/p&gt;

&lt;h3 id=&quot;redux-devtools&quot;&gt;Redux DevTools&lt;/h3&gt;

&lt;h4 id=&quot;devtools-in-ngrx&quot;&gt;DevTools in NGRX&lt;/h4&gt;

&lt;p&gt;NGRX provides &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store-devtools/README.md&quot;&gt;&lt;em&gt;@ngrx/store-devtools&lt;/em&gt;&lt;/a&gt; for DevTools.
It works as expected, displaying the latest actions with their impact and the resulting state of the store.
It’s possible to jump to specific actions and even skip actions.
It also allows devs to dispatch an action directly from the DevTools itself, but does not verify that action’s payload.
Implementing the tools is as easy as importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;StoreDevToolsModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instrument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NGRX DevTools provide options for displaying a maximum age of actions, displaying a name, logging only to console, sanitizing state and actions and serializing the state.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-ngxs&quot;&gt;DevTools in NGXS&lt;/h4&gt;

&lt;p&gt;Although NGXS is also modeled after CQRS, it behaves a bit differently.
It provides &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/devtools&quot;&gt;&lt;em&gt;@ngxs/devtools-plugin&lt;/em&gt;&lt;/a&gt; for DevTools.
It does, however, not support all functionalities.
The latest actions can be viewed with their impact and resulting state.
But while it’s possible to jump to specific actions, it’s not possible to skip actions or dispatch new ones using the DevTools.
Implementing the tools is just as easy as with NGRX, importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;NgxsReduxDevtoolsPluginModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NGXS also provides some options for displaying a maximum age of actions, displaying a name and sanitizing state and actions.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-akita&quot;&gt;DevTools in Akita&lt;/h4&gt;

&lt;p&gt;Akita is the only solution not powered by a Redux-like pattern.
That is why it also has limited functionality in the DevTools.
The DevTools are available through &lt;a href=&quot;https://netbasal.gitbook.io/akita/enhancers/devtools&quot;&gt;&lt;em&gt;@datorama/akita-ngdevtools&lt;/em&gt;&lt;/a&gt;.
Similar to NGXS, the latest actions can be viewed with their impact and the resulting state.
And similar to NGXS, it’s possible to jump to specific actions in the timeline, but impossible to skip actions or dispatch new ones using the DevTools.
What’s more is that the raw action does not present the actual payload.
When adding custom actions, you also have to name them with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@action&lt;/code&gt; decorator.
Implementing the tools is, as ever, possiblie by importing the following line to the &lt;strong&gt;AppModule&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;AkitaNgDevtools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Akita’s DevTools plugin also provides some options for displaying a maximum age of actions, a blacklist and a whitelist.&lt;/p&gt;

&lt;h4 id=&quot;devtools-in-plain-rxjs&quot;&gt;DevTools in plain RxJS&lt;/h4&gt;

&lt;p&gt;Since RxJS itself is no Redux-based storage solution, it obviously does not provide any support for Redux DevTools at all.&lt;/p&gt;

&lt;h3 id=&quot;schematics&quot;&gt;Schematics&lt;/h3&gt;

&lt;h4 id=&quot;schematics-in-ngrx&quot;&gt;Schematics in NGRX&lt;/h4&gt;

&lt;p&gt;NGRX has quite a lot of schematics available through &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/schematics/README.md&quot;&gt;&lt;em&gt;@ngrx/schematics&lt;/em&gt;&lt;/a&gt;.
It allows to create stores, feature stores, reducers, actions, container components, effects, entity stores all with a lot of options.
In my To Do-applications, most of the work was done using two simple commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g @ngrx/schematics:store AppState &lt;span class=&quot;nt&quot;&gt;--module&lt;/span&gt; app.module.ts &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--statePath&lt;/span&gt; statemanagement
ng g @ngrx/schematics:entity statemanagement/TodoItem &lt;span class=&quot;nt&quot;&gt;--reducers&lt;/span&gt; index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first command added the StoreModule and StoreDevToolsModule into &lt;strong&gt;AppModule&lt;/strong&gt; and created a reducer in &lt;em&gt;statemanegement/index.ts&lt;/em&gt;.
The latter command created the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.actions.ts&lt;/em&gt;, with a lot of premade actions for inserting, updating, upserting, removing one or multiple entities.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.model.ts&lt;/em&gt;, with a premade model interface I changed to just export the &lt;strong&gt;TodoItem&lt;/strong&gt; interface which I created for the base application.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/todo-item.reducer.ts&lt;/em&gt;, and its corresponding spec file handling the generated actions (the spec file did however only test ‘unknown action’) and providing several basic selectors, though I had to modify the following code for the selectors to work:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectTodoItemState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFeatureSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'todoItem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectEntities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;selectTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSelectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectTodoItemState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The attempt to create extra actions using the following command was not as easy as it seemed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g @ngrx/schematics:action statemanagement/Filter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Only one action was created called &lt;strong&gt;LoadFilters&lt;/strong&gt;, with the type &lt;code class=&quot;highlighter-rouge&quot;&gt;[Filter] Load Filters&lt;/code&gt;.
It would’ve been easier if one could specify the name of the action some more.&lt;/p&gt;

&lt;p&gt;I ended up extending the generated Entity store with the filter and sorting properties for which I had to add extra reducers and selectors manually.
These properties could have been part of a separate state, but I opted to keep the store as simple as possible.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-ngxs&quot;&gt;Schematics in NGXS&lt;/h4&gt;

&lt;p&gt;NGXS does not offer any schematics extensions.
It does, however, offer a CLI through &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/cli&quot;&gt;&lt;em&gt;ngxs-cli&lt;/em&gt;&lt;/a&gt;.
Although the documentation makes mention of the package &lt;em&gt;@ngxs/ngxs-cli&lt;/em&gt;, this package was at the time of writing not available.&lt;/p&gt;

&lt;p&gt;Using the CLI, a state file &lt;em&gt;todo-items.state&lt;/em&gt; is created, along with &lt;em&gt;todo-items.actions.ts&lt;/em&gt; with 1 example action (add), to add an item to an array.
Other than that, everything must be done by yourself, including adding importing the module into &lt;em&gt;AppModule&lt;/em&gt;.
The CLI offers some options for a name, whether or not to create a spec-file, the path and the name of the folder to create.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-akita&quot;&gt;Schematics in Akita&lt;/h4&gt;

&lt;p&gt;Akita does offer schematics through &lt;a href=&quot;https://github.com/datorama/akita-schematics&quot;&gt;&lt;em&gt;akita-schematics&lt;/em&gt;&lt;/a&gt;.
It allows to separately create a store, model, query and service (meant for http), or everything together in what they call a feature.
I used the following command to create a feature store:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g akita-schematics:feature statemanagement/todoItems
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This created the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.query.ts&lt;/em&gt;, which is used for selecting items from the state.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.model.ts&lt;/em&gt;, with a premade model interface I changed to just export the &lt;strong&gt;TodoItem&lt;/strong&gt; interface which I created for the base application.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;statemanagement/state/todo-item.store.ts&lt;/em&gt;, which contains the actions that can be performed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I didn’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--plain&lt;/code&gt; option, the state created by that command was an extension of &lt;strong&gt;EntityState&lt;/strong&gt;, and already has some actions available for setting, inserting, updating and removing entities.&lt;/p&gt;

&lt;p&gt;Similar to NGRX, it was easy to extend the state with a filter and a sort property.&lt;/p&gt;

&lt;p&gt;Akita also provides a &lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/akita-cli&quot;&gt;CLI tool&lt;/a&gt;, but I didn’t test this.&lt;/p&gt;

&lt;h4 id=&quot;schematics-in-plain-rxjs&quot;&gt;Schematics in plain RxJS&lt;/h4&gt;

&lt;p&gt;Since RxJS is based on operator functions, it’s nearly impossible to have useful schematics for this use case.
This means that a developer must write everything by hand.&lt;/p&gt;

&lt;h3 id=&quot;tooling-summary&quot;&gt;Tooling summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tooling&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Redux DevTools&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Schematics&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;NGRX&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, limited&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No, but limited CLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, limited&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, also CLI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plain RxJS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;2-features&quot;&gt;2. Features&lt;/h2&gt;

&lt;p&gt;This is a tough one.
I didn’t have use cases in a To Do-application to research every possible feature.
But, nevertheless, let’s cover the most useful features and their solutions.&lt;/p&gt;

&lt;h3 id=&quot;feature-asynchronous-actions&quot;&gt;Feature: Asynchronous actions&lt;/h3&gt;

&lt;p&gt;What is meant with asynchronous actions, is that an action is dispatched to the store and the store is updated in an asynchronous way.
An example of this is the use of a &lt;strong&gt;FetchItems&lt;/strong&gt; action, which performs a request to the backend and dispatches one or multiple different actions when that request completes.
This is especially useful when using a realtime database or Google Cloud Firestore, which opens a socket and can emit multiple events.
In the example application, I’ve implemented this for a one-time fetch of items where possible.&lt;/p&gt;

&lt;p&gt;NGRX can handle this with &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/effects/README.md&quot;&gt;&lt;em&gt;@ngrx/effects&lt;/em&gt;&lt;/a&gt;, a separate package to be installed.
Effects can be added to the root module or to a feature module for lazy loading.
They can react on any Observable (not only emitted actions) and must emit a new action.
If multiple actions should be emitted, these must be &lt;em&gt;flatMap&lt;/em&gt;ped.
There is also a schematics extension available to generate an Effects class.&lt;/p&gt;

&lt;p&gt;NGXS allows actions to be handled &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/concepts/state#async-actions&quot;&gt;asynchronously&lt;/a&gt; out-of-the-box.
These actions can dispatch different actions, but can also modify the state directly.
An Observable or Promise must be returned to notify the dispatcher that the action has been completed.&lt;/p&gt;

&lt;p&gt;Akita does not have support for asynchronous actions.
The subscription to an asynchronous stream of data must be handled by yourself.&lt;/p&gt;

&lt;p&gt;While RxJS is effectively the reason asynchronous actions can exist in Angular, it is quite difficult for novices to update the store from a stream.&lt;/p&gt;

&lt;h3 id=&quot;feature-memoized-selectors&quot;&gt;Feature: Memoized Selectors&lt;/h3&gt;

&lt;p&gt;NGRX offers support for &lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/selectors.md&quot;&gt;Selectors&lt;/a&gt; as constants.
These can be easily chained in other selectors, making them ideal when the store is being refactored.&lt;/p&gt;

&lt;p&gt;NGXS works similar, but uses &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/concepts/select&quot;&gt;functions&lt;/a&gt; inside the &lt;strong&gt;State&lt;/strong&gt; class.
They can be chained, but it’s not as clear to understand as the NGRX solution.
A neat feature within NGXS, is the so-called &lt;em&gt;shared selector&lt;/em&gt;, which allows to create a selector that can be used with different states.&lt;/p&gt;

&lt;p&gt;Akita takes a different approach.
A &lt;a href=&quot;https://netbasal.gitbook.io/akita/core-concepts/the-query&quot;&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;/a&gt; class is created, in which functions and constants can be defined.
These return Observables, which can be used to obtain a part of the store and can be combined using RxJS operators.
Unlike NGRX and NGXS, Akita does not easily offer selecting queries across different states in the store, without creating substates.&lt;/p&gt;

&lt;p&gt;As ever, RxJS, must throw in the towel for this. When you need something from the store, you’ll need to use some operators to get that specific item.&lt;/p&gt;

&lt;h3 id=&quot;feature-persistence&quot;&gt;Feature: Persistence&lt;/h3&gt;

&lt;p&gt;NGRX does not offer any persistence logic itself.
There is however a 3rd party package available, &lt;a href=&quot;https://github.com/btroncone/ngrx-store-localstorage&quot;&gt;&lt;em&gt;ngrx-store-localstorage&lt;/em&gt;&lt;/a&gt;, which works through a meta reducer.
It offers some options, one of which is setting the Storage interface and which keys to sync and how to (de)serialize those items.&lt;/p&gt;

&lt;p&gt;NGXS does have its official plugin, &lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/storage&quot;&gt;&lt;em&gt;@ngxs/storage-plugin&lt;/em&gt;&lt;/a&gt;, a separate module that can be imported into the &lt;strong&gt;AppModule&lt;/strong&gt;.
It also has options for setting the Storage interface and which keys to sync and how to (de)serialize those items, but also offers &lt;strong&gt;migration strategies&lt;/strong&gt;.
This allows for a version with a radically changed store to not meet with synchronization errors.&lt;/p&gt;

&lt;p&gt;Akita’s main package includes a &lt;a href=&quot;https://netbasal.gitbook.io/akita/enhancers/persist-state&quot;&gt;&lt;em&gt;persistState()&lt;/em&gt;&lt;/a&gt; function.
Including this function in the &lt;em&gt;main.ts&lt;/em&gt; file allows the state to be stored in either localStorage or sessionStorage.
Other options include, setting the key by which the state is saved, and including/excluding several aspects of the store and how to (de)serialize those items.&lt;/p&gt;

&lt;p&gt;When using plain RxJS, you’re on your own again.&lt;/p&gt;

&lt;h3 id=&quot;other-features&quot;&gt;Other features&lt;/h3&gt;

&lt;p&gt;The frameworks offer even more features.
I’m not going into detail for each of them.
Most of them are included in the following summary.&lt;/p&gt;

&lt;h3 id=&quot;features-summary&quot;&gt;Features summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Features&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGRX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;NGXS&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Akita&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Plain RxJS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Async actions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, through effects&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(Memoized) selectors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes, as queries&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cross-state selectors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Offline persistence&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd party package&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Main package&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Snapshot selection without &lt;em&gt;first()&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Forms synchronization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/MrWolfZ/ngrx-forms&quot;&gt;3rd party packages&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/form&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/plugins/persist-form&quot;&gt;Main package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Router synchronization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/router-store/README.md&quot;&gt;1st party package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/router&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WebSocket&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/avatsaev/angular-ngrx-socket-frontend&quot;&gt;3rd party package&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/plugins/websocket&quot;&gt;&lt;strong&gt;1st party package&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angular ErrorHandler&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/errors&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Meta Reducers&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/api.md#meta-reducers&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/meta-reducer&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lazy loading&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/store/api.md#feature-module-state-composition&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/lazy&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cancellation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/cancellation&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Side effects&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/ngrx/platform/blob/master/docs/effects/README.md&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ngxs.gitbook.io/ngxs/advanced/action-handlers&quot;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Web workers&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/additional-functionality/web-workers&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transactions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://netbasal.gitbook.io/akita/entity-store/transactions&quot;&gt;Yes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;3-boilerplate-code&quot;&gt;3. Boilerplate code&lt;/h2&gt;

&lt;p&gt;In this round the boilerplate code is evaluated.
This is code that is needed for each part of the state, but differs only a little per state.
I opted not to use &lt;a href=&quot;https://github.com/mweststrate/immer&quot;&gt;&lt;em&gt;immer&lt;/em&gt;&lt;/a&gt; for immutable state changes to give each competitor the same chances.&lt;/p&gt;

&lt;p&gt;Also within this section, there is the amount of files needed or generated for the To Do-application.&lt;/p&gt;

&lt;p&gt;Starting with NGRX, which generated &lt;strong&gt;9&lt;/strong&gt; files through schematics.
These files include the reducer file.
Even though I created an Entity store, to ease the use of an entity collection, the reducer file still contained a lot of code through the adapter.
A lot of which were the reducer cases for all the adapter’s actions, like set, insert, upsert and delete one or many items.
Even though these cases only call the adapter’s functions, most of these methods won’t change and it would be nicer if these could have been part of the &lt;em&gt;@ngrx/entity&lt;/em&gt; package, like the generated selectors.
The same argument holds for the actions created in &lt;em&gt;todo-item.actions.ts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NGXS fairs a little better in this aspect.
It generated only &lt;strong&gt;3&lt;/strong&gt; files, though each action had to be written out myself and I created extra files for other actions.
And even though the action functions can refer to Generic functions, it’s a shame an Entity State with specialized functions is not included in the package.&lt;/p&gt;

&lt;p&gt;Akita generated just &lt;strong&gt;4&lt;/strong&gt; files using the schematics.
Because I used an EntityState, a lot of Query functions and Actions were readily available, without them taking extra space.&lt;/p&gt;

&lt;p&gt;With RxJS I managed to create an operator function for each ‘action’ very simply.
The application is quite simple, but the method is scalable enough without much overhead.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Boilerplate&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Files generated&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Total files (*)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Boilerplate code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NGRX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heavy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Medium&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Akita&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Low&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plain RxJS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Medium&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;4-community&quot;&gt;4. Community&lt;/h2&gt;

&lt;p&gt;Based on Google Trends of the past &lt;a href=&quot;https://trends.google.com/trends/explore?q=ngrx,ngxs,akita%20store&quot;&gt;12 months&lt;/a&gt;, NGRX is obviously the most searched for state manager.
The reason is likely that it was the first Redux implementation available for Angular.&lt;/p&gt;

&lt;p&gt;When looking at the GitHub repositories, NGRX has the most stars (at over 3.5K), followed by NGXS (at 1.4K) and Akita (at around 480).
Again this indicates NGRX is the most popular framework.&lt;/p&gt;

&lt;p&gt;But what about contributors?
Looking at the repositories’ insights, it’s clear that the same sequence is followed.
NGRX takes the lead, NGXS a solid second and Akita last.
There it’s also visible that NGRX is still under very active development, looking at the commits.
NGXS meanwhile stagnated and Akita has a steady pace.&lt;/p&gt;

&lt;h3 id=&quot;community-summary&quot;&gt;Community summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;feat.&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Google Trends&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;GitHub stars&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Contributors&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Commits&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;NGRX&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;5-dependencies-and-size&quot;&gt;5. Dependencies and size&lt;/h2&gt;

&lt;p&gt;State management does not come out-of-the-box with Angular. There is a need to install extra dependencies.
Luckily all these dependencies are available through npm.
To make the different implementations as feature-equal as possible, I’ve decided to create entity stores where possible and include dev-tools if available.&lt;/p&gt;

&lt;p&gt;Furthermore, all implementations were built with and without production mode.
For comparison purposes, the base application measured in at &lt;strong&gt;14.6MB&lt;/strong&gt; without production mode, and a mere &lt;strong&gt;754KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;NGRX is a heavy hitter.
It included multiple dependencies for different features. &lt;em&gt;@ngrx/store&lt;/em&gt; is the basis.
&lt;em&gt;@ngrx/store-devtools&lt;/em&gt;, &lt;em&gt;@ngrx/entity&lt;/em&gt;, &lt;em&gt;@ngrx/effects&lt;/em&gt; and &lt;em&gt;@ngrx/schematics&lt;/em&gt; complement this, although the schematics are dev-only.
All this gives the packages a weight of &lt;strong&gt;14.9MB&lt;/strong&gt; without production mode and &lt;strong&gt;786KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;NGXS fairs a little better.
It only includes &lt;em&gt;@ngxs/store&lt;/em&gt; and &lt;em&gt;@ngxs/devtools-plugin&lt;/em&gt;.
This makes the packages weigh in at &lt;strong&gt;14.8MB&lt;/strong&gt; without production mode and &lt;strong&gt;778KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;p&gt;Akita also has an all-in-one package for the store.
&lt;em&gt;@datorama/akita&lt;/em&gt; holds all functionality, while &lt;em&gt;@datorama/akita-ngdevtools&lt;/em&gt; and &lt;em&gt;akita-schematics&lt;/em&gt; provide some development tools.
Despite this, Akita overthrows NGRX with &lt;strong&gt;15.4MB&lt;/strong&gt; without production mode and matches NGXS with &lt;strong&gt;778KB&lt;/strong&gt; with production mode.
The difference between NGXS and Akita in production mode was a mere &lt;strong&gt;24B&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;RxJS is the clear winner here.
It needs no extra dependencies whatsoever as RxJS already is a dependency of Angular, making the packages &lt;strong&gt;14.6MB&lt;/strong&gt; without production mode and &lt;strong&gt;762KB&lt;/strong&gt; with production mode.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-and-size-summary&quot;&gt;Dependencies and size summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Non-production (MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Production (KB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Base&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;14.6&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;754&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGRX&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;786&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NGXS&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;778&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Akita&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15.4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;778&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Plain RxJS&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;14.6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;762&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;final-score&quot;&gt;Final score&lt;/h1&gt;

&lt;p&gt;It’s not easy to just say which solution is the all-time champion.
Each of the competitors has its advantages and disadvantages.
These are the podium places for each round:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Round&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGRX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NGXS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Akita&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Plain RxJS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Tooling&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Features&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Boilerplate code&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Community&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dependencies and size&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3rd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2nd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on UI/UX. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Angular" /><category term="Angular" /><category term="State Management" /><category term="NGRX" /><category term="NGXS" /><category term="Akita" /><category term="RxJS" /><summary type="html">Reason for comparing</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-08-battle-of-the-state-managers/battle-of-the-state-managers.jpg" /></entry><entry><title type="html">Create a Serverless Application with AWS Lambda and DynamoDB</title><link href="https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB.html" rel="alternate" type="text/html" title="Create a Serverless Application with AWS Lambda and DynamoDB" /><published>2018-10-01T00:00:00+00:00</published><updated>2018-10-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2018/10/01/How-to-build-a-Serverless-Application-with-AWS-Lambda-and-DynamoDB.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-what--why&quot;&gt;Serverless: What &amp;amp; Why&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-we-will-build&quot;&gt;What we will build&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamodb&quot;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-scan-dynamodb&quot;&gt;Lambda: scan DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway-access-the-scan-lambda&quot;&gt;API Gateway: Access the scan Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-write-to-dynamodb&quot;&gt;Lambda: Write to DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway-access-the-write-lambda&quot;&gt;API Gateway: Access the write Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-next&quot;&gt;What is next?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-resources&quot;&gt;Extra resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ready to create a serverless application?&lt;br /&gt;
New to AWS and curious to learn more?&lt;br /&gt;
Read on and learn more about the AWS services by building a serverless app!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Introduction-Components.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;serverless-what--why&quot;&gt;Serverless: What &amp;amp; Why&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;A serverless architecture is a way to build and run your applications without having to think about infrastructure.
You no longer have to maintain servers to run your applications, databases and storage systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And most of all, &lt;strong&gt;it is so easy!&lt;/strong&gt;  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Boom-Sparkles.png&quot; alt=&quot;boom-sparkles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, once you get the hang of it, it really is mind-blowingly easy.
However, first you need to know the basic infrastructure to set up a serverless application.
Let’s do this!&lt;/p&gt;

&lt;h1 id=&quot;what-we-will-build&quot;&gt;What we will build&lt;/h1&gt;
&lt;p&gt;Join me in building a serverless application in which users can give great coding tips to each other. 
To keep it as simple as possible we will build everything through the &lt;strong&gt;AWS Console&lt;/strong&gt; and focus on the infrastructure.
No need to deploy any code from your computer to AWS.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;I could show you a frontend that uses our serverless backend to give and get coding tips.
But that would be an extra layer between you and our serverless application.
Here, I am triggering the app with &lt;strong&gt;Curl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Post a new Coding Tip to the database:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;author&quot;: &quot;Nick&quot;,
    &quot;tip&quot;: &quot;Learn by doing&quot;,
    &quot;category&quot;: &quot;General&quot;
  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A new item was added to the CodingTips database.
I added a few already and can retrieve them too.
View all the Coding Tips that are currently in the database:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Check_Item_Is_Added_To_Table.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/AWS-Lambda-and-DynamoDB-Architecture.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The coding tip items are stored in a NoSQL database AWS &lt;strong&gt;DynamoDB&lt;/strong&gt;.
There are two &lt;strong&gt;Lambda Function&lt;/strong&gt; in play.
One to &lt;strong&gt;GET&lt;/strong&gt; the coding tip items from the database and one to &lt;strong&gt;POST&lt;/strong&gt; a new coding tip item to the database.
The user can access these Lambda Functions through an API provided by the AWS &lt;strong&gt;API Gateway&lt;/strong&gt; service.
This Gateway will redirect to the right Lambda Function based on the HTTP method (POST or GET).
Both Lambda Functions are connected to &lt;strong&gt;CloudWatch&lt;/strong&gt; where you can view the logs of your functions.
&lt;strong&gt;AWS IAM&lt;/strong&gt; is used to give the services the right permissions to connect to each other.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;To follow along you need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an AWS account.
If you do not have one already, you can create one by following these steps from the official guidelines:
&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Create an AWS account&lt;/a&gt;.&lt;br /&gt;
You have to provide a credit card number to create an account.
Don’t worry! 
The &lt;strong&gt;AWS-Free-Tier&lt;/strong&gt; provides plenty of resources that widely exceed what you will use for this tutorial.
If you ask me, AWS is really offering a fantastic amount of stuff for free.
You should be grateful for this, it will give you plenty of time to get to know the AWS Services.&lt;/li&gt;
  &lt;li&gt;coding enthusiasm&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;https://docs.aws.amazon.com/amazondynamodb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a database to store your items.
Login to the AWS Console and under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;em&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt;&lt;/em&gt;.
Click on &lt;strong&gt;Create table&lt;/strong&gt;.&lt;br /&gt;
Name the table &lt;strong&gt;CodingTips&lt;/strong&gt;. 
As primary key make a &lt;em&gt;Partition key&lt;/em&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt;, type &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;’.
Check the &lt;strong&gt;Add sort key&lt;/strong&gt; checkbox and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;, type &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; as a sort key for your table.
Leave the default settings checked and hit &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Created-Empty-Full.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;strong&gt;Amazon Resource Name ARN&lt;/strong&gt; property.
We will use this later to point to this DynamoDB table.&lt;br /&gt;
You just created the DynamoDB table that the application will use.
Awesome!&lt;/p&gt;

&lt;h2 id=&quot;add-elements-to-codingtips-table&quot;&gt;Add elements to CodingTips table&lt;/h2&gt;
&lt;p&gt;Manually add some elements to the CodingTips table.
Go to the CodingTips table, open the &lt;strong&gt;Items&lt;/strong&gt; tab and click &lt;strong&gt;Create item&lt;/strong&gt;.
Add a couple of random items to the table as shown in the image below.
Notice that &lt;strong&gt;date&lt;/strong&gt; is in &lt;strong&gt;milliseconds&lt;/strong&gt;.
These are the milliseconds that have past since the Unix Epoch 1970-01-01.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;1538368878527&lt;/code&gt; equals Mon 1 October 2018 06:41:18.
Hit &lt;strong&gt;Save&lt;/strong&gt; to store the item in the database.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Add_Item.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I added a couple of items as you see in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Random_Items_Added.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice that I did not add a coding tip yet.
We will do this later by using a Lambda Function!&lt;/p&gt;

&lt;h1 id=&quot;lambda-scan-dynamodb&quot;&gt;Lambda: Scan DynamoDB&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS Lambda is a compute service that lets you run code without provisioning or managing servers. 
AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&quot;&gt;https://docs.aws.amazon.com/lambda&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s build a Lambda that scans the DynamoDB table for our items.
In the AWS Console under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;Lambda&lt;/strong&gt;.
Click the &lt;strong&gt;Create Function&lt;/strong&gt; button to start creating a Lambda.
Choose &lt;strong&gt;Author from Scratch&lt;/strong&gt; and start configuring it with the following parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name: CodingTips_Scan&lt;/li&gt;
  &lt;li&gt;Runtime: Node.js 8.10&lt;/li&gt;
  &lt;li&gt;Role: Create a custom role&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Create_From_Scratch.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Selecting &lt;strong&gt;Create a custom role&lt;/strong&gt; will take you to another page to create this new role.
The role is used to give the Lambda Function the right permissions.
Configure the role as shown in the image below.
If everything went well you should only have to adapt the name of the role.
Name it &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda_dynamodb_codingtips&lt;/code&gt;.
The rest will be automatically generated for you.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Role-Create_New_Role.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Click &lt;strong&gt;Allow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Create function&lt;/strong&gt; to create the Lambda.
This will open the designer view of your Lambda Function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Designer_View-Initial.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;One thing is missing here.
The Lambda Function has the authority to send its logs to CloudWatch.
This authority is given by the role we just gave it.
However, it is mentioned nowhere that it has the right to access the CodingTips table.
We should arrange this too.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-role-for-the-lambda-function&quot;&gt;Configuring the Role for the Lambda Function&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. 
You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&quot;&gt;https://docs.aws.amazon.com/IAM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under AWS Services navigate to &lt;strong&gt;IAM&lt;/strong&gt; (Identity and Access Management).
Under roles find the &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role and click it.
It has one policy (for the CloudWatch logs) attached to it already.
Click &lt;strong&gt;Add inline policy&lt;/strong&gt; and go to the &lt;strong&gt;JSON&lt;/strong&gt; tab. 
In the JSON tab add the following JSON to configure this new policy.
Add the &lt;strong&gt;arn&lt;/strong&gt; that points to your own CodingTips table!
You can find this in the &lt;strong&gt;Overview&lt;/strong&gt; tab of your table which we showed above.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dynamodb:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:dynamodb:eu-west-1:389795768041:table/CodingTips&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Click &lt;strong&gt;Review policy&lt;/strong&gt; and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda-DynamoDB-CodingTips-Access&lt;/code&gt;.
Hit &lt;strong&gt;Create policy&lt;/strong&gt;.
You now attached a new policy to the existing &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role.
The role summary looks like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Role-lambda_dynamodb_codingtips_access.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Go back to the designer view of the CodingTips_Scan Lambda.
Now you see that the Lambda Function has the right to connect to the DynamoDB table.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Designer_View-DynamoDB-CloudWatch.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-code&quot;&gt;Function Code&lt;/h2&gt;
&lt;p&gt;Yeah, finally it is time for some code!&lt;br /&gt;
In the configuration window of the lambda add the code in the &lt;strong&gt;Function code&lt;/strong&gt; block.
‘&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; has to contain the following code:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'function starts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aws-sdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DynamoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eu-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processing event: %j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanningParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CodingTips'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//maximum result of 100 items&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//In dynamoDB scan looks through your entire table and fetches all data&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scanningParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; the Lambda Function to persist the changes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; function is the function where the Lambda execution starts when the Lambda is triggered.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; parameter contains the data from the event that triggered the function.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scanningParameters&lt;/code&gt; are used to configure the scan of the table.&lt;/li&gt;
  &lt;li&gt;This function scans the DynamoDB table for the first 100 items it finds.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docClient.scan(scanningParameters, function(err,data)&lt;/code&gt; executes the scan and returns either the result or the error that occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-write-lambda&quot;&gt;Test write-Lambda&lt;/h2&gt;
&lt;p&gt;All right! Let’s test this thing..
On the Lambda Function configuration page you see a dropdown and test button in the upper right corner.
Click the dropdown and configure a new test event.
I called mine &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt; and added an empty test event &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Created_Empty_Test_Event.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; it and you are ready to test the Lambda.&lt;br /&gt;
From the dropdown select your test event and hit the &lt;strong&gt;Test&lt;/strong&gt; button!
Nice one, this returns the items in your table:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Scan-Execution_Result_Succeeded.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;api-gateway-access-the-scan-lambda&quot;&gt;API Gateway: Access the scan Lambda&lt;/h1&gt;
&lt;p&gt;Mmmh, fine.. We can trigger the Lambda Function with a test event.
But we want to be able to trigger it from anywhere using a URL.
In the designer view of the lambda you can still see &lt;strong&gt;add triggers from the left&lt;/strong&gt;.
Well, let’s add that trigger!
To expose a Lambda Function AWS provides the &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. 
With a few clicks in the AWS Management Console, you can create an API that acts as a “front door” for applications – from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;https://aws.amazon.com/api-gateway&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically this is the Service you use to create all of your API’s.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Click &lt;strong&gt;Create API&lt;/strong&gt; and name your api &lt;strong&gt;CodingTips&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Add a description if you like&lt;/li&gt;
  &lt;li&gt;Leave the &lt;strong&gt;Endpoint Type&lt;/strong&gt; to regional and &lt;strong&gt;Create API&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Create_API.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The API has been created.
Configure it by adding a resource.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Create Resource&lt;/strong&gt; and name it &lt;strong&gt;tips&lt;/strong&gt; with &lt;strong&gt;/tips&lt;/strong&gt; as &lt;strong&gt;Resource Path&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Enable CORS&lt;/strong&gt; to make your API accessible from anywhere&lt;/li&gt;
  &lt;li&gt;Hit &lt;strong&gt;Create Resource&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to configure the HTTP GET request.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select the &lt;strong&gt;/tips&lt;/strong&gt; endpoint&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; select &lt;strong&gt;Create Method&lt;/strong&gt; and select &lt;strong&gt;GET&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Integration type is &lt;strong&gt;Lambda Function&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;As &lt;strong&gt;Lambda Function&lt;/strong&gt; provide the name of the lambda.
In this case that is Codingtips_Scan.&lt;/li&gt;
  &lt;li&gt;Save the configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Configuration.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Only one thing left: select the API and under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Deploy API&lt;/strong&gt;. 
You will be asked to provide a name for the &lt;strong&gt;stage&lt;/strong&gt;. 
Name it &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Stages&lt;/strong&gt; tab click the &lt;strong&gt;GET&lt;/strong&gt; method and copy the &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Invoke_URL.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This is your gateway to trigger the lambda.
Since we just created a HTTP GET request you can use either your &lt;strong&gt;browser&lt;/strong&gt;, &lt;strong&gt;Curl&lt;/strong&gt; or &lt;strong&gt;Postman&lt;/strong&gt; to do this.
In a browser tab past the &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-GET-Invoke_Browser.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;From the command line with Curl execute this command with your own &lt;strong&gt;Invoke URL&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either of the above actions will return the items in the CodingTips table!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;, you just created your first serverless app!&lt;br /&gt;
&lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Party.png&quot; alt=&quot;party&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Did you know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;performing a scan on a DynamoDB table will return the items in a random order&lt;/li&gt;
  &lt;li&gt;you just joined the club of serverless application developers&lt;/li&gt;
  &lt;li&gt;you should be proud of yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;common-errors&quot;&gt;Common errors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Missing Authentication Token&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check the URL you are trying to invoke.
  Does it have the format ‘https://{domain}/{stage}/{method}’.
  &lt;strong&gt;Stage&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt; were set when creating the API Gateway.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Enable CORS&lt;/strong&gt; for your API Gateway&lt;/li&gt;
      &lt;li&gt;Made changes to the API Gateway? Make sure to redeploy the API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda Exceptions&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check CloudWatch for logs.
  Under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;strong&gt;CloudWatch&lt;/strong&gt;.
  In the &lt;strong&gt;Logs&lt;/strong&gt; tab access the &lt;strong&gt;Log Group&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/aws/lambda/CodingTips_Scan&lt;/code&gt; to view the logs of the Lambda.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trouble with &lt;strong&gt;API Gateway&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enable API Gateway logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lambda-write-to-dynamodb&quot;&gt;Lambda: Write to DynamoDB&lt;/h1&gt;
&lt;p&gt;Users should be able to &lt;strong&gt;POST&lt;/strong&gt; new items to the table.
This is possible when we create a &lt;strong&gt;Lambda Function&lt;/strong&gt; to &lt;strong&gt;write&lt;/strong&gt; to the database.&lt;/p&gt;

&lt;h2 id=&quot;create-write-lambda&quot;&gt;Create write-Lambda&lt;/h2&gt;
&lt;p&gt;In the AWS Console under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;Lambda&lt;/strong&gt;.
Click the &lt;strong&gt;Create Function&lt;/strong&gt; button to start creating a Lambda.
Choose &lt;strong&gt;Author from Scratch&lt;/strong&gt; and start configuring it with the following parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name: CodingTips_Write&lt;/li&gt;
  &lt;li&gt;Runtime: Node.js 8.10&lt;/li&gt;
  &lt;li&gt;Role: Choose an existing role&lt;/li&gt;
  &lt;li&gt;Existing role: lambda_dynamodb_codingtips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; the function.
The &lt;strong&gt;CodingTips_Write&lt;/strong&gt; Lambda Function already has access to &lt;strong&gt;CloudWatch&lt;/strong&gt; and &lt;strong&gt;DynamoDB&lt;/strong&gt;.
This is because we gave it the existing &lt;strong&gt;lambda_dynamodb_codingtips&lt;/strong&gt; role that has policies which allow these access.
The designer view of the Lambda Function now looks like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Lambda-CodingTips_Write-Designer_View-Connected_With_DynamoDB.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-code-1&quot;&gt;Function Code&lt;/h2&gt;
&lt;p&gt;Let’s add the code of this function!&lt;br /&gt;
In the configuration window of the lambda add the code in the &lt;strong&gt;Function code&lt;/strong&gt; block.
Enter the following code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'function starts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aws-sdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DynamoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eu-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processing event: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Tip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;MonthAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;YearAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;YearMonthAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentMonth&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

        &lt;span class=&quot;na&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CodingTips'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;docClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the Lambda Function to persist the changes.&lt;/p&gt;

&lt;p&gt;What happens in this Lambda Function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; parameter of the &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; function contains the data from the event that triggered the function.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; are used to configure the scan of the table.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; object contains the data that has to be put into the table.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; not only contains the &lt;strong&gt;Date&lt;/strong&gt; and &lt;strong&gt;Author&lt;/strong&gt;, but also other attributes like the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tip&lt;/code&gt; itself and &lt;code class=&quot;highlighter-rouge&quot;&gt;Category&lt;/code&gt;..
That’s allowed because it is a NoSQL database. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;MonthAtrribute&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YearAttribute&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YearMonthAttribute&lt;/code&gt; are added automatically.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docClient.put(params, function(err,data)&lt;/code&gt; executes the write and returns either the result or the error that occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-write-lambda-1&quot;&gt;Test write-Lambda&lt;/h2&gt;
&lt;p&gt;Configure a new test event called &lt;strong&gt;test&lt;/strong&gt; and add the following JSON attributes:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Don't hesitate to ask for help when you need it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;General&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save it and test the lambda by hitting the test button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution result: succeeded&lt;/strong&gt;? 
Go to the CodingTips table and you will see a new item that was added into your table.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/DynamoDB-CodingTips-Input_Item_Via_Write_Lambda.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;api-gateway-access-the-write-lambda&quot;&gt;API Gateway: Access the write Lambda&lt;/h1&gt;
&lt;p&gt;Again we need to expose our Lambda Function via an &lt;strong&gt;API Gateway&lt;/strong&gt; so that users can post messages to it.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Under &lt;strong&gt;Services&lt;/strong&gt; navigate to &lt;strong&gt;API Gateway&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;CodingTips&lt;/strong&gt; API that we created already for the GET Request.&lt;/li&gt;
  &lt;li&gt;You need to add a &lt;strong&gt;HTTP POST Method&lt;/strong&gt; to this API.
Under &lt;strong&gt;Resources&lt;/strong&gt; click &lt;code class=&quot;highlighter-rouge&quot;&gt;/tips&lt;/code&gt;, &lt;strong&gt;Actions&lt;/strong&gt;, &lt;strong&gt;Create Method&lt;/strong&gt; and select &lt;strong&gt;POST&lt;/strong&gt;.
The &lt;strong&gt;Integration Type&lt;/strong&gt; is Lambda Function.
The name of that Lambda function is &lt;strong&gt;CodingTips_Write&lt;/strong&gt;, which we just created.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-configuration.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Hit &lt;strong&gt;Save&lt;/strong&gt; to create the new method.&lt;/li&gt;
  &lt;li&gt;When AWS asks you, add the permission to the Lambda Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want to pass a JSON object to this API.
The API in turn has to pass on the JSON to the Lambda.
To enable this, click on &lt;strong&gt;Integration Request&lt;/strong&gt; and under Mapping Templates check &lt;strong&gt;When there are no templates defined (recommended)&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Method_Execution.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Add mapping template&lt;/strong&gt; with Content-Type &lt;strong&gt;application/json&lt;/strong&gt;.
Add this template and &lt;strong&gt;save&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.tip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$.category'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Mapping_Template.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Under &lt;strong&gt;Actions&lt;/strong&gt; click &lt;strong&gt;Deploy API&lt;/strong&gt;. 
You will be asked to provide a name for the &lt;strong&gt;stage&lt;/strong&gt;. 
Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; stage and &lt;strong&gt;Deploy&lt;/strong&gt;.
In the &lt;strong&gt;Stages&lt;/strong&gt; tab there is an &lt;strong&gt;Invoke URL&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/API_Gateway-POST-Deployed.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This is your gateway to trigger the lambda.
Since we just created a HTTP POST request you can use either &lt;strong&gt;Curl&lt;/strong&gt; or &lt;strong&gt;Postman&lt;/strong&gt; to do this.
From the command line with Curl execute this command with your own &lt;strong&gt;Invoke URL&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;author&quot;: &quot;Nick&quot;,
    &quot;tip&quot;: &quot;Learn by doing&quot;,
    &quot;category&quot;: &quot;General&quot;
  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You just added a tip to the CodingTips table!
This can be checked by invoking the GET method of the API Gateway we designed in the beginning of this article.
Use your browser or curl to check the items in the table.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET https://k5p4u1y2we.execute-api.eu-west-1.amazonaws.com/default/tips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-10-01-How-to-Build-a-Serverless-Application/Check_Item_Is_Added_To_Table.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;common-errors-1&quot;&gt;Common errors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Missing Authentication Token&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check whether the &lt;strong&gt;Mapping Template&lt;/strong&gt; under the Integration Request of your API Gateway is correct&lt;/li&gt;
      &lt;li&gt;Check the URL you are trying to invoke.&lt;/li&gt;
      &lt;li&gt;Made changes to the API Gateway? Make sure to redeploy the API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda Exceptions&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Check CloudWatch for logs.
  Under &lt;strong&gt;Services&lt;/strong&gt; go to &lt;strong&gt;CloudWatch&lt;/strong&gt;.
  In the &lt;strong&gt;Logs&lt;/strong&gt; tab access the &lt;strong&gt;Log Group&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/aws/lambda/CodingTips_Write&lt;/code&gt; to view the logs of the Lambda.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trouble with &lt;strong&gt;API Gateway&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enable API Gateway logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-next&quot;&gt;What is next&lt;/h1&gt;
&lt;p&gt;Some suggestions to keep you busy:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Query DynamoDB instead of scanning&lt;/li&gt;
  &lt;li&gt;Create GSI (Global Secondary Index) to query and sort&lt;/li&gt;
  &lt;li&gt;Create a frontend that uses this serverless infrastructure as backend&lt;/li&gt;
  &lt;li&gt;Deploy this infrastructure with &lt;strong&gt;AWS Cloudformation&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Deploy using a Jenkins pipeline&lt;/li&gt;
  &lt;li&gt;Run locally with &lt;strong&gt;SAM Local&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;extra-resources&quot;&gt;Extra resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;AWS Lambda: &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Lambda Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS DynamoDB: &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS DynamoDB Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS API Gateway: &lt;a href=&quot;https://aws.amazon.com/api-gateway&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS IAM: &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS IAM Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS CloudWatch: &lt;a href=&quot;https://aws.amazon.com/cloudwatch/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Getting started with AWS CloudWatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using the DynamoDB docClient: &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/dynamodb-example-document-client.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS DocClient Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build this expertise by contributing to valuable projects. Spring, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API GateWay" /><category term="Serverless" /><summary type="html">Table of content Introduction Serverless: What &amp;amp; Why What we will build Prerequisites DynamoDB Lambda: scan DynamoDB API Gateway: Access the scan Lambda Lambda: Write to DynamoDB API Gateway: Access the write Lambda What is next? Extra resources</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-10-01-How-to-Build-a-Serverless-Application/AWS-Lambda-and-DynamoDB.png" /></entry><entry><title type="html">Automated E2E (End-to-End) testing on Android and iOS with Ionic, Protractor and Appium.</title><link href="https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing.html" rel="alternate" type="text/html" title="Automated E2E (End-to-End) testing on Android and iOS with Ionic, Protractor and Appium." /><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing</id><content type="html" xml:base="https://ordina-jworks.github.io/ionic/2018/09/30/e2e-testing-ionic-protractor-appium-e2e-testing.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automated-testing&quot;&gt;Automated testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appium&quot;&gt;Appium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-appium&quot;&gt;Getting started with Appium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-the-e2e-testing-tools-in-your-ionic-project&quot;&gt;Configuring Protractor and the Ionic project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-and-writing-ui-tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-repository&quot;&gt;Example repository&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Many articles related to E2E testing Cordova/Ionic applications are about applications which only run in the browser.
But what if your application run’s on native mobile devices?&lt;/p&gt;

&lt;p&gt;This article will cover how to get started with E2E testing your Ionic application on native Android and iOS devices.&lt;/p&gt;

&lt;p&gt;To follow along, I recommend having a basic understanding of Javascript, Typescript, Jasmine and automated testing in general.&lt;/p&gt;

&lt;h1 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h1&gt;

&lt;p&gt;When releasing an application, we need to make sure it was thoroughly tested.
Making sure of discovering any bugs before reaching production.
These tests or test scenarios can be done manually, but this would consume a lot of time and resources.
The more cost-effective solution would be to automatically run these test scenario’s entirely by a programmable agent.&lt;/p&gt;

&lt;p&gt;Thanks to a few technologies, we can script a bot that can perform most user interface interactions, 
such as clicking on a button, performing touch gestures (f.e. swiping), etc.&lt;/p&gt;

&lt;p&gt;The most popular solution for automated E2E tests is called Selenium which is based on the &lt;a href=&quot;https://w3c.github.io/webdriver/&quot;&gt;WebDriver protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While Selenium is a great solution for browsers, 
there is a better solution for native mobile apps called &lt;a href=&quot;http://appium.io/&quot;&gt;Appium&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;appium&quot;&gt;Appium&lt;/h1&gt;

&lt;p&gt;Appium is a tool for automating mobile applications and writing cross-platform UI tests. 
It is very similar to Selenium. The difference is that Selenium is a tool for automating browsers and web applications, 
whereas Appium is a tool for automating Native / Hybrid mobile applications.&lt;/p&gt;

&lt;p&gt;Appium allows developers to write UI tests for mobile applications in any number of programming language (Javascript, Java, .NET, etc.), as it uses a superset of the Selenium WebDriver specification, called the MJSONWP protocol.&lt;/p&gt;

&lt;h2 id=&quot;cross-platform-ui-testing&quot;&gt;Cross-platform UI testing&lt;/h2&gt;

&lt;p&gt;Because we are using Ionic with Cordova, we can write our codebase using only web technologies but still build, 
deploy and run on multiple platforms.
Our mobile application can be packaged and deployed as a native application for both iOS and Android.
We can achieve the same cost-savings strategy “Write once, run anywhere” for our UI tests using Appium.
To automate our UI tests, there needs to be an agent that programmatically drives the UI of your mobile application.&lt;/p&gt;

&lt;p&gt;For each platform there are different agents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: XCUITest&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: UIAutomator, Selendroid, Espresso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Controlling these agents requires a developer to write platform-specific code.
Appium with MJSONWP (Webdriver spec) provides an abstraction layer to drive these agents programmatically in a platform agnostic way.&lt;/p&gt;

&lt;p&gt;We will explain how to set up your Appium server and run automated UI tests in your Ionic application on Android and iOS mobile devices.&lt;/p&gt;

&lt;h1 id=&quot;getting-started-with-appium&quot;&gt;Getting started with Appium&lt;/h1&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;The first step is to setup your environment.
Because we are targeting Android and iOS we will only describe the setup for &lt;strong&gt;macOS&lt;/strong&gt;, 
but it shouldn’t be too different compared to other platforms once you have followed the 
official ionic resources guide below, they have guides for all platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/docs/developer-resources/&quot;&gt;Again: On the developer resources page of the official ionic documentation&lt;/a&gt;, you wil find guides on how to setup your machine depending on the OS you are working on.&lt;/p&gt;

&lt;p&gt;Next:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://github.com/appium/appium-doctor&quot;&gt;appium-doctor&lt;/a&gt; using npm.&lt;/li&gt;
  &lt;li&gt;Run appium-doctor –ios and fix any issues&lt;/li&gt;
  &lt;li&gt;Run appium-doctor –android and fix any issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;appium-server&quot;&gt;Appium server&lt;/h2&gt;

&lt;p&gt;There are multiple ways to start an Appium server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Appium Desktop&lt;/li&gt;
  &lt;li&gt;webdriver-manager&lt;/li&gt;
  &lt;li&gt;npm install -g appium &amp;amp;&amp;amp; npm run appium&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;appium-desktop&quot;&gt;Appium desktop&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Desktop&lt;/a&gt; is a graphical user interface for running an Appium server and starting sessions to inspect your applications.&lt;/p&gt;

&lt;p&gt;Note: For macOS make sure to drop the downloaded package in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications&lt;/code&gt; folder.
Otherwise you will encounter write permission issues.&lt;/p&gt;

&lt;p&gt;Appium desktop has two advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It comes with an inspector to show and inspect all elements of your application&lt;/li&gt;
  &lt;li&gt;Record user actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawback is inspecting and recording user actions only supports the Native context.
You cannot record actions for the Webview context.
Cordova applications always run in the webview context.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.io/docs/en/writing-running-appium/web/hybrid/index.html&quot;&gt;https://appium.io/docs/en/writing-running-appium/web/hybrid/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;webdriver-manager&quot;&gt;webdriver-manager&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angular/webdriver-manager&quot;&gt;Selenium and appium server manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Webdriver-manager is officially supported by Angular and works well together with Protractor,
the official E2E testing framework for Angular applications.
Ionic up until version 3.x is built on top of Angular,
from version 4 and on Ionic has decoupled from the Angular framework and recreated all of their components using &lt;a href=&quot;https://stenciljs.com/&quot;&gt;StencilJS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;npm&quot;&gt;NPM&lt;/h3&gt;

&lt;p&gt;We will be using this package to start up our Appium server.&lt;/p&gt;

&lt;h2 id=&quot;language&quot;&gt;Language&lt;/h2&gt;

&lt;p&gt;Decide in which language you want to write your tests in.
You need to have a client library that can send MJSONWP / JSONWP HTTP Requests to the Appium server.&lt;/p&gt;

&lt;p&gt;For our application, we will write our tests in Typescript using Protractor since it has added support for Angular and type safety.&lt;/p&gt;

&lt;p&gt;Other webdriver javascript clients:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://webdriver.io/guide/getstarted/modes.html&lt;/li&gt;
  &lt;li&gt;https://github.com/admc/wd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.readthedocs.io/en/stable/en/writing-running-appium/other/appium-bindings/&quot;&gt;Client libraries for different languages&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We are going to use Ionic 4 and the &lt;strong&gt;super&lt;/strong&gt; template as our application to run our tests against.&lt;/p&gt;

&lt;p&gt;First, make sure your development machine has been set up correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/docs/developer-resources/&quot;&gt;On the developer resources page of the official ionic documentation&lt;/a&gt;,
you will find guides on how to set up your machine depending on the OS you are working on.&lt;/p&gt;

&lt;p&gt;Once your machine is set up, install the Ionic CLI.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; ionic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, generate the Ionic Cordova application using the Ionic CLI.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic start superApp super &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ionic-angular &lt;span class=&quot;nt&quot;&gt;--cordova&lt;/span&gt;
ionic cordova platform add android
ionic cordova platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test if you can build the application by entering the following commands&lt;/p&gt;

&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic cordova build android
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt;

&lt;p&gt;Note: You will have to open your ios project in xcode first 
to configure your code signing identity and provision profile.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic cordova build ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were able to run these commands successfully, 
we can start E2E testing our application on both iOS and Android.&lt;/p&gt;

&lt;p&gt;Before continuing, make a folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; in the root of your project.&lt;/p&gt;

&lt;h1 id=&quot;configure-the-e2e-testing-tools-in-your-ionic-project&quot;&gt;Configure the E2E testing tools in your Ionic project&lt;/h1&gt;

&lt;h2 id=&quot;appium-1&quot;&gt;Appium&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install Appium as a local dependency&lt;/li&gt;
  &lt;li&gt;Add the correct chrome driver&lt;/li&gt;
  &lt;li&gt;Create an NPM task in your package.json&lt;/li&gt;
  &lt;li&gt;Boot up the appium service&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-install-appium-as-a-local-dependency&quot;&gt;1. Install Appium as a local dependency&lt;/h3&gt;

&lt;p&gt;Just run the following command to add Appium as a local dependency, 
this will allow us to work with Appium using NPM scripts.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; appium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-add-the-correct-chrome-driver&quot;&gt;2. Add the correct chrome driver&lt;/h3&gt;

&lt;p&gt;To be able to run your tests on Android devices, 
you need to match the correct chrome driver with the Chrome version running on the Android test devices.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://appium.readthedocs.io/en/stable/en/writing-running-appium/web/chromedriver/&quot;&gt;Here is an overview of all the chrome drivers and their respective Chrome versions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To download a chrome driver, go to the &lt;a href=&quot;http://chromedriver.chromium.org/downloads&quot;&gt;Chrome Driver Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have selected your chrome driver, download it and put in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3 id=&quot;3-create-an-npm-task-in-your-packagejson&quot;&gt;3. Create an NPM task in your package.json&lt;/h3&gt;

&lt;p&gt;Before running Appium, you can provide the downloaded chrome driver as a cli argument:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appium&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;appium --chromedriver-executable e2e/chromedriver&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-start-your-appium-server&quot;&gt;4. Start your Appium server&lt;/h3&gt;

&lt;p&gt;Now you should have everything configured correctly to start your Appium server.
Simply run:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run appium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;protractor&quot;&gt;Protractor&lt;/h2&gt;

&lt;p&gt;Protractor will be our test runner and testing framework.
&lt;a href=&quot;https://www.protractortest.org/#/&quot;&gt;Visit their website&lt;/a&gt; for more information on Protractor.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install protractor as a local NPM dependency&lt;/li&gt;
  &lt;li&gt;Configure typescript configs&lt;/li&gt;
  &lt;li&gt;Create your protractor config&lt;/li&gt;
  &lt;li&gt;Create NPM script for running your e2e tests&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-install-protractor-as-a-local-npm-dependency&quot;&gt;1. Install Protractor as a local NPM dependency&lt;/h3&gt;

&lt;p&gt;Install the test runner with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; protractor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-configure-typescript&quot;&gt;1. Configure Typescript&lt;/h3&gt;

&lt;p&gt;We require a few extra tools to be able run and write our tests in Typescript.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; ts-node @types/jasmine @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder, create a &lt;strong&gt;tsconfig.json&lt;/strong&gt; file with the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;declaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;moduleResolution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;emitDecoratorMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;experimentalDecorators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2016&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;esnext.asynciterable&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;types&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jasmine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will be our tsconfig for our e2e test scripts.&lt;/p&gt;

&lt;p&gt;It’s also a good idea to write your configuration files in Typescript.
For our protractor configuration, we will use a different typescript configuration file.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e&lt;/code&gt; folder, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;/e2e/protractor.tsconfig.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This configuration file will extend the one we created earlier, 
we want to overwrite the include and exclude parameters to make sure it only matches
and transpiles the &lt;strong&gt;&lt;em&gt;protractor.config.ts&lt;/em&gt;&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./tsconfig.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*.config.ts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exclude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-configure-protractor&quot;&gt;3. Configure protractor&lt;/h3&gt;

&lt;p&gt;Now one of the more exciting parts, configuring Protractor!
Create a file called &lt;strong&gt;/e2e/protractor.config.ts&lt;/strong&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'protractor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tsNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ts-node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://localhost:4723/wd/hub'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'**/*/*.e2e-spec.ts'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/ios/build/emulator/superApp.app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'11.4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iPhone X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My First Mobile Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;automationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'XCUITest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nativeWebTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Android'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pixel2xl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/android/build/outputs/apk/android-debug.apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-package'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'be.ryan.superApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-activity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MainActivity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoAcceptAlerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoGrantPermissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;newCommandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;allScriptsTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;multiCapabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jasmine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jasmineNodeOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;showColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaultTimeoutInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;seleniumAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onPrepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tsNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e2e/tsconfig.json'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get an idea of all the configuration parameters and their description, visit
&lt;a href=&quot;https://github.com/angular/protractor/blob/master/lib/config.ts&quot;&gt;The official Protractor Github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will go over the points that took me the most effort to configure correctly.&lt;/p&gt;

&lt;h3 id=&quot;capabilities&quot;&gt;Capabilities&lt;/h3&gt;

&lt;p&gt;Refers to the capabilities of a single E2E session, 
it describes which features a particular session should have, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Platform (Android / iOS / …)&lt;/li&gt;
  &lt;li&gt;Device Name&lt;/li&gt;
  &lt;li&gt;Automation framework&lt;/li&gt;
  &lt;li&gt;Location of the Application build (.apk, .ipa)&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to spin up multiple E2E testing settings, 
you need to configure the &lt;strong&gt;multiCapabilities&lt;/strong&gt; property.&lt;/p&gt;

&lt;h4 id=&quot;android-capability&quot;&gt;Android Capability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;strong&gt;&lt;em&gt;ionic cordova build android&lt;/em&gt;&lt;/strong&gt; and configure the output path in the &lt;strong&gt;app&lt;/strong&gt; property&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app-package&lt;/strong&gt; should match the package name in your config.xml&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app-activity&lt;/strong&gt; is always MainActivity by default unless you have changed this in your config.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidPixel2XLCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Android'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pixel2xl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/android/build/outputs/apk/android-debug.apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-package'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'be.ryan.superApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-activity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MainActivity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoAcceptAlerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoGrantPermissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;newCommandTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ios-capability&quot;&gt;iOS Capability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;strong&gt;&lt;em&gt;ionic cordova build ios&lt;/em&gt;&lt;/strong&gt; and configure the output path in the &lt;strong&gt;app&lt;/strong&gt; property&lt;/li&gt;
  &lt;li&gt;Point to the .app file and not the .ipa if you are using simulators.&lt;/li&gt;
  &lt;li&gt;Set automationName to &lt;strong&gt;XCUITest&lt;/strong&gt; instead of the deprecated &lt;strong&gt;UIAutomator&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;browserName is a mandatory parameter, but since we’re targeting Native apps, we can leave this as an empty string&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iPhoneXCapability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;browserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;autoWebviewTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/${user}/ordina/e2e/superApp/platforms/ios/build/emulator/superApp.app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'11.4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iPhone X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platformName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iOS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My First Mobile Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;automationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'XCUITest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nativeWebTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-create-an-npm-script-for-running-e2e-tests&quot;&gt;4. Create an NPM script for running e2e tests&lt;/h3&gt;

&lt;p&gt;In your package.json, add the following task:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e2e&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tsc --p e2e/pro.tsconfig.json &amp;amp;&amp;amp; protractor e2e/protractor.config.js --verbose&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;running-and-writing-ui-tests&quot;&gt;Running and Writing UI tests&lt;/h1&gt;

&lt;p&gt;For Protractor to know which tests to run, you need to configure the 
&lt;strong&gt;specs&lt;/strong&gt; property, in our case all the files that end with .e2e-spec.ts&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'**/*/*.e2e-spec.ts'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFilePAtterns&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you followed along, you should be able to run your tests by entering the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run e2e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing protractor tests is out of scope in this post, 
but here is an example test script that you should be able to run on both iOS and Android.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'protractor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tutorial Screen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should skip to the welcome screen and have the correct button labels'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'skip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;skipButtonLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skipButtonLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SKIP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;skipButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ElementFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'btn-login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpectedConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elementToBeClickable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loginBtnLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginBtnLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SIGN IN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;loginBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are seven basic steps in creating an Appium test script.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the location of the application to test in the desired capabilities of the test script.&lt;/li&gt;
  &lt;li&gt;Create an Appium driver instance which points to a running Appium server&lt;/li&gt;
  &lt;li&gt;Locate an element within the mobile application.&lt;/li&gt;
  &lt;li&gt;Perform an action on the element.&lt;/li&gt;
  &lt;li&gt;Anticipate the application response to the action.&lt;/li&gt;
  &lt;li&gt;Run tests and record test results using a test framework.&lt;/li&gt;
  &lt;li&gt;Conclude the test.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;webview-and-native-context&quot;&gt;Webview And Native context&lt;/h2&gt;

&lt;p&gt;Our example application is a hybrid application.
Meaning it will be packaged and deployed as native app so we can access Native API’s.
But it will acually run inside a webview. By using Cordova our webview can communicate with Native API’s (f.e. Camera).&lt;/p&gt;

&lt;p&gt;When the Camera is launched, we enter a Native Context, 
if we exit the Camera and go back to our Hybrid application we return to the Webview Context.&lt;/p&gt;

&lt;p&gt;Appium helps us to easily switch between these contexts since locating and interacting with UI elements are very different in both contexts.&lt;/p&gt;

&lt;p&gt;For example, there are no DOM elements in the Native Context.
To locate a native UI element you need to use an Accessibility ID. At the same time, AccessibilityID’s are not available in a Webview context.&lt;/p&gt;

&lt;p&gt;TouchEvents like Tap / Swipe / Drag ‘n Drop are only supported in the Native context.
You can not use them in the Webview Context.&lt;/p&gt;

&lt;h2 id=&quot;behaviour-driven-development-with-cucumber&quot;&gt;Behaviour-driven development with Cucumber&lt;/h2&gt;

&lt;p&gt;Cucumber is a tool for BDD.
You can easily integrate Cucumber with Appium using &lt;a href=&quot;https://www.npmjs.com/package/protractor-cucumber-framework&quot;&gt;Protractor cucumber framework&lt;/a&gt; on NPM.&lt;/p&gt;

&lt;p&gt;A typical workflow looks like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Describe an app feature and corresponding scenarios in a .feature file. The contents are written in Gherkin

Feature: As an employee, I want to access the application

@Authentication
Scenario: Authenticate with AzureAD
Given I am on the Login page
When I click on &quot;Login&quot;
When I provide my credentials
When I click on the &quot;Submit&quot; button
Then I should see the Dashboard page

@Authentication Failed
Scenario: Authenticate with AzureAD fails
Given I am on the Login page
When I click on &quot;Login&quot;
When I provide incorrect credentials
When I click on the &quot;Submit&quot; button
Then I should see the Login failed page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Developers write an implementation for the feature in a step definitions file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I am on the Login page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I click on &quot;Login&quot;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{
&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;LoginPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I provide my credentials$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;WindowsAuthPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enterCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I click on the &quot;Submit&quot; button$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;WindowsAuthPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submitButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^I should see the Dashboard page$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Dashboard'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let protractor and Appium run the step definitions in an Automated way.&lt;/p&gt;

&lt;p&gt;The advantage of using cucumber is that non-developers can easily write their own .feature files in plain English (Gherkin).&lt;/p&gt;

&lt;p&gt;This offers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better collaboration between Business &amp;amp; Developers&lt;/li&gt;
  &lt;li&gt;Feature files can act as contracts for acceptance criteria&lt;/li&gt;
  &lt;li&gt;Better reporting and readability of the UI tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cloud-testing-providers&quot;&gt;Cloud testing providers&lt;/h2&gt;

&lt;p&gt;The following providers offer great support for Appium tests in the cloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://saucelabs.com/&quot;&gt;Saucelabs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.testobject.com/&quot;&gt;TestObject&lt;/a&gt;, only real devices, has been purchased by Saucelabs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kobiton.com/&quot;&gt;Kobiton&lt;/a&gt;, only real devices, allows you to connect your local mobile device farm.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://experitest.com/&quot;&gt;Experitest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While investigating and hands-on experiencing Appium, 
I noticed the following trade-offs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tests can be flaky (Simply rerunning a failing test can make it succeed)&lt;/li&gt;
  &lt;li&gt;Tests on iOS take a while to run&lt;/li&gt;
  &lt;li&gt;Appium is slower than for example running tests directly with Espresso or XCUITest&lt;/li&gt;
  &lt;li&gt;Documentation can be outdated and is scattered around the web&lt;/li&gt;
  &lt;li&gt;Setting up an environment for iOS and Android takes a lot of time initially&lt;/li&gt;
  &lt;li&gt;UI tests can differ for each platform&lt;/li&gt;
  &lt;li&gt;Sending key events can be very slow, which make the tests run very slow&lt;/li&gt;
  &lt;li&gt;You need a good knowledge of WebDriver API’s to write good tests&lt;/li&gt;
  &lt;li&gt;Debugging is hard, I mostly relied on console.log statements.&lt;/li&gt;
  &lt;li&gt;Testing on Android needs to happen with Chrome Browser version 54+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Android we are limited to recent Android API’s and devices with Chrome browser version 54+, 
this means we can not test older devices or devices with older Android versions.&lt;/p&gt;

&lt;p&gt;Setting up a local Appium server also takes a lot of setup and configuration, 
but this can be circumvented if you decide to go for a cloud testing provider like Saucelabs.&lt;/p&gt;

&lt;p&gt;Still, I believe Appium offers a lot of value because&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can write UI tests both for Android and iOS using a single programming language&lt;/li&gt;
  &lt;li&gt;You can automate manual testing for multiple platforms&lt;/li&gt;
  &lt;li&gt;There are quality cloud testing providers out there to help you with all your testing needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And once you have everything set up, it works quite well.&lt;/p&gt;

&lt;h1 id=&quot;example-repository&quot;&gt;Example repository&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryandegruyter/ordina-ionic-appium-protractor&quot;&gt;https://github.com/ryandegruyter/ordina-ionic-appium-protractor&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ryan&quot;, &quot;last_name&quot;=&gt;&quot;de Gruyter&quot;, &quot;github&quot;=&gt;&quot;ryandegruyter&quot;, &quot;linkedin&quot;=&gt;&quot;ryandg&quot;, &quot;permalink&quot;=&gt;&quot;/author/ryan-de-gruyter/&quot;, &quot;avatar&quot;=&gt;&quot;ryan-de-gruyter.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ryan.degruyter@ordina.be&quot;, &quot;phone&quot;=&gt;32479079468, &quot;bio&quot;=&gt;&quot;Ryan is a Software Engineer at Ordina Belgium. He is dedicated to writing clean code and building maintainable, user friendly web applications in Typescript. Ryan is also an Angular expert who enjoys giving beginner and advanced Angular courses. In his spare time, he practices martial arts and enjoys playing the guitar.&quot;}</name><email>ryan.degruyter@ordina.be</email></author><category term="Ionic" /><category term="ionic" /><category term="protractor" /><category term="appium" /><category term="angular" /><category term="typescript" /><category term="javascript" /><category term="jasmine" /><category term="testing" /><category term="E2E" /><category term="end-to-end" /><category term="android" /><category term="ios" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/ionic-protractor-appium.jpg" /></entry></feed>