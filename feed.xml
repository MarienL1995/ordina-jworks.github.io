<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-01-31T11:20:39+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Infrastructure as code: Terraform and AWS Serverless</title><link href="https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html" rel="alternate" type="text/html" title="Infrastructure as code: Terraform and AWS Serverless" /><published>2019-01-14T00:00:00+00:00</published><updated>2019-01-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction-and-demo&quot;&gt;Introduction and demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-the-application&quot;&gt;Creating the application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#terraform-the-basics&quot;&gt;Terraform: the basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#database-dynamodb&quot;&gt;Database: DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iam&quot;&gt;IAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-functions&quot;&gt;Lambda Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway&quot;&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#endgame&quot;&gt;Endgame&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources-and-further-reading&quot;&gt;Resources and further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/h1&gt;
&lt;p&gt;Infrastructure as Code (IaC) is a way of managing your devices and servers through machine-readable definition files. 
Basically, you write down how you want your infrastructure to look like and what code should be run on that infrastructure. 
Then, with the push of a button you say “Deploy my infrastructure”. 
BAM, there is your application, running on a server, against a database, available through an API, ready to be used!
And you just defined all of that infrastructure using IaC.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IaC is a key practice of DEVOPS teams and integrates as part of the CI/CD pipeline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A great Infrastructure as Code tool is Terraform by HashiCorp.
(&lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.terraform.io/&lt;/a&gt;)&lt;br /&gt;
Personally I use it to provide and maintain infrastructure on AWS.
And I’ve had a great experience doing that.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/overview.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;introduction-and-demo&quot;&gt;Introduction and demo&lt;/h1&gt;
&lt;p&gt;I will demonstrate IaC by working out an example. 
We are going to set up an application on AWS.
I provisioned the code on GitLab: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;.
A user can enter a coding tip and see all the coding tips that other users have entered.
The tips are stored in a NoSQL database which is AWS DynamoDB.
Storing and retrieving these tips is done by the Lambda Functions which fetch or put the tips from and to the database.
For the application to be useful, users have to be able to call these Lambda Functions.
So we expose the Lambda Functions through AWS API Gateway. 
Here is an architectural overview of the application:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/AWS-Serverless-Architecture.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;You could couple these functions to a web page where users can enter tips and see all tips that have been given.
Below you see the final result:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/demo.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h1 id=&quot;creating-the-application&quot;&gt;Creating the application&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-terraform.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I will now go over the steps to set up the application you see in the demo above.
IaC is the main focus.
I will show the code and AWS CLI commands that are necessary but I will not explain them in detail since that is not the purpose of this blog.
I’ll focus on the Terraform definitions instead.
You are welcome to follow along by cloning the repository that I linked to in this blog post.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Install Terraform&lt;/li&gt;
  &lt;li&gt;Install AWS CLI&lt;/li&gt;
  &lt;li&gt;Checkout the repository on GitLab: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Be ready to get your mind blown by IaC&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;terraform-the-basics&quot;&gt;Terraform: the basics&lt;/h1&gt;
&lt;p&gt;The main things you’ll be configuring with Terraform are resources.
Resources are the components of your application infrastructure.
E.g: a Lambda Function, an API Gateway Deployment, a DynamoDB database, …
A resource is defined by using the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt; followed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;.
The name can be arbitrarily chosen.
The type is fixed.
For example:
&lt;code class=&quot;highlighter-rouge&quot;&gt;resource &quot;aws_dynamodb_table&quot; &quot;codingtips-dynamodb-table&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To follow along with this blog post you have to know two basic Terraform commands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;terraform apply&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Terraform apply will start provisioning all the infrastructure you defined.
Your databases will be created.
Your Lambda Functions will be set up.
The API Gateway will be set in place.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;terraform destroy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Terraform destroy will remove all the infrastructure that you have set up in the cloud.
If you are using Terraform correctly you should not have to use this command.
However should you want to start over, you can remove all the existing infrastructure with this command.
No worries, you will still have all the infrastructure neatly described on your machine because you are using Infrastructure as Code.&lt;/p&gt;

&lt;p&gt;We’ll put all infrastructure that is defined using Terraform in the same folder.
The files need to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tf&lt;/code&gt; extension.&lt;/p&gt;

&lt;h1 id=&quot;general&quot;&gt;General&lt;/h1&gt;
&lt;p&gt;Let’s start out by creating a file &lt;code class=&quot;highlighter-rouge&quot;&gt;general.tf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;provider &quot;aws&quot; {
  region = &quot;eu-west-1&quot;
}

# variables
variable &quot;lambda_version&quot;     { default = &quot;1.0.0&quot;}
variable &quot;s3_bucket&quot;          { default = &quot;codingtips-node-bucket&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;provider&lt;/code&gt; block specifies that we are deploying on AWS.
You also have the possibility to mention credentials that will be used for deploying here.
If you have correctly set up the AWS CLI on your machine there will be default credentials in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws&lt;/code&gt; folder.
If no credentials are specified, Terraform will use these default credentials.&lt;/p&gt;

&lt;p&gt;Variables have a name which we can reference from anywhere in our Terraform configuration. 
For example we could reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;s3_bucket&lt;/code&gt; variable with &lt;code class=&quot;highlighter-rouge&quot;&gt;${var.s3_bucket)&lt;/code&gt;.
This is handy when you are using the same variable in multiple places.
I will not use too many variables throughout this blog post since that will add more references to your Terraform configuration and I want it to be as clear as possible.&lt;/p&gt;

&lt;h1 id=&quot;database-dynamodb&quot;&gt;Database: DynamoDB&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-DynamoDB.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start with the basis.
Where will all our coding tips be stored? 
That’s right, in the database.
This database is part of our infrastructure and will be defined in a file I named &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamo.tf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_dynamodb_table&quot; &quot;codingtips-dynamodb-table&quot; {
  name = &quot;CodingTips&quot;
  read_capacity = 5
  write_capacity = 5
  hash_key = &quot;Author&quot;
  range_key = &quot;Date&quot;

  attribute = [
    {
      name = &quot;Author&quot;
      type = &quot;S&quot;
    },
    {
      name = &quot;Date&quot;
      type = &quot;N&quot;
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Dynamo is a NoSQL database, we don’t have to specify all attributes upfront.
The only thing we have to provide are the elements that AWS will use to build the partition key with.
When you provide a hash key as well as a sort key, AWS will combine these to make a unique partition key.
Mind the word UNIQUE.
Make sure this combination is unique.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DynamoDB uses the partition key value as input to an internal hash function. 
The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored. 
All items with the same partition key value are stored together, in sorted order by sort key value.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html&quot;&gt;DynamoDB Core Components&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the attribute definitions in &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamo.tf&lt;/code&gt; it is clear that &lt;code class=&quot;highlighter-rouge&quot;&gt;Author&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;) is a string and &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;) should be a number.&lt;/p&gt;

&lt;h1 id=&quot;iam&quot;&gt;IAM&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-IAM.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Before specifying the Lambda Functions we have to create permissions for our functions to use.
This makes sure that our functions have permissions to access other resources (like DynamoDB).
Without going too deep into it, the AWS permission model works as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide a resource with a role&lt;/li&gt;
  &lt;li&gt;Add permissions to this role&lt;/li&gt;
  &lt;li&gt;These allow the role to access other resources:
    &lt;ul&gt;
      &lt;li&gt;permissions for triggering another resource (eg. Lambda Function forwards logs to CloudWatch)&lt;/li&gt;
      &lt;li&gt;permissions for being triggered by another resource (eg. Lambda Function may be triggered by API Gateway)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;# ROLES
# IAM role which dictates what other AWS services the Lambda function
# may access.
resource &quot;aws_iam_role&quot; &quot;lambda-iam-role&quot; {
  name = &quot;codingtips_lambda_role&quot;

  assume_role_policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Action&quot;: &quot;sts:AssumeRole&quot;,
      &quot;Principal&quot;: {
        &quot;Service&quot;: &quot;lambda.amazonaws.com&quot;
      },
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Sid&quot;: &quot;&quot;
    }
  ]
}
EOF
}

# POLICIES
resource &quot;aws_iam_role_policy&quot; &quot;dynamodb-lambda-policy&quot;{
  name = &quot;dynamodb_lambda_policy&quot;
  role = &quot;${aws_iam_role.lambda-iam-role.id}&quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;dynamodb:*&quot;
      ],
      &quot;Resource&quot;: &quot;${aws_dynamodb_table.codingtips-dynamodb-table.arn}&quot;
    }
  ]
}
EOF
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, the first resource that is defined is an &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt;.
This is the role that we will later give to our Lambda Functions.&lt;/p&gt;

&lt;p&gt;We then create the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; resource which we link to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt;.
The first &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; is giving this role permission to invoke any action on the specified DynamoDB resource.
The second &lt;code class=&quot;highlighter-rouge&quot;&gt;role_policy&lt;/code&gt; allows a resource with this role to send logs to CloudWatch.&lt;/p&gt;

&lt;p&gt;A couple of things to notice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; are connected by the &lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; argument of the &lt;code class=&quot;highlighter-rouge&quot;&gt;role_policy&lt;/code&gt; resource&lt;/li&gt;
  &lt;li&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;statement&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; we grant (&lt;code class=&quot;highlighter-rouge&quot;&gt;Effect&lt;/code&gt; attr.) permission to do some actions (&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; attr.) on a certain resource (&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; attr.)&lt;/li&gt;
  &lt;li&gt;A resource is referenced by its &lt;em&gt;ARN&lt;/em&gt; or &lt;em&gt;Amazon Resource Name&lt;/em&gt; which uniquely identifies this resource on AWS&lt;/li&gt;
  &lt;li&gt;There are two ways to specify an &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;using the &lt;em&gt;until EOF&lt;/em&gt; syntax (like I did here)&lt;/li&gt;
      &lt;li&gt;using a separate Terraform &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_policy_document&lt;/code&gt; element that is coupled to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamodb-lambda-policy&lt;/code&gt; allows all actions on the specified DynamoDB resource because under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; attribute it states &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamodb:*&lt;/code&gt;
You could make this more restricted and mention actions like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dynamodb:Scan&quot;, &quot;dynamodb:BatchWriteItem&quot;,&quot;dynamodb:PutItem&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lambda-functions&quot;&gt;Lambda Functions&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-Lambda.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There are two Lambda Functions that are part of this application.
The first Lambda is used to get or retrieve the coding tips from the database further referenced as the &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda&lt;/code&gt;.
The second Lambda is used to post or send the coding tips to the database further referenced as the &lt;code class=&quot;highlighter-rouge&quot;&gt;postlambda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am not going to copy paste the code of the Lambda Functions in here.
You can check it out in the repository linked to this blog 
(GitLab repository: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here I will demonstrate the example of the &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda&lt;/code&gt; function.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;postLambda&lt;/code&gt; is deployed in the same way and you can find the Terraform definitions in the Git repository.
A Lambda Function is a little different from the other infrastructure we defined here.
Not only do we need a Lambda Function as infrastructure.
We also need to specify the code that runs in this Lambda Function.
But where will AWS find that specific code when deploying the Lambda Function?
They don’t have access to your local machine, have they?
That is why you first need to ship your code to a S3 Bucket on AWS where it can be found when your Function is being deployed.&lt;/p&gt;

&lt;p&gt;That also means creating an S3 Bucket, which you can do with this command when you want it in region &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-west-1&lt;/code&gt; (Ireland):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws s3api create-bucket &lt;span class=&quot;nt&quot;&gt;--bucket&lt;/span&gt; codingtips-node-bucket &lt;span class=&quot;nt&quot;&gt;--region&lt;/span&gt; eu-west-1 &lt;span class=&quot;nt&quot;&gt;--create-bucket-configuration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LocationConstraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eu-west-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you have to zip the code of your Lambda Functions:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; getLambda.zip index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And upload that file to s3:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws s3 &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;getLambda.zip s3://codingtips-node-bucket/v1.0.0/getLambda.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mind that I am sending it to a bucket named &lt;code class=&quot;highlighter-rouge&quot;&gt;codingtips-node-bucket&lt;/code&gt; in a folder &lt;code class=&quot;highlighter-rouge&quot;&gt;v1.0.0&lt;/code&gt; with filename &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda.zip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, the code is where it needs to be.
Now let’s see how we specify these functions using Terraform.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_lambda_function&quot; &quot;get-tips-lambda&quot; {
  function_name = &quot;codingTips-get&quot;

  # The bucket name as created earlier with &quot;aws s3api create-bucket&quot;
  s3_bucket = &quot;${var.s3_bucket}&quot;
  s3_key = &quot;v${var.lambda_version}/getLambda.zip&quot;

  # &quot;main&quot; is the filename within the zip file (index.js) and &quot;handler&quot;
  # is the name of the property under which the handler function was
  # exported in that file.
  handler = &quot;index.handler&quot;
  runtime = &quot;nodejs8.10&quot;
  memory_size = 128

  role = &quot;${aws_iam_role.lambda-iam-role.arn}&quot;
}

resource &quot;aws_lambda_permission&quot; &quot;api-gateway-invoke-get-lambda&quot; {
  statement_id  = &quot;AllowAPIGatewayInvoke&quot;
  action        = &quot;lambda:InvokeFunction&quot;
  function_name = &quot;${aws_lambda_function.get-tips-lambda.arn}&quot;
  principal     = &quot;apigateway.amazonaws.com&quot;

  # The /*/* portion grants access from any method on any resource
  # within the specified API Gateway.
  source_arn = &quot;${aws_api_gateway_deployment.codingtips-api-gateway-deployment.execution_arn}/*/*&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Notice that we tell Terraform the S3 Bucket and directory to look for the code&lt;/li&gt;
  &lt;li&gt;We specify the runtime and memory for this Lambda Function&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.handler&lt;/code&gt; points to the file and function where to enter the code&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_lambda_permission&lt;/code&gt; resource is the permission that states that this Lambda Function may be invoked by the API Gateway that we created&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-apigateway.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I kept the most difficult one for last.
On the other hand, it is also the most interesting.
I hand Terraform a &lt;em&gt;Swagger&lt;/em&gt; definition of my API.
You can also do this without Swagger, but then you will have to specify a lot more resources.&lt;/p&gt;

&lt;p&gt;The Swagger API definition looks as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swagger: '2.0'
info:
  version: '1.0'
  title: &quot;CodingTips&quot;
schemes:
  - https
paths:
  &quot;/api&quot;:
    get:
      description: &quot;Get coding tips&quot;
      produces:
        - application/json
      responses:
        200:
          description: &quot;The codingtips request successful.&quot;
          schema:
            type: array
            items:
              $ref: &quot;#/definitions/CodingTip&quot;
      x-amazon-apigateway-integration:
        uri: ${get_lambda_arn}
        passthroughBehavior: &quot;when_no_match&quot;
        httpMethod: &quot;POST&quot;
        type: &quot;aws_proxy&quot;
    post:
      description: &quot;post a coding tip&quot;
      consumes:
        - application/json
      responses:
        200:
          description: &quot;The codingtip was added successfully&quot;
      x-amazon-apigateway-integration:
        uri: ${post_lambda_arn}
        passthroughBehavior: &quot;when_no_match&quot;
        httpMethod: &quot;POST&quot;
        type: &quot;aws_proxy&quot;

definitions:
  CodingTip:
    type: object
    description: &quot;A coding tip&quot;
    properties:
      tip:
        type: string
        description: &quot;The coding tip&quot;
      date:
        type: number
        description: &quot;date in millis when tip was entered&quot;
      author:
        type: string
        description: &quot;Author of the coding tip&quot;
      category:
        type: string
        description: &quot;category of the coding tip&quot;
    required:
      - tip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do not know Swagger yet, copy the above and paste it in the online (&lt;a href=&quot;https://editor.swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Swagger Editor&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This will grant you a nice visual overview of the API definition.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/swagger.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There is only one AWS specific thing in the Swagger specification above and that is &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amazon-apigateway-integration&lt;/code&gt;.
This is specifying the details of how the API is integrating with the backend.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remark that this is always a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; even if the HTTP method of the resource path is a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aws_proxy&lt;/code&gt; means that the request is passed to the Lambda Function without manipulation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;when_no_match&lt;/code&gt; passes the request body to the backend without tranforming it when no &lt;code class=&quot;highlighter-rouge&quot;&gt;requestTemplate&lt;/code&gt; is specified for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; is referencing a variable eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;${get_lambda_arn}&lt;/code&gt; that Terraform passes to the Swagger definition.
We’ll see this in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I already mentioned, using Swagger to define your API Gateway has some advantages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It keeps your Terraform more concise&lt;/li&gt;
  &lt;li&gt;You can use this Swagger to get a nice representation of your API&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_api_gateway_rest_api&quot; &quot;codingtips-api-gateway&quot; {
  name        = &quot;CodingTipsAPI&quot;
  description = &quot;API to access codingtips application&quot;
  body        = &quot;${data.template_file.codingtips_api_swagger.rendered}&quot;
}

data &quot;template_file&quot; codingtips_api_swagger{
  template = &quot;${file(&quot;swagger.yaml&quot;)}&quot;

  vars {
    get_lambda_arn = &quot;${aws_lambda_function.get-tips-lambda.invoke_arn}&quot;
    post_lambda_arn = &quot;${aws_lambda_function.post-tips-lambda.invoke_arn}&quot;
  }
}

resource &quot;aws_api_gateway_deployment&quot; &quot;codingtips-api-gateway-deployment&quot; {
  rest_api_id = &quot;${aws_api_gateway_rest_api.codingtips-api-gateway.id}&quot;
  stage_name  = &quot;default&quot;
}

output &quot;url&quot; {
  value = &quot;${aws_api_gateway_deployment.codingtips-api-gateway-deployment.invoke_url}/api&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;We start by mentioning the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_api_gateway_rest_api&lt;/code&gt; resource.
It does what is says and provides an API Gateway REST API.
    &lt;ul&gt;
      &lt;li&gt;body references the Swagger file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;template_file&lt;/code&gt; datasource allows Terraform to use information that is not defined in Terraform (Swagger in our case)
    &lt;ul&gt;
      &lt;li&gt;Variables are passed to this &lt;code class=&quot;highlighter-rouge&quot;&gt;template_file&lt;/code&gt; to fill the file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For a given &lt;code class=&quot;highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; to be usable, it has to be deployed
    &lt;ul&gt;
      &lt;li&gt;This is done by the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_api_gateway_deployment&lt;/code&gt; resource&lt;/li&gt;
      &lt;li&gt;It references the REST API&lt;/li&gt;
      &lt;li&gt;It needs a stage which is like a ‘version’ or ‘snapshot’ of your API
The stage name will be in the URL to invoke this API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At last the URL on which the API can be invoked is outputted to the terminal
&lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; is appended to have the correct resource path&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;endgame&quot;&gt;Endgame&lt;/h1&gt;
&lt;p&gt;All right, let’s see it now.
Does this actually work?
Here I am running &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; within the repository linked to this blog.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/apply.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Nice, it worked.
And I only told Terraform about the infrastructure I wanted.
The whole setup process goes automatically!
You can now use the outputted URL to GET and POST coding tips.
The body of the POST should look like:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Short sessions with frequent brakes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Empowerment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you need to couple the API endpoints to a frontend of your own design, you need to set the CORS headers correctly.
If you want this challenge, there is another branch in the repository (&lt;code class=&quot;highlighter-rouge&quot;&gt;cors-enabled&lt;/code&gt;) where I worked this out.&lt;/p&gt;

&lt;p&gt;Happy coding folks, Code that Infrastructure!&lt;/p&gt;

&lt;h1 id=&quot;resources-and-further-reading&quot;&gt;Resources and further reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Terraform website: &lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Terraform.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Terraform-Lambda-APIGateway: &lt;a href=&quot;https://learn.hashicorp.com/terraform/aws/lambda-api-gateway&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;learn.hashicorp.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Swagger editor: &lt;a href=&quot;https://editor.swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;editor.swagger.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Swagger official website: &lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;swagger.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java &amp; JavaScript developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build his expertise by contributing to valuable projects. Serverless, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API GateWay" /><category term="Serverless" /><category term="IaC" /><summary type="html">Table of content Infrastructure as Code Introduction and demo Creating the application Prerequisites Terraform: the basics General Database: DynamoDB IAM Lambda Functions API Gateway Endgame Resources and further reading</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/featured-image.png" /></entry><entry><title type="html">Flutter: Hybrid apps for mobile &amp;amp; beyond.</title><link href="https://ordina-jworks.github.io/development/2019/01/10/Flutter.html" rel="alternate" type="text/html" title="Flutter: Hybrid apps for mobile &amp; beyond." /><published>2019-01-10T00:00:00+00:00</published><updated>2019-01-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2019/01/10/Flutter</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2019/01/10/Flutter.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Mobile development has always intrigued me.
Bringing data to life by visualizing it with different components and being able to carry your app along inside your pocket is something special.
I still remember the excitement I felt when working on my first mobile app in university,
even with the lack of good resources back then and the sluggish emulator which was available at that time.&lt;/p&gt;

&lt;p&gt;The mobile world has kept expanding with big improvements in resources, frameworks, tools and designs.
From the first iPhone to having your refrigerator running your favorite apps, more and more possibilities and challenges have become available to keep you going.
Nowadays, there are different paths that you can follow to create those apps.
Native, hybrid or web apps, it all depends on what you want to achieve and how many resources are available.
Each has its benefits and pitfalls, which doesn’t make the decision any easier.
Do you want to give your audience the best native experience with great performance?
Or does a hybrid app suffices where you might compromise in speed and in look &amp;amp; feel of a native app?
Flutter might be the answer, by providing you the best parts of both worlds.&lt;/p&gt;

&lt;h2 id=&quot;beautiful-native-apps-in-record-time&quot;&gt;Beautiful native apps in record time&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flutter allows you to build beautiful native apps on iOS and Android from a single codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Flutter&quot; src=&quot;/img/2019-01-10-Flutter/flutter_logo.jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A promising statement which is presented to you when you browse to &lt;a href=&quot;https://flutter.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flutter.io&lt;/a&gt;.
A statement that explains perfectly what Flutter is in fact.
Flutter is an open source mobile UI framework made by Google.
With Flutter, you can build beautiful apps that run at native speed.
Given the single codebase, you don’t have to develop the same app twice for both iOS and Android.
Flutter is even the first-class citizen for Fuchsia, an upcoming mobile OS that is currently being developed by Google.
Flutter apps follow platform conventions and interface details, so the scrolling, fonts, navigations, etc. will look natively respecting the specific platform.
All of this results in beautiful apps that require less time and resources to develop and this without compromising on quality, features, performance or design.&lt;/p&gt;

&lt;h3 style=&quot;clear: left;&quot;&gt;Performance at its core&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;Flutter&quot; src=&quot;/img/2019-01-10-Flutter/flutter-gallery.gif&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;How did the Flutter team achieve all of this?
Why aren’t there any downgrades in performance while being a hybrid app?
The reason for this is that Flutter is built with performance in mind from the beginning.
In fact, being performant was the main reason why the Flutter team started with the framework.
Being hybrid was more of a side-effect because of the way the implementation is set up.&lt;/p&gt;

&lt;p&gt;Because Flutter is so performant, you are guaranteed that Flutter apps will run at 60 FPS and more.
This leads to smooth animations and an instant responsive app which results in a great user experience.
Your app will also render perfectly on older devices, while even some native apps may have trouble to keep running at a constant refresh rate.&lt;/p&gt;

&lt;p&gt;To achieve this performance, Flutter does something different than other hybrid solutions.
The framework avoids having a JavaScript bridge between the app and the platform by using a language that compiles to native code.
This bridge is typically the bottleneck when it comes to performance in hybrid solutions.
The lack of the JavaScript bridge allows Flutter to communicate directly with the platform.
Which language are we talking about?
Well, all of this is made possible with Dart.&lt;/p&gt;

&lt;h2 id=&quot;dart-you-say&quot;&gt;‘Dart’ you say?&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Dart&quot; src=&quot;/img/2019-01-10-Flutter/dart.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dart&lt;/a&gt; is a programming language that was also developed by Google.
Its purpose is to build web, server and mobile apps.
You can develop your app with Dart, which will either be compiled to JavaScript or into native code.&lt;/p&gt;

&lt;p&gt;The Flutter team considered different languages, but many of them had drawbacks in one of the four dimensions for evaluation that they used.
Since Google had its own language ready to be used, the team also took a look at Dart.
Dart scored high on all the requirements and criteria that the team had predefined, which is why the decision was obvious.&lt;/p&gt;

&lt;p&gt;There are some huge benefits when using Dart compared to other languages.
One of them is the Dart runtime and compiler.
This enables Dart code to be compiled both AOT (Ahead Of Time) and JIT (Just In Time).
With AOT, Dart is compiled to native code which ensures that the execution is fast, high-performing and predictable.
Your app will start up faster and it will feel smoother while running it.&lt;/p&gt;

&lt;p&gt;JIT enables stateful hot-reloading, which gives developers an extremely fast development cycle.
Once you hit Save in your editor, the code changes are applied to your running app within a second without losing state.
This gives productivity an enormous boost and helps you to reach your goals faster than before.
No more refilling the same form to test some validation or navigating to a specific screen for you.
It is really impressive to see hot reload in action, especially when you’re used to the development cycle within native mobile development.
To me, it kind of feels like magic.&lt;/p&gt;

&lt;p&gt;You might be asking yourself if it is worth learning a new language for a new framework.
From my experience, Dart is really easy to adopt, especially if you’re used to Java or JavaScript/TypeScript.
Dart feels natural to use and is a powerful language.
Most of the time when I’m playing around with Flutter I even don’t realize that I’m writing in another language.
In fact, it just &lt;del&gt;works&lt;/del&gt; writes.&lt;/p&gt;

&lt;h2 id=&quot;everything-is-a-widget&quot;&gt;Everything is a widget&lt;/h2&gt;

&lt;p&gt;The native performance of Flutter apps is great, but how can you use Flutter to build your app?
The answer is widgets.
They are the building blocks that Flutter uses to build up your interface.
Widgets are responsible for the native look and feel that you want to create, so they are really important.
With widgets you’ll be able to create beautiful apps, exactly how your design team imagined them to be.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Widgets everywhere&quot; src=&quot;/img/2019-01-10-Flutter/meditation.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In Flutter, everything is a widget!
Ranging from a button, an image, to the app itself.
Even the padding, positioning or navigation are all defined by the use of widgets.
You combine widgets to build up the interface to your liking.
Flutter will generate a widget tree out of it and uses that tree to render the layout on the screen of the device.&lt;/p&gt;

&lt;p&gt;Flutter uses its own set of widgets, which assures you have a pixel perfect layout on every device.
You’re not dependent, nor limited by the widgets provided by the platform.
The only thing that Flutter needs is a canvas to draw on.
You can compare Flutter with a game engine, or in this case rather an app engine.
By providing its own set of widgets, you can customize all of them to your liking.
This enables you to include your company branding through your app, ranging from colors to the shape of buttons.&lt;/p&gt;

&lt;p&gt;All the widgets are written in Dart.
Because Flutter is an open source project, you can use the source code as a reference while applying the widgets.
With Flutter you don’t have to worry anymore about support libraries to render your apps on old devices or about OEMs that decide to alter the platform widgets because they can.
You can even enjoy the beauty of Material Design on devices that were released years before Material Design was introduced.
Your app will also be future proof, as new design implementations of platform widgets won’t affect or break the layout of your app.
&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;JWorks widget&quot; src=&quot;/img/2019-01-10-Flutter/jworks_widget.png&quot; /&gt;&lt;/span&gt;
If there are any breaking changes with future OS versions, then it’s a bug for Flutter to resolve instead for you.
Flutter even added notch-support for the iPhone X before the phone was released.&lt;/p&gt;

&lt;p&gt;Here you can find a quick example how you can build up your layout by combining different widgets together.
The JWorks widget is rendered inside a default Material app template on the iPhone XS.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JWorksWidget&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I'm a widget&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I'm a widget too&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;elevation:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Yep, another widget&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EdgeInsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We're all widgets!&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'https://ordina-jworks.github.io/img/jworks/jworks-400x400.png'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-hybrid-framework-to-rule-them-all&quot;&gt;One hybrid framework to rule them all&lt;/h2&gt;

&lt;p&gt;On the 4th of December 2018 the first &lt;a href=&quot;https://developers.google.com/events/flutter-live/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flutter Live&lt;/a&gt; event was hosted.
A lot of exciting announcements were made, which definitely shows that the Flutter team is determined to keep improving.
&lt;a href=&quot;https://developers.googleblog.com/2018/12/flutter-10-googles-portable-ui-toolkit.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The first stable version was released&lt;/a&gt; almost two years after the first Alpha version was released.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Hummingbird&quot; src=&quot;/img/2019-01-10-Flutter/hummingbird.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another huge announcement was revealed about the future plans of Flutter.
The first step is &lt;a href=&quot;https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hummingbird&lt;/a&gt;, or Flutter for the web.
Since Dart can also compile to JavaScript, this was a logical step to take.
Being able to run on the web, you can also create a Progressive Web App with Flutter, so your mobile app which runs in the browsers becomes a web app.
Appception right there.&lt;/p&gt;

&lt;p&gt;Google is also working to bring Flutter to desktop with Flutter Desktop Embedding.
To prove this concept, the presentation of Flutter Live was running in a Flutter app on a laptop.
This means that Flutter won’t be a mobile SDK solely, but it might become the way to go SDK for hybrid apps across mobile, web and desktop.
Maybe later on, any device that can render pixels will be able to run Flutter apps.&lt;/p&gt;

&lt;p&gt;Furthermore, the Flutter team is working to provide integration between Flutter and your existing native apps.
Not everyone can start from scratch, so having a way to gradually move your app to Flutter is a very welcome addition if you’re planning to do so.
This project, which contains all the APIs and tooling, is named Add2App and is currently in a preview state.
With Add2App, you can launch a view containing your new Flutter app from your existing native app.&lt;/p&gt;

&lt;p&gt;You can also work in the opposite way with the introduction of Platform Views.
These views allow you to add native content inside your Flutter apps.
Platform Views unlocks Flutter to render Google Maps and WebViews inside the Flutter app.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Flutter keeps getting better and the community keeps on growing.
More and more &lt;a href=&quot;https://flutter.io/showcase&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;companies&lt;/a&gt; start to embrace Flutter
and &lt;a href=&quot;https://itsallwidgets.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;developers&lt;/a&gt; are excited and positive when using Flutter in their apps.
It surely looks promising that Flutter can become a big player in the mobile world.&lt;/p&gt;

&lt;p&gt;While I was getting in touch with Flutter and digging through the documentation and examples,
I got more and more fascinated about all the possibilities that you can achieve with this new mobile SDK.
The Flutter journey reminded me back of the feeling I had when I was working on my first mobile app,
discovering a new mobile world full of possibilities, this time built out of widgets.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dimitri&quot;, &quot;last_name&quot;=&gt;&quot;De Kerf&quot;, &quot;permalink&quot;=&gt;&quot;/author/dimitri-de-kerf&quot;, &quot;avatar&quot;=&gt;&quot;dimitri-de-kerf.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;dimitri.de.kerf@ordina.be&quot;, &quot;github&quot;=&gt;&quot;DimiDeKerf&quot;, &quot;bio&quot;=&gt;&quot;Dimitri is a Frontend and Mobile developer at Ordina Belgium. He enjoys writing user friendly apps in a clean, maintainable way. Dimitri loves new technologies and is eager to try them out.&quot;}</name><email>dimitri.de.kerf@ordina.be</email></author><category term="Development" /><category term="Android" /><category term="Flutter" /><category term="Hybrid" /><category term="iOS" /><category term="Mobile" /><summary type="html">Intro</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-01-10-Flutter/Flutter.jpg" /></entry><entry><title type="html">Devoxx MA 2018</title><link href="https://ordina-jworks.github.io/conference/2018/12/17/Devoxx-MA.html" rel="alternate" type="text/html" title="Devoxx MA 2018" /><published>2018-12-17T00:00:00+00:00</published><updated>2018-12-17T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/12/17/Devoxx-MA</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/12/17/Devoxx-MA.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://devoxx.ma/&quot; target=&quot;_blank&quot;&gt;Devoxx MA&lt;/a&gt; is a yearly conference in Morocco.
Previously it was held in Casablanca but for their 4th edition, xHub, 
the organisation behind Devoxx MA, decided to hold it in Marrakesh, in the lovely Palm Plaza Hotel on the 27th, 28th and 29th of November 2018.
Aside from the conference, the speakers were also offered an exclusive trip.
Four colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn, Tom Van den Bulck and Maarten Casteels attended both the conference and the speakers trip.
Three of them were also featured as speaker.
In this blog post we share our impressions and experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/JWorks@DevoxxMA.jpg&quot; alt=&quot;JWorks @ Devoxx MA&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-speakers-dinner&quot;&gt;The Speakers Dinner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vuejs-animation-in-action-by-charles-philippe-bernard&quot;&gt;VueJS Animation In Action by Charles-Philippe Bernard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, The Idiomatic Mocking Framework For Kotlin by Yannick De Turck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stream-processing-live-traffic-data-with-kafka-streams-by-tom-van-den-bulck-and-tim-ysewyn&quot;&gt;Stream Processing Live Traffic Data with Kafka Streams by Tom Van den Bulck and Tim Ysewyn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#applying-dddd-and-cqrs-to-cloud-architectures-with-spring-boot-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Spring Boot and Docker by Benjamin Nothdurft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resiliency-for-140-pb-cluster-by-meriam-lachkar&quot;&gt;Resiliency for 140 PB Cluster by Meriam Lachkar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#la-keynote-de-la-nouvelle-generation-by-saskia-and-lois&quot;&gt;La Keynote De La Nouvelle Generation by Saskia and Lois&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-speakers-trip-in-essaouira&quot;&gt;The Speakers Trip in Essaouira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-speakers-dinner&quot;&gt;The Speakers dinner&lt;/h2&gt;
&lt;p&gt;The evening before the conference started, we had the speakers dinner sponsored by &lt;a href=&quot;https://www.lightbend.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lightbend&lt;/a&gt;.
The dinner was held at restaurant &lt;a href=&quot;http://www.restaurant-ksarelhamra.net&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kasar El Hamra&lt;/a&gt; in the center of Marrakesh.
On our way to the center we got to experience the Moroccan traffic which seemed to be pretty chaotic with all the cars and motorcycles zipping around, evading each other on the streets.
Once arrived, we got treated with Moroccan dishes.
One after the other, each of them truly delicious.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/speakers-dinner.jpg&quot; alt=&quot;Speakers Dinner&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vuejs-animation-in-action-by-charles-philippe-bernard&quot;&gt;VueJS animation in action by &lt;a href=&quot;https://twitter.com/charlyouki&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Charles-Philippe Bernard&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Charles-Philippe Bernard&quot; src=&quot;/img/devoxx-ma-2018/speaker-charles-philippe.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Charles-Philippe explained why he loves &lt;a href=&quot;https://vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VueJS&lt;/a&gt; so much.
He criticised Angular and React because of the companies behind the frameworks, as well as the multiple variations of utilities and plugins. 
Instead, he prefers a community that stands as one behind the framework. 
Which is why he really likes VueJS as it is community-driven.
He explained that for each functionality, there is exactly one solution promoted by the community.&lt;/p&gt;

&lt;p&gt;During his session, Charles-Philippe went over several libraries that he often uses for animated websites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSS3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://velocityjs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Velocity.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Animate.css&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://animejs.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;anime.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://micku7zu.github.io/vanilla-tilt.js/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vanilla-tilt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A convenient trick that we learned during the session is how to make a JPG transparent using CSS.
Note that this will only work if the image has a white background.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-(css)&quot;&gt;img {
    mix-blend-mode: multiply;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to check out Charles-Philippe’s amazingly animated &lt;a href=&quot;https://wp1l5k0n7.codesandbox.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mockk-the-idiomatic-mocking-framework-for-kotlin-by-yannick-de-turck&quot;&gt;MockK, the idiomatic mocking framework for Kotlin by &lt;a href=&quot;https://twitter.com/YannickDeTurck&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Yannick De Turck&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Yannick De Turck&quot; src=&quot;/img/devoxx-ma-2018/speaker-yannick-de-turck.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Our colleague, Yannick, gave a talk about MockK.
MockK is a mocking framework specifically made for Kotlin. 
As a Java developer, he is a huge fan of Mockito for using mocks in his unit tests.
When he picked up Kotlin, Mockito was also his first choice to try out.&lt;/p&gt;

&lt;p&gt;He explained however that using Mockito in a Kotlin project doesn’t go all that well due to how Mockito creates its mocks, which is by overriding classes and functions.
And because Kotlin’s classes and functions are final by default, you can see that this poses some challenges.
Yannick shared his experiences and mentioned that even though there is an &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#mock-the-unmockable-opt-in-mocking-of-final-classesmethods&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;incubating, opt-in feature&lt;/a&gt; to allow Mockito to mock final classes and functions, the user experience isn’t all that nice.&lt;/p&gt;

&lt;p&gt;He looked for other frameworks and stumbled upon &lt;a href=&quot;https://mockk.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MockK&lt;/a&gt;, a mocking framework created for Kotlin by &lt;a href=&quot;https://github.com/oleksiyp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Oleksiy Pylypenko&lt;/a&gt;.
MockK’s main philosophy is offering first-class support for Kotlin features and being able to write idiomatic Kotlin code when using it.
He was pretty enthusiastic about MockK and went over all its features and its ease of use.&lt;/p&gt;

&lt;p&gt;There is also a &lt;a href=&quot;/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; written by Yannick specifically about his experiences with Mockito and MockK in Kotlin projects.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;c67c9a2029ad4b0e9c0016b55bb68d10&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stream-processing-live-traffic-data-with-kafka-streams-by-tom-van-den-bulck-and-tim-ysewyn&quot;&gt;Stream Processing Live Traffic Data with Kafka Streams by &lt;a href=&quot;https://twitter.com/tomvdbulck&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tom Van den Bulck&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/TYsewyn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tim Ysewyn&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tom van den Bulck&quot; src=&quot;/img/devoxx-ma-2018/speaker-tom-van-den-bulck.png&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tim Ysewyn&quot; src=&quot;/img/devoxx-ma-2018/speaker-tim-ysewyn.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Our colleagues, Tim Ysewyn and Tom Van den Bulck, gave a talk about stream processing live traffic data with Kafka Streams.&lt;/p&gt;

&lt;p&gt;Tom presented the theoretical part of the talk starting with the bigger picture. 
He explained the stream processing concept which is basically computing data directly as it is produced or received.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/01_data_at_rest_infrastructure.png&quot; alt=&quot;Data at rest infrastructure&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the image above we can see an example without stream processing.
In this case, the data is stored in databases and file storages.
Using a scheduler, applications can retrieve and process the stored data.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/02_stream_processing_infrastructure.png&quot; alt=&quot;Stream processing infrastructure&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With stream processing the data will be processed directly as streams of events, creating other event streams for other applications if needed.
The applications will react on events instead of scheduling jobs to retrieve and process data stored in databases and file storages.&lt;/p&gt;

&lt;p&gt;Following up the theoretical part, it was time for the demo.
Key part of the demo was of course the data that was going to get processed.
The Flemish government offers XML documents with live traffic data.
These documents are created every minute so by using a scheduled job, an event could be created out of it.&lt;/p&gt;

&lt;p&gt;The theory behind all of this can be a bit abstract if you are not familiar with the concept which is why Tim first did some live coding to demonstrate how the events can be handled properly.&lt;/p&gt;

&lt;p&gt;Afterwards we learned how Spring can be used to help us with Kafka and how we can periodically fetch the data.
We did this by first using pure code and secondly with the help of some convenient annotations to do the same thing with less code.&lt;/p&gt;

&lt;p&gt;At the end of the demo we created a small application that calculates the average speed for a specific sensor during a time frame of two minutes.&lt;/p&gt;

&lt;p&gt;The slides are available on &lt;a href=&quot;https://www.slideshare.net/TimYsewyn/stream-processing-live-traffic-data-with-kafka-streams&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SlideShare&lt;/a&gt;. 
The demo code can be found on &lt;a href=&quot;https://github.com/Stream-Processing-with-Kafka-Streams/workshop&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;applying-dddd-and-cqrs-to-cloud-architectures-with-spring-boot-and-docker-by-benjamin-nothdurft&quot;&gt;Applying (D)DDD and CQ(R)S to Cloud Architectures with Spring Boot and Docker by &lt;a href=&quot;https://twitter.com/DataDuke&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benjamin Nothdurft&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Benjamin Nothdurft&quot; src=&quot;/img/devoxx-ma-2018/speaker-benjamin-nothdurft.png&quot; /&gt;&lt;/span&gt;
Benjamin started off by giving a brief introduction on Domain-Driven Design explaining the different building blocks such as domains, domain events, ubiquitous language and Event Storming.&lt;br /&gt;
He also mentioned the famous two books: &lt;a href=&quot;https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain-Driven Design by Eric Evans&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Implementing Domain-Driven Design by Vaugn Vernon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Benjamin went through all the different steps of Event Storming.
The goal is to bring people of different silos together, such as developers, analysts, architects and business experts.
Together you want to create a logically ordered sequence of events to document a system using an ubiquitous language i.e. everybody using the same vocabulary and terms.
Events describe things that have happened and are thus always in the past tense e.g. product added to cart.
In a next step you want to identify commands, which are the triggers of events e.g. add product to cart.
There are also aggregates which represent the data that is interacted with.
And finally you want to identify the bounded contexts grouping relevant parts together.&lt;/p&gt;

&lt;p&gt;Benjamin then explained how this all gets translated to your system architecture.
Each bounded context can be mapped to a single microservice.
He covered different context map patterns such as event publisher, shared kernel, customer/supplier and anti-corruption layer together with detailed code samples.
Afterwards he went through a CQRS example with many code samples and the questions you should be asking yourself when determining the right architecture.
We really liked how in-depth everything was as many presentations about Domain-Driven Design usually remain rather abstract and high-level.&lt;/p&gt;

&lt;p&gt;You can check out Benjamin’s slides on &lt;a href=&quot;https://slides.com/dataduke/2018-11-27-ddd#/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;slides.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resiliency-for-140-pb-cluster-by-meriam-lachkar&quot;&gt;Resiliency for 140 PB Cluster by &lt;a href=&quot;https://twitter.com/lachkar_m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Meriam Lachkar&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Meriam Lachkar&quot; src=&quot;/img/devoxx-ma-2018/speaker-meriam-lachkar.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Meriam works at &lt;a href=&quot;https://www.criteo.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Criterio&lt;/a&gt; which is a marketing company managing Europe’s largest Hadoop cluster.&lt;/p&gt;

&lt;p&gt;Criterio uses various technologies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Batch Processing: Map/Reduce and Apache Spark.&lt;/li&gt;
  &lt;li&gt;Stream Processing: Apache Flink and Apache Kafka.&lt;/li&gt;
  &lt;li&gt;Machine Learning: Spark ML and Tensorflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Her talk focused on the Hadoop setup of Criterio.
The current cluster in Paris has 220 PB of hard disk, 550 TB of memory and 100.000 cores.
But since it is almost “full”, with 160 PB used, a new cluster has been set up in Amsterdam.
Between both clusters there is a dedicated 400 Gbit fiber installed.
Every day, 1 PB of data is generated.&lt;/p&gt;

&lt;p&gt;Meriam currently works at a project in which they want to synchronise the data between both clusters.
This was not a trivial thing to do and the main question was how they were going to sync the data between both clusters, as copying over all data would fill the existing line for an entire day.
RSync was just too slow, also some jobs are non-deterministic which means that executing the job a second time will yield a different result compared to the first time.&lt;/p&gt;

&lt;p&gt;Various options were considered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Double run: this means that the Paris data center would still become the bottleneck and would not yield real business value&lt;/li&gt;
  &lt;li&gt;Producer push&lt;/li&gt;
  &lt;li&gt;Consumer push&lt;/li&gt;
  &lt;li&gt;Dedicated central service which will determine where the jobs will run, on which data center.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A dedicated central service was the chosen solution.
Codenamed “Mumak”, as it is the convention to name everything in the Hadoop ecosystem to an elephant.&lt;/p&gt;

&lt;p&gt;Dataset by dataset will be progressively moved to Amsterdam, so that jobs will eventually be distributed between both data centers.&lt;/p&gt;

&lt;h2 id=&quot;la-keynote-de-la-nouvelle-generation-by-saskia-and-lois&quot;&gt;La keynote de la nouvelle generation by Saskia and Lois&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Saskia and Lois&quot; src=&quot;/img/devoxx-ma-2018/speaker-saskia-lois.png&quot; /&gt;&lt;/span&gt;
The closing keynote was presented by &lt;a href=&quot;https://twitter.com/saskialois&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Saskia&lt;/a&gt; (13) and Loïs (10) Blanc,
the children of &lt;a href=&quot;https://twitter.com/sebi2706&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sébastien Blanc&lt;/a&gt;. 
They started the closing keynote by asking the audience to close their eyes for a few seconds and to think about the near future and how we would imagine it.&lt;/p&gt;

&lt;p&gt;The audience had to explain what they were thinking of.
Most people shared the same things such as self-driving-cars and robots to help in the household. 
Saskia and Loïs in turn, shared their vision of the future which pretty much aligned with ours.&lt;/p&gt;

&lt;p&gt;Saskia started the first demo by giving an introduction on the Logo programming language while Loïs was doing some live coding.
A simple square was drawn first but it got more interesting as they added rotations to draw more complex figures.&lt;/p&gt;

&lt;p&gt;Loïs on the other hand explained Scratch, a program where you can create your own games, animations and interactive stories. 
He showed the community around the program and gave a really entertaining demo about two figures walking around.&lt;/p&gt;

&lt;p&gt;Saskia explained us that she became more interested in what her dad was doing and that she wanted to get into more real programming.
Her father being a Java developer, told her about the Groovy programming language.
Saskia gave a demo in Groovy and explained some basics while live coding a small program.
The program consisted of an &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; interface and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; class that could meow.&lt;/p&gt;

&lt;p&gt;Saskia and Loïs ended their keynote mentioning that they both want to become developers of the new generation.
Given their impressive presentation, we definitely see that happening!&lt;/p&gt;

&lt;h2 id=&quot;the-speakers-trip-in-essaouira&quot;&gt;The Speakers Trip in Essaouira&lt;/h2&gt;
&lt;p&gt;After three interesting days of Devoxx MA, we went on the speakers trip to Essaouira, considered as one of the best anchorages of the Moroccan coast.
We started off by visiting &lt;a href=&quot;http://restaurant-chez-ali.com/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chez Ali&lt;/a&gt; in Marrakesh on the last evening of the conference.
As we arrived we were heartily greeted by horsemen and Moroccans playing authentic music.
We got to explore Ali Baba’s cave before passing by all kinds of folkloric groups.
Dinner was served in big tents and consisted of multiple courses of Moroccan dishes.
After the dinner we got to watch an amazing spectacle of stuntmen on horses, belly dancers and cavaliers.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/chez-ali.jpg&quot; alt=&quot;Chez Ali&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The morning after, we set off to Essaouira with three buses filled of speakers and people part of the Devoxx MA organisation.
During the three-hour long ride we stopped by the magnificent “goat tree” and Arganomade, where they manufactured organic argan oil all by hand and where we got to see the whole manufacturing process.
In the early afternoon we arrived at &lt;a href=&quot;https://www.essaouira-lodge.com/en&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Essaouira Lodge&lt;/a&gt; where we would be staying during the trip.
After checking in and unpacking our luggage, we set off to the Essaouira beach where we had delicious sea food at restaurant Fanatic.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/essaouira-lodge.jpg&quot; alt=&quot;Essaouira Lodge&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our hunger satisfied, we set off with our buses a bit further along the beach where we got to ride camels in caravans.
With our newly allocated trusty steeds, we rode around the coast with the sun setting off in the background.
After a 30-minute ride in the sand we arrived at a big tent where we would spend the rest of the evening.
As dinner was being prepared in many tajines, we were entertained by live Moroccan music and dancers with a big cozy bonfire blazing about.
This was truly an amazing and memorable day!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/camel-ride.jpg&quot; alt=&quot;Camel Ride&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The day after we went back to Essaouira beach and visited the fortress city with the walls still intact.
As we strolled through the alley streets we got to visit all kinds of shops and markets.
We had lunch on a roof terrace at &lt;a href=&quot;http://www.ilmaressaouira.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Il Mare&lt;/a&gt; with an amazing view on the sea.
Some more exploring was done around the city before we returned to our lodges.
We spent the rest of the evening in our lodges where we invited all speakers in our lodge for a nice last evening together with a couple of Casablanca beers.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/essaouira-visit.jpg&quot; alt=&quot;Essaouira Visit&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we would not have been able to catch our flight back to Belgium in time, the four of us booked a &lt;a href=&quot;https://www.airbnb.nl/rooms/11040206&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;beautiful riad&lt;/a&gt; right in the center of Marrakesh.
We explored the Djemaa el Fna together with its back alleys and visited an authentic tannery.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/devoxx-ma-2018/riad-marrakesh.jpg&quot; alt=&quot;Riad Marrakesh&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h2&gt;
&lt;p&gt;Devoxx MA was amazing experience for us where we got to meet and befriend a lot of great people.
We would like to thank the organisers for organising both Devoxx MA and offering us the chance to see more of Morocco with the speakers trip!
The date for next year’s edition has already been announced and will happen on the 12th, 13th and 14th of November 2019.
Be sure to mark it in your agenda!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Conference" /><category term="Devoxx" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">Devoxx MA is a yearly conference in Morocco. Previously it was held in Casablanca but for their 4th edition, xHub, the organisation behind Devoxx MA, decided to hold it in Marrakesh, in the lovely Palm Plaza Hotel on the 27th, 28th and 29th of November 2018. Aside from the conference, the speakers were also offered an exclusive trip. Four colleagues of Ordina JWorks: Yannick De Turck, Tim Ysewyn, Tom Van den Bulck and Maarten Casteels attended both the conference and the speakers trip. Three of them were also featured as speaker. In this blog post we share our impressions and experiences.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/devoxx-ma-2018/devoxx-ma.png" /></entry><entry><title type="html">Catching the waves of servant leadership</title><link href="https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership.html" rel="alternate" type="text/html" title="Catching the waves of servant leadership" /><published>2018-12-13T00:00:00+00:00</published><updated>2018-12-13T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership.html">&lt;p&gt;As human beings, we’ve always had a complicated relationship with change.
On the one hand, we see it all around us and try to cope with the complexity of it.
Attempting to avoid or even sabotage it in order to hang on for dear life, to what we have always known to be normal, and therefore believe it to be what’s best.
On the other hand, it’s what allows us to hope and strive, what drives us towards a dream for a better future.
And so we look for ways to form it, to mould it, even manipulate it at times, thinking that whatever comes out of the change will be better and lasting.&lt;/p&gt;

&lt;p&gt;But does change have an outcome? 
Or is it endlessly moving forward? 
This continuous tension between coping and moulding makes our relationship with change a very personal one. 
Every day we strive, all of us, in this global community, to find a moment of peace with ourselves and with the ways we try to manage this uncertainty and complexity.
And sometimes, when the odds are right, in a cursory moment of clear thoughts, we discover that precious balance, and see the bigger picture. 
That’s when we embrace change and sense the opportunity…&lt;/p&gt;

&lt;p&gt;When projecting this mechanism from the personal into the organisational area, the same elements are at play. 
But the personal aspect is still the crucial driver (and the key to unlock it), that can push corporate change forward or go against it like a stubborn forceful undercurrent.&lt;/p&gt;

&lt;p&gt;Tapping into that current, though, is the key to unlocking the potential of an engaged community of professionals, and so helping the organisational culture grow organically. 
And doing that needs a ‘feel’ for what our present corporate culture is about. 
But more so it requires an understanding of what the employees building our brand - and the people creating the customer value – really strive for, 
personally and professionally.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Surfer&quot; src=&quot;/img/catching-the-waves-of-servant-leadership/surfing.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easier said than done, you think? 
Maybe so, especially when you’re working in a traditional corporate world, with siloed processes, with lots of gates and handovers, 
often distorting communication and slowing down value delivery. 
It does indeed call for a veritable paradigm shift, not just new management practices, but a management revolution; 
a shift towards a new approach, focused on what these value creators actually require in order to thrive in your organisation, for the benefit of your brand. 
Enabling them to become better, more inventive, more efficient, and allowing them to listen closely and collaborate with the customer, 
is the most successful way forward in our age of agile.&lt;/p&gt;

&lt;p&gt;This is of course not a one (wo)man show. 
Complexity is not something we can tackle with a single mind solution. 
Agile transformation, like cultural transformation, can only be set in motion by natural leaders, and by this I don’t necessarily mean ‘managers’. 
They can be emergent leaders from any level in the organisation. 
People who spread vibes, generate positive energy, think beyond the borders of their own roles and put their brains to work to reimagine how value is created. 
What defines them is that they ‘service’ their community, and that service is exactly one of their personal goals.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Surfing&quot; src=&quot;/img/catching-the-waves-of-servant-leadership/surfing2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a manager, make sure these emergent leaders experience the freedom to act. 
Each one comes with a natural community, call it a ‘tribe’. 
Explore every nook and cranny of the company to trace them. 
Then help them to understand the agile strategy, and support them to instigate an agile mindset and a zest for growth, 
by taking small but consistent steps, clear and aligned.&lt;/p&gt;

&lt;p&gt;The organisation will be surfing their powerful waves. 
And with the help of these servant leaders throughout the company, you’ll be able to blow the wind in the right direction, towards the customer.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Not one thing ever does it, it’s a series of consistent things that makes people say, ‘Aha, it’s time for change’” - Oprah Winfrey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;recommended-reading&quot;&gt;Recommended reading&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Stephen Denning - &lt;a href=&quot;https://www.amazon.com/dp/B072J5XPTP/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Age of Agile&lt;/a&gt;: How smart companies are transforming the way work gets done&lt;/li&gt;
  &lt;li&gt;Sunil Mundra - &lt;a href=&quot;https://www.amazon.com/gp/product/B0788T1PSN/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enterprise agility: Being agile in a changing world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Seth Godin - &lt;a href=&quot;https://www.amazon.com/gp/product/1591842336/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tribes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Em Campbell-Pretty - &lt;a href=&quot;https://www.amazon.com/gp/product/B01LZ0O4RC/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tribal Unity&lt;/a&gt;: Getting from teams to tribes by creating a one team culture&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Leadership" /><category term="Tribe" /><category term="Servant Leadership" /><category term="Enterprise Agility" /><category term="Change" /><category term="Agile Coaching" /><summary type="html">As human beings, we’ve always had a complicated relationship with change. On the one hand, we see it all around us and try to cope with the complexity of it. Attempting to avoid or even sabotage it in order to hang on for dear life, to what we have always known to be normal, and therefore believe it to be what’s best. On the other hand, it’s what allows us to hope and strive, what drives us towards a dream for a better future. And so we look for ways to form it, to mould it, even manipulate it at times, thinking that whatever comes out of the change will be better and lasting.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/catching-the-waves-of-servant-leadership/main-image.png" /></entry><entry><title type="html">dotCSS and dotJS</title><link href="https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018.html" rel="alternate" type="text/html" title="dotCSS and dotJS" /><published>2018-12-12T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018.html">&lt;h1 id=&quot;paris&quot;&gt;Paris!&lt;/h1&gt;
&lt;p&gt;This year for the first time Ordina JWorks travelled to Paris to attend a two day conference on CSS and JS, more exactly dotCSS and dotJS which are part of the dotConferences. 
dotConferences is a series of developer events in Paris that started in 2012.&lt;/p&gt;

&lt;p&gt;We only included talks on which we could elaborate. You can find all talks on the &lt;a href=&quot;https://www.youtube.com/user/dotconferences&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouYube channel&lt;/a&gt; of dotConferences.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;The JWorks team at dotJS&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/jworks-team-dotjs-dotcss-2018.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#day-1-dotcss&quot;&gt;Day 1: dotCSS&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#power-of-svg-by-sara-soueidan&quot;&gt;‘Power of SVG’ by Sara Soueidan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reading-hex-codes-by-david-desandro&quot;&gt;‘Reading Hex codes’ by David DeSandro&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variable-fonts-by-mandy-michael&quot;&gt;‘Variable fonts’ by Mandy Michael&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css-taught-me-by-dan-cederholm&quot;&gt;‘CSS taught me…’ by Dan Cederholm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#breaking-the-norm-with-creative-css-by-aga-naplocha&quot;&gt;‘Breaking the norm with creative CSS’ by Aga Naplocha&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#day-2-dotjs&quot;&gt;Day 2: dotJS&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#the-state-of-js-by-sacha-greif&quot;&gt;‘The State of JS’ by Sacha Greif&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#minecraft-is-getting-a-javascript-runtime-by-tobias-ahlin&quot;&gt;‘Minecraft is getting a JavaScript runtime’ by Tobias Ahlin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#learning-to-love-type-systems-by-lauren-tan&quot;&gt;‘Learning to Love Type Systems’ by Lauren Tan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#choosing-your-javascript-framework-by-john-papa&quot;&gt;‘Choosing Your JavaScript Framework’ by John Papa&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#javascript-on-the-desktop-fast-and-slow-by-felix-rieseberg&quot;&gt;‘JavaScript on the Desktop, Fast and Slow’ by Felix Rieseberg&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;day-1-dotcss&quot;&gt;Day 1: dotCSS&lt;/h1&gt;

&lt;h2 id=&quot;power-of-svg-by-sara-soueidan&quot;&gt;‘Power of SVG’ by &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sara Soueidan&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Some websites really have nice visuals that contribute to a pleasant user experience when visiting them. 
Think of brands that incorporate their logos in images for instance, or cover pictures that look like some Instagram filters were applied to them. 
You would think that such assets are created by designers and that they are applied directly to the webpage, but there is also a way to get those Photoshop effects straight into your browser.&lt;/p&gt;

&lt;p&gt;Sara Soueidan showed us a few possibilities to apply some stunning visual effects on images and text with code. 
The cool thing is that when using plain text, it’s still searchable! 
First she discussed some techniques that designers use to create templates in Photoshop and afterwards she applied the same techniques by only using SVG. 
It was very impressive to see how you can manipulate images by applying a set of SVG filters. 
Hopefully using those SVG techniques will become more common in the future so that more visual appealing websites will be created with the power of SVG.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/sara-soueidan-svg-filters&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://sarasoueidan.com/slides/SVG-Filters-Crash-Course.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;reading-hex-codes-by-david-desandro&quot;&gt;‘Reading Hex codes’ by &lt;a href=&quot;https://twitter.com/desandro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;David DeSandro&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This was one of the most mind blowing talks of dotCSS by far.
&lt;a href=&quot;https://twitter.com/desandro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;David DeSandro&lt;/a&gt; begins the talk with saying he has a special ability.
He can read color hex codes. 
At that moment the most of us were like &lt;em&gt;“What?”&lt;/em&gt;
&lt;em&gt;“You can tell the color based on the hexcode?”&lt;/em&gt;
&lt;em&gt;“Is that even possible?”&lt;/em&gt;
And well, he proved it to us that you really can tell the color based on the hex code.
He even showed us how to do so.&lt;/p&gt;

&lt;p&gt;And so he told us that it requires 5 steps to read color hex codes.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;3-digit shorthand&lt;/li&gt;
  &lt;li&gt;Line graph&lt;/li&gt;
  &lt;li&gt;Hue from shape&lt;/li&gt;
  &lt;li&gt;Lightness from total&lt;/li&gt;
  &lt;li&gt;Saturation from range&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just like this I bet you have no idea what these steps mean.
But let us teach you the magic of reading color hex codes as well thanks to David.&lt;/p&gt;

&lt;p&gt;To get started he taught us that the best way to describe colors is with the HSL color model.
HSL stands for Hue, Saturation and Lightness. 
Hue is the pure pigment of a color and can be described with 12 color names.
We’ll show you the color names later in Step 3.
Saturation is how vibrant or muted the hue is and can be described as &lt;em&gt;saturated&lt;/em&gt;, &lt;em&gt;washed&lt;/em&gt;, &lt;em&gt;muted&lt;/em&gt; or &lt;em&gt;gray&lt;/em&gt;.
Lightness speaks for itself and describes how light or dark the color is and this can be done with &lt;em&gt;light&lt;/em&gt;, &lt;em&gt;middle&lt;/em&gt; or &lt;em&gt;dark&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know how you can describe a color all you have to do is to follow the 5 steps.
And deterimine the hue, lightness and saturation.
So let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;step-1-3-digit-shorthand&quot;&gt;Step 1: 3-digit shorthand&lt;/h3&gt;
&lt;p&gt;To better understand the process let’s take &lt;code class=&quot;highlighter-rouge&quot;&gt;#D49B25&lt;/code&gt; as an example.
The first step is to retrieve the 3-digit shorthand of the hexcode.
This can be done easily by breaking up the hexcode in 3 pairs (D4 | 9B | 25).
Keep in mind that each pair represents a value of the RGB color channel.
Now drop the second number of each pair and that gives us the shorthand code &lt;code class=&quot;highlighter-rouge&quot;&gt;#D92&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Line graph of shorthand hex&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/shorthand.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-line-graph&quot;&gt;Step 2: Line graph&lt;/h3&gt;
&lt;p&gt;With the shorthand from step one we have to create a linegraph based on the numbers of the hexcode.
With basic understanding of hexadecimal numbers we can visualize a little line graph for the channel values.
D is high, 9 is around the middle, 2 is low.
And that’s how we get our litle line graph.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Hex linegraph example&quot; style=&quot;max-width: 25%;&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/hex-linegraph.jpg&quot; /&gt;
&lt;img class=&quot;image fit&quot; alt=&quot;Line graph of shorthand hex for color #D92&quot; style=&quot;max-width: 25%;&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/linegraph.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-hue-from-shape&quot;&gt;Step 3: Hue from shape&lt;/h3&gt;
&lt;p&gt;This is what we think is the most tricky part about reading color hex codes.
With the line graph we got from the previous step you’ll have to find a matching color on the color wheel.
So you’ll have to remember this one by heart if you really want to show off.
For our example color, it matches best with the color &lt;strong&gt;orange&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;HSL color wheel with color names&quot; style=&quot;max-width: 75%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/color-wheel.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-lightness-from-total&quot;&gt;Step 4: Lightness from total&lt;/h3&gt;
&lt;p&gt;To determine the lightness you should look either at the total sum of the channel values (pairs) or at the values in the line graph we created.
If the values are higher to the top, the color is closer to white and thus lighter.
If the values are closer to the bottom, the color is closer to black and thus darker.
For our example color &lt;code class=&quot;highlighter-rouge&quot;&gt;#D92&lt;/code&gt;, the values are both high and low, so it has &lt;strong&gt;middle&lt;/strong&gt; lightness.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Determining lightness of a color&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/lightness.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-saturation&quot;&gt;Step 5: Saturation&lt;/h3&gt;
&lt;p&gt;Saturation is a measure of how vibrant or rich the hue/color is.
To measure the saturation whe need to look at the difference between the highest and the lowest value in our shorthand code.
The wider the range, the higher the saturation. 
Colors with small range have low saturation, appearing faded.
A color with no saturation is a pure gray.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Measuring and describing saturation of a color&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/saturation.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our color, #D92, D is the highest value, 2 is the lowest.
D is high. 2 is low.
That’s a wide range, but not completely wide.
So our color has moderate saturation, thus making it a &lt;strong&gt;washed&lt;/strong&gt; color.&lt;/p&gt;

&lt;p&gt;Now we have all three attributes for our color
So we can say &lt;code class=&quot;highlighter-rouge&quot;&gt;#D49B25&lt;/code&gt; is &lt;strong&gt;Middle Washed Orange&lt;/strong&gt;.
Pretty amazing right?&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;#D49B25 color described as Middle Washed Orange&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/final-color.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since dotCss puts most of its talks online we definitely recommend watching this talk.
He just explains it so well and goes a little bit deeper than we did here.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/david-desandro-read-color-hex-codes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/desandro/read-color-hex-codes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;variable-fonts-by-mandy-michael&quot;&gt;‘Variable fonts’ by &lt;a href=&quot;https://twitter.com/mandy_kerr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mandy Michael&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A variable font is an OpenType font format that includes new technology called OpenType Font Variations. 
Jointly developed by four of the most influential technology companies — Google, Apple, Microsoft, and Adobe — these font files contain a huge amount of extra data, compared to your average OpenType font. 
A variable font can contain a font’s entire glyph set, or individual glyphs with up to 64,000 axes of variation, including weight, width, slant, and, in some cases, specific styles, such as Condensed, Bold, etc.&lt;/p&gt;

&lt;p&gt;There are two main advantages when using variable fonts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The average file size is smaller than separate font files&lt;/li&gt;
  &lt;li&gt;Only one request is necessary to load the necessary font variations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good example is the font &lt;a href=&quot;https://v-fonts.com/fonts/source-sans-variable&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Source Sans Variable&lt;/a&gt; or the font &lt;a href=&quot;https://www.typenetwork.com/brochure/decovar-a-decorative-variable-font-by-david-berlow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Decovar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She also showed us the possibilities of variable fonts and what kind of awesome stuff you can do with them.&lt;br /&gt;
Did you know that you can make text animations with them?&lt;br /&gt;
Well you can, so check it out on her &lt;a href=&quot;https://codepen.io/collection/XqRLMb/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;codepen.io collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can easily check for browser support using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; CSS rule: &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports (font-variation-settings)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;css-taught-me-by-dan-cederholm&quot;&gt;‘CSS taught me…’ by &lt;a href=&quot;https://twitter.com/simplebits&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dan Cederholm&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Dan talked about all the things he learned in his lifelong journey of working with CSS.
But in the end it all came down to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have side projects to keep your skills sharp&lt;/li&gt;
  &lt;li&gt;It’s OK not to use the latest and greatest in business&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;breaking-the-norm-with-creative-css-by-aga-naplocha&quot;&gt;‘Breaking the norm with creative CSS’ by &lt;a href=&quot;https://twitter.com/aganaplocha&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aga Naplocha&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The last presentation of the dotCSS conference was about using other inspirations and tools to build webpages. 
Aga made a bold remark that most of the websites out there have the same structure and even look and feel the same. 
As a big fan of Brutalist Design she showed &lt;a href=&quot;http://brutalistwebsites.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;some examples&lt;/a&gt; to demonstrate what is possible when you think out of the box.&lt;/p&gt;

&lt;p&gt;With her talk she wanted to encourage developers to try and use other CSS Properties for building and designing websites. 
The three CSS properties she mentioned were clipping, masking and shape-outside (all in combination with SVG — using masking with images is resource intensive since it operates pixel per pixel). 
She showed each property with a clear example and discussed the differences between them, and mentioned the compatibility of each property in the different browsers.&lt;/p&gt;

&lt;p&gt;Saying that most of the websites have the same look and feel is a bold statement but after you look around for a while you notice that she actually has a point. 
Most of the websites are using frameworks that give you a uniform, recognizable look and feel but are also really easy to use. 
With the properties she mentioned you can certainly build a beautiful, well-designed website but it would take more time to make sure you have a responsive website that has the same look and feel over the different browsers and devices.&lt;/p&gt;

&lt;h1 id=&quot;day-2-dotjs&quot;&gt;Day 2: dotJS&lt;/h1&gt;

&lt;h2 id=&quot;the-state-of-js-by-sacha-greif&quot;&gt;‘The State of JS’ by &lt;a href=&quot;https://twitter.com/sachagreif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sacha Greif&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;As we all know, the JavaScript ecosystem is richer than ever, and even the most experienced developers become victims of the amount of choices they have to make.
It’s always changing. New libraries, frameworks, languagues…
For this reason Sacha Greif, Raphaël Benitte and Michael Rambeau decided to create a global survey they called the ‘State of JavaScript’.&lt;/p&gt;

&lt;p&gt;The survey contains data from over 20.000 developers from all around the globe and you can find the results on their &lt;a href=&quot;https://stateofjs.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt;.
The survey tries to figure out what these developers are using these days, what they like and what they would love to learn.&lt;/p&gt;

&lt;p&gt;When they published the State of JS results of 2018 there was a lot of commotion regarding the results.
More specifically regarding the front end frameworks Angular, React and Vue.
The State of JS survey declares that Angular is suffering a lot in comparison with React and Vue.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;#D49B25 color described as Middle Washed Orange&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/stateofjs-fe-results.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Angular results are very disappointing and show us a high rate of dissatisfaction within its userbase.
On the other side there is only love for both React and Vue.
This lead to a war on Twitter and other channels saying the survey is flawed.&lt;/p&gt;

&lt;p&gt;Olivier Combe who is a member of the core team &lt;a href=&quot;https://twitter.com/OCombe/status/1064918179321913344&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;called out to Sasha&lt;/a&gt; why they didn’t make the distinction between AngularJS and Angular.
It makes total sense a lot of people are using Angular (read v2+) now and are not using AngularJS any longer.&lt;/p&gt;

&lt;p&gt;There even is a &lt;a href=&quot;https://www.youtube.com/watch?v=UnEPBQvkNrg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube Video&lt;/a&gt; that takes a closer look at the results.&lt;/p&gt;

&lt;p&gt;In any case, we believe this survey can help lots of developers make choices and it gives at least some insights on the State of JavaScript.
Besides the front end frameworks, the State of JS also offers lots of data of other subjects regarding JavaScript which are definitely worth checking out!&lt;/p&gt;

&lt;h2 id=&quot;minecraft-is-getting-a-javascript-runtime-by-tobias-ahlin&quot;&gt;‘Minecraft is getting a JavaScript runtime’ by &lt;a href=&quot;https://twitter.com/tobiasahlin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tobias Ahlin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tobias blew our mind with the message that Minecraft has a HTML based UI that is using a JavaScript runtime.
Just think about it: a JavaScript runtime running on top of your games.&lt;/p&gt;

&lt;p&gt;The JS runtime provides access to UI elements and an API to give developers enough freedom to work with the interface.&lt;/p&gt;

&lt;p&gt;Worth mentioning is that this is completely mobile optimized and is based on flexbox.
Using floats is just too expensive on processing power.&lt;/p&gt;

&lt;h2 id=&quot;learning-to-love-type-systems-by-lauren-tan&quot;&gt;‘Learning to Love Type Systems’ by &lt;a href=&quot;https://twitter.com/sugarpirate_&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lauren Tan&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Since the introduction of TypeScript in 2012, web development has consistently looked more towards building software with the use of static typing. 
Lauren discussed why we should embrace the use of optional static typing that TypeScript provides.&lt;/p&gt;

&lt;p&gt;By using types, we add more constraints to our code and how other developers can use our code. 
Thus this decreases the amount of possible bugs during the development phases of a project. 
According to Lauren, types are mathematical propositions on how a program should work and the written code that complies to the types is a proof of the type system.&lt;/p&gt;

&lt;p&gt;Lauren explained that while using types we should be as strict as possible. 
The lower cardinality we have in our types, the less bugs will occur as we limit the possible inputs to our functions.&lt;/p&gt;

&lt;p&gt;With TypeScript it’s convenient to use a type such as &lt;em&gt;any&lt;/em&gt; but we’re better off avoiding using the &lt;em&gt;any&lt;/em&gt; type. 
By consistently being as strict as possible in our type usage, we facilitate better integration between different developers and teams. 
It is definitely true that stricter typing helps with defining the limits of your code while also documenting your code indirectly.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/lauren-tan-learning-to-love-type-systems&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/poteto/dotjs-2018-learning-to-love-type-systems&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;choosing-your-javascript-framework-by-john-papa&quot;&gt;‘Choosing Your JavaScript Framework’ by &lt;a href=&quot;https://twitter.com/john_papa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;John Papa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With all the current JavaScript frameworks out there it’s hard to pick one to work with. 
During his talk John Papa took a closer look to the three most popular frameworks at the moment: Angular, React and Vue.&lt;/p&gt;

&lt;p&gt;When choosing the framework for your project you could ask yourself questions like &lt;em&gt;“Does it have all the features that I need?”&lt;/em&gt;, 
&lt;em&gt;“What about the documentation?”&lt;/em&gt;, &lt;em&gt;“Is it backed by a strong community?”&lt;/em&gt; or &lt;em&gt;“How fast is the framework?”&lt;/em&gt;.
In this case all three frameworks would apply. 
But they all have a different way to work with components, lazy loading, state management and other stuff.&lt;br /&gt;
Take for example the language it’s written in. 
With Angular comes TypeScript, but React and Vue are by default JavaScript. 
Do you fancy TypeScript but you don’t like to work with Angular? 
No issue, you can perfectly use TypeScript in React and Vue.&lt;/p&gt;

&lt;p&gt;They are all perfect for building successful applications and you can go on for hours on which one is the best.
But in the end it comes down to one question: &lt;em&gt;“How does the framework make you feel when you use it?”&lt;/em&gt;.&lt;br /&gt;
The only way to find out is by &lt;strong&gt;trying each one&lt;/strong&gt;. 
That’s why John Papa created a Tour of Heroes project for each framework.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/hero-angular&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/hero-react&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/heroes-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you wanna know which one he prefers? 
Well, he did not want to reveal that during the talk…&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/john-papa-choosing-your-javascript-framework&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://slides.com/johnpapa/choosing-your-framework-dotjs2018&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;javascript-on-the-desktop-fast-and-slow-by-felix-rieseberg&quot;&gt;‘JavaScript on the Desktop, Fast and Slow’ by &lt;a href=&quot;https://twitter.com/felixrieseberg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Felix Rieseberg&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Javascript is everywhere today, even in desktop applications e.g. Battlefield 1, Nvidia GeForce Experience and Adobe Creative Suite. 
Felix reveals his four tricks that can make your application more efficient.&lt;/p&gt;

&lt;p&gt;Before importing a specific module, really consider if you need all of its functionalities as it might bring in some additional items that you don’t need. 
When you do require a specific module, make sure you embed it at the right place.&lt;/p&gt;

&lt;p&gt;When using Node.js - which uses the V8 Javascript engine - the engine runs every time you build and compiles your code into something your machine can execute. 
You can easily cache this with the module &lt;code class=&quot;highlighter-rouge&quot;&gt;v8-compile-cache&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Repainting the screen is an expensive operation. 
You can check with Chrome Developer Tools how much this operation costs and maybe tweak some code.&lt;/p&gt;

&lt;p&gt;His third trick is that not all code is equal. 
Sometimes there is a more efficient way to structure your code or use different function calls with the same end result that could make your application faster. 
Using &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementByClassName&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; for example would be 99% faster.&lt;/p&gt;

&lt;p&gt;And to close off, application lifecycle.
If your application is minimized, pause the network requests and stop refreshing every couple of seconds. 
You can check this with &lt;code class=&quot;highlighter-rouge&quot;&gt;document.hidden&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/felix-rieseberg-javascript-on-the-desktop-fast-and-slow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://slides.com/felixrieseberg/js-desktop-fast-and-slow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We had an interesting two days at dotCSS and dotJS, and had a lot of fun engaging with the wonderful people at the conference.
One thing we noticed is that the talks at dotCSS were way more technical than the ones given at dotJS and somehow that made us feel a little bit disappointed.
Nonetheless we learned a lot of things and had a great time visiting the city of love.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jan&quot;, &quot;last_name&quot;=&gt;&quot;De Wilde&quot;, &quot;github&quot;=&gt;&quot;MrJean&quot;, &quot;twitter&quot;=&gt;&quot;Mr_Jean&quot;, &quot;linkedin&quot;=&gt;&quot;jandewilde&quot;, &quot;permalink&quot;=&gt;&quot;/author/jan-de-wilde/&quot;, &quot;avatar&quot;=&gt;&quot;jan-de-wilde.jpg&quot;, &quot;title&quot;=&gt;&quot;Practice Lead Frontend&quot;, &quot;title2&quot;=&gt;&quot;Senior Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;jan.dewilde@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jan De Wilde is a Senior Frontend Developer at Ordina Belgium, focussed on building quality mobile/hybrid applications that are accessible on a big collection of devices. His favorite technologies are Ionic Framework, Angular and TypeScript. Jan is also Practice Manager for the Frontend Practice where he takes care of the development and coaching of employees.&quot;}</name><email>jan.dewilde@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="dotCSS" /><category term="dotJS" /><category term="dotConferences" /><summary type="html">Paris! This year for the first time Ordina JWorks travelled to Paris to attend a two day conference on CSS and JS, more exactly dotCSS and dotJS which are part of the dotConferences. dotConferences is a series of developer events in Paris that started in 2012.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-dot-css-dot-js-2018/dotjs.jpeg" /></entry><entry><title type="html">Visualising IoT data with tableau</title><link href="https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health.html" rel="alternate" type="text/html" title="Visualising IoT data with tableau" /><published>2018-12-11T00:00:00+00:00</published><updated>2018-12-11T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health.html">&lt;h1 id=&quot;visionworks-meets-jworks-stairwaytohealth&quot;&gt;VisionWorks meets JWorks: StairwayToHealth&lt;/h1&gt;
&lt;p&gt;We, from &lt;a href=&quot;https://www.ordina.be/vakgebieden/bi-analytics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VisionWorks&lt;/a&gt;, were asked to rebuild the visualisation dashboard &lt;a href=&quot;https://ordina-jworks.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JWorks&lt;/a&gt; used in the &lt;a href=&quot;https://stairwayto.health/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;application&lt;/a&gt; they built as a result of the internal Stairway to Health project (you can find more information about that project &lt;a href=&quot;https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;). 
We decided to use &lt;a href=&quot;https://www.tableau.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tableau&lt;/a&gt;, a popular BI Visualisation tool we largely use at our clients.
We developed the dashboard working around some key questions while keeping the appearance of the dashboard in line with the dashboard JWorks developed.&lt;/p&gt;

&lt;p&gt;In the following section we will explain how the dashboard is currently set up and how to use it properly.
Next, we will go over the features we can add in future releases to allow the user to go even deeper in their analysis.&lt;/p&gt;

&lt;h1 id=&quot;dashboard-overview&quot;&gt;Dashboard overview&lt;/h1&gt;

&lt;p&gt;The dashboard is built to answer &lt;strong&gt;the following questions&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the percentage of people taking the stairs or elevator at Ordina &lt;strong&gt;today&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;How is the same metric on weekly, monthly or yearly basis? What is it in absolute numbers?&lt;/li&gt;
  &lt;li&gt;How does it evolve over time based on each day, week, month or year?&lt;/li&gt;
  &lt;li&gt;Are people taking the stairs more this week compared to last week?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The dashboard will try to provide answers to these questions using the following &lt;strong&gt;three main parts&lt;/strong&gt;.
We will go over these parts and highlight which question(s) they try to answer.&lt;/p&gt;

&lt;h2 id=&quot;part-one-the-title&quot;&gt;Part one: the Title&lt;/h2&gt;

&lt;p&gt;The title is what the user sees first and answers the first question.
By using the colors in the title, the dashboard shows the user - in a subtle way - what the colors in the next visuals represent.
There is also an option to select another day as illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartOne.gif&quot; alt=&quot;PartOne&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-two-the-horizontal-bar-comparison&quot;&gt;Part two: the horizontal bar comparison&lt;/h2&gt;

&lt;p&gt;In part two the user can find an answer to questions two and three.
The visual uses the selected day to show the division between people taking the stairs / elevator on a daily / weekly / monthly and yearly basis.
When the user hovers over the chart he can also see the evolution of people taking the stairs / elevator within that day / week / month / year.
Next to the chart, the total absolute number of all the observations measured is reported per period.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartTwo.gif&quot; alt=&quot;PartTwo&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-three-the-more-detailed-area-chart&quot;&gt;Part three: the more detailed area chart&lt;/h2&gt;

&lt;p&gt;The third part visualises how the division stairs / elevator is evolving over time expressed in daily, weekly, monthly or yearly basis.
This gives the user the possibility to look at trends and to see how the situation of today compares itself to past situations.&lt;/p&gt;

&lt;p&gt;In the title the user has the option to change the appearance of the data (absolute or shares).
The amount of periods shown (starting from the most recent period) can also be changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeOne.gif&quot; alt=&quot;PartThreeOne&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the user hovers over the chart the same horizontal bar comparison can be seen. 
Comparisons can be made with the period selected above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeTwo.gif&quot; alt=&quot;PartThreeTwo&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last feature to discuss here is how the user can change which period the chart is showing.
This can be done by clicking the chart above.
When you click on the day bar on the top chart the bottom chart is expressed on a day level.
This also applies to the other period bases in the chart.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeThree.gif&quot; alt=&quot;PartThreeThree&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-can-we-do-next&quot;&gt;What can we do next?&lt;/h1&gt;

&lt;p&gt;While this dashboard already gives an answer to the most important questions and gives the user the possibility to explore the data over time, there are still some extra things that can be developed.&lt;/p&gt;

&lt;p&gt;The dashboard is currently built within a Tableau workbook which is using the data of the &lt;a href=&quot;https://www.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB&lt;/a&gt; database JWorks set up as an extract.
This means we don’t have a live connection to the actual database JWorks has in their app.
This brings us to the first thing we can still explore: &lt;strong&gt;deployment&lt;/strong&gt;.
In order to integrate the dashboard in the original application, we could publish the dashboard on the &lt;a href=&quot;https://www.tableau.com/trial/tableau-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tableau server&lt;/a&gt; of Ordina which is running on &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft Azure&lt;/a&gt;.
Running this instance is not free so when taking a decision we should also take the user relevance in consideration: does the user really need to have a live connection to the data or does a nightly update cover the load?&lt;/p&gt;

&lt;p&gt;Secondly we can still do a lot on the &lt;strong&gt;analysis part&lt;/strong&gt;. What are the reasons why some patterns in the data exist? Do people take the stairs less when it is hot outside?
JWorks recently tracked on which floor the observation is measured, allowing us to look into difference by floor. Do people take the elevator more when they need to go from floor 1 to floor 3?&lt;/p&gt;

&lt;p&gt;We will keep you posted on further progress related to Stairway to Health. Thank you for reading and don’t forget: always take the stairs!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Gert-Jan&quot;, &quot;last_name&quot;=&gt;&quot;Schokkaert&quot;, &quot;linkedin&quot;=&gt;&quot;gert-jan-schokkaert-b87961b4&quot;, &quot;permalink&quot;=&gt;&quot;/author/gert-jan-schokkaert/&quot;, &quot;avatar&quot;=&gt;&quot;gert-jan-schokkaert.jpg&quot;, &quot;title&quot;=&gt;&quot;Data Visualisation Consultant&quot;, &quot;email&quot;=&gt;&quot;gert-jan.schokkaert@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Gert-Jan Schokkaert works as a Data Visualisation Consultant at Ordina Belgium. In his job he likes to build visualisations that helps the end user find relevant insights as easy as possible. He likes to work closely with the client to find the optimal solution that really makes the difference.&quot;}</name><email>gert-jan.schokkaert@ordina.be</email></author><category term="Development" /><category term="Tableau" /><category term="Visualisation" /><category term="Dashboard" /><category term="Internet of Things" /><category term="IoT" /><category term="LoRa" /><category term="NoSQL" /><category term="MongoDB" /><summary type="html">VisionWorks meets JWorks: StairwayToHealth We, from VisionWorks, were asked to rebuild the visualisation dashboard JWorks used in the application they built as a result of the internal Stairway to Health project (you can find more information about that project here). We decided to use Tableau, a popular BI Visualisation tool we largely use at our clients. We developed the dashboard working around some key questions while keeping the appearance of the dashboard in line with the dashboard JWorks developed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-16-stairway-to-health/stairway-to-health.png" /></entry><entry><title type="html">10 Cool AI/ML Examples</title><link href="https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples.html" rel="alternate" type="text/html" title="10 Cool AI/ML Examples" /><published>2018-12-10T00:00:00+00:00</published><updated>2018-12-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples</id><content type="html" xml:base="https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-cool-examples&quot;&gt;10 Cool examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;To end the year on a lighter more inspirational note we’ll go into 10 cool examples achieved with artificial intelligence.
These are all short videos with some additional information, most of these already have or will soon have an impact on our lives one way or another.&lt;/p&gt;

&lt;p&gt;The 10 examples can be divided in to three categories:&lt;/p&gt;

&lt;h3 id=&quot;how-the-models-work-and-perceive-the-world&quot;&gt;How the models work and perceive the world&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-1---how-neural-networks-see-the-world&quot;&gt;How neural networks see the world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-2---attack-on-human-vision-system&quot;&gt;Attack on human vision system&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;audiovisual-models-for-rendering-photography-and-impersonation&quot;&gt;Audiovisual models for rendering, photography and impersonation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-3---style-transfer-for-videos&quot;&gt;Style transfer for videos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-4---amazing-night-time-photographs&quot;&gt;Amazing night time photographs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-5---nvidia-AI-based-image-restoration&quot;&gt;Nvidia AI based image restoration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-6---noise-reduction-for-path-traced-GI&quot;&gt;Noise reduction for path traced GI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-7---isolate-speech-signals&quot;&gt;Isolate speech signals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-8---impersonate-anyone&quot;&gt;Impersonate anyone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;models-used-for-and-helped-by-gaming&quot;&gt;Models used for and helped by gaming&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-9---deepmind-becomes-superhuman-in-quake-3&quot;&gt;Deepmind becomes superhuman in quake 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-10---using-games-for-deep-learning-research&quot;&gt;Using games for deep learning research&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For now, there is still no need to fear Skynet becoming a reality.
While progress in the artificial intelligence world proceeds at a staggering pace, we are no where near having a general ‘super’ AI.
This however does not mean precautions do not need to be taken to prevent this from happening in the long run.
Some people, like Elon Musk, are very vocal about this and question if we should even pursue the goal to create a ‘super’ AI.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-12-10-AI10EX/intro.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-cool-examples&quot;&gt;10 Cool examples&lt;/h2&gt;

&lt;p&gt;Below are the ten selected examples we think you should see!
In the resources section underneath all of them you can find more useful resources to use and watch about AI/ML.&lt;/p&gt;

&lt;h3 id=&quot;example-1---how-neural-networks-see-the-world&quot;&gt;Example 1 - How neural networks see the world&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/1zvohULpe_0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Understanding a neural network is difficult, we don’t actually know what is happening inside of it.
We need ways of visualizing and understanding what happens inside to help debug and improve these networks.
For convolutional neural networks this helps us see what the network sees and how it identifies and uses parts of the input to get to the desired output.&lt;/p&gt;

&lt;h3 id=&quot;example-2---attack-on-human-vision-system&quot;&gt;Example 2 - Attack on human vision system&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/AbxPbfODGcs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Not only artificial neural networks are vulnerable to attacks to fool them.
Our very own brain, a neural network as well, is also able to be tricked by some of these techniques.
This video shows how such an attack works.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/SA4YEAWVpbk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This video shows how neural networks can be fooled by changes to the input as small as a single pixel!
It shows that caution needs to be taken in neural network based image recognition because a sufficiently witty/crafty attacker could fool the system by employing such an attack.&lt;/p&gt;

&lt;h3 id=&quot;example-3---style-transfer-for-videos&quot;&gt;Example 3 - Style transfer for videos&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Uxax5EKg0zA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Style transfer is when the style of a given input image is transferred to a secondary input image while maintaining the content of that image but with the style of the first input.
This gives you the option to apply the style of certain great works of art to regular images or even works with a totally different style.
In this video the technique is applied to video content, but it is not just as simple as running the earlier technique on each frame of the video since it does not provide a result that is temporally coherent.
The video is styled based on a given input and produces quite amazing results.&lt;/p&gt;

&lt;h3 id=&quot;example-4---amazing-night-time-photographs&quot;&gt;Example 4 - Amazing night time photographs&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bcZFQ3f26pA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Very noisy night time images might soon be a thing of the past.
The technique in this video can turn unusably noisy photos into perfectly viewable photos.
Something like this has been &lt;a href=&quot;https://www.theverge.com/2018/10/25/18021944/google-night-sight-pixel-3-camera-samples&quot;&gt;implemented in the google pixel phones&lt;/a&gt; recently.
In a few years all cameras will have a mode like this implemented making unusable night shots a thing of the past!&lt;/p&gt;

&lt;h3 id=&quot;example-5---nvidia-ai-based-image-restoration&quot;&gt;Example 5 - Nvidia AI based image restoration&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/P0fMwA3X5KI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Like the example above this is about denoising and is similar yet different.
This AI has been trained without ever having been shown what noise is, so no before vs after comparison.
It can remove noise from images, restore images that are almost only visible noise and even remove lots of text from a given image.
This technique will make cleaning up images much easier and allow us to preserve and restore imagery that might otherwise be lost or unusable!&lt;/p&gt;

&lt;h3 id=&quot;example-6---noise-reduction-for-path-traced-gi&quot;&gt;Example 6 - Noise reduction for path traced GI&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/HSmm_vEVs10&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This video shows that denoising techniques can have other great benefits in the visual/gaming industry.
Path traced global illumination (casting light in a 3D scene to determine lighting from a global source like the sun) is a very resource intensive task.
Current solutions use all sorts of tricks to mimic this but they are not the real deal.
This technique allows for path traced GI with a very low sample count and denoises the output whilst being temporally stable.
Something like the &lt;a href=&quot;https://www.youtube.com/watch?v=Ms7d-3Dprio&quot;&gt;new cards from Nvidia&lt;/a&gt; are now capable of!&lt;/p&gt;

&lt;h3 id=&quot;example-7---isolate-speech-signals&quot;&gt;Example 7 - Isolate speech signals&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/zL6ltnSKf9k&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Having an audio or video file with multiple people speaking at once or when there is a lot of background noise can be annoying for various reasons.
It makes it harder to understand any of the speaking parties.
This technique allows each speaker’s audio to be isolated and listened to without hearing the other sources of interference.
It is helpful to clean up conversations or remove background noise.&lt;/p&gt;

&lt;h3 id=&quot;example-8---impersonate-anyone&quot;&gt;Example 8 - Impersonate anyone&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/EQX1wsL2TSs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Soon you will not be able to tell that what you see is actually what happened.
This advanced technique improves on older versions, and allows you to transfer your facial and torso movements onto a target.
Techniques like this make it clear that fake news and fake sources of media will become an even bigger problem in the future as this technology becomes even better.
It might not be such a bad idea to invest in that blockchain backed media repository after all so the validity of media files can be tracked…&lt;/p&gt;

&lt;h3 id=&quot;example-9---deepmind-becomes-superhuman-in-quake-3&quot;&gt;Example 9 - Deepmind becomes superhuman in quake 3&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/MvFABFWPBrw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;In games you normally play against the AI.
These AI’s are mostly cheaters though, they know more because they are fed insider information from the game itself.
The AI’s in this video are actual players that only get the video output of the game and learn to play accordingly.
This in the long run will allow games to have decent real AI in-game.
Other sectors can also benefit from this as it can be applied to different fields where complex behavior with tactics and long term planning is required.&lt;/p&gt;

&lt;h3 id=&quot;example-10---using-games-for-deep-learning-research&quot;&gt;Example 10 - Using games for deep learning research&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/QkqNzrsaxYc&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Self driving cars are all the rage these days.
Getting cars to drive themselves is an immensely complex task, requiring truly vast amounts of correctly classified data in a dataset.
Classifying this data is a very time consuming process.
This technique can use games like GTAV to create a dataset with imagery from the game.
The game already knows what all the types of objects are in the scene, so classification can be simplified and automated.
It also provides an easy way to simulate hard to recreate situations in real life.
Time of day and scene composition can be easily changed which results in a vastly more extensive dataset.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;A very good video to watch is &lt;a href=&quot;https://www.youtube.com/watch?v=R9OHn5ZF4Uo&quot;&gt;How machines learn&lt;/a&gt; by CGP Gray.
It generally explains how machine learning works and what some of the implied dangers are.&lt;/p&gt;

&lt;p&gt;All the videos used in this blogpost are from the the &lt;a href=&quot;https://www.youtube.com/user/keeroyz/videos&quot;&gt;Two minute papers&lt;/a&gt; YouTube channel.
This channel has short videos that showcase some scientific research in a visual and compelling way whilst not going too technical but still providing all the technical resources for those who want it.&lt;/p&gt;

&lt;p&gt;Lastly is the &lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&amp;amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&quot;&gt;playlist about neural networks&lt;/a&gt; by 3Blue1Brown.
It goes into how neural networks work and is very visual which helps greatly with understanding the subject matter.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=R9OHn5ZF4Uo&quot;&gt;How machines learn - CGP Gray&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/keeroyz/videos&quot;&gt;Two minute papers youtube channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&amp;amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&quot;&gt;Neural networks playlist - 3blue1brown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these videos and the accompanying channels on YouTube are from amazing content creators, all rights for the content goes to them.
Do like I do and subscribe to these awesome channels to support them!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his roll as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT, Machine learning" /><category term="internet of things" /><category term="iot" /><category term="AI" /><category term="ML" /><category term="DL" /><category term="Example" /><category term="neural networks" /><category term="deep learning" /><category term="machine learning" /><category term="artificial intelligence" /><category term="two minute papers" /><category term="2 minute papers" /><category term="intelligence" /><category term="robotics" /><category term="self driving cars" /><category term="automation" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-12-10-AI10EX/banner.jpg" /></entry><entry><title type="html">Transactions in MongoDB 4.0</title><link href="https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions.html" rel="alternate" type="text/html" title="Transactions in MongoDB 4.0" /><published>2018-12-06T00:00:00+00:00</published><updated>2018-12-06T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Relational-vs.-document-database&quot;&gt;Relational vs. document database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-to-use-transactions&quot;&gt;When to use transactions?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-details&quot;&gt;Technical details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical&quot;&gt;Practical&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#best-practices&quot;&gt;Best Practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongodbeurope2018.sched.com/event/FmAR/how-and-when-to-use-multi-document-distributed-transactions&quot;&gt;How and When to Use Multi-Document Distributed Transactions, Aly Cabral&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongodbeurope2018.sched.com/event/FmAW/mongodb-building-a-new-transactional-model&quot;&gt;MongoDB: Building a New Transactional Model, Keith Bostic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sessions I was looking forward to the most at MongoDB Europe 2018 were the two sessions about multi-document transactions, the most talked about feature of the MongoDB 4.0 release.
In the morning I attended a session by Aly Cabral which was very practically oriented.
In the afternoon there was a more esoteric yet very interesting session by Keith Bostic who provided some insight into the inner workings of the WiredTiger storage engine and the difficulties the MongoDB team had to overcome to implement the new transaction model.&lt;/p&gt;

&lt;p&gt;To give some background, as a longtime Oracle DBA, I always found it odd that a database would lack what I had always considered a crucial database feature, so I was naturally curious to know more about MongoDB’s implementation and how it would compare to a typical relational database.&lt;/p&gt;

&lt;p&gt;In this post we will explore how multi-document transactions are implemented in MongoDB, how the implementation is similar to a relational database system and where they differ.&lt;/p&gt;

&lt;h2 id=&quot;relational-vs-document-database&quot;&gt;Relational vs. document database&lt;/h2&gt;
&lt;p&gt;As I learned through working with MongoDB the past two years, there is less need for multi-document transactions in document databases.
For the majority of use cases single document transactions suffice.
This is because the data model you use with a document database is quite different from what you would use with an RDBMS.&lt;/p&gt;

&lt;p&gt;In a relational database system you typically normalize data in order to avoid duplication.
A single &lt;code class=&quot;highlighter-rouge&quot;&gt;entity&lt;/code&gt; more often than not has data spanning multiple tables, so when you perform updates to a single entity you have to update multiple rows in multiple tables concurrently, which necessitates transactions.&lt;/p&gt;

&lt;p&gt;In a document database like MongoDB though, you typically embed all data that represents one entity within a single document, in which case updates to that entity are also limited to a single document.
You can see that there’s less need for transactions.&lt;/p&gt;

&lt;p&gt;In essence, the RDBMS approach prioritizes disk space efficiency above everything else whereas the MongoDB approach prioritizes ease of development and simplicity.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are some scenarios where you may want to use multi-document transactions in a document database.
Let’s see what some of those scenarios might be…&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-transactions&quot;&gt;When to use transactions?&lt;/h2&gt;

&lt;h3 id=&quot;relationships&quot;&gt;Relationships&lt;/h3&gt;
&lt;p&gt;In the case that your datamodel does have relationships between separate entitites, you may want to use transactions to update both of them at the same time.&lt;/p&gt;

&lt;p&gt;An example of this could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt; that the customer owns.
They are distinct entities, but there is a relationship between them in the form of ownership information.
If you update the ownership information on the &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; document, you probably need to update it on the &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt; document (or documents) as well.&lt;/p&gt;

&lt;p&gt;The only way to do this with guaranteed consistency is through a multi-document transaction.&lt;/p&gt;

&lt;h3 id=&quot;event-processing&quot;&gt;Event processing&lt;/h3&gt;
&lt;p&gt;Another use case of transactions is event processing.
When a certain event occurs, it may need to atomically create, update or delete several entities at the same time.&lt;/p&gt;

&lt;p&gt;The example that was given in Aly’s presentation was the creation or invalidation of a customer’s account, which would require an update to all of the customer’s entities.&lt;/p&gt;

&lt;h3 id=&quot;event-logging-or-auditing&quot;&gt;Event logging or auditing&lt;/h3&gt;
&lt;p&gt;Consider the case where, for logging or auditing purposes, you want to create an event trail of all changes that happen to a certain document or collection and you want to store this event trail in another collection.&lt;/p&gt;

&lt;p&gt;The event trail should be representative of what really occurred, so events that never occurred should not be logged nor should events that actually happened be lost.&lt;/p&gt;

&lt;p&gt;The only way to achieve this is to put the update and the logging of the update inside the same transaction.&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical details&lt;/h2&gt;
&lt;p&gt;Now let’s explore some of the more technical features of multi-document transactions.&lt;/p&gt;

&lt;h3 id=&quot;atomicity&quot;&gt;Atomicity&lt;/h3&gt;
&lt;p&gt;This is pretty straightforward.
In MongoDB transactions are atomic, which means that execution of multiple changes inside a transaction is an all-or-nothing deal: either all updates get committed, or none.&lt;/p&gt;

&lt;h3 id=&quot;snapshot-isolation&quot;&gt;Snapshot isolation&lt;/h3&gt;
&lt;p&gt;When you start a transaction, MongoDB creates a snapshot of the current state of the database.
During your transaction you will not see any updates made by other sessions.
You are &lt;em&gt;isolated&lt;/em&gt; from them.
This guarantees that throughout the transaction your session will see one consistent version of the data.&lt;/p&gt;

&lt;p&gt;Internally MongoDB uses an update structure inside the WiredTiger cache to maintain this consistent view on the database.
This structure grows as writes occur to the database and is only evicted from the database once the transaction is committed or aborted.
The implication of this is that long running transactions or a high write volume can put pressure on the cache.
It’s therefore recommended to keep the duration of any transaction as low as possible.&lt;/p&gt;

&lt;p&gt;To minimize cache pressure, you can use the server parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;transactionLifeTimeLimitSeconds&lt;/code&gt; to set a sensible maximum transaction time.
If a transaction runs for a longer time than this value, it will be aborted.
The default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;transactionLifeTimeLimitSeconds&lt;/code&gt; is 60 seconds.&lt;/p&gt;

&lt;p&gt;A sidenote for those DBAs or developers who are already familiar with Oracle: the update structure in the WiredTiger cache is similar to how rollback segments and undo tablespaces work in Oracle.
The differences are that the snapshot information is kept entirely in memory instead of on disk, and that you don’t have to actively manage it by allocating a tablespace for it.&lt;/p&gt;

&lt;h3 id=&quot;read-your-own-writes&quot;&gt;Read your own writes&lt;/h3&gt;
&lt;p&gt;MongoDB guarantees that you can read any writes you make inside your transaction, even before they are committed.
It also guarantees that no other session can read your writes before they are committed.&lt;/p&gt;

&lt;p&gt;Again, these writes are handled by the snapshot structure inside the WiredTiger cache.&lt;/p&gt;

&lt;h3 id=&quot;write-locks&quot;&gt;Write locks&lt;/h3&gt;
&lt;p&gt;When two sessions are trying to update the same document at the same time, you get a write conflict.
In MongoDB this conflict is handled by write locks.
There are basically two conflict scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Before a &lt;em&gt;transaction&lt;/em&gt; updates a document, it will try to acquire a write lock.
If the document is already locked the transaction will fail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Before a &lt;em&gt;non-transactional operation&lt;/em&gt; tries to update a document, it will try to acquire a write lock.
If the document is already locked, the operation will back off and retry until &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/#cursor.maxTimeMS&quot;&gt;MaxTimeMS&lt;/a&gt; is reached.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that reads never block writes.
MongoDB is also smart enough to recognize a so called no-op write: if the document you are trying to update was not changed by the update, it will not attempt to acquire a write lock.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Currently you can only use multi-document transactions with replica sets.
Sharded clusters are not supported yet, though this feature is planned for a future release (4.1 perhaps?).&lt;/p&gt;

&lt;p&gt;Due to the WiredTiger cache pressure, long running transactions can be problematic. 
The MongoDB developers are working on improving this for future releases and plan to support transactions running for several hours or even days.&lt;/p&gt;

&lt;h2 id=&quot;practical&quot;&gt;Practical&lt;/h2&gt;
&lt;p&gt;As for semantics, the MongoDB developers thankfully chose not to reinvent the wheel.
Using transactions is similar to what most developers are used to on relational database systems.
The precise syntax varies per programming language, so you will have to do some RTFM to learn it, but it always comes down to the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open session&lt;/li&gt;
  &lt;li&gt;Start transaction&lt;/li&gt;
  &lt;li&gt;Update multiple documents&lt;/li&gt;
  &lt;li&gt;Commit or abort transaction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, in Mongo Shell syntax a transaction typically looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMongo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mydb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coll1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mydb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coll2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One important thing to note here is that once we open the session on the first line, every subsequent action must use the session variable (“mySession” in this case), otherwise they will be simple update operations not belonging to the transaction.&lt;/p&gt;

&lt;h2 id=&quot;best-practices&quot;&gt;Best practices&lt;/h2&gt;
&lt;p&gt;Finally, here are some best practices we learned in the session:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t change your data modeling rules because of transactions.
For example: don’t start normalizing data&lt;/li&gt;
  &lt;li&gt;Transactions shouldn’t be the most common operation.
If they are, you’re doing it wrong.&lt;/li&gt;
  &lt;li&gt;Pass session information to all statements inside your transaction.&lt;/li&gt;
  &lt;li&gt;Implement retry logic.
MongoDB returns errorcodes that tell you if a transaction has failed and if it failed with a retryable error or not.&lt;/li&gt;
  &lt;li&gt;To reduce WiredTiger cache pressure, keep transactions short and don’t leave them open, even read only transactions.&lt;/li&gt;
  &lt;li&gt;Take into account that long running DDL operations (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;createIndex()&lt;/code&gt; ) block transactions and vice versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Multi-document transactions are a useful and easy to use addition to MongoDB.
They make MongoDB a better general purpose database and a stronger alternative for applications where you would traditionally have to choose a relational database.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jan&quot;, &quot;last_name&quot;=&gt;&quot;Van der Veken&quot;, &quot;github&quot;=&gt;&quot;jvanderveken-ordina&quot;, &quot;permalink&quot;=&gt;&quot;/author/jan-van-der-veken/&quot;, &quot;avatar&quot;=&gt;&quot;no-image.jpg&quot;, &quot;title&quot;=&gt;&quot;Database Consultant&quot;, &quot;email&quot;=&gt;&quot;jan.vanderveken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jan is a database specialist with many years of experience as system engineer and Oracle DBA, and who is now focusing on cloud and nosql technologies such as MongoDB and the Elastic stack.&quot;}</name><email>jan.vanderveken@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="MongoDB" /><category term="DBA" /><category term="Data" /><category term="Transactions" /><category term="ACID" /><category term="Conference" /><summary type="html">Table of Contents Introduction Relational vs. document database When to use transactions? Technical details Practical Best Practices Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-mongodb-europe-2018/mongodb-acid-logo-thumb.png" /></entry><entry><title type="html">Mocking server sent events: Development and CI</title><link href="https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci.html" rel="alternate" type="text/html" title="Mocking server sent events: Development and CI" /><published>2018-11-21T00:00:00+00:00</published><updated>2018-11-21T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-server-sent-events&quot;&gt;What are Server-Sent Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nodejs&quot;&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#angular&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I came across this topic during some consultancy a few months ago, and again a few weeks ago.
As I stated in my previous blogpost about mocking a backend (&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/thisandagain/sentiment/blob/master/README.md&quot;&gt;Node-RED: Development and CI&lt;/a&gt;), we don’t live in an ideal world.
Backends are not always finished before frontend development starts and personally I hate it when I have to include mock data into my frontend code.
And again, even if that backend feature is finished and deployed somewhere so we don’t need to run it locally, sometimes you have less control over messages sent from the backend that need to trigger events in the frontend.&lt;/p&gt;

&lt;p&gt;For both of those projects, a use case arose where the system was in need of messages sent from the backend to the frontend, based on purely frontend and backend events.
On older technologies and systems, these problems were solved with a polling mechanism.
Every few seconds, the frontend is querying the backend for updates.
The first technology that comes to mind when reading the specifications are &lt;code class=&quot;highlighter-rouge&quot;&gt;Websockets&lt;/code&gt;.
A websocket is a bidirectional TCP connection opened between 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;entities&lt;/code&gt;, in our case a frontend and our backend.
Messages can get sent by a client to the backend, or the other way around.
For more information about websockets a simple Google search will overload you with information and frameworks for Java, Javascript and others.
For Javascript, take a look at  &lt;a target=&quot;_blank&quot; href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our use case, we were only in need of unidirectional streaming, &lt;code class=&quot;highlighter-rouge&quot;&gt;Server-Sent Events&lt;/code&gt; or in short &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt;.
Again, the goal was not to implement the backend, but to come up with an easy to implement mock that can be used during development by our frontend developers, and could get reused in testing the frontend against this mock backend.
Ideally, this demo code could get reused by our backend developers as an example.
Although Node-RED has add-ons for SSE, I decided to start writing one myself.&lt;/p&gt;

&lt;p&gt;Note: In real systems, multiple clients can connect to the backend and open a channel.&lt;/p&gt;

&lt;h1 id=&quot;what-are-server-sent-events&quot;&gt;What are Server-Sent Events&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Server-Sent Events is a technology for enabling unidirectional messaging over HTTP. The EventSource API is standardized and part of HTML5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our use case, the backend should be able to send messages to its clients at any time.
These messages can get triggered by client-side events (over REST) or even triggers from external resources and queues or database changes.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/sse-setup.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To make SSE work, we need to keep some things in mind.
The logical flow behind it is pretty straight forward.
A client requests a channel by &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;-ting a resource over REST.
In Javascript you can make use of the &lt;a target=&quot;_blank&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventSource API&lt;/code&gt;&lt;/a&gt;.
A backend should respond with some specific headers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Type -&amp;gt; ‘text/event-stream’&lt;/li&gt;
  &lt;li&gt;Cache-Control -&amp;gt; ‘no-cache’&lt;/li&gt;
  &lt;li&gt;Connection -&amp;gt; ‘keep-alive’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, the connection between the client and backend is kept open.
At any time, the backend can send a message (event) through this tunnel to the client.
We will go a bit deeper into each section later.&lt;/p&gt;

&lt;p&gt;You can read more about the specs on &lt;a target=&quot;_blank&quot; href=&quot;https://www.w3schools.com/html/html5_serversentevents.asp&quot;&gt;W3schools&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.w3.org/TR/2009/WD-eventsource-20090421/#processing-model&quot;&gt;W3&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;

&lt;p&gt;Around a year ago, &lt;a href=&quot;https://ordina-jworks.github.io/author/dieter-hubau/&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt; wrote a &lt;a target=&quot;_blank&quot; href=&quot;https://ordina-jworks.github.io/spring/2017/10/04/Spring-Cloud-Stream-Rick-And-Morty-Adventure.html&quot;&gt;blogpost&lt;/a&gt; about Spring Cloud Stream and ‘a’ microverse of Rick and Morty. He implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.servlet.mvc.method.annotation.SseEmitter&lt;/code&gt;.
I figured, that’s a place to start.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;p&gt;Start by generating a Spring Boot application with some dependencies.
Navigate to &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot;&gt;Spring initializr&lt;/a&gt;.
Add data-repository, flyway and h2.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.flywaydb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;flyway-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added the Flyway and H2 dependencies because I’ve generated test data online (sql).
I’ve created an easy model which represents a message (notification), and maps to a database table, which can be sent to the frontend.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;notification&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve created a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;CrudRepository&amp;lt;Notification, Long&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a basic service:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntityNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most logic is implemented in the Controller:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/notification&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedDelay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The logic behind the code is again pretty straightforward.
Querying this resource will respond with the correct headers (Content-Type -&amp;gt; MediaType.TEXT_EVENT_STREAM_VALUE == ‘text/event-stream’) en open an &lt;code class=&quot;highlighter-rouge&quot;&gt;event stream&lt;/code&gt;.
This resource will create an &lt;code class=&quot;highlighter-rouge&quot;&gt;SseEmitter&lt;/code&gt; for each request and add that &lt;code class=&quot;highlighter-rouge&quot;&gt;emitter&lt;/code&gt; to a list.
When an event needs to be sent out to the &lt;code class=&quot;highlighter-rouge&quot;&gt;clients&lt;/code&gt;, you can then just loop over that list of emitters and send that event.
If you loop at the example code, you can see that the emitter itself has some callbacks (completion, error, timeout, …).
You can use those function for implementing a specific error strategy, monitoring and logging.&lt;/p&gt;

&lt;p&gt;For development purposes, I’ve added a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt;-function that will fire every two seconds and send a random notification from the database through each emitter.&lt;/p&gt;

&lt;p&gt;For one of my clients, it wasn’t possible to work with Spring.
A Google search resulted in a lot of other solutions for Java implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;sse&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/3.5.1.Final/userguide/html/JAX-RS_2.1_additions.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SseEventSink, SseEventSource&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.huihoo.com/jersey/2.13/sse.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SseFeature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/jetty/javadoc/9.4.8.v20171121/org/eclipse/jetty/servlets/EventSourceServlet.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventSourceServlet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nodejs&quot;&gt;Nodejs&lt;/h1&gt;

&lt;p&gt;Although the Java implementation wasn’t finished yet, another problem arose.
Not all of our frontend developers where happy with this approach.
They still needed to run a simple Java backend, even if it was a simple Docker container.
So I switched to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs&lt;/code&gt; implementation using &lt;a href=&quot;https://expressjs.com/&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Express&lt;/code&gt;&lt;/a&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt;.
Express doesn’t come with an &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt;-feature out of the box, but there are &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; you can use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sse-express&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sse-express&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-sse&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express-sse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But instead of using a library, I’ve implemented my own &lt;code class=&quot;highlighter-rouge&quot;&gt;middleware&lt;/code&gt;.
Writing custom middleware is very easy and well documented in the &lt;a href=&quot;https://expressjs.com/en/guide/writing-middleware.html&quot; target=&quot;_blank&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;sse-middleware.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setNoDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setKeepAlive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/event-stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Cache-Control'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'no-cache'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'keep-alive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseOnClose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onClose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned before, to make SSE work, you need to set the right &lt;code class=&quot;highlighter-rouge&quot;&gt;headers&lt;/code&gt; (cfr. MediaType.TEXT_EVENT_STREAM_VALUE).
I’ve implemented this in the setup of the custom middleware.
Besides this initialization, I’ve also implemented an &lt;code class=&quot;highlighter-rouge&quot;&gt;sseSend&lt;/code&gt;-function, for sending messages over the channel, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;onClose&lt;/code&gt;-callback that will fire whenever the connection closes.&lt;/p&gt;

&lt;p&gt;Instead of using an in-memory database, like I did in the Java part of this post, I decided to go with a basic Javascript file that I can switch later to a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file with test data.&lt;/p&gt;

&lt;p&gt;database.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testmessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testmessag2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'contact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123456'&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'contact123456@gmail.com'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
             &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123456'&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;tel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+3234457645'&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, I added different kinds of data lists to my mock data.
Depending on specific parameters, you can then choose to send back a different type of event.&lt;/p&gt;

&lt;p&gt;Now, let us take a look at the server implementation.&lt;/p&gt;

&lt;p&gt;server.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./sse-middleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./database'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DATA_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createMockEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to implement yourself&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// console.log('Emitting to ' + key);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New subscriber request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if you want to send feedback for opening connection&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// res.sendStatus(200);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseOnClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// implement your own strategy for removing a channel&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Listening on port 8080...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first lines, I just import my mock database and the middleware.
I then initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;-app and tell it to use the middleware, &lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(sse_middleware);&lt;/code&gt;.
When the server is started, the app also starts a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;interval&lt;/code&gt; that will produce a random (or fixed order for testing purposes) event each two seconds.&lt;/p&gt;

&lt;p&gt;To start this service:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To test it, you can just open your browser and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/stream&lt;/code&gt;.
You should be able to see events appearing now.
However, there is a catch, and it took me some time to figure out what was going wrong.
In your browser you can see the content of the events, but if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/stream&lt;/code&gt; you won’t see anything.
However, if you would start the Java app, you’ll see the events appearing in your browser, and during your &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;-session.
The reason for this, lays in the specs of Server-Sent Events.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/event-spec.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, a message expects a data field.
Adjusting the &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt;-method in the middleware will fix this problem:
&lt;code class=&quot;highlighter-rouge&quot;&gt;res.write('data:' + JSON.stringify(data) + &quot;\n\n&quot;));&lt;/code&gt;
You can also add the other fields, just separate them with &lt;code class=&quot;highlighter-rouge&quot;&gt;\n\n&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;For development purposes, it isn’t a bad idea to add a start en stop action for managing the interval.
Just add the following to your server:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Starting stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/stop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stopping stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you can start and stop the stream by triggering a &lt;code class=&quot;highlighter-rouge&quot;&gt;REST-endpoint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/start&lt;/code&gt; to start the stream of events.`&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/stop&lt;/code&gt; to stop the stream of events.`&lt;/p&gt;

&lt;h1 id=&quot;angular&quot;&gt;Angular&lt;/h1&gt;

&lt;h2 id=&quot;frontend-sse&quot;&gt;Frontend SSE&lt;/h2&gt;

&lt;p&gt;The frontend is an Angular 7 app, created with the angular-cli.
Because of reusability the server-sent event receiver feature is bundled in a separate module that can get moved to a shared library later.
In the most simple implementation, you only need a service to handle the connection and forward events to other components.
In this service, you can make use of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&quot; target=&quot;_blank&quot;&gt;EventSource API&lt;/a&gt; of plain javascript.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/event-source.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The API comes with an easy constructor and 3 callbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EventSource.onerror&lt;/li&gt;
  &lt;li&gt;EventSource.onmessage&lt;/li&gt;
  &lt;li&gt;EventSource.onopen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sse.service.ts:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SseService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'api/stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// implement your own strategy for reconnection&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Open:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_handleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// e.g. dispatch to ngrx store&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; used is not mapping on the mock backend.
For local development and testing, this doesn’t matter.
Even if both paths would match, the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt; and backend can’t run both on the same port (http://localhost:8080 vs http://localhost:4200 (standard cli port for &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve&lt;/code&gt;)).
Requesting resource cross domain will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; issues. A proxy to the rescue!&lt;/p&gt;

&lt;h2 id=&quot;proxy&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;To overcome the &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; problems, angular-cli, the &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt;-command to be more precise, comes with an optional parameter to add a proxy configuration.
In our production ready setup, all calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; to the same (sub)domain as where the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt; is getting served, get routed to the REST-API.
Because we don’t want to add dev or test specific code in the app itself, we proxy the &lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; to our mock backend.&lt;/p&gt;

&lt;p&gt;Example given:&lt;/p&gt;

&lt;p&gt;proxy.config.json&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;/api/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;secure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;logLevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;changeOrigin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;pathRewrite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use this proxy, serve the app with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the logs, you can see the system is logging the routes in the console.&lt;/p&gt;

&lt;h2 id=&quot;frontend--backend&quot;&gt;Frontend + Backend&lt;/h2&gt;

&lt;p&gt;If you want to run the mock backend (Nodejs) along with the frontend, you need to be able to run concurrent tasks.
You can do this in a node environment using the &lt;code class=&quot;highlighter-rouge&quot;&gt;concurrently&lt;/code&gt;-package.
Just install it by running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm i --save-dev concurrently&lt;/code&gt;.
Add an entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;start:proxy&quot;: &quot;concurrently \&quot;ng serve --proxy-config proxy.config.json\&quot; \&quot;node path/to/your/server.js \&quot;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because they are both starting at the same time, it might happen your backend is not ready while your frontend starts connecting to the stream.
A good &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; strategy will help you overcome this problem, that can also happen in real life systems as well.&lt;/p&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h1&gt;

&lt;p&gt;As mentioned before, this whole approach should result in a mock that can be used for testing as well.
In one of our systems, we have a lot of different event types.
Some only need to show a notification on screen, while others need to refresh data in a cached object, or even change permissions of the logged in user.
To mock this behavior, you can just put all these events in an array and just loop over it.
You can even define different delays for each event if that is what you need.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&quot;https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html&quot; target=&quot;_blank&quot;&gt;my Node-RED setup&lt;/a&gt; from one of my previous posts you should give one of the add-ons a try, however, you can also run both mocks next to each other.
In most approaches, you don’t run the application itself thought the dev environment (&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve --proxy-config proxy.config.json&lt;/code&gt;).
You should run your packaged app like you would do in production.
In our case, we are running everything &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerized&lt;/code&gt;.
This means, we build our frontend application and wrap it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; image (tag it, and push it to our registry).
In a next stage, we run (deploy) an environment where we can run our tests against.
In this case we are also not going to use the proxy from our development setup.&lt;/p&gt;

&lt;p&gt;An easy setup would be using a docker-compose (e.g.):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nginx:mainline-alpine&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx/nginx.conf:/etc/nginx/nginx.conf:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-web-app&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;node-red&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodered/node-red-docker&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${userDirPath}/node-red:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${userDirPath}/data:/usr/src/node-red/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1880:1880&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;your-web-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry.your-domain.com/your-web-app:${TAG}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-web-app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9080:80&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9081:8080&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;selenium&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selenium-grid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selenium/standalone-chrome-debug&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4444:4444&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5900:5900&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/dev/shm:/dev/shm&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now need to include our own ss-mock backend into this compose.
You can do this by easily adding a plain Nodejs service, map your folder to your &lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt; and overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sse-service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sse-mock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${pathToYourServer}:/sse-mock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080:8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node /sse-mock/service.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to add the service to the links section of your nginx and to add the proxy rules in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /api/stream {
    proxy_pass http://sse-mock:8080/api/stream ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/sse-ci-setup.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned before, you could/should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/stop&lt;/code&gt; for the sse-mock.
In this setup, this means adding extra rules in your nginx config.
You want all your api calls to go to the other mock (Node-RED in this case) while proxying &lt;code class=&quot;highlighter-rouge&quot;&gt;/stream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/stop&lt;/code&gt; to your sse-mock.&lt;/p&gt;

&lt;p&gt;The advantage of implementing the start/stop functionality, is that you can tell your test framework to start the sse-mock events stream and then start watching the response in the UI.&lt;/p&gt;

&lt;p&gt;e.g. (protractor, jasmine):&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/api/start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// depending on the host/address&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’ve build your test data/setup in a specific order, you know what to expect and test for in the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Setting up Server-Sent Events is very easy.
It is a powerful tool for unidirectional streams to you clients.
The hardest part is defining a strategy for your connections and event type differentiation.
Setting up the &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; part is easy as well.
Although you can test a lot in your unit tests, implementing End 2 End testing, mock and real, is recommended.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="sse" /><category term="Spring" /><category term="Nodejs" /><category term="Angular" /><category term="Node-RED" /><category term="ci" /><category term="mock" /><summary type="html">Table of contents Intro What are Server-Sent Events Java Nodejs Angular Continuous Integration Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-21-sse-spring-node-dev-ci/sse-front.png" /></entry><entry><title type="html">MongoDB Europe 2018</title><link href="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html" rel="alternate" type="text/html" title="MongoDB Europe 2018" /><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html">&lt;blockquote&gt;
  &lt;p&gt;MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products.
This year the venue took place in Old Billingsgate Walk, London.
Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#atlas&quot;&gt;Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-university&quot;&gt;MongoDB University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#common-query-mistakes&quot;&gt;Common query mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stitch&quot;&gt;Stitch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#meet-the-experts&quot;&gt;Meet the experts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-charts&quot;&gt;MongoDB Charts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing&quot;&gt;Closing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;atlas&quot;&gt;Atlas&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Atlas for your Enterprise&lt;/a&gt;, Vladislava Stevanovic &amp;amp; Veronica Tudor)&lt;/p&gt;

&lt;p&gt;Atlas is the database as a service offering (DBaaS) by MongoDB itself.
You can run your MongoDB in the cloud with the cloud provider of your choice, secured by default and automatically backed up.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;It is very easy to get started since a free tier is provided for everyone and you can deploy with the cloud provider of your choice (Azure , GCP, AWS).
A cluster can be started for free in just a few clicks.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/create-mongodb-atlas-cluster.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Start your own cluster: &lt;a href=&quot;https://cloud.mongodb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://cloud.mongodb.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloud&quot;&gt;Cloud&lt;/h3&gt;
&lt;p&gt;MongoDB Atlas is a cross-platform database which you can run on Amazon Web Services, Google Cloud or Microsoft Azure. 
It provides you an availability map that shows you which users are served from where and what the expected latency is.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/global-clusters.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;
&lt;p&gt;When your database grows it is easy to scale up or out.
You can scale up by increasing the size of the instance on which your database runs.
Scaling out is done by the process of sharding.
Here we are storing data of the same collection across multiple smaller partitions so we can distribute these partitions over multiple machines and increase read-write performance.
This way you do not run into the limitations of a single server.&lt;/p&gt;

&lt;p&gt;To ensure that MongoDB stores data equally across shards you need the right strategy of choosing a partition key.&lt;/p&gt;

&lt;h3 id=&quot;high-availability&quot;&gt;High availability&lt;/h3&gt;
&lt;p&gt;When a primary node goes down, a new primary is chosen immediately by a system of voting.
All nodes vote on who should become the new primary. 
The node with the majority of votes becomes the new primary.
A general guideline is to have a replica set that consists of one primary node and at least two secondary nodes.
To ensure maximum uptime the procedure to recover from instance failures is completely automated.&lt;/p&gt;

&lt;h1 id=&quot;mongodb-university&quot;&gt;MongoDB University&lt;/h1&gt;

&lt;p&gt;With &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB University&lt;/a&gt;, Mongo has its own platform for online courses.
A lot of them are available for free.
You can pick out courses according to your needs or profession.
There are training tracks for Developers, DBA’s and everyone else…
The courses are ideal to get you started or to deepen your knowledge when you want to be more advanced.
If you want you can even get certified!
I speak from my own experience when I say that the University platform is great to work with, and the courses are very well taught.
Find all available resources here: &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://university.mongodb.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/h1&gt;

&lt;p&gt;Recently the aggregation pipeline builder was introduced in &lt;a href=&quot;https://www.mongodb.com/products/compass&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Compass&lt;/a&gt;.
This allows you to create an aggregation pipeline step by step and that makes it easy to debug the pipeline along the way.
Let’s see an example: &lt;br /&gt;
Suppose I have a collection which contains documents that represent a person, like this :
Here are two examples of elements in the collections:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d073&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Didi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Verhoft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1996&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d074&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A person has the fields lastName, firstName and birthYear (and of course for some people more info could be stored).
I want to build a pipeline with the following functionality:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to filter out all people that share my lastname “Van Hoof”&lt;/li&gt;
  &lt;li&gt;Then I want to count how many times these people also share the same firstname and birthyear&lt;/li&gt;
  &lt;li&gt;Next I want to group them by birthYear so that I can see how many people were named “Nick Van Hoof “ (my fullname) in 1992.&lt;/li&gt;
  &lt;li&gt;Finally, I want them sorted on year in ascending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filter all with last name  “Van Hoof” and group by lastName, firstName and year:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Group by year and sort in ascending order:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see from the images above, Compass will show all the intermediary results. 
With one push of a button you can generate a command line query or the translation to a programming language.
Compass tells me the full aggregate will look like :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                        &lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$birthYear&quot;&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;na&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
                      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;occurences&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                              &lt;span class=&quot;s2&quot;&gt;&quot;$push&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$count&quot;&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&quot;_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would have been a lot harder to write this query manually, without the pipeline builder.&lt;/p&gt;

&lt;h1 id=&quot;common-query-mistakes&quot;&gt;Common query mistakes&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tips And Tricks for Avoiding Common Query Pitfalls, Christian Kurze&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;key-takeaways-from-this-session&quot;&gt;Key takeaways from this session&lt;/h3&gt;

&lt;p&gt;Generally speaking, there are three major causes of query slowness:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blocking operations&lt;/li&gt;
  &lt;li&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator&lt;/li&gt;
  &lt;li&gt;Case insensitive searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not uncommon that a properly tuned query delivers a factor 1000 speed-up.
So it’s definitely worth investigating.&lt;/p&gt;

&lt;h3 id=&quot;problem-1-blocking-operations&quot;&gt;Problem 1: blocking operations&lt;/h3&gt;
&lt;p&gt;This happens when you use an operator that needs all the data before producing results, so results can’t be streamed.
The most common culprits are the aggregation operators such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$sort&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$bucket&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$facet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a compound index to support your query and make sure that the sort order in the index is the same as in your query.&lt;/li&gt;
  &lt;li&gt;Offload the query to a secondary member.&lt;/li&gt;
  &lt;li&gt;Work around the issue by using a precalculated count.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-2-and-is-fast-or-is-slow&quot;&gt;Problem 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; is fast, &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; is slow&lt;/h3&gt;
&lt;p&gt;Sometimes a query is fast when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; operator but slow when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use a compound index to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; queries.&lt;/li&gt;
  &lt;li&gt;Use separate single field indexes to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-3-case-insensitive-searches-are-slow&quot;&gt;Problem 3: case insensitive searches are slow!&lt;/h3&gt;
&lt;p&gt;It is much harder for MongoDB to perform case insensitive searches because it has to match all possible permutations of the search string. 
For example, if you do a case insensitive search for the string “ace”, it has to match “ace”,”Ace”,”aCe”,”ACe”, and so on…&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(3.4 and higher) Support the query with a case insensitive index.&lt;/li&gt;
  &lt;li&gt;Alternatively, store a toLower() copy of the string in another field and index and query that field instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general-tips-and-tricks&quot;&gt;General tips and tricks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create an index on an element you are interested in instead of scanning the whole table.&lt;/li&gt;
  &lt;li&gt;When you query on a combination of fields create a compound index for these fields and not separate indices on each field.&lt;/li&gt;
  &lt;li&gt;…but be careful with the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt;!&lt;/li&gt;
  &lt;li&gt;Build indices in the background instead of making it a blocking operation.&lt;/li&gt;
  &lt;li&gt;Do not index all fields as this will negatively impact write performance. 
Investigate what you really need!&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.explain()&lt;/code&gt; to analyze queries.&lt;/li&gt;
  &lt;li&gt;Ops Manager and Atlas have a &lt;a href=&quot;https://docs.atlas.mongodb.com/performance-advisor/&quot;&gt;Performance Advisor&lt;/a&gt; to help you identify problematic queries.&lt;/li&gt;
  &lt;li&gt;Train your people.&lt;/li&gt;
  &lt;li&gt;Work smarter, not harder!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;stitch&quot;&gt;Stitch&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAJ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ch-Ch-Ch-Ch-Changes: Taking Your MongoDB Stitch Application to the Next Level With Triggers, Andrew Morgan&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Write less code and build apps faster!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stitch is the ‘Serverless platform from MongoDB’, and it comes with a free tier to play around!
It provides a very easy way to create an application without having to write lots of code in a separate backend.
The functionalities of Stitch are provided through an SDK.
Currently there are SDK’s for JavaScript, React Native, IOS and Android.
There is even an Electric Imp Library for IoT devices.&lt;/p&gt;

&lt;p&gt;Stitch has four main services :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stitch QueryAnywhere&lt;/li&gt;
  &lt;li&gt;Stitch Functions&lt;/li&gt;
  &lt;li&gt;Stitch Triggers&lt;/li&gt;
  &lt;li&gt;Stitch Mobile Sync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stitch-queryanywhere&quot;&gt;Stitch QueryAnywhere&lt;/h3&gt;
&lt;p&gt;QueryAnywhere enables you to query the database directly instead of going through a REST api.
The benefit here is that as a client application you are not restricted to what a REST api would expose but you can use all the power of the MongoDB Query Language directly:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, all of this is secured with authentication and fine grained authorization based on the logged in user or the contents of the documents.&lt;/p&gt;

&lt;h3 id=&quot;stitch-functions&quot;&gt;Stitch Functions&lt;/h3&gt;
&lt;p&gt;You can write JavaScript functions in the Stitch serverless platform and combine database calls with cloud services.
For example, send a message with Twilio to all users:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongodb-atlas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilioNumber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Then call callFunction from the client side&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stitchClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sendMessage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello from Stitch!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stitch-triggers&quot;&gt;Stitch Triggers&lt;/h3&gt;
&lt;p&gt;MongoDB does not provide triggers, as known in the RDBMS world.
With MongoDB change streams you can build your own triggers in your application.
This comes with the cost of handling the complexity of change streams yourself. 
For example: how to resume the change stream after a network issue?
So that’s why there is Stitch Triggers to make this easier.&lt;/p&gt;

&lt;p&gt;Stitch triggers combines change streams with Stitch Functions.
So when the inventory of an article goes up, Stitch Trigger calls a function that uses Twilio to send a text message to your client.&lt;/p&gt;

&lt;h3 id=&quot;stitch-mobile-sync&quot;&gt;Stitch Mobile Sync&lt;/h3&gt;
&lt;p&gt;Since 4.0, MongoDB provides a &lt;a href=&quot;https://www.mongodb.com/products/mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mobile&lt;/a&gt; version for IOS and Android.
With Stitch, you can sync your data in your mobile application with your database.
So now you can use the full MongoDB Query Language, including aggregations, on your mobile device and sync it with your database.&lt;/p&gt;

&lt;h3 id=&quot;built-in-external-integrations&quot;&gt;Built-in external Integrations&lt;/h3&gt;
&lt;p&gt;The fun with Stitch really starts when you combine all the goodness of Stitch with its integrations with cloud services like Twilio, AWS, Google, etc…
You can authenticate with Google, store files on S3 or spin up a cluster on Redshift after you send a text message with Twilio.
All of this can be hidden behind a simple function call for your application, or a trigger on your Atlas cluster.&lt;/p&gt;

&lt;h3 id=&quot;limited-to-stitch-ui&quot;&gt;Limited to Stitch UI?&lt;/h3&gt;
&lt;p&gt;Luckily MongoDB builds its products with developers in mind.
So you can import and export your Stitch applications and put them in a source control of your choice.&lt;/p&gt;

&lt;h1 id=&quot;meet-the-experts&quot;&gt;Meet the experts&lt;/h1&gt;
&lt;p&gt;At the conference you had the chance to book a 20 minute session with a MongoDB expert.
This was of great help in getting to know the new MongoDB Aggregation Pipeline builder.
The expert also gave some more tips in “thinking noSQL”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When data is shown together it is stored together – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data should be stored in the same way it is used – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;&lt;a href=&quot;https://sched.co/FmAp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Appliances Online, &lt;a href=&quot;https://ao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AO&lt;/a&gt;, is an international online appliances retailer.
They wanted to solve the issue of having data locked in different places so they wanted a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_customer_view/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single Customer View&lt;/a&gt;.
The idea was to get the data from all the different places and consolidate this in MongoDB.
We are talking here about data stored in legacy databases or messages going through queues.
The data could be the usual customer data and phone calls with customer care.
But also about parcels moving through the warehouse and delivery tracking.
They wanted to get the data while it’s hot, not in hourly or daily (or worse…) batches.
It was decided to use MongoDB to build up this materialised view of all different data streams, and Atlas to be able to focus on the application and not the database administration.&lt;/p&gt;

&lt;p&gt;The vast majority of the data resides in MsSql databases.
Extraction happens with &lt;a href=&quot;https://www.confluent.io/connector/kafka-connect-cdc-microsoft-sql/&quot;&gt;Kafka Connect SQL CDC&lt;/a&gt; to generate a stream of all create, update and delete operations into a stream, and push it to Kafka.&lt;br /&gt;
All with a simple piece of configuration like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msSqlSourceConnector1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connector.class&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;io.confluent.connect.cdc.mssql.MsSqlSourceConnector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tasks.max&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;initial.database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cdc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db-01.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.port&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1433&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They use Avro for the schema definition in combination with a schema-registry.
Interested clients can then read the data off the topics and do their single-view-thing on the data and save it to MongoDB.
The view is being built up, message per message.
Afterwards this view in  MongoDB is then pushed back to Kafka as another stream to provide this data to interested parties.
This avoids locking the data in one place.&lt;/p&gt;

&lt;p&gt;To finish it of they shared some lessons learned :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Watch out for frameworks generating queries.&lt;br /&gt;
 They can create bad performing aggregations or queries.&lt;br /&gt;
 For them it was better to write some queries explicitly.&lt;/li&gt;
  &lt;li&gt;Use custom _id for unique determination of your model, it saves an index and RAM&lt;/li&gt;
  &lt;li&gt;Watch out for unbounded document growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;&lt;a href=&quot;https://sched.co/FmAc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://amadeus.com/en&quot;&gt;Amadeus&lt;/a&gt; is the world’s largest technology company dedicated to the travel industry.
They have developed an impressive MongoDB farm, a large environment with 100 clusters.
Some of these clusters run more than 100 shards, while others have 100TB MongoDB databases.
Amadeus processes more than 1 trillion flight availability requests per day. 
For each single search you do on a website they receive 500.000 availability requests.
So search responsibly ;-)
The number of requests per day grows by 50% each year.
The second of January has by far the most requests, due to new years resolutions!
If this day is in the weekend all systems are pushed to their limits.
The airline fare database for one of their big clients, Kayak, is 100TB in size and changes daily.
That’s some pretty big numbers there.
No wonder that Amadeus is a happy user of the MongoDB Enterprise Operator for Kubernetes.&lt;/p&gt;

&lt;p&gt;Starting with the MongoDB Ops Manager v4.0, MongoDB officially supports the management and deployment of MongoDB in Kubernetes with Backup, Automation, Alerting and Monitoring.
A &lt;a href=&quot;https://github.com/mongodb/mongodb-enterprise-kubernetes&quot;&gt;MongoDB Enterprise Kubernetes Operator&lt;/a&gt; has app-specific awareness about stateful applications, so it knows how to deploy them.
This operator helps automating scripted tasks and enables MongoDB-as-a-service for developers.
It talks to Ops Manager and delegates the creation of clusters, shards, backups and automation to Ops Manager.
The underlying necessary Kubernetes infrastructure is orchestrated by the operator itself and so they work in conjunction.
This provides for clusters to be setup, scaled up/down/out/in, with a single simple yaml file.
And kubernetes provides the self-healing capabilities, how nice is that!?&lt;/p&gt;

&lt;p&gt;The following yaml file is all you need to spin up a 3 node replica set :&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb.com/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MongoDbReplicaSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myReplicaSet&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4.0.1&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;projectName&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myUberSecretCredentials&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I kid you not, that’s it.&lt;/p&gt;

&lt;p&gt;Scale out or back in with a simple change in the config yaml and&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; file.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mongodb-charts&quot;&gt;MongoDB Charts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sched.co/FtWP&quot;&gt;Bringing Data to Life with MongoDB Charts&lt;/a&gt;, Guillaume Meister.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, if you want to visualize data in a MongoDB database you either have to code it yourself, or rely on a 3rd party tool and migrate your data to a different platform (for example: Kibana with Elasticsearch is very popular).
Needless to say that this can be quite cumbersome.
&lt;a href=&quot;https://www.mongodb.com/products/charts&quot;&gt;MongoDB Charts&lt;/a&gt; intends to solve this.&lt;/p&gt;

&lt;p&gt;So what is it? 
MongoDB Charts is a visualization tool that runs as a standalone webserver so you can access it via a web browser.&lt;/p&gt;

&lt;p&gt;In Charts you define data sources by pointing to a collection or view on a MongoDB instance.
Then you can create all kinds of visualizations based on the data source, using various aggregation and filter functions.
Finally, you can combine charts into dashboards with a customized layout and you can share these with other users.&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, so to give you a better idea of what it is all about, let’s look at an animation of Charts in action:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/mongodb-charts-01.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Charts is still in beta but you can already try it out. 
MongoDB provides a docker image that you can &lt;a href=&quot;https://www.mongodb.com/download-center/charts&quot;&gt;download&lt;/a&gt; via the MongoDB download center.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;It was a great day being submerged in MongoDB-knowledge. 
This conference gave us plenty of opportunity to talk to other experts and learn about the new and upcoming features.&lt;/p&gt;

&lt;p&gt;Keep an eye on this space for more MongoDB goodness.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Chris&quot;, &quot;last_name&quot;=&gt;&quot;De Bruyne&quot;, &quot;permalink&quot;=&gt;&quot;/author/chris-de-bruyne&quot;, &quot;avatar&quot;=&gt;&quot;chris-de-bruyne.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;Principal MongoDB Consultant&quot;, &quot;email&quot;=&gt;&quot;chris.debruyne@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;ceedeebee2901&quot;, &quot;bio&quot;=&gt;&quot;Chris is a Senior Java Developer at Ordina Belgium, passionate about Java and MongoDB. Chris is passionate to help colleagues and clients to get the most out of MongoDB and the Java eco system.&quot;}</name><email>chris.debruyne@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="MongoDB" /><category term="DBA" /><category term="Data" /><category term="Kubernetes" /><category term="Conference" /><summary type="html">MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products. This year the venue took place in Old Billingsgate Walk, London. Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-mongodb-europe-2018/main-image-mdbe.png" /></entry></feed>