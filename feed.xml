<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2020-03-26T20:36:38+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Charting the Non-Functional Waters</title><link href="https://ordina-jworks.github.io/architecture/2020/03/24/Charting-non-functionals.html" rel="alternate" type="text/html" title="Charting the Non-Functional Waters" /><published>2020-03-24T00:00:00+00:00</published><updated>2020-03-24T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/03/24/Charting-non-functionals</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/03/24/Charting-non-functionals.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Where functional requirements are relatable to most stakeholders as they are derived from their areas of expertise, specifying the brunt of the non-functionals tends to fall to the solution architect. 
As these requirements are more technical in nature, the affinity of other stakeholders with them is not as pronounced. 
When inquiring about their relevance, the typical answer will be in very generic fashion, for example: “The application needs to be fast.” 
Trying to get more concrete and measurable statements is not an easy endeavor. 
We’ll get back to this further on in the blog post.&lt;/p&gt;

&lt;h1 id=&quot;formalizing-the-requirements&quot;&gt;Formalizing the Requirements&lt;/h1&gt;

&lt;p&gt;Once we have the appropriate numbers, we need to formalize them and get them validated. 
Just as the structure and formalization of the functional requirements is expressed as user stories, or in some cases even more detailed in the form of Business Processes and use cases, in a similar manner will we structure and formalize the non-functionals based on the ISO 25010 standard. 
Some older architecture documents could also still make a reference to the ISO 9126 standard, which is its predecessor.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-03-24-Charting-non-functionals/iso25010.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;ISO 25010 Standard&lt;/p&gt;

&lt;p&gt;Since the ISO standard focuses on quality and acceptance of the delivered product, the same model should be the basis to compose requirements as well. 
As a result, the quality attributes can be considered as the non-functional requirements of the product focusing on expectations about functionality, usability, reliability, efficiency, maintainability and portability. 
However, in order to make the factors more complete and representative, each of the characteristics has been split up into its proper set of sub-characteristics.&lt;/p&gt;

&lt;h1 id=&quot;prioritizing-the-requirements&quot;&gt;Prioritizing the Requirements&lt;/h1&gt;

&lt;p&gt;Note however that not all characteristics and associated sub-characteristics are as important to each and every project. 
On a case-by-case basis, some of them can be given a very low priority or even entirely neglected. 
Hence, the priority indication is very important in the specification for every requirement. 
These are the tradeoffs that an architect needs to chart to arrive at the proper solution. 
One of the ways to weigh them was described in the &lt;a href=&quot;https://www.amazon.co.uk/Software-Requirements-Developer-Best-Practices/dp/0735679665/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;book “Software Requirements” by Karl Wiegers and Joy Beatty&lt;/a&gt;. 
The idea is to chart them in a matrix which marks the requirements that take precedence over others when they have conflicting impacts on the solution. 
For example: When business stakeholders ask for a speed of delivery that is contradicted by security concerns demanding a mandatory waiting period for customer due diligence purposes, a decision needs to be taken on which of these requirements gets the upper hand for the implementation.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-03-24-Charting-non-functionals/nonfuncprios.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A reflection of this type of requirements contradiction can be found in the CAP theorem. 
The CAP theorem, also named Brewer’s theorem after computer scientist Eric Brewer, states that it is impossible for a distributed computer system to simultaneously provide more than two out of three of the following guarantees: Consistency. Availability. Partition tolerance. 
Consistency is the characteristic that determines that a service will always give the same answer across multiple nodes. 
Availability reflects that every service request should get a response. Partition tolerance is the ability to handle the occasional failure in communication between two services. 
A balance matching the needs of the solution must be determined between these three requirements in order to implement a solution that fits the bill.&lt;/p&gt;

&lt;p&gt;There are some frameworks that already have some form of priority already built in. They implement this by reducing the number of non-functional categories to only those relevant in their point of view. For example, when we take the AWS Well-Architected Framework, the determining non-functionals are reduced to five categories based on Amazon’s experiences and best practices. For each of these pillars AWS has published a white paper on how to improve and optimize them. IT also provides tooling and labs to help the architect make the proper tradeoffs.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-03-24-Charting-non-functionals/awswellarch.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Pillars of the AWS Well-Architected Framework&lt;/p&gt;

&lt;p&gt;When maturing the requirement list set out for the solution, it might become a difficult and complex task to get accurate numbers to quantify the requirements and make them measurable. We can gather the logs of existing systems that we are replacing to get a grip on what traffic we can expect. But this is not always an option. Suppose we are developing a solution for registering timesheets of employees in a small business that have just gotten a significant enough growth in its sales to justify the cost of such a solution. It doesn’t have numbers on how many times the services of such a system should be called and it doesn’t have an existing system from which to extract them. This is where we start to rely on deduction. We start from relevant data that we do have access to or make assumptions based on experience and we extrapolate from there. In the case of our timesheet solution, we count the number of employees (relevant data) and multiply it by the number of times a week we assume they will access the timesheet solution resulting in a quantified requirement.&lt;/p&gt;

&lt;h1 id=&quot;data-solution-requirements&quot;&gt;Data Solution Requirements&lt;/h1&gt;

&lt;p&gt;Most of the requirements stipulated by the ISO 25010 standard apply to software solutions. The game changes a bit if this solution is primarily or even solely focused on the data facet. When designing a data solution such as for example a solution that gathers and evaluates the available data for a specific topic, we look at a sister standard of the one previously mentioned. The ISO 25012 is part of the same family and offers requirements fitting two categories with some these shared by both. These categories are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inherent Data Quality: This category gathers all requirements that deal with the inherent data quality of the data sets that are being used in the solution.&lt;/li&gt;
  &lt;li&gt;System-Dependent Data Quality: This category deals with the requirements that have to do with the capabilities of maintaining the quality inherent in the data sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-03-24-Charting-non-functionals/iso25012.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;ISO 25012 Standard&lt;/p&gt;

&lt;h1 id=&quot;operational-requirements&quot;&gt;Operational Requirements&lt;/h1&gt;

&lt;p&gt;When a solution finally goes live, it will have an impact on the existing way of working within the organization. 
Not only are its users a stakeholder, but there is also the team that will support the solution to consider as well. 
Therefore, a set of operational requirements is usually determined by analyzing how the managed services team will keep the solution up and running, how they will cope with bug fixing and evolutionary maintenance, and how to cope with negative impact.&lt;/p&gt;

&lt;p&gt;As with non-functional requirements, so can these requirements be categorized by using an ISO standard, in this case the ISO 25022 standard, or the “Quality in Use” Model. 
This standard defines measures for the characteristics of the previously mentioned ISO 25010 standard and consists of a basic set of impact measures and methodologies to quantify each of them. 
This standard is a collection of suggested measures and is by no means an exhaustive list. A visual representation of these requirements can be seen in the illustration below.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-03-24-Charting-non-functionals/iso25022.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;ISO 25022 Standard&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In summary, an architect needs to be able to get a handle on all the angles of the solution as soon as possible in the development process, and requirements, both functional and non-functional, allow him or her the overarching vision to guide development along. 
Be wary of analysis paralysis though. 
To quote the former US Secretary of Defence Donald Rumsfeld: “There are known unknowns, that is to say, there are things that we now know we don’t know them.” 
So, avoid trying to get the perfect picture of the requirements, and instead factor into your solution that new requirements can pop up and hidden ones can be revealed during the later stages of the project.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="Architecture" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-03-24-Charting-non-functionals/nonfunc_background.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-03-24-Charting-non-functionals/nonfunc_background.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Zero Plastic Rivers - explained</title><link href="https://ordina-jworks.github.io/cloud/2020/03/16/ZPR-explained.html" rel="alternate" type="text/html" title="Zero Plastic Rivers - explained" /><published>2020-03-16T00:00:00+00:00</published><updated>2020-03-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/03/16/ZPR-explained</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/03/16/ZPR-explained.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#developer-experience&quot;&gt;Developer experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;As a society we treat plastic irresponsibly. Because of us, enormous amounts of plastic waste end up in our rivers.&lt;br /&gt;
And if we don’t remove this plastic from the rivers before it reaches the estuary, this plastic will inevitably end up in the plastic soup, which in turn gets bigger.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zeroplasticrivers.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Zero Plastic Rivers (ZPR) initiative&lt;/a&gt;  tries to solve this problem by doing three things: measure, prevent and clean up.&lt;br /&gt;
Plastic pollutes our seas and oceans.&lt;br /&gt;
Currently at least 150 million tons of plastic waste floats in our oceans, forming the infamous plastic soup.&lt;br /&gt;
And it is getting worse; it’s estimated another 8 million tons is added every year.&lt;br /&gt;
That’s about one truck of plastic per minute that get’s dumped into our oceans.&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The Zero Plastic Rivers initiative&lt;/strong&gt;  wants to make sure that our rivers no longer bring plastic waste to the seas.&lt;br /&gt;
We want to do this based on a scientific and structured approach, inspired by the principles of quantitative optimization as defined by &lt;strong&gt;Six Sigma.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;endgoal&quot;&gt;Endgoal&lt;/h2&gt;
&lt;p&gt;Our rivers are severely polluted with plastic, making them the largest source of plastic soup in our oceans, even up to 80%.&lt;br /&gt;
We can only solve this problem by ensuring that our rivers no longer supply plastic to the sea.&lt;br /&gt;
And that is why we are striving for Zero Plastic Rivers.&lt;/p&gt;

&lt;p&gt;To be more effective in the fight against the plastic soup it is important to get more insight in how plastic moves through the rivers.&lt;br /&gt;
This is where Bert Teunkens together with the University of Antwerp comes into play.&lt;br /&gt;
The subject of his PhD is: Quantification and characterization of the plastic fluxes in the Scheldt basin, with the ultimate goal of setting-up an efficient remediation.&lt;/p&gt;

&lt;p&gt;To help him reach his goal of creating strategies to combat the plastic pollution he needs insights in how different kinds of plastic moves through our waterways.&lt;br /&gt;
Bert came up with different ways to gather this data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using citizen science&lt;/li&gt;
  &lt;li&gt;IoT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;citizen-science&quot;&gt;Citizen science&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers Plastic&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_allplastic.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A large quantity of plastic objects were dipped in fluorescent paint and were tagged with water resistant stickers containing metadata about that object.&lt;br /&gt;
These objects were released in the waterways with the assumption they would wash ashore eventually.&lt;br /&gt;
Because they were brightly colored, they would be easy to spot by passers-by.&lt;br /&gt;
These people could then enter various information about the object such as the unique object identifier, GPS location, pictures, description, …&lt;/p&gt;

&lt;h3 id=&quot;iot&quot;&gt;IoT&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers Sensor&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_tracker.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Another great way to gather datapoints was through GPS trackers.&lt;br /&gt;
Various industrial grade battery powered GPS trackers were put in a waterproof casing and then deployed into the river.&lt;br /&gt;
Using a 2G network, these GPS trackers would travel along the river and transmit a new GPS fix every hour.&lt;br /&gt;
Various measures were taken to optimize battery consumption as we expected the trackers to travel for an extended period of time. This was done by putting a specific configuration on these devices.&lt;/p&gt;

&lt;h2 id=&quot;partnering&quot;&gt;Partnering&lt;/h2&gt;
&lt;p&gt;Bert approached Ordina because of our deep IoT knowledge and user centric end-to-end project approach.&lt;/p&gt;

&lt;p&gt;Ordina helped create an application to gather the datapoints and visualise them so that he could formulate ways of setting up efficient remediation.&lt;/p&gt;

&lt;p&gt;This was quite an exciting and important project for Ordina and the JWorks crew as it checks 2 boxes at the same time: doing a project with the latest and greatest technology while having a significant impact on society!&lt;/p&gt;

&lt;p&gt;This project would allow us to use all our skills to build a solution that would solve a major problem for society.&lt;br /&gt;
With our multi-disciplinary team we were able to tackle following domains: user experience, application and cloud architecture, frontend and backend development, security and managed application hosting.&lt;/p&gt;

&lt;h1 id=&quot;user-experience&quot;&gt;User Experience&lt;/h1&gt;
&lt;p&gt;From the get-go it seemed very crucial to nail the user experience for the citizen science part of the application.&lt;br /&gt;
The success of the project depended on benevolent strangers to pick up our brightly colored plastic waste, read the instruction and input a significant amount of data into our system.&lt;br /&gt;
This process needed to be clear, painless and concise. &lt;br /&gt;
Bad user interaction would lead to no datapoints and thus doom the project.&lt;/p&gt;

&lt;p&gt;The initial idea was to put QR tags on all the plastic objects and have users scan them.&lt;br /&gt;
Altough everyone deemed this an elegant and efficient way of working, we decided to test this on “regular people”.&lt;br /&gt;
This was done by conducting guerilla testing: talking to random people outside our office building, showing them a ZPR plastic object with a tag and seeing what they would do.&lt;/p&gt;

&lt;p&gt;Turns out very few people instinctively know what to do with a QR code.&lt;br /&gt;
To counter this, we opted to add a very short url on the object: www.zpr.one&lt;br /&gt;
This allowed more users to reach our application and fill in all the data we needed.&lt;/p&gt;

&lt;p&gt;Once they were in the application we had to make it straightforward for them to collect all the data we needed.&lt;br /&gt;
Various rapid iteration of the UI were made using wireframes and mockups.&lt;br /&gt;
These were tested and validated to create an optimal flow through the various screens as we wanted a very low threshold for users to input the data.&lt;/p&gt;

&lt;p&gt;We opted to create a Progressive Web Application (PWA) instead of a native application as we felt that users did not want to install yet another app.
As we required access to native features such as GPS and camera a PWA seemed perfect for the job!&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;To build and run this modern and complex project we opted to use the AWS platform.&lt;br /&gt;
For a considerable amount of time we at JWorks have been investing our efforts and resources to build up our AWS portfolio.&lt;br /&gt;
This means we work on building up the AWS skills of our people and in parallel we work on building up our portfolio of AWS enabled solutions.&lt;br /&gt;
We have worked out several reference architectures that we prefer to use now.&lt;br /&gt;
The advantage of these architectures is that every consultant within our unit knows how to use them and develop applications using them.&lt;/p&gt;

&lt;p&gt;The Zero Plastic Rivers project proved to be an excellent opportunity to put some of these into practice.&lt;br /&gt;
You can view the architecture we opted to build in the following picture.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_architecture.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This big architectural picture can be divided in 3 big sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backend java application&lt;/li&gt;
  &lt;li&gt;Frontend ionic app&lt;/li&gt;
  &lt;li&gt;IoT sensor data ingestion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will highlight some key features of each architectural section in the following paragraphs.&lt;/p&gt;

&lt;h2 id=&quot;backend-application&quot;&gt;Backend application&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_arch_backend.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-backend-itself&quot;&gt;The backend itself&lt;/h3&gt;
&lt;p&gt;Since we are called JWorks and we mainly focus on Java/Javacript development it should be no surprise that our backend application is written in Java with the Spring Boot framework.&lt;br /&gt;
In general we prefer to write backends in the microservices paradigm, but in this case the backend was sufficiently small that it only consists of 1 microservice.&lt;br /&gt;
The application itself is a pretty standard spring boot application.&lt;br /&gt;
We use a postgreSQL server hosted in RDS as our persistent datastore on the backend, supplemented with an elasticache Redis cluster to cache database queries and configurations for the IoT sensors used in the IoT sensor data ingestion part.&lt;br /&gt;
Our backend service is reachable over a REST interface for the outside world, we will talk more about this interface when we discuss the frontend application.&lt;/p&gt;

&lt;h3 id=&quot;hosting-of-the-application&quot;&gt;Hosting of the application&lt;/h3&gt;
&lt;p&gt;The backend application is hosted on our Kubernetes cluster in the AWS cloud. This cluster is an EKS cluster that we use to run several projects for customers and is also used for some of our internal applications.&lt;br /&gt;
The EKS cluster is a multi-worker node cluster setup with multiple Auto Scaling Groups so we can guarantuee almost 100% uptime on our applications that run on this cluster.&lt;br /&gt;
We have been using Kubernetes in different forms (on-premise, AKS, PKS,  …) for a long time now which means we have a very clear image of how to use it and how to run applications on a cluster.&lt;br /&gt;
We make heavy use of several key features like: secrets, configmaps, …&lt;br /&gt;
Our EKS cluster is running several plugins that allow us to quickly configure infrastructure components on the AWS cloud from within our cluster.&lt;br /&gt;
For example the REST interface of the application is exposed through a Kubernetes ingress which is hooked up to the ALB controller plugin.&lt;br /&gt;
This means that whenever we create a new ingress a new Application Load Balancer will be automatically provisioned in the AWS cloud to expose our deployment to the outside world. This makes it very easy to work with and allows us a lot of flexibility.&lt;/p&gt;

&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_arch_frontend.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Our frontend application consists of two parts.&lt;br /&gt;
The first part is aimed at citizens who wish to help the cause. They can feed data in the system via the citizen science application when they find a bottle as shown in the image below.&lt;br /&gt;
This is the first way that data from the plastic bottles comes into our system. We allow the user to upload an optional image when submitting this data. These images are stored in a secure S3 bucket.&lt;br /&gt;
The second part is aimed at the researchers, and could be seen as the backoffice of the project, where the data given by the GPS trackers and the citizens is visualized in a clear and orderly way.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr-frontend-application.png&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To develop this application we have chosen to use Ionic. &lt;a href=&quot;https://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt; is a free-to-use web-based framework that allows you to build hybrid mobile apps for iOS and Android, all from one codebase. In other words, Ionic is a tool for cross-platform mobile development. Ionic enables you to develop mobile apps using web technologies and languages like HTML, CSS, JavaScript, Angular, and TypeScript.&lt;/p&gt;

&lt;h3 id=&quot;data-visualization&quot;&gt;Data visualization&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_arch_data_ingestion.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;One of the most relevant components in this application is the map where the sensors and the plastic bottles in the river are visualized by means of the coordinates registered in these items as shown in the image above. For this we have chosen to use &lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; which is an open source JavaScript library for adding interactivity to maps. They have a ton of features and plugins to support doing pretty much anything with a map that you can think of.&lt;/p&gt;

&lt;p&gt;Ionic offers a wide variety of ready to use plug-ins and one of them is the camera that enables users who decide to participate in this project to take pictures of the bottles to update the status and deterioration of each bottle in the river.&lt;/p&gt;

&lt;h3 id=&quot;frontend-testing&quot;&gt;Frontend Testing&lt;/h3&gt;

&lt;p&gt;In reference to software testing we have mainly used Unit Testing to reduce the number of errors that are released during deployment, which we consider critical for effective software development.&lt;/p&gt;

&lt;h3 id=&quot;frontend-deployment&quot;&gt;Frontend deployment&lt;/h3&gt;

&lt;p&gt;Originally we planned to host this application in a nginx webserver in our EKS cluster. We changed to S3 as it is an easier to maintain solution than running your own webserver on Kubernetes. We have setup a hosted zone in Route53 which serves as the entry point of users into our application. Route53 then forwards users who visit zpr.one to our Cloudfront distribution. Cloudfront serves the ionic app from our S3 bucket which has static webhosting enabled. This setup seems optimal as it is low maintenance, tightly secured and highly scalable.&lt;/p&gt;

&lt;h4 id=&quot;low-maintenance&quot;&gt;Low maintenance&lt;/h4&gt;
&lt;p&gt;To explain why this setup is low maintenance let us take a look at the components used in this architecture.&lt;br /&gt;
We are making use of Cloudfront, S3 and Route53 in this setup.&lt;br /&gt;
All of these services are managed services provided by AWS.&lt;br /&gt;
This means that there is no maintenance required on our part as AWS guarantees uptime and makes sure that everything is running smoothly.&lt;br /&gt;
The only manual actions that have occurred on our side in this setup so far was to clear the Cloudfront cache after releasing a new version to have the new version more quickly available to users of the app.&lt;/p&gt;

&lt;h4 id=&quot;tightly-secured&quot;&gt;Tightly secured&lt;/h4&gt;
&lt;p&gt;Since we are using only managed services from AWS the burden of patching those services and making sure they are secured is on AWS itself.&lt;br /&gt;
AWS has an excellent reputation on this regard so we feel very comfortable in this regard.&lt;br /&gt;
We also make use of several additional features provided by AWS to secure our application further.&lt;br /&gt;
For example the S3 bucket that is used to host the website is only accessible through the Cloudfront distribution.&lt;br /&gt;
So users do not need access to the S3 resources itself, we implemented this nicely through Bucket policies and IAM access control.&lt;/p&gt;

&lt;h4 id=&quot;highly-scalable&quot;&gt;Highly scalable&lt;/h4&gt;
&lt;p&gt;Since we are only allowing traffic to our application from the Cloudfront distribution this means that we get all the benefits from this global CDN.&lt;br /&gt;
Cloudfront operates on the AWS edge locations which are spread throughout the world.&lt;br /&gt;
Because our application is mostly Belgium based this was not as important to us but the fact that Cloudfront routes its requests over the internal AWS backbone makes a huge difference in speed which is a nice feature if you are working with global applications.&lt;br /&gt;
The S3 service which acts as the origin for our Cloudfront distribution is &lt;strong&gt;nearly infinitely scalable&lt;/strong&gt; as proclaimed by AWS itself.&lt;br /&gt;
The interaction between our frontend and backend happens over REST services provided by our backend in the EKS cluster which is exposed over an ALB so we are very confident that we can scale up as needed.&lt;/p&gt;

&lt;h2 id=&quot;iot-sensor-data-ingestion&quot;&gt;IoT sensor data ingestion&lt;/h2&gt;

&lt;p&gt;IoT is all about processing a large quantity of messages.&lt;/p&gt;

&lt;p&gt;What makes IoT data challenging from a developer perspective is threefold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protocol&lt;/li&gt;
  &lt;li&gt;Data format&lt;/li&gt;
  &lt;li&gt;Message Content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine you have a device that captures and delivers GPS data. 
Seems simple enough right? Guess again!&lt;/p&gt;

&lt;p&gt;A hardware vendor can decide to mix and match these 3 components.&lt;/p&gt;

&lt;p&gt;The vendor can those over which protocol he wants to send the data.
Some examples are: HTTP(S), TCP, UDP, MQTT, COAP, …&lt;/p&gt;

&lt;p&gt;He can also use different kinds of data-serialization formats to get the information across the network of choice: JSON, XML, Hex, Binary, something proprietary, … Different kinds of parsers will be needed.&lt;/p&gt;

&lt;p&gt;And last but not least: he can organise the way a message is structured. He can name fields any way he wants and use any kind of data type. Imagine two vendors reporting battery capacity. One could report it by sending a field called “battery” and reporting battery voltage.
Another could use a field called “power” and return a battery fill level percentage.&lt;/p&gt;

&lt;p&gt;Soon, it can become quite complex due to the number of combinations possible.&lt;/p&gt;

&lt;p&gt;Some of our plastic containers send their location via the 2G cellular network at regular intervals.&lt;br /&gt;
These messages reach us via a public network through the tcp protocol.&lt;/p&gt;

&lt;p&gt;As various protocols such as TCP and UDP are quite prevalent in IoT solutions, we do see that they are not yet first class citizens in the cloud.
Eventhough it is possible to modify the ingress to kubernetes on our NGINX to allow TCP data to pass through, this is not a scalable solution. Imagine having thousands upon thousands of devices starting new TCP connections. This would kill our NGINX.
To solve this problem we used a native AWS component: the network load balancer. 
This allowed limitless scaling of TCP connections. These TCP connections would then end up on an Spring Boot application hosted on AWS Beanstalk, which is basically a managed horizontally scalable Tomcat server. This application has to handle the interactions with the devices and acts as a “sensor gateway”.
The sensors can receive instructions and updates, but this has to happen inside the same open tcp connection within a very short timeframe.&lt;br /&gt;
This gateway consults the Elasticache for any needed instructions or updates.&lt;br /&gt;
If a return message is needed, it is sent through the open tcp connection.&lt;br /&gt;
The sensor detection message is then passed on to an SQS queue. From here on out, the focus of handling the message is less time-sensitive.&lt;br /&gt;
A Lambda function decodes the message on the queue and then pushes it to another SQS message queue.&lt;br /&gt;
A Spring Boot backend that is deployed in our kubernetes cluster handles these last events and persists them to our database.&lt;/p&gt;

&lt;h1 id=&quot;security&quot;&gt;Security&lt;/h1&gt;

&lt;p&gt;One key element of the security is controlling who has access to an application. To strengthen security, reduce risk and improve compliance, it is essential that only authorized users get to access specific data in an application and that authentication is required before that access is granted. This means that authentication is a critical component for most applications and in this project it was no exception, as we needed to secure the data visualization part of the application so that only researchers have access to advanced functionality.&lt;/p&gt;

&lt;p&gt;To perform this authentication, we have chosen to use AWS Cognito as it dramatically simplifies application development by providing an authentication service that is simple to integrate into any modern application. In addition to storing login information, Cognito can store standard and custom user account settings. Learn more about AWS Cognito and its advantages &lt;a href=&quot;https://aws.amazon.com/cognito/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another advantage of AWS Cognito is that it supports OpenID Connect which is a simple identity layer built on top of the OAuth 2.0 protocol, which allows clients to verify the identity of an end user based on the authentication performed by an authorization server or identity provider (IdP), as well as to obtain basic profile information about the end user in an interoperable and REST-like manner. Learn more about OpenID Connect &lt;a href=&quot;https://openid.net/connect/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;aws-cognito-and-openid-connect&quot;&gt;AWS Cognito and OpenID Connect&lt;/h3&gt;

&lt;p&gt;To carry out authentication using the OpenID Connect standard with Cognito we have chosen to use the Authorization Code Grant which is the preferred and most secure method for authorizing end users. Instead of directly providing user pool tokens to an end user upon authentication, an authorization code is provided. This code is then sent to a custom application that can exchange it for the desired tokens. Because the tokens are never exposed directly to an end user, they are less likely to become compromised.&lt;/p&gt;

&lt;p&gt;The image below illustrates the flow, and, in this &lt;a href=&quot;https://aws.amazon.com/blogs/mobile/understanding-amazon-cognito-user-pool-oauth-2-0-grants/&quot;&gt;blogpost&lt;/a&gt;, you can find more information about this approach.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Authorization Code Grant Diagram&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_aws_cognito.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To secure our frontend we have used Manfred Steyer’s &lt;a href=&quot;https://github.com/manfredsteyer/angular-oauth2-oidc&quot;&gt;Angular-oauth2-oidc&lt;/a&gt; library but you could use any library as long as it is &lt;a href=&quot;https://openid.net/certification/&quot;&gt;OpenID certified&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our colleague Jeroen wrote a fantastic &lt;a href=&quot;https://ordina-jworks.github.io/security/2019/08/22/Securing-Web-Applications-With-Keycloak.html#setting-up-the-front-end-and-back-end-applications&quot;&gt;blogpost&lt;/a&gt; that was very helpful to us. Jeroen shows the necessary steps to follow to secure any web application using OpenID Connect.&lt;/p&gt;

&lt;h1 id=&quot;d-day&quot;&gt;D-Day&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers release&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_release.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers trail&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_plastictrail.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Zero Plastic Rivers trail2&quot; src=&quot;/img/2020-03-16-ZPR-explained/zpr_plastictrail2.jpg&quot; width=&quot;auto&quot; height=&quot;40%&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Tuesday December 17th was D-day. That day the bottles and sensors were finally thrown into the water. We had a tight timing because the bottles had to be thrown in the Scheldt river at high tide, at 3 different locations. 
It was a nice dry day and our client was quite nervous. Are all the signals coming in properly, is the sensor packed waterproof, …?  Especially because we were not able to test all that much with the sensors due to the tight timing. 
At high tide, it was time to throw the bottles in the water and register the sensor via our Ionic App. Everything runs smoothly and the signals from the sensors come in. You see the customer cheer up and leave satisfied to the next location. Everything goes as planned all day long and after just a few days the first users start registering the objects on our website.
And today, so many weeks later, we still receive new registrations. 
It was a nice ending of a fascinating and instructive project.&lt;/p&gt;

&lt;h1 id=&quot;developer-experience&quot;&gt;Developer-experience&lt;/h1&gt;

&lt;p&gt;For some developers on the team, Zero Plastic Rivers was the first experience with AWS and even their first cloud project.&lt;br /&gt;
In the beginning it was quite intimidating because a lot of different technologies of AWS were used.&lt;br /&gt;
But soon it turned out to be quite easy to configure and with some help from other colleagues (thanks guys) I got everything up and running pretty quickly.&lt;br /&gt;
In the beginning I was quite sceptical about the use of lambdas in our application, I didn’t immediately see the advantage of it but in the end it turned out to be the best option, especially if we want to build applications with many more sensors in the future. Although it was sometimes difficult to find the correct documentation.&lt;br /&gt;
My favorite technology was definitely Cognito. In a few lines of code you have a user administration of an entire application without having to worry about possible security holes.&lt;br /&gt;
In the end it was a very pleasant experience to get started with AWS.
Due to this eye-opening experience several developers are looking forward to becoming AWS certified and gaining a deeper and more complete AWS skillset.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;All in all we were very pleased with how we delivered this project. As this project was fully staffed with an Ordina High Performance Team, we were able to do everything by the book. We used the best methodologies for software delivery coupled with our preferred technology stack to build a true cloud native application.
We embraced the devops mindset: you build it, you run it.
Next to that we also embraced the agile mindset: respect, collaboration, improvement and learning cycles, pride in ownership, focus on delivering value, and the ability to adapt to change.&lt;/p&gt;

&lt;p&gt;We had a great team dynamic: experienced developers coaching and mentoring younger colleagues and helping them grow.
Meanwhile the senior developers could work on their coaching and mentoring skills while discussing advanced architectures, also allowing them to grow.
Seems like a win-win, right?&lt;/p&gt;

&lt;p&gt;This scientific project will run for at least two years and we can’t wait to see what kind of insights will be revealed and the impact we will make on our environment and society!&lt;/p&gt;

&lt;p&gt;We also ended up getting some national press coverage. As you can imagine, this made us very proud!&lt;/p&gt;

&lt;p&gt;https://www.vrt.be/vrtnws/nl/2020/02/28/opnieuw-fluoplastic-in-schelde/
https://www.hln.be/in-de-buurt/antwerpen/wetenschappers-gooien-plastic-in-de-schelde-in-strijd-tegen-plasticvervuiling~a39b64e0/&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Bas&quot;, &quot;last_name&quot;=&gt;&quot;Moorkens&quot;, &quot;permalink&quot;=&gt;&quot;/author/bas-moorkens/&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;DevOps Engineer&quot;, &quot;email&quot;=&gt;&quot;bas.moorkens@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;basmoorkens&quot;, &quot;avatar&quot;=&gt;&quot;bas-moorkens.jpg&quot;, &quot;github&quot;=&gt;&quot;basmoorkens&quot;, &quot;bio&quot;=&gt;&quot;Bas is a cloud platform architect at Ordina Belgium who is fascinated by aws, containers and pipeline automation. He started off as a Java full stack developer but got more and more into the devOps and cloud world where he currently spends most of his time.&quot;}</name><email>bas.moorkens@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="EKS" /><category term="Architecture" /><category term="Ionic" /><category term="Beanstalk" /><category term="Cloudfront" /><summary type="html">Table Of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-03-16-ZPR-explained/zpr-banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-03-16-ZPR-explained/zpr-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chatbots - Introduction and a practical use case</title><link href="https://ordina-jworks.github.io/machine%20learning/2020/02/24/Chatbots-Introduction-and-a-Practical-Case.html" rel="alternate" type="text/html" title="Chatbots - Introduction and a practical use case" /><published>2020-02-24T00:00:00+00:00</published><updated>2020-02-24T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/machine%20learning/2020/02/24/Chatbots-Introduction-and-a-Practical-Case</id><content type="html" xml:base="https://ordina-jworks.github.io/machine%20learning/2020/02/24/Chatbots-Introduction-and-a-Practical-Case.html">&lt;blockquote&gt;
  &lt;p&gt;Chatbots, they seem to be everywhere, and yet, there are a lot of people who have no idea what they are.
I came home one day in October and told my parents and sisters I was building a chatbot at work.
Their reaction: “You’re building a what now?”. 
So I took ten minutes to explain them what a chatbot is and does.
In the end, they just said “So… It is a computer person?”. &lt;br /&gt; &lt;br /&gt;
This post will feature a high-level explanation of what chatbots are and what they do, as well as a deep dive into chatbot providers and a technical implementation. 
In the end, we’ll look at a practical case of a chatbot: FleetBot Dina.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#essential-terminology&quot;&gt;Essential terminology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chatbot-providers&quot;&gt;Chatbot providers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical-case-fleetbot-dina&quot;&gt;Practical case: FleetBot Dina&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-implementation&quot;&gt;Technical implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The concept of chatbots has existed ever since Alan Turing designed the Turing test in 1950, with the original concept of the test dating back to 1936.
The question asked in this test was “Can machines think?”. 
The test proposes a way to measure if the testee can know whether he’s talking to a human or a machine.
Joseph Weizenbaum was the first to design a real chatbot, ELIZA, in 1966 at the MIT AI laboratory, which he called a ‘chatterbot’.
Even though it failed the Turing test, the main idea behind a chatbot has since then remained the same: recognise what a user says using pre-programmed keywords and phrases, and respond accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ELIZA&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/ELIZA.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Technology has obviously evolved a lot since 1966. 
Modern chatbots do not only look at keywords and phrases anymore.
They use a technology called &lt;a href=&quot;https://mobilecoach.com/chatterbots-6-what-is-natural-language-processing/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Natural Language Processing&lt;/a&gt; (NLP) and Understanding (NLU) to understand the meaning behind what a user says. 
NLU uses complex algorithms to analyse the input, not only with predefined keywords but by using various aspects of the language and the sentence structure of the given input.&lt;/p&gt;

&lt;p&gt;This way, not only can a chatbot understand what a user says, but it can also do a sentiment analysis and extract useful information out of the input.
An example, when the user says &lt;em&gt;“Damn, someone drove into my &lt;strong&gt;Car Brand&lt;/strong&gt; earlier today, but it wasn’t my fault. I don’t know what I should do now.”&lt;/em&gt;, the chatbot would know that the user was quite angry, he had an accident, and he drives a &lt;strong&gt;Car Brand&lt;/strong&gt;. 
The bot’s response could be: &lt;em&gt;“I hope you’re okay. Here is a list of garages you can go to. Since it wasn’t your fault, insurance will help you figure this out.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;NLP&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/NLP.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In 2006, the world saw the first big tech company launch a chatbot called Watson.
IBM’s Watson went on to winning a game of “Jeopardy!” against all-time champions Ken Jennings and Brad Rutter in 2011.
Since then, tech giants like Apple (Siri), Google (Google Now), Amazon (Alexa) and Microsoft (Cortana) have all launched their own personal assistant chatbots with their respective NLPs.
In Belgium, Antwerp company &lt;a href=&quot;https://www.chatlayer.ai&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chatlayer&lt;/a&gt; provides a custom platform to build chatbots. 
They use whichever NLP is best in a given language.
For Flemish &amp;amp; Dutch, they built a custom NLP.&lt;/p&gt;

&lt;p&gt;Like all chatbots, these personal assistants have a specified set of use cases, setting alarms, playing music, reading the weather report, telling jokes,… 
If they don’t know the answer to a question, they will usually just look up whatever you asked on the internet, and give you the best response.&lt;/p&gt;

&lt;h1 id=&quot;essential-terminology&quot;&gt;Essential terminology&lt;/h1&gt;
&lt;p&gt;These are a few terms you should know when studying or working with chatbots.
They will be used throughout this blog.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Natural Language Understanding&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;NLU is the Artificial Intelligence (AI) which tries to understand the meaning behind what a user says.
It can do a sentiment analysis, extract relations between words and phrasing, do semantic parsing,…&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Natural Language Processing&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;NLP consists of NLU, along with extra factors like syntactic parsing. 
The key takeaway here is that NLP translates the user input to machine language and determines what a user has said.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Natural Language Generation (NLG)&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;NLG comes after the computer has understood the meaning behind the input and formulates an answer. 
This answer is usually predefined, but can vary depending on the input and the entities the bot has saved so far.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Entities are data that a chatbot can save during a conversation, e.g. your car brand, your tire type,…&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expressions&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;An expression is anything that a user sends or says to the bot.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Intents&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The intent is the purpose behind a user’s message, e.g. does the user ask for a garage, does he want to know about how to refill his AdBlue,…&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;A context is used when you expect the user to reply to a bot question.
By using contexts, you can direct the conversation into a certain flow, helping both the user and the computer along.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;chatbot-providers&quot;&gt;Chatbot providers&lt;/h1&gt;
&lt;p&gt;There are multiple chatbot providers you can use when building bots. 
Each bot has its own NLP and User Interface (UI), but to the core, they all expect the developer to provide the same things: expressions, intents and flows to guide a user through the conversation.
Chatbots can be implemented via various chat clients: Messenger, Microsoft Teams, Slack, Google Assistant,…
Chatbot providers provide you with integrations in different of these clients, and usually enable you to program a custom integration using (REST) APIs.&lt;/p&gt;

&lt;p&gt;Below, the biggest chatbot providers of today are listed with their properties (at the time of writing). 
We will not discuss each in detail with how bots are built, since it is equivalent for all, only varying in the UI.
There will be links in the &lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt; section of this blogpost.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;Dialogflow&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/DIALOGFLOW.jpg&quot; style=&quot;margin:0px auto; max-width: 200px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dialogflow.cloud.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google DialogFlow&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Easy and free to start up;&lt;/li&gt;
    &lt;li&gt;Events possible to trigger via API, making it able to move the conversation into a certain flow easily depending on user input;&lt;/li&gt;
    &lt;li&gt;Parameters can all be asked within same intent;&lt;/li&gt;
    &lt;li&gt;Intent structure can become very complicated for bigger bots, especially when first getting into an existing project;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Responses can be customised&lt;/strong&gt; based on the supported chat clients;&lt;/li&gt;
    &lt;li&gt;Complicated responses with images, buttons, cards,… and jumping from intent to intent requires a &lt;strong&gt;lot of coding&lt;/strong&gt;;&lt;/li&gt;
    &lt;li&gt;No sentiment analysis;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;About 20 integrations supported for free out of the box&lt;/strong&gt;, both chat and voice, possible to code custom integrations via API;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Multilingual&lt;/strong&gt;, Dutch relatively ok, Flemish is difficult.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;AmazonLex&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/AMAZONLEX.png&quot; style=&quot;margin:0px auto; max-width: 200px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://aws.amazon.com/lex/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Alexa/Lex&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Easy and (practically) free to start up (you do have to make an account linked to a credit card);&lt;/li&gt;
    &lt;li&gt;Built to work with &lt;strong&gt;Amazon Lambdas&lt;/strong&gt;, booking appointments etc;&lt;/li&gt;
    &lt;li&gt;Integration with Amazon Connect, CRM tools,…;&lt;/li&gt;
    &lt;li&gt;Parameters can all be asked within same intent;&lt;/li&gt;
    &lt;li&gt;No easy way to build big flows, no context possibilities;&lt;/li&gt;
    &lt;li&gt;Best for small conversations like booking an appointment;&lt;/li&gt;
    &lt;li&gt;Integration with Messenger, Slack and Twilio + API;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Single-language – only English.&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;AmazonLex&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/MICROSOFTPOWERVA.jpg&quot; style=&quot;margin:0px auto; max-width: 200px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://powervirtualagents.microsoft.com/en-us/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft Luis/Power Virtual Agents&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Easy and free to start up;&lt;/li&gt;
    &lt;li&gt;Built to work with &lt;strong&gt;Dynamics 365&lt;/strong&gt;;&lt;/li&gt;
    &lt;li&gt;Easy off-handing to live chat when bot fails;&lt;/li&gt;
    &lt;li&gt;Parameters can all be asked within same block;&lt;/li&gt;
    &lt;li&gt;Easy to build big flows – Tree structure using various blocks depending on use case;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;About 15 integrations supported for free out of the box&lt;/strong&gt;, both chat and voice, possible to code custom integrations via API;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Single-language – only English&lt;/strong&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;IBMWATSON&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/IBMWATSON.jpg&quot; style=&quot;margin:0px auto; max-width: 200px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.ibm.com/watson/how-to-build-a-chatbot&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IBM Watson&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Easy and free to start up (30 day trial);&lt;/li&gt;
    &lt;li&gt;Relatively easy to build big flows – Treelike structure using various blocks depending on use case;&lt;/li&gt;
    &lt;li&gt;Integration with Messenger, Slack, WordPress and Intercom + API;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Multilingual with Watson Language Translator&lt;/strong&gt;, Dutch relatively ok, Flemish is difficult.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;CHATLAYER&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/CHATLAYER.jpg&quot; style=&quot;margin:0px auto; max-width: 200px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.chatlayer.ai&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chatlayer&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Easy and free to start up (30 day trial, Chatlayer has to manually approve your request for a trial);&lt;/li&gt;
    &lt;li&gt;Easy to build big flows – Tree structure using various blocks depending on use case;&lt;/li&gt;
    &lt;li&gt;Parameters can be asked using ‘Input Validation’, on faulty type of answer. 
You can reply with a custom message to make sure the user uses the correct format;&lt;/li&gt;
    &lt;li&gt;Extensive reply capabilities;&lt;/li&gt;
    &lt;li&gt;Integration with Messenger, Google Home, WhatsApp and Intercom + API;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Multilingual&lt;/strong&gt;, Custom NLP for Dutch/Flemish, uses best available NLP for other languages. 
Can automatically detect and understand all languages, regardless of the language you programmed the bot to understand. 
Can answer only in the languages you programmed.;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;practical-case-fleetbot-dina&quot;&gt;Practical case: FleetBot Dina&lt;/h1&gt;
&lt;p&gt;At Ordina, we have about 800 cars in our Fleet. 
These, along with everything concerning alternative modes of transport and phone subscriptions, are managed by only two people.
As you’re probably thinking right now, this sounds like quite a hefty workload, and you would be quite right.
At the time of writing this blogpost, they have to deal with up to 150 emails on a daily basis, which is only expected to rise as Ordina is constantly growing.
Since we at JWorks also have questions from time to time, but wanted to lift a bit of their workload, we decided to pitch them the idea of building a chatbot.&lt;/p&gt;

&lt;p&gt;The chatbot is to be launched to Ordina’s Microsoft Teams.
This way, everyone at Ordina could contact it without having to bother with adding it as a separate user or having to create an account on a chat client they don’t use.
Since JWorks uses Telegram for a lot of their internal communications, and we like experimenting, we decided to also build a connection to a Telegram bot.
This Telegram connection was only used in the testing of the FleetBot and to improve the accuracy of the NLP.&lt;/p&gt;

&lt;p&gt;We tested all of the chatbot providers listed in the &lt;a href=&quot;#chatbot-providers&quot;&gt;Chatbot providers&lt;/a&gt; section, and ended up choosing Chatlayer for its outstanding Flemish/Dutch NLP, because most of Ordina Belgium’s employees are Flemish speaking.
The possibility to extend that functionality to Ordina in the Netherlands was an attractive bonus.
We also wanted to be able to hand the bot over to the Fleet division when it was finished, so they could keep it up to date without us.
We felt that Chatlayer offered the best UI for maintenance by non-developers.&lt;/p&gt;

&lt;p&gt;Below is a short example of the Fleetbot in MS Teams.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zgIOB8djVrM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&quot;technical-implementation&quot;&gt;Technical implementation&lt;/h1&gt;
&lt;p&gt;The general program structure is shown in the image below. 
We will discuss the MS Teams bot in detail later on. 
As you can see, both the Teams and Telegram adapter have their own repo &amp;amp; deployment. 
The reason behind this is that we wanted to be able to provide custom connections for any chat client without having to edit in an adapter used for another one.
Using the gateway, we can easily route the response from chatlayer to the adapter it is supposed to go to.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;GENERALLAYOUT&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/GENERALLAYOUT.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image below shows the production environment of the FleetBot in MS Teams. 
As you can see, Teams sends an API call to our adapter, which then converts it to a message format Chatlayer accepts.
For these API calls, as well as testing, we used &lt;a href=&quot;https://nestjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NestJS&lt;/a&gt;, an extension of NodeJS in TypeScript.
For the Telegram adapter, we used &lt;a href=&quot;https://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Boot&lt;/a&gt; and Java instead to experiment with different technologies.&lt;/p&gt;

&lt;p&gt;To get all useful information out of the Teams message, we use the &lt;a href=&quot;https://docs.microsoft.com/en-gb/azure/bot-service/javascript/bot-builder-javascript-quickstart?view=azure-bot-service-4.0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft BotFramework&lt;/a&gt;. 
During this conversion, we add a prefix to the id: &lt;code class=&quot;highlighter-rouge&quot;&gt;teams-prod:&lt;/code&gt;. 
This prefix makes it possible for the Gateway to know that the message came from the Teams bot in the production environment and thus send it back to the correct bot.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;TEAMSINDETAIL&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/TEAMSINDETAIL.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The BotFramework provides methods to get a conversation’s context, and reply to the correct user using that context.
Hence, we see the &lt;code class=&quot;highlighter-rouge&quot;&gt;turnContext.sendActivities()&lt;/code&gt; method used to reply to a user.
We used the NodeJS version of the BotFramework, and used a map to save the conversation references. 
The reference gets deleted right after the reply has been sent, so we didn’t need to worry about using a database to save the conversation.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;CONVERSATIONREF&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/CONVERSATIONREF.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since Chatlayer supports many types of replies, all of these had to be converted to the possible Teams messages.
Depending on the message type Chatlayer sent, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sendActivities()&lt;/code&gt; method has to send a different Activity.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;CONTINUECONV&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/CONTINUECONV.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there are the normal text messages, but also carousels and cards (of which there are multiple types). 
This variety can deliver very fun and engaging conversations, which can improve your user retention and experience.
Of course, the use of all these features depends heavily on the conversation topic and context.
You can see an example of all possible messages below.&lt;/p&gt;

&lt;table&gt;&lt;tr&gt;
&lt;td&gt;&lt;img alt=&quot;TEAMS1&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/TEAMS1.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;TEAMS2&quot; src=&quot;/img/2020-02-24-Chatbots-Introduction-and-a-Practical-Case/TEAMS2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;After working with chatbots during the past 6 months, I’m proud of what we’ve achieved so far. 
The FleetBot is being actively tested at JWorks and looking to go live for all Ordina Belgium employees.
Because of working closely with Chatlayer on the FleetBot project, we have initiated a partnership for future chatbot projects.
There already are a number of interesting projects coming up that we’re happy to be part of.
Having tested many chatbot providers, we can confidently make an assessment of which one would be best in any use case.&lt;/p&gt;

&lt;p&gt;What I’m most excited about is the versatility of chatbots. 
Want one in Telegram or Slack? &lt;br /&gt;
No problem, we can build that connection! &lt;br /&gt;
Want one that speaks Chinese, German and English? &lt;br /&gt;
Can do!&lt;/p&gt;

&lt;p&gt;Do you think your company could use a chatbot to raise user satisfaction, reduce your FAQ workload, or for anything else it could help out with?
Get in touch with &lt;a href=&quot;mailto:frederickbousson@ordina.be?subject=[Chatbots]%20Interest%20in%20chatbot%20project&quot;&gt;Frederick Bousson&lt;/a&gt;! &lt;br /&gt;
We can help you evaluate if a chatbot is indeed the way to go for your specific case and choose the correct provider for your needs.
After that, we will assist you in building the bot and build all necessary chat client connections.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mobilecoach.com/chatterbots-2-history-of-chatbots/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chatbot History&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/2011/02/17/science/17jeopardy-watson.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Watson Jeopardy!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://becominghuman.ai/a-simple-introduction-to-natural-language-processing-ea66a1747b32&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NLP Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nlp.stanford.edu/~wcmac/papers/20140716-UNLU.pdf#page=8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NLP vs NLU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chatlayer.ai/wp-content/uploads/downloads/big-bots-guide-20190626.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;10 Lessons Learned From Building Big Chatbots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jasper&quot;, &quot;last_name&quot;=&gt;&quot;Rosiers&quot;, &quot;github&quot;=&gt;&quot;jasperrosiers&quot;, &quot;linkedin&quot;=&gt;&quot;jasper-rosiers&quot;, &quot;permalink&quot;=&gt;&quot;/author/jasper-rosiers/&quot;, &quot;avatar&quot;=&gt;&quot;jasper-rosiers.png&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;jasper.rosiers@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jasper is a Java Developer with a love for IoT and innovative tech. He has a lot of experience in building chatbots using various platforms and coupling them to different chat clients. He also has a passion for the Agile way of working, Scrum and communication, both inside and outside the team.&quot;}</name><email>jasper.rosiers@ordina.be</email></author><category term="Machine Learning" /><category term="Chatbots" /><category term="Chatlayer" /><category term="DialogFlow" /><category term="Spring Boot" /><category term="NestJS" /><category term="Mocking" /><category term="TypeScript" /><summary type="html">Chatbots, they seem to be everywhere, and yet, there are a lot of people who have no idea what they are. I came home one day in October and told my parents and sisters I was building a chatbot at work. Their reaction: “You’re building a what now?”. So I took ten minutes to explain them what a chatbot is and does. In the end, they just said “So… It is a computer person?”. This post will feature a high-level explanation of what chatbots are and what they do, as well as a deep dive into chatbot providers and a technical implementation. In the end, we’ll look at a practical case of a chatbot: FleetBot Dina.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/chatbot.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/chatbot.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Marrying MongoDB Atlas and AWS Lambda</title><link href="https://ordina-jworks.github.io/cloud/2020/02/19/Combining-MongoDB-and-AWS-Lambda.html" rel="alternate" type="text/html" title="Marrying MongoDB Atlas and AWS Lambda" /><published>2020-02-19T00:00:00+00:00</published><updated>2020-02-19T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/02/19/Combining-MongoDB-and-AWS-Lambda</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/02/19/Combining-MongoDB-and-AWS-Lambda.html">&lt;h3 id=&quot;reading-time-10-min-30-sec&quot;&gt;Reading time: 10 min 30 sec&lt;/h3&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-and-aws-lambda-a-successful-marriage&quot;&gt;MongoDB and AWS Lambda: a successful marriage?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-and-aws-lambda-why&quot;&gt;Why?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-and-aws-lambda-performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cold-start-vs-warm-performance&quot;&gt;Cold start vs warm performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#performance-conclusion&quot;&gt;Performance conclusions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vpc-peering-connect-your-lambda-functions-with-your-mongodb-atlas-cluster&quot;&gt;VPC peering between AWS and MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#useful-links&quot;&gt;Useful links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mongodb-and-aws-lambda-a-successful-marriage&quot;&gt;MongoDB and AWS Lambda: a successful marriage?&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/rings.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Can we use MongoDB Atlas when working with AWS Lambda?&lt;br /&gt;
Yes we can! &lt;br /&gt;
It’s simple enough to setup and above all also performing well!&lt;/p&gt;

&lt;p&gt;This blog concerns mainly two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why would you use MongoDB + AWS Lambda and how does it perform&lt;/li&gt;
  &lt;li&gt;How to create a production grade setup with vpc-peering&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;
&lt;p&gt;As I am both a fan of AWS Lambda and MongoDB Atlas it was fun for me to marry them.&lt;br /&gt;
However in the real world we don’t do things for fun alone.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/mongodb-plus-aws-lambda.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;What are the motives to combine MongoDB Atlas and AWS Lambda?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Combine the serverless capabilities of Lambda with the MongoDB strong points&lt;/li&gt;
  &lt;li&gt;Payment model - In case of MongoDB you provision your cluster and you know what you’ll pay for it, clusters can grow with your business without downtime or code changes.&lt;/li&gt;
  &lt;li&gt;Flexible Data Acces - MongoDB has a rich query language and aggregation framework. On top of your data in MongoDB you can build nice dashboards for business intelligence. (eg. &lt;a href=&quot;https://www.mongodb.com/products/charts&quot;&gt;MongoDB Charts&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Indexes - Supports up to 64 indexes per collection with a wide variety of index types like hash, compound, unique, array, partial, TTL, geospatial, sparse, text and wildcard indexes&lt;/li&gt;
  &lt;li&gt;Large documents allowed. A MongoDB document can be up to 16 Mb.&lt;/li&gt;
  &lt;li&gt;Performance - a built-in cache and support for lots of secondary indexes that can span across arrays and subdocuments, making virtually all queries very fast&lt;/li&gt;
  &lt;li&gt;Tunable consistency&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Observability - MongoDB exposes more than 100 different metrics and has a built-in performance advisor. Because “you can’t optimize what you can’t measure.”&lt;/li&gt;
  &lt;li&gt;Platform capabilities&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Joinable documents &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;
&lt;p&gt;We are using AWS Lambda to store items in our MongoDB collection.&lt;br /&gt;
I want to measure the performance in two ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our Lambda Function has to setup a connection with the MongoDB cluster.
Since we are using Lambda we have to deal with a cold start if the lambda has not been invoked shortly before.
&lt;strong&gt;How is the cold start behavior when connections to the cluster have to be setup?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;When the Lambda has been invoked shortly before the connection is cached. 
&lt;strong&gt;How quickly does a save to the database happen when the Lambda Function is warm?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suppose you have setup access from your Lambda Functions to your MongoDB Atlas Cluster (If you want to know how to do just that, read more about it in the second part of this post).&lt;/p&gt;

&lt;p&gt;Since we are dealing with Lambda Functions we also have to deal with a phenomenon called “cold start”. 
This is the case for any Lambda Function no matter what database it connects to.
MongoDB mentions on there &lt;a href=&quot;https://docs.atlas.mongodb.com/best-practices-connecting-to-aws-lambda/&quot;&gt;website&lt;/a&gt; that there is an initial startup delay due to this.&lt;/p&gt;

&lt;p&gt;I am testing using the following setup:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/Architecture.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Items are coming in via requests through the API.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;APILambda&lt;/code&gt; drops the items on a queue.&lt;br /&gt;
A second Lambda Function &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveMongoDBLambda&lt;/code&gt; stores the items in the MongoDB database.
Of this second Lambda Function I will measure the performance:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;during a cold start&lt;/li&gt;
  &lt;li&gt;when the Lambda is already warm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other things important to know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the above setup I limit the maximum number of concurrently running Lambda Functions instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveMongoDBLambda&lt;/code&gt; to 10.&lt;/li&gt;
  &lt;li&gt;The Lambda Functions are written in &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt; which will add time to the coldstart performance compared to &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeJS&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In this case I am reading the items from the queue one by one. 
Also storing them one by one.
To optimize we would do this in batch.&lt;br /&gt;
Here we want to measure performance and we don’t want the batch size to vary.
So we store them one by one.&lt;/li&gt;
  &lt;li&gt;The lambda function runs in a VPC to be able to make a peering connection to the MongoDB Atlas Cluster.&lt;/li&gt;
  &lt;li&gt;The items that are being stored are only a few tens of bytes large.&lt;/li&gt;
  &lt;li&gt;In total 1000 items were inserted&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-results-analyzing-the-results-using-xray&quot;&gt;The results: analyzing the results using XRAY&lt;/h2&gt;
&lt;p&gt;I am using the AWS Xray SDK to trace and analyze the requests flowing through the application.&lt;/p&gt;

&lt;p&gt;Here is a graph showing you the &lt;code class=&quot;highlighter-rouge&quot;&gt;Response Distribution&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveMongoDBLambda&lt;/code&gt;. 
Hence, this is the time that the Lambda Function took to execute.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/response-distribution.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We notice two things.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The graph is heavily balanced to the left. 
Most of the requests took very little time.&lt;/li&gt;
  &lt;li&gt;On the right end of the spectrum we also see a couple of request. 
This are the cold starts that occur the first time a Lambda Function is invoked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the XRAY service map we can see that on average the Lambda Function took 174 milliseconds to execute.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/service-map.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cold-start-vs-warm-performance&quot;&gt;Cold start vs warm performance&lt;/h3&gt;
&lt;p&gt;We can further dissect a cold start with XRAY.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/coldstart.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We see that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bootstrapping the runtime and code in the vpc lambda took 1.7 seconds.&lt;/li&gt;
  &lt;li&gt;The initial connection is being made to the database which takes 5 seconds. 
This connection overhead is also there when using AWS native databases.
Though then it will be smaller.&lt;/li&gt;
  &lt;li&gt;Saving the actual item took 1.1 second.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s for the first execution of the Lambda Function.
How does this compare against a Lambda function that is already “warm”.
This is how most invocations typically hit your Lambda Function.
This means the boostrapping is already done and the connections are initialised.&lt;br /&gt;
We can also analyse a warm lambda with XRAY.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/warm-execution.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now we notice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Total execution took only 18 ms!&lt;/li&gt;
  &lt;li&gt;There is no longer any initialization overhead.&lt;/li&gt;
  &lt;li&gt;Storing the item took 6 ms!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-conclusions&quot;&gt;Performance conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Storing items in the database when the Lambda Function is already warm is blazingly fast.&lt;/li&gt;
  &lt;li&gt;Initializing the connection in case of a cold start adds time to the cold start.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vpc-peering-connect-your-lambda-functions-with-your-mongodb-atlas-cluster&quot;&gt;VPC peering: connect your Lambda Functions with your MongoDB Atlas Cluster&lt;/h1&gt;
&lt;p&gt;Want to know how to set up a VPC peering connection between your AWS VPC and MongoDB Atlas Cluster?
Read on..&lt;/p&gt;

&lt;p&gt;We want to deploy a production grade setup.&lt;br /&gt;
This means we won’t connect over the open internet.
We’ll setup a VPC peering connection between our Atlas Cluster and our AWS VPC.&lt;/p&gt;

&lt;h2 id=&quot;the-aws-side&quot;&gt;The AWS side&lt;/h2&gt;
&lt;p&gt;Let’s setup a new VPC.
In this VPC we will create a public subnet.&lt;br /&gt;
A route table will be associated with that subnet.
In the route table we’ll define that we want to route all database traffic through the VPC peering connection towards the Atlas cluster.&lt;/p&gt;

&lt;p&gt;In the AWS User Interface navigate to the VPC dashboard and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Launch VPC Wizard&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/1-VPC-dashboard.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Select that you want to create a VPC with a single public subnet.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/2-VPC-with-single-public-subnet.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Specify how big you want the IP range of this VPC to be.
If you have trouble figuring out the relation between the &lt;code class=&quot;highlighter-rouge&quot;&gt;CIDR block&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Network Range&lt;/code&gt; use one of the online converters to help you. (&lt;a href=&quot;https://www.ipaddressguide.com/cidr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.ipaddressguide.com/cidr&lt;/a&gt;) )&lt;br /&gt;
Give your VPC and public subnet a name.&lt;br /&gt;
Make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;enable DNS hostnames&lt;/code&gt; is enabled.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/3-VPC-with-single-public-subnet-2.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Your VPC has been successfully created.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/4-VPC-successfully-created.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If you now navigate to the subnet tab you see that a new subnet has been created.&lt;br /&gt;
When going to the route tables tab you see two new route tables.
That is a route table for your VPC and a route table specifically for your public subnet.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/5-new-subnet.png&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/6-new-route-tables.png&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Before we go to MongoDB Atlas get some specific data about your VPC:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;From the subnet tab write down the VPC-id and IPv4 CIDR for the new subnet that was just created.&lt;/li&gt;
  &lt;li&gt;Under the security group tab find the security group that is associated with your vpc.
Write this security group identifier down.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/7-security-group.png&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-mongodb-side&quot;&gt;The MongoDB side&lt;/h2&gt;

&lt;p&gt;Setup the MongoDB cluster.
&lt;strong&gt;This has to be a dedicated cluster which means you’ll need at least an M10.&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/Setup-m10-cluster.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Wait till your cluster is set up.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/m10-is-setup.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In the Atlas UI navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Security&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Network Access&lt;/code&gt;.&lt;br /&gt;
Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;+ new peering connection&lt;/code&gt; and select AWS as cloud provider.&lt;br /&gt;
The below screen will pop up. Here you have to specify some configuration.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Account ID: your AWS account Id which you can find under the ‘My Account’ in the AWS console&lt;/li&gt;
  &lt;li&gt;VPC-id: Fill in the VPC-id that you copied from the vpc that you just created in AWS&lt;/li&gt;
  &lt;li&gt;VPC CIDR: specify the CIDR block that you used to configure your vpc with on AWS&lt;/li&gt;
  &lt;li&gt;region: the region where you created the AWS vpc&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/8-setup-peering-connection-atlas.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Instantiate peering&lt;/code&gt; !&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/9-pending-peering-connection.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice that MongoDB created an &lt;code class=&quot;highlighter-rouge&quot;&gt;Atlas CIDR&lt;/code&gt; which specifies the IP range in which your Atlas cluster will reside.  Write this down, you will need it later on.
We are connecting the Atlas IP range with the IP range of our AWS VPC, hence VPC peering.&lt;/p&gt;

&lt;p&gt;The peering connection is now pending.&lt;/p&gt;

&lt;p&gt;Go back to AWS.&lt;/p&gt;

&lt;h2 id=&quot;the-aws-side-again&quot;&gt;The AWS side (again)&lt;/h2&gt;
&lt;p&gt;In the VPC service of AWS go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Peering Connections&lt;/code&gt;.&lt;br /&gt;
You will notice a new peering request with status &lt;code class=&quot;highlighter-rouge&quot;&gt;Pending Acceptance&lt;/code&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/10-aws-peering-connection-request.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Accept this peering request!&lt;/p&gt;

&lt;p&gt;Now you have to update your routing tables.
AWS will also ask you &lt;code class=&quot;highlighter-rouge&quot;&gt;Do you want to update your routing tables&lt;/code&gt; when you accept the peering request.  Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Modify my route tables now&lt;/code&gt;.
We will deploy our Lambda Functions in the public subnet of our VPC.
So we want to modify the route table that is associated with that subnet.
You can recognize that route table because it has an &lt;strong&gt;explicit subnet association&lt;/strong&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/11-modify-route-table.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Selecting the route table with an &lt;strong&gt;explicit subnet association&lt;/strong&gt; and click &lt;code class=&quot;highlighter-rouge&quot;&gt;edit routes&lt;/code&gt;.
Add a route towards your Atlas cluster as indicated in the image below.&lt;br /&gt;
What we are actually saying here is that we want to route all traffic to our Atlas cluster through the VPC peering connection.&lt;br /&gt;
As &lt;code class=&quot;highlighter-rouge&quot;&gt;Destination&lt;/code&gt; choose the Atlas CIDR and under &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; choose your VPC peering connection.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/12-edit-routes.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Updating the route table will update the status of the peering connection to &lt;strong&gt;available&lt;/strong&gt; in the Atlas UI.&lt;br /&gt;
This takes a couple of minutes.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/13-peering-available.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-your-lambda-functions&quot;&gt;Deploy your lambda functions!&lt;/h3&gt;

&lt;p&gt;Now it is time to deploy your Lambda Function in the VPC that you just configured.
This Lambda Function will connect to your MongoDB Atlas Cluster via the vpc-peering we have set up.&lt;/p&gt;

&lt;p&gt;I created a project that you can use to deploy a Lambda Function in your own vpc.
You can then use it to store items in your MongoDB collection.&lt;br /&gt;
The repository can be found &lt;a href=&quot;https://github.com/Nxtra/awslambda-mongodb-vpc-peering&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
Let me be clear and state that in a real world project you don’t want the password hard coded in the connection string.
An option is to put it into &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Secret Manager&lt;/code&gt; and have your lambda retrieve it there.&lt;/p&gt;

&lt;p&gt;You need to update certain config values in this project to make it work for your own vpc!
To deploy a Lambda Function in your VPC you have to configure the VPC config:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;use the pubic subnet that we just created&lt;/li&gt;
  &lt;li&gt;specify the security group of you AWS vpc
You also have to update the connection string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following instructions can also be found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; of the project.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;template.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;update the environment variable that specifies the connection string, database  and collection to your own connection string, database and connection.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Environment:
      Variables:
        MONGODB_CONNECTION_STRING: mongodb+srv://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;your-cluster&amp;gt;.mongodb.net/test?retryWrites=true&amp;amp;w=majority
        DATABASE: yourDatabaseName
        COLLECTION: yourCollectionName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;update the &lt;code class=&quot;highlighter-rouge&quot;&gt;VpcConfig&lt;/code&gt; with your own vpc security group and subnet:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    VpcConfig:
      SecurityGroupIds:
        - sg-01004aee8e2eb4f33
      SubnetIds:
        - subnet-028397e077f1f8e7a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deploy your Lambda functions to your VPC and test them out!
Run &lt;code class=&quot;highlighter-rouge&quot;&gt;./deploy.sh&lt;/code&gt; to deploy the Lambda Function to your account.
Running this script successfully will output the URL on which you can send an item through the API towards the Lambda Function.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/stack-outputs.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In the Lambda User Interface of the AWS Console you will now see that the Lambda Function has been deployed in the correct subnet with the right security group.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/14-lambda-in-vpc.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Use this URL that was outputted to trigger the Lambda Function.
This will return the &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectId&lt;/code&gt; of the item in your MongoDB collection!&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/invocation-result.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Yihaa! MongoDB and AWS Lambda are happily married!&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.atlas.mongodb.com/security-vpc-peering/&quot;&gt;https://docs.atlas.mongodb.com/security-vpc-peering/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/xray/&quot;&gt;https://aws.amazon.com/xray/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/compare/mongodb-dynamodb&quot;&gt;https://www.mongodb.com/compare/mongodb-dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educba.com/mongodb-vs-dynamodb/&quot;&gt;https://www.educba.com/mongodb-vs-dynamodb/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/blog/post/optimizing-aws-lambda-performance-with-mongodb-atlas-and-nodejs&quot;&gt;https://www.mongodb.com/blog/post/optimizing-aws-lambda-performance-with-mongodb-atlas-and-nodejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;Operations can be grouped in full ACID-compliant transactions at any scale. 
In any case, indexes are always kept in sync in realtime with the data so your users will always find and work with the latest, correct data.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Tunable consistency: a variety of consistency levels allowing client applications to select the trade-offs they want to make when it comes to the strongest consistency or the lowest latency. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Platform capabilities such as Full Text Search with Lucene, Stitch Serverless Platform with GraphQL support, Charts, managed triggers, more than 30 programming language drivers, Data Lake, analytics, Kafka 2-way connector &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Joining documents: when rich documents that are loosely coupled (users and invoices for instance) need to be queried, MongoDB can join documents together inside the database, making your code more light. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is passionate about cloud technology. He has major expertise in AWS and AWS serverless but he appreciates other clouds just as well. He wants to be ahead of change and thus he's also working with IoT and AI.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="MongoDB" /><category term="Cloud" /><category term="AWS" /><category term="AWS Lambda" /><category term="Serverless" /><summary type="html">Reading time: 10 min 30 sec</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/featured-image.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-02-19-Combining-MongoDB-Atlas-and-AWS-Lambda/featured-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">eXperience Agile 2019 - Part 2</title><link href="https://ordina-jworks.github.io/conference/2020/02/12/experience-agile-2019-part-2.html" rel="alternate" type="text/html" title="eXperience Agile 2019 - Part 2" /><published>2020-02-12T00:00:00+00:00</published><updated>2020-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2020/02/12/experience-agile-2019-part-2</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2020/02/12/experience-agile-2019-part-2.html">&lt;p&gt;Our first blogpost about the &lt;a href=&quot;https://www.experienceagile.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;eXperienceAgile conference&lt;/a&gt; covered four interesting talks.&lt;br /&gt;
However, those were not the only talks so this post will dive deeper into some of the other ones.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#leadership-in-a-scaling-agile-environment-by-leonoor-koomen---written-by-wouter-nivelle&quot;&gt;Leadership in a scaling agile environment, by Leonoor Koomen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-a-customer-value-engine-for-a-more-successful-company-by-mario-moreira---written-by-astrid-legrand&quot;&gt;Building a Customer Value Engine for a more Successful Company, by Mario Moreira&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-fluency-project---why-focusing-teams-rock-by-diana-larsen---written-by-michaela-broeckx&quot;&gt;Agile Fluency Project - Why focusing team rock, by Diana Larsen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;leadership-in-a-scaling-agile-environment-by-leonoor-koomen---written-by-wouter-nivelle&quot;&gt;Leadership in a scaling agile environment, by Leonoor Koomen - written by Wouter Nivelle&lt;/h2&gt;

&lt;p&gt;Another great talk from the eXperience Agile conference came from &lt;a href=&quot;https://twitter.com/agileonoor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Leonoor Koomen&lt;/a&gt;.&lt;br /&gt;
She talked about how leadership works in an agile environment.&lt;/p&gt;

&lt;p&gt;Why do companies want to start working in an agile manner?&lt;br /&gt;
It could be these 3 very important reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It &lt;strong&gt;reduces the time to market / volume&lt;/strong&gt;. A product can be released much faster.&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;breaks down silos&lt;/strong&gt;. People need to work together and share knowledge.&lt;/li&gt;
  &lt;li&gt;It &lt;strong&gt;increases engagement&lt;/strong&gt; from the people working in the company.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But very often, it’s more because &lt;strong&gt;agile is in fashion and because of the myth that agile will bring twice as much in half the time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When you read the above, it’s no surprise that agile projects often fail, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;project-failing-reasons&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-failing-reasons.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See the third reason, with 38%? 
Those projects fail because management doesn’t support them.&lt;br /&gt;
So leadership is very important in an agile environment!&lt;/p&gt;

&lt;p&gt;Leaders should:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bring a compelling why! Why do we do this project? What do we hope to achieve?  Why does the company exist?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;leadership-why&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-why.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bring focus, give clarity on what needs to be done, a certain direction, with measurable goals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;leadership-focus&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-focus.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Break silos, make teams work together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;leadership-break-silos&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-silos.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be accessible, be open for questions, criticism.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So leadership is very important and needs to inspire the various teams. Spotify is a big name and is used as an example for many companies. 
But Leonoor said:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I hate to break it to you, but you are NOT Spotify!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While Spotify can be used for ideas, you probably have different dependencies, stakeholders, situational problems and so on.&lt;br /&gt;
It’s thus very important to come up with a plan to scale.&lt;br /&gt;
How are you going to grow and handle problems?&lt;br /&gt;
Transparency is essential, but gets more difficult when you scale.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;leadership-transparency&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-transparency.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While growing, how are you going to handle the measurement of progress?&lt;br /&gt;
The most important measurement of progress is… &lt;strong&gt;a working product&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So stop asking for progress reports! Rather, create an environment for autonomy and alignment.&lt;br /&gt;
Give the teams autonomy to create the solution, while still providing the vision and alignment. 
Tell them what to do, but let them figure out the solution.&lt;/p&gt;

&lt;p&gt;The image below describes it perfectly.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;leadership-spotify-culture&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/leadership-spotify-culture.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The agile transformation is a challenge, but there’s hopeful news.&lt;br /&gt;
It’s a long journey, but it is possible to achieve.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every change, no matter how big or small, starts with the same word… YOU!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-a-customer-value-engine-for-a-more-successful-company-by-mario-moreira---written-by-astrid-legrand&quot;&gt;Building a Customer Value Engine for a more Successful Company, by Mario Moreira - written by Astrid Legrand&lt;/h2&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Building a Customer Value Engine for a more Successful Company&lt;/strong&gt; aims to give enterprise leaders tools and advice to maximize customer value with a high level of agility in their companies.&lt;/p&gt;

&lt;p&gt;Some methods explained during this workshop can also be easily used at a project level like, for instance, the five Rs model that helps to visualize the enterprise idea pipeline.&lt;/p&gt;

&lt;p&gt;This tool allows to visualize ideas and treat them from the moment the idea is evoked until the moment it is realized.&lt;br /&gt;
The process consists of five stages, Record – Reveal – Refine – Realize and Release, which corresponds to a &lt;strong&gt;break down&lt;/strong&gt; of the idea into a piece of work.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;5R Model 1&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/5R-model-1.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;recording-an-idea&quot;&gt;Recording an idea&lt;/h4&gt;
&lt;p&gt;At this stage of the process, when a new idea arises, it is documented. 
No decision has been taken on it so far, we do not know yet if this idea will be useful, if it will be accepted, developed, if it is a priority or if there are sufficient resources to work on it.&lt;/p&gt;

&lt;p&gt;During this first stage, the idea is simply recorded and documented. 
In an agile environment, not much time should be invested in this stage and particularly in the documentation because we don’t know if this idea will go further through the process.&lt;br /&gt;
This stage should then allow to understand the idea, to determine who the users and beneficiaries are and to quickly estimate the costs linked to this idea.&lt;/p&gt;

&lt;h4 id=&quot;revealing-the-idea&quot;&gt;Revealing the idea&lt;/h4&gt;
&lt;p&gt;During this stage of the process, the idea is added to the pool of ideas based on its value and priority. 
This is the moment when it is discussed and challenged among the stakeholders.&lt;/p&gt;

&lt;p&gt;The idea is refined in order to decide if the team will continue to work on it. 
Even if the idea is great, it doesn’t mean that it will be developed as constraints and dependencies may exist.&lt;/p&gt;

&lt;p&gt;It is at this stage of the process that those constraints are highlighted by the stakeholders or product owners. 
Following the discussions, the idea can be adapted in order to be realized and a team is selected to work on it.&lt;/p&gt;

&lt;h4 id=&quot;refining-the-idea&quot;&gt;Refining the idea&lt;/h4&gt;
&lt;p&gt;During the third stage, the idea is going to be more and more understood by the dedicated team. 
It is broken down into smaller and more precise increments in order to have a clear and detailed view of the idea.&lt;/p&gt;

&lt;p&gt;It is challenged and cut into new pieces of increments that are challenged as well and refined in order to create a backlog of clear functionalities the team will work on.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;5R Model 2&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/5R-model-2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;realizing-the-idea&quot;&gt;Realizing the idea&lt;/h4&gt;
&lt;p&gt;This refined idea is then decomposed into user stories.&lt;br /&gt;
Those user stories are documented and prepared by the team with the purpose to be developed.&lt;br /&gt;
The user stories are then added to a sprint, developed and tested in a team effort.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;5R Model 3&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/5R-model-3.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;releasing-the-idea&quot;&gt;Releasing the idea&lt;/h4&gt;
&lt;p&gt;The idea has now been transformed into a product that will be presented to end users. 
At this stage, the plan drafted by marketing and sales is executed and the new increment that is now on the market, ready to be used is communicated to the potential customers.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;5R Model 4&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/5R-model-4.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-of-the-five-rs-in-my-daily-work&quot;&gt;Use of the five Rs in my daily work&lt;/h3&gt;
&lt;p&gt;As an analyst within a Scrum team, my work can be structured around the 5 Rs model as explained below.&lt;/p&gt;

&lt;h4 id=&quot;recording-the-idea&quot;&gt;Recording the idea&lt;/h4&gt;
&lt;p&gt;Let’s use a concrete example of my work. 
The ‘UnIt’ application we are building automates as much as possible the management and payments of the indemnities to insured members when they are unable to work.&lt;/p&gt;

&lt;p&gt;However, this automation has limitations. 
For instance, not all claim amounts can be calculated automatically in some complex cases. 
The idea of allowing users to make certain calculations manually has therefore been evoked and added to the pool of ideas. 
The idea has been discussed and challenged.&lt;/p&gt;

&lt;h4 id=&quot;revealing-the-idea-1&quot;&gt;Revealing the idea&lt;/h4&gt;
&lt;p&gt;The idea is now in the pool of ideas, the backlog, according to its value and priority. 
Discussions over the idea are ongoing and questions are raised.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should users be allowed to make (all) calculations manually?&lt;/li&gt;
  &lt;li&gt;What are the risks? Are there limitations to this idea?&lt;/li&gt;
  &lt;li&gt;Are there legal constraints?&lt;/li&gt;
  &lt;li&gt;Should the idea be developed in priority, or should it wait in the pool of ideas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those discussions are conducted among product owners, analysts and developers. 
A sub-team is then created (with one analyst and developers) and is dedicated to the topic.&lt;br /&gt;
The needs are refined and the amount of work needed to develop the whole concept of manual calculations is estimated.&lt;/p&gt;

&lt;h4 id=&quot;refining-the-idea-1&quot;&gt;Refining the idea&lt;/h4&gt;
&lt;p&gt;The functionality needed to implement the manual calculations is now better understood by the sub-team responsible for this idea.&lt;br /&gt;
The functionality is discussed, refined and cut into smaller increments to obtain workable user stories. 
All user stories together make the manual calculations possible, but can be developed separately.&lt;/p&gt;

&lt;p&gt;The user stories are described in detail with preconditions, post-conditions, use cases for testing and dependencies, if any. 
The user stories are also technically discussed at this stage.&lt;/p&gt;

&lt;h4 id=&quot;realizing-the-idea-1&quot;&gt;Realizing the idea&lt;/h4&gt;
&lt;p&gt;User stories about the manual calculations have been presented to the entire team during a backlog refinement. 
They have been estimated with story points and because they were ready according to our Definition of Ready, they have been developed through several sprints.&lt;/p&gt;

&lt;h4 id=&quot;releasing-the-idea-1&quot;&gt;Releasing the idea&lt;/h4&gt;
&lt;p&gt;In my example, this stage happens in the demo of the new functionality for the manual calculations at the end of the sprints.&lt;br /&gt;
The manual calculations can be tested in the acceptance environment by the product owners and the final users.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An enterprise idea pipeline provides transparency of your options and allows you to quickly be aware of and respond to high-value work&lt;br /&gt;
M. Moreira&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;agile-fluency-project---why-focusing-teams-rock-by-diana-larsen---written-by-michaela-broeckx&quot;&gt;Agile Fluency Project - Why focusing teams rock, by Diana Larsen - written by Michaela Broeckx&lt;/h2&gt;

&lt;p&gt;Diana Larsen, or &lt;a href=&quot;https://twitter.com/DianaOfPortland&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@DianaOfPortland&lt;/a&gt;, was an honourable guest at eXperience Agile conference. 
Browsing her website FutureWorks Consulting, and googling her name, it becomes clear she had an amazing journey leading up to this &lt;em&gt;Agile Fluency Project&lt;/em&gt;, throughout which you can move the &lt;em&gt;Agile Fluency Model&lt;/em&gt; from idea to implementation, a model she co-created with James Shore.&lt;/p&gt;

&lt;p&gt;The concept of &lt;em&gt;fluency&lt;/em&gt; is omnipresent in most of her talks and articles, and related to that &lt;em&gt;team collaboration&lt;/em&gt; has been one of her primary topics throughout her career.&lt;/p&gt;

&lt;h3 id=&quot;what-is-fluency&quot;&gt;What is fluency?&lt;/h3&gt;

&lt;p&gt;Fluency is routine practice mastery that persists under stress. In Lean, we would call this &lt;em&gt;kata&lt;/em&gt;.
You could say it is the skillful ease that comes from investing in learning.&lt;/p&gt;

&lt;p&gt;That investment comes down to taking the time and making the effort for deliberate practice. 
By regularly and consistently practicing a skill with increasing levels of challenge and with the intention of mastering that skill, a state of fluency can be reached. 
The key is to not give up easily, and with that intent, to keep up your practice until it becomes a second nature… a bit like practicing your cycling skills as a kid, because you long to get rid of those silly training wheels.&lt;/p&gt;

&lt;h3 id=&quot;from-team-to-organisation&quot;&gt;From team to organisation&lt;/h3&gt;
&lt;p&gt;The Agile Fluency Model fist focuses on &lt;em&gt;team fluency&lt;/em&gt;, a form of fluency that transcends the individual practice, and just like a team is more than the sum of its parts, team fluency also depends on management structures, relationships, and organizational culture, as well as the tools, technologies, and practices the teams use. 
Team fluency is what you get when highly performant teams become unconsciously competent at collaborating and co-creating. 
Fluency is the outcome of investment in learning and deliberate practice, and for team fluency this means learning together as a team.&lt;/p&gt;

&lt;p&gt;There are a few stages before your team gets to fluency. 
You need to invest in mastering the agile fundamentals to help focus as a team and you need a shift in team skills to be able to build sustainability while delivering value. 
The Fluency model helps you discover the topics you can explore and practice to improve these aspects and make these shifts.&lt;/p&gt;

&lt;p&gt;From there onwards, the picture becomes broader and from teams we move to the organisational structure and culture. 
In the model, Diana and James offer the tools to help you dig deeper into these topics, and make it more clear for organisations what could be worth investing in to optimise organisational Agility, on a systemic level. 
To embed fluency in the organisations, they point out the need to invest in a cross-organisation focus and generate a shift in organisational culture.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;velocity-chart&quot; src=&quot;/img/2019-11-18-experience-agile-2019-part-2/team-to-organisation.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-aim-of-this-model&quot;&gt;What is the aim of this model?&lt;/h3&gt;
&lt;p&gt;There are no recipes for the &lt;em&gt;perfect&lt;/em&gt; agile transformation. 
And so the creators of this model wanted to move beyond the agile methodology ‘wars’ on what is the best way to implement agile. 
They wanted it to be a positive, inclusive model that promotes improvement, so that it can be used to continuously grow towards more agility, as an individual, as a team, as an organisation. 
In that sense it is a model that can guide your team to help create alignment with management, and chart your own agile pathway. 
But it doesn’t have to be a path to perfection. 
The way James Shore puts it, the idea is that you get off at the right bus stop, the one that fits your needs, and offers the benefit you want for your company. 
No need to go all the way to the terminal bus stop if that is not required in your story or context. 
Therefore it is not a maturity model per se, but more of a map for a hop-on-hop-off bus.&lt;/p&gt;

&lt;p&gt;Discover more about this topic on the &lt;a href=&quot;https://www.agilefluency.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Agile Fluency Project website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or buy a ticket to ride at Ordina. Our colleagues of &lt;a href=&quot;https://www.ordina.be/diensten/agile-enterprise/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AgileWorks&lt;/a&gt; can help you to get on that bus!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wouter&quot;, &quot;last_name&quot;=&gt;&quot;Nivelle&quot;, &quot;permalink&quot;=&gt;&quot;/author/wouter-nivelle/&quot;, &quot;avatar&quot;=&gt;&quot;wouter-nivelle.jpg&quot;, &quot;title&quot;=&gt;&quot;Scrum Master&quot;, &quot;linkedin&quot;=&gt;&quot;wouter-nivelle-34a90b31&quot;, &quot;email&quot;=&gt;&quot;wouter.nivelle@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wouter is a Scrum Master at Ordina Belgium. Passionate about agile. Eager to share knowledge. Not afraid of challenges. Always interested in learning and discovering new things.&quot;}</name><email>wouter.nivelle@ordina.be</email></author><category term="Conference" /><category term="Agile" /><category term="Conference" /><summary type="html">Our first blogpost about the eXperienceAgile conference covered four interesting talks. However, those were not the only talks so this post will dive deeper into some of the other ones.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-11-18-experience-agile-2019-part-2/ExperienceAgile2019Part2.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-11-18-experience-agile-2019-part-2/ExperienceAgile2019Part2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Architecture Effort in Projects</title><link href="https://ordina-jworks.github.io/architecture/2020/01/28/Architecture-in-Projects.html" rel="alternate" type="text/html" title="Architecture Effort in Projects" /><published>2020-01-28T00:00:00+00:00</published><updated>2020-01-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/01/28/Architecture-in-Projects</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/01/28/Architecture-in-Projects.html">&lt;p&gt;An architect is someone whose job it is to link various things together in a consistent, integrated, maintainable and sustainable way dixit Tom Graves of Tetradian Consulting. It is the job of the architect to translate the requirements into an architectural model, and to keep the noses of the different stakeholders in the development process pointed in the same direction. He does this for numerous reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guiding thought in himself&lt;/li&gt;
  &lt;li&gt;Guiding thought in others&lt;/li&gt;
  &lt;li&gt;Being able to answer questions asked of the architect&lt;/li&gt;
  &lt;li&gt;Being able to examine the results of requirement gathering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The architect doesn’t guide action, he guides thought. Normally, thought precedes action, but in real life this is by no means an absolute truth. Numerous times in software development we might dive in headfirst and see where we get without thinking of how to go about it first. The term cowboy is sometimes colloquially used for this type of software engineer.  Additionally, the role of the architect is to suggest action, as well as oversee that action to ensure that it achieves its goal (quality assurance). So, the architectural process serves to support a reasoning process (guiding thought). The architect repeatedly runs through the reasoning process, either for guidance on his own decisions or for framing into context the decisions he requires from others. The overall picture of the solution needs to be coherent over all components.&lt;/p&gt;

&lt;p&gt;When thinking about when during a project the architect should play a role, the tried and tested methodology of the Stage Gate Process immediately pops up. This approach divides product development process into five main stages. In between these stages, a number of gates are defined as guardians of the progression to the next stage. They outline the considerations to be taken into account in the decision to move forward to the next stage in the process. These considerations range from quality checklists to budgetary assessment, resources availability, market competence and even compliance with company guidelines and policies. The list can be quite extensive. The architect alongside several other stakeholders is an essential gatekeeper. He enhances the list of quality assurances with considerations from an architectural standpoint and makes sure they are met before moving on to the next phase of the project.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-01-24-Architecture-in-Projects/stage-gate-process.jpg&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;The Standard Stage-Gate process (Source: Stage-Gate International)&lt;/p&gt;

&lt;p&gt;The stages typically used in this approach are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stage 0 – Discovery/Idea Stage: The organization assesses its opportunities and capabilities in order to determine what is possible and advisable. This can be done through marketing research, innovation management, ideation sessions, blue ocean strategic efforts and other similar activities.&lt;/li&gt;
  &lt;li&gt;Stage 1 – Scoping Stage: The stakeholders determine the scope of the new product and assess its feasibility and potential.&lt;/li&gt;
  &lt;li&gt;Stage 2 – Business Case Stage: The stakeholders assess the financial aspects of costs and gains and weigh them against each other. There are numerous &lt;a href=&quot;https://www.evolute.be/thoughts/buscase.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;business case methodologies&lt;/a&gt; to do this, such as for example the &lt;a href=&quot;http://www.isaca.org/Knowledge-Center/Val-IT-IT-Value-Delivery-/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Val IT framework&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Stage 3 – Development Stage: Once the product is fleshed out in a positive business case, the development on the new product is done by one or more project teams.&lt;/li&gt;
  &lt;li&gt;Stage 4 – Test &amp;amp; Validation Stage: Often called Acceptance Testing, the various stakeholders assess the correctness and effectiveness of the newly developed product.&lt;/li&gt;
  &lt;li&gt;Stage 5 – Launch: The final stage for the product is to be put into production to start earning value for the organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is very much keyed on the waterfall approach of software development. In order to take this approach to the new insights gathered from iterative development and agile thinking, where there is a need for smaller iterations, greater scalability and accelerated development, the people at &lt;a href=&quot;https://www.stage-gate.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stage-Gate International&lt;/a&gt; developed a NexGen Stage Gate Model which allows for reduced stages after the initial Minimum Viable Product (MVP) launch. These smaller iterations are however also guarded by gates between each iteration.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-01-24-Architecture-in-Projects/stage-gate-nexgen.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;The NexGen Stage-Gate process (Source: Stage-Gate International)&lt;/p&gt;

&lt;p&gt;It might seem from the different illustrations that there is no gate after the Launch Stage. This is not the case. After going live there are several checks that are typically built in during the Go Live deployment as well as during a grace period after Go Live. There are no more stages to come in this model, but that doesn’t mean there is no more work to be done. A retrospective on the past project will benefit greatly from a gate checklist performed at this time, and down the line when doing a business case verification to see whether its initial assumptions holds up might also detect indicators of success/failure in this list that can be taken up the next time a business case in this context is written up. Should the need to upgrade or decommission the new solution in the future arise, this checklist could also highlight particularities otherwise forgotten that have could have an impact on these actions.&lt;/p&gt;

&lt;p&gt;Although the architect should and can play a role in every stage of the project, he tends to regard the project in a slightly different set of stages. It starts in the Plan phase where it aligns with the global analyses. It goes along with the entire design portion of the Build phase and extends further till the architecture is constructed, documented, validated and accepted. The effort ends when the solution enters the last step in its lifecycle and enters the Dispose phase. Its main activities do however change depending on which phase of the project is currently happening.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-01-24-Architecture-in-Projects/archphases.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Architectural Phases of a Project&lt;/p&gt;

&lt;p&gt;The first activities of the architecture effort focus mainly on gathering all relevant requirements that might influence the design. These requirements will also form the basis for the acceptance criteria stipulated by the gates between the phases. They can be divided into functional and non-functional requirements, where the latter can be divided into technical (such as integration, quality, and infrastructure requirements) and operational requirements (such as documentation, training, and managed services requirements).&lt;/p&gt;

&lt;p&gt;The solution architect works together with domain specialists, both business and technical, to guide and constrain the business and technical analyses from a technical perspective and should assist the analysts by informing them of technical information and possibilities. Through this exercise, business knowledge is acquired and high-level business and technical requirements are produced. The requirements should be listed as SMART statements: Specific, Measurable, Achievable, Realistic, and Timely. These requirements do not only structure the technical effort, but other disciplines such as business architecture and testing as well.&lt;/p&gt;

&lt;p&gt;The first version of a Solution Architecture (and its corresponding document) should be drafted as early as the Plan phase, when a first set of requirements becomes known, and an attempt at setting the scope ensues. This is sometimes called the Solution Architecture Blueprint. Next, throughout the project lifecycle the architecture version matures with the architect gaining more insight and detail of the to-be situation of the solution. As with most deliverables of a project, the solution architecture document will mature well into the Operate phase and even a bit of the Dispose phase with activities to keep the documentation up to date with reality.&lt;/p&gt;

&lt;p&gt;The Solution Architecture will be reassessed several times during the architecture effort. It should be considered a living document. Each time new requirements are detected, new insights are gathered, or new constraints are introduced, the architecture needs to go through a cycle of validation of the new requirements/constraints, which feeds into a new version of the architecture design, followed by an architecture presentation and review event. For instance, these new requirements and insights can be derived from proofs of concept (POC), which have been executed following an earlier version of the architecture and have exposed gaps in the solution.&lt;/p&gt;

&lt;p&gt;The following activities will be undertaken by the architect to achieve a steadily maturing architecture document:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Based on the previous architecture version, the detailed analysis will be executed by the analysts and/or more specialized domain architects. The solution architect has further the responsibility to streamline the correlation between this detailed analysis and his architecture. The solution architect provides technical information to the analysts; influences and aids the analysts’ decision making.&lt;/li&gt;
  &lt;li&gt;The solution architect gathers further information concerning the business and technical requirements. The solution architect thinks together with the business analysts and technical analysts in order to make the architectural decision, which can have immediate consequence on the analyses.&lt;/li&gt;
  &lt;li&gt;The solution architect is responsible for the validation and acceptation of the final requirements documents. The acceptation of the requirements means the solution architect agrees that the requirements documents are relevant, correct, complete and unambiguous not only for architectural decisions, but also later for design and construction phases.&lt;/li&gt;
  &lt;li&gt;The architect is also responsible for the follow-up of any Proof of Concepts that are to be performed as validation for the decided architecture. Based on the results of these POCs, an adapted version of the Architecture Document might be written out containing the conclusions of the POC.&lt;/li&gt;
  &lt;li&gt;The solution architect organizes the presentation and the review session for the proposed architecture. The presentation and review session can be omitted upon the agreement and decision from a technical project manager, sparring architect and project manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These revisitations of the solution architecture should however be limited as much as possible in order to avoid ‘scope creep’ and unhealthy amounts of rework. And if they are not avoidable, efforts should be made to detect these changes as soon as possible in order to limit the impact these changes will have on the existing solution.&lt;/p&gt;

&lt;p&gt;In summary, an architect will have a varying workload during all phases of the project. At the beginning of the project, the architect works together with the business and technical analysts to coordinate and guide the requirements gathering and analyses, resulting in a first mature version of the architecture. Further on, the technical analysis will be based on this version of the architecture document and will consolidate all the requirements in detail under the architect’s vigil. The architect oversees the detailed technical designs and organizes any POCs that are to be performed. Recurring actualization efforts are coupled with quality assurance of the implemented designs.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="Architecture" /><summary type="html">An architect is someone whose job it is to link various things together in a consistent, integrated, maintainable and sustainable way dixit Tom Graves of Tetradian Consulting. It is the job of the architect to translate the requirements into an architectural model, and to keep the noses of the different stakeholders in the development process pointed in the same direction. He does this for numerous reasons: Guiding thought in himself Guiding thought in others Being able to answer questions asked of the architect Being able to examine the results of requirement gathering</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-01-24-Architecture-in-Projects/architectureeffort.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-01-24-Architecture-in-Projects/architectureeffort.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">One repo to rule them all</title><link href="https://ordina-jworks.github.io/architecture/2020/01/23/Nx.html" rel="alternate" type="text/html" title="One repo to rule them all" /><published>2020-01-23T00:00:00+00:00</published><updated>2020-01-23T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/01/23/Nx</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/01/23/Nx.html">&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monorepo&quot;&gt;Monorepo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nx&quot;&gt;Nx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#full-stack-applications&quot;&gt;Full stack applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Imagine yourself working in a large organization with multiple teams, all working on an application that is part of the platform that the organization offers to its clients.
You get a set of requirements and start implementing your features.
After setting up your repository and all the tooling, you’re ready to go.
All goes well during the development process and you’ve come to the end to deliver your hard work.
After you’ve deployed your application on the platform, you’re introduced with a blank screen and a console log full of errors.&lt;/p&gt;

&lt;p&gt;How can this happen?
Your team followed the requirements and all the contracts that were defined to communicate with several services.
Maybe these contracts got outdated in the meantime without you knowing it?
Were there breaking changes introduced?
Or does a library you are using locally differ from the ones used in production and isn’t compatible anymore?
It’s really difficult for a large organization to manage all the separate projects and to maintain the overview of all of them.
The complexity will increase and after a while the whole platform becomes unmanageable.&lt;/p&gt;

&lt;h1 id=&quot;monorepo&quot;&gt;Monorepo&lt;/h1&gt;

&lt;p&gt;The problems mentioned above led large software companies to transition the management of their separate projects by bringing them together under one repository: the monorepo.
Inside the monorepo, you have all the applications working together while you’re developing your app.
You’ll get feedback immediately when the service you’re calling returns a different answer than expected or when the page you are navigating to is located on another path.
When you’re not sure how a service of the platform is working, you can just hop in the source code inside the repo to find out more about it.
Code sharing becomes a breeze, because all the code is available in one repository.
You don’t have to deal anymore with npm packages for shared code in your organization or with the separate configurations, pipelines and versions of the shared libs.
Because there is only one &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file, you can easily manage the versions and don’t have to deal with conflicting versions of the same dependency inside of your project.&lt;/p&gt;

&lt;p&gt;But how can you start setting up a monorepo and what tools are required to do so?
Having to manage all this code in one repo can be really tedious to set up but this is where Nx comes into play!&lt;/p&gt;

&lt;h1 id=&quot;nx&quot;&gt;Nx&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://nx.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nx&lt;/a&gt; provides you with the tools needed to help you develop in a monorepo.
Based on their own experiences, the creators of Nx set up the best practices to structure your repository in a maintainable way.
Nx is built on top of the Angular CLI, offering you a way to create workspaces and scaffolding out of your apps.
Next to Angular apps, Nx does support creating React apps, NestJS apps, and more.
You can even write your own builder to configure creating an app with the technology of your choice.&lt;/p&gt;

&lt;p&gt;The setup of the repo has to happen only once, so you don’t have the hassle of doing it yourself each time when starting a new app.
Moreover, you won’t have the risk of teams using a whole set of different tools.
This makes it more convenient to switch projects as well, because the experience over the monorepo will be more consistent.
The versions of dependencies will be consistent over the whole repository because you only have one &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file, so you don’t have to deal anymore with version conflicts of libraries that are being used in different apps.&lt;/p&gt;

&lt;p&gt;Starting with a new workspace is pretty straightforward.
Let’s imagine we want to start a webshop where we will sell Nx-phones:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx create-nx-workspace@latest nx-phone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nx will scaffold our workspace.
The root of the project contains &lt;code class=&quot;highlighter-rouge&quot;&gt;apps&lt;/code&gt; where our applications will reside, &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; for code sharing between our apps and &lt;code class=&quot;highlighter-rouge&quot;&gt;tools&lt;/code&gt; that enables us to write our own schematics.
You will write most of your code inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;apps&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; directories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-12-02-Nx/nx-workspace.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width: 360px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apps&quot;&gt;Apps&lt;/h2&gt;
&lt;p&gt;Now that our workspace is set up, we can add apps to it.
This can be done by different ways.
We will focus now on using the &lt;a href=&quot;https://cli.angular.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Angular CLI&lt;/a&gt;.
To add an Angular app, we first have to include the capability to create Angular apps with Nx.
Afterwards, we can create our first app called “shop”.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng add @nrwl/angular &lt;span class=&quot;nt&quot;&gt;--defaults&lt;/span&gt; // Add Angular capability
ng g @nrwl/angular:application shop // Add the shop app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can choose the stylesheet format and automatically set up routing while doing so.
When creating a new app inside your workspace, Nx will generate both the &lt;code class=&quot;highlighter-rouge&quot;&gt;shop&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;shop-e2e&lt;/code&gt; folder for your end-to-end tests. 
Running the following command using the Nx CLI will start up the shop app locally:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nx serve shop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;libs&quot;&gt;Libs&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; folder is where your shared code will reside.
If your organisation has a component library or a design system, then that would be a good candidate to be placed under &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt;.
You can also add all your code to the libs in separate modules like feature modules while using the app as a container.
Later on, you can use the features in the modules to compose your app.&lt;/p&gt;

&lt;p&gt;If you want to take a look at the full example, please check out the nx-phone workspace here:
&lt;a href=&quot;https://github.com/DimiDeKerf/nx-phone&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/DimiDeKerf/nx-phone&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Nx supports modern tools that you’re familiar with, without the sometimes tedious way of setting them up.
You can easily use Jest and Cypress to cover your testing needs, with great CLI support.
The unit and end-to-end tests are both configured for the shop app that we’ve just created. They can be run by using &lt;code class=&quot;highlighter-rouge&quot;&gt;nx test shop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nx e2e shop&lt;/code&gt;, respectively.
If you want to learn more about Jest or Cypress, be sure to check out the awesome blog posts that my colleagues have wrote:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/testing/2018/08/03/testing-angular-with-jest.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Testing Angular with Jest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/testing/2019/07/18/Cypress.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cypress: a new kid on the E2E block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-formatting&quot;&gt;Code formatting&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-12-02-Nx/prettier.png&quot; alt=&quot;Prettier&quot; class=&quot;image right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How do you like to have your code formatted?
There will be some differences between how others within your organization like to format their code.
Just thinking about the merge conflicts that will arise when people use different indentations may already give you shivers.&lt;/p&gt;

&lt;p&gt;Prettier comes included with Nx and is here to help you out with this.
It’s an opinionated code formatter that integrates well with most editors.
You’re tired of formatting your code before you want to commit something?
Prettier can also run in a pre-commit hook, so your code will get formatted before your commit.
More info can be found &lt;a href=&quot;https://prettier.io/docs/en/precommit.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dependency-graph&quot;&gt;Dependency graph&lt;/h2&gt;
&lt;p&gt;What if you change something in your code?
How can you be sure that your modification didn’t break another app?
This is hard to do when your apps live in separate repositories but becomes much more convenient with the help of Nx.
All your apps and libraries will be part of a dependency graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-12-02-Nx/dependency_graph.png&quot; alt=&quot;Dependency graph&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dependency graph will give you an up-to-date version of all the applications and services, and the dependencies between them.
It can also help you to get a better understanding of the architecture.&lt;/p&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;When new code is introduced or something has been refactored, Nx will be able to find out which dependencies are affected by your changes.
This gives you the opportunity to only build the affected dependencies and only run the tests of those affected ones.
For your build pipeline, that means that testing the affected apps can greatly improve the build time when dealing with large workspaces.&lt;/p&gt;

&lt;p&gt;For example, if we edit something in the shop app, our dependency graph will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-12-02-Nx/dependency_graph_affected.png&quot; alt=&quot;Dependency graph of affected apps&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Targeting the affected code can be done using the affected command.
For example, if you want to run the unit tests for the affected code:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nx affected:test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Inside of your CI, you would like to compare the changes between your branch and master.
This can be done by appending the two branches to the previous command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nx affected:test &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;origin/master &lt;span class=&quot;nt&quot;&gt;--head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;restrictions&quot;&gt;Restrictions&lt;/h2&gt;
&lt;p&gt;You may want to categorize libraries in different domains and limit the dependencies between those domains to improve maintainability.
Nx can help you with this, by restricting access between domains or by allowing the dependency flow to go only one way around.
To configure and manage these restrictions, you can apply tags in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nx.json&lt;/code&gt; file for apps and libraries.
Be aware to also update the linting rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;tslint.json&lt;/code&gt; to get feedback in your editor when violating those rules.&lt;/p&gt;

&lt;h1 id=&quot;full-stack-applications&quot;&gt;Full stack applications&lt;/h1&gt;
&lt;p&gt;With a monorepo, you can have both your frontend and your backend applications under the same repository.
This enables you to share code between them.
With Nx, you can do this by using libraries like mentioned before.
These libraries will expose the code using a public API.&lt;/p&gt;

&lt;p&gt;The code inside these libraries can be imported afterwards in your apps, without having to fetch them from a npm registry.
Think about how easily you can share an interface between your frontend and backend, without having to break it on one side.
Whenever something changes in the API, both sides will get updated so they will both remain in sync.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Having worked within a monorepo myself for the last months, I really appreciate the way it improved the daily workflow.
It encourages me to write more reusable code and to keep features small.
Other teams may have the same requirements, so code can be easily migrated to libs.
It is important to manage the different features and libs though, before they turn up to be a massive dump of code that isn’t maintainable anymore.
Switching between features is much easier and accessible, since I don’t have to check out another repository or getting familiar with the way of working of another team.
Overall, I feel more connected with other developers and with the platform while building apps in the same repository.&lt;/p&gt;

&lt;p&gt;If you’re interested in setting up a monorepo, be sure to check out Nx!
It will help you tremendously with getting started.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dimitri&quot;, &quot;last_name&quot;=&gt;&quot;De Kerf&quot;, &quot;permalink&quot;=&gt;&quot;/author/dimitri-de-kerf&quot;, &quot;avatar&quot;=&gt;&quot;dimitri-de-kerf.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;dimitri.de.kerf@ordina.be&quot;, &quot;github&quot;=&gt;&quot;DimiDeKerf&quot;, &quot;bio&quot;=&gt;&quot;Dimitri is a Frontend and Mobile developer at Ordina Belgium. He enjoys writing user friendly apps in a clean, maintainable way. Dimitri loves new technologies and is eager to try them out.&quot;}</name><email>dimitri.de.kerf@ordina.be</email></author><category term="Architecture" /><category term="Monorepo" /><category term="Nx" /><category term="Angular" /><category term="NestJS" /><summary type="html">Intro Monorepo Nx Full stack applications Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-12-02-Nx/nx-logo.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-12-02-Nx/nx-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An Introduction to Spring Data JDBC</title><link href="https://ordina-jworks.github.io/java/2020/01/02/Spring-Data-Jdbc.html" rel="alternate" type="text/html" title="An Introduction to Spring Data JDBC" /><published>2020-01-02T00:00:00+00:00</published><updated>2020-01-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/java/2020/01/02/Spring-Data-Jdbc</id><content type="html" xml:base="https://ordina-jworks.github.io/java/2020/01/02/Spring-Data-Jdbc.html">&lt;blockquote&gt;
  &lt;p&gt;A new member is added to the Spring Data family. Spring Data JDBC is positioned between Spring Data JPA and Spring JDBC using the best elements of both.
This post will describe the current state and the future of this product. It will also explain which problems this product is trying to solve and how.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-jdbc-vs-spring-data-jdbc-vs-spring-data-jpa&quot;&gt;Spring JDBC vs Spring Data JDBC vs Spring Data JPA&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#project-differences&quot;&gt;Project Differences&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#inserting-data&quot;&gt;Inserting Data&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#querying-the-database&quot;&gt;Querying The Database&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#updating-an-instance&quot;&gt;Updating an Instance&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#advantages-of-using-spring-data-jdbc&quot;&gt;Advantages of Using Spring Data JDBC&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#better-design&quot;&gt;Better Design&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#easier-to-understand&quot;&gt;Easier to Understand&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#should-i-use-it&quot;&gt;Should I Use It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Spring Data JDBC is a new member of the Spring Data family. 
It is created to fill a void that sits between Spring JDBC and Spring Data JPA.
If you look at Spring JDBC, you could argue that it is too low level to work because it only helps with the connection to the database.
Spring Data JPA could seem too complex because it gives you a lot of options and it can be difficult to master all these options. 
Spring Data JDBC is a framework that tries to give you the same power you get from using Spring Data JPA but makes it more understandable by using DDD principles.
It also gives you more control by working on a lower level and by letting you decide when database interactions need to be done like Spring JDBC, but in an easier way. 
In the rest of this article the differences between Spring Data JPA, Spring Data JDBC and Spring JDBC will be shown.
This will hopefully show you that Spring Data JDBC is a very nice product with a lot of potential that is designed to help you.&lt;/p&gt;

&lt;h2 id=&quot;spring-jdbc-vs-spring-data-jdbc-vs-spring-data-jpa&quot;&gt;Spring JDBC vs Spring Data JDBC vs Spring Data JPA&lt;/h2&gt;

&lt;h3 id=&quot;project-differences&quot;&gt;Project Differences&lt;/h3&gt;
&lt;p&gt;Spring JDBC, Spring Data JPA and Spring Data JDBC are all three based on a different mindset. 
Based on these mindsets, you can see differences in how these technologies need to be used and how some parts need to be structured.
Spring JDBC only helps with the connection to the database and with executing queries on this database.
Spring Data JPA wants to help you manage your JPA based repositories. 
It wants to remove boilerplate code, make implementation speed higher and provide help for the performance of your application.
Spring Data JDBC also wants to provide help with access to relational databases, but wants to keep the implementations less complex.&lt;/p&gt;

&lt;h4 id=&quot;spring-jdbc&quot;&gt;Spring JDBC&lt;/h4&gt;
&lt;p&gt;The help that Spring JDBC provides is by providing a framework to execute SQL. 
Spring JDBC handles the connection with the database and lets you execute queries using JdbcTemplates.
This solution is very flexible because you have complete control over the executed queries.
You are also free to define your class structure because you are in complete control of the mapping.&lt;/p&gt;

&lt;h4 id=&quot;spring-data-jpa&quot;&gt;Spring Data JPA&lt;/h4&gt;
&lt;p&gt;Spring Data JPA uses entities, so the class structure needs to be comparable with the database structure because some mapping is done automatically.
In the most simple form, the database tables will each represent an entity and can be mapped almost directly on an entity class.
This mapping can be done by using Java configuration. By using annotations you can define on which table the class is mapped but also how the tables are linked together.&lt;/p&gt;

&lt;p&gt;A class is seen as an Entity when it is annotated with the @Entity annotation.
The most common links are @OneToMany, @ManyToOne and @ManyToMany.
For example if class A has a @OneToMany relationship to class B then the database scheme will have a foreign key in table B to table A and the JPA implementation will keep a list of linked B elements in entity A.
There are almost no restrictions on how entities can be linked together.
This means there is total freedom to design your class structure how you want, but it also means that you need to be wary that you don’t cause problems like circular dependencies.
It also means that nothing prevents you from creating a complex structure which is not easily understandable, especially understanding how your class structure translates to your database structure.
So you will always need to think how your class structure decisions impact your database.&lt;/p&gt;

&lt;p&gt;For example it is easy to define a data structure with a many-to-many relationship or with bi-directional relationships. 
When you translate this to your database structure you will need intermediate tables and create references to the unidirectional relationships.&lt;/p&gt;

&lt;h5 id=&quot;example&quot;&gt;Example:&lt;/h5&gt;

&lt;p&gt;In this example there are some classes that can be used in Spring Data JPA. 
They represent a part of the domain model that will also be used in the rest of this article.
A RentalCompany contains rentals. These rentals hold the information about which Car is rented and when.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     
        &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;company_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
     
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     
        &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;company&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jdbc&quot;&gt;Spring Data JDBC&lt;/h4&gt;
&lt;p&gt;When you use Spring Data JDBC, you will also need to create entity classes which will be mapped to the database.
The big difference is that there are more rules that you need to follow when you create the class structure.
The class structure needs to follow the rules of aggregate design of DDD.
Spring Data enforces this because this will lead to the creation of more simple and understandable projects.
If you don’t know this concept or why it is useful, you can check a very good article about this: &lt;a href=&quot;https://dddcommunity.org/library/vernon_2011/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Effective Aggregate Design by Vaugn Vernon&lt;/a&gt;.
Basically we group different entities together which have a strong coupling and we call them aggregates.
The top entity of the aggregate is called the aggregate root.
There are some other rules that need to be followed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An entity can only be part of 1 aggregate.&lt;/li&gt;
  &lt;li&gt;All relations inside an aggregate need to be unidirectional.&lt;/li&gt;
  &lt;li&gt;The aggregate root needs to manage the top relation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that by following links starting from the aggregate root, every entity inside the aggregate can be found.
Because of this, we do not need a repository for each entity like in Spring Data JPA, but only for the aggregate roots.
To link entity classes together to form an aggregate, you need to use object references.
Entity classes inside an aggregate can only have one-to-one relationships and one-to-many relationships. 
If you have a one-to-one relationship your entity only needs an object reference to the other object. 
When you have a one-to-many relationship your entity needs to contain a collection of object references.
To create relations to entities outside the aggregate, id’s need to be used to get a low coupling between these classes.&lt;/p&gt;

&lt;p&gt;A big difference in creating the classes used by Spring Data JDBC versus Spring Data JPA is that no @Entity and no relation annotations like @OneToMany need to be used.
Spring Data JDBC knows a class is an aggregate root when it contains a repository for that class. 
And because of the rules that the aggregate entities are connected through object references, Spring Data JDBC also knows what the aggregates are and can transfer data to the database as aggregates.&lt;/p&gt;

&lt;h5 id=&quot;example-1&quot;&gt;Example:&lt;/h5&gt;
&lt;p&gt;In the following example you can see how the domain model that was introduced in the example of Spring Data JPA can be implemented in Spring Data JDBC.
In this implementation there are 2 aggregate roots RentalCompany and Car. 
Rental is part of the aggregate of RentalCompany. 
This domain model will also be used in the other examples inside this article to compare the differences between the three frameworks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;licensePlate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;inserting-data&quot;&gt;Inserting Data&lt;/h3&gt;
&lt;p&gt;For the insertion of data you need to use the tools that were created in the previous section. 
If you use Spring JDBC you will write queries that are executed directly on the database by JdbcTemplate.
If you insert data with Spring Data JPA or Spring Data JDBC, you can use the entity or aggregate system that was created.&lt;/p&gt;

&lt;h4 id=&quot;spring-jdbc-1&quot;&gt;Spring JDBC&lt;/h4&gt;
&lt;p&gt;With Spring JDBC you write your insert statements yourself and execute them with a JdbcTemplate.
The advantage of writing all the queries yourself is that you have complete control over them.&lt;/p&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example:&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nc&quot;&gt;SingleConnectionDataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SingleConnectionDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDriverClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.hsqldb.jdbcDriver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:hsqldb:data/jdbcexample&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;nc&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;create table car (id int, model varchar)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;insert into car (id, model) values (1, 'Volkswagen Beetle')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jpa-1&quot;&gt;Spring Data JPA&lt;/h4&gt;
&lt;p&gt;If you use Spring Data JPA for inserting data, you will need to use the repositories and the entities.
This makes it possible to think on a higher level and let Spring Data JPA handle the creation of queries.
When you want to create data for an entity, the only thing you need to do is create an object with the correct values and call the save method on your Spring Data repository.
Spring Data JPA will then look at your entities with all their annotations to map them to the necessary insert or update statements.&lt;/p&gt;

&lt;h5 id=&quot;example-3&quot;&gt;Example&lt;/h5&gt;

&lt;p&gt;The example below shows how to insert &lt;code class=&quot;highlighter-rouge&quot;&gt;Rental&lt;/code&gt; data in the database with Spring Data JPA.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RentalService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RentalRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentalRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jdbc-1&quot;&gt;Spring Data JDBC&lt;/h4&gt;
&lt;p&gt;Spring Data JDBC uses a syntax that is comparable to Spring Data JPA.
The biggest differences are under the hood.
The management of the persistence is handled by the repository like in Spring Data JPA, but only the aggregate root has a repository.
This means that if you want to insert or update data, the entire aggregate needs to be saved.
You will need to call the save method of the repository of the aggregate root and this will first save the aggregate root and then all of the referenced entities get saved.
If you want to insert only a part of an aggregate, for example only create a new Rental, then the whole aggregate will be updated and the referenced entities will be deleted and inserted again.&lt;/p&gt;

&lt;h5 id=&quot;example-4&quot;&gt;Example&lt;/h5&gt;

&lt;p&gt;The example shows how a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rental&lt;/code&gt; is added. If you want to create a new instance of the aggregate root, then the code is comparable to that of Spring Data JPA.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompanyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RentalCompanyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addRental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompany&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rentalCompany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRentals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;querying-the-database&quot;&gt;Querying The Database&lt;/h3&gt;
&lt;p&gt;To retrieve data from our database, we write queries.
Spring JDBC will let you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt; and let you map the result with a RowMapper.
Spring Data JDBC and Spring Data JPA will also let you create queries, using JPQL or SQL queries, but you will write them in the repositories and the frameworks will help you with the mapping.&lt;/p&gt;

&lt;h4 id=&quot;spring-jdbc-2&quot;&gt;Spring JDBC&lt;/h4&gt;
&lt;p&gt;The main tool that Spring JDBC uses for querying is the &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt;.
The downside of using this is that it only provides the connection, everything else you need to do yourself.
If you search for objects, you will need to map the results to Java objects by implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;RowMapper&lt;/code&gt;.
You will also need to do the exception handling by creating a ExceptionTranslator.&lt;/p&gt;

&lt;p&gt;I will show you a simple example of how a query is created.&lt;/p&gt;

&lt;h5 id=&quot;examples&quot;&gt;Examples&lt;/h5&gt;

&lt;p&gt;This response needs to be mapped by implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;RowMapper&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRowMapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;COLOR&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBrand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BRAND&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MODEL&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This mapper can be passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt; that will use it to create populated Java objects.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM CAR WHERE ID = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jpa-2&quot;&gt;Spring Data JPA&lt;/h4&gt;

&lt;p&gt;When you use the Spring Data framework, it will help you with building your queries and fetching the right data.
The Spring Data JPA framework uses implementations of the JPA specifications like Hibernate. They make it possible to query the database using user friendly interfaces.
When you want to query the database, instead of writing the entire query yourself, Hibernate will help you. 
There are multiple ways to query the database using Spring Data JPA, but they all need you to extend the repository of the entity you want to query.&lt;/p&gt;

&lt;p&gt;Some basic queries can be written using derived queries. An example of this is findById. 
For these methods Spring Data will generate the SQL entirely on its own. More information about how derived queries can be defined can be found in the &lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.details&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Data documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you need to write more advanced queries that can’t easily be defined as a derived query, you can define the query yourself using the @Query annotation.
Inside the @Query annotation you write JPQL or SQL statements. JPQL is an SQL-like syntax that provides an abstraction layer on top of regular SQL. 
When JPQL is used, it is possible for Spring Data to help you with handling the data. For example paging and sorting can be done by simply adding a parameter.&lt;/p&gt;

&lt;p&gt;If you want to have a bit more control, you can use SQL by setting the native property of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Query&lt;/code&gt; annotation to true. 
Then you don’t use this extra layer, but it then also can’t help you anymore.
Be aware that even though you use SQL directly, you will still return entities that are managed by Hibernate.&lt;/p&gt;

&lt;p&gt;Apart from helping you with more easily defining which query you want to execute, it also helps you with fine tuning performance.
You are using entities when you query using Spring Data JPA. These entities have connections to other entities.
Spring Data JPA will help you with defining whether you want to return these connected entities directly or not. 
It can help you with searching for these entities when you do need them.
This is called eager and lazy loading and this can all be managed by Spring Data JPA.&lt;/p&gt;

&lt;p&gt;It will also try to improve performance by giving you the option to turn on the query cache.
When this is turned on, Spring Data JPA will try to reuse the generated SQL queries, and if possible the results of these queries.&lt;/p&gt;

&lt;h5 id=&quot;examples-1&quot;&gt;Examples&lt;/h5&gt;

&lt;p&gt;The service that calls a repository to get all rentals with a given CarType.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RentalService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RentalRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentalRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRentalsByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByCompanyIdAndCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The repository uses a derived query to expose this functionality.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PagingAndSortingRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByCompanyIdAndCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jdbc-2&quot;&gt;Spring Data JDBC&lt;/h4&gt;
&lt;p&gt;Spring Data JDBC has less abstractions than Spring Data JPA, but uses Spring Data concepts to make it easier to do CRUD operations than Spring JDBC.&lt;/p&gt;

&lt;p&gt;It sits closer to the database because it does not contain the most part of the Spring Data magic when querying the database.
Every query is executed directly on the JDBC and there is no lazy loading or caching, so when you query the database, it will return the entire aggregate.&lt;/p&gt;

&lt;p&gt;Currently when you want to add a method to your repository in Spring Data JDBC, you need to add an @Query annotation which contains the query.
This needs to be pure SQL instead of JPQL which is used in Spring Data JPA. You can compare this best with the native queries that are added to Spring Data JPA.
Because Spring Data JDBC sits so close to the database, it is, like native queries in Spring Data JPA, not possible to have paging and sorting repositories.
These types of repositories will be added in the future. This is like the derived queries functionality which is also not yet implemented but will be in the future.&lt;/p&gt;

&lt;p&gt;When you query the application using Spring Data JDBC, instead of entities, you will receive the entire aggregate. 
This makes the application easier to understand. 
The application doesn’t need to rely on an application context to get the state of properties of returned entities.
Because the entire objects are fetched, there are no extra calls needed to receive the field values of objects that were not loaded yet because all the fields are already filled in.
The disadvantage of this system could be that too much data will be loaded. 
But if that happens, it could be that the boundary of your aggregate is too big and it is possible that you need to split up your aggregate.&lt;/p&gt;

&lt;h5 id=&quot;examples-2&quot;&gt;Examples&lt;/h5&gt;

&lt;p&gt;When we try to do the same thing as we did in Spring Data JPA in Spring Data JDBC, then you need to go at it differently.
The first difference is that we can’t use the RentalRepository because it does not exist. 
It does not exist because Rental is not an aggregate root, but is part of the aggregate with aggregate root RentalCompany. 
This is why we now need to use the RentalCompanyRepository.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompanyService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RentalCompanyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRentalsByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rentalRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByIdAndCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other difference is that we cannot use derived queries, so we need to use the @Query annotation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentalCompanyRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RentalCompany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;FROM Rental rental &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;JOIN Car car ON car.id = rental.car_id &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;WHERE rental.rental_company = :companyId &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;AND car.type = :carType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findRentalsByIdAndCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;companyId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;companyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;updating-an-instance&quot;&gt;Updating an Instance&lt;/h3&gt;

&lt;p&gt;When you want to update an instance in the database, you will need to write a query and execute it using the &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt; or use the domain model in Spring Data JPA or Spring Data JDBC.&lt;/p&gt;

&lt;h4 id=&quot;spring-jdbc-3&quot;&gt;Spring JDBC&lt;/h4&gt;

&lt;p&gt;Spring JDBC again only provides a framework when updating data from the database. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt; exposes an update method. This method can accept a query and optional parameters.&lt;/p&gt;

&lt;h5 id=&quot;example-5&quot;&gt;Example&lt;/h5&gt;

&lt;p&gt;A simple code example where we update the color of a given car.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;update Car set color = ? where id = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jpa-3&quot;&gt;Spring Data JPA&lt;/h4&gt;

&lt;p&gt;Spring Data JPA provides more tools to update the data, like the proxy around the entities.
The state of these entities is stored in a persistence context.
By using this, Spring Data JPA is able to keep track of the changes to these entities.
It uses the information of these changes to keep the database up to date. 
Spring Data JPA makes managed entities from these entities.
Instead of always needing to create queries to update data in the database, we can edit these entities. 
These changes will then always be persisted automatically. 
This tracking is called dirty tracking because when you change the entities, these updates are making the entity “dirty” since the state is different than in the database.
When the Hibernate session is flushed, these changes will be persisted and the entity will be “clean” again.
This will only be done for changes within a transaction. 
If the changes are not done within a transactional context, you will have to call the save method of the repository to persist those changes.&lt;/p&gt;

&lt;p&gt;If you want to make bigger changes, it is also possible to create update methods in the repositories. 
Like querying the database and creating entities, you can also create methods in the repository. 
Using JPQL you can create a query which can update multiple entities at once. 
Please make sure to add the @Modifying annotation. 
This is a security measure so you cannot modify something by mistake.&lt;/p&gt;

&lt;h5 id=&quot;example-6&quot;&gt;Example&lt;/h5&gt;

&lt;p&gt;If you want to change the color on all hatchback cars, you can do this in different ways. I will give three.&lt;/p&gt;

&lt;p&gt;If you do it in a transaction, the dirty tracking will take care of the changes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;       &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
           &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you do it without a transaction, you also need to add an implementation to instruct Hibernate to persist the changes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;       &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A third way you can do this is by queries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;       &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
           &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;nd&quot;&gt;@Modifying&lt;/span&gt;
           &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Update Car car &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;SET car.color = :color &quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;WHERE car.type = :carType &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;spring-data-jdbc-3&quot;&gt;Spring Data JDBC&lt;/h4&gt;
&lt;p&gt;Spring Data JDBC does not have a persistence context like Spring Data JPA.
This makes Spring Data JDBC in my opinion more straightforward than Spring Data JPA.
If you want to make changes to the data, you are responsible for handling the persistence.
If you do not call the save method in the repository, the changes will not be persisted.&lt;/p&gt;

&lt;p&gt;You also have the choice to update the aggregates using self-written queries. 
Like I already mentioned, these queries are executed directly on the database, without the use of an abstraction like Hibernate.
Updating the data is done by calling the save method on the repository of the aggregate.&lt;/p&gt;

&lt;p&gt;Because Spring Data JDBC does not contain a persistence context like Spring Data JPA, it does not know which part of the aggregate is updated. 
Therefore it will update the aggregate root and delete all the referenced entities and save them all again.
As a downside, entities will sometimes be deleted and inserted even if they were not updated, which could be a waste of resources.
The big advantage is that you are sure that the entire entity will be up to date after saving the aggregate.&lt;/p&gt;

&lt;h5 id=&quot;examples-3&quot;&gt;Examples&lt;/h5&gt;

&lt;p&gt;Suppose we want to change the colors of all colors of a same type like we did in the example of Spring Data JPA.&lt;/p&gt;

&lt;p&gt;You can do it like example 2 of Spring Data JPA.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;       &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carsWithType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              
          &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT * &quot;&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;FROM Car car &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;WHERE car.type = :carType &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another way you can do this is by an update query which is the same as the Spring Data JPA example. 
If we want to update a part of an aggregate, 
we would need to go through the aggregate root since the aggregate root maintains consistency for the whole aggregate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;       &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
           &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateColorOfCarsWithCarType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rentalCompanyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
           &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UPDATE Car car &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;SET car.color = :color
                   &quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)
           List&amp;lt;Rental&amp;gt; updateColorOfCarsWithCarType(@Param(&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;) String color, @Param(&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;advantages-of-using-spring-data-jdbc&quot;&gt;Advantages of Using Spring Data JDBC&lt;/h2&gt;
&lt;h3 id=&quot;better-design&quot;&gt;Better design&lt;/h3&gt;
&lt;p&gt;One of the biggest advantages that you can get from using Spring Data JDBC is that it will force you to follow the rules of DDD design like using aggregates.
A great explanation why this design can help you can be found &lt;a href=&quot;https://dddcommunity.org/library/vernon_2011/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because only one-to-many relationships are used, it makes it easier to see what the exact relationships are between the classes.
Classes can only be part of 1 aggregate. Together with the one-to-many rule this makes it impossible to create circular dependencies.
If you need to create relationships between aggregates, you need to use id’s. This makes the coupling between the aggregates as small as possible.&lt;/p&gt;

&lt;p&gt;It is also clear where the logic of the interactions with the data can be found because only the aggregate roots have repositories because they are responsible for these interactions.&lt;/p&gt;

&lt;h3 id=&quot;easier-to-understand&quot;&gt;Easier to Understand&lt;/h3&gt;
&lt;p&gt;Only the aggregate roots are responsible for handling the persistence. This makes it clear what needs to be persisted and who is responsible for doing this.
Because the persistence always needs to be initiated by calling the save method, it makes it easier to understand when changes will be persisted than with Spring Data JPA.&lt;/p&gt;

&lt;p&gt;It is easy to see what classes are part of an aggregate since aggregates are connected using object references. When id’s are used, those classes are part of different aggregates.
When you query the database, instead of the lazy loading which is standard in Spring Data JPA, every call using Spring Data JDBC is done using eager loading. 
Every time you need data, a call to the database will be done because no caches are used.
Together these rules make sure that it is easy to know when a call to the database will be done (always), what parts of the data are returned from the database calls (entire aggregate) and it is easy to know what these aggregates are composed of.&lt;/p&gt;

&lt;p&gt;Because you are responsible for saving when something needs to be saved, and when you do a call through a repository, the entire aggregate is returned. 
The result of this is that you need to do a little bit more yourself, but it also gives you complete control of the entire data flow.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;
&lt;p&gt;With Spring Data JDBC you have a little more control which query will be executed on the database since it is executed directly on the JDBC instead of going through a middle layer.
All the queries are eager, this is also an advantage because less queries need to be sent to the database.&lt;/p&gt;

&lt;p&gt;When you create or update entities in an aggregate through Spring Data JDBC, it will do this by deleting and again saving these entities.
Spring Data JDBC needs to do this since it does not have a persistence context and wants to make sure that everything is up-to-date. 
The downside of this is that it is possible that sometimes unnecessary operations will be executed.&lt;/p&gt;

&lt;p&gt;With Spring Data JPA you have more possibilities for fine tuning performance. For example with the possibility of using the lazy loading and the usage of a cache.
Because of these possibilities it is also more difficult to create a configuration for a good performance.&lt;/p&gt;

&lt;h2 id=&quot;should-i-use-it&quot;&gt;Should I Use It?&lt;/h2&gt;
&lt;p&gt;Spring Data JDBC is in my opinion a very nice addition to the Spring Data family with lots of potential. 
With the release of Spring Data JDBC 1.1 it became a lot more stable. If you know the rules to follow, it is now very easy to create a simple application using this technology.
There are already a lot of advantages to using Spring Data JDBC and these advantages will only grow when features will be added to it.&lt;/p&gt;

&lt;p&gt;There are also some drawbacks. The biggest drawback is that it is rather new, version 1.0 was released less than 2 years ago. 
It is also still rather difficult to find a lot of information about this technology so if you will use this technology you will need to reserve some time to experiment.&lt;/p&gt;

&lt;p&gt;In this case I would advise to at least try the technology out because of the big potential.
I have had a lot of fun trying out this technology and I noticed that it really helped me create a good application.
This technology hits a sweet spot between Spring JDBC and Spring Data JPA by using the best of both worlds. On top of that they also added some nice DDD principles.&lt;/p&gt;

&lt;p&gt;So in short, go out and try it out!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Wout&quot;, &quot;last_name&quot;=&gt;&quot;Meskens&quot;, &quot;github&quot;=&gt;&quot;meskensw&quot;, &quot;linkedin&quot;=&gt;&quot;meskenswout&quot;, &quot;permalink&quot;=&gt;&quot;/author/wout-meskens/&quot;, &quot;avatar&quot;=&gt;&quot;wout-meskens.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;wout.meskens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Wout is a Java Developer at Ordina Belgium who also is interested in cloud technologies. He likes to keep learning new things and improve his knowledge about the newest technologies.&quot;}</name><email>wout.meskens@ordina.be</email></author><category term="Java" /><category term="Java" /><category term="Spring" /><category term="Data" /><category term="JDBC" /><category term="JPA" /><summary type="html">A new member is added to the Spring Data family. Spring Data JDBC is positioned between Spring Data JPA and Spring JDBC using the best elements of both. This post will describe the current state and the future of this product. It will also explain which problems this product is trying to solve and how.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/spring.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/spring.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Augmented Reality to create an indoor navigation system with ViroReact</title><link href="https://ordina-jworks.github.io/iot/2019/12/20/ar-signpost.html" rel="alternate" type="text/html" title="Using Augmented Reality to create an indoor navigation system with ViroReact" /><published>2019-12-20T00:00:00+00:00</published><updated>2019-12-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2019/12/20/ar-signpost</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2019/12/20/ar-signpost.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context&quot;&gt;Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Mobile applications based on GPS such as Waze or Google Maps have proven to be very useful in guiding us to our destination.
With such applications, it’s easy to find your way to a destination, even in an unfamiliar city.
However, it is still easy to get lost indoors, where GPS satellite signals are not accurately trackable for navigation applications.
For example, I’m sure that more than one of us has been lost more than once in a shopping mall or airport looking for our way to our destination and not knowing in which direction to go, it’s a frustrating situation right? 
Well this is the problem we are trying to solve with this proof of concept (PoC) project.&lt;/p&gt;

&lt;p&gt;In this blogpost, I will introduce the concept of using augmented reality with the aim of creating a navigation system that can help people orient themselves and navigate within large buildings.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;Before beginning to explain the workings of this PoC project, let me introduce the two main concepts, which are &lt;strong&gt;augmented reality&lt;/strong&gt; and &lt;strong&gt;Indoor Positioning Systems&lt;/strong&gt;, to give a little context so you can better understand the overall working.&lt;/p&gt;

&lt;h3 id=&quot;augmented-reality&quot;&gt;Augmented reality&lt;/h3&gt;

&lt;p&gt;One of the terms that will appear a lot in this blogpost is Augmented Reality or AR which is the foundation of this PoC.
AR allows us to add layers of visual information about the real world around us using devices such as our own smartphones.
This helps us to generate experiences that provide relevant knowledge about our environment, and we also receive that information in real time.&lt;/p&gt;

&lt;p&gt;Speaking of AR what better example to give than &lt;a href=&quot;https://www.pokemongo.com&quot;&gt;Pokémon Go&lt;/a&gt;.
This game has revolutionized the industry of AR-based games and has become, in a matter of days, the most popular Smartphone game in history.
Another good example is &lt;a href=&quot;https://www.ikea.com/be/nl/customer-service/shopping-at-ikea/applis-ikea-pub1fb256d1&quot;&gt;IKEA Place&lt;/a&gt; which is an application that includes a wide variety of furniture, sofas, armchairs and stools in 3D so that we can see thanks to the AR how they would look in our house, showing the size that would occupy each product.
Isn’t it amazing?&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/pokemon-go.gif&quot; class=&quot;image fit&quot; style=&quot;margin:5px auto; width: 50%; height: display: inline-block;&quot; /&gt;
&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/ikea-place.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 50%; display: inline-block;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;These two examples show that AR can be as much fun as it is useful.
Here’s an &lt;a href=&quot;https://www.forbes.com/sites/bernardmarr/2019/03/01/the-10-best-real-world-examples-of-augmented-reality/#6aa2816b42d8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;interesting article&lt;/a&gt; from Forbes showing how revolutionary this technology can be in industries like education, health care, tourism and more.
Also in 2017, &lt;a href=&quot;https://ordina-jworks.github.io/author/kevin-van-den-abeele/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kevin Van den Abeele&lt;/a&gt; together with &lt;a href=&quot;https://ordina-jworks.github.io/author/michael-vandendriessche/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Michael Vandendriessche&lt;/a&gt; wrote a fantastic &lt;a href=&quot;https://ordina-jworks.github.io/iot/2017/12/20/Virtual-Reality.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; that introduces the concept of Augmented Reality in an understandable way.&lt;/p&gt;

&lt;h3 id=&quot;indoor-positioning-system&quot;&gt;Indoor Positioning System&lt;/h3&gt;

&lt;p&gt;Before explaining what Indoor Positioning Systems is, let’s first look at the types of Positioning Systems that exist today and their uses.
These systems are mechanisms that allow us to detect the position of objects or events in a context or in a coordinate system.&lt;/p&gt;

&lt;p&gt;We can differentiate between global and local:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Global Positioning Systems (GPS) consist of a network of satellites in geosynchronous Earth orbits that send signals that allow the receiver to calculate the distance at which these satellites are located and thus be able to calculate their position.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Local Positioning Systems (LPS) allow us to reach the same objective in a similar way but using local mechanisms instead of satellites (telephone towers, WiFi access points, …) and calculating the position locally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Indoor Positioning Systems (IPS)&lt;/strong&gt; are specific cases of LPS whose particularity is that they aim to position objects or events within a space not exposed to the open air as shown in the image below. The principles are similar in all cases, but their particularities make them different.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;IPS&quot; src=&quot;/img/2019-12-20-ar-signpost/ar-signpost-IPS.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this PoC we combine IPS with augmented reality without any external mechanism like sensors to determine the position, just the IPS principle.
Later below I will explain how we did it.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This PoC project consists of two frontend applications and a backend:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile application&lt;/li&gt;
  &lt;li&gt;Web application&lt;/li&gt;
  &lt;li&gt;REST API&lt;/li&gt;
  &lt;li&gt;Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These parts work together to accomplish the goal of helping people to navigate inside large buildings with the help of AR and they are presented below along with a brief description of the role each plays and its most important functionalities. The interaction between them will be explained later in order to understand the functioning of the system as a whole.&lt;/p&gt;

&lt;h3 id=&quot;mobile-application&quot;&gt;Mobile application&lt;/h3&gt;

&lt;p&gt;The main functionality of this application is to guide users with signals and paths drawn visually with the help of AR as you can see in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto; max-width: 25%&quot;&gt;
 &lt;a href=&quot;/img/2019-12-20-ar-signpost/ar-signpost-mobile-app.png&quot; data-lightbox=&quot;ui&quot;&gt;
&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/ar-signpost-mobile-app.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Main functionalities are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ability to scan QR code markers to locate users within a building.&lt;/li&gt;
  &lt;li&gt;Guide users to their destination with visual indications such as lines and arrows using AR.&lt;/li&gt;
  &lt;li&gt;The possibility to search and select destinations within a building.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;used-technologies&quot;&gt;Used technologies&lt;/h4&gt;

&lt;p&gt;The reason for choosing React Native for the mobile application is due to its compatibility with the two major mobile platforms, Android and iOS.
Another reason is its native performance as our goal was to develop an application capable of general AR natively on Android and iOS and that was thanks to the ViroReact platform.
Next, the technical parts of these technologies are explained in more detail.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/2019-12-20-ar-signpost/logo-react-native.png&quot; style=&quot;max-width: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;react-native&quot;&gt;React Native&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; is a multi platform framework to develop native mobile applications that is based on JavaScript and React that uses a concept similar to React’s VirtualDOM, since we also have JSX components, which will be different from HTML components and will have other tags and other names because HTML is not used.&lt;/p&gt;

&lt;p&gt;What happens is that the React Native compiler will convert them into native interface elements for Android and iOS, which will allow these applications to have a look and feel similar to native applications, a practically equal performance and a navigation and user experience very similar to native applications, since what is being generated is native interface.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/2019-12-20-ar-signpost/logo-viroreact.png&quot; style=&quot;max-width: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;viroreact&quot;&gt;ViroReact&lt;/h5&gt;

&lt;p&gt;The technology used to create AR in this project is &lt;a href=&quot;https://viromedia.com/viroreact&quot;&gt;ViroReact&lt;/a&gt; which is a platform to develop augmented reality and virtual reality applications using React Native.
The platform supports ARKit and ARCore for the development of AR, thus encompassing the two major augmented reality development platforms under one platform.
ViroReact consists of two main components, a native 3D rendering engine and a custom React extension for AR and VR development.&lt;/p&gt;

&lt;p&gt;Some of the advantages of ViroReact are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an application from scratch or add AR/VR features to an existing application.&lt;/li&gt;
  &lt;li&gt;Possibility of mobile multi platform using the same code base.&lt;/li&gt;
  &lt;li&gt;Like React Native, it allows to check the changes made only by updating the app.&lt;/li&gt;
  &lt;li&gt;Easy to learn as it uses a markup language, which makes it quite intuitive.&lt;/li&gt;
  &lt;li&gt;It is an open source platform, which allows you to find code that can be reused in your application.&lt;/li&gt;
  &lt;li&gt;It is not necessary to use Xcode or Android Studio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2018, &lt;a href=&quot;https://ordina-jworks.github.io/author/ryan-de-gruyter/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ryan De Gruyter&lt;/a&gt; together with &lt;a href=&quot;https://ordina-jworks.github.io/author/michael-vandendriessche/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Michael Vandendriessche&lt;/a&gt;  wrote an interesting &lt;a href=&quot;https://ordina-jworks.github.io/iot/2018/06/27/viroreact.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; that teaches how to create augmented reality with ViroReact.&lt;/p&gt;

&lt;h3 id=&quot;web-application&quot;&gt;Web application&lt;/h3&gt;

&lt;p&gt;This web application is intended for administrators who are allowed to manage the system as a whole as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/ar-signpost-web-app.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Main functionalities are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upload a plan of a building to have a reference on which to work.&lt;/li&gt;
  &lt;li&gt;Ability to manage destinations and routes within a building having as reference the plan of a building.&lt;/li&gt;
  &lt;li&gt;Ability to manage and print QR code markers to be used as reference points in the physical world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;used-technologies-1&quot;&gt;Used technologies&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/2019-12-20-ar-signpost/logo-react.png&quot; style=&quot;max-width: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;react&quot;&gt;React&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; is a library written in JavaScript, developed on Facebook to facilitate the creation of web applications in a more orderly way and with less code than if you use pure Javascript or libraries like jQuery focused on the manipulation of the DOM.
It allows views to be associated with data, so if the data changes, so do the views.&lt;/p&gt;

&lt;p&gt;React uses what is called the virtual DOM which is a representation of the DOM but in memory, which React uses to significantly increase the performance of components and frontend applications.
Basically, when a view is updated, React takes care of updating the Virtual DOM, which is much faster than updating the browser’s DOM (real DOM).
When React compares the Virtual DOM with the DOM of the browser, it knows exactly which parts of the page to update and saves the need to update the entire view.&lt;/p&gt;

&lt;h3 id=&quot;rest-api&quot;&gt;REST API&lt;/h3&gt;

&lt;p&gt;The REST API is responsible for connecting the two frontend applications with the database to provide the functionalities and data necessary to carry out navigation in a building.&lt;/p&gt;

&lt;h4 id=&quot;used-technologies-2&quot;&gt;Used technologies&lt;/h4&gt;

&lt;p&gt;Our goal here was to develop a REST API capable of carrying CRUD operations to serve our frontend with the necessary data and functionalities such as providing points of interest to the mobile application or creating them from the web application with the help of an administrator.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/2019-12-20-ar-signpost/logo-nestjs.png&quot; style=&quot;max-width: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;nestjs&quot;&gt;NestJS&lt;/h5&gt;

&lt;p&gt;The framework used to create our backend is &lt;a href=&quot;https://nestjs.com/&quot;&gt;NestJS&lt;/a&gt; which is a framework based on NodeJS and TypeScript that abstracts you from the use of Express and Socket.io through decorators, has injection of dependencies “inspired” in Angular and allows to modularize our applications applying concepts of orientation to objects and functional and reactive programming.&lt;/p&gt;

&lt;p&gt;The official documentation is another of its strong points that you can find &lt;a href=&quot;https://docs.nestjs.com/&quot;&gt;here&lt;/a&gt; and there is an &lt;a href=&quot;https://github.com/nestjs/nest&quot;&gt;official repository&lt;/a&gt; with many didactic examples.&lt;/p&gt;

&lt;h3 id=&quot;database&quot;&gt;Database&lt;/h3&gt;

&lt;p&gt;We needed a database capable of representing real-world entities such as points of interest and their relationships in a graphical way and that’s when we came across the fantastic database Neo4j. Below are the advantages offered by this graphical database.&lt;/p&gt;

&lt;h4 id=&quot;used-technologies-3&quot;&gt;Used technologies&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;image fit&quot; alt=&quot;AWS Fargate&quot; src=&quot;/img/2019-12-20-ar-signpost/logo-neo4j.png&quot; style=&quot;max-width: 100px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&quot;neo4j&quot;&gt;Neo4j&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt; uses graphs to represent data and the relationships between them.
A graph is defined as any graphical representation formed by vertices (illustrated by circles) and edges (shown by intersection lines).
As shown in the image below.&lt;/p&gt;

&lt;p&gt;Databases oriented to graphs such as Neo4j perform better than relational (SQL) and non-relational (NoSQL).
The key is that, although data queries increase exponentially, Neo4j’s performance does not decrease, as opposed to relational DBs such as MySQL.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Now that these applications have been introduced, we are going to look at the interaction between them in order to better understand the functioning of the system as a whole.&lt;/p&gt;

&lt;p&gt;Let’s start from the perspective of the user who has access to the mobile application as seen in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
 &lt;a href=&quot;/img/2019-12-20-ar-signpost/ar-signpost-general-architecture.png&quot; data-lightbox=&quot;ui&quot;&gt;
&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/ar-signpost-general-architecture.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Let’s put your favorite mall on the scene for a moment.
In this mall you would find markers with QR codes strategically placed so that they are visible, and you have easy access to them. Each QR contains contextual information such as a unique identifier and the building and floor in which it is located.&lt;/p&gt;

&lt;p&gt;Imagine you are looking for a particular shop, the first step would be to scan the marker closest to you with the mobile application.
This would send the information contained in the QR to our REST API and it would take care of obtaining the necessary information from the database by querying the information obtained from the QR.
This information will be sent back to the mobile application, which contains all the points of interest around you, such as shops, escalators and much more.
Now it’s time for the funniest part of the process, to visualize these points of interest with AR as shown in the following video.&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/Gmcl8uDneng&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Are you wondering how this happens? Well this process is carried out with the ViroReact platform.
First of all, we must take into account that the AR world is three-dimensional, so we have x, z and y-axis as shown in the image below.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto; width: 50%&quot;&gt;
 &lt;a href=&quot;/img/2019-12-20-ar-signpost/x-y-z-axis.png&quot; data-lightbox=&quot;ui&quot;&gt;
&lt;img alt=&quot;ikea space&quot; src=&quot;/img/2019-12-20-ar-signpost/x-y-z-axis.png&quot; class=&quot;image fit&quot; style=&quot;background-color: white&quot; /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The AR scene starts from the point where the camera is located, which is usually [x=0, y=0, z=0] and the objects are located around it with different coordinates.
In this case we are going to focus only on x and z-axis because y-axis represents the height of the objects so it will be constant.&lt;/p&gt;

&lt;p&gt;The points of interest we receive contain geographic coordinates (latitude and longitude) where they are located in the real world.
The AR world does not understand geographic coordinates, so we have to convert these GPS coordinates to point x, z and y-axis in meters taking as reference the initial position of the AR camera.
For this we use a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_Mercator_projection&quot;&gt;Web Mercator projection&lt;/a&gt; and in this way, we have our points of interest integrated into the real world as shown in the video above.&lt;/p&gt;

&lt;p&gt;Going back to our example before the mall, you wondered how this system would be implemented in a mall, didn’t you? 
Well there, the web application intended for administrators or operators who are responsible for indicating where each point of interest is located in the building comes into play.
The process is shown in the following video.&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/h1IWW1Jx5yE&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As shopping malls, hospitals, airports, universities and other indoor spaces become more complex, the need for indoor navigation systems increases. 
The lack of GPS support in indoor environments has always made this a challenge. 
But with augmented reality, it is possible to solve this problem as demonstrated in this blogpost.&lt;/p&gt;

&lt;p&gt;Applications that implement Augmented Reality are able to improve the user experience through their numerous current applications and the potential they offer for the future. 
These systems can significantly improve many areas of our lives. 
From navigating airports to shopping malls, AR can take us to our destination much faster than ever before.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.forbes.com/sites/bernardmarr/2019/03/01/the-10-best-real-world-examples-of-augmented-reality/#6aa2816b42d8&quot;&gt;The 10+ Best Real-World Examples Of Augmented Reality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Positioning_system&quot;&gt;Positioning system&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mercator_projection&quot;&gt;Mercator projection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot;&gt;React Native&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/viromedia/viro&quot;&gt;ViroReact&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nestjs.com/&quot;&gt;NestJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://neo4j.com/developer/&quot;&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Mohammed&quot;, &quot;last_name&quot;=&gt;&quot;Laghzaoui&quot;, &quot;github&quot;=&gt;&quot;laghzaouim&quot;, &quot;linkedin&quot;=&gt;&quot;mohammed-laghzaoui&quot;, &quot;permalink&quot;=&gt;&quot;/author/mohammed-laghzaoui/&quot;, &quot;avatar&quot;=&gt;&quot;mohammed-laghzaoui.png&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;title2&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;mohammed.laghzaoui@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Mohammed is a software engineer with a passion for developing innovative applications. He is well-versed in technology and writing code to create systems that are reliable and user-friendly. He is a skilled developer who has a capacity to solve problems and the ability to work excellently within a team. He loves to develop software customized to meet a company’s organizational needs, focusing on their core competencies, and their success. He is very passionate about artificial intelligence and automation.&quot;}</name><email>mohammed.laghzaoui@ordina.be</email></author><category term="IoT" /><category term="React" /><category term="React Native" /><category term="ViroReact" /><category term="Virtual Reality" /><category term="Augmented Reality" /><category term="Neo4j" /><category term="NestJS" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-12-20-ar-signpost/ar-signpost-banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2019-12-20-ar-signpost/ar-signpost-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">KotlinConf 2019</title><link href="https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019.html" rel="alternate" type="text/html" title="KotlinConf 2019" /><published>2019-12-18T00:00:00+00:00</published><updated>2019-12-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/12/18/KotlinConf-2019.html">&lt;blockquote&gt;
  &lt;p&gt;KotlinConf is thé conference to visit if you’re into Kotlin development.
JetBrains introduced KotlinConf in 2017 in San Francisco with over 1.200 participants and 50 speakers.
In 2018 it took place in Amsterdam with over 1.300 participants and 60 speakers.
This year the conference was hosted in Denmark’s Copenhagen at the Bella Center, Scandinavia’s largest conference center.
Five colleagues of Ordina Belgium’s JWorks unit were very enthusiastic to attend the conference for the first time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/collage-1.jpg&quot; alt=&quot;KotlinConf photo collage #1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#day-one&quot;&gt;Day one&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#opening-keynote-by-hadi-hariri-and-andrey-breslav&quot;&gt;Opening Keynote by Hadi Hariri and Andrey Breslav&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#putting-down-the-golden-hammer-by-huyen-tue-dao&quot;&gt;Putting Down the Golden Hammer by Huyen Tue Dao&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kotless---kotlin-serverless-framework-by-vladislav-tankov&quot;&gt;Kotless - Kotlin serverless framework by Vladislav Tankov&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-the-fp-is-kotlin-by-shelby-cohen-and-katie-levy&quot;&gt;What the F(P) is Kotlin? by Shelby Cohen and Katie Levy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#your-first-server-with-ktor-by-big-nerd-ranch&quot;&gt;Your First Server with Ktor by Big Nerd Ranch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#new-product-announcement-by-hadi-hariri-maxim-shafirov-and-maarten-balliauw&quot;&gt;New Product Announcement&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#day-two&quot;&gt;Day two&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-shuttle-case-by-stephen-carver&quot;&gt;The Shuttle Case by Stephen Carver&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-state-of-kotlin-support-in-spring-by-sebastien-deleuze&quot;&gt;The state of Kotlin support in Spring by Sebastien Deleuze&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-kotlin-for-data-science-by-roman-belov&quot;&gt;Using Kotlin for Data Science by Roman Belov&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#whats-new-in-java-19-the-end-of-kotlin-by-jake-wharton&quot;&gt;What’s new in Java 19: The end of Kotlin? by Jake Wharton&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kotlin-in-space-by-maxim-mazin&quot;&gt;Kotlin in Space by Maxim Mazin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#going-native-how-i-used-kotlin-native-to-port-6-years-of-android-game-code-to-ios-in-6-months-by-ana-redmond&quot;&gt;Going Native: How I used Kotlin Native to Port 6 years of Android Game Code to iOS in 6 months by Ana Redmond&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-it-all-up&quot;&gt;Summing it all up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-one&quot;&gt;Day one&lt;/h1&gt;
&lt;h2 id=&quot;opening-keynote-by-hadi-hariri-and-andrey-breslav&quot;&gt;Opening keynote by &lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hadi Hariri&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/abreslav&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Andrey Breslav&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Hadi Hariri&quot; src=&quot;/img/kotlinconf-2019/hadi-hariri.jpg&quot; /&gt;&lt;/span&gt;
Hadi kicked off the keynote by saying that this year is the third time that KotlinConf has sold out once again with over 1.700 participants.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2019/11/kotlinconf-2019-live-join-the-broadcast-attend-the-qa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;free live stream&lt;/a&gt; of all the different rooms would be made available for anyone to attend.
Some additional numbers were given: the conference counted over 60 speakers, 35 volunteers and there were people visiting the conference from over 86 countries.
The final session of the day would be about a new product announcement of JetBrains, followed by an evening party.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Andrey Breslav&quot; src=&quot;/img/kotlinconf-2019/andrey-breslav.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hadi then introduced Andrey Breslav, CTO and Lead Language Designer of Kotlin.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-1-intro-andrey-breslav.jpg&quot; alt=&quot;Intro Andrey Breslav&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;evolution-of-kotlin&quot;&gt;Evolution of Kotlin&lt;/h3&gt;
&lt;p&gt;Andrey continued with some numbers on the usage of Kotlin for each of the major versions:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Kotlin version&lt;/th&gt;
      &lt;th&gt;Usage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;200.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.1&lt;/td&gt;
      &lt;td&gt;500.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;2.100.000 people&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.3 (current version)&lt;/td&gt;
      &lt;td&gt;4.000.000 people&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can clearly see that Kotlin keeps growing at a really nice rate which looks very promising for the language.
For JetBrains, important numbers like these, validate the quality of their product.
For them it was clear from the beginning that Kotlin had to have an open ecosystem.
One welcome to every body and open to anyone who wants to build on top of Kotlin.
It was always meant to be more than just a piece of software, it was meant for people united by ideas.&lt;/p&gt;

&lt;p&gt;Andrey went a bit deeper on the Kotlin ecosystem and explained that they wanted Kotlin to become a default language regardless of the level of experience, platform, scale or type of application.
For them to achieve that, it was all about lowering barriers.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-2-kotlin-ecosystem.jpg&quot; alt=&quot;Kotlin Ecosystem&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;different-platforms&quot;&gt;Different platforms&lt;/h3&gt;
&lt;h4 id=&quot;server-side&quot;&gt;Server-side&lt;/h4&gt;
&lt;p&gt;Kotlin has been friends with Spring for a long time by now.
The first official support arrived since 2017 with Spring Boot, Web MVC, and Web Flux coroutines support.
Ktor, used for building asynchronous servers and clients in connected systems and also developed by JetBrains, is gaining more traction and is also used more and more at JetBrains.
Some other companies that have been using it are Expedia, Intuit and the Norway Tax Office.&lt;/p&gt;

&lt;h4 id=&quot;android&quot;&gt;Android&lt;/h4&gt;
&lt;p&gt;Android has been Kotlin-first since this year.
53% of professional Android developers work in Kotlin and 60% of the top 1.000 apps have been written in Kotlin.&lt;/p&gt;

&lt;p&gt;JetBrains wants to further invest in mobile multi-platform for both Android and iOS by allowing business logic reuse between the different platforms.
Planboard, PlanGrid, Careem Driver’s app, Cash App, Yandex Disk &amp;amp; Yandex Maps, Quizlet, and VMWare Workspace One are some of the apps where business logic is already been reused between the different platforms.&lt;/p&gt;

&lt;h3 id=&quot;whats-coming-in-14&quot;&gt;What’s coming in 1.4&lt;/h3&gt;
&lt;p&gt;Kotlin 1.4 is said to be released in Spring 2020 and a lot of focus is being put on quality and performance.
Currently, 93% of users get code completion results under 500ms but in 1.4, code completion is said to become about three times as fast.
IDE Gradle imports should also happen twice as fast and it should use 75% less memory.
A lot of improvements are also said to be done for Kotlin/Native compilation time.&lt;/p&gt;

&lt;h3 id=&quot;a-new-compiler&quot;&gt;A new compiler&lt;/h3&gt;
&lt;p&gt;One of the biggest pains in Kotlin projects is the build speed, especially as the project get bigger.
This is why JetBrains has been working on a completely new compiler!
It is going to be fast, uniform and pluggable.
Some parts are coming in Kotlin 1.4 whereas others are coming in later versions.
They are aiming on 5x faster compilations.
This however won’t be for version 1.4.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-3-new-kotlin-compiler-perf.jpg&quot; alt=&quot;New Kotlin compiler performance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new compiler also comes with a new type inference and will ship in 1.4.
This will fix numerous bugs that they couldn’t fix in the previous implementation as it was not flexible enough and it will enable new language features.
It can be evolved and extended to enable even more language features later on.&lt;/p&gt;

&lt;p&gt;Kotlin has three different backends: Kotlin/JVM, Kotlin/JS and Kotlin/Native.
In 1.4 they want to offer one single unified backend for all three of them.
Kotlin/Native is built from the beginning in this new unified infrastructure so Kotlin/JVM and Kotlin/JS both need to be migrated.
This way, if a bug gets fixed this will mean that it will be fixed for all platforms right away!&lt;/p&gt;

&lt;p&gt;An experimental feature in 1.4 is KLIM, a new portable format.
This includes a new unified format used within the different platforms.&lt;/p&gt;

&lt;h3 id=&quot;multi-platform&quot;&gt;Multi-platform&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-4-kotlin-multiplatform.jpg&quot; alt=&quot;Kotlin multi-platform&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JetBrains want people to be able to share code and skills across the whole platform.
The idea is that you write common Kotlin logic that can be used in any platform that works everywhere.
If you want to interact with a platform, you can interaction with platform specific versions of Kotlin.&lt;/p&gt;

&lt;p&gt;Seeing as libraries are somewhat the bulk of the Kotlin ecosystem, it is clear to JetBrains that they need to pay enough attention to help people writing libraries.
They plan on doing this by adding a few tools to help people make libraries and to make their APIs robust and stable over time.
This will be achieved with a new library called Author’s Mode that will demand explicit visibility and explicit public types where required.&lt;/p&gt;

&lt;p&gt;JetBrains is also working on Dokka, a documentation generation tool that will support multi-platform libraries.&lt;/p&gt;

&lt;h3 id=&quot;mobile-multi-platform&quot;&gt;Mobile multi-platform.&lt;/h3&gt;
&lt;p&gt;Coming in 2020 will be the possibility to run and debug iOS Kotlin apps in Android Studio through a closed-source plugin.
Note that this is not going to replace Xcode as you will still need it for certain things, but for the normal development cycle you will be able to stay within one IDE.&lt;/p&gt;

&lt;p&gt;Kotlin/Native already works on TvOS and WatchOS, and to demonstrate this, an app called Kotlin Locator was made to play a treasure hunting game during the conference.
The app comes with a WatchOS companion app so that you could try it out yourself.&lt;/p&gt;

&lt;h3 id=&quot;browser-multi-platform&quot;&gt;Browser multi-platform&lt;/h3&gt;
&lt;p&gt;A new feature has been added to allow quick reloading in Kotlin/JS, similar to other frontend frameworks.
A lot of improvements were also done on the JS binary size, compressing it further down by quite a bit, reducing the final size of an app.
Work is also done on JavaScript operability with support for ES modules and Dukat which will connect Kotlin types with TypeScript types.&lt;/p&gt;

&lt;h3 id=&quot;webassembly--kotlin&quot;&gt;WebAssembly + Kotlin&lt;/h3&gt;
&lt;p&gt;WebAssembly is a new web standard supported by all major browsers.
Basically it is a special virtual machine to run all kinds of different code and Kotlin wants to be run in there too.
Currently they have a prototype that they are working on.&lt;/p&gt;

&lt;h3 id=&quot;data-science-in-kotlin&quot;&gt;Data science in Kotlin&lt;/h3&gt;
&lt;p&gt;Not all users of Kotlin are programmers.
Data scientists have also been using Kotlin in combination with Jupyter, Spark and lets-plot.&lt;/p&gt;

&lt;h3 id=&quot;language-changes&quot;&gt;Language changes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-7770&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KT-7770&lt;/a&gt; was mentioned.
A ticket about function interfaces created by Sergei Lebedev three years ago.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/keynote-5-function-interfaces.jpg&quot; alt=&quot;Function interfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A function interface has a single method and you can use it as a function type.
This also improves the Java inoperability if you want to migrate Java code from Kotlin code without things breaking.&lt;/p&gt;

&lt;h3 id=&quot;language-evolutions&quot;&gt;Language evolutions&lt;/h3&gt;
&lt;p&gt;It is important for JetBrains to keep the language modern although they are aware that it is not very desired to have breaking changes in between updates.
If something becomes less useful it will be faded out and removed later to avoid legacy from building up.
In general, updating from one version to another should remain easy and desired.
JetBrains will provide feedback loops to keep developers informed of upcoming changes and to stay in touch with the community.
If migrations are necessary, they will provide the necessary guides or tools to help developers migrate their code.&lt;/p&gt;

&lt;p&gt;For all details, rewatch the keynote on YouTube:&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/0xKTM0A8gdI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;putting-down-the-golden-hammer-by-huyen-tue-dao&quot;&gt;Putting down the golden hammer by &lt;a href=&quot;https://twitter.com/queencodemonkey&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Huyen Tue Dao&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Andrey Breslav&quot; src=&quot;/img/kotlinconf-2019/huyen-tue-dao.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I suppose it is tempting, if the only tool you have is a hammer,
to treat everything as if it were a nail. - Abraham H. Maslow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Huyen started her talk with the quote above.
Given a new tool or framework, it is common for people to get a bit too enthusiastic with it and to exaggerate in the usage of it, treating it as a golden hammer.&lt;/p&gt;

&lt;p&gt;Huyen explained to us that she questioned herself on how to write better Kotlin code.
And in particular by avoiding her own hammers and biases.
As background information, she told us that she worked with Java and C++ before she got into touch with Kotlin.&lt;/p&gt;

&lt;p&gt;The main anchor that caused her to question herself was the &lt;a href=&quot;https://www.youtube.com/watch?v=PsaFVLr8t4E&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;keynote from KotlinConf 2018&lt;/a&gt; where the following was mentioned by Andrey Breslav:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our main focus, our main motto was to make a pragmatic language.
Getting things done, and turning your thoughts into working software without jumping through hoops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Experienced developers praise the following regarding code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Readability over concision&lt;/li&gt;
  &lt;li&gt;Reuse over Expressiveness&lt;/li&gt;
  &lt;li&gt;Interoperability over originality&lt;/li&gt;
  &lt;li&gt;Safety/tooling over soundness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on that, the following questions came up to her:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“When might we be using Kotlin features as golden hammers?”&lt;/li&gt;
  &lt;li&gt;“How can we use these features more pragmatically and hopefully write better Kotlin”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some hammer-proofing points to ponder:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Readability&lt;/li&gt;
  &lt;li&gt;Reusability&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Intentionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;type-inference&quot;&gt;Type inference&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-1-type-inference.jpg&quot; alt=&quot;Type inference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kotlin has a smart compiler that can infer things like the type of a variable.
The hinting feature in IntelliJ helps a lot with showing the exact type of a value or object as sometimes it might be possible that you expected a certain type but it’s actually a different one.&lt;/p&gt;

&lt;p&gt;For example, when declaring a list of numbers but also adding a string to it, causes it to change the list’s type to a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt;.
If we would want to have a compiler error for this we would need to define the type explicitly like &lt;code class=&quot;highlighter-rouge&quot;&gt;val crewlist: List&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Something to keep in mind in this case is that we should not depend too much on the hinting feature as you can only see these in IntelliJ and not for example when reviewing a pull request.
It is important to have the code speak for itself.
In that way it is important to explicitly specify the type in certain cases.&lt;/p&gt;

&lt;h3 id=&quot;implicit-parameter&quot;&gt;Implicit parameter&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-2-implicit-parameter.jpg&quot; alt=&quot;Implicit parameter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depending on the context, it is not always easy to tell what the &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; stands for.
Especially in a complex context, you should rather specify the variables to be more explicit.&lt;/p&gt;

&lt;h3 id=&quot;scope-functions&quot;&gt;Scope functions&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-3-scope-function.jpg&quot; alt=&quot;Scope functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is easy to exaggerate in the usage of scope functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;also&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;.
We should be weary of combining too much of these as it causes us to lose track of what &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; exactly represents and it creates unnecessary complexity making maintenance more difficult.&lt;/p&gt;

&lt;p&gt;Do not feel obligated to stretch yourself or your code because it does not feel Kotlin-y enough as Kotlin is meant to be a pragmatic language.
The code above can be rewritten as follows:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-4-scope-function-improved.jpg&quot; alt=&quot;Scope functions improved&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extension-functions&quot;&gt;Extension functions&lt;/h3&gt;
&lt;p&gt;We can define extension functions to extend existing APIs that you may otherwise not control without subclassing.
A good practice is to make use of this to keep classes and APIs minimal, only containing intrinsic properties and behaviours and to keep your class abstractions pure.&lt;/p&gt;

&lt;p&gt;Huyen mentioned the &lt;a href=&quot;https://www.coursera.org/learn/kotlin-for-java-developers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotlin for Java Developers Coursera course&lt;/a&gt; in which the question was asked on why extension functions are so popular.
We can exaggerate with extension functions.
For example if you make every single function an extension function of an existing class.
We should think about what makes a good utility to a class and we should not make extension functions of too specific functions but keep them as regular functions.&lt;/p&gt;

&lt;h3 id=&quot;nullability-and-nullable-types&quot;&gt;Nullability and nullable types&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-5-nullability.jpg&quot; alt=&quot;Nullability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt; can be valid ways of handling nulls &lt;strong&gt;with&lt;/strong&gt; thought to intentionality and maintainability.
Kotlin has nullable types whereas Java does not.
If you pull in Java methods into the Kotlin world, you can stumble upon cases where it is not clear if something is nullable or not, resulting into unchecked nullability issues.&lt;/p&gt;

&lt;p&gt;Null safety checks with &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; can be bad too and can obfuscate both good assumptions and bad assumptions.
Failing silently is often a bad and undesired thing.
Because of that, it can be a good approach to prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt; is not inherently evil but requires careful use based on good assumption or because you just KNOW that a value is non-null.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/golden-hammer-6-nullability-tips.jpg&quot; alt=&quot;Nullability tips&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/YeqGfKmJM_g&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kotless---kotlin-serverless-framework-by-vladislav-tankov&quot;&gt;Kotless - Kotlin serverless framework by &lt;a href=&quot;https://twitter.com/vdtankov&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vladislav Tankov&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serverless is a cloud computing execution model, in which the cloud provider runs the server and dynamically manages the allocation of machine resources - wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Vladislav Tankov&quot; src=&quot;/img/kotlinconf-2019/vladislav-tankov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vladislav mentions that there are three simple steps in building a serverless application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Take small elements: stateless functions&lt;/li&gt;
  &lt;li&gt;Compose them with events into an application&lt;/li&gt;
  &lt;li&gt;Deploy them to the cloud runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This deploy step is often done with Infrastructure as Code (IaC).
However, deploying serverless applications with IaC is often not so simple.
It can require more than 100 lines of config, for a simple hello world application that contains 5 lines of code.
For a simple website it can even go to more than 1.000 lines of config.&lt;/p&gt;

&lt;p&gt;On top of that, IaC often uses a separate language to express the configuration.
This requires developers to learn yet another language.&lt;/p&gt;

&lt;p&gt;As a solution to these concerns, the &lt;a href=&quot;https://github.com/JetBrains/kotless&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotless&lt;/a&gt; framework is introduced.&lt;/p&gt;

&lt;h3 id=&quot;kotless&quot;&gt;Kotless&lt;/h3&gt;
&lt;p&gt;Kotless is an IaC tool for Kotlin serverless applications.
It consists of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A DSL that provides annotations to define routing, scheduled events, etc.&lt;/li&gt;
  &lt;li&gt;A Gradle plugin to configure how the serverless application should be deployed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Gradle plugin configures which application code should be scanned to generate Terraform code, and all the other necessary information for your deployment.&lt;/p&gt;

&lt;p&gt;By scanning your application, the Gradle Kotless plugin can determine a lot of the Terraform code that is required for your deployments.
This greatly decreases the amount of deployment config that you have to write yourself, and the things that you do have to write, you can write in Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;seamless-serverless&quot;&gt;Seamless serverless&lt;/h3&gt;
&lt;p&gt;Another advantage of Kotless is that you can write your serverless applications like a normal application.
Then when it is time to deploy to the cloud, Kotless will split your application into multiple lambdas.&lt;/p&gt;

&lt;p&gt;This means that you can deploy the same application as a standalone app in-house, or as a serverless app to the cloud.&lt;/p&gt;

&lt;h3 id=&quot;kotless-code-analysis&quot;&gt;Kotless code analysis&lt;/h3&gt;
&lt;p&gt;By analyzing your application code, Kotless can automatically configure the following things in your cloud environment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API interactions - based on annotations like &lt;code class=&quot;highlighter-rouge&quot;&gt;@Get&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Events handling - based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt; annotation&lt;/li&gt;
  &lt;li&gt;Permissions requirements&lt;/li&gt;
  &lt;li&gt;Queueing systems - based on usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; types&lt;/li&gt;
  &lt;li&gt;Calls of other serverless apps - based on &lt;code class=&quot;highlighter-rouge&quot;&gt;async {...}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Kotless looks like a promising framework to make it easier to deploy serverless applications.
It already has quite some interesting features, but they are working on it to make it even better!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/69uk3Pi88AE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-the-fp-is-kotlin-by-shelby-cohen-and-katie-levy&quot;&gt;What the F(p) is Kotlin? by &lt;a href=&quot;https://twitter.com/shelbyc0hen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shelby Cohen&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/klevy110&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Katie Levy&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/fp_kotlin_intro.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Shelby Cohen&quot; src=&quot;/img/kotlinconf-2019/shelby_cohen.jpeg&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Katie Levy&quot; src=&quot;/img/kotlinconf-2019/katie_levy.jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Shelby Cohen and Katie Levy shared with us the story of how they managed to introduce functional programming with Kotlin into their organisation.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/fp_kotlin_goal.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They presented an 8-step guide on how to influence colleagues and your company to adopt Kotlin based on their experience at &lt;a href=&quot;https://www.intuit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Intuit&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;1-find-your-passion&quot;&gt;1. Find your Passion&lt;/h3&gt;
&lt;p&gt;Find something you want to be passionate about.
In this case, it is Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;2-socialize&quot;&gt;2. Socialize&lt;/h3&gt;
&lt;p&gt;Share your passion with other people.
Try to find some things you like about Kotlin - or anything new for that matter - and tell about it to your colleagues.
Give some examples on how Kotlin removes ceremony compared to Java.
Spread the word on how Kotlin has null-safety built into the type system.&lt;/p&gt;

&lt;h3 id=&quot;3-proof-of-concept&quot;&gt;3. Proof of Concept&lt;/h3&gt;
&lt;p&gt;Do not only talk about your passion.
Do as you preach and have something to show to your peers.
Develop a new feature and have it reviewed and discussed by the others.
This should power the discussion with seniors developers and architects on whether the new technology should be adopted, put on hold or avoided.
Having a &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_of_concept&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;POC&lt;/a&gt; and other developers on board helps this conversation.&lt;/p&gt;

&lt;h3 id=&quot;4-create-a-plan&quot;&gt;4. Create a Plan&lt;/h3&gt;
&lt;p&gt;The light is green and you are allowed to make the switch. 
But other developers will still feel insecure about their Kotlin skills.
Katie and Shelby put together a plan to migrate from Java.
They provided online training courses to teach some basic features which helped the onboarding.
This increased the comfort and confidence of the team to make the jump.&lt;/p&gt;

&lt;p&gt;By setting goals, they were able to switch at a comfortable pace:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start with migrating and writing Kotlin tests which do not impact production code&lt;/li&gt;
  &lt;li&gt;Migrate easy wins such as data classes&lt;/li&gt;
  &lt;li&gt;Only then start adding new features in Kotlin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They also monitored what their changes were doing to the stability of the product:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Less crashes because of the improved type system (less NPEs)&lt;/li&gt;
  &lt;li&gt;Features were written faster in Kotlin&lt;/li&gt;
  &lt;li&gt;Less lines of code (to maintain and read)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to provide feedback but watch out to not push learners too much.
Some Kotlin code will look a bit Java-y at first, but this will improve over time.&lt;/p&gt;

&lt;h3 id=&quot;5-persuade-with-data&quot;&gt;5. Persuade with Data&lt;/h3&gt;
&lt;p&gt;The other engineers on the team might not (yet) share your passion for Kotlin, so use some data to persuade them even more.
Some numbers that can be used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/faq.html#what-advantages-does-kotlin-give-me-over-the-java-programming-language&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kotlin uses 40% less lines of code than Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;More concise code takes less time to write and less time to read&lt;/li&gt;
  &lt;li&gt;Show examples on how Kotlin removes boilerplate code&lt;/li&gt;
  &lt;li&gt;The growing amount of big corporations who made the leap to Kotlin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;4th Most loved language on the 2019 Stack Overflow Developer Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-deconstruct-myths&quot;&gt;6. Deconstruct Myths&lt;/h3&gt;
&lt;p&gt;Even with all this data, there are still some myths that exist concerning the language which you do not want to see spread around.
Shelby and Katie broke down these myths in a &lt;a href=&quot;https://www.intuit.com/blog/uncategorized/kotlin-development-plan/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;technical white paper&lt;/a&gt; which they talk about on &lt;a href=&quot;https://medium.com/@srcohen1/kotlin-development-plan-5141087eaef0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium&lt;/a&gt;.
During the closing keynote of the conference, Maxim Shafirov (Jetbrains’ CEO) also proposed to make an official white paper to help companies migrate.&lt;/p&gt;

&lt;h3 id=&quot;7-cant-stop-wont-stop&quot;&gt;7. Can’t stop, Won’t Stop&lt;/h3&gt;
&lt;p&gt;At this point, the team was on board and the train started going full-speed. 
This is when they started a learning community to get other teams on board to spread the word.
They would give presentations, do live coding and code reviews to help others get started too.&lt;/p&gt;

&lt;h3 id=&quot;8-connect-with-larger-community&quot;&gt;8. Connect with Larger Community&lt;/h3&gt;
&lt;p&gt;Kotlin has an amazing community, which allows you to grow even further.
Katie mentions working on an Intuit &lt;a href=&quot;https://github.com/intuit/truffle-shuffle&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSource project&lt;/a&gt;, attending conferences and &lt;a href=&quot;https://talkingkotlin.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;podcasts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-functional-programming&quot;&gt;Why Functional Programming&lt;/h3&gt;
&lt;p&gt;Functional programming is a programming paradigm where computations are treated as mathematical functions.
Shared state and mutable data are avoided which improves the quality of the codebase.
It is also very helpful for multi-threaded workloads.
Functional programming is easier in Kotlin because functions are so called &lt;a href=&quot;https://en.wikipedia.org/wiki/First-class_function&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;first-class&lt;/a&gt; citizens.
A good third party library which enhances the functional capabilities is &lt;a href=&quot;https://arrow-kt.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;arrow-kt.io&lt;/a&gt;.
It is similar to the &lt;a href=&quot;https://www.vavr.io/&quot;&gt;Vavr&lt;/a&gt; library for Java developers but with the benefits of the Kotlin idioms.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/P6G2YPuDE3Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;your-first-server-with-ktor-by-big-nerd-ranch&quot;&gt;Your First Server with Ktor by &lt;a href=&quot;https://twitter.com/bignerdranch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Big Nerd Ranch&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Big Nerd Ranch&quot; src=&quot;/img/kotlinconf-2019/big-nerd-ranch.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This was a workshop on trying out &lt;a href=&quot;https://ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor&lt;/a&gt; and serves as a nice introduction to the framework.&lt;/p&gt;

&lt;p&gt;Before starting, it is required that you install the IntelliJ Ktor plugin via the Plugins menu.
After doing so, you can start a new Ktor project from within IntelliJ.
An alternative way of doing so is by going via the &lt;a href=&quot;https://start.ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor Project Generator&lt;/a&gt;.
Something worth noting is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt; file is written in &lt;a href=&quot;https://github.com/lightbend/config/blob/master/HOCON.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HOCON&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://drive.google.com/file/d/18VFCLxl_1hNMvKi1lLDKMr0bIaJ2gIll/view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;instructions&lt;/a&gt; of the workshops together with the &lt;a href=&quot;https://drive.google.com/file/d/1tRv2le4PllBT_NC-ipY7WUySPe1NV41Z/view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TXT file&lt;/a&gt; that is supposed to be read during the exercises can both be found on Google Drive.
You will learn how to set up your IDE, starting your Ktor application, and routing and serving data.&lt;/p&gt;

&lt;h2 id=&quot;new-product-announcement-by-hadi-hariri-maxim-shafirov-and-maarten-balliauw&quot;&gt;New product announcement by &lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hadi Hariri&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mshafirov&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maxim Shafirov&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/maartenballiauw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maarten Balliauw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-1-intro.jpg&quot; alt=&quot;Intro&quot; /&gt;
At the end of the first day it was time to announce JetBrains’ newest product!
&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maxim Shafirov&quot; src=&quot;/img/kotlinconf-2019/maxim-shafirov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Everything started with a ticket created 15 years ago by Maxim Shafirov, the CEO of JetBrains.
The ticket was about a request to improve collaboration between teams.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-2-ticket-ceo.jpg&quot; alt=&quot;Ticket CEO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maxim shortly went over how JetBrains came to be.
20 years ago, three developers came together and created a product to help them refactor some code.
By now, JetBrains has created over 20 products based on their own needs.
During the growth of the company from three developers to 1.200 people, JetBrains faced many challenges on working together between all the different teams.&lt;/p&gt;

&lt;p&gt;Creating a product involves more than just a development tool.
You have to take several things into account like version control, chat applications for communicating, write documentation and issue tracking.
Besides developers, you have other teams within a company such as testers, HR and marketing.
A challenge many companies face is to efficiently have all teams cooperate with each other which is why JetBrains wanted to create a tool specifically for this.&lt;/p&gt;

&lt;p&gt;Meet &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Space&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/NHuaKA3qhWg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Space is an integrated team environment that provides teams and individuals all tools necessary to create and collaborate efficiently in software development.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-3-features.jpg&quot; alt=&quot;Look and feel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maarten Balliauw&quot; src=&quot;/img/kotlinconf-2019/maarten-balliauw.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Demo time!
&lt;a href=&quot;https://twitter.com/maartenballiauw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maarten Balliauw&lt;/a&gt; demonstrated how Space can be used within a company and gave us an impression on the look and feel.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-4-look-and-feel.jpg&quot; alt=&quot;Look and feel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the demo, Maxim returned to share the prices of the different subscriptions.
Note that a free version is available!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-5-prices.jpg&quot; alt=&quot;Prices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt; you can request an invite to try out Space.
Attendees of KotlinConf have a guaranteed spot to try it out.
More info is available in the &lt;a href=&quot;https://blog.jetbrains.com/blog/2019/12/05/welcome-to-space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; on JetBrains’ website.
We think that JetBrains is very ambitious with Space but given how good their products have been until now, we are convinced that this will make another great product.&lt;/p&gt;

&lt;p&gt;Rewatch the Space announcement video:&lt;/p&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/t1vMUV9jYRs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After the announcement, the KotlinConf party started with different types of food, drinks and nice music for all the attendees.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/special-announcement-6-party.jpg&quot; alt=&quot;Party&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-two&quot;&gt;Day Two&lt;/h1&gt;
&lt;h2 id=&quot;the-shuttle-case-by-stephen-carver&quot;&gt;The Shuttle Case by &lt;a href=&quot;https://twitter.com/carverstephen&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Stephen Carver&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Stephen Carver&quot; src=&quot;/img/kotlinconf-2019/stephen-carver.jpg&quot; /&gt;&lt;/span&gt;
The second day was kicked off with another keynote given by Stephen Carver, Senior Lecturer, consultant and speaker in Change and Crisis Management at Cranfield University School of Management.
One of the topics of the keynote was risk management and Stephen started talking about NASA.&lt;/p&gt;

&lt;p&gt;In 2003 there was the accident with the Space Shuttle Columbia exploding during atmospheric entry causing the death of all seven crew members.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-1-1986-accident.jpg&quot; alt=&quot;1986 accident&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another similar accident happened in 1986 with the Space Shuttle Challenger.
NASA knew this would happen beforehand.
They knew about this and let this happen instead of dealing with the change culture, causing human lives to be lost needlessly.
People just didn’t listen.
It is the fault of the culture and the system.&lt;/p&gt;

&lt;p&gt;Stephen said that stories are vital for leaders and that a story expresses how and why life changes and how it can be.
He mentioned the following quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I believe that this nation should commit itself to achieving the goal, 
before this decade is out, of landing a man on the Moon and returning him safely to Earth. - John F. Kennedy, May 25, 1961&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“By the close of this decade”, quite an ambitious target.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-2-russians.jpg&quot; alt=&quot;Russians in space&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stephen went over the space progress of the Soviet Union and how the space race came to be between them and the Unites States.
The Soviet Union launched the Sputnik 1 into space, the first satellite.
There was Laika, the first dog that made it to space in the Sputnik 2.
We had Yuri Alekseyevich Gagarin, the first human to make it into outer space and Valentina Tereshkova, the first woman in outer space.
And finally there was Alexei Leonov who was the first human to do a spacewalk.&lt;/p&gt;

&lt;p&gt;Next up was the Moon landing of the Apollo 11 and the importance of planting the US flag by Neil Armstrong and Buzz Aldrin.
Stephen also mentioned the Apollo 13 movie and he recommended watching it some time.
He showed a clip of the energy drain part and that they needed to conserve maximum energy in order for the crew to make it safely back to Earth.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Tid44iy6Rjs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Failure is not an option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More Moon landings followed and to put it in a blunt way, people were getting bored.
So what was supposed to be the next thing…? 
Commercial spaceflights, only this time the cost would need the same considerations as weight safety and performance.&lt;/p&gt;

&lt;p&gt;However, NASA was getting old. 
There was too much management, too little leadership, silos, politics and management by fear.
With the Space Shuttle Columbia, it was about getting the weight of three times the Statue of Liberty into space with all the fuel needed.&lt;/p&gt;

&lt;p&gt;The solid rocket boosters, also called “white tubes”, were responsible for granting the space shuttle enough trust during the first few minutes of flight.
However they were always very fragile seeing as about one out of 20 explode during launch.
They were made in Utah and they had to go to Cape Canaveral.
Each one of them was about 40 stories high so moving them was quite challenging as they had to be moved in pieces.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-3-roger-boisjoly.jpg&quot; alt=&quot;Roger Boisjoly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In 1981, the first Space Shuttle Columbia was launched.
Given the odds, NASA got very lucky.&lt;/p&gt;

&lt;p&gt;Flights continued until 1986 when the temperature was very low, about 25ºF (-4ºC).
Icicles were actually hanging off the Space Shuttle Challenger the day before the fateful launch.&lt;/p&gt;

&lt;p&gt;Months before the launch, Roger Boisjoly, an American mechanical engineer, raised his concerns and objections to not have a launch in low temperatures like this as the O-rings on the rocket boosters would fail.
The management had no ears to this and Boisjoly remained ignored.&lt;/p&gt;

&lt;p&gt;After the flight got confirmed for the 28th of January 1986, Boisjoly and his colleagues tried to stop the flight.
This was discussed with Morton-Thiokol managers who agreed that the issue was serious enough and NASA got called.
NASA went crazy and told them to prove it to them that it was going to blow up.
In the end, NASA overruled their warnings and the flight continued.&lt;/p&gt;

&lt;p&gt;It was clear beforehand that the O-ring system was going to fail.
First O-ring failed upon ignition and a second one failed during throttle up.
Moments later the vehicle got disintegrated.
The crew actually survived the explosion as they were in a separate crew compartment, but they could not move and knew they would die by falling into the ocean at huge speed.&lt;/p&gt;

&lt;p&gt;In 1992, NASA got a new CEO, Daniel S. Goldin, who remained there until 2001.
With his “faster, better, cheaper” approach he wanted NASA to continue delivering a wide variety of aerospace programs with costs being cut.
He got told it was going to impact on safety but he did not believe it and replied that it was nonsense.&lt;/p&gt;

&lt;p&gt;In 2003 there was the Space Shuttle Columbia Disaster.
During the launch, a piece of foam insulation broke off from the external tank and struck the left wing of the orbiter, breaking off multiple tiles.
NASA managers were aware that this happened but didn’t inspect the damage nor did they inform the crew as they thought that the foam could not have caused a lot of damage.
Some engineers suspected that the damage was more serious.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We did not believe pictures would be useful to us, we felt that we could have done nothing anyway so we decided not to even take them. - Ron Dittemore&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://www.nasa.gov/columbia/caib/html/VOL2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CAIB Report Appendix D.13&lt;/a&gt; a rescue mission was challenging but entirely feasible to save the crew.
However, NASA had the Columbia return to Earth and as it re-entered the atmosphere, the damage done to the left wing caused hot atmospheric gases to penetrate the heat shield and destroy the internal wing structure.
This caused the spacecraft to become unstable and break apart, killing the crew of seven.&lt;/p&gt;

&lt;p&gt;In 2011 the shuttle program got shut down because the software programs got unreliable and the programmers that made it during the 60’s were either retired or dead.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-4-gene-kranz-vision.jpg&quot; alt=&quot;Gene Kranz vision&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stephen started talking about Elon Musk and his SpaceX company that got founded in 2002.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-5-elon.jpg&quot; alt=&quot;Elon Musk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What was remarkable was Musk’s persistence and the way he sets his mind on things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Failure is an option here.
If things are not failing you are not innovating enough. - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He even had a small video made of all the different failures they had.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bvim4rsNHkQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;During an &lt;a href=&quot;https://www.youtube.com/watch?v=CyGqMZQAMio&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;interview with Musk&lt;/a&gt;, 
the interviewer mentioned that Musk received criticism from Neil Armstrong and Eugene Cernan.
Both of them were heroes to him so it was a painful thing for him to hear them say.
He would invite them over to come visit him to see how work was done at SpaceX.&lt;/p&gt;

&lt;p&gt;Musk’s successes came one after the other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;April 2016: &lt;a href=&quot;https://www.youtube.com/watch?v=sYmQQn_ZSys&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;First stage landing on a drone ship&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Feb 2018: &lt;a href=&quot;https://www.youtube.com/watch?v=A0FZIwabctw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shooting a Tesla Roadster into Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stephen asked the audience who had heard about Blue Origin.
About 10% of the people in the room raised their hands.
This is obviously the space company of Jeff Bezos.
Stephen explained that Bezos puts about $1 billion of personal budget each year into Blue Origin and that giving anything of it away during his divorce was out of the question for him.&lt;/p&gt;

&lt;p&gt;With Musk and Bezos, we now have a second space race happening.
Two of the richest men of the world, racing to the Moon by 2024.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/the-shuttle-case-6-takeaway.jpg&quot; alt=&quot;Takeaway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To conclude, Stephen asked the audience who would have joined the last successful flight of the space shuttle in 2011 if they were given a ticket for it.
About 5% of the people raised their hands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of you are mad… and it’s not necessarily the 5% that raised their hands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last thing Stephen wanted to give us was the importance of trusting your own intuition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the trouble is, if you don’t risk anything, you risk even more. - Erica Jong&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All in all, a very strong keynote to start the second day of the conference.
We loved it!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/E4F0YU8Jd5g?start=415&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-state-of-kotlin-support-in-spring-by-sebastien-deleuze&quot;&gt;The state of Kotlin support in Spring by &lt;a href=&quot;https://twitter.com/sdeleuze&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sebastien Deleuze&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Sébastien Deleuze&quot; src=&quot;/img/kotlinconf-2019/sebastian-deleuze.jpg&quot; /&gt;&lt;/span&gt;
Big kudos for Sébastien Deleuze for thinking about the environment.
He took a train from France to Copenhagen to lower his CO2 emissions.
Even though his train got hit by a boar, he still managed to give us an update about the current state of Kotlin support in the Spring ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_train.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-kotlin-for-spring&quot;&gt;Why Kotlin for Spring?&lt;/h3&gt;
&lt;p&gt;Sébastien explained that Kotlin has less noise than Java.
It gets to the point a lot better and has better (null-)safety.
He also considers Kotlin to be more fun in general.
Kotlin also has a lot of traction in the Android ecosystem, which might end up influencing and changing the server world.&lt;/p&gt;

&lt;h3 id=&quot;spring-️-kotlin&quot;&gt;Spring ♥️ Kotlin&lt;/h3&gt;
&lt;p&gt;Starting from Spring 5.2, all the Spring Framework reference documentation now has Kotlin code examples.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_documentation_status.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new examples are no simple cut and paste from Java but also take into account the Kotlin idioms and DSLs.
Extending the reference documentation for Spring Boot and Spring Security are estimated for next year.
The Spring Data documentation might take a little longer as it is a rather big project.&lt;/p&gt;

&lt;p&gt;Since a few months, the &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializer&lt;/a&gt; project also supports Gradle with Kotlin &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DSL&lt;/a&gt;.
Kotlin allows for nice DSLs which gets reflected in the number of new DSLs in Spring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MockMVC DSL by &lt;a href=&quot;https://twitter.com/checketts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clint Checketts&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jbnizet&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JB Nizet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Contract DSL by &lt;a href=&quot;https://twitter.com/tysewyn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tim Ysewyn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-security-kotlin-dsl&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Security DSL&lt;/a&gt; by &lt;a href=&quot;https://github.com/eleftherias&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eleftheria Stein&lt;/a&gt;.
It is developed by the Spring Security team but still experimental.
This will be shipped with the Spring Security library somewhere next year.&lt;/li&gt;
  &lt;li&gt;Spring MVC DSL and functional API.
The Router DSL is now available for both Spring MVC and Spring WebFlux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A quick example of this last bullet point.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoutesConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The routes can be created dynamically, which means that routes can be constructed from data.
This is handy for webshops or CMS applications in general.
The overall Kotlin DSLs’ status is shown in the following picture:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-dsl-status.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;coroutines&quot;&gt;Coroutines&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/state_of_kotlin_in_spring_coroutines.jpg&quot; alt=&quot;Coroutines&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sébastien stated that coroutines allow consuming the Spring Reactive stack with a nice balance between imperative and declarative style.
Coroutines are a new way to consume the reactive stack and have following characteristics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Operations are sequential by default&lt;/li&gt;
  &lt;li&gt;Concurrency is explicit&lt;/li&gt;
  &lt;li&gt;Three Building blocks:
    &lt;ul&gt;
      &lt;li&gt;Suspending functions are the most important concept and can be used when performing blocking calls such as accessing a database.
  This is an example of what it would look like:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;someExpensiveBlockingCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Structured concurrency provides building blocks like coroutines scope which define asynchronous boundaries.
  This is important because it allows to define behaviour for when an error occurs in one of the asynchronous tasks.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flow&lt;/a&gt;
  is the coroutines equivalent of Flux in the Reactor world.
  It is interoperable with Reactive Streams and has support for back pressure.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;There is now support for loading &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s from properties without using &lt;code class=&quot;highlighter-rouge&quot;&gt;lateinit&lt;/code&gt;.
This means the following code:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can now be re-written using &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConstructorBinding&lt;/code&gt; as:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConstructorBinding&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kofu-the-mother-of-all-dsls&quot;&gt;Kofu: the mother of all DSLs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-fu/tree/master/kofu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kofu&lt;/a&gt; is an experimental DSL that allows to define the Spring Boot application configuration.
Traditional Spring Boot performs a classpath scan and enables some libraries conditionally (such as Jackson).
With Kofu DSL, this is not the case, which allows for a more fine-grained setup.
Kofu also allows for a faster application startup and less memory consumption.
As it is still experimental, it should not be used in production yet.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Ij9guIZ-vBY?start=4210&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-kotlin-for-data-science-by-roman-belov&quot;&gt;Using Kotlin for Data Science by &lt;a href=&quot;https://twitter.com/volebamor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Roman Belov&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Roman Belov&quot; src=&quot;/img/kotlinconf-2019/roman_belov.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;While Kotlin is traditionally used for server-side development and Android development, it can also be used to do data science related projects.
In this talk, Roman Belov demonstrates what libraries and tools we can use to do data science with Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;tools-and-frameworks&quot;&gt;Tools and frameworks&lt;/h3&gt;
&lt;p&gt;One of the most popular data science tools is &lt;a href=&quot;https://jupyter.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jupyter&lt;/a&gt;.
Jupyter notebooks are a popular data science tool that allows to easily share code and the resulting output with third parties.
It also serves as an interactive shell that allows you to write code and print the output (text, graphs, …) directly underneath it.
Jupyter can already be used for Python, R and Scala, and recently Kotlin kernel has been created for this as well.&lt;/p&gt;

&lt;p&gt;Roman also shows the integration of Kotlin with &lt;a href=&quot;https://spark.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Spark&lt;/a&gt;, a popular framework for analyzing big data.
It is usually used with Scala or Python, but can also be used with Kotlin.
He goes on to demonstrate Spark on &lt;a href=&quot;https://zeppelin.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Zeppelin&lt;/a&gt; (a notebook like Jupyter) as well, for which he wrote a Kotlin interpreter.
It is also possible to connect to a Zeppelin server in IntelliJ and do most of the things in your favourite IDE instead of on the web-based notebook.&lt;/p&gt;

&lt;h3 id=&quot;libraries&quot;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;Roman demoed the Kotlin Jupyter implementation by using some interesting libraries such as let’s plot and Krangl.
Let’s-plot is a library for plotting statistical data.
Krangl is used for data wrangling, inspired by the popular dplyr package in R.&lt;/p&gt;

&lt;p&gt;Another interesting library in data science is Numpy, used in the Python language.
Roman created a library called Kotlin Numpy, a wrapper for the Numpy library.
Kotlin Numpy has a couple of advantages over Numpy, such as better performance and type safety.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Kotlin is a general-purpose language, and can thus be used for data science purposes as well.
Quite a few interesting libraries have been created by now and are being developed further,
making it an interesting alternative for the mainstream data science languages such as Python, Scala and R.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Pf6PG26gM2Y?start=4054&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-new-in-java-19-the-end-of-kotlin-by-jake-wharton&quot;&gt;What’s new in Java 19: The end of Kotlin? by &lt;a href=&quot;https://twitter.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jake Wharton&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Jake Wharton&quot; src=&quot;/img/kotlinconf-2019/jake-wharton.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A talk on KotlinConf where the title contains the words “the end of Kotlin” was bound to lure people in.
Jake Wharton takes a look into the future to see what features Java could have in 2022, which is when Java 19 will be released, and compare it with the current state of Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;variable-type-inference&quot;&gt;Variable Type Inference&lt;/h3&gt;
&lt;p&gt;Java 10 already has type inference for local variables although there are limitations to when you can replace the type with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;.
Kotlin has no such limitations.&lt;/p&gt;

&lt;h3 id=&quot;local-functions&quot;&gt;Local functions&lt;/h3&gt;
&lt;p&gt;Moving on to features that aren’t there yet for Java.
In Kotlin you can put a function inside another function, called a local function.
This approach allows to reuse code that is only used in the wrapper function, making it clearer that it only belongs to this function.
Java will have a similar feature that will probably be in Java 15 or 16.&lt;/p&gt;

&lt;h3 id=&quot;multiline-strings&quot;&gt;Multiline Strings&lt;/h3&gt;
&lt;p&gt;Kotlin allows for multi-line strings with a few options (e.g. trim margin).
Multiline strings are currently available in Java 13 (experimental) but will probably be stable in 2020.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    |SELECT *
    |FROM users
    |WHERE name LIKE 'Jake %'
    |&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trimMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-based-classes&quot;&gt;Value based classes&lt;/h3&gt;
&lt;p&gt;Data classes are one of the best features in Kotlin.
However, records are coming to Java in the near future, which are similar to data classes in Kotlin.
Kotlin also has sealed classes, which can only be extended by classes defined in the same file.
Java will have these as well, and will have sealed interfaces on top of that.&lt;/p&gt;

&lt;h3 id=&quot;type-matching&quot;&gt;Type Matching&lt;/h3&gt;
&lt;p&gt;To check if a variable matches a certain type in Kotlin, you can use this:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kotlin also has a smart casting system, which automatically casts it to the type you checked for within the code block.
Java is getting a similar feature, but without smart casting.&lt;/p&gt;

&lt;h3 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h3&gt;
&lt;p&gt;Destructuring in Kotlin works as follows:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;alice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can extract the individual components of the class into local properties.
You can also use this in a for each loop (&lt;code class=&quot;highlighter-rouge&quot;&gt;for ((name, age)) in people { }&lt;/code&gt;) or on lambda arguments.&lt;/p&gt;

&lt;p&gt;Java will also support destructuring in the future, although its usage might be restricted.&lt;/p&gt;

&lt;h3 id=&quot;coroutines-1&quot;&gt;Coroutines&lt;/h3&gt;
&lt;p&gt;Coroutines are a great feature of Kotlin, allowing lightweight asynchronous tasks without starting up new threads.
Java might get a similar feature (virtual threads) in the distant future.
They will take blocking methods (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt;) and turn them into asynchronous methods.&lt;/p&gt;

&lt;h3 id=&quot;the-end-of-kotlin&quot;&gt;The end of Kotlin?&lt;/h3&gt;
&lt;p&gt;While Java might catch up on some features in the future, Kotlin will also evolve in the meantime.
On top of that, there are currently no plans in Java to tackle nullability in Java, which is arguably one of the best features of Kotlin.
Kotlin also has first-class multi-platform support, which Java doesn’t have (and doesn’t plan to at this point).
Furthermore, VM changes and new Java APIs are also beneficial for Kotlin.
Finally, Kotlin has IDE support to migrate codebases progressively into Kotlin.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In 3 years, is this going to be the end of Kotlin? I don’t think so. - Jake Wharton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/E4F0YU8Jd5g?start=14765&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kotlin-in-space-by-maxim-mazin&quot;&gt;Kotlin in Space by &lt;a href=&quot;https://twitter.com/maximmazin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Maxim Mazin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Maxim Mazin&quot; src=&quot;/img/kotlinconf-2019/maxim-mazin.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;At the end of the first conference day, JetBrains announced their new collaboration tool, &lt;a href=&quot;https://www.jetbrains.com/space/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Space&lt;/a&gt;.
Maxim covered how they’ve been using the tool themselves at JetBrains.&lt;/p&gt;

&lt;p&gt;Space is actually full-stack Kotlin.
There is a shared Kotlin model: data models, view models, validations, RPC, utils and common libraries.
Basically everything besides the UI, as it was always an important factor to have it look native, and the storage is shared.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-in-space-1-clients-server-db.jpg&quot; alt=&quot;Clients, server, DB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;used-frameworks&quot;&gt;Used frameworks&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/kotlin-in-space-2-used-libraries.jpg&quot; alt=&quot;Used libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JetBrains/Exposed&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Exposed&lt;/a&gt; allows you to have type-safe SQL and ORM.
Initialize your database in an easy way and have it track your model to help you with migration scripts.
You define entities that map to tables, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;EUser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ktor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ktor&lt;/a&gt; provides asynchronous servers and clients.
It makes it easy to initialize and run a server from code.
You specify routes in a simple way based on a path and a &lt;code class=&quot;highlighter-rouge&quot;&gt;suspend&lt;/code&gt; code block.
There is also WebSocket support.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;onConnect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onMessage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onClose&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; are all implemented in a single flow thanks to Coroutines instead of having to implement separate methods.&lt;/p&gt;

&lt;h3 id=&quot;kotlin-full-stack&quot;&gt;Kotlin full-stack&lt;/h3&gt;
&lt;p&gt;Having a Kotlin full-stack architecture makes it easy to check for usages to find dead pieces of code.
Within Space there is an administrator playground API to play around with things.
OpenAPI (Swagger) JSON is generated in case you want to use something else other than Kotlin.&lt;/p&gt;

&lt;p&gt;JetBrains has a GitHub repository &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;kotlin-wrapper&lt;/a&gt; that contains a bunch of Kotlin wrapper for popular JavaScript frameworks.
&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-styled&lt;/code&gt; are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt;: inherit from components and implementing a render function.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-styled&lt;/code&gt;: a Kotlin DSL for styled components.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-css&lt;/code&gt;: offers type-safe CSS declarations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;In the backend, the only testing library used besides JUnit is &lt;a href=&quot;https://github.com/willowtreeapps/assertk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AssertK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the frontend, &lt;a href=&quot;https://airbnb.io/enzyme/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enzyme&lt;/a&gt; is used to test the React components. 
For UI tests, Selenium is used with &lt;a href=&quot;http://allure.qatools.ru&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Allure&lt;/a&gt; for reports with screenshot support in case a test failed.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Pf6PG26gM2Y?start=13974&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-native-how-i-used-kotlin-native-to-port-6-years-of-android-game-code-to-ios-in-6-months-by-ana-redmond&quot;&gt;Going Native: How I used Kotlin Native to Port 6 years of Android Game Code to iOS in 6 months by &lt;a href=&quot;https://twitter.com/anaredmond&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ana Redmond&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img class=&quot;p-image&quot; style=&quot;max-width: 200px&quot; alt=&quot;Jake Wharton&quot; src=&quot;/img/kotlinconf-2019/ana-redmond.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ana Redmond of Infinut presented us with a really nice feel good story about how she made her Android games available for iOS.
She noticed her daughters’ faces when they came home with another math assignment.
Needless to say, it wasn’t the most happy face.
She noticed her kids were trying to memorize the rules instead of really grasping the material.
That’s when she realized she could make small games so her kids would not only learn maths better but also enjoy the process.&lt;/p&gt;

&lt;p&gt;She created a vast library of over 60 educational games and 120+ lessons for Android devices over a period of six years.
Many kids were learning math and enjoying it.
Unfortunately, the many kids who use an iPad were left out without access to the material she brought to the Android platform.
So when Ana heard about Kotlin/Native she decided the time was right to serve those kids as well!&lt;/p&gt;

&lt;p&gt;Kotlin/Native is used to compile Kotlin code to platforms where virtual machines are not desirable or possible,
such as iOS.
In order to write the individual games once for both platforms, 
she needed a common interface for the platform specific APIs for drawing on the screen and for playing sound.
Luckily, both platforms had very similar APIs for drawing 2D images.
The games are then written purely in Kotlin making use of these interfaces.
To keep the native experience on both platforms, a few screens, such as the login screen, are still developed using their native platform.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/going_native_1_architecture.jpg&quot; alt=&quot;Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering “Why did she go through all the trouble to create a multi-platform 2D game engine from scratch when there are many alternatives available?”.
Well, you’re lucky.
She already addressed this before we had the chance to ask!&lt;/p&gt;

&lt;p&gt;There were two big reasons why she did not opt for the Unity game engine, which is an industry standard for making small-scale, multi-platform games.
The first reason is that the games would drain much more battery on their target devices.
Teachers who employ tablets with these educational games in the classroom were very happy to hear that Infinut’s math games are much more battery-efficient.
Another reason is that while Unity is great for rapidly building a game, it is not as easy to build a library of games with shared codebases.
The fruits of her labor proved successful as she was able to port her 60+ Android games to iOS using 80% shared code!&lt;/p&gt;

&lt;p&gt;There are two ways how Ana used shared code for leveraging platform specific APIs.
One way is to make an interface in Kotlin/Native and implement it separately for each platform.
The preferred way is to make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;actual&lt;/code&gt; to call the native APIs from Kotlin.
This way you don’t need to write a wrapper for functionality that is already supported.
This method was used for implementing drawing images, playing sound, fonts and transformations.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/going_native_2_two_ways.jpg&quot; alt=&quot;Two ways of sharing code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the back button works differently in Android and iOS, she had to fall back on using an interface.
The back button exits the game and returns to the &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; in Android or the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; in iOS to clear everything up.
In the code of her game she then just has to write &lt;code class=&quot;highlighter-rouge&quot;&gt;gameplayer.back()&lt;/code&gt; which will call the correct implementation depending on the platform.
She then stumbled on memory leaks in iOS because of a cyclic reference.
This was easily solved using a weak reference.&lt;/p&gt;

&lt;p&gt;In the process of porting her 60+ games to Kotlin she learned some valuable lessons.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Don’t use mutable objects&lt;br /&gt;
Using a mutable Singleton, like the &lt;code class=&quot;highlighter-rouge&quot;&gt;SoundManager&lt;/code&gt; from the example, led to threading issues as only immutable objects can be shared among threads.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;&lt;br /&gt;
This is because the &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; in Swift works like a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;.
So wherever Kotlin code is called from Swift code, it’s better to use &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; instead.&lt;/li&gt;
  &lt;li&gt;Initialization order&lt;br /&gt;
Something strange happens with parent-child classes where the parent uses a function to initialize the child in an &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; block which the child overrides and sets a property of the child class.
Ana discovered a situation where a property is overridden as expected in Android but not on iOS.
This was caused by the initializations of the child class being run in a different order.
She recommends not creating child classes this way and to just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; blocks for initialization.
Because she already had a lot of code written in the above way, she opted to just move the property from the child class to the parent class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More details can be found on her &lt;a href=&quot;https://medium.com/@anaredmond/cross-platform-game-1-of-afbb8b16c3f7&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;12-part Medium blog post series&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/nfb6lDnvtKQ?start=13945&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h1&gt;
&lt;p&gt;There was a good variety of interesting talks to choose from.
The first keynote gave a nice overview of the current status of Kotlin whereas the second keynote really got you pumped for the second day of the conference.
Noticeable was how much focus was spent on providing healthy food options and snacks.
Bella Center Copenhagen was a beautiful venue to host the conference at.
It was roomy enough for all the participants and it was convenient having a hotel room in there.&lt;/p&gt;

&lt;p&gt;All in all, we had a great time and picked up quite some things.
Definitely worth another visit!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/kotlinconf-2019/collage-2.jpg&quot; alt=&quot;KotlinConf photo collage #2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinconf.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KotlinConf website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lv5WcWNIDrw&amp;amp;list=PLQ176FUIyIUY6SKGl3Cj9yeYibBuRr3Hl&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KotlinConf 2019 YouTube playlist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;De Turck&quot;, &quot;twitter&quot;=&gt;&quot;YannickDeTurck&quot;, &quot;linkedin&quot;=&gt;&quot;yannickdeturck&quot;, &quot;github&quot;=&gt;&quot;yannickdeturck&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-de-turck/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-de-turck.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead JVM Languages&quot;, &quot;email&quot;=&gt;&quot;Yannick.DeTurck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yannick is a senior Java consultant and practice manager at Ordina Belgium. He's passionate about everything Java and Spring related as well as reactive programming, Kotlin, Lightbend technologies, software architectures, and coaching and enabling other colleagues.&quot;}</name><email>Yannick.DeTurck@ordina.be</email></author><category term="Conference" /><category term="KotlinConf" /><category term="Kotlin" /><category term="Android" /><category term="Coroutines" /><category term="Conference" /><category term="Serverless" /><summary type="html">KotlinConf is thé conference to visit if you’re into Kotlin development. JetBrains introduced KotlinConf in 2017 in San Francisco with over 1.200 participants and 50 speakers. In 2018 it took place in Amsterdam with over 1.300 participants and 60 speakers. This year the conference was hosted in Denmark’s Copenhagen at the Bella Center, Scandinavia’s largest conference center. Five colleagues of Ordina Belgium’s JWorks unit were very enthusiastic to attend the conference for the first time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kotlinconf-2019/kotlinconf-2019.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/kotlinconf-2019/kotlinconf-2019.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>