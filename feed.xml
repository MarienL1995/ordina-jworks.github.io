<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2020-12-14T15:43:08+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Introduction into the world of Chaos Engineering</title><link href="https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering.html" rel="alternate" type="text/html" title="Introduction into the world of Chaos Engineering" /><published>2020-12-14T00:00:00+00:00</published><updated>2020-12-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-chaos-engineering&quot; id=&quot;markdown-toc-what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#principles-of-chaos-engineering&quot; id=&quot;markdown-toc-principles-of-chaos-engineering&quot;&gt;Principles of Chaos Engineering&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#steady-state&quot; id=&quot;markdown-toc-steady-state&quot;&gt;Steady state&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hypothesis-about-state&quot; id=&quot;markdown-toc-hypothesis-about-state&quot;&gt;Hypothesis about state&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vary-real-world-events&quot; id=&quot;markdown-toc-vary-real-world-events&quot;&gt;Vary real-world events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#design-and-run-the-experiment&quot; id=&quot;markdown-toc-design-and-run-the-experiment&quot;&gt;Design and run the experiment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#learn-and-verify&quot; id=&quot;markdown-toc-learn-and-verify&quot;&gt;Learn and verify&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#improve-and-fix-it&quot; id=&quot;markdown-toc-improve-and-fix-it&quot;&gt;Improve and fix it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manually-vs-auto&quot; id=&quot;markdown-toc-manually-vs-auto&quot;&gt;Manually VS Auto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chaos-gamedays--benefits&quot; id=&quot;markdown-toc-chaos-gamedays--benefits&quot;&gt;Chaos GameDays &amp;amp; benefits&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#post-mortem&quot; id=&quot;markdown-toc-post-mortem&quot;&gt;Post Mortem&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#simian-army&quot; id=&quot;markdown-toc-simian-army&quot;&gt;Simian Army&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#chaos-monkey-still-available-as-a-standalone-service&quot; id=&quot;markdown-toc-chaos-monkey-still-available-as-a-standalone-service&quot;&gt;Chaos Monkey (Still available as a standalone service)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot; id=&quot;markdown-toc-janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot;&gt;Janitor Monkey =&amp;gt; replaced by new standalone service ‘Swabbie’ (Still available)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot; id=&quot;markdown-toc-conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot;&gt;Conformity Monkey =&amp;gt; now rolled out in spinnaker services (Still available)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-tools-for-chaos-engineering&quot; id=&quot;markdown-toc-other-tools-for-chaos-engineering&quot;&gt;Other Tools for Chaos Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;chaos-engineering&quot;&gt;Chaos Engineering&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In cloud-based distributed networks we need a certain level of scalability and resilience because unpredictable events are bound to happen.
Because these networks are more complex and have built-in uncertainty,
it’s essential for software developers to utilize an empirical approach to testing for vulnerabilities that’s systematic and innovative.
This can be achieved through controlled experimentation that creates chaos in an effort to determine how much stress any given system can withstand.
The goal is to observe and identify systemic weaknesses.&lt;/p&gt;

&lt;h2 id=&quot;what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/h2&gt;

&lt;p&gt;Chaos Engineering is the discipline of experimenting on a software system in production in order to build confidence in the system’s capability to withstand turbulent and unexpected conditions.
You can think of Chaos Engineering as an empirical approach to addressing the question: “How close is our system to the edge of chaos?” 
Another way to think about this is: “How would our system fare if we injected chaos into it?”
It is not meant to break random things without a purpose.&lt;/p&gt;

&lt;p&gt;However if you and your team are just starting with Chaos Engineering and you are not confident enough to work in the production environment,
you can also do the experiments in another controlled environment (TST, DEV, …).&lt;/p&gt;

&lt;p&gt;Building confidence is key! You do not want to break things in production without being able to find a solution.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;why-use-chaos-engineering&quot;&gt;Why use Chaos Engineering?&lt;/h2&gt;

&lt;p&gt;In software development, a given software system’s ability to tolerate failures while still ensuring adequate quality of service,
is typically specified as a requirement (Resilience).
However, development teams often fail to meet this requirement due to factors such as short deadlines or lack of knowledge of the field.
Chaos engineering is a technique to meet the resilience requirement.&lt;/p&gt;

&lt;p&gt;Chaos engineering can be used to achieve resilience against:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Infrastructure failures&lt;/li&gt;
  &lt;li&gt;Network failures&lt;/li&gt;
  &lt;li&gt;Application failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;chaos-engineering-and-traditional-testing&quot;&gt;Chaos Engineering and Traditional Testing&lt;/h2&gt;

&lt;p&gt;With traditional testing, you are only testing assumptions and not generating new knowledge about the system.
You are testing the code correctness and how functions and methods work in your application.
Chaos Engineering on the other hand will also explore the many different and unpredictable scenarios that could happen to your systems.&lt;/p&gt;

&lt;p&gt;In this way you will be able to find new weaknesses before the actual event will take place and make sure future outages will not happen.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;prerequisites-for-chaos-engineering&quot;&gt;Prerequisites for Chaos Engineering&lt;/h2&gt;

&lt;p&gt;To determine whether your organization is ready to start adopting Chaos Engineering, you need to answer one question:
Is your system resilient to real-world events such as service failures and network latency spikes?
If you know the answer to that question is no, you have some work to do before using Chaos Engineering.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is great for exposing unknown weaknesses in your production system,
but if you are certain that a Chaos Engineering experiment will lead to a significant problem with the system,
there’s no sense in running that experiment.
Fix the weakness first! Then come back to Chaos Engineering to uncover more weaknesses you didn’t know about.&lt;/p&gt;

&lt;p&gt;Also, it is important that there are ways your team can analyze the results of the experiments by making sure there is a monitoring system in place to check the state of your application.&lt;/p&gt;

&lt;p&gt;Some metrics examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;service metrics
    &lt;ul&gt;
      &lt;li&gt;Example: The time it normally takes to start up your application, the time it takes for a request to the service…&lt;/li&gt;
      &lt;li&gt;Example: a simple metric for us to determine the overall health of the system is the percentage of 200 responses from the User Service, specifically we want 100%.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;business metrics
    &lt;ul&gt;
      &lt;li&gt;Example: number of orders on your web shop. When doing an experiment where you are increasing the response times of your service by 100 ms, you see that the number of orders has decreased significantly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s always a good idea to have some resilience already built in to your application/service before introducing Chaos.&lt;/p&gt;

&lt;p&gt;Some key points for resilience are:&lt;/p&gt;
&lt;div style=&quot;text-align: right; width: 60%; margin-left:20%&quot;&gt;
  &lt;img alt=&quot;Must Have&quot; src=&quot;/img/2020-12-14-chaos-engineering/ResilienceSmall.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;principles-of-chaos-engineering&quot;&gt;Principles of Chaos Engineering&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Experiment Process&quot; src=&quot;/img/2020-12-14-chaos-engineering/chaos-engineering-process.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;steady-state&quot;&gt;Steady state&lt;/h3&gt;

&lt;p&gt;Define a measurable steady state that represents normal circumstances to use as a baseline.&lt;/p&gt;

&lt;p&gt;The reason you do this, is because after injection failure,
you want to make sure you can return to a well-known state and the experiment is no longer interfering with the system’s normal behavior.
The key is not to focus on internal attributes of the system like CPU, memory, etc. but to look for measurable output.
Measurements of that output over a short period of time constitute a proxy for the system’s steady state.
The system’s overall throughput, error rates, latency percentiles, etc. could all be metrics of interest representing steady state behavior.&lt;/p&gt;

&lt;h3 id=&quot;hypothesis-about-state&quot;&gt;Hypothesis about state&lt;/h3&gt;

&lt;p&gt;Once you have your metrics and an understanding of their steady state behavior,
you can use them to define the hypotheses and preferred results for your experiment.
Start small and choose only one hypothesis at a time.
When you are doing this, it is important to bring everybody around the table that is involved with the project.
The team, the product owner, developers, designers, etc.&lt;/p&gt;

&lt;p&gt;It can be tempting to subject your system to different events (for example, increasing amounts of traffic) to “see what happens.”
However, without having a prior hypothesis in mind, it can be difficult to draw conclusions if you don’t know what to look for in the data.
Think about how the steady state behavior will change when you inject different types of events into your system.
If you add requests to a service, will the steady state be disrupted or stay the same?
If disrupted, do you expect the system output to increase or decrease?&lt;/p&gt;

&lt;p&gt;A few examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What will happen if this load balancer breaks?&lt;/li&gt;
  &lt;li&gt;What will happen if caching fails?&lt;/li&gt;
  &lt;li&gt;What will happen if latency increases with 300ms?&lt;/li&gt;
  &lt;li&gt;What will happen if we lose connection to our DB?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make hypotheses on parts of the system you believe are resilient — after all, that’s the whole point of the experiment.
Also think about what the preferred outcome will be in one of these situations and don’t make a hypothesis that you know you will break!&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What if the ‘Shop By Category’ service fails to load in our online webshop?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Preferred Outcome:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should we return a 404?&lt;/li&gt;
  &lt;li&gt;Should the page gracefully degrade and collapse?&lt;/li&gt;
  &lt;li&gt;What should happen on the backend?&lt;/li&gt;
  &lt;li&gt;Should alerts be sent?&lt;/li&gt;
  &lt;li&gt;Should the failing dependency continue to receive requests every time a user goes to this page?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vary-real-world-events&quot;&gt;Vary real-world events&lt;/h3&gt;

&lt;p&gt;Every system, from simple to complex, is subject to unpredictable events and conditions if it runs long enough.
Examples include increase in load, hardware malfunction,
deployment of faulty software, and the introduction of invalid data (sometimes known as poison data).&lt;/p&gt;

&lt;p&gt;The most common ones fall under the following categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hardware failures&lt;/li&gt;
  &lt;li&gt;Functional bugs&lt;/li&gt;
  &lt;li&gt;State transmission errors (e.g., inconsistency of states between sender and receiver nodes)&lt;/li&gt;
  &lt;li&gt;Network latency and partition&lt;/li&gt;
  &lt;li&gt;Large fluctuations in input (up or down) and retry storms&lt;/li&gt;
  &lt;li&gt;Resource exhaustion&lt;/li&gt;
  &lt;li&gt;Unusual or unpredictable combinations of interservice communication&lt;/li&gt;
  &lt;li&gt;Byzantine failures (e.g., a node believing it has the most current data when it actually does not)&lt;/li&gt;
  &lt;li&gt;Race conditions&lt;/li&gt;
  &lt;li&gt;Downstream dependencies malfunction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Real World Examples:&lt;/p&gt;

&lt;p&gt;At Netflix, they turn off machines because instance termination happens frequently in the wild and the act of turning off a server is cheap and easy.
They simulate regional failures even though to do so is costly and complex,
because a regional outage has a huge impact on their customers unless they are resilient to it.&lt;/p&gt;

&lt;p&gt;Consider an organization that uses a messaging app such as Slack or HipChat to communicate during an incident.
The organization may have a contingency plan for handling the outage when the messaging app is down during an outage,
but how well do the on-call engineers know the contingency plan?
Running a chaos experiment is a great way to find out.&lt;/p&gt;

&lt;h3 id=&quot;design-and-run-the-experiment&quot;&gt;Design and run the experiment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pick one hypothesis&lt;/li&gt;
  &lt;li&gt;Scope your experiment (the closer you are to production the more you will learn about the results)&lt;/li&gt;
  &lt;li&gt;Identify the relevant metrics to measure&lt;/li&gt;
  &lt;li&gt;Notify the organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prioritize events either by potential impact or estimated frequency.
Consider events that correspond to hardware failures like servers dying, software failures like malformed responses,
and non-failure events like a spike in traffic or a scaling event.
Any event capable of disrupting steady state is a potential variable in a Chaos experiment.&lt;/p&gt;

&lt;p&gt;One of the most important things during the experiment phase is understanding the potential blast radius of the experiment and the failure you’re injecting — and minimize it.
You’ll almost certainly want to start out in your test environment to do a dry run before you move into production.
Once you do move to production, you’ll want to start out with experiments that impact the minimal amount of customer traffic.
For example, if you’re investigating what happens when your cache times out,
you could start by calling into your production system using a test client, and just inducing the timeouts for that client.&lt;/p&gt;

&lt;p&gt;Some good questions you can ask yourself to check the blast radius are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How many customers are affected?&lt;/li&gt;
  &lt;li&gt;What functionality is impaired?&lt;/li&gt;
  &lt;li&gt;Which locations are impacted?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also try to have some sort of ‘emergency button’ you can use to cancel the experiment or to return to the normal state of the system in case you cannot find a solution.
Be careful with experiments that modify the application state (cache or databases) or that can’t be rolled back easily or at all.&lt;/p&gt;

&lt;p&gt;Eventually when you start doing Chaos Experiments in your production environment,
you want to inform members of your organization about what you’re doing, why you’re doing it and when.&lt;/p&gt;

&lt;h3 id=&quot;learn-and-verify&quot;&gt;Learn and verify&lt;/h3&gt;

&lt;p&gt;In order to learn and verify you need to measure. Invest in measuring everything!
After the test you can use your collected metrics to check if your hypothesis is correct.&lt;/p&gt;

&lt;p&gt;Another important metric during this phase, is the time it takes to detect the problem. 
You do not want your customers to be the ones that detect the problem. 
So, use Chaos Engineering as a way of testing your monitoring and alerting systems as well.&lt;/p&gt;

&lt;p&gt;There are several ways that you can expand the testing in order to increase your knowledge and find potential solutions.
Once you’ve resolved one area of concern, reset the testing criteria or parameters and run the experiment again with a new hypothesis.
You can also expand the blast radius by increments with each test,
introducing new or more powerful stressors into the testing environment in order to gauge the limits of your system.
The idea is to introduce as much controlled chaos into the mix, one element at a time,
in order to determine the maximum limits of your system before it breaks down completely.
This can be done by introducing automation after the initial test.&lt;/p&gt;

&lt;p&gt;Always do a Post Mortem of the experiment.
A few questions the team can ask themselves during this phase:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Time to detect?&lt;/li&gt;
  &lt;li&gt;Time for notification? And escalation?&lt;/li&gt;
  &lt;li&gt;Time to public notification?&lt;/li&gt;
  &lt;li&gt;Time for graceful degradation to kick-in?&lt;/li&gt;
  &lt;li&gt;Time for self-healing?&lt;/li&gt;
  &lt;li&gt;Time to recovery — partial and full?&lt;/li&gt;
  &lt;li&gt;Time to all-clear and stable?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At AWS, the output from the Post Mortem is called a Correction-of-Errors document, or COE.
They use COE to learn from their mistakes, whether they’re flaws in technology, process, or even the organization.
They use this mechanism to resolve root causes and drive continuous improvement.
The key to being successful in this process is being open and transparent about what went wrong.
One of the most important guidelines for writing a good COE is to be blameless and avoid identifying individuals by name.&lt;/p&gt;

&lt;p&gt;There are five main sections in a COE document:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What happened? (Timeline)&lt;/li&gt;
  &lt;li&gt;What was the impact to our customers?&lt;/li&gt;
  &lt;li&gt;Why did the error occur? (The 5 Why’s)&lt;/li&gt;
  &lt;li&gt;What did you learn?&lt;/li&gt;
  &lt;li&gt;And how will you prevent it from happening again in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;improve-and-fix-it&quot;&gt;Improve and fix it&lt;/h3&gt;

&lt;p&gt;The most important lesson here is to prioritize fixing the findings of your chaos experiments over developing new features!
Get upper management to enforce that process and buy into the idea that fixing current issues is more important than continuing the development of new features.&lt;/p&gt;

&lt;h2 id=&quot;manually-vs-auto&quot;&gt;Manually VS Auto&lt;/h2&gt;

&lt;p&gt;Using Chaos Engineering may be as simple as manually running ‘kill -9’ on a box inside of your staging environment to simulate failure of a service.
Or it can be as sophisticated as automatically designing and carrying out experiments in a production environment against a small but statistically significant fraction of live traffic.
So, when starting out, it is a good practice to manually make your experiments and check the results,
but running experiments manually is labor-intensive and ultimately unsustainable.
So try to automate experiments and run them continuously.&lt;/p&gt;

&lt;h2 id=&quot;chaos-gamedays--benefits&quot;&gt;Chaos GameDays &amp;amp; benefits&lt;/h2&gt;

&lt;p&gt;Chaos GameDays are often known as days where a ‘Master of Disaster’ or a MoD, often in secret,
will decide what kind of failure or disaster will happen on the system.
He or she will generally start with something simple like the loss of capacity or the loss of connectivity.
You may find, that until you can easily and clearly see the simple cases,
doing harder or more complex failures is not a good way to build confidence or spend time.&lt;/p&gt;

&lt;p&gt;If you follow this process regularly, you will see a transformation in your team.
Being first on-call for Chaos GameDays builds composure under pressure when doing on-call for production outages.
Not only will all developers gain confidence in their uderstanding of the systems and how they fail,
but they also get used to the feeling of being under pressure.&lt;/p&gt;

&lt;p&gt;There will also be a dramatic change in your systems, since developers will experience failure as a part of their job and thus, they will start designing for failure.
They consider how to make every change and every system observable and also carefully choose resilience strategies because this is now something the team knows and talks about during the experiments.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;planned-failure&quot;&gt;Planned Failure&lt;/h3&gt;

&lt;p&gt;The MoD will gather the team before the ‘start of the incident’ and then will start with the planned failure. 
Normally there will be one member of the team who will be ‘first on-call’.
This person is strongly encouraged to contact the other members
so they can start working together and find out what failure the MoD has caused.
Ideally, the team will find and solve the issue in less than 75% of the allocated time.
When the team has a solution for the issue or the allocated time has ended,
the MoD will reverse the failure and the team will proceed to do a Post Mortem of the incident.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;escalation&quot;&gt;Escalation&lt;/h3&gt;

&lt;p&gt;It is also possible that the team will not be able to find a solution for the problem.
Then the MoD can escalate this failure to make it more visible,
because often full outages are the only observable failures.
Knowing this is the first step in fixing your instrumentation and visualization (FE. Dashboards with monitoring…)&lt;/p&gt;

&lt;h3 id=&quot;post-mortem&quot;&gt;Post Mortem&lt;/h3&gt;

&lt;p&gt;A Post Mortem is the stage in which the team will analyze the failure and the solution.
This can consist of sharing perspectives, assumptions that were made, expectations that didn’t reflect the behavior of the system or observability tools.
Following out of the Post Mortem,
the team should have come up with a set of actions to fix any observability issues for the scenario and some ideas about how to improve resilience to that failure.&lt;/p&gt;

&lt;p&gt;The Post Mortem should follow the usual incident process if you have one in your company.&lt;/p&gt;

&lt;h2 id=&quot;simian-army&quot;&gt;Simian Army&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Must Have&quot; src=&quot;/img/2020-12-14-chaos-engineering/SimianArmySmall.jpg&quot; width=&quot;40%&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Netflix has already developed some tools which they bundled in their suite of tools named ‘The Simian Army’.
These tools were made to test reliability, security and resilience of its AWS infrastructure.
The Simian Army is designed to add more capabilities beyond Chaos Monkey. 
While Chaos Monkey solely handles termination of random instances,
Netflix engineers needed additional tools able to induce other types of failure.
Some of the Simian Army tools have fallen out of favor in recent years and are deprecated,
but each of the members serves a specific purpose aimed at bolstering a system’s failure resilience.&lt;/p&gt;

&lt;h3 id=&quot;chaos-monkey-still-available-as-a-standalone-service&quot;&gt;Chaos Monkey (Still available as a standalone service)&lt;/h3&gt;

&lt;p&gt;Chaos Monkey is a tool invented to test the resilience of its IT infrastructure. 
It works by intentionally disabling virtual machine instances and containers in the production network to test how remaining systems respond to the outage. (prepares you for a random instance failure in an application managed by Spinnaker)
This tool has been in the game for a long time, so there might be better tools for your needs.&lt;/p&gt;

&lt;p&gt;Chaos Monkey is deliberately unpredictable.
It only has one attack type: terminating virtual machine instances.
You set a general time frame for it to run, and at some point during that time it will terminate a random instance. 
This is meant to help replicate unpredictable production incidents,
but it can easily cause more harm than good if you’re not prepared to respond.&lt;/p&gt;

&lt;h3 id=&quot;janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot;&gt;Janitor Monkey =&amp;gt; replaced by new standalone service ‘Swabbie’ (Still available)&lt;/h3&gt;

&lt;p&gt;Identifies and disposes unused resources to avoid waste and clutter.&lt;/p&gt;

&lt;h3 id=&quot;conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot;&gt;Conformity Monkey =&amp;gt; now rolled out in spinnaker services (Still available)&lt;/h3&gt;

&lt;p&gt;A tool that determines whether an instance is nonconforming by testing it against a set of rules.
If any of the rules determines that the instance is not conforming, the monkey sends an email notification to the owner of the instance.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-kong-deprecated-or-not-publicaly-released&quot;&gt;Chaos Kong (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;At the very top of the Simian Army hierarchy, Chaos Kong drops a full AWS “Region”. 
Though rare, loss of an entire region does happen, and Chaos Kong simulates a systems response and recovery to this type of event.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-gorilla-deprecated-or-not-publicaly-released&quot;&gt;Chaos Gorilla (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Chaos Gorilla drops a full AWS “Availability Zone” (one or more entire data centers serving a geographical region).&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;latency-monkey-deprecated-or-not-publicaly-released&quot;&gt;Latency Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Introduces communication delays to simulate degradation or outages in a network.
Netflix never publicly released the Latency Monkey code, and it eventually evolved into their Failure Injection Testing (FIT) service.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;fit-failure-injection-testing&quot;&gt;FIT (Failure Injection Testing)&lt;/h3&gt;

&lt;p&gt;FIT was built to inject microservice level failures.
Latency monkey adds a delay and/or failure on the server side of a request for a given service.
This provides us good insight into how calling applications behave when their dependency slows down — 
threads pile up, the network becomes congested, etc.
Latency monkey also impacts all calling applications — whether they want to participate or not,
and can result in customer pain if proper fallback handling, timeouts, and bulkheads don’t work as expected.
What we need is a way to limit the impact of failure testing while still breaking things in realistic ways.
This is where FIT comes in.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;doctor-monkey-deprecated-or-not-publicaly-released&quot;&gt;Doctor Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Performs health checks, by monitoring performance metrics such as CPU load to detect unhealthy instances,
for root-cause analysis and eventual fixing or retirement of the instance.
Doctor Monkey is not open-sourced, but most of its functionality is built into other tools like Spinnaker, 
which includes a load balancer health checker,
so instances that fail certain criteria are terminated and immediately replaced by new ones.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;security-monkey-still-available-but-will-be-end-of-life-in-2020&quot;&gt;Security Monkey (Still available but will be end-of-life in 2020)&lt;/h3&gt;

&lt;p&gt;Derived from Conformity Monkey, a tool that searches for and disables instances that have known vulnerabilities or improper configurations.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;10-18-monkey-deprecated-or-not-publicaly-released&quot;&gt;10-18 Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;A tool that detects problems with localization and internationalization (known by the abbreviations “l10n” and “i18n”)
for software serving customers across different geographic regions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-tools-for-chaos-engineering&quot;&gt;Other Tools for Chaos Engineering&lt;/h2&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chap-chaos-automation-platform&quot;&gt;ChAP (Chaos Automation Platform)&lt;/h3&gt;

&lt;p&gt;ChAP was built to overcome the limitations of FIT so we can increase the safety, cadence, and breadth of experimentation.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;byte-monkey&quot;&gt;Byte-Monkey&lt;/h3&gt;

&lt;p&gt;A small Java library for testing failure scenarios in JVM applications.
It works by instrumenting application code on the fly to deliberately introduce faults such as exceptions and latency.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaosblade-by-alibaba&quot;&gt;ChaosBlade By Alibaba&lt;/h3&gt;

&lt;p&gt;ChaosBlade is a versatile tool supporting a wide range of experiment types and target platforms.
However, it lacks some useful features such as centralized reporting, experiment scheduling, target randomization, and health checks. 
It’s a great tool if you’re new to Chaos Engineering and want to experiment with different attacks.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-machine&quot;&gt;Chaos Machine&lt;/h3&gt;

&lt;p&gt;ChaosMachine is a tool that does chaos engineering at the application level in the JVM.
It concentrates on analyzing the error-handling capability of each try-catch block involved in the application by injecting exceptions.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;proofdock-chaos-engineering-platform&quot;&gt;Proofdock Chaos Engineering Platform&lt;/h3&gt;

&lt;p&gt;A chaos engineering platform that focuses on and leverages the Microsoft Azure platform and the Azure DevOps services.
Users can inject failures on the infrastructure, platform and application level.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;gremlin-platform&quot;&gt;Gremlin platform&lt;/h3&gt;

&lt;p&gt;A “failure-as-a-service” platform built to make the Internet more reliable.
It turns failure into resilience by offering engineers a fully hosted solution to safely experiment on complex systems,
in order to identify weaknesses before they impact customers and cause revenue loss.
Unlike Chaos Monkey, tools like FIT and Gremlin are able to test for a wide range of failure states beyond simple instance destruction.
In addition to killing instances, Gremlin can fill available disk space,
hog CPU and memory, overload IO, perform advanced network traffic manipulation, terminate processes, and much more.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;facebook-storm&quot;&gt;Facebook Storm&lt;/h3&gt;

&lt;p&gt;To prepare for the loss of a datacenter, Facebook regularly tests the resistance of its infrastructures to extreme events.
Known as the Storm Project, the program simulates massive data center failures.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaoslingr&quot;&gt;ChaoSlingr&lt;/h3&gt;

&lt;p&gt;ChaoSlingr is the first Open Source application of Chaos Engineering to Cyber Security.
ChaoSlingr is focused primarily on performing security experimentation on AWS Infrastructure to proactively discover system security weaknesses in complex distributed system environments.
Published on Github in September 2017.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-toolkit-by-chaosiq&quot;&gt;Chaos Toolkit by ChaosIQ&lt;/h3&gt;

&lt;p&gt;The Chaos Toolkit was born from the desire to simplify access to the discipline of chaos engineering and demonstrate that the experimentation approach can be done at different levels: infrastructure, platform but also application. The Chaos Toolkit is an open-source tool.
Few tools are as flexible in how they let you design chaos experiments.
Chaos Toolkit gives you full control over how your experiments operate, right down to the commands executed on the target system.
But because of this DIY approach, Chaos Toolkit is more of a framework that you need to build on than a ready-to-go Chaos Engineering solution&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;mangle&quot;&gt;Mangle&lt;/h3&gt;

&lt;p&gt;Mangle enables you to run chaos engineering experiments seamlessly against applications and infrastructure components to assess resiliency and fault tolerance.
It is designed to introduce faults with very little pre-configuration and can support any infrastructure that you might have including K8S,
Docker, vCenter or any Remote Machine with ssh enabled.
With its powerful plugin model,
you can define a custom fault of your choice based on a template and run it without building your code from scratch.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-mesh-by-pingcap&quot;&gt;Chaos Mesh by PingCAP&lt;/h3&gt;

&lt;p&gt;Chaos Mesh is an open-source cloud-native Chaos Engineering platform that orchestrates chaos experiments in Kubernetes environments.
It supports comprehensive types of failure simulation, including Pod failures, container failures,
network failures, file system failures, system time failures, and kernel failures.&lt;br /&gt;
Chaos Mesh is one of the few open source tools to include a fully-featured web user interface (UI) called the Chaos Dashboard.
However, its biggest limitations are its lack of node-level experiments,
lack of native scheduling, and lack of time limits on ad-hoc experiments.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;litmus-chaos&quot;&gt;Litmus Chaos&lt;/h3&gt;

&lt;p&gt;LitmusChaos is a toolset to do cloud-native chaos engineering.
Litmus provides tools to orchestrate chaos on Kubernetes to help SREs find weaknesses in their deployments.
SREs use Litmus to run chaos experiments initially in the staging environment and eventually in production to find bugs,
vulnerabilities. Fixing the weaknesses leads to increased resilience of the system.&lt;/p&gt;

&lt;p&gt;While Litmus is a comprehensive tool with many useful attacks and monitoring features, it comes with a steep learning curve.
Simply running an experiment is a multi-step process that involves setting permissions and annotating deployments.
Workflows help with this, especially when used through the Litmus Portal, but they still add an extra layer of complexity.
This isn’t helped by the fact that some features—like the Litmus Portal itself—don’t appear in the documentation and are only available through the project’s GitHub repository.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;which-tool-is-right-for-me&quot;&gt;Which tool is right for me?&lt;/h2&gt;

&lt;p&gt;Ultimately, the goal of any Chaos Engineering tool is to help you achieve greater reliability.
The question is: which tool will help you achieve that goal faster and more easily? 
This question of course depends on your tech stack, the experience and expertise of your engineering team,
and how much time you can dedicate to testing and evaluating each tool.&lt;/p&gt;

&lt;p&gt;The following table are just a handful of tools which are interesting for our preferred stack.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;platform&lt;/th&gt;
      &lt;th&gt;Attack types&lt;/th&gt;
      &lt;th&gt;App Attacks&lt;/th&gt;
      &lt;th&gt;Container / Pod attacks&lt;/th&gt;
      &lt;th&gt;GUI ?&lt;/th&gt;
      &lt;th&gt;CLI ?&lt;/th&gt;
      &lt;th&gt;Metrics&lt;/th&gt;
      &lt;th&gt;Attack Sharing&lt;/th&gt;
      &lt;th&gt;Attack Halting&lt;/th&gt;
      &lt;th&gt;Attack Scheduling&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Monkey&lt;/td&gt;
      &lt;td&gt;Spinnaker&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gremlin&lt;/td&gt;
      &lt;td&gt;SaaS&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Blade&lt;/td&gt;
      &lt;td&gt;K8S, Docker, Cloud, Bare metal&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Toolkit&lt;/td&gt;
      &lt;td&gt;K8S, Docker, Cloud, Bare metal&lt;/td&gt;
      &lt;td&gt;depends on driver&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Mesh&lt;/td&gt;
      &lt;td&gt;K8S&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Litmus&lt;/td&gt;
      &lt;td&gt;K8S&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;!! Chaos Toolkit is the only tool you can use to create Custom Attacks with !!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Any organization that builds and operates a distributed system and wishes to achieve a high rate of development velocity will want to add Chaos Engineering to their collection of approaches for improving resiliency.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is still a very young field, and the techniques and associated tooling are still evolving.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://principlesofchaos.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Principles of Chaos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/content/chaos-engineering/#chapter_cmm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;O’Reilly Chaos Engineering paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chaos_engineering#History&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bmc.com/blogs/chaos-monkey/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Monkey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/SimianArmy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Simian Army&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/fit-failure-injection-testing-35d8e2a9bb2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;FIT by Netflix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/chap-chaos-automation-platform-53e6d528371f&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Automation Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/community/tutorials/how-to-run-a-gameday/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to run a Chaos GameDay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adhorn.medium.com/chaos-engineering-ab0cc9fbd12a&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Engineering post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/chaos-monkey/the-simian-army/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gremlin - Chaos Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/community/tutorials/chaos-engineering-tools-comparison/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gremlin - Chaos Engineering tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PagerDuty - Post Mortem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Verte&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-verte/&quot;, &quot;avatar&quot;=&gt;&quot;tim-verte.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;tim.verte@ordina.be&quot;, &quot;phone&quot;=&gt;32472466091, &quot;bio&quot;=&gt;&quot;Tim is a Java consultant at Ordina Belgium. He enjoys to discover new technologies and challenges. Besides his work he has a keen interest in everything that involves sports and music.&quot;}</name><email>tim.verte@ordina.be</email></author><category term="Cloud" /><category term="Chaos Engineering" /><category term="DevOps" /><category term="Chaos" /><category term="Backend" /><category term="Netflix" /><category term="Simian Army" /><category term="Resiliency" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-14-chaos-engineering/thumbnail.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-14-chaos-engineering/thumbnail.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Serverless Kubernetes deployments with AWS Fargate</title><link href="https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments.html" rel="alternate" type="text/html" title="Serverless Kubernetes deployments with AWS Fargate" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments.html">&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;An AWS account&lt;/li&gt;
  &lt;li&gt;kubectl, aws-cli &amp;amp; eksctl installed&lt;/li&gt;
  &lt;li&gt;Some Kubernetes knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Introduced in late 2017, AWS Fargate is a compute engine for serverless container deployments. 
The engine allows you to run containers without worrying about your infrastructure. &lt;br /&gt;
Node scaling and configuration is done by AWS, which means that you only have to worry about the health of your own resources, not of your Kubernetes infrastructure.&lt;/p&gt;

&lt;p&gt;Fargate eliminates the struggle of configuring, scaling and initializing nodes on its own.
Because as we know, managing clusters / servers / nodes can be a challenging and expensive task.&lt;/p&gt;

&lt;p&gt;Pricing is based on the CPU and RAM that is allocated to your pod.
Instead of paying for compute nodes you pay for resources allocated to your pods which could drastically decrease computing costs.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;AWS Fargate was initially introduced for ECS in 2017. Later in 2019 they added support for EKS.
You can configure your current cluster to integrate Fargate. 
This requires a Fargate pod execution role (to communicate with different Amazon services), and a Fargate profile to specify which pods should use Fargate.
You can also create a new cluster with instant Fargate support. 
For simplicity, I will initialize a new cluster.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eksctl create cluster --name &amp;lt;cluster-name&amp;gt; --region eu-west-1 --fargate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The initialization process takes a while, so don’t wait around for it and find something else to do in the meantime.
It shouldn’t take more than 15 minutes.&lt;/p&gt;

&lt;h1 id=&quot;fargate-in-action&quot;&gt;Fargate in action&lt;/h1&gt;
&lt;p&gt;After your cluster has been created, you should see two Fargate nodes already running.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get nodes 
NAME                                                    STATUS    ROLES     AGE       VERSION
fargate-ip-192-168-124-46.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    5m       v1.18.8-eks-7c9bda
fargate-ip-192-168-97-139.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    5m       v1.18.8-eks-7c9bda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is because of the two CoreDNS pods that get spun up after the setup of the cluster.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get pods -n kube-system
NAME                     READY     STATUS    RESTARTS   AGE
coredns-58c89c64-pmjh4   1/1       Running   0          12m
coredns-58c89c64-rm4dr   1/1       Running   0          12m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each pod gets its own Fargate node and represents the resources that the pods get in order to successfully function. 
When you create a new deployment, you will notice that you have a pod in the status pending creation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl create deployment spring-boot-docker --image springio/gs-spring-boot-docker
deployment.apps/spring-boot-docker created

$&amp;gt; kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
spring-boot-docker-6656b9d9fb-h82pk   0/1       Pending   0          5s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because Fargate has yet to create a virtual node for the Pod to run in.
After a few seconds you can see that a new node has been added to your cluster.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get nodes 
NAME                                                    STATUS    ROLES     AGE       VERSION
fargate-ip-192-168-113-246.eu-west-1.compute.internal   Ready     &amp;lt;none&amp;gt;    16s       v1.18.8-eks-7c9bda
fargate-ip-192-168-124-46.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    52m       v1.18.8-eks-7c9bda
fargate-ip-192-168-97-139.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    52m       v1.18.8-eks-7c9bda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that your virtual node has been added you can see that your pod is starting up.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
spring-boot-docker-6656b9d9fb-h82pk   1/1       Running   0          2m26s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So right now we have a fully functioning Kubernetes cluster without having to touch or set up any nodes or configuration.
Fargate takes away all the stress of maintaining and scaling worker nodes, so you can concentrate on the actual deployment of your application(s) and not worry about cluster resources.
Of course, you would still need additional resources to access your application from outside the cluster, but it’s not covered in this post as this does not fall under the Fargate scope.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Fargate" /><category term="Kubernetes" /><summary type="html">Prerequisites An AWS account kubectl, aws-cli &amp;amp; eksctl installed Some Kubernetes knowledge</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-10-aws-fargate-serverless-deployments.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-10-aws-fargate-serverless-deployments.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">That is Quite the Story</title><link href="https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story.html" rel="alternate" type="text/html" title="That is Quite the Story" /><published>2020-11-25T00:00:00+00:00</published><updated>2020-11-25T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story.html">&lt;p&gt;October marked the 2020 edition of &lt;a href=&quot;https://ba-beyond.eu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the BA &amp;amp; Beyond conference&lt;/a&gt;. 
As with all conferences being held in these COVID-ridden times, it was a virtual gathering and there were a variety of people from across the globe that came to share their insights, experiences and opinions on topics from their respective fields of knowledge. 
This ranged from agile practices to data science to process analysis and management. 
For me the workshop that struck a chord was given by Lori L. Silverman (&lt;a href=&quot;https://www.partnersforprogress.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Partners for Progress&lt;/a&gt;). 
She is a leading authority on decision management and its underlying data analysis techniques and an advocate for business storytelling. 
This workshop was titled “Facts Tell, Stories Sell”.&lt;/p&gt;

&lt;h2 id=&quot;a-new-approach&quot;&gt;A New Approach&lt;/h2&gt;

&lt;p&gt;A typical data analysis project starts with a business sponsor handing a large blob of data to a team of data scientists, of whom he asks to make heads and tails about the numbers in front of them. 
The sponsor wants actionable insight on which he can act to enhance whatever goals and objectives the sponsor is chasing. 
What comes naturally to most data scientists is to employ the OSEMN framework. 
This framework consists of the following five steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Obtain: Gather all accessible data from relevant data sources.&lt;/li&gt;
  &lt;li&gt;Scrub: Clean up and formalize the retrieved data into a format that can be interpreted by a machine or data analyst.&lt;/li&gt;
  &lt;li&gt;Explore: Detect significant patterns and trends within the available data sets.&lt;/li&gt;
  &lt;li&gt;Model: Construct models to predict and forecast future data entries.&lt;/li&gt;
  &lt;li&gt;iNterpret: Utilize the models to gain actionable insight. In essence we apply the models to detect good and bad cause-and-effect sets and use them to duplicate these results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lori has a SMARTER approach for this type of undertaking. 
This approach expands on the OSEMN steps. 
Where OSEMN just stops after handing over the conclusions of the analysis and hopefully providing the much-needed actionable insight, the SMARTER approach actually takes these insights and executes actions based on decisions based on these insights. 
This is very similar to the realization that DevOps brought to the development world. 
A project for the development of a solution doesn’t simply stop when the results are delivered but goes further with actually following up on the solution when it is running in production.&lt;/p&gt;

&lt;p&gt;The steps that make up the SMARTER approach are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Seek Context: Detail the context in which the data science analysis originated.&lt;/li&gt;
  &lt;li&gt;Manage the Data: Collect all relevant data and organize it in a useful structure.&lt;/li&gt;
  &lt;li&gt;Assure Confidence: Clean up the data to increase the level of trust that can be had in said data.&lt;/li&gt;
  &lt;li&gt;Reveal Insights: Determine the insights that can be extracted from the data at hand.&lt;/li&gt;
  &lt;li&gt;Take a Stand: Formulate decisions on how to proceed with these insights.&lt;/li&gt;
  &lt;li&gt;Execute Decision: Act on the decisions that have been agreed upon.&lt;/li&gt;
  &lt;li&gt;Relay Results: Verify and report on the results of the actions to the different stakeholders.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only does the SMARTER approach have a higher scrabble score, these additional steps in the process tackle some of the common issues with data science projects and why they tend to fall short of what is needed. 
The first additional step is pivotal to tackling these issues. 
More often than not it will transpire that data analysis start off on the wrong foot. 
They get asked a quandary by a sponsor, but the analysts will not have a proper frame in which to place this. 
The first step of SMARTER determines the context. 
Why is the sponsor asking the questions he/she is asking? 
But learning the context and the business value attached to the questions, a more critical view can be taken on the questions themselves. 
Are we looking at the right things, and are we asked the correct questions to come to the insights needed to improve on the associated business value? 
Once the big picture is clear, the plan of attack presents itself much more clearly. 
Or if you would like to hear it in Lori’s own words, check out her &lt;a href=&quot;https://www.youtube.com/watch?v=u4Vx0Ufe2kQ&amp;amp;feature=youtu.be&amp;amp;ab_channel=LoriSilverman&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube presence&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/SMARTER.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After performing the necessary steps already formulated by OSEMN, we should not only have results of our data analysis. 
Data in any form or structure isn’t insight. And we need actionable insights if the business value is going to increase. 
Actionable insight works on three layers: knowledge (taking stock of what we know at present), the current state (what we need to tackle today), and the future state (what we might innovate to improve future dealings). 
A plan of action should be formulated to act on the insights we have gathered, and decisions should be taken on how to proceed (step T). 
Once the plan is clear and everyone is aligned, the team should execute the actions dictated by the decisions that have been made (step E), and the results of these actions should be communicated to the different stakeholders (final step R).&lt;/p&gt;

&lt;h2 id=&quot;business-storytelling&quot;&gt;Business Storytelling&lt;/h2&gt;

&lt;p&gt;These last steps are where business storytelling comes in. 
Although it is certainly already useful to set the context, convincing stakeholders about what the most important actionable insights are and what decisions to take and how to proceed, becomes easier and more relatable in the form of a story. 
The infographic below taken from the &lt;a href=&quot;https://www.stayingaliveuk.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Staying Alive UK website&lt;/a&gt; shows to power of a good story, and how it is processed by the brain.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/storytelling.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Constructing such a story is a skill of itself. 
Whereas it used to be a common pastime for us as a species, with hunters telling tales of their hunts around the campfire, or priests telling entire myths populated by a pantheon of gods and heroes, nowadays most of us have delegated this to a subsection of society: the writers of novels, movies, and music. 
So, we might have forgotten how to go about crafting a proper story. 
In essence, every story consists of 5 elements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The Setting: This is the framework in which the project will take place. It details the planning, the budget associated with the project, the locality of where the project will take place, as well as any other important factors that will have an effect on it.&lt;/li&gt;
  &lt;li&gt;The Characters: These are the stakeholders that will be participating in the gathering of insight and the making of decisions afterwards. The story should indicate their involvement and what they expect from the conclusion of the story.&lt;/li&gt;
  &lt;li&gt;The Plot: The plot strings together the events that happen in a story. It paints the roadmap of how the story will progress. This is a listing of all actions the project will undertake to get to actionable insight as well as the actions needed to be executed once decisions have been made.&lt;/li&gt;
  &lt;li&gt;The Conflict: During the rollout of the project, there is always conflict that takes the center stage. For the story to have a happy ending, we need to outline the obstacles we will face when trying to get to the needed insight.&lt;/li&gt;
  &lt;li&gt;The Theme: Where the plot lists and strings together the different actions that need to be taken, the theme gives these actions their why. This is the opportunity or problem that is the initial trigger for starting the project. It is the origin or intro for the story that determines how we go about realizing it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/storyelements.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarities with this way of thinking can be found in the most data driven world we know: the stock market. 
Where we have the champion of the efficient markets, Eugene Fama, Nobel prize winner for economics, stating that information gets absorbed and reflected by the market instantly, we also have his co-Nobel prize winner, Robert Shiller, sterling professor of Economics at Yale University painting a different picture. 
Professor Shiller hearkens back to the days of the first illustrious economist, Adam Smith. 
In his book “&lt;a href=&quot;https://www.amazon.co.uk/Theory-Moral-Sentiments-Penguin-Classics/dp/0143105922/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Theory of the Moral Sentiment&lt;/a&gt;”, Adam Smith expresses that companies are not solely driven by a need to maximize their profit line, but also be the need to be praiseworthy. 
Not to get praise but be worthy of it. 
Professor Shiller also elaborates on his beliefs that narratives can help us understand and predict evolutions that will take place, and in doing so help us to better prepare (or make decisions about) for what is to come. 
This is further detailed in his book “&lt;a href=&quot;https://www.amazon.co.uk/Narrative-Economics-Stories-Economic-Events/dp/0691182299/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Narrative Economics&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;When telling such stories, it is important to keep a positive tone. 
Research shows that negative news heavily influences the decision-making process. 
More specifically, it impacts the willingness of individuals to shift away from their respective opinions towards a more fitting decision. 
A study by Bradley R. Staats, Diwas S. KC, and Francesca Gino titled “Maintaining Beliefs in the Face of Negative News: The Moderating Role of Experience. Management Science” (2017) published several findings on this topic:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Negative news makes people change their views after hearing it.&lt;/li&gt;
  &lt;li&gt;People who have a great deal of experience on the topic will be less likely to change their decision when confronted with bad news.&lt;/li&gt;
  &lt;li&gt;Similarly, people who are surrounded with more experienced peers are also less likely to change their opinions in light of such news.&lt;/li&gt;
  &lt;li&gt;Negative news gets dismissed more quickly when presented to more experienced individuals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Stories are powerful tools to guide projects that need to gather actionable insight and form the decisions that are needed to move forward and address the initial requirement be it an opportunity or a problem. 
They give a sense of familiarity to the different participants. 
They provide a form of abstraction on the complexities of the project that can serve as a reduction of said complexities when communicating with those stakeholders that don’t need to give into the nitty-gritty details. 
And last but not least, they present a unified way of thinking about the project that helps with the onboarding of the stakeholders as well as the marketing towards external parties.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="architecture" /><category term="business architecture" /><category term="technical leadership" /><category term="leadership" /><summary type="html">October marked the 2020 edition of the BA &amp;amp; Beyond conference. As with all conferences being held in these COVID-ridden times, it was a virtual gathering and there were a variety of people from across the globe that came to share their insights, experiences and opinions on topics from their respective fields of knowledge. This ranged from agile practices to data science to process analysis and management. For me the workshop that struck a chord was given by Lori L. Silverman (Partners for Progress). She is a leading authority on decision management and its underlying data analysis techniques and an advocate for business storytelling. This workshop was titled “Facts Tell, Stories Sell”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-25-Quite-The-Story/storiesmatter.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-25-Quite-The-Story/storiesmatter.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Monitoring Spring Boot with Prometheus and Grafana</title><link href="https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana.html" rel="alternate" type="text/html" title="Monitoring Spring Boot with Prometheus and Grafana" /><published>2020-11-16T00:00:00+00:00</published><updated>2020-11-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana</id><content type="html" xml:base="https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prometheus&quot; id=&quot;markdown-toc-prometheus&quot;&gt;Prometheus&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-prometheus&quot; id=&quot;markdown-toc-what-is-prometheus&quot;&gt;What is Prometheus?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-do-we-need-prometheus&quot; id=&quot;markdown-toc-why-do-we-need-prometheus&quot;&gt;Why do we need Prometheus?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-it-works&quot; id=&quot;markdown-toc-how-it-works&quot;&gt;How it works&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#prometheus-server&quot; id=&quot;markdown-toc-prometheus-server&quot;&gt;Prometheus server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#prometheus-targets&quot; id=&quot;markdown-toc-prometheus-targets&quot;&gt;Prometheus targets&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#micrometer&quot; id=&quot;markdown-toc-micrometer&quot;&gt;Micrometer&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configuring-prometheus&quot; id=&quot;markdown-toc-configuring-prometheus&quot;&gt;Configuring Prometheus&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#grafana&quot; id=&quot;markdown-toc-grafana&quot;&gt;Grafana&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-grafana&quot; id=&quot;markdown-toc-what-is-grafana&quot;&gt;What is Grafana&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-grafana&quot; id=&quot;markdown-toc-why-grafana&quot;&gt;Why Grafana&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo-project&quot; id=&quot;markdown-toc-demo-project&quot;&gt;Demo project&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-spring-boot&quot; id=&quot;markdown-toc-setup-spring-boot&quot;&gt;Setup Spring Boot&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#adding-our-own-custom-metrics&quot; id=&quot;markdown-toc-adding-our-own-custom-metrics&quot;&gt;Adding our own custom metrics&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#demometrics-class&quot; id=&quot;markdown-toc-demometrics-class&quot;&gt;DemoMetrics class&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#demometricsscheduler-class&quot; id=&quot;markdown-toc-demometricsscheduler-class&quot;&gt;DemoMetricsScheduler class&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-prometheus&quot; id=&quot;markdown-toc-setup-prometheus&quot;&gt;Setup Prometheus&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-grafana&quot; id=&quot;markdown-toc-setup-grafana&quot;&gt;Setup Grafana&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#adding-a-custom-metric-panel&quot; id=&quot;markdown-toc-adding-a-custom-metric-panel&quot;&gt;Adding a custom metric panel&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In a distributed landscape where we are working with microservices, serverless applications, or just event-driven architecture as a whole, observability, which comprises monitoring, logging, tracing, and alerting, is an important architectural concern.&lt;/p&gt;

&lt;p&gt;There are a few reasons why we want visibility in our highly distributed systems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Issues will occur, even when our best employees have built it.&lt;/li&gt;
  &lt;li&gt;Distributed systems generate distributed failures, which can be devastating when we are not prepared in advance.&lt;/li&gt;
  &lt;li&gt;Reveal mistakes early, which is great for improvement and learning.&lt;/li&gt;
  &lt;li&gt;It keeps us accountable.&lt;/li&gt;
  &lt;li&gt;Reduce the mean time to resolution (MTTR).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blogpost I will explain the core concepts of Prometheus and Grafana.&lt;br /&gt;
In the last section I set up a demo project, so you can follow along and implement monitoring in your own applications.&lt;/p&gt;

&lt;h1 id=&quot;prometheus&quot;&gt;Prometheus&lt;/h1&gt;

&lt;h2 id=&quot;what-is-prometheus&quot;&gt;What is Prometheus?&lt;/h2&gt;

&lt;p&gt;Prometheus, originally developed by SoundCloud is an open source and community-driven project that graduated from the Cloud Native Computing Foundation.
It can aggregate data from almost everything:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
  &lt;li&gt;Multiple languages&lt;/li&gt;
  &lt;li&gt;Linux servers&lt;/li&gt;
  &lt;li&gt;Windows servers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-do-we-need-prometheus&quot;&gt;Why do we need Prometheus?&lt;/h2&gt;

&lt;p&gt;In our modern times of microservices, DevOps is becoming more and more complex and therefore needs automation.&lt;br /&gt;
We have hundreds of processes running over multiple servers, and they are all interconnected.&lt;/p&gt;

&lt;p&gt;If we would not monitor these services then we have no clue about what is happening on hardware level or application level.&lt;br /&gt;
There are many things which we want to be notified about, like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Errors&lt;/li&gt;
  &lt;li&gt;Response latency&lt;/li&gt;
  &lt;li&gt;System overload&lt;/li&gt;
  &lt;li&gt;Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we are working with so many moving pieces, we want to be able to quickly identify a problem when something goes wrong inside one of our services.&lt;br /&gt;
If we wouldn’t monitor, it could be very time-consuming, since we have no idea where to look.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;an-example-of-a-failing-service&quot;&gt;An example of a failing service&lt;/h3&gt;

&lt;p&gt;Imagine that one server ran out of memory and therefore knocked off a running service container, which syncs two databases.&lt;br /&gt;
One of those databases gets used by the authentication service, which now also stops working, because the database is unavailable.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;prometheus server&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/failing-servers.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;How do you know what went wrong, when your application that depends on the authentication service, now can’t authenticate users anymore?&lt;br /&gt;
The only thing we would see is an error message: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR: Authentication failed&lt;/code&gt;.&lt;br /&gt;
We would need to work backwards over every service, all the way back to the stopped container, to find out what is causing the problem.&lt;/p&gt;

&lt;p&gt;A better way would be to have a tool which:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Constantly monitors all services&lt;/li&gt;
  &lt;li&gt;Alerts system admins when something crashes&lt;/li&gt;
  &lt;li&gt;Identifies problems before they occur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus is exactly that tool, it can identify memory usage, CPU usage, available disk space, etc.&lt;br /&gt;
We can predefine certain thresholds about which we want to get notified.&lt;/p&gt;

&lt;p&gt;In our example it could have been that the memory of our failing server would have reached 70% memory usage for more than one hour, and could’ve sent an alert to our admins before the crash happened.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;h3 id=&quot;prometheus-server&quot;&gt;Prometheus server&lt;/h3&gt;

&lt;p&gt;The server does the actual monitoring work, and it consists of three main parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Storage, which is a time series database.&lt;/li&gt;
  &lt;li&gt;Data retrieval worker, which is pulling the data from our target services.&lt;/li&gt;
  &lt;li&gt;Webserver, which accepts &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PromQL&lt;/a&gt; queries to get data from our DB.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;prometheus server&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prom-server.jpg&quot; style=&quot;max-width: 100%; height:auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Even though Prometheus has its own UI to show graphs and metrics, we will be using Grafana as an extra layer on top of this webserver, to query and visualize our database.&lt;/p&gt;

&lt;h3 id=&quot;prometheus-targets&quot;&gt;Prometheus targets&lt;/h3&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;what-does-it-monitor&quot;&gt;What does it monitor?&lt;/h4&gt;

&lt;p&gt;Prometheus monitors nearly anything. It could be a Linux/windows server, Apache server, single applications, services, etc.&lt;br /&gt;
It monitors &lt;strong&gt;units&lt;/strong&gt; on those targets like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CPU usage&lt;/li&gt;
  &lt;li&gt;Memory/ Disk usage&lt;/li&gt;
  &lt;li&gt;Request count&lt;/li&gt;
  &lt;li&gt;Request durations&lt;/li&gt;
  &lt;li&gt;Exceptions count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The units that we monitor are called metrics, which get saved into the Prometheus time-series database.&lt;br /&gt;
Prometheus’ metrics are formatted like a human-readable text file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus endpoint actuator&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-endpoint.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this file we can see that there is a “HELP” comment which describes what the metric is, and we have a “TYPE” which can be one of four metric-types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Counter: how many times X happened (exceptions)&lt;/li&gt;
  &lt;li&gt;Gauge: what is the current value of X now ? (disk usage, cpu etc)&lt;/li&gt;
  &lt;li&gt;Histogram: how long or how big?&lt;/li&gt;
  &lt;li&gt;Summary: similar to histogram it monitors request durations and response sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;collecting-metrics-from-targets&quot;&gt;Collecting metrics from targets&lt;/h4&gt;

&lt;p&gt;There are basically two ways of ingesting metrics into a monitoring system. &lt;br /&gt;
We can either push the data from our clients to our monitoring system, or we pull the data from the monitoring system.&lt;/p&gt;

&lt;p&gt;Prometheus is a service which polls a set of configured targets to intermittently fetch their metric values.&lt;br /&gt;
In Prometheus terminology, this polling is called scraping.&lt;/p&gt;

&lt;p&gt;There is no clear-cut answer about which one is the best, they both have their pros and cons, but some big disadvantages for pushing data are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;possibility of flooding the network.&lt;/li&gt;
  &lt;li&gt;risk of package loss.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;pull data image&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/pull-data.jpg&quot; style=&quot;max-width: 100%; height:auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The data which gets exposed on the endpoint needs to be in the correct format, one which Prometheus can understand.&lt;/p&gt;

&lt;p&gt;As stated before, Prometheus can monitor a lot of different things, servers, services, databases, etc.&lt;br /&gt;
Some servers even have a metrics endpoint enabled by default, so for those we don’t have to change anything.&lt;br /&gt;
For the ones who don’t have an endpoint enabled by default, we need an exporter.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;exporters&quot;&gt;Exporters&lt;/h4&gt;

&lt;p&gt;There are a number of libraries and servers which help in exporting existing metrics from third-party systems as Prometheus metrics.
You can have a look at the &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exporters/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;exporters and integration tools&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;On a side note, these tools are also available as Docker images, so we can use them inside Kubernetes clusters.&lt;br /&gt;
We can run an exporter docker image for a MySQL database as a side container inside the MySQL pod, connect to it and start translating data, to expose it on the metrics endpoint.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;monitoring-our-own-application&quot;&gt;Monitoring our own application&lt;/h4&gt;

&lt;p&gt;If we want to add our own instrumentation to our code, to know how many server resources our own application is using, how many requests it is handling or how many exceptions occurred, then we need to use one of the &lt;a href=&quot;https://prometheus.io/docs/instrumenting/clientlibs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;client libraries&lt;/a&gt;.
These libraries will enable us to declare all the metrics we deem important in our application, and expose them on the metrics endpoint.&lt;/p&gt;

&lt;h3 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h3&gt;

&lt;p&gt;To monitor our Spring Boot application we will be using an exporter named Micrometer.&lt;br /&gt;
Micrometer is an open-source project and provides a metric facade that exposes metric data in a vendor-neutral format which Prometheus can ingest.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Micrometer provides a simple facade over the instrumentation clients for the most popular monitoring systems, allowing you to instrument your JVM-based application code without vendor lock-in. Think SLF4J, but for metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Micrometer is not part of the Spring ecosystem and needs to be added as a dependency. In our demo application we will add this to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file.
For a deeper understanding, check out our &lt;a href=&quot;https://ordina-jworks.github.io/microservices/2017/09/17/monitoring-your-microservices-with-micrometer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; about Micrometer.&lt;/p&gt;

&lt;h2 id=&quot;configuring-prometheus&quot;&gt;Configuring Prometheus&lt;/h2&gt;

&lt;p&gt;To instruct Prometheus on what it needs to scrape, we create a &lt;strong&gt;prometheus.yml&lt;/strong&gt; configuration file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus configuration file&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/promyml.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this configuration file we declare a few things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;global configs, like how often it will scrape its targets.&lt;/li&gt;
  &lt;li&gt;we can declare &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rule files&lt;/a&gt;, so when we meet a certain condition, we get an alert.&lt;/li&gt;
  &lt;li&gt;which services it needs to monitor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this example you can see that Prometheus will monitor two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our Spring Boot application&lt;/li&gt;
  &lt;li&gt;Its own health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus expects the data of our targets to be exposed on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/metrics&lt;/code&gt; endpoint, unless otherwise declared in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics_path&lt;/code&gt; field.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;alerts&quot;&gt;Alerts&lt;/h3&gt;

&lt;p&gt;With Prometheus, we have the possibility to get notified when metrics have reached a certain point, which we can declare in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rules&lt;/code&gt; files. 
Prometheus has a component which is called the “Alertmanager”, and it can send notifications over various channels like emails, Slack, PagerDuty, etc.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;querying-our-data&quot;&gt;Querying our data&lt;/h3&gt;

&lt;p&gt;Since Prometheus saves all our data in a time series database, which is located on disk in a custom timeseries format, we need to use PromQL query language, if we want to query this database.&lt;/p&gt;

&lt;p&gt;We can do this via the Prometheus WebUI, or we can use some more powerful visualization tools like Grafana.&lt;/p&gt;

&lt;h1 id=&quot;grafana&quot;&gt;Grafana&lt;/h1&gt;

&lt;h2 id=&quot;what-is-grafana&quot;&gt;What is Grafana&lt;/h2&gt;

&lt;p&gt;Grafana is an open-source metric analytics &amp;amp; visualization application.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is used for visualizing time series data for infrastructure and application analytics.&lt;/li&gt;
  &lt;li&gt;It is also a web application which can be deployed anywhere users want.&lt;/li&gt;
  &lt;li&gt;It can target a data source from Prometheus and use its customizable panels to give users powerful visualization of the data from any infrastructure under management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-grafana&quot;&gt;Why Grafana&lt;/h2&gt;

&lt;p&gt;One of the significant advantages of Grafana are its customization possibilities.&lt;br /&gt;
It’s effortless to customize the visualization for vast amounts of data.&lt;br /&gt;
We can choose a linear graph, a single number panel, a gauge, a table, or a heatmap to display our data.&lt;br /&gt;
We can also sort all our data with various labels so data with different labels will go to different panels.&lt;/p&gt;

&lt;p&gt;Last but not least, there are a ton of &lt;a href=&quot;https://grafana.com/grafana/dashboards&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;premade dashboard-templates&lt;/a&gt; ready to be imported, so we don’t have to create everything manually.&lt;/p&gt;

&lt;h1 id=&quot;demo-project&quot;&gt;Demo project&lt;/h1&gt;

&lt;h2 id=&quot;setup-spring-boot&quot;&gt;Setup Spring Boot&lt;/h2&gt;

&lt;p&gt;To demonstrate how to implement Prometheus and Grafana in your own projects, I will go through the steps to set up a basic Spring Boot application which we monitor by using Docker images of Prometheus and Grafana.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Set up a regular Spring Boot application by using &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializr&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add dependency for Actuator
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add dependency for Micrometer
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.micrometer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Expose our needed Prometheus endpoint in the application.properties file
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;management.endpoints.web.exposure.include=prometheus
management.endpoint.health.show-details=always
management.metrics.tags.application= MonitoringSpringDemoProject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After this we can run the application and browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080/actuator&lt;/code&gt;, where we can see all the available endpoints. The one we need and will use to monitor this application, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080/actuator/prometheus&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus endpoint actuator&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-endpoint.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-our-own-custom-metrics&quot;&gt;Adding our own custom metrics&lt;/h3&gt;

&lt;p&gt;We can also define some custom metrics, which I will briefly demonstrate in this section.&lt;/p&gt;

&lt;p&gt;To be able to monitor custom metrics we need to import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeterRegistry&lt;/code&gt; from the Micrometer library and inject it into our class. 
This gives us the possibility to use &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java#L25&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;counters&lt;/a&gt;, &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java#L23&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gauges&lt;/a&gt;, &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java#L34&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;timers&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;To demonstrate how we can use this, I added two classes in our basic Spring application.&lt;br /&gt;
DemoMetrics has a custom Counter and Gauge, which will get updated every second through our DemoMetricsScheduler class.&lt;br /&gt;
The counter gets incremented by one, and the gauge will get a random number between 1 and 100.&lt;/p&gt;

&lt;h5 id=&quot;demometrics-class&quot;&gt;DemoMetrics class&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoGauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DemoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo_counter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoGauge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo_gauge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomMetricsData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoGauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRandomNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;max must be greater than min&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;demometricsscheduler-class&quot;&gt;DemoMetricsScheduler class&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetricsScheduler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DemoMetricsScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;triggerCustomMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomMetricsData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are able to see our custom metrics on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/prometheus&lt;/code&gt; endpoint, as you can see below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus custom metrics text&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/custom_metrics.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-prometheus&quot;&gt;Setup Prometheus&lt;/h2&gt;

&lt;p&gt;The easiest way to run Prometheus is via a Docker image which we can get by running:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull prom/prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After we download the image, we need to configure our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.yml&lt;/code&gt; file. 
Since I want to demonstrate how to monitor a Spring Boot application, as well as Prometheus itself, it should look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prometheus'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9090'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;spring-actuator'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;metrics_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/actuator/prometheus'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;192.168.0.9:8080'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We define two targets which it needs to monitor, our Spring application and Prometheus.&lt;br /&gt;
Since we run Prometheus from inside Docker we need to enter the host-ip which is in my case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards we can run the Prometheus image by running the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 9090:9090 -v &amp;lt;PATH_TO_prometheus.yml_FILE&amp;gt;:/etc/prometheus/prometheus.yml prom/prometheus 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We mount the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.yml&lt;/code&gt; config file into the Prometheus image and expose port 9090, to the outside of Docker.&lt;/p&gt;

&lt;p&gt;When this is up and running we can access the Prometheus webUI on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:9090&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus UI&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheusUI.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When we navigate to Status &amp;gt; Targets, we can check if our connections are up and are correctly configured.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus target tab&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-target.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Yet again, we can check our custom metrics in the Prometheus UI, by selecting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_gauge&lt;/code&gt; and inspecting our graph.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus custom metrics graph&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/custom-graph.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-grafana&quot;&gt;Setup Grafana&lt;/h2&gt;

&lt;p&gt;To run Grafana we will use the same approach as with Prometheus.&lt;/p&gt;

&lt;p&gt;We download and run the image from Docker Hub.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 3000:3000 grafana/grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can access the Grafana UI from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;, where you can enter “admin” as login and password.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana UI&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-ui.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After we arrive at the landing page, we need to set up a data source for Grafana.&lt;br /&gt;
Navigate to Configuration &amp;gt; Data Sources, add a Prometheus data source and configure it like the example below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-datasource.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;For this example I used one of the premade dashboards which you can find on the &lt;a href=&quot;https://grafana.com/grafana/dashboards&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Grafana Dashboards&lt;/a&gt; page.&lt;br /&gt;
The dashboard I used to monitor our application is the JVM Micrometer dashboard with import id: 4701.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-import.PNG&quot; width=&quot;650&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Give your dashboard a custom name and select the prometheus data source we configured in step 3.&lt;br /&gt;
Now we have a fully pre-configured dashboard, with some important metrics showcased, out of the box.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana dashboard&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-done.png&quot; width=&quot;650&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-a-custom-metric-panel&quot;&gt;Adding a custom metric panel&lt;/h3&gt;

&lt;p&gt;To demonstrate how we can create a panel for one of our own custom metrics, I will list the required steps below.&lt;/p&gt;

&lt;p&gt;First we need to add a panel by clicking on “add panel” on the top of the page, and yet again on “add new panel” in the center.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-add-panel.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;Then we need to configure our panel, which we do by selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_gauge&lt;/code&gt; in the metrics field.&lt;br /&gt;
To display our graph in a prettier way, we can choose the “stat” type under the visualization tab.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-custom-panel-gauge.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;When we click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; in the top right corner, our new panel gets added to the dashboard.&lt;/p&gt;

&lt;p&gt;Afterwards, we can do the same thing for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_counter&lt;/code&gt; metric.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add another extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-custom-panel-counter.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;After going through all of these steps, we now have an operational dashboard which monitors our Spring Boot application, with our own custom metrics.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-dash.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;After reading this blogpost I hope you can see that using Prometheus as a data aggregator in a distributed system is not really all that hard.&lt;br /&gt;
It has a lot of client libraries which integrate seamlessly with our infrastructure, services and applications.&lt;/p&gt;

&lt;p&gt;Using Grafana on top of his to visualize our data, feels like a breeze when we use pre-existing dashboards to quickly get things up and running.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Govaerts&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-govaerts/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-govaerts.jpg&quot;, &quot;title&quot;=&gt;&quot;Java developer&quot;, &quot;email&quot;=&gt;&quot;kevin.govaerts1@gmail.com&quot;, &quot;linkedin&quot;=&gt;&quot;kevingovaerts&quot;, &quot;bio&quot;=&gt;&quot;Kevin works as a back-end developer for Ordina Belgium, focussing mainly on Spring boot, Angular and AWS-technologies.&quot;}</name><email>kevin.govaerts1@gmail.com</email></author><category term="Monitoring" /><category term="Spring" /><category term="Prometheus" /><category term="Grafana" /><category term="Docker" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-16-monitoring-spring-prometheus-grafana/thumbnail.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-16-monitoring-spring-prometheus-grafana/thumbnail.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TypeScript in a serverless backend with NestJS and Azure Functions</title><link href="https://ordina-jworks.github.io/backend/2020/11/12/Typescript-in-a-serverless-backend-with-NestJS-and-Azure-Functions.html" rel="alternate" type="text/html" title="TypeScript in a serverless backend with NestJS and Azure Functions" /><published>2020-11-12T00:00:00+00:00</published><updated>2020-11-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/backend/2020/11/12/Typescript-in-a-serverless-backend-with-NestJS-and-Azure-Functions</id><content type="html" xml:base="https://ordina-jworks.github.io/backend/2020/11/12/Typescript-in-a-serverless-backend-with-NestJS-and-Azure-Functions.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#parametersmodule&quot;&gt;ParametersModule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#authorization-guards&quot;&gt;Authorization Guards&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#azure-function-and-cosmosdb&quot;&gt;Azure Function and CosmosDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When I asked a colleague to validate my code structure for this blog, he asked me “Why would one use TypeScript in the backend at all?”. 
He’s a Java programmer and didn’t know TypeScript’s properties very well. 
An introduction: TypeScript is an asynchronous, functional programming language which compiles down to plain JavaScript. 
It supports interfaces, classes and access modifiers like private, protected and public.&lt;/p&gt;

&lt;p&gt;When first using TypeScript, it felt less easy than using Spring Boot, which I had used prior during Java programming.
This is where NestJS comes in, a NodeJS framework built for the backend with Object Oriented Programming in mind.
If you have worked with a framework like Spring before, NestJS will be quite easy for you to understand.
It requires a modular way of working, which makes sure the application stays well organised.&lt;/p&gt;

&lt;p&gt;In this blog, we take a dive into using NestJS in a serverless application hosted in an Azure Function and connect it with a CosmosDB.
Of course, NestJS can be integrated with other serverless services like &lt;a href=&quot;https://blog.theodo.com/2019/06/deploy-a-nestjs-app-in-5-minutes-with-serverless-framework/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&quot;https://jacob-do.medium.com/token-validation-with-aws-cognito-and-nestjs-6f9e4088393c&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cognito&lt;/a&gt;.
However, I found the process of converting this application to a serverless function to be a very smooth solution requiring only one(!) command.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I made a little application which can save and return three parameters of your body: weight, fat percentage and muscle percentage.
The app is automatically deployed to an Azure function using Azure Pipelines and saves those parameters to a CosmosDB.
I made the code available on &lt;a href=&quot;https://github.com/jasperrosiers/body-parameter-tracker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt; for you to learn from, as we won’t touch on everything in the repository in this blog post.&lt;/p&gt;

&lt;p&gt;The user can send new data to the application, which will keep the history of the three parameters in a CosmosDB.
Apart from the main &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt;, I only added two modules, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersModule&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoggerModule&lt;/code&gt; to the application.
This blog post won’t explain building the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoggerModule&lt;/code&gt;, as it only serves to create a custom logger.
The &lt;a href=&quot;https://docs.nestjs.com/techniques/logger&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NestJS documentation&lt;/a&gt; provides a very clear explanation of how to use a custom logger.&lt;/p&gt;

&lt;p&gt;The application has two (basic) guards set up for the HTTP calls, one for authorization and one for role-based access. 
For this guard, we use a simple bearer token, however, integration with eg. Cognito or JWT tokens is available.&lt;/p&gt;

&lt;h2 id=&quot;parametersmodule&quot;&gt;ParametersModule&lt;/h2&gt;

&lt;p&gt;A Module in NestJS provides a clear way of organizing the project and enabling clear dependency injection.
There are four important things you can mark within a module:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllers&lt;/code&gt;: classes which capture incoming HTTP calls&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;providers&lt;/code&gt;: classes marked with NestJS’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Injectable()&lt;/code&gt;, made available for dependency injection&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imports&lt;/code&gt;: modules that need to be imported, again for dependency injection&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exports&lt;/code&gt;: subset of the providers that need to be exported for use in other modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersModule&lt;/code&gt; imports three other modules: the previously explained &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoggerModule&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigModule&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AzureCosmosDBModule&lt;/code&gt;.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigModule&lt;/code&gt; is used to be able to access environment variables from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file or from the configuration of the Azure Function. 
Note that this is also possible with a package such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotenv&lt;/code&gt;, however this isn’t very ideal as we would have to access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.env&lt;/code&gt; directly every time.
Of course, pushing those environment files to Git is bad practice. 
You can find a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env-sample&lt;/code&gt; file in the repository, which is used to show which variables need to be filled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ParametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;ParametersRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APP_GUARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;useClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RolesGuard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;LoggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ConfigModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;AzureCosmosDbModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forFeature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first step when receiving an HTTP request to the application is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersController&lt;/code&gt; as shown below.
This controller will catch all requests on the ‘parameters’ endpoint.
Using annotations, you can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make a check for the type of incoming request and divide the traffic accordingly. This is similar to the way annotations work in the Spring Framework (eg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@PostMapping&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Customise which HTTP code you want to return on successful calls, as I did with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createParameters&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Res()&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt; to send a completely customised response, however I did not use that here.&lt;/li&gt;
  &lt;li&gt;Execute Guards before being able to activate the method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post()&lt;/code&gt; method. 
It first asks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametersService&lt;/code&gt; to check if there is an object with the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt; present in the database.
We could ask the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametersRepository&lt;/code&gt; for this information directly, however, having this layer of abstraction is essential for having cleaner code.
If there is no object present yet, it will create a new one, otherwise, it will update the existing one. 
For this update, it will map the new info to the existing object. 
Again, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametersService&lt;/code&gt; for its abstraction layer, the controller should only be used for methods capturing HTTP calls.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loggerSerivce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LoggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ParametersController&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;HttpCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;UseGuards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthGuard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fatPercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;musclePercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// could implement @Res() from express to send a proper response to say it should at least contain one of the parameters or a userName&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;existingParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParametersEntityByUserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existingParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;updatedParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapDtoToEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;existingParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updatedParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;UseGuards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthGuard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParametersEntityByUserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;UseGuards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthGuard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moving on to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersService&lt;/code&gt;, we’ll only take a glance at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create()&lt;/code&gt; function.
When receiving an HTTP call, it will contain values for at least one of our three parameters.
In this method, we just check the values and add them to the respective array. 
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; field contains the moment that the value gets updated to track the user’s progress over time.
The parameters will then be put into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersEntity&lt;/code&gt; (Discussed in &lt;a href=&quot;#azure-function-and-cosmosdb&quot;&gt;Azure Function and CosmosDB&lt;/a&gt;) and added to the database using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametersRepository&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parametersRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bodyweight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BodyweightDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fatPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PercentageDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;musclePercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PercentageDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;bodyweight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fatPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fatPercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fatPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;musclePercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;musclePercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;musclePercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parametersDto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyweight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fatPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;musclePercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// More code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create()&lt;/code&gt; function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParametersRepository&lt;/code&gt; adds the date the object was created and adds it to the database.
We see a good example of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loggerService&lt;/code&gt; here too.
First, we set the context to ‘ParametersRepository’, so that, when it logs something, it will show that the log came from this class.
This way, logs can easily be retraced to its origin.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;InjectModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LoggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ParametersRepository&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ParametersEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loggerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Create RUs: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestCharge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;authorization-guards&quot;&gt;Authorization Guards&lt;/h2&gt;

&lt;p&gt;The project uses two guards, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthGuard&lt;/code&gt; for the authorization, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RolesGuard&lt;/code&gt; to check which roles can access certain resources.
A good explanation of both can be found in the &lt;a href=&quot;https://docs.nestjs.com/guards&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NestJS documentation&lt;/a&gt;.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RolesGuard&lt;/code&gt; is almost an exact copy from the documentation, so let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthGuard&lt;/code&gt; which doesn’t need to be provided from a module.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canActivate()&lt;/code&gt; method is called before executing the method in the controller.
It needs to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, or the method won’t execute and the application will return a 401 Unauthorized code.
In this case, we check if the authorization header has the correct value as configured in the environment variables.
Other setups, like OAuth, Cognito or JWT tokens are also possible.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthGuard&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CanActivate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConfigService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canActivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExecutionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToHttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bearer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Invalid token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FORBIDDEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;BEARER_TOKEN&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;azure-function-and-cosmosdb&quot;&gt;Azure Function and CosmosDB&lt;/h2&gt;

&lt;p&gt;To convert this app into an Azure Function and make it serverless, we only need a single command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nest add @nestjs/azure-func-http&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will add some files and folders, including a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.azure.ts&lt;/code&gt; through which your app can be started.
It will set a global prefix ‘api’ to all your controllers, the standard for Azure Functions.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INestApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AzureHttpRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setGlobalPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you can choose to either run your app as a normal Web App or a serverless Azure Function.
The only thing left to do is &lt;a href=&quot;https://portal.azure.com/#create/Microsoft.FunctionApp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;create an Azure Function&lt;/a&gt; in the Portal and set up a pipeline, which is also an automatic process (on Azure DevOps).
This will generate an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure-pipelines.yml&lt;/code&gt; file containing all necessary information and connect it with the function automatically.
On every push to the master branch (pull request), it will automatically start a build and deploy process.
For the environment variables, they need to be set up within the ‘configuration’ tab of your function, and then, you’re all set.’&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Azure Function Creation&quot; src=&quot;/img/2020-11-12-Typescript-in-the-backend-with-NestJS-and-Azure-Functions/Azure-pipeline.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! 
You converted your app to a serverless Function!
Quite an easy conversion, wasn’t it?&lt;/p&gt;

&lt;p&gt;The database connection is just as easy.
Again, in the portal, you can &lt;a href=&quot;https://portal.azure.com/#create/Microsoft.DocumentDB&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;create a CosmosDB Account&lt;/a&gt;.
In that account, go to ‘Data Explorer’ and create a new database and add the necessary variables to the configuration of the Function.&lt;/p&gt;

&lt;p&gt;In the end, your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; should look like this.
Notice that we can’t use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigService&lt;/code&gt; in this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Module()&lt;/code&gt;, as it needs to be initialised before usage.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ConfigModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ParametersModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;LoggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;AzureCosmosDbModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATABASE_ENDPOINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATABASE_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;AppController&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it!
Your app is now fully functional!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post, we made a small application to discover how NestJS can be used in the backend with some of its neat features.
Of course, this was a very basic program to show some of the possibilities.
For more information on NestJS and its features, check out the very thorough &lt;a href=&quot;https://docs.nestjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jasperrosiers/body-parameter-tracker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The body parameter tracker project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nestjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NestJS docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.theodo.com/2019/06/deploy-a-nestjs-app-in-5-minutes-with-serverless-framework/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Lambda integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jacob-do.medium.com/token-validation-with-aws-cognito-and-nestjs-6f9e4088393c&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Cognito integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jasper&quot;, &quot;last_name&quot;=&gt;&quot;Rosiers&quot;, &quot;github&quot;=&gt;&quot;jasperrosiers&quot;, &quot;linkedin&quot;=&gt;&quot;jasper-rosiers&quot;, &quot;permalink&quot;=&gt;&quot;/author/jasper-rosiers/&quot;, &quot;avatar&quot;=&gt;&quot;jasper-rosiers.png&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;jasper.rosiers@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jasper is a Java Developer with a love for IoT and innovative tech. He has a lot of experience in building chatbots using various platforms and coupling them to different chat clients. He also has a passion for the Agile way of working, Scrum and communication, both inside and outside the team.&quot;}</name><email>jasper.rosiers@ordina.be</email></author><category term="Backend" /><category term="TypeScript" /><category term="Backend" /><category term="NestJS" /><category term="Azure" /><category term="Serverless" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-12-Typescript-in-the-backend-with-NestJS-and-Azure-Functions/banner.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-12-Typescript-in-the-backend-with-NestJS-and-Azure-Functions/banner.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JOIN 2020</title><link href="https://ordina-jworks.github.io/iot/2020/11/06/JOIN-2020.html" rel="alternate" type="text/html" title="JOIN 2020" /><published>2020-11-06T00:00:00+00:00</published><updated>2020-11-06T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2020/11/06/JOIN-2020</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2020/11/06/JOIN-2020.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#our-speakers&quot;&gt;Our speakers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tech-track-sessions&quot;&gt;Tech Track sessions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#agile-and-business-track-sessions&quot;&gt;Agile and Business Track Sessions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-the-spotlight-ghelamco-alert&quot;&gt;In the spotlight Ghelamco alert&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-the-spotlight-some-pitfalls-of-ai&quot;&gt;In the spotlight Some pitfalls of AI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As is annual tradition, even despite Corona, we held our 8th JOIN event in the beginning of October.
JOIN stands for JWorks Open Innovation &amp;amp; Networking and aims to bring interesting talks on a wide variety of topics.
This years edition was a bit different being that large gatherings of people are a no-no, so we opted for an online only edition.&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/NeuqRdB60G0&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;We stuck to our dual track approach to provide some interesting sessions for everybody:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Tech track consisting of 4 sessions:
    &lt;ul&gt;
      &lt;li&gt;Ghelamco alert: Combining Raspberry Pi and AWS Cloud to get the best of both worlds - Bas Moorkens&lt;/li&gt;
      &lt;li&gt;Infrastructure is code with the AWS Cloud Development Kit (AWS CDK) - Kevin Azijn&lt;/li&gt;
      &lt;li&gt;Moving a complex and slow deployment pipeline to a streamlined and lightning fast Azure deployment - Pieter Vincken&lt;/li&gt;
      &lt;li&gt;Some pitfalls of AI - Joachim Ganseman&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An agile and business track also consisting of 4 sessions:
    &lt;ul&gt;
      &lt;li&gt;Dancing the BOSSA nova – how to bring a culture of experimentation into your company - Edwin Burgers &amp;amp; Maryse Meinen&lt;/li&gt;
      &lt;li&gt;The power of Kata - Michaëla Broeckx&lt;/li&gt;
      &lt;li&gt;Failure Culture – what it means to fail and how we can gain value from it - Anke Maerz&lt;/li&gt;
      &lt;li&gt;Why don’t you get my code? - Francis Laleman&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read and watch on down below as we go over each speaker and talk.&lt;/p&gt;

&lt;h2 id=&quot;our-speakers&quot;&gt;Our speakers&lt;/h2&gt;

&lt;p&gt;Like any event we depend on our contributors, in our case being our speakers.
Without them our event would not be possible, they provide us with the awesome and interesting sessions.&lt;/p&gt;

&lt;h3 id=&quot;bas-moorkens&quot;&gt;Bas Moorkens&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt=&quot;Bas Moorkens&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/bas-moorkens.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Bas is a cloud platform architect at Ordina Belgium who is fascinated by AWS, containers and pipeline automation. He started off as a Java full stack developer but got more and more into the DevOps and cloud world where he currently spends most of his time.&lt;/p&gt;&lt;p&gt;Company: JWorks - Ordina Belgium&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;kevin-azijn&quot;&gt;Kevin Azijn&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;After spending more than 10 years as a Software Engineer and Tech Lead in both consulting and financial world, Kevin got introduced to public cloud and started building web/mobile solutions and managing DevOps teams on AWS for the Flemish Government. After several years the call of technology over management became too loud to ignore and Kevin decided to join AWS as a Solutions Architect. At AWS Kevin is supporting customers with building a vision and architecting for the future.&lt;/p&gt;&lt;p&gt;Company: Amazon Web Services&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;Kevin Azijn&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/kevin-azijn.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;pieter-vincken&quot;&gt;Pieter Vincken&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt=&quot;Pieter Vincken&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/pieter-vincken.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Pieter Vincken is a Cloud Automation Engineer with a strong interest in anything related to Cloud Native. He likes to optimize development workflows, from Ideation until code running in production, by enabling CI/CD to be fully automated. Any solutions he creates, will have started as an architectural drawing.
&lt;/p&gt;&lt;p&gt;Company: JWorks - Ordina Belgium&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;joachim-ganseman&quot;&gt;Joachim Ganseman&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Joachim Ganseman is a computer scientist and has a history as a PhD student at the University of Antwerp, with side jumps to Queen Mary University in London and Stanford University, focusing on digital signal processing, machine learning and audio analysis. Since 2018, he has been working at Smals Research where he focuses on AI-related topics, including Natural Language Processing and Conversational Interfaces, and their potential applications in governmental contexts. In addition to his work, he is an excellent pianist, and as co-founder and organiser of the Belgian Informatics Olympiad, he received the annual prize for science communication from the Royal Flemish Academy of Sciences of Belgium in 2016.&lt;/p&gt;&lt;p&gt;Company: Smals Research&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;Joachim Ganseman&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/joachim-ganseman.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;edwin-burgers--maryse-meinen&quot;&gt;Edwin Burgers &amp;amp; Maryse Meinen&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt=&quot;Edwin Burgers &amp;amp; Maryse Meinen&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/edwin-burgers-and-maryse-meinen.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Edwin is a Scrum Master, agile coach and leader with 10+ years in the agile field. He has supported many teams and organisations to improve value delivery. To survive in the
current highly competitive world agile frameworks, practices and leadership are not enough. Less hierarchy, more autonomy and a higher involvement from the
people on the floor in strategy and decision making  are crucial. That´s why he is focussing on ways to address these aspects in his work as a coach or leader.&lt;/p&gt;&lt;p&gt;Maryse is a 100% scrum master, helping people and organisations increase their agility, so that they can reduce their (organisational) suffering. She coaches teams and executives in solving their own challenges and impediments in their work. As a true corporate rebel, the Socratic method for better conversations is key in her approach. More ancient philosophy should be compulsory in the agile world. And she is not dogmatic: all should use scrum.&lt;/p&gt;&lt;p&gt;Maryse and Edwin worked together at Ordina from 2015 and started their own business in Practical Agile in 2018.&lt;/p&gt;&lt;p&gt;Company: Practical Agile&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;michaëla-broeckx&quot;&gt;Michaëla Broeckx&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp;amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&lt;/p&gt;&lt;p&gt;Company: AgileWorks - Ordina Belgium&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;Michaëla Broeckx&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/michaela-broeckx.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;anke-maerz&quot;&gt;Anke Maerz&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt=&quot;Anke Maerz&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/anke-maerz.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;I am Anke and I have a mission in my life: To see and enjoy beauty in life, and to help other people to see and enjoy it, too.&lt;/p&gt;&lt;p&gt;As a Scrum Master and Agile Coach I live this mission by asking myself every morning THE question: What is it that keeps these amazing people from achieving their goals? – And whatever my answer is, that is where I want to support. Because that is where I can create space for them to see and enjoy the beauty of life.&lt;/p&gt;&lt;p&gt;This has proven very purposeful to me since 2014, when I first got introduced to Agile – and through various big and huge companies in Belgium as well as Germany.&lt;/p&gt;&lt;p&gt;Before getting into Agile I’ve been project manager and requirements engineer for 2 years, and before that I studied mathematics and psychology at the university of Tübingen (crazy mix? YES! Beautiful, right?!!)&lt;/p&gt;&lt;p&gt;Even before that time I’ve already been practicing to be a human, which has proven to be most useful on a personal as well as professional level!&lt;/p&gt;&lt;p&gt;Company: AgileWorks - Ordina Belgium&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;francis-laleman&quot;&gt;Francis Laleman&lt;/h3&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;vertical-align:top;&quot;&gt;&lt;p&gt;Today, I mainly work as a designer of cooperative learning processes and learning cultures. I am a gentle facilitator of (Agile) transformation processes, a train-the-trainer, a cooperative learning facilitator and an Agile coach.
Having spent so much time in the Middle East and in the Indian subcontinent, I have now been turning my attention to Japan - studying TPS, Lean and Kata, but also the less obvious, such as ikigai, Taoism and Zen Buddhism, or the shuhari learning process in traditional Japanese craftsmanship.
Most probably, however, you will find me in the garden.&lt;/p&gt;&lt;p&gt;Company: Agile &amp;amp; Learning Beyond Borders&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt=&quot;Francis Laleman&quot; src=&quot;/img/2020-11-06-JOIN-2020/speakers/francis-laleman.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;i-would-like-to-thank-our-speakers-once-more-from-the-whole-of-ordina-for-the-interesting-sessions-they-have-given&quot;&gt;I would like to thank our speakers once more from the whole of Ordina for the interesting sessions they have given.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tech-track-sessions&quot;&gt;Tech Track sessions&lt;/h2&gt;

&lt;h3 id=&quot;session-1---ghelamco-alert-combining-raspberry-pi-and-aws-cloud-to-get-the-best-of-both-worlds---bas-moorkens&quot;&gt;Session 1 - Ghelamco alert: Combining Raspberry Pi and AWS Cloud to get the best of both worlds - Bas Moorkens&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/Iach3_dh83g&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In this talk we will present our Ghelamco alerting solution which runs on a Raspberry Pi and is empowered by the AWS cloud to provide additional capabilities.
Come discover how we turned our RPI into a managed device by leveraging the AWS cloud.
We will demonstrate the power of this technology set by first covering the scenario where the solution is not connected to the internet.
In the second part we will do a deep dive on the scenario where the RPI is connected to the internet.
In this part we will show you how we can leverage more services of the AWS cloud to bring out the full potential of this solution, effectively giving us the best of both worlds.&lt;/p&gt;

&lt;h3 id=&quot;session-2---infrastructure-is-code-with-the-aws-cloud-development-kit-aws-cdk---kevin-azijn&quot;&gt;Session 2 - Infrastructure is code with the AWS Cloud Development Kit (AWS CDK) - Kevin Azijn&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/wRX9W-hdq5k&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to model and provision your cloud application resources using familiar programming languages.
Provisioning cloud applications can be a challenging process that requires you to perform manual actions, write custom scripts, maintain templates, or learn domain-specific languages.
AWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.
It provides you with high-level components that pre-configure cloud resources with proven defaults, so you can build cloud applications without needing to be an expert.
AWS CDK provisions your resources in a safe, repeatable manner through AWS CloudFormation.
It also enables you to compose and share your own custom components that incorporate your organization’s requirements, helping you start new projects faster.&lt;/p&gt;

&lt;h3 id=&quot;session-3---moving-a-complex-and-slow-deployment-pipeline-to-a-streamlined-and-lightning-fast-azure-deployment---pieter-vincken&quot;&gt;Session 3 - Moving a complex and slow deployment pipeline to a streamlined and lightning fast Azure deployment - Pieter Vincken&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/uz4bs9EQA0E&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;How to automate application platform deployments.
Tips and tricks about a migration from an on-premise solution onto Microsoft Azure.
Want to know how we went from 6 week lead times on a development environment to only 90 minutes and a single push of a button?&lt;/p&gt;

&lt;h3 id=&quot;session-4---some-pitfalls-of-ai---joachim-ganseman&quot;&gt;Session 4 - Some pitfalls of AI - Joachim Ganseman&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/I32IWBlcl5o&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The hype surrounding AI and machine learning creates high expectations.
There is a strong focus on software that ultimately has to make autonomous decisions and relies on difficult to access and complex statistical conclusions from large amounts of data.
This comes with some risk: errors can creep in all steps from design to rollout, which can thoroughly mess up the end result.
In addition to the spectacular AI success stories of recent years, there were also quite a few spectacular mistakes.
In this webinar we highlight that downside: what can go wrong in an AI project and what should you pay attention to?
The agenda includes: bias and fairness, adversarial attacks, explainability, as well as concerns about security, privacy and ethics.&lt;/p&gt;

&lt;h2 id=&quot;agile-and-business-track-sessions&quot;&gt;Agile and Business Track sessions&lt;/h2&gt;

&lt;h3 id=&quot;session-1---dancing-the-bossa-nova--how-to-bring-a-culture-of-experimentation-into-your-company---edwin-burgers--maryse-meinen&quot;&gt;Session 1 - Dancing the BOSSA nova – how to bring a culture of experimentation into your company - Edwin Burgers &amp;amp; Maryse Meinen&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/xDxdfoqZxvg&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In the VUCA world that we are in, companies are expected to be flexible and both rapidly responsive and resilient to change, which basically asks them to be agile.
The authors of the book BOSSAnova, Jutta Eckstein and John Buck saw 4 recurring problems at the agile transformations they were involved in, where they saw that all that comes with the agile frameworks, principles and practices is not sufficient for company-wide agility.
They combine Beyond Budgeting, Open Space, Sociocracy and Agile in practical guide for creating company-wide agility, in a probe-sense-respond manner.
This workshop gives a short introduction to BOSSAnova and how it can help to start probes and experiments in your own organization.
With an approach and a lot of good practice experiments done in other organizations.&lt;/p&gt;

&lt;h3 id=&quot;session-2---the-power-of-kata---michaëla-broeckx&quot;&gt;Session 2 - The power of Kata - Michaëla Broeckx&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/2IUNBhErVD0&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;We will jointly look for efficient ways to convert good intentions into value, by investigating some personal challenges and how we succeeded or failed.
We will examine these techniques and connect them to how our brain works.
For every challenge we take on, our human tendency to take the easiest path (the one we imagine to be right) can be counterbalanced by deliberate scientific thinking.&lt;/p&gt;

&lt;h3 id=&quot;session-3---failure-culture--what-it-means-to-fail-and-how-we-can-gain-value-from-it---anke-maerz&quot;&gt;Session 3 - Failure Culture – what it means to fail and how we can gain value from it - Anke Maerz&lt;/h3&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/PayZ4lKsr-w&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I don’t like failing.
I want to achieve a goal, I invest my time and energy, I am looking forward to achieving this goal, I am getting closer, closer - and fail.
The goal is not achieved and I want to retreat into a dark corner and just forget.
This is a perfectly normal human reaction.
Yet, as we all know, no big endeavor happens without its fair share of failure - some huge achievements even happen out of failure alone…
Hence, there is something useful to it.
Something that even smells like success!
This talk analyses different projects, their main impediments and success or failure factors, includes some interactive parts - and in the end (hopefully) leaves us with some renewed courage to face the failures in our lives… to gain value from them.&lt;/p&gt;

&lt;h3 id=&quot;session-4---why-dont-you-get-my-code---francis-laleman&quot;&gt;Session 4 - Why don’t you get my code? - Francis Laleman&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Video under review - will be added soon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a playful, interactive session on the concept of “code” - as a formal, grammar-and-syntax-driven substitute for “meaning”.
We all know that code is the central edifice of what it is that we are doing - at work, and, perhaps, even in life.
But do we fully understand the profound relationship between code and meaning? Do we really grasp how code, in all its formality and conventions, both pins us down into the confinement of “knowns”, and has the power to liberate us from what is already known and drive us forward?
After this session, expect to be aware of more than just “code”, and to be able to understand “meaning”, in life and work, through a variety of grammars and syntaxes, more diverse than ever imagined.&lt;/p&gt;

&lt;h2 id=&quot;in-the-spotlight-ghelamco-alert&quot;&gt;In the spotlight Ghelamco alert&lt;/h2&gt;

&lt;p&gt;The awesome internship project by Kevin Govaerts is a shining example of an end-to-end integrated IoT project.
It touches a lot of interesting technologies and integrates everything very nicely and includes managing a Raspberry Pi device via AWS.&lt;/p&gt;

&lt;p&gt;The project provides a solution to our parking problem at our Ghelamco office in Ghent.
Since the parking lot needs to be vacated whenever there is a “home” soccer match or we get a hefty fine per car that remains, we needed an automated solution to warn the people at the office.
This project does just that, end-to-end.
It reads &amp;amp; scrapes the data and determines when the matches are and commands the Raspberry Pi to light up the alarm light.&lt;/p&gt;

&lt;p&gt;It uses at least 10 different AWS services and the usage of AWS Greengrass allows you to deploy production ready applications to edge devices without having to manage it yourself.
I wont go into all the technical details since you should absolutely read Bas and Kevin’s their &lt;a href=&quot;https://ordina-jworks.github.io/cloud/2020/09/28/ghelamco-alert.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;excellent blog post&lt;/a&gt; about the project!
Be sure to check out the blog post and the video of the project!&lt;/p&gt;

&lt;h2 id=&quot;in-the-spotlight-some-pitfalls-of-ai&quot;&gt;In the spotlight Some pitfalls of AI&lt;/h2&gt;

&lt;p&gt;As I myself am very interested in Machine Learning and Artificial Intelligence, this talk in particular peaked my interest.
Machine Learning and AI are being portrayed as the silver bullet, as the thing every project needs.
However developing a Machine Learning model/system is not as straightforward as one might think.&lt;/p&gt;

&lt;p&gt;This talk goes into detail about what can go “wrong” and what the common pitfalls are when developing such a system.
Datasets can be a tricky matter to fully grasp and get right.
Hidden correlations or biases make that our trained models can often show the same discriminatory tendencies like normal people do.
Removing biases from a dataset is hard, very hard.
Even if you think you are not biased, please go on and go over &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_cognitive_biases&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the list of cognitive biases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Removing certain data fields/variables from the dataset in order to prevent biases can have little to no effect due to the fact that there are hidden variables.
The talk explains this with a great example, when a model has a gender bias one might think that removing the gender from the dataset might solve the issue.
This might not work since other variables might indirectly propagate the same gender bias.
If the model handles text, the gender is actually also encoded in the vocabulary and way of speaking.
It is very different between women and men.&lt;/p&gt;

&lt;p&gt;Machine Learning models are vulnerable to attacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data poisoning attacks
    &lt;ul&gt;
      &lt;li&gt;When people can enter data or find a way to add data to a source that is being used to train a model.&lt;/li&gt;
      &lt;li&gt;Verifying and cleaning data is very important to prevent this!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Adversarial attacks
    &lt;ul&gt;
      &lt;li&gt;Changing a few pixels in an image might throw off the model completely.&lt;/li&gt;
      &lt;li&gt;Because the training dataset is so large the model becomes sensitive to small and very particular changes in the input.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attacks makes using these models for very critical things like autonomous driving tricky and potentially dangerous.
While this problem is not fully solved yet, the field is advancing at an extremely high tempo, so these type of problems pose less and less of an issue.&lt;/p&gt;

&lt;p&gt;Machine Learning can be, and is used, for less legal &amp;amp; nice practices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spear &amp;amp; laser phishing
    &lt;ul&gt;
      &lt;li&gt;Phishing attacks that use very specific data collected on the target to believe extremely believable phishing vectors.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deepfakes
    &lt;ul&gt;
      &lt;li&gt;Fake news becomes harder and harder to detect because images and even videos can be altered.
Faces can be swapped, even audio can be changed to match the voice of someone else.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/nsuAQcvafCs&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;GPT3
    &lt;ul&gt;
      &lt;li&gt;This model can write full texts, code, layouts.
Often the text that is generated makes more sense than anything a certain American president would say.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%; margin-bottom:25px;&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/_x9AwxfjxvE&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Recommendation engines
    &lt;ul&gt;
      &lt;li&gt;Watch a certain type of video, get suggested more of the same but more extreme.
This enables a feedback loop, the type of suggested content is in your area of interest just a tad more extreme/strange/unbelievable, so you keep watching, and the next suggestions rinse and repeat the cycle.
This is a big issue since it has a tendency to propagate extremes.
What you see is not what other people see, it is curated for you by your past consumed content.
More than ever it is extremely important to check facts and do some digging on independent sites/new sources.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/join/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JOIN 2020 website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLgWyY-g33NlWg7rStHmTYPiN_0yJd4PxQ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tech Track playlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLgWyY-g33NlUR9F2PJ1h3bkd0cxSr4xab&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Agile &amp;amp; Business playlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ordina.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ordina Belgium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.practical-agile.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Practical Agile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/local/benelux/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smalsresearch.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Smals Research&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.francislaleman.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Agile &amp;amp; Learning Beyond Borders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a frontend consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="JOIN" /><category term="Ordina" /><category term="JWorks" /><category term="JWorks Open Innovation and Networking" /><category term="talks" /><category term="learning" /><category term="conference" /><category term="meeting" /><category term="online" /><category term="agile" /><category term="tech" /><category term="development" /><category term="AWS" /><category term="Amazon" /><category term="Azure" /><category term="Microsoft" /><category term="Scrum" /><category term="AI" /><category term="ML" /><category term="Machine Learning" /><category term="Artificial Intelligence" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-06-JOIN-2020/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-06-JOIN-2020/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Switching from RestTemplate to WebClient: A Reactive Tale</title><link href="https://ordina-jworks.github.io/rest/2020/10/12/RestTemplate-vs-WebClient.html" rel="alternate" type="text/html" title="Switching from RestTemplate to WebClient: A Reactive Tale" /><published>2020-10-12T00:00:00+00:00</published><updated>2020-10-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/rest/2020/10/12/RestTemplate-vs-WebClient</id><content type="html" xml:base="https://ordina-jworks.github.io/rest/2020/10/12/RestTemplate-vs-WebClient.html">&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison-of-resttemplate-and-webclient&quot;&gt;Comparison of RestTemplate and WebClient&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#resttemplate&quot;&gt;RestTemplate&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#webclient&quot;&gt;WebClient&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#comparison-conclusion&quot;&gt;Comparison Conclusion&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#resttemplate-summary&quot;&gt;RestTemplate Summary&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#webclient-summary&quot;&gt;WebClient Summary&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reactive-approach-with-webclient&quot;&gt;Reactive Approach with WebClient&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#introduction-to-reactive-streams&quot;&gt;Introduction to Reactive Streams&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#legacy-services-in-your-reactive-environment&quot;&gt;Legacy Services in your Reactive Environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reactive-database-connections&quot;&gt;Reactive Database Connections&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#r2dbc-2-steps-forward-1-step-back&quot;&gt;R2DBC: 2 steps forward 1 step back&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#end-to-end-reactive-example&quot;&gt;End-to-end Reactive example&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#recipe-service-reactive-r2dbc&quot;&gt;Recipe Service (Reactive R2DBC)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ingredient-service-reactive-r2dbc&quot;&gt;Ingredient Service (Reactive R2DBC)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bestmenuevergenerator-service-reactive-rest&quot;&gt;BestMenuEverGenerator Service (Reactive Rest)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angular-webapp-consumer&quot;&gt;Angular Webapp Consumer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Since the REST era, most developers have become used to working with Spring’s traditional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; from the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; for consuming Rest services. 
Spring also has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; in its reactive package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-webflux&lt;/code&gt;. This post will help you decide whether you should make the switch from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;. 
Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; is supposed to be the successor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt;, we will be looking into it a bit deeper.&lt;/p&gt;

&lt;h2 id=&quot;comparison-of-resttemplate-and-webclient&quot;&gt;Comparison of RestTemplate and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;First off, let us assume we have a Recipe Rest service which we will consume in the following examples.&lt;/p&gt;

&lt;h3 id=&quot;resttemplate&quot;&gt;RestTemplate&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; provides a synchronous way of consuming Rest services, which means it will block the thread until it receives a response. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; is deprecated since Spring 5 which means it’s not really that future proof.&lt;/p&gt;

&lt;p&gt;First, we create a Spring Boot project with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; dependency.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now inject the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplateBuilder&lt;/code&gt; bean (provided by Spring) in our service and build our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; with a base URL, 
or we could create a configured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; bean in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; file. 
With this builder we can also configure things like: maximum data size, message converters for SOAP, etc.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeRestTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RecipeRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RestTemplateBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rootUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s move on to some example basic methods we can use on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; class to communicate with our Recipe Rest service. 
We apply CRUD operations, specify our return object’s class, some parameters, body, header, etc.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterizedTypeReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{})&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipeById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipeByTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;webclient&quot;&gt;WebClient&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; exists since Spring 5 and provides an asynchronous way of consuming Rest services, which means it operates in a non-blocking way. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; is in the reactive WebFlux library and thus it uses the reactive streams approach. 
However, to really benefit from this, the entire throughput should be reactive end-to-end. 
Let me first show you an example before diving into more details.&lt;/p&gt;

&lt;p&gt;So, we create a Spring Boot project with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-webflux&lt;/code&gt; dependency.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-webflux&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can inject a builder similarly, configure it if necessary and build our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWebService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RecipeWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example similar to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; example. 
Note that this wraps our objects in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; (a stream of 0 or 1 object) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; (a stream of 0 or multiple objects) wrappers. 
These are reactive types, and we should keep them in these wrappers if we want to keep the reactive stream open and non-blocking. 
Let’s assume for this example that our Recipe Rest service which we are consuming is reactive.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToFlux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipeById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipeByTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another benefit of working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; is that you can do mappings, filtering, transformations on your data as it is passing through the stream.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToFlux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeTitleStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBlank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeTitleStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say our services, databases, etc &lt;strong&gt;are not reactive&lt;/strong&gt;, but we want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; anyway. 
Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; are not much use to us, so we will have to unwrap them. 
Since our Recipe Rest service doesn’t provide reactive streams, we receive a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; of recipes in one response, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; wraps in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt;. 
We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block()&lt;/code&gt; to block the stream and get the data out of it. Note that this shouldn’t be used in a reactive environment.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeListStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterizedTypeReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{});&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeListStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s say, the Recipe service &lt;strong&gt;IS reactive&lt;/strong&gt; and returns a stream of Recipe objects (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt;) instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, but we still want to block the reactive stream. 
Because we can only call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockFirst()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockLast()&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt;, we should collect the data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; stream into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;. 
Now this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; is wrapped inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; stream. We can then block the stream to unwrap the data.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToFlux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectedRecipesStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collectList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectedRecipesStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;comparison-conclusion&quot;&gt;Comparison Conclusion&lt;/h3&gt;

&lt;p&gt;We have learned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; is in maintenance mode and probably will not be supported in future versions. 
Even on the official Spring documentation, they advise to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; instead. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; can basically do what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; does, making synchronous blocking calls. 
But it also has asynchronous capabilities, which makes it interesting. It has a functional way of programming, which makes it easy to read as well. 
If you are working in legacy Spring (&amp;lt; 5.0) applications, you will have to upgrade to Spring 5.0 to be able to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s list both clients’ properties to have a better overview.&lt;/p&gt;

&lt;h5 id=&quot;resttemplate-summary&quot;&gt;RestTemplate Summary&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;In maintenance mode since Spring 5.0&lt;/li&gt;
  &lt;li&gt;Synchronous (blocking)&lt;/li&gt;
  &lt;li&gt;In spring-boot-starter-web library&lt;/li&gt;
  &lt;li&gt;Built on Servlet stack&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;webclient-summary&quot;&gt;WebClient Summary&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Synchronous &amp;amp; asynchronous (non-blocking) capabilities&lt;/li&gt;
  &lt;li&gt;Reactive streaming&lt;/li&gt;
  &lt;li&gt;Mono and Flux: both implement CorePublisher which extends Publisher&lt;/li&gt;
  &lt;li&gt;From Spring 5.0&lt;/li&gt;
  &lt;li&gt;Functional programming&lt;/li&gt;
  &lt;li&gt;In spring-boot-starter-webflux library&lt;/li&gt;
  &lt;li&gt;Built on Reactive stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we will look more into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;’s reactive streaming capabilities.&lt;/p&gt;

&lt;h2 id=&quot;reactive-approach-with-webclient&quot;&gt;Reactive Approach with WebClient&lt;/h2&gt;

&lt;h3 id=&quot;introduction-to-reactive-streams&quot;&gt;Introduction to Reactive Streams&lt;/h3&gt;

&lt;p&gt;Reactive streaming works a bit different under the hood than traditional request-response communication. 
Data only passes through these streams when we block or subscribe them. Calling one of these methods we saw earlier, only creates a connection to the stream. 
Data only starts passing through the entire stream when there is a ‘subscription’ or ‘block’.&lt;br /&gt;
&lt;strong&gt;Note that you should never block a reactive stream if you want your services to be reactive end-to-end.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the next sections, we will see how we can consume it.&lt;/p&gt;

&lt;h3 id=&quot;legacy-services-in-your-reactive-environment&quot;&gt;Legacy Services in your Reactive Environment&lt;/h3&gt;

&lt;p&gt;To use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; to its full potential, you should create end-to-end reactive streams. 
This might be a problem when working with legacy services. 
If you are creating fully new services, back-to-front, and only a small portion of the services you consume are legacy. 
Then you can still create your new services reactive and wrap the responses of your legacy services in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; wrappers as close to the source as possible.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRecipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterizedTypeReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromIterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, you can still partly have a reactive setup and maybe when these services will be upgraded or replaced in the future, they might become reactive as well, and you can easily implement the necessary changes on your side as well.&lt;/p&gt;

&lt;h3 id=&quot;reactive-database-connections&quot;&gt;Reactive Database Connections&lt;/h3&gt;

&lt;p&gt;There have been supporting libraries for reactive NoSQL connectivity for a while, which can retrieve data from the database in a reactive manner. 
Which means they start returning data as the database is querying, and not when the entire database has been queried. So you are good to go. 
But, with Relational databases (which you are probably using as well), there weren’t any in Spring until recently. 
Before, you could wrap your database response in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; wrappers as soon as possible when calling your database, but if these databases are the major sources of your data and not just a small portion, it kind of ruins the appeal and benefit.&lt;/p&gt;

&lt;h3 id=&quot;r2dbc-2-steps-forward-1-step-back&quot;&gt;R2DBC: 2 steps forward 1 step back&lt;/h3&gt;

&lt;p&gt;Not until very recently (December 2019), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-data-r2dbc&lt;/code&gt; dependency got released. It basically is JDBC’s reactive counterpart. 
R2DBC stands for &lt;strong&gt;Reactive Relational DataBase Connectivity&lt;/strong&gt;. This does not offer a lot of features of ORM (Object-Relational Mapping) frameworks at the moment of writing. 
For now, it is not yet capable of mapping relations (eg: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToMany&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ManyToOne&lt;/code&gt;, …), lazy loading, etc. 
You would have to manage this yourself. However, with this connector, we can query data as streams.&lt;/p&gt;

&lt;h2 id=&quot;end-to-end-reactive-example&quot;&gt;End-to-end Reactive example&lt;/h2&gt;

&lt;p&gt;We’ve learned about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt;, reactive streams and R2DBC. Let’s use these in an example to really see how it works. 
We are going to create a 2 microservices with a R2DBC connecting to MySQL databases and a Rest API. 
Then we’ll create another microservice which consumes both of these Rest API’s. 
Finally, an Angular frontend that consumes that microservice to display the data.&lt;/p&gt;

&lt;h3 id=&quot;recipe-service-reactive-r2dbc&quot;&gt;Recipe Service (Reactive R2DBC)&lt;/h3&gt;

&lt;p&gt;Let’s dive into our Recipe Rest service and see how we can create a reactive rest service. 
We add the following dependencies.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-webflux&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-r2dbc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;dev.miku&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;r2dbc-mysql&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We configure the database connection and enable R2DBC. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConnectionFactory&lt;/code&gt; comes from the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.r2dbc.spi&lt;/code&gt;. 
Since we are connecting to a MySQL database, we enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; as the Driver. This will create the following connection url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2dbc:mysql://root:password@127.0.0.1/recipe&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.r2dbc.spi.ConnectionFactories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.r2dbc.spi.ConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.r2dbc.spi.ConnectionFactoryOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Other imports are omitted&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableR2dbcRepositories&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReactiveDatabaseConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractR2dbcConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConnectionFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConnectionFactories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConnectionFactoryOptions&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DRIVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SUPER_SAFE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For simplicity of the example, a Recipe contains only an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Constructors, Getters and Setters not displayed for simplicity */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We create a Repository which extends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactiveCrudRepository&lt;/code&gt; with a query that retrieves all recipes in a random order.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReactiveCrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM recipe ORDER BY RAND()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAllRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestController&lt;/code&gt; with a method that provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/event-stream&lt;/code&gt; of all the recipes. 
I have added a &lt;strong&gt;delay of 1 second&lt;/strong&gt; between each element to give you a better visualization later.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recipe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RecipeController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RecipeRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recipeRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllRecipesRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAllRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delayElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cURL -N&lt;/code&gt; our Recipe service, it displays a random recipe every second (because of the added delay).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;curl recipe service&quot; src=&quot;/img/2020-09-11-resttemplate-vs-webclient/curl-recipe-service.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ingredient-service-reactive-r2dbc&quot;&gt;Ingredient Service (Reactive R2DBC)&lt;/h3&gt;

&lt;p&gt;We create another microservice Ingredient Service, which is similar to our Recipe Service, but queries an ingredient database that provides us a stream of Ingredients in a random order.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ingredient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Constructors, Getters and Setters not displayed for simplicity */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the Ingredient controller works almost the same, but without a delay.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/ingredient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IngredientController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IngredientRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ingredientRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllIngredientsRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAllRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bestmenuevergenerator-service-reactive-rest&quot;&gt;BestMenuEverGenerator Service (Reactive Rest)&lt;/h3&gt;

&lt;p&gt;Our BestMenuEverGenerator service is going to put together our menu for a given amount of days. 
What makes our BestMenuEverGenerator the best, is because it adds a random special ingredient to every recipe.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ingredient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specialIngredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Constructors, Getters and Setters not displayed for simplicity */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestController&lt;/code&gt; that consumes both our services, Recipe and Ingredient. 
Even though it calls &lt;strong&gt;all&lt;/strong&gt; Recipes, it is &lt;strong&gt;not&lt;/strong&gt; going to retrieve and load all recipes in memory, as would be the case in a non-reactive environment. 
However, it limits the number of objects it receives, before completing the stream. 
The ´zipWith()´ method waits for one element of both streams and combines these elements in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BiFunction&lt;/code&gt; and returns its results in in new stream. 
It continues to zip until one of the streams completes. In this case, the results of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BiFunction&lt;/code&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Menu&lt;/code&gt; objects. 
There are plenty of other interesting methods to use for combining or transforming streams.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/menu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MenuReactiveController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientWebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MenuReactiveController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RecipeWebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientWebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recipeWebService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ingredientWebService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMenusForGivenDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amountOfDays&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllIngredientsRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWebService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllRecipesRandomized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;zipWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ingredients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;angular-webapp-consumer&quot;&gt;Angular Webapp Consumer&lt;/h3&gt;

&lt;p&gt;I built a simple Angular web application, which consumes our BestMenuEverGenerator service.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;recipe web application&quot; src=&quot;/img/2020-09-11-resttemplate-vs-webclient/recipe-webapp.png&quot; class=&quot;image fit&quot; style=&quot;max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;, I use an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt; to call our service. 
 Every time an event is received, it is parsed and pushed onto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getMenusForGivenAmountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuSubscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:8081/menu?amountOfDays=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;menuSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;menuSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We enter the amount of days we want to retrieve a menu for and when we push the button, the following method is triggered. 
 It subscribes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Observable&lt;/code&gt; we created in the previous example from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;. 
 We push each element in an array which is displayed on our webpage.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RecipesComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;menuArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RecipeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;generateMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amountOfDays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recipeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMenusForGivenAmountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amountOfDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menuArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The delay of 1 second we added in the Recipe service earlier offers us a good visualization of the data passing through the stream. 
 We immediately receive each Recipe with its special Ingredient and see it in the webpage when it arrives, even if the rest of the data has not even been processed in the controller.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;recipes streaming&quot; src=&quot;/img/2020-09-11-resttemplate-vs-webclient/recipes-streaming.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully, this gives you a basic understanding of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; and its capabilities. 
To summarize, we have learned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; is in maintenance mode and Spring advises us to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; instead. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebClient&lt;/code&gt; offers the same synchronous way of working as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; does, but using functional programming. 
Besides that, it also offers asynchronous reactive streams, which works in a non-blocking way.&lt;/p&gt;

&lt;p&gt;We have looked into R2DBC, which supports reactive connections with relational databases. 
Bear in mind that this does not offer a lot of features of ORM frameworks at the moment.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Lowie&quot;, &quot;last_name&quot;=&gt;&quot;Cuypers&quot;, &quot;permalink&quot;=&gt;&quot;/author/lowie_cuypers&quot;, &quot;avatar&quot;=&gt;&quot;lowie-cuypers.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;lowie.cuypers@ordina.be&quot;, &quot;github&quot;=&gt;&quot;cuypers&quot;, &quot;bio&quot;=&gt;&quot;Lowie is a Java back-end developer who also knows his way around Angular. He is a Spring Boot enthusiast and loves cloud-native development.&quot;}</name><email>lowie.cuypers@ordina.be</email></author><category term="Rest" /><category term="Spring" /><category term="RestTemplate" /><category term="WebClient" /><category term="Reactive" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-09-11-resttemplate-vs-webclient/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-09-11-resttemplate-vs-webclient/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ghelamco Alert</title><link href="https://ordina-jworks.github.io/cloud/2020/09/28/ghelamco-alert.html" rel="alternate" type="text/html" title="Ghelamco Alert" /><published>2020-09-28T00:00:00+00:00</published><updated>2020-09-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/09/28/ghelamco-alert</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/09/28/ghelamco-alert.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practicalities&quot; id=&quot;markdown-toc-practicalities&quot;&gt;Practicalities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution-design&quot; id=&quot;markdown-toc-solution-design&quot;&gt;Solution design&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#backend-rpi&quot; id=&quot;markdown-toc-backend-rpi&quot;&gt;Backend RPi&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#spring-boot-application&quot; id=&quot;markdown-toc-spring-boot-application&quot;&gt;Spring Boot application&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#connecting-our-rpi-to-the-cloud&quot; id=&quot;markdown-toc-connecting-our-rpi-to-the-cloud&quot;&gt;Connecting our RPi to the cloud&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-iot-greengrass&quot; id=&quot;markdown-toc-aws-iot-greengrass&quot;&gt;AWS IoT Greengrass&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cicd-pipeline-rpi-backend&quot; id=&quot;markdown-toc-cicd-pipeline-rpi-backend&quot;&gt;CICD pipeline RPi Backend&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#frontend-web-application&quot; id=&quot;markdown-toc-frontend-web-application&quot;&gt;Frontend web application&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#angular&quot; id=&quot;markdown-toc-angular&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-amplify&quot; id=&quot;markdown-toc-aws-amplify&quot;&gt;AWS Amplify&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-cognito&quot; id=&quot;markdown-toc-aws-cognito&quot;&gt;AWS Cognito&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#the-application-itself&quot; id=&quot;markdown-toc-the-application-itself&quot;&gt;The application itself&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hosting-the-application&quot; id=&quot;markdown-toc-hosting-the-application&quot;&gt;Hosting the application&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cicd-pipeline-frontend&quot; id=&quot;markdown-toc-cicd-pipeline-frontend&quot;&gt;CICD pipeline Frontend&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#serverless-framework&quot; id=&quot;markdown-toc-serverless-framework&quot;&gt;Serverless framework&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#why-the-serverless-framework&quot; id=&quot;markdown-toc-why-the-serverless-framework&quot;&gt;Why the serverless framework?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#serverlessyml&quot; id=&quot;markdown-toc-serverlessyml&quot;&gt;Serverless.yml&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cicd-pipeline-serverless&quot; id=&quot;markdown-toc-cicd-pipeline-serverless&quot;&gt;CICD pipeline Serverless&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#application-flow&quot; id=&quot;markdown-toc-application-flow&quot;&gt;Application flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;At Ordina, we have a beautiful office in the Ghelamco arena in Gent.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco office&quot; src=&quot;/img/2020-09-25-ghelamco-alert/ghelamco_arena_office.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The drawback of having an office in this stadium is that whenever KAA Gent plays a game in the stadium we have to make sure our parking lot is empty 3 hours before the start of the game.&lt;br /&gt;
If the parking lot isn’t cleared in time we risk fines up to €500,00 per car.&lt;br /&gt;
Of course we don’t want to spend our money on fines when instead we could be buying more pizzas.&lt;br /&gt;
So we came up with a solution called &lt;strong&gt;Ghelamco Alert&lt;/strong&gt;.&lt;br /&gt;
The idea for the project is pretty straightforward.&lt;br /&gt;
We will run &lt;a href=&quot;https://www.raspberrypi.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a Raspberry Pi&lt;/a&gt; device that is hooked up to an alert light.&lt;br /&gt;
The Raspberry Pi will run an application that parses the game fixtures on the website of KAA Gent to search for any home fixtures.&lt;br /&gt;
Whenever a home fixture occurs, the RPi will start turning on the alert light on a preset schedule.&lt;br /&gt;
This way the employees in the office will have a visual warning on game day and they will be reminded to leave the parking lot on time.&lt;br /&gt;
Since we wanted to build a user-friendly solution we added a serverless backend in the AWS cloud combined with an Angular application so that our users can also look at the web application to get some additional feedback and even manipulate the alerting schedule.&lt;br /&gt;
This enables users to do some additional operations through the web application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Snooze alerts&lt;/li&gt;
  &lt;li&gt;Create additional alerts&lt;/li&gt;
  &lt;li&gt;Create custom events&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;practicalities&quot;&gt;Practicalities&lt;/h1&gt;
&lt;p&gt;I received my assignment from my internship supervisor Frederick Bousson.&lt;br /&gt;
Bas Moorkens was my mentor for the internship.&lt;br /&gt;
He designed the high-level architecture of the solution and then helped translate it into smaller blocks of work for me.&lt;br /&gt;
We decided to set up the project using these three big components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An IoT module on the RPi.&lt;/li&gt;
  &lt;li&gt;A serverless backend that runs in the AWS cloud using Node.js.&lt;/li&gt;
  &lt;li&gt;A frontend application built with the Angular framework.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The architecture was tweaked several times to account for lessons learned during the internship.&lt;br /&gt;
We ended up using over 10 AWS services which over the course of the internship, made me develop a real interest in everything that is AWS and cloud related.&lt;br /&gt;
Once you get the hang of serverless, the speed of setting up infrastructure is absolutely mind-blowing!&lt;/p&gt;

&lt;h1 id=&quot;solution-design&quot;&gt;Solution design&lt;/h1&gt;
&lt;p&gt;Below you can see the high-level design of our solution.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco Alert architecture&quot; src=&quot;/img/2020-09-25-ghelamco-alert/ghela-alert-architecture.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;As you can see the architecture has lots of moving parts.
We will zoom in on these in the next sections.&lt;/p&gt;

&lt;h2 id=&quot;backend-rpi&quot;&gt;Backend RPi&lt;/h2&gt;
&lt;p&gt;The core part of our solution consists of the Raspberry Pi device with our backend Spring Boot application that runs on it.&lt;br /&gt;
This application controls the actual alert light and does most of the heavy lifting in the overall scheme.&lt;br /&gt;
The RPi works with a microSD card on which you can easily install any Linux distribution.&lt;br /&gt;
You install the distribution of your choosing on SD card and then plug the card into your RPi device and you’re good to go.&lt;br /&gt;
We used a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-4-model-b/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;model 4 Raspberry Pi&lt;/a&gt; and installed the default Raspbian Linux distribution on it.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-application&quot;&gt;Spring Boot application&lt;/h3&gt;
&lt;p&gt;The actual business logic of our solution runs as a Spring Boot project on our RPi device.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;basics-of-the-application&quot;&gt;Basics of the application&lt;/h4&gt;

&lt;p&gt;The core of our application revolves around &lt;strong&gt;events&lt;/strong&gt; which happen at the Ghelamco Arena.&lt;br /&gt;
These can be of type &lt;strong&gt;&lt;em&gt;GameEvent&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;CustomEvent&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The GameEvents are all the KAA Gent home games.&lt;/li&gt;
  &lt;li&gt;As an added feature, I also added the possibility to create custom events, which are handy for scheduling concerts or alarming a pizza party.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each event we generate a couple of standard &lt;strong&gt;alerts&lt;/strong&gt; based on the &lt;strong&gt;event time&lt;/strong&gt;.&lt;br /&gt;
These alerts are responsible to set off the alarm light in the office.&lt;br /&gt;
This means that we will use the &lt;a href=&quot;https://www.raspberrypi.org/documentation/usage/gpio/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GPIO&lt;/a&gt; interface of our RPi to turn on the alarm light every time an alert gets triggered in our backend application.&lt;br /&gt;
To set off an alert, the GPIO interface changes the voltage on a GPIO-pin to 0V or 3.3V.&lt;br /&gt;
This pin gets coupled to a relay, which acts as a regular switch, but electrically controlled.&lt;br /&gt;
If we put 0V on the relay, the circuit remains open, when we put 3.3V on it, the circuit gets closed and thus starting our alarm light.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;webscraper&quot;&gt;WebScraper&lt;/h4&gt;

&lt;p&gt;Our Spring backend is running a scheduler that is configured to run a service every hour that checks the website of KAA Gent for the up-to-date fixtures of the games.&lt;br /&gt;
The approach I took for scraping the website is by using X-Path with a library called &lt;a href=&quot;https://htmlunit.sourceforge.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HtmlUnit&lt;/a&gt;.&lt;br /&gt;
In our application we fetch every game from the website, filter them on home games, attach alerts and save those games to our H2-database using Spring Data.&lt;/p&gt;

&lt;p&gt;Every time we scan the website, we compare the scraped games’ data with the games that already were saved in our database.&lt;br /&gt;
Games can get updated or rescheduled on the website, but our application will recognize it and update the database records accordingly.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/scrape-games.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;h2-database&quot;&gt;H2 database&lt;/h4&gt;

&lt;p&gt;One of the requirements for the project was that the RPi should be able to function on his own without constant internet connection.&lt;br /&gt;
This meant that we needed to use a database that can run locally on the RPi.&lt;br /&gt;
If we would use a remote database we wouldn’t be able to send any data to the RPi when it is not connected to a network.&lt;br /&gt;
We chose to use a H2-database because it is a SQL database which is easy to set up for local use.&lt;br /&gt;
Then we configured the H2-database to be backed by a flatfile on our local filesystem.
This way the database is persistent even when the application restarts.&lt;br /&gt;
As the last step we just need to add the H2 dependency to our projects pom.xml .&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add some configuration in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### H2 Storage
spring.datasource.url=jdbc:h2:file:c:\\h2-ghela\\h2db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=kevin
spring.datasource.password=admin
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This just works out of the box, it even comes with a console to check your database if enabled.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/h2-console.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;metrics&quot;&gt;Metrics&lt;/h4&gt;

&lt;p&gt;Our application generates metrics to provide us with some data about our backend.&lt;br /&gt;
We collect data and push it into &lt;a href=&quot;https://aws.amazon.com/cloudwatch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CloudWatch&lt;/a&gt; as metrics for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Number of events added&lt;/li&gt;
  &lt;li&gt;Number of events updated&lt;/li&gt;
  &lt;li&gt;Number of events cancelled&lt;/li&gt;
  &lt;li&gt;Number of alerts snoozed&lt;/li&gt;
  &lt;li&gt;Number of alerts started&lt;/li&gt;
  &lt;li&gt;Number of alerts stopped&lt;/li&gt;
  &lt;li&gt;A basic heartbeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When our application is running, we are constantly gathering this data which we push to Cloudwatch metrics every 5 minutes.
Afterwards we reset our data counters and start collecting again.&lt;br /&gt;
This allows us to create a dashboard which has data-points every 5 minutes for all the metrics we defined.&lt;/p&gt;

&lt;h3 id=&quot;connecting-our-rpi-to-the-cloud&quot;&gt;Connecting our RPi to the cloud&lt;/h3&gt;
&lt;p&gt;We have two ways of connecting back to the AWS cloud.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use AWS credentials and the AWS APIs.&lt;/li&gt;
  &lt;li&gt;Use AWS IoT MQTT protocol and the according certificates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-cloudwatch-integration&quot;&gt;AWS Cloudwatch integration&lt;/h4&gt;

&lt;p&gt;The CloudWatch integration is done entirely by having a set of credentials with limited permissions on our RPi device.&lt;br /&gt;
We use these credentials inside our application to access the AWS SDK from our Java code.&lt;br /&gt;
We integrate with CloudWatch in two different ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We push custom metrics from our application to CloudWatch metrics.&lt;/li&gt;
  &lt;li&gt;We send the logs from our application to CloudWatch logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;cloudwatch-metrics&quot;&gt;CloudWatch metrics&lt;/h5&gt;

&lt;p&gt;The metrics that we generate in our application should of course get sent to AWS CloudWatch, so we can actually make use of them in the AWS cloud.&lt;br /&gt;
We use the metric data to build dashboards and alerts within CloudWatch for added visibility into our application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert Metrics&quot; src=&quot;/img/2020-09-25-ghelamco-alert/all-metric-data-graph.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We have created an alarm that triggers when our &lt;strong&gt;RPI_BACKEND_STATUS&lt;/strong&gt; status metric is missing for three data points in a row.&lt;br /&gt;
This means that after 15 minutes of not receiving this metric, the CloudWatch alarm will trigger and notifies us via email that the RPi is either down or disconnected from the internet.&lt;br /&gt;
This enables us to respond quickly and take action to restore connectivity to the device.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/ghelamco-rpi-backend-down-alert.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;cloudwatch-logs&quot;&gt;CloudWatch logs&lt;/h5&gt;

&lt;p&gt;The logs from our Spring Boot application get sent to CloudWatch logs. 
This allows us to check the log files in the AWS cloud without needing access to the RPi device itself.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/cloudwatch-logs.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-iot&quot;&gt;AWS IoT&lt;/h4&gt;

&lt;p&gt;The reason for using &lt;a href=&quot;https://aws.amazon.com/iot&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS IoT&lt;/a&gt; is for the sake of “being connected to the cloud”.&lt;br /&gt;
When we are connected to the cloud, we are able to communicate with our device “through the cloud”, meaning from anywhere we want! &lt;br /&gt;
In our case this means that we want our RPi device to be connected to AWS IoT whenever it is up and running and has internet connectivity.&lt;br /&gt;
Of course the communication between our RPi and the AWS cloud has to be secured.
AWS IoT uses authentication and authorization workflow by using certificates that you issue from AWS IoT and upload to your edge device.&lt;br /&gt;
We treat our RPi as an edge device in this project.&lt;/p&gt;

&lt;p&gt;Authentication works based on the certificates that the edge device presents to AWS IoT.&lt;br /&gt;
Once the certificate authentication is successful, AWS IoT checks which policies got attached to those certificates to grant it specific authorizations within the AWS cloud.&lt;/p&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;authentication-certificates&quot;&gt;Authentication: certificates&lt;/h5&gt;

&lt;p&gt;When you add a new edge device in AWS IoT it is called “a thing”.&lt;br /&gt;
When registering “a thing” it generates two keys for us: a public key and a private key.&lt;br /&gt;
AWS IoT will provide a certificate signing request for the public key, which will sign the generated certificate with the root certificate’s private key.&lt;/p&gt;

&lt;p&gt;Our thing-certificate and our private key are our credentials when we try to communicate with AWS IoT to access our edge device.&lt;br /&gt;
The only additional input that we need to provide on top of the generated signing request is the root certificate to check the signing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Certificates&lt;/li&gt;
  &lt;li&gt;Private Key&lt;/li&gt;
  &lt;li&gt;Root CA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since these certificates get generated per thing that you register they should only be used for one device.&lt;br /&gt;
When I developed the application I had to register another thing for my laptop.&lt;br /&gt;
Connecting from the RPi and the laptop with the same certificates caused some unwanted behavior like connection interrupts.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/cert-aws-iot.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;authorization-policies&quot;&gt;Authorization: policies&lt;/h5&gt;

&lt;p&gt;After creating our certificates and keys we need to handle the authorization part.&lt;br /&gt;
We do this by adding some policies to our certificates.&lt;br /&gt;
When presenting our certificates on connecting, AWS IoT now also knows what services we can access within the AWS cloud.&lt;/p&gt;

&lt;p&gt;An example of such a policy:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;iot:Publish&quot;,
        &quot;iot:Subscribe&quot;,
        &quot;iot:Connect&quot;,
        &quot;iot:Receive&quot;
      ],
      &quot;Resource&quot;: [
        &quot;*&quot;
      ]
    },
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;iot:GetThingShadow&quot;,
        &quot;iot:UpdateThingShadow&quot;,
        &quot;iot:DeleteThingShadow&quot;
      ],
      &quot;Resource&quot;: [
        &quot;*&quot;
      ]
    },
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;greengrass:*&quot;
      ],
      &quot;Resource&quot;: [
        &quot;*&quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We define which services we want to access:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:Publish&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:Subscribe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:GetThingShadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:UpdateThingShadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:DeleteThingShadow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This system of generating certificates and coupling policies is a very secure and easy way of working with edge devices.&lt;/p&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;iot-job&quot;&gt;IoT job&lt;/h5&gt;

&lt;p&gt;A crucial part of AWS IoT is the job section. 
We can create a job by using the AWS CLI.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws iot update-job  
  --job-id 010  
  --description &quot;updated description&quot; 
  --timeout-config inProgressTimeoutInMinutes=100
  --job-executions-rollout-config {exponentialRate:{baseRatePerMinute: 50, incrementFactor: 2, rateIncreaseCriteria: &amp;lt;{numberOfNotifiedThings: 1000, numberOfSucceededThings: 1000}, maximumPerMinute: 1000}}
  --abort-config { criteriaList: [ { action: CANCEL, failureType: FAILED, minNumberOfExecutedThings: 100, thresholdPercentage: 20}, { action: CANCEL, failureType: TIMED_OUT, minNumberOfExecutedThings: 200, thresholdPercentage: 50}]}          
  --presigned-url-config {roleArn:arn:aws:iam::123456789012:role/S3DownloadRole, expiresInSec:3600}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We use AWS IoT to create these jobs and send them to our RPi where they get executed by our application code.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert device update&quot; src=&quot;/img/2020-09-25-ghelamco-alert/device-update-iot.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We have the possibility to put multiple “things” in a group of devices.&lt;br /&gt;
This way we can send jobs to the entire group and these jobs get executed on every device from that group.&lt;br /&gt;
These jobs could be software updates, reboot commands, rotation of certificates, … &lt;br /&gt;
Anything we want really!&lt;/p&gt;

&lt;p&gt;In our project we used IoT jobs for a multitude of processes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Update our backend application - over the air&lt;/li&gt;
  &lt;li&gt;Create new events&lt;/li&gt;
  &lt;li&gt;Snooze and update existing alerts&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/aws-iot-jobs.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It is pretty straightforward to create an IoT job:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a job&lt;/li&gt;
  &lt;li&gt;Add a job document (JSON file) which defines the content of the job&lt;/li&gt;
  &lt;li&gt;Push the job onto the job queue to send it to your devices&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example job document:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;operation&quot;: &quot;snoozeAlert&quot;,
    &quot;local_alert_id&quot;: 31,
    &quot;event_title&quot;: &quot;test from lambda snooze alert&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;mqtt-protocol&quot;&gt;MQTT protocol&lt;/h5&gt;

&lt;p&gt;AWS IoT can communicate with its registered devices through two protocols: HTTP or MQTT.&lt;br /&gt;
So why would we choose MQTT over the more familiar HTTP protocol?&lt;br /&gt;
The HTTP protocol has some severe limitations for our use case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP is a synchronous protocol, the client waits for the server to respond.&lt;br /&gt;
That is a requirement for web browsers, but it comes at the cost of poor scalability.&lt;br /&gt;
In the world of IoT where we have numerous devices and most likely an unreliable / high-latency network connection this synchronous communication is problematic.&lt;br /&gt;
An asynchronous messaging protocol is much more suitable for IoT applications.&lt;br /&gt;
The sensors can send in readings and let the network figure out the optimal path and timing for delivery to its destination devices and services.&lt;/li&gt;
  &lt;li&gt;HTTP is a one-way protocol. The client must initiate the connection.&lt;br /&gt;
In an IoT application, the devices or sensors are typically clients, which means that they cannot passively receive commands from the network.&lt;/li&gt;
  &lt;li&gt;HTTP is a 1-1 protocol. The client makes a request and the server responds.&lt;br /&gt;
It is difficult and expensive to broadcast a message to all devices on the network, which is a common use case in IoT applications.&lt;/li&gt;
  &lt;li&gt;HTTP is a heavyweight protocol with many headers and rules. It is not suitable for constrained networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MQTT on the other hand defines two types of entities in the network: a message broker (AWS IoT) and a number of edge devices (clients).&lt;br /&gt;
The broker is a server that receives all messages from the clients and then routes those messages to relevant destination clients.&lt;br /&gt;
A client is anything that can interact with the broker to send and receive messages.&lt;br /&gt;
Our client is the RPi but it could also be an IoT sensor in the field or an application in a data center that processes IoT data.&lt;/p&gt;

&lt;p&gt;In our backend Java code we have an MQTTJobService which connects to AWS IoT by using the &lt;a href=&quot;https://aws.amazon.com/sdk-for-java/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS SDK&lt;/a&gt; and subscribes to the relevant topics to receive and respond to AWS IoT jobs.&lt;br /&gt;
Every 30 seconds we will read these topics to see if there are any new jobs to be processed.&lt;/p&gt;

&lt;h3 id=&quot;aws-iot-greengrass&quot;&gt;AWS IoT Greengrass&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/greengrass&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Greengrass&lt;/a&gt; is a service that extends the AWS cloud onto your edge device.&lt;br /&gt;
This was fascinating for us since we had some tough problems to solve:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How can we deploy our application on the RPi device?&lt;/li&gt;
  &lt;li&gt;How can we make sure our application recovers from failures?&lt;/li&gt;
  &lt;li&gt;How can we make sure that our system keeps itself up to date?&lt;/li&gt;
  &lt;li&gt;How do we find the network address from our device when we are not in the same network?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS Greengrass offers solutions to all these challenges!&lt;br /&gt;
Greengrass is an extension of the AWS IoT service and since we had already set up our device in AWS IoT it was easy for us to set up Greengrass.&lt;br /&gt;
To get started with Greengrass we had to do 2 additional steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Define a Greengrass group. This group will contain your IoT devices and deployments.&lt;/li&gt;
  &lt;li&gt;Define a Greengrass core. The core is the device that you will use to run the additional AWS capabilities on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Greengrass group allows us to push deployments to all the devices in our group.&lt;br /&gt;
It also allows you to run lambda functions on your core device or install additional connectors with your own runtime of choice.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Greengrass group&quot; src=&quot;/img/2020-09-25-ghelamco-alert/gg_group.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When you register your device as a core device in Greengrass you immediately get some nice additional benefits from this.&lt;br /&gt;
For example, you can immediately see all the network interfaces on your core device and what IP addresses got allocated.&lt;br /&gt;
This is especially useful if you want to ssh to your device and do not have a fixed IP attached to it.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Greengrass core&quot; src=&quot;/img/2020-09-25-ghelamco-alert/gg_core.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now we that Greengrass is installed and our RPi is configured as a core device our Greengrass group we can start making full use of the capabilities that Greengrass offers.&lt;br /&gt;
We decided that we wanted our application to run as a Docker container, so we installed and configured the &lt;a href=&quot;https://docs.aws.amazon.com/greengrass/latest/developerguide/docker-app-connector.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docker connector&lt;/a&gt; for Greengrass. &lt;br /&gt;
This plugin allows you to run Docker containers on your core device and makes use of &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Docker Compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Greengrass Docker connector&quot; src=&quot;/img/2020-09-25-ghelamco-alert/gg_connector_docker_cfg.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;For this to work you have to install Docker and Docker Compose on your core device.&lt;br /&gt;
Since we are using a RPi it was a bit harder to install since the RPi uses the ARM7 chipset instead of x64/x32.&lt;br /&gt;
We had no trouble installing Docker itself, but for Docker Compose we had to clone the source code from GitHub and compile the binaries ourself on the RPi.&lt;br /&gt;
After all the setup was done we could just create a Docker container in our CICD pipeline and tell Greengrass to run that container on RPi.&lt;/p&gt;

&lt;h3 id=&quot;cicd-pipeline-rpi-backend&quot;&gt;CICD pipeline RPi Backend&lt;/h3&gt;

&lt;p&gt;To make sure we did not need to bother ourselves with manual builds and installs of our code on the RPi we built a CICD pipeline to automatically deploy our software onto the RPi.&lt;br /&gt;
We trigger the pipeline whenever a push to our master branch hapens in our Git repository.&lt;br /&gt;
We used &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Azure DevOps&lt;/a&gt; as our CICD system.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert Azure pipeline backend&quot; src=&quot;/img/2020-09-25-ghelamco-alert/azure-backpipe.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The pipeline has a lot of pipeline steps defined and integrates with several AWS services as well.&lt;br /&gt;
We drew up a chart to provide additional insight into how this pipeline works:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert Azure pipeline backend&quot; src=&quot;/img/2020-09-25-ghelamco-alert/ghela-alert-cicd-rpi.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see there are two major parts of this pipeline:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the Azure DevOps pipeline&lt;/li&gt;
  &lt;li&gt;the Greengrass deployment process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;azure-devops-pipeline&quot;&gt;Azure devops pipeline&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Build and test our Java code.&lt;br /&gt;
We use Maven to build and test our code.&lt;/li&gt;
  &lt;li&gt;We use &lt;a href=&quot;https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS SSM - Parameter Store&lt;/a&gt; to safely store our config files and certificates for the RPi.&lt;br /&gt;
In step 2 and 3 we fetch those config files and secrets from the parameter store and store them locally for use later in the pipeline.&lt;/li&gt;
  &lt;li&gt;In order to control the alert light hooked up to our RPi we need to download the &lt;a href=&quot;http://wiringpi.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WiringPi library&lt;/a&gt; as we used that to communicate with our alert light. 
We stored this library in our release S3 bucket.&lt;/li&gt;
  &lt;li&gt;We have to register an ARM hardware emulator as our Docker image has to be run in the pipeline to install additional software.&lt;br /&gt;
Without the emulator our pipeline would just crash as Azure DevOps would have no way to run the ARM7 Docker image.&lt;/li&gt;
  &lt;li&gt;We build our Docker image.&lt;br /&gt;
We install all the config, certificates and dependencies into our container in this step.&lt;/li&gt;
  &lt;li&gt;We push the container into &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS ECR - Elastic Container Registry&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;We fill in the container name and version from the previous step in our template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file and upload it to our S3 releases bucket.&lt;/li&gt;
  &lt;li&gt;We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greengrass create-deployment&lt;/code&gt; CLI command to deploy our Docker container to our RPi device.&lt;br /&gt;
This deployment fetches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file from our S3 release bucket and then launches the container that we defined in that compose file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some additional explanation on the Docker image and running containers on ARM7 processor architectures.&lt;/p&gt;

&lt;p&gt;Our application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM balenalib/am571x-evm-openjdk:11-jre-bullseye-20200901
ADD ./wiringpi-2.52.deb /tmp/wiringpi-2.52.deb
RUN apt-get update &amp;amp;&amp;amp; \ 
    cd /tmp &amp;amp;&amp;amp; \ 
    dpkg -i wiringpi-2.52.deb
COPY ./target/ghela-business-0.0.1-SNAPSHOT.jar /app.jar
ADD ./config /config
ADD ./certificates /certificates
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Because we are running this container on our RPi we need to make sure it can run on the ARM7 processor.&lt;br /&gt;
This is why we started from an ARM7 image that already has JRE11 installed on it.&lt;br /&gt;
As you can see we need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt;**` and some other commands in our container to get it fully functioning.&lt;br /&gt;
This means that our container will be actually executed during the build phase.&lt;br /&gt;
This is the reason why we need to register the ARM7 emulator in our pipeline.&lt;br /&gt;
Otherwise, Azure DevOps would have no way of running our Docker image since it cannot interpret the ARM7 processor instruction set natively.&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file we describe how the container should behave when it’s running:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${ecr.imageTag}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;privileged&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/pi/.aws/:/root/.aws:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/ghela/db:/ghela/db&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Several things are happening in this file:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We dynamically inject the image name and version in our CICD pipeline into the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${ecr.imageTag}&lt;/code&gt; field.&lt;/li&gt;
  &lt;li&gt;We run our container in privileged mode as this is needed to access the RPis native interface to control our alert light through GPIO with wiringPi.&lt;/li&gt;
  &lt;li&gt;We expose our application port 8080 to the outside world.&lt;/li&gt;
  &lt;li&gt;We mount our AWS credentials and H2 database as volumes from the RPi host system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;greengrass-deployment-process&quot;&gt;Greengrass deployment process&lt;/h4&gt;

&lt;p&gt;For the Greengrass deployment process we did not have to create any code.&lt;br /&gt;
This works out of the box when you set up Greengrass.&lt;br /&gt;
However, for full transparency I will briefly describe the process here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AWS Greengrass receives a new deployment (this is the last step of our Azure DevOps pipeline).&lt;/li&gt;
  &lt;li&gt;Greengrass sends the new deployment to the Greengrass agent on our device.&lt;/li&gt;
  &lt;li&gt;Download the Docker Compose file from S3 which is associated with our deployment.&lt;/li&gt;
  &lt;li&gt;Download the Docker image and version from ECR that is defined in the Docker Compose file.&lt;/li&gt;
  &lt;li&gt;Terminate the current running container.&lt;/li&gt;
  &lt;li&gt;Start the new container.&lt;/li&gt;
  &lt;li&gt;Set up the mounted volumes defined in our Docker Compose file.&lt;/li&gt;
  &lt;li&gt;Start the Spring Boot application in the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these steps get done automatically for us by the Greengrass agent running on our RPi device.&lt;br /&gt;
As you can see this CICD pipeline makes it incredibly easy for us to deploy new software to our RPi device.&lt;/p&gt;

&lt;h2 id=&quot;frontend-web-application&quot;&gt;Frontend web application&lt;/h2&gt;

&lt;p&gt;To get data from our RPi into our web application we needed a way to connect to our H2 database on the RPi.&lt;br /&gt;
It would be pretty complex to set up our RPi device to be accessible from the internet, so we chose to build a backend in AWS to function as a proxy for our RPi backend application.&lt;br /&gt;
This allows us to use this proxy backend in AWS to access the data from our RPi device and send new commands to update existing data on the RPi.&lt;br /&gt;
More about this backend in the serverless part.&lt;br /&gt;
First let’s take a look into our frontend application.&lt;/p&gt;

&lt;h3 id=&quot;angular&quot;&gt;Angular&lt;/h3&gt;
&lt;p&gt;I wanted to create a simple web application to get more insight in the data of our RPi device.&lt;br /&gt;
Any modern frontend framework would be suitable for this but I decided to go with Angular since I had already had some basic experience with it.&lt;br /&gt;
We did however use some extra frameworks and AWS services to make it easier to build our frontend application.&lt;/p&gt;

&lt;h3 id=&quot;aws-amplify&quot;&gt;AWS Amplify&lt;/h3&gt;

&lt;p&gt;To help us bootstrap our web application, we decided to use the &lt;a href=&quot;https://aws.amazon.com/amplify/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Amplify framework&lt;/a&gt;.&lt;br /&gt;
The open-source Amplify Framework provides:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Amplify CLI - Configure AWS services needed to power your backend through a simple command line interface.&lt;/li&gt;
  &lt;li&gt;Amplify Libraries - Use case-centric client libraries to integrate your app code with a backend using declarative interfaces.&lt;/li&gt;
  &lt;li&gt;Amplify UI Components - UI libraries for React, React Native, Angular, Ionic and Vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our project we only used the libraries and UI components from Amplify for our web application.&lt;br /&gt;
When we use the Amplify CLI to bootstrap our project it generated a new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./src&lt;/code&gt; folder of our project called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-exports.js&lt;/code&gt;.&lt;br /&gt;
This file contains configuration of various backend AWS services that we will be using:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cognito user pool id&lt;/li&gt;
  &lt;li&gt;Cognito identity pool url&lt;/li&gt;
  &lt;li&gt;Region&lt;/li&gt;
  &lt;li&gt;API gateway url&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The backend itself is build and deployed with the &lt;strong&gt;serverless framework&lt;/strong&gt;.&lt;br /&gt;
More about this in the section regarding serverless.&lt;/p&gt;

&lt;h3 id=&quot;aws-cognito&quot;&gt;AWS Cognito&lt;/h3&gt;

&lt;p&gt;We used &lt;a href=&quot;https://aws.amazon.com/cognito/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Cognito&lt;/a&gt; as authentication and authorization provider.&lt;br /&gt;
This means that new users can sign up to our Cogito user pool and login to our web application by authenticating themselves via that user pool.&lt;/p&gt;

&lt;p&gt;There are several excellent reasons to use Cogito instead of building a home-grown identity solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Secure and scalable user directory.&lt;br /&gt;
It scales dynamically as you would expect from AWS.&lt;/li&gt;
  &lt;li&gt;Fine grained access control through the use of Cogito user pools and identity pools. &lt;br /&gt;
You can define users and groups in a Cogito user pool which you then can map to AWS IAM roles.&lt;br /&gt;
This is a straightforward and very secure way to allow users of the web application a federated access into your AWS account.&lt;/li&gt;
  &lt;li&gt;Easy integration into our frontend application through components that are provided in the Amplify UI library.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert login-screen frontend&quot; src=&quot;/img/2020-09-25-ghelamco-alert/login-frontend.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;cognito-user-pool&quot;&gt;Cognito User pool&lt;/h5&gt;
&lt;p&gt;User Pools are user directories used to manage sign-up and sign-in functionality for mobile and web applications.&lt;br /&gt;
Users can register directly in our &lt;strong&gt;user pool&lt;/strong&gt; or they can register themselves through web identity federation via a well-known 3rd party like: Facebook, Amazon, Google.&lt;br /&gt;
Whenever a user logs in to our user pool they receive a &lt;strong&gt;JWT token&lt;/strong&gt; that contains information about their identity and authorizations.&lt;br /&gt;
We call this information JWT claims.&lt;/p&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;cognito-identity-pool&quot;&gt;Cognito identity pool&lt;/h5&gt;

&lt;p&gt;To be able to use the claims in this JWT token we created an AWS &lt;strong&gt;identity pool&lt;/strong&gt; as well.&lt;br /&gt;
The identity pool allows users to exchange their valid JWT token for temporary AWS credentials.&lt;br /&gt;
These temporary credentials then get used by our application, to call AWS services in our account. 
For example: call API gateway, update a dynamodb table , fetch a CloudWatch metric.&lt;br /&gt;
This process is called federated access and is very powerful to expose services from within your AWS account to your end users.&lt;/p&gt;

&lt;h3 id=&quot;the-application-itself&quot;&gt;The application itself&lt;/h3&gt;
&lt;p&gt;Now I covered all the technologies that I used for the web application, I will walk you through the application itself.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;dashboard-view&quot;&gt;Dashboard view&lt;/h4&gt;

&lt;p&gt;On the dashboard view we can see which events are coming up next.&lt;br /&gt;
When we click on an event we also get to see all the alerts which are set for that event.&lt;br /&gt;
We can update or snooze alerts from this screen, BUT…
This works a bit different from how you would expect it to work.&lt;br /&gt;
In a normal setting you would expect us to update the records in our DynamoDB table, right?&lt;br /&gt;
Since we want our H2 database on the RPi device to be the single source of truth this is not the case here.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert Dashboard frontend&quot; src=&quot;/img/2020-09-25-ghelamco-alert/dashboard-frontend.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When you update or snooze an alert we actually create an AWS IoT job for our RPi to process.&lt;br /&gt;
The backend application on the RPi knows how to handle these events and updates his H2 database accordingly.&lt;br /&gt;
Together with our sync component we built on the RPi backend, those changes get updated directly to our DynamoDB table.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;create-custom-event&quot;&gt;Create Custom event&lt;/h4&gt;

&lt;p&gt;On this tab we can create our own custom events.&lt;br /&gt;
This works in the same way as snoozing or updating on alert on the dashboard view.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert create event screen&quot; src=&quot;/img/2020-09-25-ghelamco-alert/frontend-create.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;job-overview&quot;&gt;Job overview&lt;/h4&gt;

&lt;p&gt;In the job overview view we query our API gateway to fetch us all the pending jobs from our DynamoDB job table.&lt;br /&gt;
The lambda function that listens to this endpoint reads the ghela-jobs DynamoDB table and list all jobs that have a status of not yet “COMPLETED”.&lt;br /&gt;
The moment this list is empty all changes from our webapp have been processed successfully by our RPi backend application and will have updated the ghela-events and ghela-jobs DynamoDB tables.&lt;/p&gt;

&lt;p&gt;Important note: our RPi can only receive new jobs from AWS IoT if it is connected to the internet.&lt;br /&gt;
So if we do not have a working network connection, jobs will stay queued within AWS IoT and not get pushed to the RPi backend application.&lt;br /&gt;
For the same reason it is important to know that our RPi device is connected and functioning well, to make sure our commands from our web application get processed by our RPi backend application.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert jobs screen&quot; src=&quot;/img/2020-09-25-ghelamco-alert/frontend-jobs.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;metrics-1&quot;&gt;Metrics&lt;/h4&gt;

&lt;p&gt;On this tab we can see the status of the RPi backend as a graph.&lt;br /&gt;
Remember the metrics we talked about before?&lt;br /&gt;
Via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/metrics&lt;/code&gt; API endpoint we invoke a lambda function that fetches this dynamic graph and sends it back to our frontend as a Base64 encoded stream of byte data.&lt;br /&gt;
We can then render this data as an image in our frontend web application.&lt;br /&gt;
By adding this graph in our web application users of the application can see that the RPi backend device is up and running and functioning well without ever having to access our AWS account itself, pretty cool huh?&lt;/p&gt;

&lt;h3 id=&quot;hosting-the-application&quot;&gt;Hosting the application&lt;/h3&gt;

&lt;p&gt;In order to make our web application accessible to the public we needed some kind of hosting service.&lt;br /&gt;
In our case we used &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS S3&lt;/a&gt; to host our website.&lt;br /&gt;
Our S3 bucket is prefaced by a &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CloudFront&lt;/a&gt; that acts as our global, scalable CDN.&lt;br /&gt;
CloudFront delivers our content through a worldwide network of data centers called edge locations.&lt;br /&gt;
When a user requests content that we’re serving with CloudFront, the user gets routed to the edge location that provides the lowest latency.&lt;br /&gt;
We used &lt;a href=&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/Welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS Route 53&lt;/a&gt; as our DNS service so that we can access our application on the url  &lt;a href=&quot;https://ghelamco-alert.ordina-jworks.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ghelamco-alert.ordina-jworks.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cicd-pipeline-frontend&quot;&gt;CICD pipeline Frontend&lt;/h3&gt;

&lt;p&gt;Since CICD pipelines were completely new to me when starting this project, Bas created the pipeline for our RPi backend.&lt;br /&gt;
For the frontend CICD pipeline he wanted me to create it.&lt;br /&gt;
Even though he still helped me, he let me think about how this pipeline would run, what steps we needed and had me create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure-pipelines.yml&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert frontend pipeline&quot; src=&quot;/img/2020-09-25-ghelamco-alert/azure-frontpipe.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The pipeline is less complex than the pipeline to build and deploy our backend on our RPi device.&lt;br /&gt;
We created a diagram of all the steps and interactions with AWS services for this pipeline as well.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert frontend pipeline&quot; src=&quot;/img/2020-09-25-ghelamco-alert/ghela-alert-cicd-frontend.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Install Node.js.&lt;/li&gt;
  &lt;li&gt;Download the needed configuration files from AWS SSM parameter store and save it locally.&lt;br /&gt;
In this case we download an entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-exports.js&lt;/code&gt; file from SSM and inject this in the final build of our application.&lt;br /&gt;
This file contains all the endpoints for wiring our frontend application to our production backend.&lt;/li&gt;
  &lt;li&gt;Install npm dependencies.&lt;/li&gt;
  &lt;li&gt;Build our Angular application. We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm build&lt;/code&gt; command to do this.&lt;/li&gt;
  &lt;li&gt;Override the configuration file in the application we just built with the configuration file we downloaded from SSM.&lt;/li&gt;
  &lt;li&gt;Empty the S3 bucket we are using for hosting.&lt;/li&gt;
  &lt;li&gt;Upload the newly compiled web application to this S3 bucket.&lt;/li&gt;
  &lt;li&gt;Invalidate the &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS CloudFront&lt;/a&gt; cache to make sure our application gets updated on each AWS edge location. 
If we don’t do this, our old version could be cached for up to 24h!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;serverless-framework&quot;&gt;Serverless framework&lt;/h2&gt;
&lt;p&gt;Our frontend application would be pretty useless if no backend existed for it.&lt;br /&gt;
Since it is difficult to access our RPi backend application directly we decided to build a proxy backend in the AWS cloud as explained before.&lt;br /&gt;
We decided to use the serverless framework for its ease of use and speed of development to build this backend.&lt;/p&gt;

&lt;p&gt;What exactly are the requirements for our backend in the AWS cloud? We listed following list of requirements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DynamoDB&lt;/a&gt; tables for our events and jobs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cognito UserPool&lt;/a&gt; and a &lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html&quot;&gt;Cognito IdentityPool&lt;/a&gt; to provide authentication and authorisation for our frontend application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS API Gateway&lt;/a&gt; to expose REST endpoints from our cloud backend to our frontend web application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lambda functions&lt;/a&gt; that actually implement our backend code. We used the &lt;a href=&quot;https://aws.amazon.com/sdk-for-node-js/&quot;&gt;AWS Node.js SDK&lt;/a&gt; to program our lambda functions.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS IAM&lt;/a&gt; roles and permissions to perform operations inside of our Lambdas (connect and create jobs on AWS IoT, scan and put to our DynamoDB tables, etc…).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;why-the-serverless-framework&quot;&gt;Why the serverless framework?&lt;/h3&gt;

&lt;p&gt;In the beginning we configured everything by hand in the console.&lt;br /&gt;
This approach has several drawbacks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is very time-consuming to click in the AWS console&lt;/li&gt;
  &lt;li&gt;It is an error prone and not easily repeatable process to set up&lt;/li&gt;
  &lt;li&gt;It does not adhere to industry best practices as we want our infrastructure to be defined as code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bas then introduced me to the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IaC or Infrastructure as Code&lt;/a&gt; and &lt;a href=&quot;https://www.serverless.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the Serverless framework&lt;/a&gt;.&lt;br /&gt;
There are several options to do IaC on AWS but for our particular project serverless seemed the best fit.&lt;br /&gt;
Our entire cloud backend gets configured in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; file, that is versioned on GitHub in our cloud backend project.&lt;br /&gt;
This way we can set up our infrastructure through IaC in a repeatable manner.&lt;/p&gt;

&lt;h3 id=&quot;serverlessyml&quot;&gt;Serverless.yml&lt;/h3&gt;

&lt;p&gt;This file is the heart of our serverless setup.&lt;br /&gt;
Everything that is needed to run our serverless stack got described in this file.&lt;br /&gt;
We used the &lt;strong&gt;yaml&lt;/strong&gt; notation as it is less convoluted than JSON, but you can also use JSON or TypeScript to build this. &lt;br /&gt;
We will explain the different parts of our serverless setup to show you in detail how everything works.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;functions-and-api-gateway&quot;&gt;Functions and Api Gateway&lt;/h4&gt;

&lt;p&gt;The essential part of our serverless setup is the functions section.&lt;br /&gt;
A function is an AWS Lambda function.&lt;br /&gt;
It’s an independent unit of deployment like a true microservice.&lt;br /&gt;
It is generally a very small piece of code that does one thing and does it well.&lt;br /&gt;
In our project, for example, we have a lambda function &lt;strong&gt;list-events&lt;/strong&gt; which does exactly that, list the events from our DynamoDB table.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/sls-functions.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Our API gateway is generated based on the configuration of our functions in this section.&lt;br /&gt;
Everything under the &lt;strong&gt;events&lt;/strong&gt; property is used as configuration for our API gateway.&lt;br /&gt;
In this example you can see that we define a &lt;strong&gt;path&lt;/strong&gt; of event and a &lt;strong&gt;method&lt;/strong&gt; GET.&lt;br /&gt;
We also enable &lt;strong&gt;CORS&lt;/strong&gt; and tell the API gateway to authorize calls made to this endpoint with the &lt;strong&gt;AWS_IAM&lt;/strong&gt; authorizer.&lt;/p&gt;

&lt;p&gt;This results in the path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/event&lt;/code&gt; getting added to our API gateway which then maps to our lambda function we defined.&lt;br /&gt;
This path is CORS enabled and is secured by the aws_iam authorizer.&lt;br /&gt;
So you can only invoke this function if you have a valid AWS access credential from our Cogito identity pool.&lt;br /&gt;
If you don’t have a valid credential you will receive a 403 denied response from the API gateway.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;API gw&quot; src=&quot;/img/2020-09-25-ghelamco-alert/api-gw.PNG&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Our function needs several additional pieces of configuration to be able to do its job well.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-iam-roles&quot;&gt;AWS IAM Roles&lt;/h4&gt;

&lt;p&gt;To allow our lambda function to have fine-grained access to our AWS services we defined IAM roles in our serverless project that are attached to our lambda functions.&lt;br /&gt;
We defined the IAM roles in a separate file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda-iam-roles.yml&lt;/code&gt; which gets included into our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; file.&lt;br /&gt;
We can then freely use any roles we wish.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/sls-iamroles.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-dynamodb&quot;&gt;AWS DynamoDB&lt;/h4&gt;

&lt;p&gt;We decided to use AWS DynamoDB as our datastore in the cloud.&lt;br /&gt;
&lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS DynamoDB&lt;/a&gt; is a key-value, document and NoSQL database, that delivers single-digit millisecond performance at any scale.&lt;br /&gt;
DynamoDB is a very cost effective and low maintenance way of storing data so it looked perfect for us.&lt;br /&gt;
Since our lambda function relies on these DynamoDB tables for its data we pass the table name to the function as an environment variable.&lt;br /&gt;
This allows us to have separate tables for different environment like development, integration, production.&lt;br /&gt;
Our DynamoDB tables get created by the serverless framework as well.&lt;br /&gt;
They are described in a separate file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamodb-tables.yml&lt;/code&gt; and gets included in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; file.&lt;br /&gt;
Our DynamoDB tables get created by a naming policy which allows us to easily reuse that naming scheme in our environment variables for the lambda functions.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/sls-dynamo.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h5 class=&quot;no_toc&quot; id=&quot;data-sync&quot;&gt;Data sync&lt;/h5&gt;

&lt;p&gt;Our data gets pushed from our RPi backend into DynamoDB tables so that our web application has access to the latest data.&lt;br /&gt;
To achieve this push mechanism I made a service in our backend application that syncs the local H2 database to our DynamoDB table.&lt;br /&gt;
We added some triggers in our RPi backend application that allows us to sync the current state of the H2 database to the DynamoDB table.&lt;br /&gt;
For example, when we are done with our website scraping process, we trigger a sync to DynamoDB if there are any updates or inserts into our H2 database.&lt;br /&gt;
This ensures that our RPi H2 database acts as the single source of truth.&lt;br /&gt;
The DynamoDB is just a read-only copy of the data in the AWS cloud that is kept up to date by our RPi backend application.&lt;br /&gt;
So as long as the backend application is running on the RPi we have access to the latest data in our web application.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-lambda-functions-with-aws-nodejs-sdk&quot;&gt;AWS Lambda functions with AWS Node.js SDK&lt;/h4&gt;

&lt;p&gt;The handler is the entry point in our lambda function.&lt;br /&gt;
This is defined in our serverless stack which handler should be invoked by the API gateway.&lt;br /&gt;
Following example illustrates how our lambda reads data from our DynamoDB table (using the environment variable from our config) and returns the result to our API gateway.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/sls-lambda.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;aws-api-gateway-additional-configuration&quot;&gt;AWS API Gateway additional configuration&lt;/h4&gt;

&lt;p&gt;We needed to add some additional configuration for our API gateway that was not possible to include in the functions part of our serverless template.&lt;br /&gt;
To make sure our application does not get CORS errors when it receives a 4XX or 5XX response from the API gateway we had set up CORS for these error responses.&lt;br /&gt;
As you can see below we added response headers to allow all origins and headers.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/sls-api.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cicd-pipeline-serverless&quot;&gt;CICD pipeline Serverless&lt;/h3&gt;

&lt;p&gt;Since the serverless framework is so easy to use, and we only had one environment available, we decided not to build a CICD pipeline for this part.&lt;br /&gt;
Instead, we just use the &lt;strong&gt;serverless CLI&lt;/strong&gt; to deploy and update our stack from our local development machines.&lt;/p&gt;

&lt;h1 id=&quot;application-flow&quot;&gt;Application flow&lt;/h1&gt;
&lt;p&gt;To finish off the technical part of this blogpost I would like to show you the end-to-end workflow of the application.&lt;br /&gt;
For example let’s say the user logs in to the web application and wants to &lt;strong&gt;snooze an alert&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We click snooze alert in the frontend web application.&lt;/li&gt;
  &lt;li&gt;This calls our API gateway endpoint &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/alert/snooze&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This call is authorized by the &lt;strong&gt;userpool JWT token&lt;/strong&gt; and &lt;strong&gt;identitypool temporary AWS credential&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;This API gateway endpoint invokes an &lt;strong&gt;AWS Lambda function&lt;/strong&gt; which creates a job and &lt;strong&gt;job document in AWS IoT&lt;/strong&gt; for the RPi.
It also inserts a row into a second &lt;strong&gt;DynamoDB table&lt;/strong&gt; (ghela-jobs) to register the job we created on the frontend.&lt;/li&gt;
  &lt;li&gt;The job gets send to the RPi and processed by our backend application, thus snoozing the alert in the &lt;strong&gt;H2 database&lt;/strong&gt;.
This will effectively turn the alert light off.&lt;/li&gt;
  &lt;li&gt;The RPi &lt;strong&gt;synchronizes&lt;/strong&gt; its H2 database with the event &lt;strong&gt;DynamoDB table&lt;/strong&gt;. Thus updating the status of the alert in the DynamoDB table.&lt;/li&gt;
  &lt;li&gt;This new status will then be reflected in the &lt;strong&gt;frontend web application&lt;/strong&gt; so our user can see the result of his action.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This same workflow applies to all commands that can be sent from the frontend application to our RPi device.&lt;br /&gt;
This is a prime example of how a distributed system works and operates.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This internship gave me such a big overview of all best practices and new technologies, that this was a real eye-opener and educational experience.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I’ve had the chance to develop an application in Spring, with different databases;&lt;/li&gt;
  &lt;li&gt;learned how to properly test my code with unit and integration tests;&lt;/li&gt;
  &lt;li&gt;learned how to use the Java and Node AWS SDKs;&lt;/li&gt;
  &lt;li&gt;APIs, connecting it all together…;&lt;/li&gt;
  &lt;li&gt;came in touch with a lot of Linux, sharpening my command-line skills;&lt;/li&gt;
  &lt;li&gt;developed an Angular app from start to finish;&lt;/li&gt;
  &lt;li&gt;learned a lot about AWS: IAM, IoT Core, DynamoDB, API Gateway, SNS, SSM, EKS, S3, CloudWatch, CloudFront, lambdas, Route53, …;&lt;/li&gt;
  &lt;li&gt;CICD pipelines and their best practices in the industry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m very thankful for being able to do this and having the chance to work with Bas on a real project.&lt;/p&gt;

&lt;p&gt;He always motivated me to go the extra mile !&lt;br /&gt;
And he could destroy a day of hard work in a few sentences … :)&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Ghelamco-alert CloudWatch Alarm&quot; src=&quot;/img/2020-09-25-ghelamco-alert/bas-smile.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;But afterwards he would always take the time to explain why, and how, I should do it to make my solution comply with the industry best practices.&lt;br /&gt;
Being able to have someone who makes you self-reflect on the work you did and takes his time to give you proper feedback.
That is the biggest asset to provide to a junior programmer.&lt;/p&gt;

&lt;p&gt;Also, a big thanks to Frederick Bousson &amp;amp; Ordina for the opportunity and resources provided.&lt;br /&gt;
This really was a great project and I enjoyed every minute of it!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Govaerts&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-govaerts/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-govaerts.jpg&quot;, &quot;title&quot;=&gt;&quot;Java developer&quot;, &quot;email&quot;=&gt;&quot;kevin.govaerts1@gmail.com&quot;, &quot;linkedin&quot;=&gt;&quot;kevingovaerts&quot;, &quot;bio&quot;=&gt;&quot;Kevin works as a back-end developer for Ordina Belgium, focussing mainly on Spring boot, Angular and AWS-technologies.&quot;}</name><email>kevin.govaerts1@gmail.com</email></author><category term="Cloud" /><category term="IoT" /><category term="RPi" /><category term="AWS" /><category term="Serverless" /><category term="API Gateway" /><category term="S3" /><category term="Lambda" /><category term="Route 53" /><category term="CloudFront" /><category term="Greengrass" /><category term="Docker" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-09-25-ghelamco-alert/rpi-front.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-09-25-ghelamco-alert/rpi-front.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Scaling CSS with BEM</title><link href="https://ordina-jworks.github.io/frontend/2020/09/18/scaling-css-with-bem.html" rel="alternate" type="text/html" title="Scaling CSS with BEM" /><published>2020-09-18T00:00:00+00:00</published><updated>2020-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/frontend/2020/09/18/scaling-css-with-bem</id><content type="html" xml:base="https://ordina-jworks.github.io/frontend/2020/09/18/scaling-css-with-bem.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-bem&quot;&gt;What is BEM?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bem-combined-with-sass&quot;&gt;BEM combined with SASS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#is-bem-still-viable-in-the-era-of-web-components&quot;&gt;Is BEM still viable in the era of web components?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources-and-interesting-reads&quot;&gt;Resources and interesting reads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-bem&quot;&gt;What is BEM?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://getbem.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BEM&lt;/a&gt; is a methodology that helps developers to create reusable components and code sharing in front-end development.&lt;/p&gt;

&lt;p&gt;BEM is an abbreviation as you could have guessed.
It stands for the three core elements of the methodology: Block, Element and Modifier.&lt;/p&gt;

&lt;p&gt;Blocks are standalone entities that are meaningful on its own.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;header, container, menu, checkbox, input&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Elements are a part of a block that has no standalone meaning and are semantically tied to its block.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;menu item, list item, header title&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Modifiers are a flag on a block or element.
They are meant to change appearance or behavior.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;disabled, highlighted, color yellow, size big, fixed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bem-a-naming-convention&quot;&gt;BEM: a naming convention&lt;/h2&gt;
&lt;p&gt;BEM is in short a highly useful, powerful, and simple &lt;a href=&quot;https://getbem.com/naming&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;naming convention&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It makes your front end code easier to scale, more robust and explicit, and a lot more strict.
Which makes it easier to read and understand and also easier to work with.&lt;/p&gt;

&lt;p&gt;Namings of BEM are as followed:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BEM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Naming&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;HTML&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CSS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;block&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.block {...}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Element&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.block__element&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;block__element&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.block__element {...}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Block Modifier&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.block–modifier&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;block block--modifier&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.block--modifier {...}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Element Modifier&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.block__element–modifier&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;block__element block__element--modifier&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.block__element--modifier {...}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example:
You have 2 images.
One on it’s own as a ‘block’ and the other is an ‘element’ inside a profile section which is another ‘block’ to keep it simple.&lt;/p&gt;

&lt;p&gt;This is how the HTML would look like:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile__image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The CSS would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.image {...}
.profile {...}
.profile__image {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to add different versions, states or ‘modifiers’, for example a rounded or smaller image. 
Your code would look like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image image--rounded&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile__image profile__image--small&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.image {...}
.image--rounded {...}
.profile {...}
.profile__image {...}
.profile__image--small {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The modifier class should only be added to blocks or elements you want to modify and you should keep the original class.&lt;/p&gt;

&lt;h2 id=&quot;why-use-bem&quot;&gt;Why use BEM?&lt;/h2&gt;

&lt;p&gt;As stated above, BEM makes your code easier to read, understand, work with et cetera.
But how does it achieve that?&lt;/p&gt;

&lt;p&gt;First of all, BEM avoids inheritance and provides some sort of scope by using unique CSS classes per element (like .profile__image).
It reduces style conflicts by keeping CSS specificity to a minimum level.
It avoids the use of element type selectors like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div &amp;gt; ul &amp;gt; li&lt;/code&gt; and keeps your CSS loose coupled from your HTML.
BEM avoids nesting and keeps your CSS flat (even with preprocessors).&lt;/p&gt;

&lt;h2 id=&quot;when-not-to-use-bem&quot;&gt;When not to use BEM?&lt;/h2&gt;
&lt;p&gt;You should always question yourself if it is really necessary to use BEM notation for a certain CSS class.&lt;/p&gt;

&lt;p&gt;If we would add two buttons to the example above like so:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Default button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile__image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile__button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Profile button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the second button should be styled differently because it lives inside the profile block you SHOULD use BEM notation.
Otherwise if it should be styled the same as the other button and it just happens to live in profile you definitely DO NOT need BEM notation there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.underline { text-decoration: underline; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This CSS would never fall into any BEM category, as it is merely a standalone rule.&lt;/p&gt;

&lt;h1 id=&quot;bem-combined-with-sass&quot;&gt;BEM combined with SASS&lt;/h1&gt;
&lt;p&gt;Is the BEM methodology easy to combine with preprocessors like &lt;a href=&quot;https://sass-lang.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SASS&lt;/a&gt;?
The answer is: ‘Yes, absolutely!’&lt;/p&gt;

&lt;p&gt;With the help of SASS and its &lt;a href=&quot;https://sass-lang.com/documentation/style-rules/parent-selector&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;‘parent selector’&lt;/a&gt; we could transform the above CSS to the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.image {
    &amp;amp;--rounded {...}
}
.profile {
    &amp;amp;__image {
        &amp;amp;--small {...}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parent selector of SASS makes it easy to add suffixes to the outer selector resulting in an improvement of readability and cleaner style sheets.&lt;/p&gt;

&lt;p&gt;All while the resulting CSS stays flat.
The above SASS compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.image {...}
.image--rounded {...}
.profile {...}
.profile__image {...}
.profile__image--small {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see it is the same CSS as above.
You want to be avoiding CSS combinators like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.profile .profile__image .profile__image--small {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;is-bem-still-viable-in-the-era-of-web-components&quot;&gt;Is BEM still viable in the era of web components?&lt;/h1&gt;
&lt;p&gt;Yes and no.&lt;/p&gt;

&lt;p&gt;First of all BEM was created to make large scale style sheets easier to scale, read et cetera.
It avoids class name collisions and the quick fixes with ‘!important’.&lt;/p&gt;

&lt;p&gt;When you are working component based, you can make use of Shadow DOM to make the styles encapsulated in that component.
This prevents them from affecting outer elements.
Angular, Vue or React use similar approaches, either using Shadow DOM or appending unique attributes to the class names.
This ensures that the styles are scoped to that certain component.&lt;/p&gt;

&lt;p&gt;Since this makes class name collisions no issue anymore you could consider BEM obsolete.&lt;/p&gt;

&lt;p&gt;BEM helps you create reusable components.
But that is also no longer necessary here, because we are already using seperate components.&lt;/p&gt;

&lt;p&gt;Although, I still believe BEM could be useful as a developer.
Take our profile component for example.
With the traditional approach, profile would be seen as the Block and we would end up with following classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.profile {...}
.profile__header {...}
.profile__header__title {...}
.profile__header__title--short {...}
.profile__header__name {...}
.profile__bio {...}
.profile__image {...}
.profile__image--small {...}
.profile__image-description {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By encapsulating the styles, we could drop the profile part as we already are inside the profile component.
We do not need to worry about class name collisions, so we can shorten our class names and keep them meaningful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.profile {...}
.header {...}
.header__title {...}
.header__title--short {...}
.header__name {...}
.bio {...}
.image {...}
.image--small {...}
.image-description {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the responsibility of each class is much clearer just by looking at it.
It is easier to split the component later if needed, and overall it is much easier to read.&lt;/p&gt;

&lt;p&gt;So is BEM still necessary in component driven development?
No, not at all, but I do recommend using a convention, be it BEM or anything else.
The most important part is that the team agrees on it and follows it.
Consistency is ‘mucho importante’ to keep the code base lean and clean.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;BEM is a useful class naming convention to keep gigantic style sheets organisable and readable and to avoid class name collisions.&lt;/p&gt;

&lt;p&gt;It is easy to use with preprocessors as SASS which makes your code even cleaner.&lt;/p&gt;

&lt;p&gt;In CDD (component driven development) BEM might be considered obsolete, but a naming convention is still recommended.
This counts for any language, including CSS.&lt;/p&gt;

&lt;h1 id=&quot;resources-and-interesting-reads&quot;&gt;Resources and interesting reads&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://getbem.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BEM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sass-lang.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SASS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@andrew_barnes/bem-and-sass-a-perfect-match-5e48d9bc3894&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BEM and SASS a perfect match&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/what-is-the-shadow-dom/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;What is the Shadow DOM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.componentdriven.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CDD (Component Driven Development)&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaël&quot;, &quot;last_name&quot;=&gt;&quot;De Wree&quot;, &quot;github&quot;=&gt;&quot;mdewree&quot;, &quot;linkedin&quot;=&gt;&quot;michaeldewree&quot;, &quot;permalink&quot;=&gt;&quot;/author/michael-de-wree/&quot;, &quot;avatar&quot;=&gt;&quot;michael-de-wree.jpg&quot;, &quot;title&quot;=&gt;&quot;Front-End Developer&quot;, &quot;email&quot;=&gt;&quot;michael.dewree@ordina.be&quot;, &quot;phone&quot;=&gt;&quot;0032484297782&quot;, &quot;bio&quot;=&gt;&quot;Michaël is a Front-End Developer at Ordina, passionate about all JavaScript related technologies. In his spare time, Michaël enjoys working out, running and enjoying his time with friends and family.&quot;}</name><email>michael.dewree@ordina.be</email></author><category term="Frontend" /><category term="BEM" /><category term="CSS" /><category term="DESIGN" /><category term="FRONTEND" /><category term="CDD" /><category term="FRONTEND ARCHITECTURE" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/BEM.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/BEM.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kubernetes clients and dashboards: a comparison</title><link href="https://ordina-jworks.github.io/cloud/2020/08/28/kubernetes-clients-comparison.html" rel="alternate" type="text/html" title="Kubernetes clients and dashboards: a comparison" /><published>2020-08-28T00:00:00+00:00</published><updated>2020-08-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/08/28/kubernetes-clients-comparison</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/08/28/kubernetes-clients-comparison.html">&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#k9s&quot;&gt;K9s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#octant&quot;&gt;Octant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lens&quot;&gt;Lens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kubenav&quot;&gt;Kubenav&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#infra-app&quot;&gt;Infra.App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Imagine the following scenario: you’re writing code for your amazing new take-your-bike-to-work platform and you’ve just finished implementing a new feature to allow users to send unicorns to each other.
Your CI/CD pipeline has nicely tested, packaged and deployed the updates to your development Kubernetes cluster, you load the URL and are greeted by a very nice error page stating “Oops, my bad, we lost some unicorns”.
Clearly, you broke something, somewhere.
Most of the time, this means you’ll open up a terminal, run some commands to login into the cluster and start firing two dozen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;-commands to figure out which microservice broke and check the logs to figure out where your code has broken.
You make some changes to the broken service and push your code to the repository and the CI/CD flow takes over again.&lt;/p&gt;

&lt;p&gt;This process works quite nicely, but figuring which service is broken and which logs to check can be quite challenging.
Typing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;-commands into the terminal probably takes half of the time you spend on debugging the issue.
As developers are always optimizing their workflow, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; just takes to much time, even with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; alias for the command and perfect auto-complete features.&lt;/p&gt;

&lt;p&gt;As the famous mantra goes: “anything worth doing twice is worth automating”.
Therefore, quite some tools were created to make the process of navigating through a cluster easier than typing a lot of commands.&lt;/p&gt;

&lt;p&gt;This blog post aims to provide a very brief overview of some of the more common tools that are available as replacements or additions to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; to allow developers to look into a Kubernetes cluster.
All tools can be installed locally and don’t require any components to be installed in the cluster to operate.&lt;/p&gt;

&lt;h2 id=&quot;k9s&quot;&gt;K9s&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/derailed/k9s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;K9s&lt;/a&gt; is a Kubernetes client built by &lt;a href=&quot;https://twitter.com/kitesurfer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fernand Galiana&lt;/a&gt;.
The client is fully terminal-based so you’ll only be using your keyboard when operating it.
For those who are familiar with Vim, you’ll feel right at home in K9s.
It uses similar hotkeys to the popular editor.
There is a (quite steep) learning curve when you start using this client.
Once you have read the brief readme on the project’s home page and memorized the commands you’ll use the most, it is an absolute joy to use.
It feels like using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; without the requirement to type all commands every time you need to get a deployment.
The tool is quite feature-rich at the time of writing.
You can port-forward, view secrets in plain text, edit resources directly, and “drill-down” from deployments into the logs of a container.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:deploy&lt;/code&gt; takes you to the pod overview, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;enter&amp;gt;&lt;/code&gt;-ing into the deployment takes you to all pods in that deployment.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;enter&amp;gt;&lt;/code&gt;-ing again into a pod reveals all containers, including (completed) init-containers.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;enter&amp;gt;&lt;/code&gt;-ing a final time into a pod takes you straight into a view with live logs.
This hierarchical approach feels very natural and follows the architectural design of Kubernetes.
A similar approach can be used for service (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:svc&lt;/code&gt;), statefulsets (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sts&lt;/code&gt;) and deamonsets(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ds&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Another very familiar shortcut is the usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; to filter on the context you’re currently in.
This works on basically any screen where you’d expect it, even in the logs view!&lt;/p&gt;

&lt;p&gt;After a few days of use, it feels very natural to use.
However, for those of us who rather use their mouse to navigate through resources and hate memorizing commands, this tool is not for you.&lt;/p&gt;

&lt;p&gt;The project is still under very active development and quite some people are contributing to the codebase.
Since the project doesn’t seem to be backed by a company directly, there are no real support guarantees nor is there a fixed release schedule.
The maintainer however accepts fixes quite fast and releases are very frequent, sometimes multiple a day.&lt;/p&gt;

&lt;p&gt;Demo: Go from deployment to all the way into pod logs
&lt;img alt=&quot;k9s from deployment to pod logs&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/k9s-deploy.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Demo: Switch between two Kubernetes contexts
&lt;img alt=&quot;k9s context switch&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/k9s-ctx.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Demo: Find out where a configmap is used
&lt;img alt=&quot;k9s config map usage&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/k9s-cm.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;octant&quot;&gt;Octant&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vmware-tanzu/octant&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Octant&lt;/a&gt; is an open-source Kubernetes web dashboard built by VMWare Tanzu.
It is written in Go, which is a trending programming language made by Google.
It has lots of features, a clean user interface, and has the support of a big company in the IT industry behind it.
This dashboard runs locally, which means you do not need to install it on your cluster, unlike the official Kubernetes dashboard.&lt;/p&gt;

&lt;p&gt;Installing and accessing the dashboard is very straight-forward; it is as easy as running an install command (on Mac, we used Homebrew) and then running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;octant&lt;/code&gt; command from your terminal.
Once it’s running, you will find that the navigation is simple. We didn’t need to look around and search a lot to find what we need.&lt;/p&gt;

&lt;p&gt;You are greeted by the application with a nice and well-ordered summary of your cluster resources.
Navigating through the dashboard feels very comfortable and swift. They offer both a dark and light theme, which you will be able to see down below.&lt;/p&gt;

&lt;p&gt;This client offers features that other traditional clients have as well such as log streams, a graphical display of all resources, switch between clusters,…
It does have unique features as well, such as in-app port forwarding (say goodbye to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl port-forward&lt;/code&gt;!).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Octant port forwarding&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/octant-pf.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Octant port forwarding&lt;/p&gt;

&lt;p&gt;The most singular feature they have is their plugin system, which allows you to design plugins based on the information that you want on your interface. 
Although this requires knowledge of Go and their plugin system, you can customize your experience entirely to the way that you want it to be.
For example, there is a &lt;a href=&quot;https://github.com/bloodorangeio/octant-helm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Helm plugin&lt;/a&gt; available and Jenkins X has a repository of Octant &lt;a href=&quot;https://github.com/jenkins-x/octant-jx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are a fan of web dashboards, then you should give Octant a try. Once you start to work with it, you will feel that it has a lot of potential. 
If you do prefer something more natively and working in a separate application window, then we suggest you to continue reading this blog post.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Octant slideshow&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/octant.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Octant slideshow&lt;/p&gt;

&lt;h2 id=&quot;lens&quot;&gt;Lens&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lensapp/lens&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lens app&lt;/a&gt; is a Kubernetes client with a proper GUI.
It was created by Kontena Inc and later &lt;a href=&quot;https://techcrunch.com/2020/08/13/mirantis-acquires-lens-an-ide-for-kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;sold to Mirantis&lt;/a&gt;, the owners of Docker Enterprise.&lt;/p&gt;

&lt;p&gt;When first starting Lens, it immediately feels very easy to use.
Adding a cluster can be done by hitting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and selecting a cluster from the dropdown.
Lens leverages the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeconfig&lt;/code&gt; it finds on the system to discover and authenticate with clusters.
This way, no additional magic is needed to get started.&lt;/p&gt;

&lt;p&gt;After connecting to a cluster, you’re dropped into the cluster overview (see screenshot).
This view provides you with an easy overview of the resources within the cluster and (super useful) provides a list of the last seen error events in the cluster.&lt;/p&gt;

&lt;p&gt;Navigating to the list of pods provides an overview of all pods in the cluster.
By clicking on a pod you’re provided with the details of that pod (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe&lt;/code&gt;).
From here, you can directly dive into the pod logs, shell into the pod, make edits or remove the pod from the cluster.&lt;/p&gt;

&lt;p&gt;Similar support is available for most common resources within the cluster: statefulsets, deployments, configmaps, secrets, …
The workflow is always the following: open the type in the sidebar on the left, click on an object to get details.
From that detailed view, certain actions can be performed on the object.&lt;/p&gt;

&lt;p&gt;As with most of the tools in this comparison, Lens is quite feature-rich.
The most common types are supported and common actions are available.
But Lens has another trick up its sleeve which makes it different from the other tools: Metrics/Prometheus integration.&lt;/p&gt;

&lt;p&gt;The integration relies on a Prometheus instance being installed in the cluster that exposes the supported metrics.
You can opt for Lens to install Prometheus (and other required components) for you, but in real scenarios, you either don’t have those rights or you’ll already have a Prometheus instance installed in the cluster.
In those cases, you can just &lt;a href=&quot;https://github.com/lensapp/lens/blob/master/troubleshooting/custom-prometheus.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;add some configuration&lt;/a&gt; to that instance and point the Lens app to that Prometheus instance.
It will use port-forwarding under the hood, so no need to expose the Prometheus instance to the outside world.
The integration works nicely and instantly provides some metrics about your cluster and deployed components.
This provides good insights for developers to figure out their resource consumption without leaving their Kubernetes client.
The charts and data seem to be very rudimentary, but improvements are expected to arrive over time.&lt;/p&gt;

&lt;p&gt;As most of the clients described in this post, Lens app is an open-source project.
Mirantis is behind the development of Lens, but at the time of writing, no supported (paid) version is available.
There is continuous active development on the app and releases are about one month apart, so bug fixes and new features should be available regularly.&lt;/p&gt;

&lt;p&gt;Screenshot: List of pods in Lens
&lt;img alt=&quot;Lens pod list&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/lens-pod-list.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screenshot: Details about a pod in Lens, including Prometheus supplied metrics
&lt;img alt=&quot;Lens pod details&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/lens-pod-details.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screenshot: Overview of a cluster in Lens, including the last error events
&lt;img alt=&quot;Lens cluster overview&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/lens-cluster-overview.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kubenav&quot;&gt;Kubenav&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubenav/kubenav&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubenav&lt;/a&gt; is a rich featured, open source Kubernetes client created in early 2020 to manage your cluster(s) with. 
The application is under active development by the open-source community on their GitHub repository.
There is cross-platform functionality, which means they provide you a desktop AND mobile client, which is a unique feature in the world of Kubernetes clients.
They share the same codebase, so the navigation should be similar on all platforms.&lt;/p&gt;

&lt;p&gt;The navigation menu is self-explanatory as it categorizes every Kubernetes resource, which you can then filter by namespace in the top-right corner.
They support all widely used Kubernetes resources and the status and configuration of those resources. 
You can easily switch between Kubernetes clusters by using the drop-down menu available in the menu.&lt;/p&gt;

&lt;p&gt;There is a window that is available at all times where you can consult different deployment logs and a terminal. Each window is categorized under a tab.
When you minimize this window, you will notice a blue shell icon in the right bottom corner of Kubenav, which allows you to open your current logs or terminal again.&lt;/p&gt;

&lt;p&gt;The app is made in the Ionic Framework using Capacitator as cross-platform runtime, which is something you notice when you start using the app.
We personally don’t really like this feeling, as we prefer our clients to have a more native feeling, although we understand why the developers chose this approach.&lt;/p&gt;

&lt;p&gt;The primary reason why we would use this application is because they support almost every resource combined with a GUI if you don’t like using the terminal.
However, I’m not a fan of the interface in general, as it seems to be messy and overwhelming at times when a resource provides you with a great deal of information in an uncategorized way.
If you want to know every detail about your resource at all times, then this application is definitely for you.
We didn’t have a reason yet to use the mobile client, but we are sure it depends on your use case.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Kubenav slideshow&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/kubenav.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Kubenav slideshow&lt;/p&gt;

&lt;h2 id=&quot;infra-app&quot;&gt;Infra App&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://infra.app/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Infra App&lt;/a&gt; is a new addition to the list of Kubernetes clients.
It is made by the people over at Docker Desktop &amp;amp; &lt;a href=&quot;https://kitematic.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kitematic&lt;/a&gt; and is being developed behind closed doors, which has been addressed as “unpleasant” within the Kubernetes community.
It provides you with a clean, simplistic user interface that groups everything you need to know about a single resource together.
Everything is self-explanatory and all the information you need is available within a few simple clicks.&lt;/p&gt;

&lt;p&gt;When you open the application for the first time, you are greeted with a prompt asking you for your e-mail address.
Although this is probably for newsletters and updates, we wish this step was optional.&lt;/p&gt;

&lt;p&gt;You quickly notice that only basic functionality is available in the application, which makes sense as the client is still in early access at the time of writing.
You can browse resources per namespace, go through application logs, read and edit YAML configurations, and check the current resources used by your deployment.
There is a metrics interface for the whole cluster as well, which supplies you with a structured and detailed view about your nodes.&lt;/p&gt;

&lt;p&gt;Since the application is still very young, it is lacking some functionality that you might expect or find in other clients.
If you want something with more than basic functionality right now, this might not be the application you are looking for.
However, if it has what you need, you will find that it will be very easy and straightforward to manage your Kubernetes cluster with this client.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Kubenav slideshow&quot; src=&quot;/img/2020-08-06-kubernetes-clients-comparison/infra-app.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1000px;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;Infra slideshow&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now the real question: which client should you use?
As with any question about software, it depends.
If you like to be lightning-fast and don’t mind struggling through a steep learning curve, K9s might be a tool for you.
It’s the personal favorite of the authors this post, mainly because of its shortcuts and lightning-fast load times.&lt;/p&gt;

&lt;p&gt;If you are using some software that has plugins available for Octant, definitely give it a try. One of the authors prefers Octant as non-terminal GUI.
The &lt;a href=&quot;https://github.com/topics/octant-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;plugins&lt;/a&gt; add a lot of value to the tool and might make it a very compelling option for your use-case.&lt;/p&gt;

&lt;p&gt;If you often need to optimize your resource usage, want a client that just works, and is easy to use, go for Lens.
This definitely hits the sweet spot between ease of use, stability, and available feature set.&lt;/p&gt;

&lt;p&gt;If you need cross-platform functionality (especially mobile support), then Kubenav is the application you want.
If you want to get used to the UI and dive into this software, we would suggest trying it on all platforms.&lt;/p&gt;

&lt;p&gt;While Infra is still in early access, you can still use it in a production environment. If you like a simplistic yet structured
interface with not too many features (yet), then Infra is the right choice for you.&lt;/p&gt;

&lt;p&gt;But our final advice is: just try them out yourself and see which fits your workflow best.
Most of them share the same basic functionality and it just depends on your use-cases and workflow which one fits best.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Cloud" /><category term="Kubernetes" /><category term="kubectl" /><category term="tools" /><summary type="html">Table of Contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-08-06-kubernetes-clients-comparison/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-08-06-kubernetes-clients-comparison/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>