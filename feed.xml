<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2021-02-12T21:53:19+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Making a generic Context in React</title><link href="https://ordina-jworks.github.io/architecture/2021/02/12/react-generic-context.html" rel="alternate" type="text/html" title="Making a generic Context in React" /><published>2021-02-12T00:00:00+00:00</published><updated>2021-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2021/02/12/react-generic-context</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2021/02/12/react-generic-context.html">&lt;h2 id=&quot;a-background&quot;&gt;A background&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;A picture of the Windows XP background&quot; src=&quot;/img/react-generic-context/a-background.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have been mostly working with Angular for the past 4 years.
I am, however, a firm believer that no one framework or library is better than all others and I love a sporadic challenging dive into the unknown.&lt;/p&gt;

&lt;p&gt;Those who know a little bit about React will know that, like Angular, Vue and others, it’s a JavaScript library to create web applications by means of components.
These components are considered building blocks and can consist themselves of smaller components.
These components have properties, being passed by their parents and these properties can influence the rendered view and logic of the components.&lt;/p&gt;

&lt;p&gt;Those with a bit more React experience, will know that in a larger tree of components, it’s a nuisance to get a property from a component near the root of the tree to a component near the leafs of the tree by simple property binding.
It also muddies intermediary components with irrelevant code.&lt;/p&gt;

&lt;p&gt;Fortunately React includes &lt;strong&gt;Context&lt;/strong&gt; &lt;a href=&quot;https://reactjs.org/docs/context.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Docs&lt;/a&gt;.
It provides a way to share value like preferences/themes and authentication data without having to explicitly set those values in each component’s properties.&lt;/p&gt;

&lt;p&gt;The developer basically creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; variable which is provided by a container component (e.g. App) using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Provider&lt;/code&gt;, and can be consumed by other components  using either a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;A man reading a scroll with a quest on it&quot; src=&quot;/img/react-generic-context/reading-a-scroll.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The official React documentation mentions that Context is a great use for keeping data about the authenticated user, so it looked like this was the way to go.&lt;/p&gt;

&lt;p&gt;But we ran into a problem quite soon.
We currently use an Nx Workspace with multiple applications.
Some of these applications still use Basic Auth for authentication, while others use OpenID Connect.
Of course sooner or later, the Basic Auth applications will be converted to use OIDC too.
In the meantime, I wanted developers for these applications to be able to have the same structure, with the same basic components.
Knowing how it goes in the world of IT, and also as a challenge to myself I did an effort to make the eventual switch from Basic to OIDC as easy as possible for our developers and created an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authentication-core&lt;/code&gt; library which would house the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthContext&lt;/code&gt; and expose a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthProvider&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthConsumer&lt;/code&gt; components and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useAuth&lt;/code&gt; hook.
The libraries &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authentication-basic&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authentication-oidc&lt;/code&gt; would have specific implementation of the service being used by the provider.
This way, it’s also future-proof for a crazy decision that would have us switch to another authentication system.&lt;/p&gt;

&lt;p&gt;And this worked like a charm.
The developer only had to create an instance of the required service, and pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthProvider&lt;/code&gt;component.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// App.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@our-scope/authentication-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createOidcAuthService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@our-scope/authentication-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./Components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myAuthService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createOidcAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/AuthProvider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;He could then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthConsumer&lt;/code&gt; to wrap around the components where there was need for the authenticated user data.
Or use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useAuth&lt;/code&gt; hook to get the user data directly.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Components.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@our-scope/authentication-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/AuthConsumer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, we noticed that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthConsumer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useAuth&lt;/code&gt; hook couldn’t infer the type of the user data.
Not all developers like TypeScript, but I love having it around, especially when creating libraries that are meant to be used by other developers.
No type on the authentication data could lead to bugs when switching implementations.&lt;/p&gt;

&lt;p&gt;So back to the drawing board.
I did several attempts at making the functional component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthProvider&lt;/code&gt; generic, but I was unable to get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthContext&lt;/code&gt; generic.
Mostly because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthConsumer&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthProvider&lt;/code&gt;  exposed by the core library had to point to a specific context object, so a function creating this context didn’t make sense.
My knowledge of React is still limited and I decided to call it a day and submit the merge request for review.&lt;/p&gt;

&lt;p&gt;As I feared, type safety was a concern and had to be taken care of.
Luckily we have a team with members with a lot more React experience and they guided me to a solution.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;A picture of the holy grail&quot; src=&quot;/img/react-generic-context/the-grail.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When looking back, the solution is fairly simple, but elegant.
Instead of letting the core library expose actual components, we let it expose a factory function.
This factory function would create a context and in its turn call factory functions of each component and pass the context to it.
Finally the function would just return the created components.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// authentication-core/context/AuthContext.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthContextProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../domain/auth-context&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthContextProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;signIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;idle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthContextProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// authentication-core/factory.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthConsumer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./components/AuthConsumer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createProtectedRoute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./components/ProtectedRoute&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWithAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./components/withAuth&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./context/AuthContext&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createUseAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./hooks/useAuth&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./providers/AuthProvider&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./services/auth.service&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We type the Context based on the generic AuthService&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createUseAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AuthContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation libraries had to be adapted as well.
They too expose a factory function, calling the core factory function with some pre-setup data and their respective service.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// authentication-oidc/factory.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthentication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@our-scope/authentication-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./domain/oidc-props&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcAuthService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./services/oidc-auth.service&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createOidcAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oidcProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oidcService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcAuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oidcProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oidcService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Due to TypeScript’s type inference, the resulting Authentication and its components will have the same type as OidcAuthService’s implementation of AuthService.
Now the implementation for applications can use the factored and typed components instead of static components and the eventual switch from one implementation to another is as easy as ever.
The only changes which might have to be made to components, are for those components that actually consume an implementation-specific part of the user data.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// auth.ts&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is the only file to change when switching auth providers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createOidcAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@our-scope/authentication-oidc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OidcProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createOidcAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const { AuthProvider, AuthConsumer, useAuth } = createBasicAuthentication();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// App.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./auth&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./Components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/AuthProvider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Components.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./auth&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFirstComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Now authData's type is inferred&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/AuthConsumer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySecondComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Now authData's type is inferred&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s great to not focus on one framework at the time, but this can confuse too.
Because of my background in Angular, I was trying to solve this problem like I would with Angular’s dependency injection.
Because components are just functions in React, they can be generic by themselves and typed using factory functions.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Orjan&quot;, &quot;last_name&quot;=&gt;&quot;De Smet&quot;, &quot;permalink&quot;=&gt;&quot;/author/orjan-de-smet&quot;, &quot;avatar&quot;=&gt;&quot;orjan-de-smet.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;orjan.desmet@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;orjandesmet&quot;, &quot;github&quot;=&gt;&quot;orjandesmet&quot;, &quot;bio&quot;=&gt;&quot;Orjan is a Frontend Developer at Ordina Belgium, keen on building structured quality applications with a focus on Reactive Programming and dealing with it. He is always interested to try new technologies and to share his experiences. In his spare time, he enjoys a good game or movie or dining out.&quot;}</name><email>orjan.desmet@ordina.be</email></author><category term="Architecture" /><category term="React" /><summary type="html">A background</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/react-generic-context/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/react-generic-context/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Home Automation part 2: Getting started with Home Assistant</title><link href="https://ordina-jworks.github.io/iot/2021/02/10/Home-Automation-part-2-Getting-Started-With-Home-Assistant.html" rel="alternate" type="text/html" title="Home Automation part 2: Getting started with Home Assistant" /><published>2021-02-10T00:00:00+00:00</published><updated>2021-02-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2021/02/10/Home-Automation-part-2-Getting-Started-With-Home-Assistant</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2021/02/10/Home-Automation-part-2-Getting-Started-With-Home-Assistant.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#preparations&quot;&gt;Preparations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing&quot;&gt;Installing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-and-using-home-assistant&quot;&gt;Setting up and using Home Assistant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automations&quot;&gt;Automations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/logo.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Logo&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/logo.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;After the &lt;a href=&quot;/machine%20learning/2019/09/30/Home-automation-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;first general post&lt;/a&gt; about home automation it’s time to kick things into higher gear.
In this post we’ll go into detail about Home Assistant.
Home Assistant is a fully open source home automation platform.
It has a web interface as well as apps for Android and iOS.
It features over 1.700 integrations at the time of writing and allows for full local control of your smart home without using any of the big cloud vendors.
As with many things, Home Assistant is relatively easy to pick up but hard to master.
Read on down below for more the details.&lt;/p&gt;

&lt;h2 id=&quot;preparations&quot;&gt;Preparations&lt;/h2&gt;

&lt;p&gt;Before we get to installing Home Assistant it is handy to have some items at hand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A machine/VM to run the assistant on, can be a Raspberry Pi (3b or 4b recommended)
    &lt;ul&gt;
      &lt;li&gt;If you are using a SBC, a decent micro SD card, or even better, an external ssd to install everything on at least 32 GiB in size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The correct image of the Home Assistant OS, &lt;a href=&quot;https://www.home-assistant.io/hassio/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download the file&lt;/a&gt; best suited for your device.
The download page also features detailed information for each specific option
    &lt;ul&gt;
      &lt;li&gt;Raspberry Pi (and other board) images&lt;/li&gt;
      &lt;li&gt;Intel NUC image (or any other intel based board)&lt;/li&gt;
      &lt;li&gt;Virtual machine
        &lt;ul&gt;
          &lt;li&gt;Virtual Box =&amp;gt; VDI disk image&lt;/li&gt;
          &lt;li&gt;Hyper-V =&amp;gt; VHDX disk image&lt;/li&gt;
          &lt;li&gt;KVM =&amp;gt; QCOW2 disk image&lt;/li&gt;
          &lt;li&gt;VMware Workstation =&amp;gt; VMDK disk image&lt;/li&gt;
          &lt;li&gt;Proxmox =&amp;gt; QCOW2 disk image&lt;/li&gt;
          &lt;li&gt;VMware ESXi =&amp;gt; OVA disk image&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An ethernet connection, WiFi can work too but ethernet might be more reliable depending on your personal WiFi setup&lt;/li&gt;
  &lt;li&gt;Patience, don’t be afraid to start over if things don’t work after the first try!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Once you have everything downloaded and prepared we can get to installing and doing the basic setup for Home Assistant.
If you have downloaded the virtual machine hard disk image, load the downloaded image in the software by creating a new VM and assigning it the downloaded disk image.
2GiB of RAM and 1 or 2 cores are usually more than sufficient, these values can always be increased later on if needed.
Follow the instructions on &lt;a href=&quot;https://www.home-assistant.io/hassio/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the download page&lt;/a&gt; for you specific VM technology.&lt;/p&gt;

&lt;p&gt;If you have downloaded a device image, flash it onto the micro sd card, or even better an external SSD (&lt;a href=&quot;https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Booting the Raspberry Pi from USB&lt;/a&gt;).
An external SSD or decent USB 3.1 stick will last much longer than most SD cards, especially when writing a lot of log files.
You can use a tool like &lt;a href=&quot;https://www.balena.io/etcher/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Balena Etcher&lt;/a&gt; (multi OS) or &lt;a href=&quot;https://rufus.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rufus&lt;/a&gt; (Windows) to flash the image.
Once done, insert the SD card or USB device into your Raspberry Pi.
Once you have set up your device or VM and powered it on, you should be able to visit it by entering &lt;a href=&quot;http://homeassistant.local:8123&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://homeassistant.local:8123&lt;/code&gt;&lt;/a&gt; in the browser, this is where we will continue.
Follow the setup guide, this will let you create an account (local, no cloud shenanigans) and set up the details about your home.
You can set up integrations during this wizard but we will be doing this later.
Click complete to exit the wizard.
You will then be greeted with your home’s dashboard amd Home Assistant is ready to be used.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/setup-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Setting up a new home&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/setup-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 23%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/setup-2.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Setting home details&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/setup-2.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 17%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/dashboard-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Home Assistant dashboard&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/dashboard-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 55%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setting-up-and-using-home-assistant&quot;&gt;Setting up and using Home Assistant&lt;/h2&gt;

&lt;p&gt;Your home has some types of objects in it, these are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integrations: These are the building blocks that integrate with physical devices or services.&lt;/li&gt;
  &lt;li&gt;Devices: Any physical device that is added through an integration has a representation here.&lt;/li&gt;
  &lt;li&gt;Entities: A device can expose one or multiple entities.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/automation&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Automations&lt;/a&gt;: An automation is an action that is activated by a trigger and when an optional condition is met.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/automation/using_blueprints/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Blueprints&lt;/a&gt;: An automation instance that is re-usable.&lt;/li&gt;
  &lt;li&gt;Scenes: A collection of predefined states for one or more devices/entities.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/script/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Scripts&lt;/a&gt;: Is what it says it is, a sequence of commands and/or actions to execute.&lt;/li&gt;
  &lt;li&gt;Areas: A home can have multiple areas, think rooms.
Each area can have zero or more devices/automations/scenes and or scripts assigned to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the advantages of Home Assistant is that is has a vast library of available integrations.
These integrations allow greater flexibility than most integrations that are made for Apple HomeKit, Amazon Alexa or Google Home.
Most integrations are maintained by the open source community and development is quite active.&lt;/p&gt;

&lt;p&gt;In the previous section we installed the Home Assistant, now we are going to add some stuff to it.
Open the dashboard again and in the lower right side menu click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt; link.
This will open the configuration view where we can manage the home.&lt;/p&gt;

&lt;p&gt;First select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Areas&lt;/code&gt; option.
By default some rooms have been added, you can delete the existing ones if desired or add extra ones.
It’s easiest to add all the rooms you want to have available in the Home Assistant web UI and app before we continue.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/areas-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Setting up a areas&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/areas-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;After we have set up the rooms, we want to pick the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integrations&lt;/code&gt; option.
If you have your Home Assistant installation correctly configured, it probably will suggest some integrations based on the results of a network scan.
Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configure&lt;/code&gt; option to add the integration, a wizard will guide you through the process.
For the devices in your home that have not been automatically detected, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Integration&lt;/code&gt; button in the lower left corner and search for a device you have at home that might be supported.
Some often used integrations are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sonos (speakers)&lt;/li&gt;
  &lt;li&gt;Tuya (lights, outlets, sensors)&lt;/li&gt;
  &lt;li&gt;Nest (thermostat, fire alarms)&lt;/li&gt;
  &lt;li&gt;Ikea Tradfri (lights)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like with the auto detected integrations, a wizard will guide you through the setup process.
The Home Assistant website has a &lt;a href=&quot;https://www.home-assistant.io/integrations/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;collection of all published integrations&lt;/a&gt;, you can browse through and search the list.
Each plugin on the site also has all the info to configure it correctly.
During the setup process you should be able to assign each device to a specific area.
You can skip this if wanted and assign a device to an area later (By opening the device and clicking the settings icon and picking the area there).&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/integrations-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Integrations overview&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/integrations-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 23%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/devices-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Devices overview&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/devices-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 19%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/device-info-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Device details&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/device-info-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 34%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/entities-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Entities overview&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/entities-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 20%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;There are integrations which do not provide a setup wizard.
To configure these integrations, a more hands on approach is required:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; link in the left bottom sidebar.
This will open a section.
In there select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add-on Store&lt;/code&gt; in the top menu.&lt;/li&gt;
  &lt;li&gt;In the search field, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File editor&lt;/code&gt;, select the one add-on (it’s an official one) and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt;.
This will install a file editor so we can edit the configuration.yaml file without needing the login on the Home Assistant server itself via SSH.
Once the add-on has been installed, you can find it in the supervisor UI under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt; section.&lt;/li&gt;
  &lt;li&gt;Click on the add-on and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt;, then select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open web ui&lt;/code&gt;.
This will open the file editor.&lt;/li&gt;
  &lt;li&gt;In the top control bar of the editor, click on the folder icon and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;.
Home Assistant uses the YAML format for its configuration.
This is a well known format for most developers and has a very basic indentation based syntax.
A plugin which does not provide a wizard-based setup will probably describe the configuration that needs to be added manually in the documentation.
For more detailed information about editing files and changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;, see &lt;a href=&quot;https://www.home-assistant.io/getting-started/configuration/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the online documentation&lt;/a&gt; of Home Assistant&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/file-editor-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;File editor&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/file-editor-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 100%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;If you go back to the dashboard, you should see all available devices that have been assigned to a room.
You can manage the dashboard manually too but this requires quite a bit of config.
Experiment with this as you see fit.
You can now control any device that is exposed and visible on the dashboard.&lt;/p&gt;

&lt;p&gt;It might also be handy to create a number of scenes.
A scene is a predefined set of states for one or multiple devices.
For example a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Good night&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Good morning&lt;/code&gt; scene could be created to turn on/off lights, lower/raise any blinds or shutters and set any other device to a desired state.
The scenes can then be used in automations to simplify the setup.
To create a new scene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt; link in the left sidebar&lt;/li&gt;
  &lt;li&gt;Select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scenes&lt;/code&gt; entry&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Scene&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Give the scene a name and one or multiple devices with it
You set the state of each device when adding it as you want it to be when the scene is activated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Home Assistant has a &lt;a href=&quot;https://www.home-assistant.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;very extensive documentation&lt;/a&gt;.
Consult it or the community if you get stuck!&lt;/p&gt;

&lt;h2 id=&quot;automations&quot;&gt;Automations&lt;/h2&gt;

&lt;p&gt;While having all the devices visible is nice, a smart home wouldn’t be a smart home if it didn’t involve some automation.
We want to make life easier and having to spend less time controlling our smart devices is one good way to do so.
As with most things that involve automation, it will take some initial time investment to get things right.
Don’t give up if it doesn’t work from the first time!&lt;/p&gt;

&lt;p&gt;Home Assistant has an extensive automation framework that has multiple entities to its disposal for automating things.&lt;/p&gt;

&lt;p&gt;To create a basic automation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt; link in the left sidebar&lt;/li&gt;
  &lt;li&gt;Select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Automations&lt;/code&gt; entry&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Automation&lt;/code&gt; and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start with an empty automation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Give the automation a name and description that tells you what it will do&lt;/li&gt;
  &lt;li&gt;Set the execution mode, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;single&lt;/code&gt; is a good default.
This is mostly used for longer running automations&lt;/li&gt;
  &lt;li&gt;Select a trigger type, for example when another device is controlled, an event is sent&lt;/li&gt;
  &lt;li&gt;If desired add a condition
This will be evaluated after the trigger is fired and before any actions are executed&lt;/li&gt;
  &lt;li&gt;Select one or multiple actions or scenes to control or activate&lt;/li&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also possible to edit the automation using the yaml format.
In the top right click on the three dots and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit as YAML&lt;/code&gt;. 
This will give you an editor to edit the automation in its raw yaml formatting.
You can always test the automation by clicking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute button&lt;/code&gt;.
This will ignore the trigger but test any of the given conditions and execute the specified actions.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/automation-1.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;New automation dialog&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 1&quot; src=&quot;/img/2021-02-10-home-automation-part-2/automation-1.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 21%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/automation-2.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Automation setup triggers&quot;&gt;
        &lt;img alt=&quot;HomeKit devices 2&quot; src=&quot;/img/2021-02-10-home-automation-part-2/automation-2.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 19%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/automation-3.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Automation conditions and actions&quot;&gt;
        &lt;img alt=&quot;HomeKit automations&quot; src=&quot;/img/2021-02-10-home-automation-part-2/automation-3.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 24%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/automation-4.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Automation edit as yaml&quot;&gt;
        &lt;img alt=&quot;HomeKit automations&quot; src=&quot;/img/2021-02-10-home-automation-part-2/automation-4.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 11%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2021-02-10-home-automation-part-2/automation-5.jpeg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Automation yaml editor&quot;&gt;
        &lt;img alt=&quot;HomeKit automations&quot; src=&quot;/img/2021-02-10-home-automation-part-2/automation-5.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 19%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;p&gt;Whilst there are plenty of integrations available for Home Assistant, some might be missing, or you have a very specific use case that is not available yet.
By supporting web hooks, scripts, MQTT,… you can sometimes work around devices and platforms that have no ready to use integration, but sometimes you cannot.&lt;/p&gt;

&lt;p&gt;It is possible by developing your own integrations for Home Assistant.
&lt;a href=&quot;https://developers.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A special website&lt;/a&gt; dedicated to developers is available to get started.&lt;/p&gt;

&lt;p&gt;To start building a custom integration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have experience with Python, YAML and JSON&lt;/li&gt;
  &lt;li&gt;Set up the Home Assistant &lt;a href=&quot;https://developers.home-assistant.io/docs/development_environment&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;dev environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Read through &lt;a href=&quot;https://developers.home-assistant.io/docs/creating_integration_file_structure&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the documentation&lt;/a&gt; first, to prevent any RTFM situations later on.
Everything you need is laid out in separate topics to read through.&lt;/li&gt;
  &lt;li&gt;From the dev environment, execute: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -m script.scaffold integration&lt;/code&gt;.
This will create a new basic integration&lt;/li&gt;
  &lt;li&gt;Look at the &lt;a href=&quot;https://github.com/home-assistant/example-custom-config/tree/master/custom_components/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;example integrations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Test your integration locally by adding an entry to your integrations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;config_dir&amp;gt;/custom_components/custom_integration/__init__.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Home Assistant is a very extensive home automation platform that is relatively easy to set up.
Basic automations are fast to set up and use, while also providing very extensive options for advanced users.
The extensive documentation and lively community make sure that most questions can be answered.
If you are willing to get your hands dirty, creating your own integrations is also an option.
A valid alternative to the home automation systems from Google and Amazon whilst not giving them access to all your home data!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/hassio/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Downloads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Raspberry Pi USB Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.balena.io/etcher/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Balena Etcher image burning tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rufus.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rufus image burning tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Available Integrations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/automation&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Automations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/automation/using_blueprints/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Blueprints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/script/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/getting-started/configuration/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA YAML Config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA General Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Developer sections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/docs/development_environment&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Dev Environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/docs/creating_integration_file_structure&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Custom Integration File Structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/home-assistant/example-custom-config/tree/master/custom_components/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HA Example Integrations Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a senior consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="Internet of Things" /><category term="Smart Tech" /><category term="Home" /><category term="Smart Home" /><category term="Automation" /><category term="Home Automation" /><category term="Home Assistant" /><category term="python" /><category term="yaml" /><category term="plugins" /><category term="devices" /><category term="accessories" /><category term="integrations" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-02-10-home-automation-part-2/banner.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-02-10-home-automation-part-2/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Spring Cloud Circuit Breaker</title><link href="https://ordina-jworks.github.io/spring/2021/02/01/springCloudCircuitBreaker.html" rel="alternate" type="text/html" title="Spring Cloud Circuit Breaker" /><published>2021-02-01T00:00:00+00:00</published><updated>2021-02-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2021/02/01/springCloudCircuitBreaker</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2021/02/01/springCloudCircuitBreaker.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#types-of-implementation&quot; id=&quot;markdown-toc-types-of-implementation&quot;&gt;Types of implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuring-circuit-breakers-with-resilience4j-for-non-reactive-applications&quot; id=&quot;markdown-toc-configuring-circuit-breakers-with-resilience4j-for-non-reactive-applications&quot;&gt;Configuring Circuit Breakers with Resilience4j for non-reactive applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuring-circuit-breakers-with-resilience4j-for-reactive-applications&quot; id=&quot;markdown-toc-configuring-circuit-breakers-with-resilience4j-for-reactive-applications&quot;&gt;Configuring Circuit Breakers with Resilience4J for reactive applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configuring-circuit-breakers-with-spring-retry&quot; id=&quot;markdown-toc-configuring-circuit-breakers-with-spring-retry&quot;&gt;Configuring Circuit Breakers with Spring Retry&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#differences-resilience4j-with-netflix-hystrix-and-spring-retry&quot; id=&quot;markdown-toc-differences-resilience4j-with-netflix-hystrix-and-spring-retry&quot;&gt;Differences Resilience4j with Netflix Hystrix and Spring Retry&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When you detect that an application in your landscape is getting slow or starts failing, a circuit breaker can be used to stop all the communication to that application.
It is basic function is to interrupt the current flow after a fault is detected and when the circuit breaker is reset (manually or automatically), it can resume its normal operation.&lt;/p&gt;

&lt;p&gt;You want to avoid that your end users are hitting high load times. 
That’s why you want to fail fast and have some fallback functionality.&lt;/p&gt;

&lt;p&gt;By making usage of the Circuit Breaker pattern you can let an application continue to operate when a related service fails, preventing the failure from cascading and giving the failing service time to recover.&lt;/p&gt;

&lt;h1 id=&quot;types-of-implementation&quot;&gt;Types of implementation&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://spring.io/projects/spring-cloud-circuitbreaker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Circuit Breaker project&lt;/a&gt; provides an abstraction API for adding circuit breakers to your application. 
There are three supported implementations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Resilience4J&lt;/li&gt;
  &lt;li&gt;Resilience4J Reactive&lt;/li&gt;
  &lt;li&gt;Spring Retry&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;configuring-circuit-breakers-with-resilience4j-for-non-reactive-applications&quot;&gt;Configuring Circuit Breakers with Resilience4j for non-reactive applications&lt;/h1&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;
  &lt;img alt=&quot;Resilience4j&quot; src=&quot;/img/2021-02-01-spring-cloud-circuit-breaker/resilience4j.png&quot; width=&quot;100&quot; height=&quot;100&quot; class=&quot;-1u(medium)&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We set up a Spring Boot application that returns a list of ingredients for making soup.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CircuitBreakerSoupApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ingredientsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Onions, Potatoes, Celery, Carrots&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CircuitBreakerSoupApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re going to run this application locally alongside a client service application, so in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/resources/application.properties&lt;/code&gt;, 
set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.port&lt;/code&gt; so that the CircuitBreakerSoup application service won’t conflict with the client when we start up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ingredients/src/main/resources/application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.port=8090
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now configure an Ingredients service application that will be our front-end to the CircuitBreakerSoup application. 
We’ll be able to view our list there at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/basics&lt;/code&gt;, 
and that reading list will be retrieved from the CircuitBreakerIngredients application.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toCook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8090/recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReadingApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.port&lt;/code&gt; property to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/resources/application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.port=8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We now can access, in a browser, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/basics&lt;/code&gt; endpoint on our Ingredients application, and see our ingredients list. 
Yet, since we rely on the CircuitBreakerSoup application, if anything happens to it, 
or if Ingredients is simply unable to access CircuitBreakerSoup, we’ll have no list and our users will get a nasty HTTP 500 error message.
We want to prevent getting this error. This can be done by using the Circuit breaker.&lt;/p&gt;

&lt;p&gt;Spring Cloud’s Circuit Breaker library provides an implementation of the Circuit Breaker pattern: when we wrap a method call in a circuit breaker, 
Spring Cloud Circuit Breaker watches for failing calls to that method, and if failures build up to a threshold,
Spring Cloud Circuit Breaker opens the circuit so that subsequent calls automatically fail.
While the circuit is open, Spring Cloud Circuit Breaker redirects calls to the method, and they’re passed on to our specified fallback method.&lt;/p&gt;

&lt;p&gt;You need to add the Spring Cloud Circuit Breaker Resilience4J dependency to your application. When using Maven:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-circuitbreaker-resilience4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1.BUILD-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Cloud Circuit Breaker provides an interface called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resilience4JCircuitBreakerFactory&lt;/code&gt; which we can use to create new circuit breakers for our application. 
An implementation of this interface will be auto-configured based on the starter that is on your application’s classpath. 
We will do this by creating a new service that uses this interface to make API calls to the CircuitBreakerSoup application.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.client.circuitbreaker.Resilience4JCircuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReactiveCircuitBreaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readingListCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IngredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Resilience4JCircuitBreakerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8090&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readingListCircuitBreaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ingredientsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readingListCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error making request to ingredients service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Onions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resilience4JCircuitBreakerFactory&lt;/code&gt; has a single method called create we can use to create new circuit breakers. 
Once we have our circuit breaker all we have to do is call run. Run takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and an optional Function. 
The optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function&lt;/code&gt; parameter acts as our fallback if anything goes wrong. 
In our sample here the fallback will just return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; containing the “Onions”.&lt;/p&gt;

&lt;p&gt;With our new service in place, we can update the code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IngredientsApplication&lt;/code&gt; to use this new service.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toCook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ingredientsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReadingApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run both the Ingredients service and the Soup application, and then open a browser to the Ingredients service, at &lt;a href=&quot;https://localhost:8080/basics&quot;&gt;http://localhost:8080/basics&lt;/a&gt;. 
You should see the complete recommended ingredients list: “Onions, Potatoes, Celery, Carrots”.&lt;/p&gt;

&lt;p&gt;Now shut down the Soup application.
Our list source is gone, but thanks to Resilience4J we have a reliable list to stand in.
You should see: “Onions”.&lt;/p&gt;

&lt;h1 id=&quot;configuring-circuit-breakers-with-resilience4j-for-reactive-applications&quot;&gt;Configuring Circuit Breakers with Resilience4J for reactive applications&lt;/h1&gt;

&lt;p&gt;You need to add the Spring Cloud Circuit Breaker Reactor Resilience4J dependency to your application. When using maven:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-circuitbreaker-reactor-resilience4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1.BUILD-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now use the same application as in the previous example.&lt;/p&gt;

&lt;p&gt;Spring Cloud Circuit Breaker provides an interface called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactiveResilience4JCircuitBreakerFactory&lt;/code&gt; which we can use to create new circuit breakers for our application. 
An implementation of this interface will be auto-configured based on the starter that is on your application’s classpath. 
We will do this by creating a new service that uses this interface to make API calls to the CircuitBreakerSoup application.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.client.circuitbreaker.ReactiveResilience4JCircuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReactiveCircuitBreaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readingListCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IngredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReactiveResilience4JCircuitBreakerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8090&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readingListCircuitBreaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ingredientsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readingListCircuitBreaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/recommended&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error making request to ingredients service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Onions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactiveResilience4JCircuitBreakerFactory&lt;/code&gt; has a single method called create we can use to create new circuit breakers. 
Once we have our circuit breaker all we have to do is call run. Run takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flux&lt;/code&gt; and an optional Function. 
The optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function&lt;/code&gt; parameter acts as our fallback if anything goes wrong. 
In our sample here the fallback will just return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mono&lt;/code&gt; containing the “Onions”.&lt;/p&gt;

&lt;p&gt;With our new service in place, we can update the code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IngredientsApplication&lt;/code&gt; to use this new service.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reactor.core.publisher.Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.reactive.function.client.WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IngredientsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/basics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toCook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ingredientsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReadingApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run both the Ingredients service and the Soup application, and then open a browser to the Ingredients service, at &lt;a href=&quot;https://localhost:8080/basics&quot;&gt;http://localhost:8080/basics&lt;/a&gt;. 
You should see the complete recommended ingredients list: “Onions, Potatoes, Celery, Carrots”.&lt;/p&gt;

&lt;p&gt;Now shut down the Soup application.
Our list source is gone, but thanks to Resilience4J we have a reliable list to stand in.
You should see: “Onions”.&lt;/p&gt;

&lt;h1 id=&quot;configuring-circuit-breakers-with-spring-retry&quot;&gt;Configuring Circuit Breakers with Spring Retry&lt;/h1&gt;
&lt;p&gt;Spring Retry depends on AspectJ which is not included in the skeleton project, so we will add below dependency in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.retry&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-retry&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-aspects&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a Rest controller which will call the backend service class where we will simulate the exception and the Spring Retry module will automatically retry.
In the REST Api we will add two optional request parameters.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateretry&lt;/code&gt;: Parameter to simulate the exception scenario, so that Spring can retry.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateretryfallback&lt;/code&gt;: As we are simulating the exception, after retrying a certain amount of time we can either expect a successful backend call or a complete failure.
In this case, we will go to the fallback method to get a hard-coded/error response.
Now this parameter will ensure all the retries will fail and go to fall back path.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.springretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;BackendAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backendAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/retry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateSPringRetryCapability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretryfallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;===============================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inside RestController method..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backendAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBackendResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulateretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretryfallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To enable Spring Retry we need to put one annotation in the Spring Boot Application class. So open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpringRetryApplication&lt;/code&gt; class and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableRetry&lt;/code&gt; at class level.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.springretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.retry.annotation.EnableRetry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;nd&quot;&gt;@EnableRetry&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringRetryApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRetryApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we will create one interface/implementation for calling the external service. 
Here we will not actually call any external service call, but rather simulate the success/failure scenarios by adding some random logic, as below.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.springretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.retry.annotation.Backoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.retry.annotation.Recover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.retry.annotation.Retryable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BackendAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Retryable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteServiceNotAvailableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Backoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBackendResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretryfallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Recover&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBackendResponseFallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Retryable&lt;/code&gt;: This is the main annotation after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableRetry&lt;/code&gt;. 
This annotation tells us that if we get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RemoteServiceNotAvailableException&lt;/code&gt; from the method, we retry three more times before sending the fallback response.&lt;br /&gt;
Also we are introducing a delay of one second in each retry.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Recover&lt;/code&gt;: This fallback annotation indicates that if we don’t get any successful response after three retries, the response will come from this fallback method.
Make sure you pass the expected exception as a parameter or else Spring will have a hard time finding the exact method.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.springretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BackendAdapterImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BackendAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBackendResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simulateretryfallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulateretry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Simulateretry is true, so try to simulate exception scenario.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulateretryfallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoteServiceNotAvailableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot;Don't worry!! Just Simulated for Spring-retry..Must fallback as all retry will get exception!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Random Number : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoteServiceNotAvailableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Don't worry!! Just Simulated for Spring-retry..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello from Remote Backend!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBackendResponseFallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;All retries completed, so Fallback method called!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;All retries completed, so Fallback method called!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Testing the retry methods from Spring Retry:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start with browsing to &lt;a href=&quot;http://localhost:8080/retry?simulateretry=true&amp;amp;simulateretryfallback=false&quot;&gt;http://localhost:8080/retry?simulateretry=true&amp;amp;simulateretryfallback=false&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Based on the parameter, we are expecting exceptions and because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateretryfallback&lt;/code&gt; is false, we are depending on the random logic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random % 2 == 0&lt;/code&gt; –&amp;gt; even random number) that will random give us a successful response while retrying.&lt;/li&gt;
  &lt;li&gt;So once we hit the request in the browser, we might get an exception in the backend and spring will retry the same method multiple times.
The outcome could be a successful response from the backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are a few lines of the log from one of my requests where Spring is retrying.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Console logging
===============================
Inside RestController method..
Simulateretry is true, so try to simulate exception scenario.
Random Number : 1
 
===============================
Inside RestController mathod..
Simulateretry is true, so try to simulate exception scenario.
Random Number : 2
Simulateretry is true, so try to simulate exception scenario.
Random Number : 2
Simulateretry is true, so try to simulate exception scenario.
Random Number : 0
All retries completed, so Fallback method called!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now try with &lt;a href=&quot;http://localhost:8080/retry?simulateretry=true&amp;amp;simulateretryfallback=true&quot;&gt;http://localhost:8080/retry?simulateretry=true&amp;amp;simulateretryfallback=true&lt;/a&gt;, you will get a fallback response after you hit the retry limit.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Console logging
===============================
Inside RestController method..
Simulateretry is true, so try to simulate exception scenario.
Simulateretry is true, so try to simulate exception scenario.
Simulateretry is true, so try to simulate exception scenario.
All retries completed, so Fallback method called!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Retry provides declarative retry support for Spring applications. A subset of the project includes the ability to implement circuit breaker functionality. 
Spring Retry provides a circuit breaker implementation via a combination of its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircuitBreakerRetryPolicy&lt;/code&gt; and a stateful retry. 
All circuit breakers created using Spring Retry will be created using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircuitBreakerRetryPolicy&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultRetryState&lt;/code&gt;. 
Both of these classes can be configured using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpringRetryConfigBuilder&lt;/code&gt;.
To provide a default configuration for all of your circuit breakers create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customizer&lt;/code&gt; bean that is passed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpringRetryCircuitBreakerFactory&lt;/code&gt;. 
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configureDefault&lt;/code&gt; method can be used to provide a default configuration.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRetryCircuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringRetryConfigBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retryPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeoutRetryPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly to providing a default configuration, you can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customizer&lt;/code&gt; bean this is passed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpringRetryCircuitBreakerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRetryCircuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slowCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retryPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleRetryPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to configuring the circuit breaker that is created, you can also customize the circuit breaker after it has been created but before it is returned to the caller. 
To do this you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addRetryTemplateCustomizers&lt;/code&gt; method.
This can be useful for adding event handlers to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RetryTemplate&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRetryCircuitBreakerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slowCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRetryTemplateCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retryTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retryTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetryListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetryContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetryCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetryContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetryCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetryContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetryCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;differences-resilience4j-with-netflix-hystrix-and-spring-retry&quot;&gt;Differences Resilience4j with Netflix Hystrix and Spring Retry&lt;/h2&gt;
&lt;p&gt;Although Resilience4J is inspired by Netflix Hystrix, it is more lightweight and you don’t have to go all-in.
Quoting the official page “Resilience4J is a lightweight fault tolerance library inspired by Netflix Hystrix, but designed for functional programming.”&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Hystrix&quot; src=&quot;/img/2021-02-01-spring-cloud-circuit-breaker/differences.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In 2019 when Spring announced that Hystrix Dashboard would be removed from Spring Cloud 3.1, one year after, Netflix announces that they were putting this project into maintenance mode.&lt;/p&gt;

&lt;p&gt;Resilience4J provides the following core components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RateLimiter&lt;/li&gt;
  &lt;li&gt;TimeLimiter&lt;/li&gt;
  &lt;li&gt;CircuitBreaker&lt;/li&gt;
  &lt;li&gt;Retry&lt;/li&gt;
  &lt;li&gt;Bulkhead&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Lina&quot;, &quot;last_name&quot;=&gt;&quot;Romanelli&quot;, &quot;permalink&quot;=&gt;&quot;/author/lina-romanelli/&quot;, &quot;avatar&quot;=&gt;&quot;lina-romanelli.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;lina.romanelli@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;lina-romanelli&quot;, &quot;bio&quot;=&gt;&quot;Lina Romanelli is a Java Developer with an interest in both back-end and front-end. She likes to learn new technologies to improve herself and work more efficiently.&quot;}</name><email>lina.romanelli@ordina.be</email></author><category term="Spring" /><category term="Spring" /><category term="Spring Boot" /><category term="Cloud" /><category term="Microservices" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-02-01-spring-cloud-circuit-breaker/CircuitBreaker.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-02-01-spring-cloud-circuit-breaker/CircuitBreaker.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Designing REST Services</title><link href="https://ordina-jworks.github.io/architecture/2021/01/04/Designing-REST-services.html" rel="alternate" type="text/html" title="Designing REST Services" /><published>2021-01-04T00:00:00+00:00</published><updated>2021-01-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2021/01/04/Designing-REST-services</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2021/01/04/Designing-REST-services.html">&lt;p&gt;The World Wide Web (WWW) and its underlying architectural style of REpresentational State Transfer (REST), is a hugely successful application platform with an unprecedented adoption scope. 
As such, it will come as no surprise that architects will look at this structure and attempt to distill the factors that made it so successful and apply these to similar systems. 
This is what REST service design attempts to do. 
The book “&lt;a href=&quot;https://www.amazon.co.uk/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;REST in Practice&lt;/a&gt;”, written by Jim Webber, Savas Parastatidis, and Ian Robinson finds its main purpose in the pursuit of these success factors and apply them to software development in general.&lt;/p&gt;

&lt;p&gt;With REST (based on the doctoral work of Roy Fielding) as its weapon of choice, it seeks to position this style as a viable (and even better?) alternative for Classic SOA. 
In its purest essence, REST is a state machine, tracking progression within a workflow by transitioning from one state to another. 
This state machine has one caveat though in that it is not known in advance how many different states there are. 
However, it displays numerous admirable qualities such as scalability, loose coupling and functional composition across service boundaries.&lt;/p&gt;

&lt;p&gt;The book pits HTTP(S) against SOAP in the battle of protocols when implementing web services. 
Where SOAP only uses HTTP(S) as its transport channel, REST embraces all of the principles of the protocol. 
In order to assess why REST is such a good fit for service design, let’s review what a web service is all about.&lt;br /&gt;
Web services are software components that are developed to expose business capabilities. 
To do so, they are comprised of the following elements (available through the provided contract):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Operations: A set of exportable operation signatures that can be accessed by the consumer of the service.&lt;/li&gt;
  &lt;li&gt;Document Schemas: A definition of the data types that can be exchanged with the service through the provided interfaces.&lt;/li&gt;
  &lt;li&gt;Non-Functional Specifications:
    &lt;ul&gt;
      &lt;li&gt;Conversation Specifics: Indication on how information can be exchanged with the services, such as request-response or fire-and-forget.&lt;/li&gt;
      &lt;li&gt;Quality-of-Service Characteristics (QoS): Indicators for QoS characteristics such as availability, latency and throughput.&lt;/li&gt;
      &lt;li&gt;Policy Specifics: Requirements specifications for how to interact with the service. These are stipulations on for example security and transactional contexts.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first five chapters of the book deal mainly in building a transformative journey for an organization to shift to using REST services according to the Richardson’s maturity model. 
The model starts from a very basic implementation not following any of the REST standards up to a full implementation of services with the principle of “Hypermedia As The Engine Of Application State” (HATEOS). 
The remaining chapters deal with how to address any non-functional specifications these services must cover. 
In these remaining chapters there is a brief intermezzo where the authors delve into the ATOM format as a substitute for transferring data and a means for event driven service design. 
As these chapters are a bit the odd ones out, this synopsis will not delve into them too deeply.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-01-04-Designing-REST-services/maturitymodel.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Richardson’s Maturity Model&lt;/p&gt;

&lt;h2 id=&quot;level-1---resources&quot;&gt;Level 1 - Resources&lt;/h2&gt;

&lt;p&gt;In order to clarify the success factors of the WWW as a platform for services on a global scale, the book sketches a high-level overview of the architecture behind it, and the salient points for the REST architecture. 
Formalized by the World Wide Web Consortium (W3C), the specification can be found &lt;a href=&quot;https://www.w3.org/TR/webarch/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;. 
Services are exposing resources through Uniform Resource Identifiers (URI). 
Their relation is many-to-one: A resource can be identified by more than one URI, but any URI will only point to one resource, making it addressable and accessible for manipulation via HTTP.
This endpoint will follow a specific structure: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;protocol&amp;gt;://&amp;lt;host&amp;gt;/&amp;lt;resource&amp;gt;/&amp;lt;identifier&amp;gt;&lt;/code&gt; with the identifier piece being optional. 
To fetch consultant Peter De Kinder from the service would look something like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    https://www.bestitpeople.com/consultant/peterdekinder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Web does not differentiate between resource representations. 
Resources can thus have multiple representations. 
These representations are views encoded in a specific format (Json, XML, MP3…) to match the needs of the consumers through content negotiation (see further down).
This consumer friendliness does not relinquish control on how to represent or modify these resources. This is still the purview of the services that control them. 
The encapsulation of the resources support isolation and allow for independent evolution of functionality in order to preserve loose coupling, one of the key aspects of the Web. 
One consideration to make is that you should name your resources in such a way that they are intuitive: They must indicate the intent of the service as well as already provide a rudimentary level of documentation.&lt;/p&gt;

&lt;p&gt;As stated earlier: HTTP is the spearpoint for this architecture, and this protocol stacks on top of the TCP/IP protocols and a series of WANs and LANs for its communication. 
These networks are hosted on a set of geographically widespread and commoditized web servers, proxies, web caches and Content Delivery Networks (CDN) that host the resources and manage traffic flow without intricate canonical data models or middleware solutions.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-01-04-Designing-REST-services/http.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loose coupling in combination with the caching possibilities of the network allow for the needed scalability asked from services and application in today’s software development. 
But since the Web doesn’t try to incorporate QoS guaranties and other non-functional specifications, there is a need for fault tolerance in the services design, as the Web will always try to retrieve resources, even if they are nonexistent.&lt;/p&gt;

&lt;h2 id=&quot;level-2---http-verbs&quot;&gt;Level 2 - HTTP Verbs&lt;/h2&gt;

&lt;p&gt;The manipulation through HTTP is done using the verbs that are supported in the protocol: GET, POST, PUT, DELETE, OPTIONS, HEAD, TRACE, CONNECT and the somewhat “newer” PATCH. 
These verbs form a uniform interface with widely accepted semantics that cover almost all possible requirements for distributed systems. 
Add to this a set of response codes that can be returned together with a payload of which the most famous is the 404 – Not Found.&lt;/p&gt;

&lt;p&gt;Combined with employing HTTP and URIs for this implementation, we are compliant with level two of Richardson’s maturity model. 
In addition to this we need a way of communicating and handling failures that might occur during the execution of a transaction.
For example: If we take a standard ordering system where the transactions manipulate said order (our resource), we get the following contract:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th style=&quot;width:15%&quot;&gt;VERB&lt;/th&gt;&lt;th style=&quot;width:15%&quot;&gt;URI&lt;/th&gt;&lt;th style=&quot;width:15%&quot;&gt;STATUS&lt;/th&gt;&lt;th style=&quot;width:55%&quot;&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt;&lt;td&gt;/order&lt;/td&gt;&lt;td&gt;201&lt;/td&gt;&lt;td&gt;A new order is created, and the location header returns the new order’s URI. The complete order needs to be provided.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;409&lt;/td&gt;&lt;td&gt;The creation of the order conflicts with the current state of another resource and is rejected. For example: The order being created already exists.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;/order/{id}&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;td&gt;Returns the current state of the Order identified by the URI.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;404&lt;/td&gt;&lt;td&gt;Returns a status code indicating the requested resource cannot be found by the service.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;td&gt;/order/{id}&lt;/td&gt;&lt;td&gt;200/204&lt;/td&gt;&lt;td&gt;Updates the Order identified by the URI with new information. Only a partial order is needed (with all fields that need to change). The difference between the 200 and 204 response is just aesthetic and depends on the choice of the organization.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;404&lt;/td&gt;&lt;td&gt;Returns a status code indicating the requested resource cannot be found by the service.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;409&lt;/td&gt;&lt;td&gt;The update has created a conflict with the current state of the order and is rejected.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;412&lt;/td&gt;&lt;td&gt;The update is attempting to update a resource that has been modified since it was last fetched. This signals a concurrency issue.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;&lt;td&gt;/order/{id}&lt;/td&gt;&lt;td&gt;200/204&lt;/td&gt;&lt;td&gt;Logically removes the order identified by the URI, and in the case of a 200 response, we could return the final state of the order.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Some response statuses can be generated by all of the above HTTP verbs:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th style=&quot;width:20%&quot;&gt;STATUS&lt;/th&gt;&lt;th style=&quot;width:80%&quot;&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;400&lt;/td&gt;&lt;td&gt;A malformed request was sent to the service.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;401&lt;/td&gt;&lt;td&gt;Unauthorized Access. The party trying to act in a transaction does not have the proper authorization to perform the requested actions.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;405&lt;/td&gt;&lt;td&gt;Method not allowed. The execution of this verb is not allowed on the current resource type (in our case order). In case of a DELETE this could also mean that the resource is currently in a state that doesn’t allow it to be deleted.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;500&lt;/td&gt;&lt;td&gt;Internal Server Error when the service is unavailable or internally crashing without possible recovery.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;&lt;u&gt;Sidebar: Singular versus Plural&lt;/u&gt;&lt;br /&gt;
This book identifies resources using their singular noun in the URI. 
Many service providers will use the plural noun instead. 
There are many philosophical debates to be had whether to use singular or plural. 
For example: Amazon and Google use plural in their API. 
There is no clear reason or advantage for either to be preferred over the other, so in my opinion it is largely up to the designer(s) to choose as long as they remain consistent across the many components within the organization. 
The only vaguely logical argument I found was that there are apparently more words in the English language, called mass nouns, that don’t have a plural form (such as “luggage”) than there are words that don’t have a singular form (such as “clothes”). 
Bear in mind that I didn’t perform any due diligence of this argument, so the author of this reasoning might just be wrong about this.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;When designing and implementing services we always need to consider whether calling these services should be safe and/or idempotent. 
Safe services have no server-side side effects that the consumer of the service can be held accountable for. 
These service calls will not trigger any effects that will change the state of resources. 
Idempotency is the fact that a service call can be done multiple times without yielding a different result in any of its calls. 
Each identical call will result in an identical response. 
The GET of a resource is a call that is considered both safe and idempotent. 
The service call will return the same result no matter how many times it is called, and it will not alter the state of the resource it is requesting.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP Verb&lt;/th&gt;
      &lt;th&gt;Safe&lt;/th&gt;
      &lt;th&gt;Idempotent&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Other verbs (all both safe and idempotent) that are commonly enabled on REST services are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HEAD: Returns only the HTTP headers of the request in order to determine the context of the resource.&lt;/li&gt;
  &lt;li&gt;OPTIONS: Queries the endpoint for the possibilities it offers. This verb is typically also used by browsers as a preflight request to determine whether Cross-Origin Resource Sharing (CORS) is allowed&lt;/li&gt;
  &lt;li&gt;TRACE: Allows for a loop-back test with debug information. This method is not included in default authorization checking, and should be disabled in production, as it can be a security risk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The book concludes its elaboration on the second level of Richardson’s Maturity with an overview of some of the more popular technologies and frameworks and how they tackle the creation of a consumer for the services defined with REST. 
These are rather straightforward for those developers that routinely use them, so we will not go deeper into them.&lt;/p&gt;

&lt;h2 id=&quot;level-3---hypermedia-controls&quot;&gt;Level 3 - Hypermedia Controls&lt;/h2&gt;

&lt;p&gt;Hypermedia systems extend the resource state that is being manipulated by the services with additional characteristics. 
The resource state becomes a combination of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The values of the individual variables that make up the resource&lt;/li&gt;
  &lt;li&gt;Links to related resources&lt;/li&gt;
  &lt;li&gt;Links to manipulate the current resource (creating, updating, deleting…)&lt;/li&gt;
  &lt;li&gt;Evaluation results of business rules encompassing the resource and other related resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The links mentioned make up a domain application protocol (DAP) that advertises all possible interactions with the resource. 
The consumers of this service use these published interactions to discover how to interact with the resource. 
Hyperlinks are the weapon of choice when adding such links to interactions. 
A DAP also consists of two other key components: Media Types (as mentioned before), and HTTP Idioms (which make up the HTTP uniform interface: verbs, standard headers, error codes…). 
In short: Link relation values tell why the consumer should activate a hypermedia control by stating the role of the linked resource, the media type tells the consumer what it can expect as the response of a link, and the idioms manipulate the resources represented by the links.&lt;/p&gt;

&lt;p&gt;The resource state can be in any format as REST’s hypermedia tenet does not force any set media type. 
IANA is the official registry of MIME media types and maintains a &lt;a href=&quot;http://www.iana.org/assignments/media-types/media-types.xhtml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;list of all the universally accepted MIME types&lt;/a&gt;.
The resource should indicate in the Content-Type header of its responses the ideal way of interpreting it. 
Similarly, the Accept header is part of the HTTP spec for requests. 
In this header the consumer can indicate which media type it wishes to receive. 
Based on these two headers, a system of content negotiation is set up where the request of a consumer can be matched to the proper implementation to return the desired result and how it is conveyed.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-01-04-Designing-REST-services/mediatypes.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The HTTP specification allows for the definition of custom media types as well. 
This is used to inform the consumer about the result to be expected in greater detail. 
Where “application/xml” informs the consumer which format to expect, it doesn’t give any insight on which data to expect. 
This can be done by creating a custom media type in the vendor range (vnd). 
This type adheres to the format:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;media type&amp;gt;/vnd.&amp;lt;owner of custom media type&amp;gt;.&amp;lt;type of data&amp;gt;+&amp;lt;media suffix&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example: If the return of a service would list the detail of a consultant for the company “Best IT People” in XML format, you would get the following media type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/vnd.bestitpeople.consultant+xml&lt;/code&gt;. 
Beware however not to create a set of customer media types that map directly onto the representation formats in the code of the service. 
That would create unnecessary tight coupling.&lt;/p&gt;

&lt;p&gt;By utilizing the HTTP specs, URIs and hypermedia, REST allows for scalability, uniformity, performance, and encapsulation when designing a distributed system. 
These conventions guide the service design, and thus have an impact on how the service will be exposed to the outside world. 
This exposure is what we call the service contract. 
A service contract informs the consumers of the service about the format of the resource (media type), its processing model (protocol) and the links to related resources. 
The contract also shields the consumer from the implementation details, decreasing the coupling between the service and its consumers, and at the same time heightening security through obfuscation. 
This loose coupling is further enhanced by applying Postel’s Law: “Be conservative in what you do, be liberal in what you accept from others”, also known as the robustness principle. 
An example of how to go about implementing this law, is the Tolerant Reader pattern.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-01-04-Designing-REST-services/servicecontract.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although the service contract has these conventions as a foundation to build upon, there is still a need for some thought to be put into the data modeling of the resources that will be exposed. 
The decisions on how to divvy up the data assets that make up the business context into exposable resources can be a daunting endeavor, and numerous design factors should be taken into account based on the context in which this services and their contract are designed.&lt;/p&gt;

&lt;p&gt;However, there are some recurring factors influencing the size of the resource representation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Atomicity: Composite resources that share blocks of data can cause the other resource to enter an inconsistent state.&lt;/li&gt;
  &lt;li&gt;Importance of the Information: The optionality of certain components could indicate them belonging to a separate resource representation.&lt;/li&gt;
  &lt;li&gt;Performance and Scalability: the size of the resource and the frequency with which it is accessed, determines how long it takes for it to be passed over the network.&lt;/li&gt;
  &lt;li&gt;Cacheability: This is greatly enhanced if none of the components of the resource changed at a different frequency from the others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Designing the contract before implementing the service is what is called the contract-first approach. 
This approach might seem like a lot of design/thinking upfront, and it will require additional development when exposing legacy code as a service or implementing retrofits, but despite this additional preparatory work, it does grant several benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implementation teams that will make use of the service can work in parallel with the service development team.&lt;/li&gt;
  &lt;li&gt;The contract is known before starting development so all teams have an idea of what to expect from the service. This can give a healthy discussion between provider and consumer teams on how to tweak the service an get ahead of mismatches in expectations.&lt;/li&gt;
  &lt;li&gt;An existing contract allows for code generation of stubs and proxies of the service to test for connectivity and availability of the service that will be developed.&lt;/li&gt;
  &lt;li&gt;Contract-first helps with keeping the contract and the underlying implementation loosely coupled as the contract is not based on the code that is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are concepts that I like from this level, such as the use of vendor-specific media types and contract-first design, but mostly this level carries with it a lot of added complexity for a return that only becomes tangible when working with experienced development teams and an organization with sufficient maturity in the field of service design. 
This is the main reason that level 2 services are the most common.
And nothing stops us from cherry picking these concepts and applying them to our level 2 services.&lt;/p&gt;

&lt;h2 id=&quot;non-functional-characteristics&quot;&gt;Non-Functional Characteristics&lt;/h2&gt;

&lt;p&gt;There are several considerations that weigh on the design and implementation of services that are of a more technical nature. 
Some of them have already been mentioned, but there is a selection of these characteristics that are worked out in the book, each with its proper impact on the scalability of the services.&lt;/p&gt;

&lt;h3 id=&quot;caching&quot;&gt;Caching&lt;/h3&gt;

&lt;p&gt;Caching can be done at numerous points along the request/response chain of a service call. 
When a resource is requested, and one of the intermediate components has a version of this resource, they will provide it back. 
Otherwise the service call will reach the origin service and collect the real-time data. 
The origin service should provide the intermediate components the rules for when and how to cache as well as how long the data would be considered “fresh”. 
Evidently, the closer the caching component is to the consumer in the request/response chain, the less expensive (reduction of bandwidth and of load on the origin service) the call. 
The other benefits of caching are a reduced latency (a quicker roundtrip time) and a reduced impact of possible network failures.&lt;/p&gt;

&lt;p&gt;While there are benefits to caching, there are also reasons not to do so. 
In these situations, caching will harm more than it benefits, or might simply not be allowed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If the GET of the resource generates side effects from being accessed (for example a counter system that limits how many times the resource may be requested by consumers or some early bird system that benefits the first so many consumers), the cache would prevent these side effects.&lt;/li&gt;
  &lt;li&gt;When the system in place doesn’t tolerate any latency in data to be retrieved and we need to be sure that the data received is real-time (for example a heart monitor in ICU wards).&lt;/li&gt;
  &lt;li&gt;When caching is not allowed for regulatory reasons or security/privacy risks.&lt;/li&gt;
  &lt;li&gt;When the frequency with which the data changes is so high and the period that the data is not stale is so small that caching would never trigger.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from all the caching that can be added on an applicative level, there are already several components capable of caching that are native to the infrastructure of the web:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Local Cache: A store of cached representations from many origin servers at the behest of a single consumer, either in memory or persisted.&lt;/li&gt;
  &lt;li&gt;Proxy Cache: A server that stores representations from many origin servers to many different consumers. This component can reside either outside or inside the corporate firewall.&lt;/li&gt;
  &lt;li&gt;Reverse Proxy: A component that is a type of proxy server that retrieves resources from a single origin server on behalf of any number of consumers. It focuses mainly on load balancing, HTTP acceleration and security features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The caching components are instructed on how to handle the caching of the resources they hold by using these specific HTTP response headers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Expires: Indicates the length of the period the cached resource can be used before being considered stale.&lt;/li&gt;
  &lt;li&gt;Cache-Control: This header can also be provided by the consumer of the service in the request. It allows for a set of comma-separated directives on how to handle the caching of the resource:
    &lt;ul&gt;
      &lt;li&gt;Request-only directives:
        &lt;ul&gt;
          &lt;li&gt;max-stale[=&amp;lt;seconds&amp;gt;]: Indicates the client will accept a stale response. An optional value in seconds indicates the upper limit of staleness the client will accept.&lt;/li&gt;
          &lt;li&gt;min-fresh=&amp;lt;seconds&amp;gt;: Indicates the client wants a response that will still be fresh for at least the specified number of seconds.&lt;/li&gt;
          &lt;li&gt;only-if-cached: The cache should either respond using a stored response, or respond with a 504 status code if no cached version of the resource is available.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Response-only directives:
        &lt;ul&gt;
          &lt;li&gt;must-revalidate: Indicates that once a resource becomes stale, caches must not use their stale copy without successful validation on the origin server.&lt;/li&gt;
          &lt;li&gt;public: The response may be stored by any cache, even if the response is normally non-cacheable.&lt;/li&gt;
          &lt;li&gt;private: The response may be stored only by a browser’s cache, even if the response is normally non-cacheable.&lt;/li&gt;
          &lt;li&gt;proxy-revalidate: Like must-revalidate, but only for shared caches. Ignored by private caches.&lt;/li&gt;
          &lt;li&gt;s-maxage=&amp;lt;seconds&amp;gt;: Overrides max-age or the Expires header, but only for shared caches (e.g., proxies). Ignored by private caches.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Generic directives:
        &lt;ul&gt;
          &lt;li&gt;max-age=&amp;lt;seconds&amp;gt;: The maximum amount of time a resource is considered fresh. Unlike Expires, this directive is relative to the time of the request.&lt;/li&gt;
          &lt;li&gt;no-cache: The response may be stored by any cache, even if the response is normally non-cacheable. However, the stored response MUST always go through validation with the origin server first before using it&lt;/li&gt;
          &lt;li&gt;no-transform: An intermediate cache or proxy cannot edit the response body, Content-Encoding, Content-Range, or Content-Type.&lt;/li&gt;
          &lt;li&gt;no-store: The response may not be stored in any cache. Note that this will not prevent a valid pre-existing cached response being returned.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Extended directives (not part of the official HTTP standard, but universally used):
        &lt;ul&gt;
          &lt;li&gt;Immutable: Indicates that the response body will not change over time.&lt;/li&gt;
          &lt;li&gt;stale-while-revalidate=&amp;lt;seconds&amp;gt;: Indicates the client will accept a stale response, while asynchronously checking in the background for a fresh one. The seconds value indicates how long the client will accept a stale response.&lt;/li&gt;
          &lt;li&gt;stale-if-error=&amp;lt;seconds&amp;gt;: Indicates the client will accept a stale response if the check for a fresh one fails. The seconds value indicates how long the client will accept the stale response after the initial expiration.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ETag: An opaque string token that is associated with the resource to verify its state. This can be used to determine whether or not a resource has changed since the last time it was requested. Therefor this will also be used in concurrency tests.&lt;/li&gt;
  &lt;li&gt;Last-Modified: The date at which the resource was modified the last time before this request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consistency&quot;&gt;Consistency&lt;/h3&gt;

&lt;p&gt;It is important that data is kept consistent across various manipulations, especially when it is being exposed to and manipulated by the consumers of stateless services. 
One of the key risks that threaten this consistency is concurrent writes to the same resource. 
The scenario is straightforward. Consumer A reads the current resource. Consumer B reads the same resource. 
Consumer B updates the resource, followed by consumer A updating the resource. 
In this scenario, consumer A never saw the changes that consumer B made, and more than likely erases them by updating the resource.&lt;/p&gt;

&lt;p&gt;One way to tackle this scenario is to introduce conditional updates. 
The idea is that when a consumer reads a certain resource, it gets passed a unique representation of this resource in the “Etag”-header (for example a MD5-hash of the non-transient fields of the resource). 
Each time any consumer is updating a resource, the consumer needs to provide this value in the “If-Match”-header. 
The idea is that when the update is processed by the service, it checks whether the content of the header still matches the representation of the resource. 
If it is still the same, it will update the resource and return the result (HTTP 200 OK status). 
If between the read and update of the resource by this consumer, another consumer modified the resource, the representation value will have changed, and the update is denied (HTTP 412 PRECONDITION FAILED status). 
It is then up to the consumer to fetch an up to date resource and decide whether or not still to process its changes. 
The “If-None-Match”-header checks whether a resource exists with the representation, and if not, proceed with the update. 
This could be used to prevent the creation of duplicate resources in the database.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2021-01-04-Designing-REST-services/etag.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are also headers based on the modification date of a resource for indicating to the service that it should behave in a conditional way. 
Personally, I feel that this adds the additional complication of syncing the date between the service and its consumers, and that using the ETag is more resilient:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The “If-Modified-Since” header only executes when the resource has been modified since the given date. This header works with the last-modified header instead of the ETag.&lt;/li&gt;
  &lt;li&gt;The “If-Unmodified-Since” header is the inverse of the “If-Modified-Since” header.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;There is an entire chapter dedicated to security in the book. 
However, since this is one of those areas of expertise that has rapid evolutions, the contents of this book (written in 2015) are somewhat dated. 
It evaluates authentication and authorization mechanisms based on four characteristics associated with secure distributed systems: Confidentiality (how well data can be kept private), Integrity (how to prevent unlawful changes to data), Identity (how to identify parties involved in the transactions) and Trust (what to allow the previously mentioned parties in transactions).&lt;/p&gt;

&lt;p&gt;The book offers up the following mechanisms to achieve these characteristics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basic Authentication: a very straightforward username/password combination passed along as a base64-encoded string in the request by using the Authorization header. Too easily intercepted and decoded to be useful in production systems.&lt;/li&gt;
  &lt;li&gt;Digest Authentication: A challenge/response exchange that happens in reaction to sending a request. The initial request is resent with additional information stored in the various security headers (qop, nonce, opaque, username, uri, nc, cnonce, response). This mechanism is safer than Basic Authentication, but still falls prey to man-in-the-middle attacks.&lt;/li&gt;
  &lt;li&gt;Transport-Level Encryption: This application of HTTPS for service exchange remains up till today a gold standard in security. One caveat is that this does not affect the payload, so this payload is still vulnerable at the termination point of the HTTPS connection. HTTPS is more expensive than HTTP in terms of performance, and does hamper caching in the network components, most of the time this tradeoff is warranted.&lt;/li&gt;
  &lt;li&gt;OpenID and OAuth: Since the book describes version 1 of Oauth, this part of the book is outdated, and is only of interest as a historical perspective. For an elaboration on OAUTH2, see &lt;a href=&quot;https://evolute.be/thoughts/secsocial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my blog post&lt;/a&gt; on the topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;web-semantics&quot;&gt;Web Semantics&lt;/h2&gt;

&lt;p&gt;There is a chapter dedicated to Web Semantics. 
This concept can be characterized as the meaning behind data and information, and stems from a need to make sure that all parties involved in the management of a resource have the same interpretation for it. 
This shared interpretation is then formalized in a	contract (using frameworks such as OWL or RDF), making the resource meaningful for both people and consuming services. 
It mostly deals with the difference between &lt;a href=&quot;https://evolute.be/thoughts/betweenlines.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;data, information and knowledge&lt;/a&gt; in terms of structure (relationship between different information pieces that make up a resource) and representation (in which format to expose it).&lt;/p&gt;

&lt;p&gt;Web Semantics was very popular for a time, but as I have described in a &lt;a href=&quot;https://evolute.be/thoughts/semantics.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;previous blog post&lt;/a&gt;, for me it no longer bears much relevance. 
That being said, remnants of the technologies can still be found in for example the &lt;a href=&quot;https://developer.twitter.com/en/docs/twitter-for-websites/cards/guides/getting-started&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;twitter card headers&lt;/a&gt; used to aptly represent website links on the twitter feed. 
These metatags use RDF as their foundation.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The WS-* protocol stack might still be considered more developed, but this comes with an increased complexity that hinders its uses. 
It still has some legacy that it cannot shed, such as for example the disregard of encapsulation in exposing its internal workings via the WSDL. 
But it does come with several strong points to cover the non-functional needs of service design. 
Not in the least its security features that come with a full suite of cryptographic techniques provides an end-to-end mechanism or transferring information.
And we cannot forget that at this time its adoption by organizations is still very widespread.&lt;/p&gt;

&lt;p&gt;However, REST has gained substantial maturity on these topics as evidenced by this book and has since become the new favorite. 
REST isn’t a perfect fit for every situation, as no solution ever is. 
And its distributed nature does necessitate strict monitoring of performance and other metrics such as mean time between failures. 
But the familiarity with the World Wide Web architecture carries enough weight to add an intuitive aspect to its development and use.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="architecture" /><category term="software architecture" /><category term="microservices" /><category term="integration" /><category term="software design" /><summary type="html">The World Wide Web (WWW) and its underlying architectural style of REpresentational State Transfer (REST), is a hugely successful application platform with an unprecedented adoption scope. As such, it will come as no surprise that architects will look at this structure and attempt to distill the factors that made it so successful and apply these to similar systems. This is what REST service design attempts to do. The book “REST in Practice”, written by Jim Webber, Savas Parastatidis, and Ian Robinson finds its main purpose in the pursuit of these success factors and apply them to software development in general.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2021-01-04-Designing-REST-services/servicedesign.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2021-01-04-Designing-REST-services/servicedesign.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a custom YOLOv5 Ordina logo detector</title><link href="https://ordina-jworks.github.io/iot/2020/12/17/ordina-logo-detector.html" rel="alternate" type="text/html" title="Building a custom YOLOv5 Ordina logo detector" /><published>2020-12-17T00:00:00+00:00</published><updated>2020-12-17T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2020/12/17/ordina-logo-detector</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2020/12/17/ordina-logo-detector.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yolo-V5&quot;&gt;YoloV5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-dataset&quot;&gt;Creating a dataset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roboflow&quot;&gt;RoboFlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#training-the-model&quot;&gt;Training the model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing-the-model&quot;&gt;Testing the model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Machine learning is here to stay.
It’s also a must look into type of thing for a lot of people.
However making a fully custom model to do a specific task is very hard.
This blog post will go into detail on how to take a prebuilt/trained model and use it for our own purpose.
We will take the YOLOv5 model and retrain it with a fully custom dataset to detect the company logo.
Read on down below and follow along for the ride.&lt;/p&gt;

&lt;p&gt;Please note that if you want to test this by yourself it is advised to have a decent computer with an NVidia CUDA capable GPU or use an online platform like Google &lt;a href=&quot;https://colab.research.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Colab&lt;/a&gt; which will give you a free cloud GPU to test things with.&lt;/p&gt;

&lt;h2 id=&quot;yolo-v5&quot;&gt;Yolo V5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ultralytics/yolov5&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLOv5&lt;/a&gt; is the fifth mayor iteration for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;You Only Look Once&lt;/code&gt; model.
It’s a very high performing and popular model for performing object detection.
The model is fully open source and is trained on the CoCo dataset and can perform detections of about 80 classes of objects.
It’s also relatively easy to retrain the model with custom data so it can perform detection on other things than the &lt;a href=&quot;https://cocodataset.org/#home&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CoCo dataset&lt;/a&gt; &amp;amp; objects.&lt;/p&gt;

&lt;p&gt;For iOS users there is an app available &lt;a href=&quot;https://apps.apple.com/app/id1452689527&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on the app store&lt;/a&gt; that allows you to use the YoloV5 model in realtime with the camera your device.
The speed and accuracy is quite impressive, make sure to give it a try!&lt;/p&gt;

&lt;p&gt;The model has different sizes that can be used, each specific size has pros and cons.
The larger models will perform better but require a lot more compute power.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;YoloV5 model sizes&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/v5-model-sizes.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this example we will be retraining the large model, since I have a decent NVidia GPU I can use.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-dataset&quot;&gt;Creating a dataset&lt;/h2&gt;

&lt;p&gt;A good dataset is extremely important when (re)training a model.
It has an immense effect on the training process.&lt;/p&gt;

&lt;p&gt;For our custom logo detection I’ve made about 100 photos of the Ordina logo in different forms and under different conditions.
It’s very important that there are a lot of different images and most single images should have different versions with slight alterations.
This can be a very time consuming thing to do!
As we will later see there are tools to help with this!&lt;/p&gt;

&lt;p&gt;Making and gathering photos with the logo is only one part of the preparations that need to be done.
The second part can be even more tedious but is quintessential to the training process.
The photos need to be labelled.
This means creating a file that defines where the logos are located in the photo.&lt;/p&gt;

&lt;p&gt;This can be done by hand, but it’s easier to use a decent tool, one of the tools that can do this is &lt;a href=&quot;https://github.com/tzutalin/labelImg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LabelImg&lt;/a&gt;.
An open source tool for annotating images.
It is a python program that can be run on most operating systems.&lt;/p&gt;

&lt;p&gt;Annotating is simple yet time consuming.
We run the program, select the folder where all the images are stored and manually go over each photo, drawing a bounding box over each Ordina logo and saving the data before moving on to the next photo.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/label-img.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 1&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/label-img.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 42%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/labelimg-done.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 2&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/labelimg-done.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 46%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;roboflow&quot;&gt;RoboFlow&lt;/h2&gt;

&lt;p&gt;Once the data is labelled we want to use it to our advantage.
A single photo can be skewed, blurred, pixelation added, hue moved (preferably a combination of all).
This allows a single photo to become many more versions.&lt;/p&gt;

&lt;p&gt;The manual method for doing this could involve using Photoshop macros on all the photos, then adding the annotations for the newly generated files.
There are however tools that manage this for us.
One of these tools is &lt;a href=&quot;https://app.roboflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RoboFlow&lt;/a&gt;, an online dataset management system.
RoboFlow allows you to upload images and add “augmentations” to the images.
These augmentations are combined and like in our example we can create 226 images out of 94 base images, not bad.
This is greatly beneficial in preventing the model from &lt;a href=&quot;https://en.wikipedia.org/wiki/Overfitting&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;overfitting&lt;/a&gt; when used correctly.
The free tier only allows a maximum of 3 augmentations per image so a large starting set of images is recommended.
The pictures in the dataset are subdivided into three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Training: Used for training the model&lt;/li&gt;
  &lt;li&gt;Validation: Used for hyperparameter tuning during the training process&lt;/li&gt;
  &lt;li&gt;Testing: Used to evaluate the model in each epoch&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/roboflow-upload-dataset.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 1&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/roboflow-upload-dataset.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 27%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/roboflow-test-split.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 2&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/roboflow-test-split.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 21%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/add_augmentation.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 3&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/add_augmentation.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 13%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/dataset-overview.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 3&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/dataset-overview.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 26%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Once we have added the photos and the augmentations we can generate a version of the dataset and use the link to the dataset zip file to retrain the model.
It’s very important to select the correct export format, being YOLOv5 PyTorch.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/download-dataset.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 1&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/download-dataset.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 50%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/link-to-dataset.jpeg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 2&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/link-to-dataset.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 42%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;training-the-model&quot;&gt;Training the model&lt;/h2&gt;

&lt;p&gt;For training the model I used the &lt;a href=&quot;https://blog.roboflow.com/how-to-train-yolov5-on-a-custom-dataset/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;excellent blog post&lt;/a&gt; on the RoboFlow blog as a starting point, combined with the “Train-Custom-Data” section on the YoloV5 github wiki.
I did use Google Colab for the first try and it does work, be it slower than on my personal machine.&lt;/p&gt;

&lt;p&gt;Doing the training locally requires python3 and pip to be installed, virtualenv to be setup and the correct NVidia drivers to be loaded (at least on Debian).
I created a new folder in which I cloned the YOLOv5 repo and created a new python virtual environment and started Jupyter notebook.
The &lt;a href=&quot;https://colab.research.google.com/drive/1gDZ2xcTOgR39tGGs-EZ6i3RTs16wmzZQ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RoboFlow Google Colab&lt;/a&gt; is a great place to start.
I copied all the steps over, making edits to allow it to run on my local machine.
If you want to test this too, just copy the Google Colab file to your own Google Drive and start it from there.
Google will even give you a cloud based GPU to use, for free!&lt;/p&gt;

&lt;p&gt;The retraining process contains these main steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clone the YoloV5 repo, install any dependencies&lt;/li&gt;
  &lt;li&gt;Download the dataset zip file and extract its contents&lt;/li&gt;
  &lt;li&gt;Process the data generated in the dataset, choosing the size of the Yolo model to retrain and setting the number of classes that are in the dataset&lt;/li&gt;
  &lt;li&gt;Retrain the model by using the ‘train.py’ file in the YOLOv5 repo&lt;/li&gt;
  &lt;li&gt;Evaluate the training progress by using TensorBoard&lt;/li&gt;
  &lt;li&gt;Save the best &amp;amp; latest model weights to a folder for later use&lt;/li&gt;
  &lt;li&gt;Perform some own detection on previously unseen images&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-the-model&quot;&gt;Testing the model&lt;/h2&gt;

&lt;p&gt;The last step after the model has been trained is to see how well it does when presented some new photos which were not in the dataset.
Performing the detection is simple.
We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;detect.py&lt;/code&gt; file in the YOLOv5 repo.&lt;/p&gt;

&lt;p&gt;An example to perform detection on all files in a folder:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The used parameters do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;weights: This points to the weights file that has been created and saved by the retraining process&lt;/li&gt;
  &lt;li&gt;img: Specified the size of the image, it will automatically resize any image input to match this number, has to be 416 this model&lt;/li&gt;
  &lt;li&gt;conf: The minimum confidence level that should be reached to count as a detection&lt;/li&gt;
  &lt;li&gt;source: A media file, being an image(or a folder containing multiple)/video/stream/&lt;/li&gt;
  &lt;li&gt;name: Name of the folder to output the results to (will be stored under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yolov5/runs/detect/NAME&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;exist-ok: Overwrite existing output instead of incrementing the name&lt;/li&gt;
  &lt;li&gt;save-txt: Save the detection data to a text file (bounding box)&lt;/li&gt;
  &lt;li&gt;save-conf: Add the confidence level to the text file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result will be a folder named custom where all the images and text files reside.
Each image will have a bounding box drawn around the detected logo, if any, with a confidence level.
Each text file will contain the box coordinates in normalized WHXY format.&lt;/p&gt;

&lt;p&gt;Example of text output&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class W H X Y Conf
0 0.503968 0.540551 0.207672 0.0691964 0.791504
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Box coordinates&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/bbox.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The text file contains all the basic info that is needed to further process the detection result:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class: Class that has been detected&lt;/li&gt;
  &lt;li&gt;W: The width of the detected object/bounding box, to be divided by 2 and extended from the X-Coordinate in both directions&lt;/li&gt;
  &lt;li&gt;H: The height of the detected object, to be divided by 2 and extended from the Y-Coordinate in both directions&lt;/li&gt;
  &lt;li&gt;X: The X-coordinate of the center of the detected object&lt;/li&gt;
  &lt;li&gt;Y: The Y-coordinate of the center of the detected object&lt;/li&gt;
  &lt;li&gt;Conf: (Optional) The confidence level, between 1 and 0.000001 (or between 1 and the minimum specified during detection), 1 being 100% certain, 0.000001 being the least certain possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see below one of my retrained models was able to detect the logo in all three never before seen images!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/1.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 1 - 79%&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 23%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/2.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 2 - 91%&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 23%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2020-12-17-ordina-logo-detector/3.jpg&quot; data-lightbox=&quot;fdm&quot; data-title=&quot;Logo detected 3 - 73%&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2020-12-17-ordina-logo-detector/3.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 41%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ultralytics/yolov5&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLOv5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/app/id1452689527&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YOLOv5 IOS app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cocodataset.org/#home&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CoCo dataset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tzutalin/labelImg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LabelImg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.roboflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RoboFlow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Train YOLOv5 with custom data 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.roboflow.com/how-to-train-yolov5-on-a-custom-dataset/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Train YOLOv5 with custom data 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colab.research.google.com/drive/1gDZ2xcTOgR39tGGs-EZ6i3RTs16wmzZQ#scrollTo=1NcFxRcFdJ_O&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Colab document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Overfitting&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Overfitting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Training,_validation,_and_test_sets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Train/Test/Validate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a senior consultant at Ordina, passionate about all modern web applications and smart tech. In his role as Competence Leader Smart Technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Loves to tinker with gadgets and electronics.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="Ordina" /><category term="JWorks" /><category term="AI" /><category term="ML" /><category term="Machine Learning" /><category term="Artificial Intelligence" /><category term="YOLO" /><category term="YOLOv5" /><category term="image detection" /><category term="object detection" /><category term="cuda" /><category term="nvidia" /><category term="training" /><category term="coco" /><category term="dataset" /><category term="image recognition" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-17-ordina-logo-detector/banner.jpeg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-17-ordina-logo-detector/banner.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mobile Design Done Right</title><link href="https://ordina-jworks.github.io/design/2020/12/16/Mobile-Design.html" rel="alternate" type="text/html" title="Mobile Design Done Right" /><published>2020-12-16T00:00:00+00:00</published><updated>2020-12-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/design/2020/12/16/Mobile-Design</id><content type="html" xml:base="https://ordina-jworks.github.io/design/2020/12/16/Mobile-Design.html">&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mobile-design&quot; id=&quot;markdown-toc-mobile-design&quot;&gt;Mobile design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-bad-and-the-ugly&quot; id=&quot;markdown-toc-the-bad-and-the-ugly&quot;&gt;The bad and… the ugly?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#donts&quot; id=&quot;markdown-toc-donts&quot;&gt;Don’ts&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#custom-gestures&quot; id=&quot;markdown-toc-custom-gestures&quot;&gt;Custom gestures&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#no-labels&quot; id=&quot;markdown-toc-no-labels&quot;&gt;No labels&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hamburger-menu&quot; id=&quot;markdown-toc-hamburger-menu&quot;&gt;Hamburger menu&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hidden-search-bar&quot; id=&quot;markdown-toc-hidden-search-bar&quot;&gt;Hidden search bar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unreadable-text&quot; id=&quot;markdown-toc-unreadable-text&quot;&gt;Unreadable text&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#contrast&quot; id=&quot;markdown-toc-contrast&quot;&gt;Contrast&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#typeface&quot; id=&quot;markdown-toc-typeface&quot;&gt;Typeface&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#font-size&quot; id=&quot;markdown-toc-font-size&quot;&gt;Font size&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#clutter&quot; id=&quot;markdown-toc-clutter&quot;&gt;Clutter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#forms&quot; id=&quot;markdown-toc-forms&quot;&gt;Forms&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#typing-too-much&quot; id=&quot;markdown-toc-typing-too-much&quot;&gt;Typing too much&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#input-labels&quot; id=&quot;markdown-toc-input-labels&quot;&gt;Input labels&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#break-tasks-into-chunks&quot; id=&quot;markdown-toc-break-tasks-into-chunks&quot;&gt;Break tasks into chunks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#too-small-buttons&quot; id=&quot;markdown-toc-too-small-buttons&quot;&gt;Too small buttons&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#underlined-links&quot; id=&quot;markdown-toc-underlined-links&quot;&gt;Underlined links&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dos&quot; id=&quot;markdown-toc-dos&quot;&gt;Do’s&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#put-focus-on-what-matters&quot; id=&quot;markdown-toc-put-focus-on-what-matters&quot;&gt;Put focus on what matters&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#provide-feedback&quot; id=&quot;markdown-toc-provide-feedback&quot;&gt;Provide feedback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#thumb-position&quot; id=&quot;markdown-toc-thumb-position&quot;&gt;Thumb position&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tips&quot; id=&quot;markdown-toc-tips&quot;&gt;Tips&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#test-your-design&quot; id=&quot;markdown-toc-test-your-design&quot;&gt;Test your design&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#optimizing-flow&quot; id=&quot;markdown-toc-optimizing-flow&quot;&gt;Optimizing flow&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#onboarding&quot; id=&quot;markdown-toc-onboarding&quot;&gt;Onboarding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#response-time&quot; id=&quot;markdown-toc-response-time&quot;&gt;Response time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prioritize-features&quot; id=&quot;markdown-toc-prioritize-features&quot;&gt;Prioritize features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#asking-for-permissions&quot; id=&quot;markdown-toc-asking-for-permissions&quot;&gt;Asking for permissions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tooltips&quot; id=&quot;markdown-toc-tooltips&quot;&gt;Tooltips&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trends-of-2020&quot; id=&quot;markdown-toc-trends-of-2020&quot;&gt;Trends of 2020&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#advanced-animation&quot; id=&quot;markdown-toc-advanced-animation&quot;&gt;Advanced animation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#personalizations&quot; id=&quot;markdown-toc-personalizations&quot;&gt;Personalizations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#password-less-login&quot; id=&quot;markdown-toc-password-less-login&quot;&gt;Password-less login&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dark-themes&quot; id=&quot;markdown-toc-dark-themes&quot;&gt;Dark themes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skeleton-screens&quot; id=&quot;markdown-toc-skeleton-screens&quot;&gt;Skeleton screens&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#are-we-done-yet&quot; id=&quot;markdown-toc-are-we-done-yet&quot;&gt;Are we done yet?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobile-design&quot;&gt;Mobile design&lt;/h2&gt;

&lt;p&gt;Mobile has taken over desktop when it comes to web browsing. 
Because of this, the importance of user-friendly mobile interfaces is bigger than ever. 
In this recipe, we will go from a bad design to a user-friendly design in a couple of steps. 
This will help you make better design choices when developing for a customer!&lt;/p&gt;

&lt;h2 id=&quot;the-bad-and-the-ugly&quot;&gt;The bad and… the ugly?&lt;/h2&gt;

&lt;p&gt;This is a design created for the fictional webshop Lux, a company that sells luxury items.
If you take a look at this design, you will notice that it’s pretty clean. 
But a good-looking design doesn’t always check off the criteria of a good design. 
Take a moment to think about what could be wrong.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lux Example: Bad design&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bad-design.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;donts&quot;&gt;Don’ts&lt;/h2&gt;

&lt;p&gt;First, we will discuss the don’ts when creating a design for your application. 
We will take everything step by step. 
There will always be imperfections to the design, so keep thinking about what else could be wrong!&lt;/p&gt;

&lt;h3 id=&quot;custom-gestures&quot;&gt;Custom gestures&lt;/h3&gt;
&lt;p&gt;Gestures are a fun way of working with a touch screen. 
It might result in faster interactions, but keep in mind that there is a learning curve to custom gestures. 
Don’t replace UI elements with them, but give the user the choice.&lt;/p&gt;

&lt;p&gt;In our example, to go to the wishlist page, you have to swipe left. 
Some people might not know this and never get to this page. 
However, we can solve this by adding a tab bar that contains all the pages you can go to. 
Let’s combine this with the swipe gesture.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Bad design&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bad-design.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Added tab bar&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Gestures.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;no-labels&quot;&gt;No labels&lt;/h3&gt;
&lt;p&gt;Do you see anything wrong with the newly added tab bar?
You probably know by now that the heart means wishlist and the user icon has something to do with your account. 
These are assumptions that our brain makes when seeing those icons in this context, but it’s not always that obvious to other users. 
This is why labelling preferably all icons is necessary. 
As you can see, our tab bar is way clearer now and it will gain more engagement!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Added tab bar&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Gestures.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Tab bar with labels&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Labels.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hamburger-menu&quot;&gt;Hamburger menu&lt;/h3&gt;
&lt;p&gt;The first thing developers do when they have to make a website responsive is adding the hamburger menu, but this is not always the way to go. 
Let’s take a look at our Lux application. 
There are only three buttons in our hamburger menu and there is plenty of space in our header. 
If you don’t hide them behind a button, people will be more tempted to go to one of these pages. 
This doesn’t mean that you should never use a hamburger menu, but you should try to make the most important features easily accessible.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Bad design&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Hamburger-before.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Removed hamburger icon&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Hamburger.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hidden-search-bar&quot;&gt;Hidden search bar&lt;/h3&gt;
&lt;p&gt;Another thing that decreases engagement, is hiding the search bar behind a button. 
If you show it all the time, you will see more users using the search functionality.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Removed hamburger icon&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Hamburger.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block;&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Added search bar&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Search-bar.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;unreadable-text&quot;&gt;Unreadable text&lt;/h3&gt;

&lt;h4 id=&quot;contrast&quot;&gt;Contrast&lt;/h4&gt;
&lt;p&gt;More important than ever because of the smaller screen sizes is the readability of text. 
First of all, you need enough contrast between the text colour and background colour. 
You can use a tool like &lt;a href=&quot;https://colourcontrast.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Colour contrast&lt;/a&gt; to check the contrast between the foreground and background. 
For the Lux webshop, I used a grey colour that is too light for a white background. 
To change this, I played around with the colour contrast tool. 
I decided to go with a darker greyish-blue tone to grey out text and a dark grey colour for text that should be readable.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Added search bar&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Search-bar.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Colour contrast of text&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Text-contrast.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;typeface&quot;&gt;Typeface&lt;/h4&gt;
&lt;p&gt;You need to choose a typeface that works well in multiple sizes and weights to maintain readability and usability. 
Test your typeface before using it and avoid typefaces that are complicated. 
In the Lux design, the typeface ‘Stalemate’ was used for the title of the items. 
This might look fun, but on smaller screens, it can be harder to read handwritten fonts.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Colour contrast of text&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Text-contrast.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Readable typeface&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Typeface.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;font-size&quot;&gt;Font size&lt;/h4&gt;
&lt;p&gt;Don’t use font sizes smaller than 12px. 
You might be tempted to make your font small on mobile screens, but readability always goes before design!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Readable typeface&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Typeface.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Bigger font size&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Font-size.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;clutter&quot;&gt;Clutter&lt;/h3&gt;
&lt;p&gt;We have a better design than what we started with, but it is still not perfect. 
A famous saying by Antoine de Saint-Exupéry can be applied to mobile UX design:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Il semble que la perfection soit atteinte non quand il n’y a plus rien à ajouter, mais quand il n’y a plus rien à retrancher.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which translates to: “Perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away.” 
Get rid of everything you don’t need.&lt;/p&gt;

&lt;p&gt;Especially when designing for mobile, you have to focus on what matters. 
In our example, there is a log out button. 
Logging out is not something people will often do and there is also an easily accessible account button available. 
That account page also has the log out functionality, so let’s just remove the log out button from our header. 
Another thing we can remove is the informational text on the sales items. 
You can click on the item to read more, but there is no need to put this information on the overview.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Bigger font size&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Font-size.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Removed clutter&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Clutter.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;forms&quot;&gt;Forms&lt;/h3&gt;
&lt;p&gt;When you want to sign up to Lux, you have to fill in a form. 
Since we are creating this application for mobile, we have to take a lot of things into account when creating this form.
Let’s see what our form looks like right now…&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lux Example: Bad form&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bad-form.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;typing-too-much&quot;&gt;Typing too much&lt;/h4&gt;
&lt;p&gt;One thing that can scare off mobile users from filling in forms is having to type too much. 
There are many ways to still get the same information but make it easier for users to fill everything in. 
You can use their contact information to prefill forms and avoid them having to fill in their name, e-mail, phone number, etc. for the hundredth time. 
Next to that, you can make sure the right keyboard comes up when they click on a certain input. 
For example, when they are filling in a phone number, you show the number keyboard. 
That way, they don’t have to change it themselves. This saves a lot of time. 
Also, something that a lot of apps are starting to do right now, is using the camera for input. 
We can use this here for the credit card number. 
People just have to scan their credit card with their camera and the number is automatically filled in. 
Next to that, you can change text inputs to different inputs that require less or no typing. 
Here, I added a date input for the birth date and a custom selector for the categories.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Bad form&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bad-form.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Less typing&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Too-much-typing.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;input-labels&quot;&gt;Input labels&lt;/h4&gt;
&lt;p&gt;Imagine filling in a form and having to go get your credit card. 
When you come back, you might have forgotten what the other input fields were about. 
In our example, the labels are placeholders which disappear when you’ve entered something in them. 
The best practice for input labels is to show them at all times, because yes, people tend to forget what they were for.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Labels not visible&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Labels-not-visible.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Labels always visible&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Visible-labels.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;break-tasks-into-chunks&quot;&gt;Break tasks into chunks&lt;/h4&gt;
&lt;p&gt;If you have a large form, break your tasks into chunks. 
You can create a step-by-step form. 
Do this by asking the main questions in the beginning and then asking questions that don’t seem as important in the following steps. 
Make sure people always know why they are filling in certain information and make sure the info you’re asking for is needed at that time. 
In the Lux example, I changed the form so that people can sign up with just an e-mail address and a password. 
I added an explanation for why we need the other information and why it benefits the user to fill in a second form. 
I added a save button so they can always fill it in later.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lux Example: Break tasks into chunks&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Break-tasks.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;too-small-buttons&quot;&gt;Too small buttons&lt;/h3&gt;
&lt;p&gt;There are two major rules when it comes to using buttons on a touchscreen. 
The first rule is that you need to create controls that measure at least 7–10 mm so they can be accurately tapped with a finger. 
Nothing is more annoying than having to tap very precisely with a smartphone. 
The buttons on our newly created form are very small and you might accidentally click on the wrong button.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Buttons too small&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Buttons-too-small.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Bigger buttons&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Small-buttons.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Buttons too small&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Buttons-too-small-2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Bigger buttons&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Small-buttons-2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Rule number two is that you need to ensure that there is the right amount of spacing between tap targets.
Our tab bar looks alright, but I think a little more spacing between the buttons won’t hurt.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Removed clutter&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Clutter.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: More spacing between buttons&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Button-spacing.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;underlined-links&quot;&gt;Underlined links&lt;/h3&gt;
&lt;p&gt;For desktop applications, we use a lot of underlined links. 
On mobile devices however, it’s best to avoid them. 
Usually, links are replaced with buttons for mobile applications, because they are way easier to tap on with a touch device. 
And, one more plus: they grab your attention.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: More spacing between buttons&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Button-spacing.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Buttons instead of links&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Underlined-links.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dos&quot;&gt;Do’s&lt;/h2&gt;

&lt;h3 id=&quot;put-focus-on-what-matters&quot;&gt;Put focus on what matters&lt;/h3&gt;
&lt;p&gt;The title says it all: put focus on what matters. 
Try to think about what you want users to do.
For our webshop, we want people to buy the Sale items.
There is no reason for the titles to be this big because we don’t want the customer to interact with them.
We can make them smaller and make sure the Sale title stands out a bit more.
Now, our focus goes to the sale items instead of the two titles.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Buttons instead of links&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Underlined-links.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Focus on what matters&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Focus.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;provide-feedback&quot;&gt;Provide feedback&lt;/h3&gt;
&lt;p&gt;Provide feedback on interactions so people know what’s going on.
Take a look at what happens when someone adds something to their bag:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lux Example: Bad feedback&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bad-feedback.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You had to look very close to see there was something added to the bag, right?
Using a pop-up message here will grab your user’s attention and make it clear the action was successful.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Lux Example: Good feedback&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Good-feedback.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another example for which you need to provide feedback is when a page is loading.
A small loading animation is enough, but don’t let people think they’re stuck on a page when things are loading.
It might annoy them and even let them leave your application!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Loading animation&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Loading-animation.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;
    Source: &lt;a href=&quot;https://dribbble.com/shots/3162915-Shopping-Loader-GIF-Animation&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LePraveen Tewatia on Dribbble&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;thumb-position&quot;&gt;Thumb position&lt;/h3&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Thumb position with zone chart&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Thumb-position.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;
    Source: &lt;a href=&quot;https://dribbble.com/shots/6869746-Twitter-Search&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ranjith Manoharan on Dribbble&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Always keep the thumb position in mind.
Know what spaces on your screen are more easily accessible with the right thumb and use them for your advantage.
What buttons do you want people to click on? As you can see on the thumb zone-chart, our bag is in the red zone.
We want people to buy stuff, so we might have to swap the places of the account and the bag button.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
    &lt;img alt=&quot;Lux Example: Focus on what matters&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Focus.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
    &lt;img alt=&quot;Lux Example: Thumb position&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Thumb-position.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px; display: inline-block&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;p&gt;Our Lux design is finished. Nothing is ever perfect, but we should always strive for perfection.
Here are a few more tips to help you with designing an interface for mobile!&lt;/p&gt;

&lt;h3 id=&quot;test-your-design&quot;&gt;Test your design&lt;/h3&gt;
&lt;p&gt;In our example, we swapped the bag and account icon because we want people to easily go to the checkout.
According to our thumb zone-chart, this is the right positioning for our goal, but in practice, this might not work.
This is why you should always test your design. The numbers are what counts. 
You might have done everything by the rules and still not have the engagement you aimed for.&lt;/p&gt;

&lt;h3 id=&quot;optimizing-flow&quot;&gt;Optimizing flow&lt;/h3&gt;
&lt;p&gt;A user flow is a sequence of actions a user has to perform to acquire different functionalities in your app, such as set up, purchasing an item, … 
Users might find the perfect app but still delete it because there is friction in one of the flows.
You can use the &lt;a href=&quot;https://pageflows.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Page flows website&lt;/a&gt; to learn from proven products!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Flow chart&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/UX-flow-chart.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;
    Source: &lt;a href=&quot;https://www.leanplum.com/blog/user-flow/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Leanplum&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;onboarding&quot;&gt;Onboarding&lt;/h3&gt;
&lt;p&gt;Good onboarding is essential and shows the value of your application.
A very effective way of onboarding is having an interactive tour of your app.
This is a fun and easy way for people to get the hang of using your application.
One thing to keep in mind is that your onboarding doesn’t make up for the fact that some things just may not be clear to your users.
The app should still be easy to use, even when you’ve skipped the tutorial.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Onboarding example&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Onboarding.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;
    Source: &lt;a href=&quot;https://www.habitify.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Habitify app&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;response-time&quot;&gt;Response time&lt;/h3&gt;
&lt;p&gt;One thing that is especially important to keep in mind for us developers is the response time.
As technology progresses, people get more impatient and they might leave your app if they have to wait longer than 2 seconds for something to load.
We directly influence the response time, and we should continuously improve the quality of our code.
It’s also interesting to take a look at your target audience.
We are used to fast internet connections in Western Europe but other countries might not have that privilege.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Bounce time&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Bounce-time.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;
    Source: Google/SOASTA Research, 2017
&lt;/div&gt;

&lt;h3 id=&quot;prioritize-features&quot;&gt;Prioritize features&lt;/h3&gt;
&lt;p&gt;You can pack your app with thousands of interesting features to make it more attractive to potential users.
While you might have a lot of traffic going to your application, a lot of users will be scared off by the overload of features.
The rule is to prioritize the features your application needs and omit the nice-to-haves.&lt;/p&gt;

&lt;h3 id=&quot;asking-for-permissions&quot;&gt;Asking for permissions&lt;/h3&gt;
&lt;p&gt;Your app might need permission for using the user’s location at some point.
Don’t ask for this the moment they open your application.
The user might not get why they have to give you permission and will decline the request.
That would mean they have to go back into their settings later.
Instead, ask for it whenever they are starting to use the feature that needs location and provide a clear message as to why you need this permission.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Approach for asking for permissions&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Location-permission.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;
    Source: &lt;a href=&quot;https://www.plotprojects.com/blog/how-to-ask-for-location-permissions-in-ios11-recommended-approaches-10-examples/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PlotProjects&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tooltips&quot;&gt;Tooltips&lt;/h3&gt;
&lt;p&gt;Tooltips display information when a user hovers, focus on or taps on an element. 
Most commonly, a tooltip is shown on hover, but there is no such thing as hover on a mobile device.
You can show it on long press, but people might not even know it’s there.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Approach for tooltips on mobile&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Tooltips.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;
    Source: &lt;a href=&quot;https://material.io/components/tooltips#placement&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Material Design&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Ask yourself the question: do I really need to hide this tooltip?
You can show the tooltip by default or conveniently place it alongside the element you would hover over.
While on large screens a tooltip might look really small, it will draw the attention on smaller devices.
Another good practice for mobile is to hide it behind a hint icon. 
By using hints like a question mark or info icon, you can make it clear that tapping on this icon could open a tooltip.&lt;/p&gt;

&lt;h2 id=&quot;trends-of-2020&quot;&gt;Trends of 2020&lt;/h2&gt;

&lt;h3 id=&quot;advanced-animation&quot;&gt;Advanced animation&lt;/h3&gt;
&lt;p&gt;Animation can give the user feedback on their actions and add some rhythm to interactions.
Advanced animations are animations that are used as part of the branding of a company.
It can help you express your brand and build loyalty.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: A lot of people get motion sickness because of animations. There should always be a way to turn off or minimize animations in your application.&lt;/em&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Advanced animation&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Advanced-animation.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;
    Source: &lt;a href=&quot;https://dribbble.com/shots/6832505-Food-Menu&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Asha Rajput on Dribbble&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;personalizations&quot;&gt;Personalizations&lt;/h3&gt;
&lt;p&gt;Artificial Intelligence is rapidly gaining popularity and is being used in everyday applications.
Apps like Spotify and Netflix use AI to recommend certain songs or movies.
This way of personalization can add value to your application and might make it easier for users to find what they are looking for.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Discover Weekly on Spotify&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Discover-Spotify.jpeg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;
    Source: &lt;a href=&quot;https://medium.com/the-sound-of-ai/spotifys-discover-weekly-explained-breaking-from-your-music-bubble-or-maybe-not-b506da144123&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;password-less-login&quot;&gt;Password-less login&lt;/h3&gt;
&lt;p&gt;As I already mentioned in the part about forms, mobile users don’t like to type.
Because of that, new ways of logging in are coming to the surface.
Popular alternatives for passwords are: facial or fingerprint recognition, sign-in links via mail or text and using key generators.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Password-less login&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Passwordless.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;
    Source: &lt;a href=&quot;https://dribbble.com/shots/2260567-Password-less-login&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jason Zimdars on Dribbble&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dark-themes&quot;&gt;Dark themes&lt;/h3&gt;
&lt;p&gt;Dark themes have two essential advantages: they use less battery power and reduce eye strain.
A lot of popular apps give you the choice to swap between a light or dark theme or automatically swap between those two during the day or night.
Others just go all the way and embrace the dark theme!&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Dark vs. light theme&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Dark-light-theme.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 600px;&quot; /&gt;
    Source: &lt;a href=&quot;https://blog.smartlauncher.net/designing-a-dark-theme-on-android-2dd9a1da16db&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Giovanni Piemontese on SmartLauncher&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;skeleton-screens&quot;&gt;Skeleton screens&lt;/h3&gt;
&lt;p&gt;People don’t like waiting and you might have done everything to have a fast load time, but it still doesn’t feel like enough.
Skeleton screens are being used by big companies like Facebook to give you a feeling of fast loading.
Skeleton screens give you a general idea of what the page is going to look like in a wireframe-like design.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;
    &lt;img alt=&quot;Skeleton screen Facebook&quot; src=&quot;/img/2020-12-16-mobile-design-done-right/Skeleton-screen.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 400px;&quot; /&gt;
    Source: &lt;a href=&quot;https://medium.com/the-aesthetic-programmer/facebook-loading-labels-animation-simple-approach-for-skeleton-view-in-swift-4-4fcdfeffd121&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Medium&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;are-we-done-yet&quot;&gt;Are we done yet?&lt;/h2&gt;
&lt;p&gt;We will never be done redesigning our website for mobile. 
There’s always something we could do better.
You can find many more tips and tricks for mobile design online, 
but these key points will always help you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People are lazy, literally! People don’t grab their phone to write out monologues, but just type some emojis and get it over with.&lt;/li&gt;
  &lt;li&gt;Mobile screens are really small, don’t pack everything on them and keep removing everything you don’t need.&lt;/li&gt;
  &lt;li&gt;Have you ever heard anyone say “I’ve got fat fingers” except for when they are using a smartphone? Make your tap targets big enough!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User testing is one of the most important things to do when improving your user experience.
There is always more to learn about mobile design and it is definitely worth looking more into user testing.
If you’re looking for UI/UX experts to help you tackle these issues, don’t hesitate to contact my colleagues at &lt;a href=&quot;http://www.cw.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ClockWork&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Icons on Lux prototype made by &lt;a href=&quot;https://www.flaticon.com/authors/kiranshastry&quot; title=&quot;Kiranshastry&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kiranshastry&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot; title=&quot;Flaticon&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;www.flaticon.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Hannelore&quot;, &quot;last_name&quot;=&gt;&quot;Verbraekel&quot;, &quot;permalink&quot;=&gt;&quot;/author/hannelore_verbraekel&quot;, &quot;avatar&quot;=&gt;&quot;hannelore-verbraekel.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;hannelore.verbraekel@ordina.be&quot;, &quot;github&quot;=&gt;&quot;hanneloreverbraekel&quot;, &quot;linkedin&quot;=&gt;&quot;hanneloreverbraekel&quot;, &quot;bio&quot;=&gt;&quot;Hannelore is a junior front-end developer who is creative and open-minded and always eager to learn new skills. She achieved her bachelor’s degree in Applied Information Technology with a focus on Web and Mobile Applications in 2019.&quot;}</name><email>hannelore.verbraekel@ordina.be</email></author><category term="Design" /><category term="Design" /><category term="UX Design" /><category term="UI Design" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-16-mobile-design-done-right/mobile-design.png" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-16-mobile-design-done-right/mobile-design.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An introduction into the world of Chaos Engineering</title><link href="https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering.html" rel="alternate" type="text/html" title="An introduction into the world of Chaos Engineering" /><published>2020-12-14T00:00:00+00:00</published><updated>2020-12-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/12/14/chaos-engineering.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-chaos-engineering&quot; id=&quot;markdown-toc-what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#principles-of-chaos-engineering&quot; id=&quot;markdown-toc-principles-of-chaos-engineering&quot;&gt;Principles of Chaos Engineering&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#steady-state&quot; id=&quot;markdown-toc-steady-state&quot;&gt;Steady state&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hypothesis-about-state&quot; id=&quot;markdown-toc-hypothesis-about-state&quot;&gt;Hypothesis about state&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vary-real-world-events&quot; id=&quot;markdown-toc-vary-real-world-events&quot;&gt;Vary real-world events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#design-and-run-the-experiment&quot; id=&quot;markdown-toc-design-and-run-the-experiment&quot;&gt;Design and run the experiment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#learn-and-verify&quot; id=&quot;markdown-toc-learn-and-verify&quot;&gt;Learn and verify&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#improve-and-fix-it&quot; id=&quot;markdown-toc-improve-and-fix-it&quot;&gt;Improve and fix it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#manually-vs-auto&quot; id=&quot;markdown-toc-manually-vs-auto&quot;&gt;Manually VS Auto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chaos-gamedays--benefits&quot; id=&quot;markdown-toc-chaos-gamedays--benefits&quot;&gt;Chaos GameDays &amp;amp; benefits&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#post-mortem&quot; id=&quot;markdown-toc-post-mortem&quot;&gt;Post Mortem&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#simian-army&quot; id=&quot;markdown-toc-simian-army&quot;&gt;Simian Army&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#chaos-monkey-still-available-as-a-standalone-service&quot; id=&quot;markdown-toc-chaos-monkey-still-available-as-a-standalone-service&quot;&gt;Chaos Monkey (Still available as a standalone service)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot; id=&quot;markdown-toc-janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot;&gt;Janitor Monkey =&amp;gt; replaced by new standalone service ‘Swabbie’ (Still available)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot; id=&quot;markdown-toc-conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot;&gt;Conformity Monkey =&amp;gt; now rolled out in spinnaker services (Still available)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-tools-for-chaos-engineering&quot; id=&quot;markdown-toc-other-tools-for-chaos-engineering&quot;&gt;Other Tools for Chaos Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;chaos-engineering&quot;&gt;Chaos Engineering&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In cloud-based distributed networks we need a certain level of scalability and resilience because unpredictable events are bound to happen.
Because these networks are more complex and have built-in uncertainty,
it’s essential for software developers to utilize an empirical approach to testing for vulnerabilities that’s systematic and innovative.
This can be achieved through controlled experimentation that creates chaos in an effort to determine how much stress any given system can withstand.
The goal is to observe and identify systemic weaknesses.&lt;/p&gt;

&lt;h2 id=&quot;what-is-chaos-engineering&quot;&gt;What is Chaos Engineering?&lt;/h2&gt;

&lt;p&gt;Chaos Engineering is the discipline of experimenting on a software system in production in order to build confidence in the system’s capability to withstand turbulent and unexpected conditions.
You can think of Chaos Engineering as an empirical approach to addressing the question: “How close is our system to the edge of chaos?” 
Another way to think about this is: “How would our system fare if we injected chaos into it?”
It is not meant to break random things without a purpose.&lt;/p&gt;

&lt;p&gt;However if you and your team are just starting with Chaos Engineering and you are not confident enough to work in the production environment,
you can also do the experiments in another controlled environment (TST, DEV, …).&lt;/p&gt;

&lt;p&gt;Building confidence is key! You do not want to break things in production without being able to find a solution.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;why-use-chaos-engineering&quot;&gt;Why use Chaos Engineering?&lt;/h2&gt;

&lt;p&gt;In software development, a given software system’s ability to tolerate failures while still ensuring adequate quality of service,
is typically specified as a requirement (Resilience).
However, development teams often fail to meet this requirement due to factors such as short deadlines or lack of knowledge of the field.
Chaos engineering is a technique to meet the resilience requirement.&lt;/p&gt;

&lt;p&gt;Chaos engineering can be used to achieve resilience against:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Infrastructure failures&lt;/li&gt;
  &lt;li&gt;Network failures&lt;/li&gt;
  &lt;li&gt;Application failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;chaos-engineering-and-traditional-testing&quot;&gt;Chaos Engineering and Traditional Testing&lt;/h2&gt;

&lt;p&gt;With traditional testing, you are only testing assumptions and not generating new knowledge about the system.
You are testing the code correctness and how functions and methods work in your application.
Chaos Engineering on the other hand will also explore the many different and unpredictable scenarios that could happen to your systems.&lt;/p&gt;

&lt;p&gt;In this way you will be able to find new weaknesses before the actual event will take place and make sure future outages will not happen.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;prerequisites-for-chaos-engineering&quot;&gt;Prerequisites for Chaos Engineering&lt;/h2&gt;

&lt;p&gt;To determine whether your organization is ready to start adopting Chaos Engineering, you need to answer one question:
Is your system resilient to real-world events such as service failures and network latency spikes?
If you know the answer to that question is no, you have some work to do before using Chaos Engineering.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is great for exposing unknown weaknesses in your production system,
but if you are certain that a Chaos Engineering experiment will lead to a significant problem with the system,
there’s no sense in running that experiment.
Fix the weakness first! Then come back to Chaos Engineering to uncover more weaknesses you didn’t know about.&lt;/p&gt;

&lt;p&gt;Also, it is important that there are ways your team can analyze the results of the experiments by making sure there is a monitoring system in place to check the state of your application.&lt;/p&gt;

&lt;p&gt;Some metrics examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;service metrics
    &lt;ul&gt;
      &lt;li&gt;Example: The time it normally takes to start up your application, the time it takes for a request to the service…&lt;/li&gt;
      &lt;li&gt;Example: a simple metric for us to determine the overall health of the system is the percentage of 200 responses from the User Service, specifically we want 100%.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;business metrics
    &lt;ul&gt;
      &lt;li&gt;Example: number of orders on your web shop. When doing an experiment where you are increasing the response times of your service by 100 ms, you see that the number of orders has decreased significantly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s always a good idea to have some resilience already built in to your application/service before introducing Chaos.&lt;/p&gt;

&lt;p&gt;Some key points for resilience are:&lt;/p&gt;
&lt;div style=&quot;text-align: right; width: 60%; margin-left:20%&quot;&gt;
  &lt;img alt=&quot;Must Have&quot; src=&quot;/img/2020-12-14-chaos-engineering/ResilienceSmall.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;principles-of-chaos-engineering&quot;&gt;Principles of Chaos Engineering&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Experiment Process&quot; src=&quot;/img/2020-12-14-chaos-engineering/chaos-engineering-process.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;steady-state&quot;&gt;Steady state&lt;/h3&gt;

&lt;p&gt;Define a measurable steady state that represents normal circumstances to use as a baseline.&lt;/p&gt;

&lt;p&gt;The reason you do this, is because after injection failure,
you want to make sure you can return to a well-known state and the experiment is no longer interfering with the system’s normal behavior.
The key is not to focus on internal attributes of the system like CPU, memory, etc. but to look for measurable output.
Measurements of that output over a short period of time constitute a proxy for the system’s steady state.
The system’s overall throughput, error rates, latency percentiles, etc. could all be metrics of interest representing steady state behavior.&lt;/p&gt;

&lt;h3 id=&quot;hypothesis-about-state&quot;&gt;Hypothesis about state&lt;/h3&gt;

&lt;p&gt;Once you have your metrics and an understanding of their steady state behavior,
you can use them to define the hypotheses and preferred results for your experiment.
Start small and choose only one hypothesis at a time.
When you are doing this, it is important to bring everybody around the table that is involved with the project.
The team, the product owner, developers, designers, etc.&lt;/p&gt;

&lt;p&gt;It can be tempting to subject your system to different events (for example, increasing amounts of traffic) to “see what happens.”
However, without having a prior hypothesis in mind, it can be difficult to draw conclusions if you don’t know what to look for in the data.
Think about how the steady state behavior will change when you inject different types of events into your system.
If you add requests to a service, will the steady state be disrupted or stay the same?
If disrupted, do you expect the system output to increase or decrease?&lt;/p&gt;

&lt;p&gt;A few examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What will happen if this load balancer breaks?&lt;/li&gt;
  &lt;li&gt;What will happen if caching fails?&lt;/li&gt;
  &lt;li&gt;What will happen if latency increases with 300ms?&lt;/li&gt;
  &lt;li&gt;What will happen if we lose connection to our DB?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make hypotheses on parts of the system you believe are resilient — after all, that’s the whole point of the experiment.
Also think about what the preferred outcome will be in one of these situations and don’t make a hypothesis that you know you will break!&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What if the ‘Shop By Category’ service fails to load in our online webshop?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Preferred Outcome:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should we return a 404?&lt;/li&gt;
  &lt;li&gt;Should the page gracefully degrade and collapse?&lt;/li&gt;
  &lt;li&gt;What should happen on the backend?&lt;/li&gt;
  &lt;li&gt;Should alerts be sent?&lt;/li&gt;
  &lt;li&gt;Should the failing dependency continue to receive requests every time a user goes to this page?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vary-real-world-events&quot;&gt;Vary real-world events&lt;/h3&gt;

&lt;p&gt;Every system, from simple to complex, is subject to unpredictable events and conditions if it runs long enough.
Examples include increase in load, hardware malfunction,
deployment of faulty software, and the introduction of invalid data (sometimes known as poison data).&lt;/p&gt;

&lt;p&gt;The most common ones fall under the following categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hardware failures&lt;/li&gt;
  &lt;li&gt;Functional bugs&lt;/li&gt;
  &lt;li&gt;State transmission errors (e.g., inconsistency of states between sender and receiver nodes)&lt;/li&gt;
  &lt;li&gt;Network latency and partition&lt;/li&gt;
  &lt;li&gt;Large fluctuations in input (up or down) and retry storms&lt;/li&gt;
  &lt;li&gt;Resource exhaustion&lt;/li&gt;
  &lt;li&gt;Unusual or unpredictable combinations of interservice communication&lt;/li&gt;
  &lt;li&gt;Byzantine failures (e.g., a node believing it has the most current data when it actually does not)&lt;/li&gt;
  &lt;li&gt;Race conditions&lt;/li&gt;
  &lt;li&gt;Downstream dependencies malfunction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Real World Examples:&lt;/p&gt;

&lt;p&gt;At Netflix, they turn off machines because instance termination happens frequently in the wild and the act of turning off a server is cheap and easy.
They simulate regional failures even though to do so is costly and complex,
because a regional outage has a huge impact on their customers unless they are resilient to it.&lt;/p&gt;

&lt;p&gt;Consider an organization that uses a messaging app such as Slack or HipChat to communicate during an incident.
The organization may have a contingency plan for handling the outage when the messaging app is down during an outage,
but how well do the on-call engineers know the contingency plan?
Running a chaos experiment is a great way to find out.&lt;/p&gt;

&lt;h3 id=&quot;design-and-run-the-experiment&quot;&gt;Design and run the experiment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pick one hypothesis&lt;/li&gt;
  &lt;li&gt;Scope your experiment (the closer you are to production the more you will learn about the results)&lt;/li&gt;
  &lt;li&gt;Identify the relevant metrics to measure&lt;/li&gt;
  &lt;li&gt;Notify the organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prioritize events either by potential impact or estimated frequency.
Consider events that correspond to hardware failures like servers dying, software failures like malformed responses,
and non-failure events like a spike in traffic or a scaling event.
Any event capable of disrupting steady state is a potential variable in a Chaos experiment.&lt;/p&gt;

&lt;p&gt;One of the most important things during the experiment phase is understanding the potential blast radius of the experiment and the failure you’re injecting — and minimize it.
You’ll almost certainly want to start out in your test environment to do a dry run before you move into production.
Once you do move to production, you’ll want to start out with experiments that impact the minimal amount of customer traffic.
For example, if you’re investigating what happens when your cache times out,
you could start by calling into your production system using a test client, and just inducing the timeouts for that client.&lt;/p&gt;

&lt;p&gt;Some good questions you can ask yourself to check the blast radius are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How many customers are affected?&lt;/li&gt;
  &lt;li&gt;What functionality is impaired?&lt;/li&gt;
  &lt;li&gt;Which locations are impacted?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also try to have some sort of ‘emergency button’ you can use to cancel the experiment or to return to the normal state of the system in case you cannot find a solution.
Be careful with experiments that modify the application state (cache or databases) or that can’t be rolled back easily or at all.&lt;/p&gt;

&lt;p&gt;Eventually when you start doing Chaos Experiments in your production environment,
you want to inform members of your organization about what you’re doing, why you’re doing it and when.&lt;/p&gt;

&lt;h3 id=&quot;learn-and-verify&quot;&gt;Learn and verify&lt;/h3&gt;

&lt;p&gt;In order to learn and verify you need to measure. Invest in measuring everything!
After the test you can use your collected metrics to check if your hypothesis is correct.&lt;/p&gt;

&lt;p&gt;Another important metric during this phase, is the time it takes to detect the problem. 
You do not want your customers to be the ones that detect the problem. 
So, use Chaos Engineering as a way of testing your monitoring and alerting systems as well.&lt;/p&gt;

&lt;p&gt;There are several ways that you can expand the testing in order to increase your knowledge and find potential solutions.
Once you’ve resolved one area of concern, reset the testing criteria or parameters and run the experiment again with a new hypothesis.
You can also expand the blast radius by increments with each test,
introducing new or more powerful stressors into the testing environment in order to gauge the limits of your system.
The idea is to introduce as much controlled chaos into the mix, one element at a time,
in order to determine the maximum limits of your system before it breaks down completely.
This can be done by introducing automation after the initial test.&lt;/p&gt;

&lt;p&gt;Always do a Post Mortem of the experiment.
A few questions the team can ask themselves during this phase:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Time to detect?&lt;/li&gt;
  &lt;li&gt;Time for notification? And escalation?&lt;/li&gt;
  &lt;li&gt;Time to public notification?&lt;/li&gt;
  &lt;li&gt;Time for graceful degradation to kick-in?&lt;/li&gt;
  &lt;li&gt;Time for self-healing?&lt;/li&gt;
  &lt;li&gt;Time to recovery — partial and full?&lt;/li&gt;
  &lt;li&gt;Time to all-clear and stable?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At AWS, the output from the Post Mortem is called a Correction-of-Errors document, or COE.
They use COE to learn from their mistakes, whether they’re flaws in technology, process, or even the organization.
They use this mechanism to resolve root causes and drive continuous improvement.
The key to being successful in this process is being open and transparent about what went wrong.
One of the most important guidelines for writing a good COE is to be blameless and avoid identifying individuals by name.&lt;/p&gt;

&lt;p&gt;There are five main sections in a COE document:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What happened? (Timeline)&lt;/li&gt;
  &lt;li&gt;What was the impact to our customers?&lt;/li&gt;
  &lt;li&gt;Why did the error occur? (The 5 Why’s)&lt;/li&gt;
  &lt;li&gt;What did you learn?&lt;/li&gt;
  &lt;li&gt;And how will you prevent it from happening again in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;improve-and-fix-it&quot;&gt;Improve and fix it&lt;/h3&gt;

&lt;p&gt;The most important lesson here is to prioritize fixing the findings of your chaos experiments over developing new features!
Get upper management to enforce that process and buy into the idea that fixing current issues is more important than continuing the development of new features.&lt;/p&gt;

&lt;h2 id=&quot;manually-vs-auto&quot;&gt;Manually VS Auto&lt;/h2&gt;

&lt;p&gt;Using Chaos Engineering may be as simple as manually running ‘kill -9’ on a box inside of your staging environment to simulate failure of a service.
Or it can be as sophisticated as automatically designing and carrying out experiments in a production environment against a small but statistically significant fraction of live traffic.
So, when starting out, it is a good practice to manually make your experiments and check the results,
but running experiments manually is labor-intensive and ultimately unsustainable.
So try to automate experiments and run them continuously.&lt;/p&gt;

&lt;h2 id=&quot;chaos-gamedays--benefits&quot;&gt;Chaos GameDays &amp;amp; benefits&lt;/h2&gt;

&lt;p&gt;Chaos GameDays are often known as days where a ‘Master of Disaster’ or a MoD, often in secret,
will decide what kind of failure or disaster will happen on the system.
He or she will generally start with something simple like the loss of capacity or the loss of connectivity.
You may find, that until you can easily and clearly see the simple cases,
doing harder or more complex failures is not a good way to build confidence or spend time.&lt;/p&gt;

&lt;p&gt;If you follow this process regularly, you will see a transformation in your team.
Being first on-call for Chaos GameDays builds composure under pressure when doing on-call for production outages.
Not only will all developers gain confidence in their uderstanding of the systems and how they fail,
but they also get used to the feeling of being under pressure.&lt;/p&gt;

&lt;p&gt;There will also be a dramatic change in your systems, since developers will experience failure as a part of their job and thus, they will start designing for failure.
They consider how to make every change and every system observable and also carefully choose resilience strategies because this is now something the team knows and talks about during the experiments.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;planned-failure&quot;&gt;Planned Failure&lt;/h3&gt;

&lt;p&gt;The MoD will gather the team before the ‘start of the incident’ and then will start with the planned failure. 
Normally there will be one member of the team who will be ‘first on-call’.
This person is strongly encouraged to contact the other members
so they can start working together and find out what failure the MoD has caused.
Ideally, the team will find and solve the issue in less than 75% of the allocated time.
When the team has a solution for the issue or the allocated time has ended,
the MoD will reverse the failure and the team will proceed to do a Post Mortem of the incident.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;escalation&quot;&gt;Escalation&lt;/h3&gt;

&lt;p&gt;It is also possible that the team will not be able to find a solution for the problem.
Then the MoD can escalate this failure to make it more visible,
because often full outages are the only observable failures.
Knowing this is the first step in fixing your instrumentation and visualization (FE. Dashboards with monitoring…)&lt;/p&gt;

&lt;h3 id=&quot;post-mortem&quot;&gt;Post Mortem&lt;/h3&gt;

&lt;p&gt;A Post Mortem is the stage in which the team will analyze the failure and the solution.
This can consist of sharing perspectives, assumptions that were made, expectations that didn’t reflect the behavior of the system or observability tools.
Following out of the Post Mortem,
the team should have come up with a set of actions to fix any observability issues for the scenario and some ideas about how to improve resilience to that failure.&lt;/p&gt;

&lt;p&gt;The Post Mortem should follow the usual incident process if you have one in your company.&lt;/p&gt;

&lt;h2 id=&quot;simian-army&quot;&gt;Simian Army&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Must Have&quot; src=&quot;/img/2020-12-14-chaos-engineering/SimianArmySmall.jpg&quot; width=&quot;40%&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Netflix has already developed some tools which they bundled in their suite of tools named ‘The Simian Army’.
These tools were made to test reliability, security and resilience of its AWS infrastructure.
The Simian Army is designed to add more capabilities beyond Chaos Monkey. 
While Chaos Monkey solely handles termination of random instances,
Netflix engineers needed additional tools able to induce other types of failure.
Some of the Simian Army tools have fallen out of favor in recent years and are deprecated,
but each of the members serves a specific purpose aimed at bolstering a system’s failure resilience.&lt;/p&gt;

&lt;h3 id=&quot;chaos-monkey-still-available-as-a-standalone-service&quot;&gt;Chaos Monkey (Still available as a standalone service)&lt;/h3&gt;

&lt;p&gt;Chaos Monkey is a tool invented to test the resilience of its IT infrastructure. 
It works by intentionally disabling virtual machine instances and containers in the production network to test how remaining systems respond to the outage. (prepares you for a random instance failure in an application managed by Spinnaker)
This tool has been in the game for a long time, so there might be better tools for your needs.&lt;/p&gt;

&lt;p&gt;Chaos Monkey is deliberately unpredictable.
It only has one attack type: terminating virtual machine instances.
You set a general time frame for it to run, and at some point during that time it will terminate a random instance. 
This is meant to help replicate unpredictable production incidents,
but it can easily cause more harm than good if you’re not prepared to respond.&lt;/p&gt;

&lt;h3 id=&quot;janitor-monkey--replaced-by-new-standalone-service-swabbie-still-available&quot;&gt;Janitor Monkey =&amp;gt; replaced by new standalone service ‘Swabbie’ (Still available)&lt;/h3&gt;

&lt;p&gt;Identifies and disposes unused resources to avoid waste and clutter.&lt;/p&gt;

&lt;h3 id=&quot;conformity-monkey--now-rolled-out-in-spinnaker-services-still-available&quot;&gt;Conformity Monkey =&amp;gt; now rolled out in spinnaker services (Still available)&lt;/h3&gt;

&lt;p&gt;A tool that determines whether an instance is nonconforming by testing it against a set of rules.
If any of the rules determines that the instance is not conforming, the monkey sends an email notification to the owner of the instance.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-kong-deprecated-or-not-publicaly-released&quot;&gt;Chaos Kong (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;At the very top of the Simian Army hierarchy, Chaos Kong drops a full AWS “Region”. 
Though rare, loss of an entire region does happen, and Chaos Kong simulates a systems response and recovery to this type of event.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-gorilla-deprecated-or-not-publicaly-released&quot;&gt;Chaos Gorilla (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Chaos Gorilla drops a full AWS “Availability Zone” (one or more entire data centers serving a geographical region).&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;latency-monkey-deprecated-or-not-publicaly-released&quot;&gt;Latency Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Introduces communication delays to simulate degradation or outages in a network.
Netflix never publicly released the Latency Monkey code, and it eventually evolved into their Failure Injection Testing (FIT) service.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;fit-failure-injection-testing&quot;&gt;FIT (Failure Injection Testing)&lt;/h3&gt;

&lt;p&gt;FIT was built to inject microservice level failures.
Latency monkey adds a delay and/or failure on the server side of a request for a given service.
This provides us good insight into how calling applications behave when their dependency slows down — 
threads pile up, the network becomes congested, etc.
Latency monkey also impacts all calling applications — whether they want to participate or not,
and can result in customer pain if proper fallback handling, timeouts, and bulkheads don’t work as expected.
What we need is a way to limit the impact of failure testing while still breaking things in realistic ways.
This is where FIT comes in.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;doctor-monkey-deprecated-or-not-publicaly-released&quot;&gt;Doctor Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;Performs health checks, by monitoring performance metrics such as CPU load to detect unhealthy instances,
for root-cause analysis and eventual fixing or retirement of the instance.
Doctor Monkey is not open-sourced, but most of its functionality is built into other tools like Spinnaker, 
which includes a load balancer health checker,
so instances that fail certain criteria are terminated and immediately replaced by new ones.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;security-monkey-still-available-but-will-be-end-of-life-in-2020&quot;&gt;Security Monkey (Still available but will be end-of-life in 2020)&lt;/h3&gt;

&lt;p&gt;Derived from Conformity Monkey, a tool that searches for and disables instances that have known vulnerabilities or improper configurations.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;10-18-monkey-deprecated-or-not-publicaly-released&quot;&gt;10-18 Monkey (deprecated or not publicaly released)&lt;/h3&gt;

&lt;p&gt;A tool that detects problems with localization and internationalization (known by the abbreviations “l10n” and “i18n”)
for software serving customers across different geographic regions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-tools-for-chaos-engineering&quot;&gt;Other Tools for Chaos Engineering&lt;/h2&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chap-chaos-automation-platform&quot;&gt;ChAP (Chaos Automation Platform)&lt;/h3&gt;

&lt;p&gt;ChAP was built to overcome the limitations of FIT so we can increase the safety, cadence, and breadth of experimentation.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;byte-monkey&quot;&gt;Byte-Monkey&lt;/h3&gt;

&lt;p&gt;A small Java library for testing failure scenarios in JVM applications.
It works by instrumenting application code on the fly to deliberately introduce faults such as exceptions and latency.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaosblade-by-alibaba&quot;&gt;ChaosBlade By Alibaba&lt;/h3&gt;

&lt;p&gt;ChaosBlade is a versatile tool supporting a wide range of experiment types and target platforms.
However, it lacks some useful features such as centralized reporting, experiment scheduling, target randomization, and health checks. 
It’s a great tool if you’re new to Chaos Engineering and want to experiment with different attacks.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-machine&quot;&gt;Chaos Machine&lt;/h3&gt;

&lt;p&gt;ChaosMachine is a tool that does chaos engineering at the application level in the JVM.
It concentrates on analyzing the error-handling capability of each try-catch block involved in the application by injecting exceptions.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;proofdock-chaos-engineering-platform&quot;&gt;Proofdock Chaos Engineering Platform&lt;/h3&gt;

&lt;p&gt;A chaos engineering platform that focuses on and leverages the Microsoft Azure platform and the Azure DevOps services.
Users can inject failures on the infrastructure, platform and application level.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;gremlin-platform&quot;&gt;Gremlin platform&lt;/h3&gt;

&lt;p&gt;A “failure-as-a-service” platform built to make the Internet more reliable.
It turns failure into resilience by offering engineers a fully hosted solution to safely experiment on complex systems,
in order to identify weaknesses before they impact customers and cause revenue loss.
Unlike Chaos Monkey, tools like FIT and Gremlin are able to test for a wide range of failure states beyond simple instance destruction.
In addition to killing instances, Gremlin can fill available disk space,
hog CPU and memory, overload IO, perform advanced network traffic manipulation, terminate processes, and much more.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;facebook-storm&quot;&gt;Facebook Storm&lt;/h3&gt;

&lt;p&gt;To prepare for the loss of a datacenter, Facebook regularly tests the resistance of its infrastructures to extreme events.
Known as the Storm Project, the program simulates massive data center failures.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaoslingr&quot;&gt;ChaoSlingr&lt;/h3&gt;

&lt;p&gt;ChaoSlingr is the first Open Source application of Chaos Engineering to Cyber Security.
ChaoSlingr is focused primarily on performing security experimentation on AWS Infrastructure to proactively discover system security weaknesses in complex distributed system environments.
Published on Github in September 2017.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-toolkit-by-chaosiq&quot;&gt;Chaos Toolkit by ChaosIQ&lt;/h3&gt;

&lt;p&gt;The Chaos Toolkit was born from the desire to simplify access to the discipline of chaos engineering and demonstrate that the experimentation approach can be done at different levels: infrastructure, platform but also application. The Chaos Toolkit is an open-source tool.
Few tools are as flexible in how they let you design chaos experiments.
Chaos Toolkit gives you full control over how your experiments operate, right down to the commands executed on the target system.
But because of this DIY approach, Chaos Toolkit is more of a framework that you need to build on than a ready-to-go Chaos Engineering solution&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;mangle&quot;&gt;Mangle&lt;/h3&gt;

&lt;p&gt;Mangle enables you to run chaos engineering experiments seamlessly against applications and infrastructure components to assess resiliency and fault tolerance.
It is designed to introduce faults with very little pre-configuration and can support any infrastructure that you might have including K8S,
Docker, vCenter or any Remote Machine with ssh enabled.
With its powerful plugin model,
you can define a custom fault of your choice based on a template and run it without building your code from scratch.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;chaos-mesh-by-pingcap&quot;&gt;Chaos Mesh by PingCAP&lt;/h3&gt;

&lt;p&gt;Chaos Mesh is an open-source cloud-native Chaos Engineering platform that orchestrates chaos experiments in Kubernetes environments.
It supports comprehensive types of failure simulation, including Pod failures, container failures,
network failures, file system failures, system time failures, and kernel failures.&lt;br /&gt;
Chaos Mesh is one of the few open source tools to include a fully-featured web user interface (UI) called the Chaos Dashboard.
However, its biggest limitations are its lack of node-level experiments,
lack of native scheduling, and lack of time limits on ad-hoc experiments.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;litmus-chaos&quot;&gt;Litmus Chaos&lt;/h3&gt;

&lt;p&gt;LitmusChaos is a toolset to do cloud-native chaos engineering.
Litmus provides tools to orchestrate chaos on Kubernetes to help SREs find weaknesses in their deployments.
SREs use Litmus to run chaos experiments initially in the staging environment and eventually in production to find bugs,
vulnerabilities. Fixing the weaknesses leads to increased resilience of the system.&lt;/p&gt;

&lt;p&gt;While Litmus is a comprehensive tool with many useful attacks and monitoring features, it comes with a steep learning curve.
Simply running an experiment is a multi-step process that involves setting permissions and annotating deployments.
Workflows help with this, especially when used through the Litmus Portal, but they still add an extra layer of complexity.
This isn’t helped by the fact that some features—like the Litmus Portal itself—don’t appear in the documentation and are only available through the project’s GitHub repository.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;which-tool-is-right-for-me&quot;&gt;Which tool is right for me?&lt;/h2&gt;

&lt;p&gt;Ultimately, the goal of any Chaos Engineering tool is to help you achieve greater reliability.
The question is: which tool will help you achieve that goal faster and more easily? 
This question of course depends on your tech stack, the experience and expertise of your engineering team,
and how much time you can dedicate to testing and evaluating each tool.&lt;/p&gt;

&lt;p&gt;The following table are just a handful of tools which are interesting for our preferred stack.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;platform&lt;/th&gt;
      &lt;th&gt;Attack types&lt;/th&gt;
      &lt;th&gt;App Attacks&lt;/th&gt;
      &lt;th&gt;Container / Pod attacks&lt;/th&gt;
      &lt;th&gt;GUI ?&lt;/th&gt;
      &lt;th&gt;CLI ?&lt;/th&gt;
      &lt;th&gt;Metrics&lt;/th&gt;
      &lt;th&gt;Attack Sharing&lt;/th&gt;
      &lt;th&gt;Attack Halting&lt;/th&gt;
      &lt;th&gt;Attack Scheduling&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Monkey&lt;/td&gt;
      &lt;td&gt;Spinnaker&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gremlin&lt;/td&gt;
      &lt;td&gt;SaaS&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Blade&lt;/td&gt;
      &lt;td&gt;K8S, Docker, Cloud, Bare metal&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Toolkit&lt;/td&gt;
      &lt;td&gt;K8S, Docker, Cloud, Bare metal&lt;/td&gt;
      &lt;td&gt;depends on driver&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chaos Mesh&lt;/td&gt;
      &lt;td&gt;K8S&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Litmus&lt;/td&gt;
      &lt;td&gt;K8S&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;!! Chaos Toolkit is the only tool you can use to create Custom Attacks with !!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Any organization that builds and operates a distributed system and wishes to achieve a high rate of development velocity will want to add Chaos Engineering to their collection of approaches for improving resiliency.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is still a very young field, and the techniques and associated tooling are still evolving.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://principlesofchaos.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Principles of Chaos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/content/chaos-engineering/#chapter_cmm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;O’Reilly Chaos Engineering paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chaos_engineering#History&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bmc.com/blogs/chaos-monkey/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Monkey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/SimianArmy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Simian Army&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/fit-failure-injection-testing-35d8e2a9bb2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;FIT by Netflix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/chap-chaos-automation-platform-53e6d528371f&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Automation Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/community/tutorials/how-to-run-a-gameday/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to run a Chaos GameDay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adhorn.medium.com/chaos-engineering-ab0cc9fbd12a&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Chaos Engineering post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/chaos-monkey/the-simian-army/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gremlin - Chaos Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gremlin.com/community/tutorials/chaos-engineering-tools-comparison/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gremlin - Chaos Engineering tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PagerDuty - Post Mortem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Verte&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-verte/&quot;, &quot;avatar&quot;=&gt;&quot;tim-verte.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;tim.verte@ordina.be&quot;, &quot;phone&quot;=&gt;32472466091, &quot;bio&quot;=&gt;&quot;Tim is a Java consultant at Ordina Belgium. He enjoys to discover new technologies and challenges. Besides his work he has a keen interest in everything that involves sports and music.&quot;}</name><email>tim.verte@ordina.be</email></author><category term="Cloud" /><category term="Chaos Engineering" /><category term="DevOps" /><category term="Chaos" /><category term="Backend" /><category term="Netflix" /><category term="Simian Army" /><category term="Resiliency" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-14-chaos-engineering/thumbnail.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-14-chaos-engineering/thumbnail.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Serverless Kubernetes deployments with AWS Fargate</title><link href="https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments.html" rel="alternate" type="text/html" title="Serverless Kubernetes deployments with AWS Fargate" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2020/12/10/aws-fargate-serverless-deployments.html">&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;An AWS account&lt;/li&gt;
  &lt;li&gt;kubectl, aws-cli &amp;amp; eksctl installed&lt;/li&gt;
  &lt;li&gt;Some Kubernetes knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Introduced in late 2017, AWS Fargate is a compute engine for serverless container deployments. 
The engine allows you to run containers without worrying about your infrastructure. &lt;br /&gt;
Node scaling and configuration is done by AWS, which means that you only have to worry about the health of your own resources, not of your Kubernetes infrastructure.&lt;/p&gt;

&lt;p&gt;Fargate eliminates the struggle of configuring, scaling and initializing nodes on its own.
Because as we know, managing clusters / servers / nodes can be a challenging and expensive task.&lt;/p&gt;

&lt;p&gt;Pricing is based on the CPU and RAM that is allocated to your pod.
Instead of paying for compute nodes you pay for resources allocated to your pods which could drastically decrease computing costs.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;AWS Fargate was initially introduced for ECS in 2017. Later in 2019 they added support for EKS.
You can configure your current cluster to integrate Fargate. 
This requires a Fargate pod execution role (to communicate with different Amazon services), and a Fargate profile to specify which pods should use Fargate.
You can also create a new cluster with instant Fargate support. 
For simplicity, I will initialize a new cluster.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eksctl create cluster --name &amp;lt;cluster-name&amp;gt; --region eu-west-1 --fargate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The initialization process takes a while, so don’t wait around for it and find something else to do in the meantime.
It shouldn’t take more than 15 minutes.&lt;/p&gt;

&lt;h1 id=&quot;fargate-in-action&quot;&gt;Fargate in action&lt;/h1&gt;
&lt;p&gt;After your cluster has been created, you should see two Fargate nodes already running.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get nodes 
NAME                                                    STATUS    ROLES     AGE       VERSION
fargate-ip-192-168-124-46.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    5m       v1.18.8-eks-7c9bda
fargate-ip-192-168-97-139.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    5m       v1.18.8-eks-7c9bda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is because of the two CoreDNS pods that get spun up after the setup of the cluster.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get pods -n kube-system
NAME                     READY     STATUS    RESTARTS   AGE
coredns-58c89c64-pmjh4   1/1       Running   0          12m
coredns-58c89c64-rm4dr   1/1       Running   0          12m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each pod gets its own Fargate node and represents the resources that the pods get in order to successfully function. 
When you create a new deployment, you will notice that you have a pod in the status pending creation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl create deployment spring-boot-docker --image springio/gs-spring-boot-docker
deployment.apps/spring-boot-docker created

$&amp;gt; kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
spring-boot-docker-6656b9d9fb-h82pk   0/1       Pending   0          5s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because Fargate has yet to create a virtual node for the Pod to run in.
After a few seconds you can see that a new node has been added to your cluster.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get nodes 
NAME                                                    STATUS    ROLES     AGE       VERSION
fargate-ip-192-168-113-246.eu-west-1.compute.internal   Ready     &amp;lt;none&amp;gt;    16s       v1.18.8-eks-7c9bda
fargate-ip-192-168-124-46.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    52m       v1.18.8-eks-7c9bda
fargate-ip-192-168-97-139.eu-west-1.compute.internal    Ready     &amp;lt;none&amp;gt;    52m       v1.18.8-eks-7c9bda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that your virtual node has been added you can see that your pod is starting up.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
spring-boot-docker-6656b9d9fb-h82pk   1/1       Running   0          2m26s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So right now we have a fully functioning Kubernetes cluster without having to touch or set up any nodes or configuration.
Fargate takes away all the stress of maintaining and scaling worker nodes, so you can concentrate on the actual deployment of your application(s) and not worry about cluster resources.
Of course, you would still need additional resources to access your application from outside the cluster, but it’s not covered in this post as this does not fall under the Fargate scope.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a keen passion for Spring Boot projects and Java technology. He loves to play around with various technologies and frameworks and is very passionated and eager to learn about everything related to cloud development.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Fargate" /><category term="Kubernetes" /><summary type="html">Prerequisites An AWS account kubectl, aws-cli &amp;amp; eksctl installed Some Kubernetes knowledge</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-12-10-aws-fargate-serverless-deployments.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-12-10-aws-fargate-serverless-deployments.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">That is Quite the Story</title><link href="https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story.html" rel="alternate" type="text/html" title="That is Quite the Story" /><published>2020-11-25T00:00:00+00:00</published><updated>2020-11-25T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2020/11/25/Quite-The-Story.html">&lt;p&gt;October marked the 2020 edition of &lt;a href=&quot;https://ba-beyond.eu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the BA &amp;amp; Beyond conference&lt;/a&gt;. 
As with all conferences being held in these COVID-ridden times, it was a virtual gathering and there were a variety of people from across the globe that came to share their insights, experiences and opinions on topics from their respective fields of knowledge. 
This ranged from agile practices to data science to process analysis and management. 
For me the workshop that struck a chord was given by Lori L. Silverman (&lt;a href=&quot;https://www.partnersforprogress.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Partners for Progress&lt;/a&gt;). 
She is a leading authority on decision management and its underlying data analysis techniques and an advocate for business storytelling. 
This workshop was titled “Facts Tell, Stories Sell”.&lt;/p&gt;

&lt;h2 id=&quot;a-new-approach&quot;&gt;A New Approach&lt;/h2&gt;

&lt;p&gt;A typical data analysis project starts with a business sponsor handing a large blob of data to a team of data scientists, of whom he asks to make heads and tails about the numbers in front of them. 
The sponsor wants actionable insight on which he can act to enhance whatever goals and objectives the sponsor is chasing. 
What comes naturally to most data scientists is to employ the OSEMN framework. 
This framework consists of the following five steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Obtain: Gather all accessible data from relevant data sources.&lt;/li&gt;
  &lt;li&gt;Scrub: Clean up and formalize the retrieved data into a format that can be interpreted by a machine or data analyst.&lt;/li&gt;
  &lt;li&gt;Explore: Detect significant patterns and trends within the available data sets.&lt;/li&gt;
  &lt;li&gt;Model: Construct models to predict and forecast future data entries.&lt;/li&gt;
  &lt;li&gt;iNterpret: Utilize the models to gain actionable insight. In essence we apply the models to detect good and bad cause-and-effect sets and use them to duplicate these results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lori has a SMARTER approach for this type of undertaking. 
This approach expands on the OSEMN steps. 
Where OSEMN just stops after handing over the conclusions of the analysis and hopefully providing the much-needed actionable insight, the SMARTER approach actually takes these insights and executes actions based on decisions based on these insights. 
This is very similar to the realization that DevOps brought to the development world. 
A project for the development of a solution doesn’t simply stop when the results are delivered but goes further with actually following up on the solution when it is running in production.&lt;/p&gt;

&lt;p&gt;The steps that make up the SMARTER approach are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Seek Context: Detail the context in which the data science analysis originated.&lt;/li&gt;
  &lt;li&gt;Manage the Data: Collect all relevant data and organize it in a useful structure.&lt;/li&gt;
  &lt;li&gt;Assure Confidence: Clean up the data to increase the level of trust that can be had in said data.&lt;/li&gt;
  &lt;li&gt;Reveal Insights: Determine the insights that can be extracted from the data at hand.&lt;/li&gt;
  &lt;li&gt;Take a Stand: Formulate decisions on how to proceed with these insights.&lt;/li&gt;
  &lt;li&gt;Execute Decision: Act on the decisions that have been agreed upon.&lt;/li&gt;
  &lt;li&gt;Relay Results: Verify and report on the results of the actions to the different stakeholders.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only does the SMARTER approach have a higher scrabble score, these additional steps in the process tackle some of the common issues with data science projects and why they tend to fall short of what is needed. 
The first additional step is pivotal to tackling these issues. 
More often than not it will transpire that data analysis start off on the wrong foot. 
They get asked a quandary by a sponsor, but the analysts will not have a proper frame in which to place this. 
The first step of SMARTER determines the context. 
Why is the sponsor asking the questions he/she is asking? 
But learning the context and the business value attached to the questions, a more critical view can be taken on the questions themselves. 
Are we looking at the right things, and are we asked the correct questions to come to the insights needed to improve on the associated business value? 
Once the big picture is clear, the plan of attack presents itself much more clearly. 
Or if you would like to hear it in Lori’s own words, check out her &lt;a href=&quot;https://www.youtube.com/watch?v=u4Vx0Ufe2kQ&amp;amp;feature=youtu.be&amp;amp;ab_channel=LoriSilverman&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube presence&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/SMARTER.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After performing the necessary steps already formulated by OSEMN, we should not only have results of our data analysis. 
Data in any form or structure isn’t insight. And we need actionable insights if the business value is going to increase. 
Actionable insight works on three layers: knowledge (taking stock of what we know at present), the current state (what we need to tackle today), and the future state (what we might innovate to improve future dealings). 
A plan of action should be formulated to act on the insights we have gathered, and decisions should be taken on how to proceed (step T). 
Once the plan is clear and everyone is aligned, the team should execute the actions dictated by the decisions that have been made (step E), and the results of these actions should be communicated to the different stakeholders (final step R).&lt;/p&gt;

&lt;h2 id=&quot;business-storytelling&quot;&gt;Business Storytelling&lt;/h2&gt;

&lt;p&gt;These last steps are where business storytelling comes in. 
Although it is certainly already useful to set the context, convincing stakeholders about what the most important actionable insights are and what decisions to take and how to proceed, becomes easier and more relatable in the form of a story. 
The infographic below taken from the &lt;a href=&quot;https://www.stayingaliveuk.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Staying Alive UK website&lt;/a&gt; shows to power of a good story, and how it is processed by the brain.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/storytelling.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Constructing such a story is a skill of itself. 
Whereas it used to be a common pastime for us as a species, with hunters telling tales of their hunts around the campfire, or priests telling entire myths populated by a pantheon of gods and heroes, nowadays most of us have delegated this to a subsection of society: the writers of novels, movies, and music. 
So, we might have forgotten how to go about crafting a proper story. 
In essence, every story consists of 5 elements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The Setting: This is the framework in which the project will take place. It details the planning, the budget associated with the project, the locality of where the project will take place, as well as any other important factors that will have an effect on it.&lt;/li&gt;
  &lt;li&gt;The Characters: These are the stakeholders that will be participating in the gathering of insight and the making of decisions afterwards. The story should indicate their involvement and what they expect from the conclusion of the story.&lt;/li&gt;
  &lt;li&gt;The Plot: The plot strings together the events that happen in a story. It paints the roadmap of how the story will progress. This is a listing of all actions the project will undertake to get to actionable insight as well as the actions needed to be executed once decisions have been made.&lt;/li&gt;
  &lt;li&gt;The Conflict: During the rollout of the project, there is always conflict that takes the center stage. For the story to have a happy ending, we need to outline the obstacles we will face when trying to get to the needed insight.&lt;/li&gt;
  &lt;li&gt;The Theme: Where the plot lists and strings together the different actions that need to be taken, the theme gives these actions their why. This is the opportunity or problem that is the initial trigger for starting the project. It is the origin or intro for the story that determines how we go about realizing it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/img/2020-11-25-Quite-The-Story/storyelements.png&quot; alt=&quot;Workspace&quot; class=&quot;image&quot; style=&quot;margin:0px auto; max-width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarities with this way of thinking can be found in the most data driven world we know: the stock market. 
Where we have the champion of the efficient markets, Eugene Fama, Nobel prize winner for economics, stating that information gets absorbed and reflected by the market instantly, we also have his co-Nobel prize winner, Robert Shiller, sterling professor of Economics at Yale University painting a different picture. 
Professor Shiller hearkens back to the days of the first illustrious economist, Adam Smith. 
In his book “&lt;a href=&quot;https://www.amazon.co.uk/Theory-Moral-Sentiments-Penguin-Classics/dp/0143105922/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Theory of the Moral Sentiment&lt;/a&gt;”, Adam Smith expresses that companies are not solely driven by a need to maximize their profit line, but also be the need to be praiseworthy. 
Not to get praise but be worthy of it. 
Professor Shiller also elaborates on his beliefs that narratives can help us understand and predict evolutions that will take place, and in doing so help us to better prepare (or make decisions about) for what is to come. 
This is further detailed in his book “&lt;a href=&quot;https://www.amazon.co.uk/Narrative-Economics-Stories-Economic-Events/dp/0691182299/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Narrative Economics&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;When telling such stories, it is important to keep a positive tone. 
Research shows that negative news heavily influences the decision-making process. 
More specifically, it impacts the willingness of individuals to shift away from their respective opinions towards a more fitting decision. 
A study by Bradley R. Staats, Diwas S. KC, and Francesca Gino titled “Maintaining Beliefs in the Face of Negative News: The Moderating Role of Experience. Management Science” (2017) published several findings on this topic:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Negative news makes people change their views after hearing it.&lt;/li&gt;
  &lt;li&gt;People who have a great deal of experience on the topic will be less likely to change their decision when confronted with bad news.&lt;/li&gt;
  &lt;li&gt;Similarly, people who are surrounded with more experienced peers are also less likely to change their opinions in light of such news.&lt;/li&gt;
  &lt;li&gt;Negative news gets dismissed more quickly when presented to more experienced individuals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Stories are powerful tools to guide projects that need to gather actionable insight and form the decisions that are needed to move forward and address the initial requirement be it an opportunity or a problem. 
They give a sense of familiarity to the different participants. 
They provide a form of abstraction on the complexities of the project that can serve as a reduction of said complexities when communicating with those stakeholders that don’t need to give into the nitty-gritty details. 
And last but not least, they present a unified way of thinking about the project that helps with the onboarding of the stakeholders as well as the marketing towards external parties.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Peter&quot;, &quot;last_name&quot;=&gt;&quot;De Kinder&quot;, &quot;github&quot;=&gt;&quot;peterdekinder&quot;, &quot;linkedin&quot;=&gt;&quot;peterdekinder&quot;, &quot;permalink&quot;=&gt;&quot;/author/peterdekinder/&quot;, &quot;avatar&quot;=&gt;&quot;peterdekinder.jpg&quot;, &quot;title&quot;=&gt;&quot;Solution Architect&quot;, &quot;email&quot;=&gt;&quot;peter.dekinder@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Peter is a Solution Architect with firm roots in the Java technosphere, but with a wide interest in all things architecture. His areas of specialization include Service Oriented Architectures, Business Process Management and Security.&quot;}</name><email>peter.dekinder@ordina.be</email></author><category term="Architecture" /><category term="architecture" /><category term="business architecture" /><category term="technical leadership" /><category term="leadership" /><summary type="html">October marked the 2020 edition of the BA &amp;amp; Beyond conference. As with all conferences being held in these COVID-ridden times, it was a virtual gathering and there were a variety of people from across the globe that came to share their insights, experiences and opinions on topics from their respective fields of knowledge. This ranged from agile practices to data science to process analysis and management. For me the workshop that struck a chord was given by Lori L. Silverman (Partners for Progress). She is a leading authority on decision management and its underlying data analysis techniques and an advocate for business storytelling. This workshop was titled “Facts Tell, Stories Sell”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-25-Quite-The-Story/storiesmatter.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-25-Quite-The-Story/storiesmatter.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Monitoring Spring Boot with Prometheus and Grafana</title><link href="https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana.html" rel="alternate" type="text/html" title="Monitoring Spring Boot with Prometheus and Grafana" /><published>2020-11-16T00:00:00+00:00</published><updated>2020-11-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana</id><content type="html" xml:base="https://ordina-jworks.github.io/monitoring/2020/11/16/monitoring-spring-prometheus-grafana.html">&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prometheus&quot; id=&quot;markdown-toc-prometheus&quot;&gt;Prometheus&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-prometheus&quot; id=&quot;markdown-toc-what-is-prometheus&quot;&gt;What is Prometheus?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-do-we-need-prometheus&quot; id=&quot;markdown-toc-why-do-we-need-prometheus&quot;&gt;Why do we need Prometheus?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-it-works&quot; id=&quot;markdown-toc-how-it-works&quot;&gt;How it works&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#prometheus-server&quot; id=&quot;markdown-toc-prometheus-server&quot;&gt;Prometheus server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#prometheus-targets&quot; id=&quot;markdown-toc-prometheus-targets&quot;&gt;Prometheus targets&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#micrometer&quot; id=&quot;markdown-toc-micrometer&quot;&gt;Micrometer&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configuring-prometheus&quot; id=&quot;markdown-toc-configuring-prometheus&quot;&gt;Configuring Prometheus&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#grafana&quot; id=&quot;markdown-toc-grafana&quot;&gt;Grafana&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-grafana&quot; id=&quot;markdown-toc-what-is-grafana&quot;&gt;What is Grafana&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-grafana&quot; id=&quot;markdown-toc-why-grafana&quot;&gt;Why Grafana&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo-project&quot; id=&quot;markdown-toc-demo-project&quot;&gt;Demo project&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-spring-boot&quot; id=&quot;markdown-toc-setup-spring-boot&quot;&gt;Setup Spring Boot&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#adding-our-own-custom-metrics&quot; id=&quot;markdown-toc-adding-our-own-custom-metrics&quot;&gt;Adding our own custom metrics&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#demometrics-class&quot; id=&quot;markdown-toc-demometrics-class&quot;&gt;DemoMetrics class&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#demometricsscheduler-class&quot; id=&quot;markdown-toc-demometricsscheduler-class&quot;&gt;DemoMetricsScheduler class&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-prometheus&quot; id=&quot;markdown-toc-setup-prometheus&quot;&gt;Setup Prometheus&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-grafana&quot; id=&quot;markdown-toc-setup-grafana&quot;&gt;Setup Grafana&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#adding-a-custom-metric-panel&quot; id=&quot;markdown-toc-adding-a-custom-metric-panel&quot;&gt;Adding a custom metric panel&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In a distributed landscape where we are working with microservices, serverless applications, or just event-driven architecture as a whole, observability, which comprises monitoring, logging, tracing, and alerting, is an important architectural concern.&lt;/p&gt;

&lt;p&gt;There are a few reasons why we want visibility in our highly distributed systems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Issues will occur, even when our best employees have built it.&lt;/li&gt;
  &lt;li&gt;Distributed systems generate distributed failures, which can be devastating when we are not prepared in advance.&lt;/li&gt;
  &lt;li&gt;Reveal mistakes early, which is great for improvement and learning.&lt;/li&gt;
  &lt;li&gt;It keeps us accountable.&lt;/li&gt;
  &lt;li&gt;Reduce the mean time to resolution (MTTR).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blogpost I will explain the core concepts of Prometheus and Grafana.&lt;br /&gt;
In the last section I set up a demo project, so you can follow along and implement monitoring in your own applications.&lt;/p&gt;

&lt;h1 id=&quot;prometheus&quot;&gt;Prometheus&lt;/h1&gt;

&lt;h2 id=&quot;what-is-prometheus&quot;&gt;What is Prometheus?&lt;/h2&gt;

&lt;p&gt;Prometheus, originally developed by SoundCloud is an open source and community-driven project that graduated from the Cloud Native Computing Foundation.
It can aggregate data from almost everything:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
  &lt;li&gt;Multiple languages&lt;/li&gt;
  &lt;li&gt;Linux servers&lt;/li&gt;
  &lt;li&gt;Windows servers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-do-we-need-prometheus&quot;&gt;Why do we need Prometheus?&lt;/h2&gt;

&lt;p&gt;In our modern times of microservices, DevOps is becoming more and more complex and therefore needs automation.&lt;br /&gt;
We have hundreds of processes running over multiple servers, and they are all interconnected.&lt;/p&gt;

&lt;p&gt;If we would not monitor these services then we have no clue about what is happening on hardware level or application level.&lt;br /&gt;
There are many things which we want to be notified about, like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Errors&lt;/li&gt;
  &lt;li&gt;Response latency&lt;/li&gt;
  &lt;li&gt;System overload&lt;/li&gt;
  &lt;li&gt;Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we are working with so many moving pieces, we want to be able to quickly identify a problem when something goes wrong inside one of our services.&lt;br /&gt;
If we wouldn’t monitor, it could be very time-consuming, since we have no idea where to look.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;an-example-of-a-failing-service&quot;&gt;An example of a failing service&lt;/h3&gt;

&lt;p&gt;Imagine that one server ran out of memory and therefore knocked off a running service container, which syncs two databases.&lt;br /&gt;
One of those databases gets used by the authentication service, which now also stops working, because the database is unavailable.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;prometheus server&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/failing-servers.jpg&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;How do you know what went wrong, when your application that depends on the authentication service, now can’t authenticate users anymore?&lt;br /&gt;
The only thing we would see is an error message: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR: Authentication failed&lt;/code&gt;.&lt;br /&gt;
We would need to work backwards over every service, all the way back to the stopped container, to find out what is causing the problem.&lt;/p&gt;

&lt;p&gt;A better way would be to have a tool which:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Constantly monitors all services&lt;/li&gt;
  &lt;li&gt;Alerts system admins when something crashes&lt;/li&gt;
  &lt;li&gt;Identifies problems before they occur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus is exactly that tool, it can identify memory usage, CPU usage, available disk space, etc.&lt;br /&gt;
We can predefine certain thresholds about which we want to get notified.&lt;/p&gt;

&lt;p&gt;In our example it could have been that the memory of our failing server would have reached 70% memory usage for more than one hour, and could’ve sent an alert to our admins before the crash happened.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;h3 id=&quot;prometheus-server&quot;&gt;Prometheus server&lt;/h3&gt;

&lt;p&gt;The server does the actual monitoring work, and it consists of three main parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Storage, which is a time series database.&lt;/li&gt;
  &lt;li&gt;Data retrieval worker, which is pulling the data from our target services.&lt;/li&gt;
  &lt;li&gt;Webserver, which accepts &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PromQL&lt;/a&gt; queries to get data from our DB.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;prometheus server&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prom-server.jpg&quot; style=&quot;max-width: 100%; height:auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Even though Prometheus has its own UI to show graphs and metrics, we will be using Grafana as an extra layer on top of this webserver, to query and visualize our database.&lt;/p&gt;

&lt;h3 id=&quot;prometheus-targets&quot;&gt;Prometheus targets&lt;/h3&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;what-does-it-monitor&quot;&gt;What does it monitor?&lt;/h4&gt;

&lt;p&gt;Prometheus monitors nearly anything. It could be a Linux/windows server, Apache server, single applications, services, etc.&lt;br /&gt;
It monitors &lt;strong&gt;units&lt;/strong&gt; on those targets like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CPU usage&lt;/li&gt;
  &lt;li&gt;Memory/ Disk usage&lt;/li&gt;
  &lt;li&gt;Request count&lt;/li&gt;
  &lt;li&gt;Request durations&lt;/li&gt;
  &lt;li&gt;Exceptions count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The units that we monitor are called metrics, which get saved into the Prometheus time-series database.&lt;br /&gt;
Prometheus’ metrics are formatted like a human-readable text file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus endpoint actuator&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-endpoint.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this file we can see that there is a “HELP” comment which describes what the metric is, and we have a “TYPE” which can be one of four metric-types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Counter: how many times X happened (exceptions)&lt;/li&gt;
  &lt;li&gt;Gauge: what is the current value of X now ? (disk usage, cpu etc)&lt;/li&gt;
  &lt;li&gt;Histogram: how long or how big?&lt;/li&gt;
  &lt;li&gt;Summary: similar to histogram it monitors request durations and response sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;collecting-metrics-from-targets&quot;&gt;Collecting metrics from targets&lt;/h4&gt;

&lt;p&gt;There are basically two ways of ingesting metrics into a monitoring system. &lt;br /&gt;
We can either push the data from our clients to our monitoring system, or we pull the data from the monitoring system.&lt;/p&gt;

&lt;p&gt;Prometheus is a service which polls a set of configured targets to intermittently fetch their metric values.&lt;br /&gt;
In Prometheus terminology, this polling is called scraping.&lt;/p&gt;

&lt;p&gt;There is no clear-cut answer about which one is the best, they both have their pros and cons, but some big disadvantages for pushing data are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;possibility of flooding the network.&lt;/li&gt;
  &lt;li&gt;risk of package loss.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;pull data image&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/pull-data.jpg&quot; style=&quot;max-width: 100%; height:auto&quot; target=&quot;_blank&quot; class=&quot;image&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The data which gets exposed on the endpoint needs to be in the correct format, one which Prometheus can understand.&lt;/p&gt;

&lt;p&gt;As stated before, Prometheus can monitor a lot of different things, servers, services, databases, etc.&lt;br /&gt;
Some servers even have a metrics endpoint enabled by default, so for those we don’t have to change anything.&lt;br /&gt;
For the ones who don’t have an endpoint enabled by default, we need an exporter.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;exporters&quot;&gt;Exporters&lt;/h4&gt;

&lt;p&gt;There are a number of libraries and servers which help in exporting existing metrics from third-party systems as Prometheus metrics.
You can have a look at the &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exporters/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;exporters and integration tools&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;On a side note, these tools are also available as Docker images, so we can use them inside Kubernetes clusters.&lt;br /&gt;
We can run an exporter docker image for a MySQL database as a side container inside the MySQL pod, connect to it and start translating data, to expose it on the metrics endpoint.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;monitoring-our-own-application&quot;&gt;Monitoring our own application&lt;/h4&gt;

&lt;p&gt;If we want to add our own instrumentation to our code, to know how many server resources our own application is using, how many requests it is handling or how many exceptions occurred, then we need to use one of the &lt;a href=&quot;https://prometheus.io/docs/instrumenting/clientlibs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;client libraries&lt;/a&gt;.
These libraries will enable us to declare all the metrics we deem important in our application, and expose them on the metrics endpoint.&lt;/p&gt;

&lt;h3 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h3&gt;

&lt;p&gt;To monitor our Spring Boot application we will be using an exporter named Micrometer.&lt;br /&gt;
Micrometer is an open-source project and provides a metric facade that exposes metric data in a vendor-neutral format which Prometheus can ingest.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Micrometer provides a simple facade over the instrumentation clients for the most popular monitoring systems, allowing you to instrument your JVM-based application code without vendor lock-in. Think SLF4J, but for metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Micrometer is not part of the Spring ecosystem and needs to be added as a dependency. In our demo application we will add this to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file.
For a deeper understanding, check out our &lt;a href=&quot;https://ordina-jworks.github.io/microservices/2017/09/17/monitoring-your-microservices-with-micrometer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; about Micrometer.&lt;/p&gt;

&lt;h2 id=&quot;configuring-prometheus&quot;&gt;Configuring Prometheus&lt;/h2&gt;

&lt;p&gt;To instruct Prometheus on what it needs to scrape, we create a &lt;strong&gt;prometheus.yml&lt;/strong&gt; configuration file.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus configuration file&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/promyml.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In this configuration file we declare a few things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;global configs, like how often it will scrape its targets.&lt;/li&gt;
  &lt;li&gt;we can declare &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rule files&lt;/a&gt;, so when we meet a certain condition, we get an alert.&lt;/li&gt;
  &lt;li&gt;which services it needs to monitor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this example you can see that Prometheus will monitor two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our Spring Boot application&lt;/li&gt;
  &lt;li&gt;Its own health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus expects the data of our targets to be exposed on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/metrics&lt;/code&gt; endpoint, unless otherwise declared in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics_path&lt;/code&gt; field.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;alerts&quot;&gt;Alerts&lt;/h3&gt;

&lt;p&gt;With Prometheus, we have the possibility to get notified when metrics have reached a certain point, which we can declare in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rules&lt;/code&gt; files. 
Prometheus has a component which is called the “Alertmanager”, and it can send notifications over various channels like emails, Slack, PagerDuty, etc.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;querying-our-data&quot;&gt;Querying our data&lt;/h3&gt;

&lt;p&gt;Since Prometheus saves all our data in a time series database, which is located on disk in a custom timeseries format, we need to use PromQL query language, if we want to query this database.&lt;/p&gt;

&lt;p&gt;We can do this via the Prometheus WebUI, or we can use some more powerful visualization tools like Grafana.&lt;/p&gt;

&lt;h1 id=&quot;grafana&quot;&gt;Grafana&lt;/h1&gt;

&lt;h2 id=&quot;what-is-grafana&quot;&gt;What is Grafana&lt;/h2&gt;

&lt;p&gt;Grafana is an open-source metric analytics &amp;amp; visualization application.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is used for visualizing time series data for infrastructure and application analytics.&lt;/li&gt;
  &lt;li&gt;It is also a web application which can be deployed anywhere users want.&lt;/li&gt;
  &lt;li&gt;It can target a data source from Prometheus and use its customizable panels to give users powerful visualization of the data from any infrastructure under management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-grafana&quot;&gt;Why Grafana&lt;/h2&gt;

&lt;p&gt;One of the significant advantages of Grafana are its customization possibilities.&lt;br /&gt;
It’s effortless to customize the visualization for vast amounts of data.&lt;br /&gt;
We can choose a linear graph, a single number panel, a gauge, a table, or a heatmap to display our data.&lt;br /&gt;
We can also sort all our data with various labels so data with different labels will go to different panels.&lt;/p&gt;

&lt;p&gt;Last but not least, there are a ton of &lt;a href=&quot;https://grafana.com/grafana/dashboards&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;premade dashboard-templates&lt;/a&gt; ready to be imported, so we don’t have to create everything manually.&lt;/p&gt;

&lt;h1 id=&quot;demo-project&quot;&gt;Demo project&lt;/h1&gt;

&lt;h2 id=&quot;setup-spring-boot&quot;&gt;Setup Spring Boot&lt;/h2&gt;

&lt;p&gt;To demonstrate how to implement Prometheus and Grafana in your own projects, I will go through the steps to set up a basic Spring Boot application which we monitor by using Docker images of Prometheus and Grafana.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Set up a regular Spring Boot application by using &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Initializr&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add dependency for Actuator
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add dependency for Micrometer
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.micrometer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Expose our needed Prometheus endpoint in the application.properties file
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;management.endpoints.web.exposure.include=prometheus
management.endpoint.health.show-details=always
management.metrics.tags.application= MonitoringSpringDemoProject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After this we can run the application and browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080/actuator&lt;/code&gt;, where we can see all the available endpoints. The one we need and will use to monitor this application, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080/actuator/prometheus&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus endpoint actuator&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-endpoint.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-our-own-custom-metrics&quot;&gt;Adding our own custom metrics&lt;/h3&gt;

&lt;p&gt;We can also define some custom metrics, which I will briefly demonstrate in this section.&lt;/p&gt;

&lt;p&gt;To be able to monitor custom metrics we need to import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeterRegistry&lt;/code&gt; from the Micrometer library and inject it into our class. 
This gives us the possibility to use &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java#L25&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;counters&lt;/a&gt;, &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java#L23&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gauges&lt;/a&gt;, &lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java#L34&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;timers&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;To demonstrate how we can use this, I added two classes in our basic Spring application.&lt;br /&gt;
DemoMetrics has a custom Counter and Gauge, which will get updated every second through our DemoMetricsScheduler class.&lt;br /&gt;
The counter gets incremented by one, and the gauge will get a random number between 1 and 100.&lt;/p&gt;

&lt;h5 id=&quot;demometrics-class&quot;&gt;DemoMetrics class&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoGauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DemoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo_counter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoGauge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo_gauge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomMetricsData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoGauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRandomNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRandomNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;max must be greater than min&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;demometricsscheduler-class&quot;&gt;DemoMetricsScheduler class&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetricsScheduler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DemoMetricsScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DemoMetrics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demoMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;triggerCustomMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;demoMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomMetricsData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are able to see our custom metrics on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/prometheus&lt;/code&gt; endpoint, as you can see below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus custom metrics text&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/custom_metrics.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-prometheus&quot;&gt;Setup Prometheus&lt;/h2&gt;

&lt;p&gt;The easiest way to run Prometheus is via a Docker image which we can get by running:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull prom/prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After we download the image, we need to configure our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.yml&lt;/code&gt; file. 
Since I want to demonstrate how to monitor a Spring Boot application, as well as Prometheus itself, it should look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prometheus'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9090'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;spring-actuator'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;metrics_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/actuator/prometheus'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;192.168.0.9:8080'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We define two targets which it needs to monitor, our Spring application and Prometheus.&lt;br /&gt;
Since we run Prometheus from inside Docker we need to enter the host-ip which is in my case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards we can run the Prometheus image by running the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 9090:9090 -v &amp;lt;PATH_TO_prometheus.yml_FILE&amp;gt;:/etc/prometheus/prometheus.yml prom/prometheus 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We mount the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.yml&lt;/code&gt; config file into the Prometheus image and expose port 9090, to the outside of Docker.&lt;/p&gt;

&lt;p&gt;When this is up and running we can access the Prometheus webUI on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:9090&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus UI&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheusUI.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When we navigate to Status &amp;gt; Targets, we can check if our connections are up and are correctly configured.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus target tab&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/prometheus-target.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Yet again, we can check our custom metrics in the Prometheus UI, by selecting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_gauge&lt;/code&gt; and inspecting our graph.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Prometheus custom metrics graph&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/custom-graph.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-grafana&quot;&gt;Setup Grafana&lt;/h2&gt;

&lt;p&gt;To run Grafana we will use the same approach as with Prometheus.&lt;/p&gt;

&lt;p&gt;We download and run the image from Docker Hub.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 3000:3000 grafana/grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can access the Grafana UI from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;, where you can enter “admin” as login and password.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana UI&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-ui.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After we arrive at the landing page, we need to set up a data source for Grafana.&lt;br /&gt;
Navigate to Configuration &amp;gt; Data Sources, add a Prometheus data source and configure it like the example below.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-datasource.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;For this example I used one of the premade dashboards which you can find on the &lt;a href=&quot;https://grafana.com/grafana/dashboards&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Grafana Dashboards&lt;/a&gt; page.&lt;br /&gt;
The dashboard I used to monitor our application is the JVM Micrometer dashboard with import id: 4701.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/grafana-import.PNG&quot; width=&quot;650&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Give your dashboard a custom name and select the prometheus data source we configured in step 3.&lt;br /&gt;
Now we have a fully pre-configured dashboard, with some important metrics showcased, out of the box.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana dashboard&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-done.png&quot; width=&quot;650&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-a-custom-metric-panel&quot;&gt;Adding a custom metric panel&lt;/h3&gt;

&lt;p&gt;To demonstrate how we can create a panel for one of our own custom metrics, I will list the required steps below.&lt;/p&gt;

&lt;p&gt;First we need to add a panel by clicking on “add panel” on the top of the page, and yet again on “add new panel” in the center.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-add-panel.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;Then we need to configure our panel, which we do by selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_gauge&lt;/code&gt; in the metrics field.&lt;br /&gt;
To display our graph in a prettier way, we can choose the “stat” type under the visualization tab.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-custom-panel-gauge.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;When we click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt; in the top right corner, our new panel gets added to the dashboard.&lt;/p&gt;

&lt;p&gt;Afterwards, we can do the same thing for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo_counter&lt;/code&gt; metric.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
   &lt;img alt=&quot;Grafana add another extra panel&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-custom-panel-counter.PNG&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
 &lt;/div&gt;

&lt;p&gt;After going through all of these steps, we now have an operational dashboard which monitors our Spring Boot application, with our own custom metrics.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img alt=&quot;Grafana data source&quot; src=&quot;/img/2020-11-16-monitoring-spring-prometheus-grafana/graf-dash.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; target=&quot;_blank&quot; class=&quot;image fit&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;After reading this blogpost I hope you can see that using Prometheus as a data aggregator in a distributed system is not really all that hard.&lt;br /&gt;
It has a lot of client libraries which integrate seamlessly with our infrastructure, services and applications.&lt;/p&gt;

&lt;p&gt;Using Grafana on top of his to visualize our data, feels like a breeze when we use pre-existing dashboards to quickly get things up and running.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Govaerts&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-govaerts/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-govaerts.jpg&quot;, &quot;title&quot;=&gt;&quot;Java developer&quot;, &quot;email&quot;=&gt;&quot;kevin.govaerts1@gmail.com&quot;, &quot;linkedin&quot;=&gt;&quot;kevingovaerts&quot;, &quot;bio&quot;=&gt;&quot;Kevin works as a back-end developer for Ordina Belgium, focussing mainly on Spring boot, Angular and AWS-technologies.&quot;}</name><email>kevin.govaerts1@gmail.com</email></author><category term="Monitoring" /><category term="Spring" /><category term="Prometheus" /><category term="Grafana" /><category term="Docker" /><summary type="html">Table of contents</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2020-11-16-monitoring-spring-prometheus-grafana/thumbnail.jpg" /><media:content medium="image" url="https://ordina-jworks.github.io/img/2020-11-16-monitoring-spring-prometheus-grafana/thumbnail.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>