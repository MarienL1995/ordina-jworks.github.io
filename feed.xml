<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-12-15T13:33:31+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Catching the waves of servant leadership</title><link href="https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership.html" rel="alternate" type="text/html" title="Catching the waves of servant leadership" /><published>2018-12-13T00:00:00+00:00</published><updated>2018-12-13T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2018/12/13/Catching-the-waves-of-servant-leadership.html">&lt;p&gt;As human beings, we’ve always had a complicated relationship with change.
On the one hand, we see it all around us and try to cope with the complexity of it.
Attempting to avoid or even sabotage it in order to hang on for dear life, to what we have always known to be normal, and therefore believe it to be what’s best.
On the other hand, it’s what allows us to hope and strive, what drives us towards a dream for a better future.
And so we look for ways to form it, to mould it, even manipulate it at times, thinking that whatever comes out of the change will be better and lasting.&lt;/p&gt;

&lt;p&gt;But does change have an outcome? 
Or is it endlessly moving forward? 
This continuous tension between coping and moulding makes our relationship with change a very personal one. 
Every day we strive, all of us, in this global community, to find a moment of peace with ourselves and with the ways we try to manage this uncertainty and complexity.
And sometimes, when the odds are right, in a cursory moment of clear thoughts, we discover that precious balance, and see the bigger picture. 
That’s when we embrace change and sense the opportunity…&lt;/p&gt;

&lt;p&gt;When projecting this mechanism from the personal into the organisational area, the same elements are at play. 
But the personal aspect is still the crucial driver (and the key to unlock it), that can push corporate change forward or go against it like a stubborn forceful undercurrent.&lt;/p&gt;

&lt;p&gt;Tapping into that current, though, is the key to unlocking the potential of an engaged community of professionals, and so helping the organisational culture grow organically. 
And doing that needs a ‘feel’ for what our present corporate culture is about. 
But more so it requires an understanding of what the employees building our brand - and the people creating the customer value – really strive for, 
personally and professionally.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Surfer&quot; src=&quot;/img/catching-the-waves-of-servant-leadership/surfing.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easier said than done, you think? 
Maybe so, especially when you’re working in a traditional corporate world, with siloed processes, with lots of gates and handovers, 
often distorting communication and slowing down value delivery. 
It does indeed call for a veritable paradigm shift, not just new management practices, but a management revolution; 
a shift towards a new approach, focused on what these value creators actually require in order to thrive in your organisation, for the benefit of your brand. 
Enabling them to become better, more inventive, more efficient, and allowing them to listen closely and collaborate with the customer, 
is the most successful way forward in our age of agile.&lt;/p&gt;

&lt;p&gt;This is of course not a one (wo)man show. 
Complexity is not something we can tackle with a single mind solution. 
Agile transformation, like cultural transformation, can only be set in motion by natural leaders, and by this I don’t necessarily mean ‘managers’. 
They can be emergent leaders from any level in the organisation. 
People who spread vibes, generate positive energy, think beyond the borders of their own roles and put their brains to work to reimagine how value is created. 
What defines them is that they ‘service’ their community, and that service is exactly one of their personal goals.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Surfing&quot; src=&quot;/img/catching-the-waves-of-servant-leadership/surfing2.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a manager, make sure these emergent leaders experience the freedom to act. 
Each one comes with a natural community, call it a ‘tribe’. 
Explore every nook and cranny of the company to trace them. 
Then help them to understand the agile strategy, and support them to instigate an agile mindset and a zest for growth, 
by taking small but consistent steps, clear and aligned.&lt;/p&gt;

&lt;p&gt;The organisation will be surfing their powerful waves. 
And with the help of these servant leaders throughout the company, you’ll be able to blow the wind in the right direction, towards the customer.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Not one thing ever does it, it’s a series of consistent things that makes people say, ‘Aha, it’s time for change’” - Oprah Winfrey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;recommended-reading&quot;&gt;Recommended reading&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Stephen Denning - &lt;a href=&quot;https://www.amazon.com/dp/B072J5XPTP/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Age of Agile&lt;/a&gt;: How smart companies are transforming the way work gets done&lt;/li&gt;
  &lt;li&gt;Sunil Mundra - &lt;a href=&quot;https://www.amazon.com/gp/product/B0788T1PSN/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Enterprise agility: Being agile in a changing world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Seth Godin - &lt;a href=&quot;https://www.amazon.com/gp/product/1591842336/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tribes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Em Campbell-Pretty - &lt;a href=&quot;https://www.amazon.com/gp/product/B01LZ0O4RC/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tribal Unity&lt;/a&gt;: Getting from teams to tribes by creating a one team culture&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Leadership" /><category term="Tribe" /><category term="Servant Leadership" /><category term="Enterprise Agility" /><category term="Change" /><category term="Agile Coaching" /><summary type="html">As human beings, we’ve always had a complicated relationship with change. On the one hand, we see it all around us and try to cope with the complexity of it. Attempting to avoid or even sabotage it in order to hang on for dear life, to what we have always known to be normal, and therefore believe it to be what’s best. On the other hand, it’s what allows us to hope and strive, what drives us towards a dream for a better future. And so we look for ways to form it, to mould it, even manipulate it at times, thinking that whatever comes out of the change will be better and lasting.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/catching-the-waves-of-servant-leadership/main-image.png" /></entry><entry><title type="html">dotCSS and dotJS</title><link href="https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018.html" rel="alternate" type="text/html" title="dotCSS and dotJS" /><published>2018-12-12T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/12/12/dot-css-dot-js-2018.html">&lt;h1 id=&quot;paris&quot;&gt;Paris!&lt;/h1&gt;
&lt;p&gt;This year for the first time Ordina JWorks travelled to Paris to attend a two day conference on CSS and JS, more exactly dotCSS and dotJS which are part of the dotConferences. 
dotConferences is a series of developer events in Paris that started in 2012.&lt;/p&gt;

&lt;p&gt;We only included talks on which we could elaborate. You can find all talks on the &lt;a href=&quot;https://www.youtube.com/user/dotconferences&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouYube channel&lt;/a&gt; of dotConferences.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;The JWorks team at dotJS&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/jworks-team-dotjs-dotcss-2018.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#day-1-dotcss&quot;&gt;Day 1: dotCSS&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#power-of-svg-by-sara-soueidan&quot;&gt;‘Power of SVG’ by Sara Soueidan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reading-hex-codes-by-david-desandro&quot;&gt;‘Reading Hex codes’ by David DeSandro&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variable-fonts-by-mandy-michael&quot;&gt;‘Variable fonts’ by Mandy Michael&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css-taught-me-by-dan-cederholm&quot;&gt;‘CSS taught me…’ by Dan Cederholm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#breaking-the-norm-with-creative-css-by-aga-naplocha&quot;&gt;‘Breaking the norm with creative CSS’ by Aga Naplocha&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#day-2-dotjs&quot;&gt;Day 2: dotJS&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#the-state-of-js-by-sacha-greif&quot;&gt;‘The State of JS’ by Sacha Greif&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#minecraft-is-getting-a-javascript-runtime-by-tobias-ahlin&quot;&gt;‘Minecraft is getting a JavaScript runtime’ by Tobias Ahlin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#learning-to-love-type-systems-by-lauren-tan&quot;&gt;‘Learning to Love Type Systems’ by Lauren Tan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#choosing-your-javascript-framework-by-john-papa&quot;&gt;‘Choosing Your JavaScript Framework’ by John Papa&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#javascript-on-the-desktop-fast-and-slow-by-felix-rieseberg&quot;&gt;‘JavaScript on the Desktop, Fast and Slow’ by Felix Rieseberg&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;day-1-dotcss&quot;&gt;Day 1: dotCSS&lt;/h1&gt;

&lt;h2 id=&quot;power-of-svg-by-sara-soueidan&quot;&gt;‘Power of SVG’ by &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sara Soueidan&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Some websites really have nice visuals that contribute to a pleasant user experience when visiting them. 
Think of brands that incorporate their logos in images for instance, or cover pictures that look like some Instagram filters were applied to them. 
You would think that such assets are created by designers and that they are applied directly to the webpage, but there is also a way to get those Photoshop effects straight into your browser.&lt;/p&gt;

&lt;p&gt;Sara Soueidan showed us a few possibilities to apply some stunning visual effects on images and text with code. 
The cool thing is that when using plain text, it’s still searchable! 
First she discussed some techniques that designers use to create templates in Photoshop and afterwards she applied the same techniques by only using SVG. 
It was very impressive to see how you can manipulate images by applying a set of SVG filters. 
Hopefully using those SVG techniques will become more common in the future so that more visual appealing websites will be created with the power of SVG.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/sara-soueidan-svg-filters&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://sarasoueidan.com/slides/SVG-Filters-Crash-Course.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;reading-hex-codes-by-david-desandro&quot;&gt;‘Reading Hex codes’ by &lt;a href=&quot;https://twitter.com/desandro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;David DeSandro&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This was one of the most mind blowing talks of dotCSS by far.
&lt;a href=&quot;https://twitter.com/desandro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;David DeSandro&lt;/a&gt; begins the talk with saying he has a special ability.
He can read color hex codes. 
At that moment the most of us were like &lt;em&gt;“What?”&lt;/em&gt;
&lt;em&gt;“You can tell the color based on the hexcode?”&lt;/em&gt;
&lt;em&gt;“Is that even possible?”&lt;/em&gt;
And well, he proved it to us that you really can tell the color based on the hex code.
He even showed us how to do so.&lt;/p&gt;

&lt;p&gt;And so he told us that it requires 5 steps to read color hex codes.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;3-digit shorthand&lt;/li&gt;
  &lt;li&gt;Line graph&lt;/li&gt;
  &lt;li&gt;Hue from shape&lt;/li&gt;
  &lt;li&gt;Lightness from total&lt;/li&gt;
  &lt;li&gt;Saturation from range&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just like this I bet you have no idea what these steps mean.
But let us teach you the magic of reading color hex codes as well thanks to David.&lt;/p&gt;

&lt;p&gt;To get started he taught us that the best way to describe colors is with the HSL color model.
HSL stands for Hue, Saturation and Lightness. 
Hue is the pure pigment of a color and can be described with 12 color names.
We’ll show you the color names later in Step 3.
Saturation is how vibrant or muted the hue is and can be described as &lt;em&gt;saturated&lt;/em&gt;, &lt;em&gt;washed&lt;/em&gt;, &lt;em&gt;muted&lt;/em&gt; or &lt;em&gt;gray&lt;/em&gt;.
Lightness speaks for itself and describes how light or dark the color is and this can be done with &lt;em&gt;light&lt;/em&gt;, &lt;em&gt;middle&lt;/em&gt; or &lt;em&gt;dark&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know how you can describe a color all you have to do is to follow the 5 steps.
And deterimine the hue, lightness and saturation.
So let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;step-1-3-digit-shorthand&quot;&gt;Step 1: 3-digit shorthand&lt;/h3&gt;
&lt;p&gt;To better understand the process let’s take &lt;code class=&quot;highlighter-rouge&quot;&gt;#D49B25&lt;/code&gt; as an example.
The first step is to retrieve the 3-digit shorthand of the hexcode.
This can be done easily by breaking up the hexcode in 3 pairs (D4 | 9B | 25).
Keep in mind that each pair represents a value of the RGB color channel.
Now drop the second number of each pair and that gives us the shorthand code &lt;code class=&quot;highlighter-rouge&quot;&gt;#D92&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Line graph of shorthand hex&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/shorthand.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-line-graph&quot;&gt;Step 2: Line graph&lt;/h3&gt;
&lt;p&gt;With the shorthand from step one we have to create a linegraph based on the numbers of the hexcode.
With basic understanding of hexadecimal numbers we can visualize a little line graph for the channel values.
D is high, 9 is around the middle, 2 is low.
And that’s how we get our litle line graph.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Hex linegraph example&quot; style=&quot;max-width: 25%;&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/hex-linegraph.jpg&quot; /&gt;
&lt;img class=&quot;image fit&quot; alt=&quot;Line graph of shorthand hex for color #D92&quot; style=&quot;max-width: 25%;&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/linegraph.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-hue-from-shape&quot;&gt;Step 3: Hue from shape&lt;/h3&gt;
&lt;p&gt;This is what we think is the most tricky part about reading color hex codes.
With the line graph we got from the previous step you’ll have to find a matching color on the color wheel.
So you’ll have to remember this one by heart if you really want to show off.
For our example color, it matches best with the color &lt;strong&gt;orange&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;HSL color wheel with color names&quot; style=&quot;max-width: 75%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/color-wheel.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-lightness-from-total&quot;&gt;Step 4: Lightness from total&lt;/h3&gt;
&lt;p&gt;To determine the lightness you should look either at the total sum of the channel values (pairs) or at the values in the line graph we created.
If the values are higher to the top, the color is closer to white and thus lighter.
If the values are closer to the bottom, the color is closer to black and thus darker.
For our example color &lt;code class=&quot;highlighter-rouge&quot;&gt;#D92&lt;/code&gt;, the values are both high and low, so it has &lt;strong&gt;middle&lt;/strong&gt; lightness.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Determining lightness of a color&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/lightness.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-saturation&quot;&gt;Step 5: Saturation&lt;/h3&gt;
&lt;p&gt;Saturation is a measure of how vibrant or rich the hue/color is.
To measure the saturation whe need to look at the difference between the highest and the lowest value in our shorthand code.
The wider the range, the higher the saturation. 
Colors with small range have low saturation, appearing faded.
A color with no saturation is a pure gray.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Measuring and describing saturation of a color&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/saturation.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our color, #D92, D is the highest value, 2 is the lowest.
D is high. 2 is low.
That’s a wide range, but not completely wide.
So our color has moderate saturation, thus making it a &lt;strong&gt;washed&lt;/strong&gt; color.&lt;/p&gt;

&lt;p&gt;Now we have all three attributes for our color
So we can say &lt;code class=&quot;highlighter-rouge&quot;&gt;#D49B25&lt;/code&gt; is &lt;strong&gt;Middle Washed Orange&lt;/strong&gt;.
Pretty amazing right?&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;#D49B25 color described as Middle Washed Orange&quot; style=&quot;max-width: 50%&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/final-color.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since dotCss puts most of its talks online we definitely recommend watching this talk.
He just explains it so well and goes a little bit deeper than we did here.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/david-desandro-read-color-hex-codes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/desandro/read-color-hex-codes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;variable-fonts-by-mandy-michael&quot;&gt;‘Variable fonts’ by &lt;a href=&quot;https://twitter.com/mandy_kerr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mandy Michael&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A variable font is an OpenType font format that includes new technology called OpenType Font Variations. 
Jointly developed by four of the most influential technology companies — Google, Apple, Microsoft, and Adobe — these font files contain a huge amount of extra data, compared to your average OpenType font. 
A variable font can contain a font’s entire glyph set, or individual glyphs with up to 64,000 axes of variation, including weight, width, slant, and, in some cases, specific styles, such as Condensed, Bold, etc.&lt;/p&gt;

&lt;p&gt;There are two main advantages when using variable fonts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The average file size is smaller than separate font files&lt;/li&gt;
  &lt;li&gt;Only one request is necessary to load the necessary font variations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good example is the font &lt;a href=&quot;https://v-fonts.com/fonts/source-sans-variable&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Source Sans Variable&lt;/a&gt; or the font &lt;a href=&quot;https://www.typenetwork.com/brochure/decovar-a-decorative-variable-font-by-david-berlow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Decovar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She also showed us the possibilities of variable fonts and what kind of awesome stuff you can do with them.&lt;br /&gt;
Did you know that you can make text animations with them?&lt;br /&gt;
Well you can, so check it out on her &lt;a href=&quot;https://codepen.io/collection/XqRLMb/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;codepen.io collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can easily check for browser support using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; CSS rule: &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports (font-variation-settings)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;css-taught-me-by-dan-cederholm&quot;&gt;‘CSS taught me…’ by &lt;a href=&quot;https://twitter.com/simplebits&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dan Cederholm&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Dan talked about all the things he learned in his lifelong journey of working with CSS.
But in the end it all came down to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have side projects to keep your skills sharp&lt;/li&gt;
  &lt;li&gt;It’s OK not to use the latest and greatest in business&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;breaking-the-norm-with-creative-css-by-aga-naplocha&quot;&gt;‘Breaking the norm with creative CSS’ by &lt;a href=&quot;https://twitter.com/aganaplocha&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aga Naplocha&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The last presentation of the dotCSS conference was about using other inspirations and tools to build webpages. 
Aga made a bold remark that most of the websites out there have the same structure and even look and feel the same. 
As a big fan of Brutalist Design she showed &lt;a href=&quot;http://brutalistwebsites.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;some examples&lt;/a&gt; to demonstrate what is possible when you think out of the box.&lt;/p&gt;

&lt;p&gt;With her talk she wanted to encourage developers to try and use other CSS Properties for building and designing websites. 
The three CSS properties she mentioned were clipping, masking and shape-outside (all in combination with SVG — using masking with images is resource intensive since it operates pixel per pixel). 
She showed each property with a clear example and discussed the differences between them, and mentioned the compatibility of each property in the different browsers.&lt;/p&gt;

&lt;p&gt;Saying that most of the websites have the same look and feel is a bold statement but after you look around for a while you notice that she actually has a point. 
Most of the websites are using frameworks that give you a uniform, recognizable look and feel but are also really easy to use. 
With the properties she mentioned you can certainly build a beautiful, well-designed website but it would take more time to make sure you have a responsive website that has the same look and feel over the different browsers and devices.&lt;/p&gt;

&lt;h1 id=&quot;day-2-dotjs&quot;&gt;Day 2: dotJS&lt;/h1&gt;

&lt;h2 id=&quot;the-state-of-js-by-sacha-greif&quot;&gt;‘The State of JS’ by &lt;a href=&quot;https://twitter.com/sachagreif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sacha Greif&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;As we all know, the JavaScript ecosystem is richer than ever, and even the most experienced developers become victims of the amount of choices they have to make.
It’s always changing. New libraries, frameworks, languagues…
For this reason Sacha Greif, Raphaël Benitte and Michael Rambeau decided to create a global survey they called the ‘State of JavaScript’.&lt;/p&gt;

&lt;p&gt;The survey contains data from over 20.000 developers from all around the globe and you can find the results on their &lt;a href=&quot;https://stateofjs.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt;.
The survey tries to figure out what these developers are using these days, what they like and what they would love to learn.&lt;/p&gt;

&lt;p&gt;When they published the State of JS results of 2018 there was a lot of commotion regarding the results.
More specifically regarding the front end frameworks Angular, React and Vue.
The State of JS survey declares that Angular is suffering a lot in comparison with React and Vue.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;#D49B25 color described as Middle Washed Orange&quot; src=&quot;/img/2018-11-08-dot-css-dot-js-2018/stateofjs-fe-results.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Angular results are very disappointing and show us a high rate of dissatisfaction within its userbase.
On the other side there is only love for both React and Vue.
This lead to a war on Twitter and other channels saying the survey is flawed.&lt;/p&gt;

&lt;p&gt;Olivier Combe who is a member of the core team &lt;a href=&quot;https://twitter.com/OCombe/status/1064918179321913344&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;called out to Sasha&lt;/a&gt; why they didn’t make the distinction between AngularJS and Angular.
It makes total sense a lot of people are using Angular (read v2+) now and are not using AngularJS any longer.&lt;/p&gt;

&lt;p&gt;There even is a &lt;a href=&quot;https://www.youtube.com/watch?v=UnEPBQvkNrg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YouTube Video&lt;/a&gt; that takes a closer look at the results.&lt;/p&gt;

&lt;p&gt;In any case, we believe this survey can help lots of developers make choices and it gives at least some insights on the State of JavaScript.
Besides the front end frameworks, the State of JS also offers lots of data of other subjects regarding JavaScript which are definitely worth checking out!&lt;/p&gt;

&lt;h2 id=&quot;minecraft-is-getting-a-javascript-runtime-by-tobias-ahlin&quot;&gt;‘Minecraft is getting a JavaScript runtime’ by &lt;a href=&quot;https://twitter.com/tobiasahlin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tobias Ahlin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tobias blew our mind with the message that Minecraft has a HTML based UI that is using a JavaScript runtime.
Just think about it: a JavaScript runtime running on top of your games.&lt;/p&gt;

&lt;p&gt;The JS runtime provides access to UI elements and an API to give developers enough freedom to work with the interface.&lt;/p&gt;

&lt;p&gt;Worth mentioning is that this is completely mobile optimized and is based on flexbox.
Using floats is just too expensive on processing power.&lt;/p&gt;

&lt;h2 id=&quot;learning-to-love-type-systems-by-lauren-tan&quot;&gt;‘Learning to Love Type Systems’ by &lt;a href=&quot;https://twitter.com/sugarpirate_&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lauren Tan&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Since the introduction of TypeScript in 2012, web development has consistently looked more towards building software with the use of static typing. 
Lauren discussed why we should embrace the use of optional static typing that TypeScript provides.&lt;/p&gt;

&lt;p&gt;By using types, we add more constraints to our code and how other developers can use our code. 
Thus this decreases the amount of possible bugs during the development phases of a project. 
According to Lauren, types are mathematical propositions on how a program should work and the written code that complies to the types is a proof of the type system.&lt;/p&gt;

&lt;p&gt;Lauren explained that while using types we should be as strict as possible. 
The lower cardinality we have in our types, the less bugs will occur as we limit the possible inputs to our functions.&lt;/p&gt;

&lt;p&gt;With TypeScript it’s convenient to use a type such as &lt;em&gt;any&lt;/em&gt; but we’re better off avoiding using the &lt;em&gt;any&lt;/em&gt; type. 
By consistently being as strict as possible in our type usage, we facilitate better integration between different developers and teams. 
It is definitely true that stricter typing helps with defining the limits of your code while also documenting your code indirectly.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/lauren-tan-learning-to-love-type-systems&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/poteto/dotjs-2018-learning-to-love-type-systems&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;choosing-your-javascript-framework-by-john-papa&quot;&gt;‘Choosing Your JavaScript Framework’ by &lt;a href=&quot;https://twitter.com/john_papa&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;John Papa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With all the current JavaScript frameworks out there it’s hard to pick one to work with. 
During his talk John Papa took a closer look to the three most popular frameworks at the moment: Angular, React and Vue.&lt;/p&gt;

&lt;p&gt;When choosing the framework for your project you could ask yourself questions like &lt;em&gt;“Does it have all the features that I need?”&lt;/em&gt;, 
&lt;em&gt;“What about the documentation?”&lt;/em&gt;, &lt;em&gt;“Is it backed by a strong community?”&lt;/em&gt; or &lt;em&gt;“How fast is the framework?”&lt;/em&gt;.
In this case all three frameworks would apply. 
But they all have a different way to work with components, lazy loading, state management and other stuff.&lt;br /&gt;
Take for example the language it’s written in. 
With Angular comes TypeScript, but React and Vue are by default JavaScript. 
Do you fancy TypeScript but you don’t like to work with Angular? 
No issue, you can perfectly use TypeScript in React and Vue.&lt;/p&gt;

&lt;p&gt;They are all perfect for building successful applications and you can go on for hours on which one is the best.
But in the end it comes down to one question: &lt;em&gt;“How does the framework make you feel when you use it?”&lt;/em&gt;.&lt;br /&gt;
The only way to find out is by &lt;strong&gt;trying each one&lt;/strong&gt;. 
That’s why John Papa created a Tour of Heroes project for each framework.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/hero-angular&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/hero-react&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpapa.me/heroes-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tour of Heroes with Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you wanna know which one he prefers? 
Well, he did not want to reveal that during the talk…&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/john-papa-choosing-your-javascript-framework&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://slides.com/johnpapa/choosing-your-framework-dotjs2018&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;javascript-on-the-desktop-fast-and-slow-by-felix-rieseberg&quot;&gt;‘JavaScript on the Desktop, Fast and Slow’ by &lt;a href=&quot;https://twitter.com/felixrieseberg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Felix Rieseberg&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Javascript is everywhere today, even in desktop applications e.g. Battlefield 1, Nvidia GeForce Experience and Adobe Creative Suite. 
Felix reveals his four tricks that can make your application more efficient.&lt;/p&gt;

&lt;p&gt;Before importing a specific module, really consider if you need all of its functionalities as it might bring in some additional items that you don’t need. 
When you do require a specific module, make sure you embed it at the right place.&lt;/p&gt;

&lt;p&gt;When using Node.js - which uses the V8 Javascript engine - the engine runs every time you build and compiles your code into something your machine can execute. 
You can easily cache this with the module &lt;code class=&quot;highlighter-rouge&quot;&gt;v8-compile-cache&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Repainting the screen is an expensive operation. 
You can check with Chrome Developer Tools how much this operation costs and maybe tweak some code.&lt;/p&gt;

&lt;p&gt;His third trick is that not all code is equal. 
Sometimes there is a more efficient way to structure your code or use different function calls with the same end result that could make your application faster. 
Using &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementByClassName&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; for example would be 99% faster.&lt;/p&gt;

&lt;p&gt;And to close off, application lifecycle.
If your application is minimized, pause the network requests and stop refreshing every couple of seconds. 
You can check this with &lt;code class=&quot;highlighter-rouge&quot;&gt;document.hidden&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.dotconferences.com/2018/11/felix-rieseberg-javascript-on-the-desktop-fast-and-slow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View talk&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://slides.com/felixrieseberg/js-desktop-fast-and-slow&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;View slides&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We had an interesting two days at dotCSS and dotJS, and had a lot of fun engaging with the wonderful people at the conference.
One thing we noticed is that the talks at dotCSS were way more technical than the ones given at dotJS and somehow that made us feel a little bit disappointed.
Nonetheless we learned a lot of things and had a great time visiting the city of love.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jan&quot;, &quot;last_name&quot;=&gt;&quot;De Wilde&quot;, &quot;github&quot;=&gt;&quot;MrJean&quot;, &quot;twitter&quot;=&gt;&quot;Mr_Jean&quot;, &quot;linkedin&quot;=&gt;&quot;jandewilde&quot;, &quot;permalink&quot;=&gt;&quot;/author/jan-de-wilde/&quot;, &quot;avatar&quot;=&gt;&quot;jan-de-wilde.jpg&quot;, &quot;title&quot;=&gt;&quot;Practice Lead Frontend&quot;, &quot;title2&quot;=&gt;&quot;Senior Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;jan.dewilde@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jan De Wilde is a Senior Frontend Developer at Ordina Belgium, focussed on building quality mobile/hybrid applications that are accessible on a big collection of devices. His favorite technologies are Ionic Framework, Angular and TypeScript. Jan is also Practice Manager for the Frontend Practice where he takes care of the development and coaching of employees.&quot;}</name><email>jan.dewilde@ordina.be</email></author><category term="Conference" /><category term="Conference" /><category term="dotCSS" /><category term="dotJS" /><category term="dotConferences" /><summary type="html">Paris! This year for the first time Ordina JWorks travelled to Paris to attend a two day conference on CSS and JS, more exactly dotCSS and dotJS which are part of the dotConferences. dotConferences is a series of developer events in Paris that started in 2012.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-dot-css-dot-js-2018/dotjs.jpeg" /></entry><entry><title type="html">Visualising IoT data with tableau</title><link href="https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health.html" rel="alternate" type="text/html" title="Visualising IoT data with tableau" /><published>2018-12-11T00:00:00+00:00</published><updated>2018-12-11T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/12/11/stairway-to-health.html">&lt;h1 id=&quot;visionworks-meets-jworks-stairwaytohealth&quot;&gt;VisionWorks meets JWorks: StairwayToHealth&lt;/h1&gt;
&lt;p&gt;We, from &lt;a href=&quot;https://www.ordina.be/vakgebieden/bi-analytics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VisionWorks&lt;/a&gt;, were asked to rebuild the visualisation dashboard &lt;a href=&quot;https://ordina-jworks.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JWorks&lt;/a&gt; used in the &lt;a href=&quot;https://stairwayto.health/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;application&lt;/a&gt; they built as a result of the internal Stairway to Health project (you can find more information about that project &lt;a href=&quot;https://ordina-jworks.github.io/iot/2018/03/14/Stairway-To-Health-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;). 
We decided to use &lt;a href=&quot;https://www.tableau.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tableau&lt;/a&gt;, a popular BI Visualisation tool we largely use at our clients.
We developed the dashboard working around some key questions while keeping the appearance of the dashboard in line with the dashboard JWorks developed.&lt;/p&gt;

&lt;p&gt;In the following section we will explain how the dashboard is currently set up and how to use it properly.
Next, we will go over the features we can add in future releases to allow the user to go even deeper in their analysis.&lt;/p&gt;

&lt;h1 id=&quot;dashboard-overview&quot;&gt;Dashboard overview&lt;/h1&gt;

&lt;p&gt;The dashboard is built to answer &lt;strong&gt;the following questions&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the percentage of people taking the stairs or elevator at Ordina &lt;strong&gt;today&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;How is the same metric on weekly, monthly or yearly basis? What is it in absolute numbers?&lt;/li&gt;
  &lt;li&gt;How does it evolve over time based on each day, week, month or year?&lt;/li&gt;
  &lt;li&gt;Are people taking the stairs more this week compared to last week?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The dashboard will try to provide answers to these questions using the following &lt;strong&gt;three main parts&lt;/strong&gt;.
We will go over these parts and highlight which question(s) they try to answer.&lt;/p&gt;

&lt;h2 id=&quot;part-one-the-title&quot;&gt;Part one: the Title&lt;/h2&gt;

&lt;p&gt;The title is what the user sees first and answers the first question.
By using the colors in the title, the dashboard shows the user - in a subtle way - what the colors in the next visuals represent.
There is also an option to select another day as illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartOne.gif&quot; alt=&quot;PartOne&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-two-the-horizontal-bar-comparison&quot;&gt;Part two: the horizontal bar comparison&lt;/h2&gt;

&lt;p&gt;In part two the user can find an answer to questions two and three.
The visual uses the selected day to show the division between people taking the stairs / elevator on a daily / weekly / monthly and yearly basis.
When the user hovers over the chart he can also see the evolution of people taking the stairs / elevator within that day / week / month / year.
Next to the chart, the total absolute number of all the observations measured is reported per period.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartTwo.gif&quot; alt=&quot;PartTwo&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-three-the-more-detailed-area-chart&quot;&gt;Part three: the more detailed area chart&lt;/h2&gt;

&lt;p&gt;The third part visualises how the division stairs / elevator is evolving over time expressed in daily, weekly, monthly or yearly basis.
This gives the user the possibility to look at trends and to see how the situation of today compares itself to past situations.&lt;/p&gt;

&lt;p&gt;In the title the user has the option to change the appearance of the data (absolute or shares).
The amount of periods shown (starting from the most recent period) can also be changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeOne.gif&quot; alt=&quot;PartThreeOne&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the user hovers over the chart the same horizontal bar comparison can be seen. 
Comparisons can be made with the period selected above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeTwo.gif&quot; alt=&quot;PartThreeTwo&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last feature to discuss here is how the user can change which period the chart is showing.
This can be done by clicking the chart above.
When you click on the day bar on the top chart the bottom chart is expressed on a day level.
This also applies to the other period bases in the chart.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-11-16-stairway-to-health/PartThreeThree.gif&quot; alt=&quot;PartThreeThree&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-can-we-do-next&quot;&gt;What can we do next?&lt;/h1&gt;

&lt;p&gt;While this dashboard already gives an answer to the most important questions and gives the user the possibility to explore the data over time, there are still some extra things that can be developed.&lt;/p&gt;

&lt;p&gt;The dashboard is currently built within a Tableau workbook which is using the data of the &lt;a href=&quot;https://www.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB&lt;/a&gt; database JWorks set up as an extract.
This means we don’t have a live connection to the actual database JWorks has in their app.
This brings us to the first thing we can still explore: &lt;strong&gt;deployment&lt;/strong&gt;.
In order to integrate the dashboard in the original application, we could publish the dashboard on the &lt;a href=&quot;https://www.tableau.com/trial/tableau-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tableau server&lt;/a&gt; of Ordina which is running on &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft Azure&lt;/a&gt;.
Running this instance is not free so when taking a decision we should also take the user relevance in consideration: does the user really need to have a live connection to the data or does a nightly update cover the load?&lt;/p&gt;

&lt;p&gt;Secondly we can still do a lot on the &lt;strong&gt;analysis part&lt;/strong&gt;. What are the reasons why some patterns in the data exist? Do people take the stairs less when it is hot outside?
JWorks recently tracked on which floor the observation is measured, allowing us to look into difference by floor. Do people take the elevator more when they need to go from floor 1 to floor 3?&lt;/p&gt;

&lt;p&gt;We will keep you posted on further progress related to Stairway to Health. Thank you for reading and don’t forget: always take the stairs!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Gert-Jan&quot;, &quot;last_name&quot;=&gt;&quot;Schokkaert&quot;, &quot;linkedin&quot;=&gt;&quot;gert-jan-schokkaert-b87961b4&quot;, &quot;permalink&quot;=&gt;&quot;/author/gert-jan-schokkaert/&quot;, &quot;avatar&quot;=&gt;&quot;gert-jan-schokkaert.jpg&quot;, &quot;title&quot;=&gt;&quot;Data Visualisation Consultant&quot;, &quot;email&quot;=&gt;&quot;gert-jan.schokkaert@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Gert-Jan Schokkaert works as a Data Visualisation Consultant at Ordina Belgium. In his job he likes to build visualisations that helps the end user find relevant insights as easy as possible. He likes to work closely with the client to find the optimal solution that really makes the difference.&quot;}</name><email>gert-jan.schokkaert@ordina.be</email></author><category term="Development" /><category term="Tableau" /><category term="Visualisation" /><category term="Dashboard" /><category term="Internet of Things" /><category term="IoT" /><category term="LoRa" /><category term="NoSQL" /><category term="MongoDB" /><summary type="html">VisionWorks meets JWorks: StairwayToHealth We, from VisionWorks, were asked to rebuild the visualisation dashboard JWorks used in the application they built as a result of the internal Stairway to Health project (you can find more information about that project here). We decided to use Tableau, a popular BI Visualisation tool we largely use at our clients. We developed the dashboard working around some key questions while keeping the appearance of the dashboard in line with the dashboard JWorks developed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-16-stairway-to-health/stairway-to-health.png" /></entry><entry><title type="html">10 Cool AI/ML Examples</title><link href="https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples.html" rel="alternate" type="text/html" title="10 Cool AI/ML Examples" /><published>2018-12-10T00:00:00+00:00</published><updated>2018-12-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples</id><content type="html" xml:base="https://ordina-jworks.github.io/iot,%20machine%20learning/2018/12/10/10-cool-ai-examples.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-cool-examples&quot;&gt;10 Cool examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;To end the year on a lighter more inspirational note we’ll go into 10 cool examples achieved with artificial intelligence.
These are all short videos with some additional information, most of these already have or will soon have an impact on our lives one way or another.&lt;/p&gt;

&lt;p&gt;The 10 examples can be divided in to three categories:&lt;/p&gt;

&lt;h3 id=&quot;how-the-models-work-and-perceive-the-world&quot;&gt;How the models work and perceive the world&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-1---how-neural-networks-see-the-world&quot;&gt;How neural networks see the world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-2---attack-on-human-vision-system&quot;&gt;Attack on human vision system&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;audiovisual-models-for-rendering-photography-and-impersonation&quot;&gt;Audiovisual models for rendering, photography and impersonation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-3---style-transfer-for-videos&quot;&gt;Style transfer for videos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-4---amazing-night-time-photographs&quot;&gt;Amazing night time photographs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-5---nvidia-AI-based-image-restoration&quot;&gt;Nvidia AI based image restoration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-6---noise-reduction-for-path-traced-GI&quot;&gt;Noise reduction for path traced GI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-7---isolate-speech-signals&quot;&gt;Isolate speech signals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-8---impersonate-anyone&quot;&gt;Impersonate anyone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;models-used-for-and-helped-by-gaming&quot;&gt;Models used for and helped by gaming&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#example-9---deepmind-becomes-superhuman-in-quake-3&quot;&gt;Deepmind becomes superhuman in quake 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-10---using-games-for-deep-learning-research&quot;&gt;Using games for deep learning research&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For now, there is still no need to fear Skynet becoming a reality.
While progress in the artificial intelligence world proceeds at a staggering pace, we are no where near having a general ‘super’ AI.
This however does not mean precautions do not need to be taken to prevent this from happening in the long run.
Some people, like Elon Musk, are very vocal about this and question if we should even pursue the goal to create a ‘super’ AI.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stack&quot; src=&quot;/img/2018-12-10-AI10EX/intro.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-cool-examples&quot;&gt;10 Cool examples&lt;/h2&gt;

&lt;p&gt;Below are the ten selected examples we think you should see!
In the resources section underneath all of them you can find more useful resources to use and watch about AI/ML.&lt;/p&gt;

&lt;h3 id=&quot;example-1---how-neural-networks-see-the-world&quot;&gt;Example 1 - How neural networks see the world&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/1zvohULpe_0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Understanding a neural network is difficult, we don’t actually know what is happening inside of it.
We need ways of visualizing and understanding what happens inside to help debug and improve these networks.
For convolutional neural networks this helps us see what the network sees and how it identifies and uses parts of the input to get to the desired output.&lt;/p&gt;

&lt;h3 id=&quot;example-2---attack-on-human-vision-system&quot;&gt;Example 2 - Attack on human vision system&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/AbxPbfODGcs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Not only artificial neural networks are vulnerable to attacks to fool them.
Our very own brain, a neural network as well, is also able to be tricked by some of these techniques.
This video shows how such an attack works.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/SA4YEAWVpbk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This video shows how neural networks can be fooled by changes to the input as small as a single pixel!
It shows that caution needs to be taken in neural network based image recognition because a sufficiently witty/crafty attacker could fool the system by employing such an attack.&lt;/p&gt;

&lt;h3 id=&quot;example-3---style-transfer-for-videos&quot;&gt;Example 3 - Style transfer for videos&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/Uxax5EKg0zA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Style transfer is when the style of a given input image is transferred to a secondary input image while maintaining the content of that image but with the style of the first input.
This gives you the option to apply the style of certain great works of art to regular images or even works with a totally different style.
In this video the technique is applied to video content, but it is not just as simple as running the earlier technique on each frame of the video since it does not provide a result that is temporally coherent.
The video is styled based on a given input and produces quite amazing results.&lt;/p&gt;

&lt;h3 id=&quot;example-4---amazing-night-time-photographs&quot;&gt;Example 4 - Amazing night time photographs&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/bcZFQ3f26pA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Very noisy night time images might soon be a thing of the past.
The technique in this video can turn unusably noisy photos into perfectly viewable photos.
Something like this has been &lt;a href=&quot;https://www.theverge.com/2018/10/25/18021944/google-night-sight-pixel-3-camera-samples&quot;&gt;implemented in the google pixel phones&lt;/a&gt; recently.
In a few years all cameras will have a mode like this implemented making unusable night shots a thing of the past!&lt;/p&gt;

&lt;h3 id=&quot;example-5---nvidia-ai-based-image-restoration&quot;&gt;Example 5 - Nvidia AI based image restoration&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/P0fMwA3X5KI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Like the example above this is about denoising and is similar yet different.
This AI has been trained without ever having been shown what noise is, so no before vs after comparison.
It can remove noise from images, restore images that are almost only visible noise and even remove lots of text from a given image.
This technique will make cleaning up images much easier and allow us to preserve and restore imagery that might otherwise be lost or unusable!&lt;/p&gt;

&lt;h3 id=&quot;example-6---noise-reduction-for-path-traced-gi&quot;&gt;Example 6 - Noise reduction for path traced GI&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/HSmm_vEVs10&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This video shows that denoising techniques can have other great benefits in the visual/gaming industry.
Path traced global illumination (casting light in a 3D scene to determine lighting from a global source like the sun) is a very resource intensive task.
Current solutions use all sorts of tricks to mimic this but they are not the real deal.
This technique allows for path traced GI with a very low sample count and denoises the output whilst being temporally stable.
Something like the &lt;a href=&quot;https://www.youtube.com/watch?v=Ms7d-3Dprio&quot;&gt;new cards from Nvidia&lt;/a&gt; are now capable of!&lt;/p&gt;

&lt;h3 id=&quot;example-7---isolate-speech-signals&quot;&gt;Example 7 - Isolate speech signals&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/zL6ltnSKf9k&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Having an audio or video file with multiple people speaking at once or when there is a lot of background noise can be annoying for various reasons.
It makes it harder to understand any of the speaking parties.
This technique allows each speaker’s audio to be isolated and listened to without hearing the other sources of interference.
It is helpful to clean up conversations or remove background noise.&lt;/p&gt;

&lt;h3 id=&quot;example-8---impersonate-anyone&quot;&gt;Example 8 - Impersonate anyone&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/EQX1wsL2TSs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Soon you will not be able to tell that what you see is actually what happened.
This advanced technique improves on older versions, and allows you to transfer your facial and torso movements onto a target.
Techniques like this make it clear that fake news and fake sources of media will become an even bigger problem in the future as this technology becomes even better.
It might not be such a bad idea to invest in that blockchain backed media repository after all so the validity of media files can be tracked…&lt;/p&gt;

&lt;h3 id=&quot;example-9---deepmind-becomes-superhuman-in-quake-3&quot;&gt;Example 9 - Deepmind becomes superhuman in quake 3&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/MvFABFWPBrw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;In games you normally play against the AI.
These AI’s are mostly cheaters though, they know more because they are fed insider information from the game itself.
The AI’s in this video are actual players that only get the video output of the game and learn to play accordingly.
This in the long run will allow games to have decent real AI in-game.
Other sectors can also benefit from this as it can be applied to different fields where complex behavior with tactics and long term planning is required.&lt;/p&gt;

&lt;h3 id=&quot;example-10---using-games-for-deep-learning-research&quot;&gt;Example 10 - Using games for deep learning research&lt;/h3&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/QkqNzrsaxYc&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Self driving cars are all the rage these days.
Getting cars to drive themselves is an immensely complex task, requiring truly vast amounts of correctly classified data in a dataset.
Classifying this data is a very time consuming process.
This technique can use games like GTAV to create a dataset with imagery from the game.
The game already knows what all the types of objects are in the scene, so classification can be simplified and automated.
It also provides an easy way to simulate hard to recreate situations in real life.
Time of day and scene composition can be easily changed which results in a vastly more extensive dataset.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;A very good video to watch is &lt;a href=&quot;https://www.youtube.com/watch?v=R9OHn5ZF4Uo&quot;&gt;How machines learn&lt;/a&gt; by CGP Gray.
It generally explains how machine learning works and what some of the implied dangers are.&lt;/p&gt;

&lt;p&gt;All the videos used in this blogpost are from the the &lt;a href=&quot;https://www.youtube.com/user/keeroyz/videos&quot;&gt;Two minute papers&lt;/a&gt; YouTube channel.
This channel has short videos that showcase some scientific research in a visual and compelling way whilst not going too technical but still providing all the technical resources for those who want it.&lt;/p&gt;

&lt;p&gt;Lastly is the &lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&amp;amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&quot;&gt;playlist about neural networks&lt;/a&gt; by 3Blue1Brown.
It goes into how neural networks work and is very visual which helps greatly with understanding the subject matter.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=R9OHn5ZF4Uo&quot;&gt;How machines learn - CGP Gray&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/keeroyz/videos&quot;&gt;Two minute papers youtube channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aircAruvnKk&amp;amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&quot;&gt;Neural networks playlist - 3blue1brown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these videos and the accompanying channels on YouTube are from amazing content creators, all rights for the content goes to them.
Do like I do and subscribe to these awesome channels to support them!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his roll as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT, Machine learning" /><category term="internet of things" /><category term="iot" /><category term="AI" /><category term="ML" /><category term="DL" /><category term="Example" /><category term="neural networks" /><category term="deep learning" /><category term="machine learning" /><category term="artificial intelligence" /><category term="two minute papers" /><category term="2 minute papers" /><category term="intelligence" /><category term="robotics" /><category term="self driving cars" /><category term="automation" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-12-10-AI10EX/banner.jpg" /></entry><entry><title type="html">Transactions in MongoDB 4.0</title><link href="https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions.html" rel="alternate" type="text/html" title="Transactions in MongoDB 4.0" /><published>2018-12-06T00:00:00+00:00</published><updated>2018-12-06T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/12/06/mongodb-transactions.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Relational-vs.-document-database&quot;&gt;Relational vs. document database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-to-use-transactions&quot;&gt;When to use transactions?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-details&quot;&gt;Technical details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical&quot;&gt;Practical&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#best-practices&quot;&gt;Best Practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongodbeurope2018.sched.com/event/FmAR/how-and-when-to-use-multi-document-distributed-transactions&quot;&gt;How and When to Use Multi-Document Distributed Transactions, Aly Cabral&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongodbeurope2018.sched.com/event/FmAW/mongodb-building-a-new-transactional-model&quot;&gt;MongoDB: Building a New Transactional Model, Keith Bostic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sessions I was looking forward to the most at MongoDB Europe 2018 were the two sessions about multi-document transactions, the most talked about feature of the MongoDB 4.0 release.
In the morning I attended a session by Aly Cabral which was very practically oriented.
In the afternoon there was a more esoteric yet very interesting session by Keith Bostic who provided some insight into the inner workings of the WiredTiger storage engine and the difficulties the MongoDB team had to overcome to implement the new transaction model.&lt;/p&gt;

&lt;p&gt;To give some background, as a longtime Oracle DBA, I always found it odd that a database would lack what I had always considered a crucial database feature, so I was naturally curious to know more about MongoDB’s implementation and how it would compare to a typical relational database.&lt;/p&gt;

&lt;p&gt;In this post we will explore how multi-document transactions are implemented in MongoDB, how the implementation is similar to a relational database system and where they differ.&lt;/p&gt;

&lt;h2 id=&quot;relational-vs-document-database&quot;&gt;Relational vs. document database&lt;/h2&gt;
&lt;p&gt;As I learned through working with MongoDB the past two years, there is less need for multi-document transactions in document databases.
For the majority of use cases single document transactions suffice.
This is because the data model you use with a document database is quite different from what you would use with an RDBMS.&lt;/p&gt;

&lt;p&gt;In a relational database system you typically normalize data in order to avoid duplication.
A single &lt;code class=&quot;highlighter-rouge&quot;&gt;entity&lt;/code&gt; more often than not has data spanning multiple tables, so when you perform updates to a single entity you have to update multiple rows in multiple tables concurrently, which necessitates transactions.&lt;/p&gt;

&lt;p&gt;In a document database like MongoDB though, you typically embed all data that represents one entity within a single document, in which case updates to that entity are also limited to a single document.
You can see that there’s less need for transactions.&lt;/p&gt;

&lt;p&gt;In essence, the RDBMS approach prioritizes disk space efficiency above everything else whereas the MongoDB approach prioritizes ease of development and simplicity.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are some scenarios where you may want to use multi-document transactions in a document database.
Let’s see what some of those scenarios might be…&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-transactions&quot;&gt;When to use transactions?&lt;/h2&gt;

&lt;h3 id=&quot;relationships&quot;&gt;Relationships&lt;/h3&gt;
&lt;p&gt;In the case that your datamodel does have relationships between separate entitites, you may want to use transactions to update both of them at the same time.&lt;/p&gt;

&lt;p&gt;An example of this could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt; that the customer owns.
They are distinct entities, but there is a relationship between them in the form of ownership information.
If you update the ownership information on the &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; document, you probably need to update it on the &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt; document (or documents) as well.&lt;/p&gt;

&lt;p&gt;The only way to do this with guaranteed consistency is through a multi-document transaction.&lt;/p&gt;

&lt;h3 id=&quot;event-processing&quot;&gt;Event processing&lt;/h3&gt;
&lt;p&gt;Another use case of transactions is event processing.
When a certain event occurs, it may need to atomically create, update or delete several entities at the same time.&lt;/p&gt;

&lt;p&gt;The example that was given in Aly’s presentation was the creation or invalidation of a customer’s account, which would require an update to all of the customer’s entities.&lt;/p&gt;

&lt;h3 id=&quot;event-logging-or-auditing&quot;&gt;Event logging or auditing&lt;/h3&gt;
&lt;p&gt;Consider the case where, for logging or auditing purposes, you want to create an event trail of all changes that happen to a certain document or collection and you want to store this event trail in another collection.&lt;/p&gt;

&lt;p&gt;The event trail should be representative of what really occurred, so events that never occurred should not be logged nor should events that actually happened be lost.&lt;/p&gt;

&lt;p&gt;The only way to achieve this is to put the update and the logging of the update inside the same transaction.&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical details&lt;/h2&gt;
&lt;p&gt;Now let’s explore some of the more technical features of multi-document transactions.&lt;/p&gt;

&lt;h3 id=&quot;atomicity&quot;&gt;Atomicity&lt;/h3&gt;
&lt;p&gt;This is pretty straightforward.
In MongoDB transactions are atomic, which means that execution of multiple changes inside a transaction is an all-or-nothing deal: either all updates get committed, or none.&lt;/p&gt;

&lt;h3 id=&quot;snapshot-isolation&quot;&gt;Snapshot isolation&lt;/h3&gt;
&lt;p&gt;When you start a transaction, MongoDB creates a snapshot of the current state of the database.
During your transaction you will not see any updates made by other sessions.
You are &lt;em&gt;isolated&lt;/em&gt; from them.
This guarantees that throughout the transaction your session will see one consistent version of the data.&lt;/p&gt;

&lt;p&gt;Internally MongoDB uses an update structure inside the WiredTiger cache to maintain this consistent view on the database.
This structure grows as writes occur to the database and is only evicted from the database once the transaction is committed or aborted.
The implication of this is that long running transactions or a high write volume can put pressure on the cache.
It’s therefore recommended to keep the duration of any transaction as low as possible.&lt;/p&gt;

&lt;p&gt;To minimize cache pressure, you can use the server parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;transactionLifeTimeLimitSeconds&lt;/code&gt; to set a sensible maximum transaction time.
If a transaction runs for a longer time than this value, it will be aborted.
The default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;transactionLifeTimeLimitSeconds&lt;/code&gt; is 60 seconds.&lt;/p&gt;

&lt;p&gt;A sidenote for those DBAs or developers who are already familiar with Oracle: the update structure in the WiredTiger cache is similar to how rollback segments and undo tablespaces work in Oracle.
The differences are that the snapshot information is kept entirely in memory instead of on disk, and that you don’t have to actively manage it by allocating a tablespace for it.&lt;/p&gt;

&lt;h3 id=&quot;read-your-own-writes&quot;&gt;Read your own writes&lt;/h3&gt;
&lt;p&gt;MongoDB guarantees that you can read any writes you make inside your transaction, even before they are committed.
It also guarantees that no other session can read your writes before they are committed.&lt;/p&gt;

&lt;p&gt;Again, these writes are handled by the snapshot structure inside the WiredTiger cache.&lt;/p&gt;

&lt;h3 id=&quot;write-locks&quot;&gt;Write locks&lt;/h3&gt;
&lt;p&gt;When two sessions are trying to update the same document at the same time, you get a write conflict.
In MongoDB this conflict is handled by write locks.
There are basically two conflict scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Before a &lt;em&gt;transaction&lt;/em&gt; updates a document, it will try to acquire a write lock.
If the document is already locked the transaction will fail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Before a &lt;em&gt;non-transactional operation&lt;/em&gt; tries to update a document, it will try to acquire a write lock.
If the document is already locked, the operation will back off and retry until &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/#cursor.maxTimeMS&quot;&gt;MaxTimeMS&lt;/a&gt; is reached.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that reads never block writes.
MongoDB is also smart enough to recognize a so called no-op write: if the document you are trying to update was not changed by the update, it will not attempt to acquire a write lock.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Currently you can only use multi-document transactions with replica sets.
Sharded clusters are not supported yet, though this feature is planned for a future release (4.1 perhaps?).&lt;/p&gt;

&lt;p&gt;Due to the WiredTiger cache pressure, long running transactions can be problematic. 
The MongoDB developers are working on improving this for future releases and plan to support transactions running for several hours or even days.&lt;/p&gt;

&lt;h2 id=&quot;practical&quot;&gt;Practical&lt;/h2&gt;
&lt;p&gt;As for semantics, the MongoDB developers thankfully chose not to reinvent the wheel.
Using transactions is similar to what most developers are used to on relational database systems.
The precise syntax varies per programming language, so you will have to do some RTFM to learn it, but it always comes down to the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open session&lt;/li&gt;
  &lt;li&gt;Start transaction&lt;/li&gt;
  &lt;li&gt;Update multiple documents&lt;/li&gt;
  &lt;li&gt;Commit or abort transaction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, in Mongo Shell syntax a transaction typically looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMongo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mydb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coll1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mydb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coll2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One important thing to note here is that once we open the session on the first line, every subsequent action must use the session variable (“mySession” in this case), otherwise they will be simple update operations not belonging to the transaction.&lt;/p&gt;

&lt;h2 id=&quot;best-practices&quot;&gt;Best practices&lt;/h2&gt;
&lt;p&gt;Finally, here are some best practices we learned in the session:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t change your data modeling rules because of transactions.
For example: don’t start normalizing data&lt;/li&gt;
  &lt;li&gt;Transactions shouldn’t be the most common operation.
If they are, you’re doing it wrong.&lt;/li&gt;
  &lt;li&gt;Pass session information to all statements inside your transaction.&lt;/li&gt;
  &lt;li&gt;Implement retry logic.
MongoDB returns errorcodes that tell you if a transaction has failed and if it failed with a retryable error or not.&lt;/li&gt;
  &lt;li&gt;To reduce WiredTiger cache pressure, keep transactions short and don’t leave them open, even read only transactions.&lt;/li&gt;
  &lt;li&gt;Take into account that long running DDL operations (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;createIndex()&lt;/code&gt; ) block transactions and vice versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Multi-document transactions are a useful and easy to use addition to MongoDB.
They make MongoDB a better general purpose database and a stronger alternative for applications where you would traditionally have to choose a relational database.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jan&quot;, &quot;last_name&quot;=&gt;&quot;Van der Veken&quot;, &quot;github&quot;=&gt;&quot;jvanderveken-ordina&quot;, &quot;permalink&quot;=&gt;&quot;/author/jan-van-der-veken/&quot;, &quot;avatar&quot;=&gt;&quot;no-image.jpg&quot;, &quot;title&quot;=&gt;&quot;Database Consultant&quot;, &quot;email&quot;=&gt;&quot;jan.vanderveken@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Jan is a database specialist with many years of experience as system engineer and Oracle DBA, and who is now focusing on cloud and nosql technologies such as MongoDB and the Elastic stack.&quot;}</name><email>jan.vanderveken@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="MongoDB" /><category term="DBA" /><category term="Data" /><category term="Transactions" /><category term="ACID" /><category term="Conference" /><summary type="html">Table of Contents Introduction Relational vs. document database When to use transactions? Technical details Practical Best Practices Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-mongodb-europe-2018/mongodb-acid-logo-thumb.png" /></entry><entry><title type="html">Mocking server sent events: Development and CI</title><link href="https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci.html" rel="alternate" type="text/html" title="Mocking server sent events: Development and CI" /><published>2018-11-21T00:00:00+00:00</published><updated>2018-11-21T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/11/21/sse-spring-node-dev-ci.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-server-sent-events&quot;&gt;What are Server-Sent Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nodejs&quot;&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#angular&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I came across this topic during some consultancy a few months ago, and again a few weeks ago.
As I stated in my previous blogpost about mocking a backend (&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/thisandagain/sentiment/blob/master/README.md&quot;&gt;Node-RED: Development and CI&lt;/a&gt;), we don’t live in an ideal world.
Backends are not always finished before frontend development starts and personally I hate it when I have to include mock data into my frontend code.
And again, even if that backend feature is finished and deployed somewhere so we don’t need to run it locally, sometimes you have less control over messages sent from the backend that need to trigger events in the frontend.&lt;/p&gt;

&lt;p&gt;For both of those projects, a use case arose where the system was in need of messages sent from the backend to the frontend, based on purely frontend and backend events.
On older technologies and systems, these problems were solved with a polling mechanism.
Every few seconds, the frontend is querying the backend for updates.
The first technology that comes to mind when reading the specifications are &lt;code class=&quot;highlighter-rouge&quot;&gt;Websockets&lt;/code&gt;.
A websocket is a bidirectional TCP connection opened between 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;entities&lt;/code&gt;, in our case a frontend and our backend.
Messages can get sent by a client to the backend, or the other way around.
For more information about websockets a simple Google search will overload you with information and frameworks for Java, Javascript and others.
For Javascript, take a look at  &lt;a target=&quot;_blank&quot; href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our use case, we were only in need of unidirectional streaming, &lt;code class=&quot;highlighter-rouge&quot;&gt;Server-Sent Events&lt;/code&gt; or in short &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt;.
Again, the goal was not to implement the backend, but to come up with an easy to implement mock that can be used during development by our frontend developers, and could get reused in testing the frontend against this mock backend.
Ideally, this demo code could get reused by our backend developers as an example.
Although Node-RED has add-ons for SSE, I decided to start writing one myself.&lt;/p&gt;

&lt;p&gt;Note: In real systems, multiple clients can connect to the backend and open a channel.&lt;/p&gt;

&lt;h1 id=&quot;what-are-server-sent-events&quot;&gt;What are Server-Sent Events&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Server-Sent Events is a technology for enabling unidirectional messaging over HTTP. The EventSource API is standardized and part of HTML5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our use case, the backend should be able to send messages to its clients at any time.
These messages can get triggered by client-side events (over REST) or even triggers from external resources and queues or database changes.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/sse-setup.png&quot; width=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To make SSE work, we need to keep some things in mind.
The logical flow behind it is pretty straight forward.
A client requests a channel by &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;-ting a resource over REST.
In Javascript you can make use of the &lt;a target=&quot;_blank&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventSource API&lt;/code&gt;&lt;/a&gt;.
A backend should respond with some specific headers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Type -&amp;gt; ‘text/event-stream’&lt;/li&gt;
  &lt;li&gt;Cache-Control -&amp;gt; ‘no-cache’&lt;/li&gt;
  &lt;li&gt;Connection -&amp;gt; ‘keep-alive’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, the connection between the client and backend is kept open.
At any time, the backend can send a message (event) through this tunnel to the client.
We will go a bit deeper into each section later.&lt;/p&gt;

&lt;p&gt;You can read more about the specs on &lt;a target=&quot;_blank&quot; href=&quot;https://www.w3schools.com/html/html5_serversentevents.asp&quot;&gt;W3schools&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.w3.org/TR/2009/WD-eventsource-20090421/#processing-model&quot;&gt;W3&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;

&lt;p&gt;Around a year ago, &lt;a href=&quot;https://ordina-jworks.github.io/author/dieter-hubau/&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt; wrote a &lt;a target=&quot;_blank&quot; href=&quot;https://ordina-jworks.github.io/spring/2017/10/04/Spring-Cloud-Stream-Rick-And-Morty-Adventure.html&quot;&gt;blogpost&lt;/a&gt; about Spring Cloud Stream and ‘a’ microverse of Rick and Morty. He implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.web.servlet.mvc.method.annotation.SseEmitter&lt;/code&gt;.
I figured, that’s a place to start.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;p&gt;Start by generating a Spring Boot application with some dependencies.
Navigate to &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot;&gt;Spring initializr&lt;/a&gt;.
Add data-repository, flyway and h2.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.flywaydb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;flyway-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added the Flyway and H2 dependencies because I’ve generated test data online (sql).
I’ve created an easy model which represents a message (notification), and maps to a database table, which can be sent to the frontend.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;notification&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve created a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;CrudRepository&amp;lt;Notification, Long&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a basic service:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntityNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most logic is implemented in the Controller:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/notification&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedDelay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The logic behind the code is again pretty straightforward.
Querying this resource will respond with the correct headers (Content-Type -&amp;gt; MediaType.TEXT_EVENT_STREAM_VALUE == ‘text/event-stream’) en open an &lt;code class=&quot;highlighter-rouge&quot;&gt;event stream&lt;/code&gt;.
This resource will create an &lt;code class=&quot;highlighter-rouge&quot;&gt;SseEmitter&lt;/code&gt; for each request and add that &lt;code class=&quot;highlighter-rouge&quot;&gt;emitter&lt;/code&gt; to a list.
When an event needs to be sent out to the &lt;code class=&quot;highlighter-rouge&quot;&gt;clients&lt;/code&gt;, you can then just loop over that list of emitters and send that event.
If you loop at the example code, you can see that the emitter itself has some callbacks (completion, error, timeout, …).
You can use those function for implementing a specific error strategy, monitoring and logging.&lt;/p&gt;

&lt;p&gt;For development purposes, I’ve added a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt;-function that will fire every two seconds and send a random notification from the database through each emitter.&lt;/p&gt;

&lt;p&gt;For one of my clients, it wasn’t possible to work with Spring.
A Google search resulted in a lot of other solutions for Java implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;sse&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/3.5.1.Final/userguide/html/JAX-RS_2.1_additions.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SseEventSink, SseEventSource&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.huihoo.com/jersey/2.13/sse.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SseFeature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/jetty/javadoc/9.4.8.v20171121/org/eclipse/jetty/servlets/EventSourceServlet.html&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventSourceServlet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nodejs&quot;&gt;Nodejs&lt;/h1&gt;

&lt;p&gt;Although the Java implementation wasn’t finished yet, another problem arose.
Not all of our frontend developers where happy with this approach.
They still needed to run a simple Java backend, even if it was a simple Docker container.
So I switched to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs&lt;/code&gt; implementation using &lt;a href=&quot;https://expressjs.com/&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Express&lt;/code&gt;&lt;/a&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt;.
Express doesn’t come with an &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE&lt;/code&gt;-feature out of the box, but there are &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; you can use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sse-express&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sse-express&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-sse&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express-sse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But instead of using a library, I’ve implemented my own &lt;code class=&quot;highlighter-rouge&quot;&gt;middleware&lt;/code&gt;.
Writing custom middleware is very easy and well documented in the &lt;a href=&quot;https://expressjs.com/en/guide/writing-middleware.html&quot; target=&quot;_blank&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;sse-middleware.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setNoDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setKeepAlive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/event-stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Cache-Control'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'no-cache'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'keep-alive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseOnClose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onClose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned before, to make SSE work, you need to set the right &lt;code class=&quot;highlighter-rouge&quot;&gt;headers&lt;/code&gt; (cfr. MediaType.TEXT_EVENT_STREAM_VALUE).
I’ve implemented this in the setup of the custom middleware.
Besides this initialization, I’ve also implemented an &lt;code class=&quot;highlighter-rouge&quot;&gt;sseSend&lt;/code&gt;-function, for sending messages over the channel, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;onClose&lt;/code&gt;-callback that will fire whenever the connection closes.&lt;/p&gt;

&lt;p&gt;Instead of using an in-memory database, like I did in the Java part of this post, I decided to go with a basic Javascript file that I can switch later to a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;-file with test data.&lt;/p&gt;

&lt;p&gt;database.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testmessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testmessag2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'contact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123456'&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'contact123456@gmail.com'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
             &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123456'&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;tel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+3234457645'&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, I added different kinds of data lists to my mock data.
Depending on specific parameters, you can then choose to send back a different type of event.&lt;/p&gt;

&lt;p&gt;Now, let us take a look at the server implementation.&lt;/p&gt;

&lt;p&gt;server.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./sse-middleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./database'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DATA_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sse_middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createMockEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to implement yourself&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// console.log('Emitting to ' + key);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New subscriber request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseSend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if you want to send feedback for opening connection&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// res.sendStatus(200);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sseOnClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// implement your own strategy for removing a channel&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Listening on port 8080...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first lines, I just import my mock database and the middleware.
I then initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;-app and tell it to use the middleware, &lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(sse_middleware);&lt;/code&gt;.
When the server is started, the app also starts a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;interval&lt;/code&gt; that will produce a random (or fixed order for testing purposes) event each two seconds.&lt;/p&gt;

&lt;p&gt;To start this service:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To test it, you can just open your browser and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/stream&lt;/code&gt;.
You should be able to see events appearing now.
However, there is a catch, and it took me some time to figure out what was going wrong.
In your browser you can see the content of the events, but if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/stream&lt;/code&gt; you won’t see anything.
However, if you would start the Java app, you’ll see the events appearing in your browser, and during your &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;-session.
The reason for this, lays in the specs of Server-Sent Events.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/event-spec.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, a message expects a data field.
Adjusting the &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt;-method in the middleware will fix this problem:
&lt;code class=&quot;highlighter-rouge&quot;&gt;res.write('data:' + JSON.stringify(data) + &quot;\n\n&quot;));&lt;/code&gt;
You can also add the other fields, just separate them with &lt;code class=&quot;highlighter-rouge&quot;&gt;\n\n&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;For development purposes, it isn’t a bad idea to add a start en stop action for managing the interval.
Just add the following to your server:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Starting stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/stop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stopping stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you can start and stop the stream by triggering a &lt;code class=&quot;highlighter-rouge&quot;&gt;REST-endpoint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/start&lt;/code&gt; to start the stream of events.`&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -X GET http://localhost:8080/stop&lt;/code&gt; to stop the stream of events.`&lt;/p&gt;

&lt;h1 id=&quot;angular&quot;&gt;Angular&lt;/h1&gt;

&lt;h2 id=&quot;frontend-sse&quot;&gt;Frontend SSE&lt;/h2&gt;

&lt;p&gt;The frontend is an Angular 7 app, created with the angular-cli.
Because of reusability the server-sent event receiver feature is bundled in a separate module that can get moved to a shared library later.
In the most simple implementation, you only need a service to handle the connection and forward events to other components.
In this service, you can make use of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&quot; target=&quot;_blank&quot;&gt;EventSource API&lt;/a&gt; of plain javascript.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/event-source.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The API comes with an easy constructor and 3 callbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EventSource.onerror&lt;/li&gt;
  &lt;li&gt;EventSource.onmessage&lt;/li&gt;
  &lt;li&gt;EventSource.onopen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sse.service.ts:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SseService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'api/stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_eventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// implement your own strategy for reconnection&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Open:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_handleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// e.g. dispatch to ngrx store&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; used is not mapping on the mock backend.
For local development and testing, this doesn’t matter.
Even if both paths would match, the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt; and backend can’t run both on the same port (http://localhost:8080 vs http://localhost:4200 (standard cli port for &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve&lt;/code&gt;)).
Requesting resource cross domain will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; issues. A proxy to the rescue!&lt;/p&gt;

&lt;h2 id=&quot;proxy&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;To overcome the &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; problems, angular-cli, the &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt;-command to be more precise, comes with an optional parameter to add a proxy configuration.
In our production ready setup, all calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; to the same (sub)domain as where the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt; is getting served, get routed to the REST-API.
Because we don’t want to add dev or test specific code in the app itself, we proxy the &lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; to our mock backend.&lt;/p&gt;

&lt;p&gt;Example given:&lt;/p&gt;

&lt;p&gt;proxy.config.json&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;/api/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;secure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;logLevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;changeOrigin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;pathRewrite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use this proxy, serve the app with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the logs, you can see the system is logging the routes in the console.&lt;/p&gt;

&lt;h2 id=&quot;frontend--backend&quot;&gt;Frontend + Backend&lt;/h2&gt;

&lt;p&gt;If you want to run the mock backend (Nodejs) along with the frontend, you need to be able to run concurrent tasks.
You can do this in a node environment using the &lt;code class=&quot;highlighter-rouge&quot;&gt;concurrently&lt;/code&gt;-package.
Just install it by running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm i --save-dev concurrently&lt;/code&gt;.
Add an entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;start:proxy&quot;: &quot;concurrently \&quot;ng serve --proxy-config proxy.config.json\&quot; \&quot;node path/to/your/server.js \&quot;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because they are both starting at the same time, it might happen your backend is not ready while your frontend starts connecting to the stream.
A good &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; strategy will help you overcome this problem, that can also happen in real life systems as well.&lt;/p&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h1&gt;

&lt;p&gt;As mentioned before, this whole approach should result in a mock that can be used for testing as well.
In one of our systems, we have a lot of different event types.
Some only need to show a notification on screen, while others need to refresh data in a cached object, or even change permissions of the logged in user.
To mock this behavior, you can just put all these events in an array and just loop over it.
You can even define different delays for each event if that is what you need.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&quot;https://ordina-jworks.github.io/testing/2018/08/15/node-red-dev-ci.html&quot; target=&quot;_blank&quot;&gt;my Node-RED setup&lt;/a&gt; from one of my previous posts you should give one of the add-ons a try, however, you can also run both mocks next to each other.
In most approaches, you don’t run the application itself thought the dev environment (&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ng serve --proxy-config proxy.config.json&lt;/code&gt;).
You should run your packaged app like you would do in production.
In our case, we are running everything &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerized&lt;/code&gt;.
This means, we build our frontend application and wrap it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; image (tag it, and push it to our registry).
In a next stage, we run (deploy) an environment where we can run our tests against.
In this case we are also not going to use the proxy from our development setup.&lt;/p&gt;

&lt;p&gt;An easy setup would be using a docker-compose (e.g.):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nginx:mainline-alpine&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx/nginx.conf:/etc/nginx/nginx.conf:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-web-app&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;node-red&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodered/node-red-docker&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${userDirPath}/node-red:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${userDirPath}/data:/usr/src/node-red/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1880:1880&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;your-web-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry.your-domain.com/your-web-app:${TAG}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-web-app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-red&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9080:80&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9081:8080&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;selenium&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selenium-grid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selenium/standalone-chrome-debug&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4444:4444&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5900:5900&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/dev/shm:/dev/shm&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now need to include our own ss-mock backend into this compose.
You can do this by easily adding a plain Nodejs service, map your folder to your &lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt; and overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sse-service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sse-mock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${pathToYourServer}:/sse-mock&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080:8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node /sse-mock/service.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to add the service to the links section of your nginx and to add the proxy rules in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /api/stream {
    proxy_pass http://sse-mock:8080/api/stream ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-21-sse-spring-node-dev-ci/sse-ci-setup.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned before, you could/should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/stop&lt;/code&gt; for the sse-mock.
In this setup, this means adding extra rules in your nginx config.
You want all your api calls to go to the other mock (Node-RED in this case) while proxying &lt;code class=&quot;highlighter-rouge&quot;&gt;/stream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/stop&lt;/code&gt; to your sse-mock.&lt;/p&gt;

&lt;p&gt;The advantage of implementing the start/stop functionality, is that you can tell your test framework to start the sse-mock events stream and then start watching the response in the UI.&lt;/p&gt;

&lt;p&gt;e.g. (protractor, jasmine):&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/api/start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// depending on the host/address&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’ve build your test data/setup in a specific order, you know what to expect and test for in the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Setting up Server-Sent Events is very easy.
It is a powerful tool for unidirectional streams to you clients.
The hardest part is defining a strategy for your connections and event type differentiation.
Setting up the &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; part is easy as well.
Although you can test a lot in your unit tests, implementing End 2 End testing, mock and real, is recommended.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="sse" /><category term="Spring" /><category term="Nodejs" /><category term="Angular" /><category term="Node-RED" /><category term="ci" /><category term="mock" /><summary type="html">Table of contents Intro What are Server-Sent Events Java Nodejs Angular Continuous Integration Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-21-sse-spring-node-dev-ci/sse-front.png" /></entry><entry><title type="html">MongoDB Europe 2018</title><link href="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html" rel="alternate" type="text/html" title="MongoDB Europe 2018" /><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/11/20/mongodb-europe-018.html">&lt;blockquote&gt;
  &lt;p&gt;MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products.
This year the venue took place in Old Billingsgate Walk, London.
Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#atlas&quot;&gt;Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-university&quot;&gt;MongoDB University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#common-query-mistakes&quot;&gt;Common query mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stitch&quot;&gt;Stitch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#meet-the-experts&quot;&gt;Meet the experts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mongodb-charts&quot;&gt;MongoDB Charts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing&quot;&gt;Closing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;atlas&quot;&gt;Atlas&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Atlas for your Enterprise&lt;/a&gt;, Vladislava Stevanovic &amp;amp; Veronica Tudor)&lt;/p&gt;

&lt;p&gt;Atlas is the database as a service offering (DBaaS) by MongoDB itself.
You can run your MongoDB in the cloud with the cloud provider of your choice, secured by default and automatically backed up.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;It is very easy to get started since a free tier is provided for everyone and you can deploy with the cloud provider of your choice (Azure , GCP, AWS).
A cluster can be started for free in just a few clicks.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/create-mongodb-atlas-cluster.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Start your own cluster: &lt;a href=&quot;https://cloud.mongodb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://cloud.mongodb.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloud&quot;&gt;Cloud&lt;/h3&gt;
&lt;p&gt;MongoDB Atlas is a cross-platform database which you can run on Amazon Web Services, Google Cloud or Microsoft Azure. 
It provides you an availability map that shows you which users are served from where and what the expected latency is.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/global-clusters.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;
&lt;p&gt;When your database grows it is easy to scale up or out.
You can scale up by increasing the size of the instance on which your database runs.
Scaling out is done by the process of sharding.
Here we are storing data of the same collection across multiple smaller partitions so we can distribute these partitions over multiple machines and increase read-write performance.
This way you do not run into the limitations of a single server.&lt;/p&gt;

&lt;p&gt;To ensure that MongoDB stores data equally across shards you need the right strategy of choosing a partition key.&lt;/p&gt;

&lt;h3 id=&quot;high-availability&quot;&gt;High availability&lt;/h3&gt;
&lt;p&gt;When a primary node goes down, a new primary is chosen immediately by a system of voting.
All nodes vote on who should become the new primary. 
The node with the majority of votes becomes the new primary.
A general guideline is to have a replica set that consists of one primary node and at least two secondary nodes.
To ensure maximum uptime the procedure to recover from instance failures is completely automated.&lt;/p&gt;

&lt;h1 id=&quot;mongodb-university&quot;&gt;MongoDB University&lt;/h1&gt;

&lt;p&gt;With &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB University&lt;/a&gt;, Mongo has its own platform for online courses.
A lot of them are available for free.
You can pick out courses according to your needs or profession.
There are training tracks for Developers, DBA’s and everyone else…
The courses are ideal to get you started or to deepen your knowledge when you want to be more advanced.
If you want you can even get certified!
I speak from my own experience when I say that the University platform is great to work with, and the courses are very well taught.
Find all available resources here: &lt;a href=&quot;https://university.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://university.mongodb.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;compass-aggregation-pipeline-builder&quot;&gt;Compass Aggregation Pipeline Builder&lt;/h1&gt;

&lt;p&gt;Recently the aggregation pipeline builder was introduced in &lt;a href=&quot;https://www.mongodb.com/products/compass&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Compass&lt;/a&gt;.
This allows you to create an aggregation pipeline step by step and that makes it easy to debug the pipeline along the way.
Let’s see an example: &lt;br /&gt;
Suppose I have a collection which contains documents that represent a person, like this :
Here are two examples of elements in the collections:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d073&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Didi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Verhoft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1996&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ObjectId(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5be40f6e7047ead15753d074&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;birthYear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A person has the fields lastName, firstName and birthYear (and of course for some people more info could be stored).
I want to build a pipeline with the following functionality:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to filter out all people that share my lastname “Van Hoof”&lt;/li&gt;
  &lt;li&gt;Then I want to count how many times these people also share the same firstname and birthyear&lt;/li&gt;
  &lt;li&gt;Next I want to group them by birthYear so that I can see how many people were named “Nick Van Hoof “ (my fullname) in 1992.&lt;/li&gt;
  &lt;li&gt;Finally, I want them sorted on year in ascending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filter all with last name  “Van Hoof” and group by lastName, firstName and year:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Group by year and sort in ascending order:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/aggregation-pipeline-builder-compose-2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As you can see from the images above, Compass will show all the intermediary results. 
With one push of a button you can generate a command line query or the translation to a programming language.
Compass tells me the full aggregate will look like :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Van Hoof&quot;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                        &lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$birthYear&quot;&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;na&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
                      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;s2&quot;&gt;&quot;occurences&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                              &lt;span class=&quot;s2&quot;&gt;&quot;$push&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;s2&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$count&quot;&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&quot;_id.year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would have been a lot harder to write this query manually, without the pipeline builder.&lt;/p&gt;

&lt;h1 id=&quot;common-query-mistakes&quot;&gt;Common query mistakes&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tips And Tricks for Avoiding Common Query Pitfalls, Christian Kurze&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;key-takeaways-from-this-session&quot;&gt;Key takeaways from this session&lt;/h3&gt;

&lt;p&gt;Generally speaking, there are three major causes of query slowness:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blocking operations&lt;/li&gt;
  &lt;li&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator&lt;/li&gt;
  &lt;li&gt;Case insensitive searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not uncommon that a properly tuned query delivers a factor 1000 speed-up.
So it’s definitely worth investigating.&lt;/p&gt;

&lt;h3 id=&quot;problem-1-blocking-operations&quot;&gt;Problem 1: blocking operations&lt;/h3&gt;
&lt;p&gt;This happens when you use an operator that needs all the data before producing results, so results can’t be streamed.
The most common culprits are the aggregation operators such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$sort&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$group&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$bucket&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$count&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$facet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible solutions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a compound index to support your query and make sure that the sort order in the index is the same as in your query.&lt;/li&gt;
  &lt;li&gt;Offload the query to a secondary member.&lt;/li&gt;
  &lt;li&gt;Work around the issue by using a precalculated count.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-2-and-is-fast-or-is-slow&quot;&gt;Problem 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; is fast, &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; is slow&lt;/h3&gt;
&lt;p&gt;Sometimes a query is fast when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; operator but slow when you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use a compound index to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$and&lt;/code&gt; queries.&lt;/li&gt;
  &lt;li&gt;Use separate single field indexes to support &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt; queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problem-3-case-insensitive-searches-are-slow&quot;&gt;Problem 3: case insensitive searches are slow!&lt;/h3&gt;
&lt;p&gt;It is much harder for MongoDB to perform case insensitive searches because it has to match all possible permutations of the search string. 
For example, if you do a case insensitive search for the string “ace”, it has to match “ace”,”Ace”,”aCe”,”ACe”, and so on…&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(3.4 and higher) Support the query with a case insensitive index.&lt;/li&gt;
  &lt;li&gt;Alternatively, store a toLower() copy of the string in another field and index and query that field instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general-tips-and-tricks&quot;&gt;General tips and tricks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create an index on an element you are interested in instead of scanning the whole table.&lt;/li&gt;
  &lt;li&gt;When you query on a combination of fields create a compound index for these fields and not separate indices on each field.&lt;/li&gt;
  &lt;li&gt;…but be careful with the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;$or&lt;/code&gt;!&lt;/li&gt;
  &lt;li&gt;Build indices in the background instead of making it a blocking operation.&lt;/li&gt;
  &lt;li&gt;Do not index all fields as this will negatively impact write performance. 
Investigate what you really need!&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;.explain()&lt;/code&gt; to analyze queries.&lt;/li&gt;
  &lt;li&gt;Ops Manager and Atlas have a &lt;a href=&quot;https://docs.atlas.mongodb.com/performance-advisor/&quot;&gt;Performance Advisor&lt;/a&gt; to help you identify problematic queries.&lt;/li&gt;
  &lt;li&gt;Train your people.&lt;/li&gt;
  &lt;li&gt;Work smarter, not harder!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;stitch&quot;&gt;Stitch&lt;/h1&gt;
&lt;p&gt;(&lt;a href=&quot;https://sched.co/FmAJ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ch-Ch-Ch-Ch-Changes: Taking Your MongoDB Stitch Application to the Next Level With Triggers, Andrew Morgan&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Write less code and build apps faster!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stitch is the ‘Serverless platform from MongoDB’, and it comes with a free tier to play around!
It provides a very easy way to create an application without having to write lots of code in a separate backend.
The functionalities of Stitch are provided through an SDK.
Currently there are SDK’s for JavaScript, React Native, IOS and Android.
There is even an Electric Imp Library for IoT devices.&lt;/p&gt;

&lt;p&gt;Stitch has four main services :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stitch QueryAnywhere&lt;/li&gt;
  &lt;li&gt;Stitch Functions&lt;/li&gt;
  &lt;li&gt;Stitch Triggers&lt;/li&gt;
  &lt;li&gt;Stitch Mobile Sync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stitch-queryanywhere&quot;&gt;Stitch QueryAnywhere&lt;/h3&gt;
&lt;p&gt;QueryAnywhere enables you to query the database directly instead of going through a REST api.
The benefit here is that as a client application you are not restricted to what a REST api would expose but you can use all the power of the MongoDB Query Language directly:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;employees&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, all of this is secured with authentication and fine grained authorization based on the logged in user or the contents of the documents.&lt;/p&gt;

&lt;h3 id=&quot;stitch-functions&quot;&gt;Stitch Functions&lt;/h3&gt;
&lt;p&gt;You can write JavaScript functions in the Stitch serverless platform and combine database calls with cloud services.
For example, send a message with Twilio to all users:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongodb-atlas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;twilio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twilioNumber'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Then call callFunction from the client side&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stitchClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sendMessage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello from Stitch!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stitch-triggers&quot;&gt;Stitch Triggers&lt;/h3&gt;
&lt;p&gt;MongoDB does not provide triggers, as known in the RDBMS world.
With MongoDB change streams you can build your own triggers in your application.
This comes with the cost of handling the complexity of change streams yourself. 
For example: how to resume the change stream after a network issue?
So that’s why there is Stitch Triggers to make this easier.&lt;/p&gt;

&lt;p&gt;Stitch triggers combines change streams with Stitch Functions.
So when the inventory of an article goes up, Stitch Trigger calls a function that uses Twilio to send a text message to your client.&lt;/p&gt;

&lt;h3 id=&quot;stitch-mobile-sync&quot;&gt;Stitch Mobile Sync&lt;/h3&gt;
&lt;p&gt;Since 4.0, MongoDB provides a &lt;a href=&quot;https://www.mongodb.com/products/mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mobile&lt;/a&gt; version for IOS and Android.
With Stitch, you can sync your data in your mobile application with your database.
So now you can use the full MongoDB Query Language, including aggregations, on your mobile device and sync it with your database.&lt;/p&gt;

&lt;h3 id=&quot;built-in-external-integrations&quot;&gt;Built-in external Integrations&lt;/h3&gt;
&lt;p&gt;The fun with Stitch really starts when you combine all the goodness of Stitch with its integrations with cloud services like Twilio, AWS, Google, etc…
You can authenticate with Google, store files on S3 or spin up a cluster on Redshift after you send a text message with Twilio.
All of this can be hidden behind a simple function call for your application, or a trigger on your Atlas cluster.&lt;/p&gt;

&lt;h3 id=&quot;limited-to-stitch-ui&quot;&gt;Limited to Stitch UI?&lt;/h3&gt;
&lt;p&gt;Luckily MongoDB builds its products with developers in mind.
So you can import and export your Stitch applications and put them in a source control of your choice.&lt;/p&gt;

&lt;h1 id=&quot;meet-the-experts&quot;&gt;Meet the experts&lt;/h1&gt;
&lt;p&gt;At the conference you had the chance to book a 20 minute session with a MongoDB expert.
This was of great help in getting to know the new MongoDB Aggregation Pipeline builder.
The expert also gave some more tips in “thinking noSQL”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When data is shown together it is stored together – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data should be stored in the same way it is used – MongoDB expert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;streaming-data-pipelines-with-mongodb-and-kafka-at-ao&quot;&gt;&lt;a href=&quot;https://sched.co/FmAp&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Streaming data pipelines with MongoDB and Kafka at AO&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Appliances Online, &lt;a href=&quot;https://ao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AO&lt;/a&gt;, is an international online appliances retailer.
They wanted to solve the issue of having data locked in different places so they wanted a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_customer_view/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Single Customer View&lt;/a&gt;.
The idea was to get the data from all the different places and consolidate this in MongoDB.
We are talking here about data stored in legacy databases or messages going through queues.
The data could be the usual customer data and phone calls with customer care.
But also about parcels moving through the warehouse and delivery tracking.
They wanted to get the data while it’s hot, not in hourly or daily (or worse…) batches.
It was decided to use MongoDB to build up this materialised view of all different data streams, and Atlas to be able to focus on the application and not the database administration.&lt;/p&gt;

&lt;p&gt;The vast majority of the data resides in MsSql databases.
Extraction happens with &lt;a href=&quot;https://www.confluent.io/connector/kafka-connect-cdc-microsoft-sql/&quot;&gt;Kafka Connect SQL CDC&lt;/a&gt; to generate a stream of all create, update and delete operations into a stream, and push it to Kafka.&lt;br /&gt;
All with a simple piece of configuration like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msSqlSourceConnector1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connector.class&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;io.confluent.connect.cdc.mssql.MsSqlSourceConnector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tasks.max&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;initial.database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cdc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db-01.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server.port&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1433&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They use Avro for the schema definition in combination with a schema-registry.
Interested clients can then read the data off the topics and do their single-view-thing on the data and save it to MongoDB.
The view is being built up, message per message.
Afterwards this view in  MongoDB is then pushed back to Kafka as another stream to provide this data to interested parties.
This avoids locking the data in one place.&lt;/p&gt;

&lt;p&gt;To finish it of they shared some lessons learned :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Watch out for frameworks generating queries.&lt;br /&gt;
 They can create bad performing aggregations or queries.&lt;br /&gt;
 For them it was better to write some queries explicitly.&lt;/li&gt;
  &lt;li&gt;Use custom _id for unique determination of your model, it saves an index and RAM&lt;/li&gt;
  &lt;li&gt;Watch out for unbounded document growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mongodb-enterprise-operator-for-kubernetes-at-amadeus&quot;&gt;&lt;a href=&quot;https://sched.co/FmAc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MongoDB Enterprise Operator for Kubernetes at Amadeus&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://amadeus.com/en&quot;&gt;Amadeus&lt;/a&gt; is the world’s largest technology company dedicated to the travel industry.
They have developed an impressive MongoDB farm, a large environment with 100 clusters.
Some of these clusters run more than 100 shards, while others have 100TB MongoDB databases.
Amadeus processes more than 1 trillion flight availability requests per day. 
For each single search you do on a website they receive 500.000 availability requests.
So search responsibly ;-)
The number of requests per day grows by 50% each year.
The second of January has by far the most requests, due to new years resolutions!
If this day is in the weekend all systems are pushed to their limits.
The airline fare database for one of their big clients, Kayak, is 100TB in size and changes daily.
That’s some pretty big numbers there.
No wonder that Amadeus is a happy user of the MongoDB Enterprise Operator for Kubernetes.&lt;/p&gt;

&lt;p&gt;Starting with the MongoDB Ops Manager v4.0, MongoDB officially supports the management and deployment of MongoDB in Kubernetes with Backup, Automation, Alerting and Monitoring.
A &lt;a href=&quot;https://github.com/mongodb/mongodb-enterprise-kubernetes&quot;&gt;MongoDB Enterprise Kubernetes Operator&lt;/a&gt; has app-specific awareness about stateful applications, so it knows how to deploy them.
This operator helps automating scripted tasks and enables MongoDB-as-a-service for developers.
It talks to Ops Manager and delegates the creation of clusters, shards, backups and automation to Ops Manager.
The underlying necessary Kubernetes infrastructure is orchestrated by the operator itself and so they work in conjunction.
This provides for clusters to be setup, scaled up/down/out/in, with a single simple yaml file.
And kubernetes provides the self-healing capabilities, how nice is that!?&lt;/p&gt;

&lt;p&gt;The following yaml file is all you need to spin up a 3 node replica set :&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb.com/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MongoDbReplicaSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myReplicaSet&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4.0.1&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;projectName&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myUberSecretCredentials&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I kid you not, that’s it.&lt;/p&gt;

&lt;p&gt;Scale out or back in with a simple change in the config yaml and&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; file.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mongodb-charts&quot;&gt;MongoDB Charts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sched.co/FtWP&quot;&gt;Bringing Data to Life with MongoDB Charts&lt;/a&gt;, Guillaume Meister.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, if you want to visualize data in a MongoDB database you either have to code it yourself, or rely on a 3rd party tool and migrate your data to a different platform (for example: Kibana with Elasticsearch is very popular).
Needless to say that this can be quite cumbersome.
&lt;a href=&quot;https://www.mongodb.com/products/charts&quot;&gt;MongoDB Charts&lt;/a&gt; intends to solve this.&lt;/p&gt;

&lt;p&gt;So what is it? 
MongoDB Charts is a visualization tool that runs as a standalone webserver so you can access it via a web browser.&lt;/p&gt;

&lt;p&gt;In Charts you define data sources by pointing to a collection or view on a MongoDB instance.
Then you can create all kinds of visualizations based on the data source, using various aggregation and filter functions.
Finally, you can combine charts into dashboards with a customized layout and you can share these with other users.&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, so to give you a better idea of what it is all about, let’s look at an animation of Charts in action:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2018-11-08-mongodb-europe-2018/mongodb-charts-01.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Charts is still in beta but you can already try it out. 
MongoDB provides a docker image that you can &lt;a href=&quot;https://www.mongodb.com/download-center/charts&quot;&gt;download&lt;/a&gt; via the MongoDB download center.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;It was a great day being submerged in MongoDB-knowledge. 
This conference gave us plenty of opportunity to talk to other experts and learn about the new and upcoming features.&lt;/p&gt;

&lt;p&gt;Keep an eye on this space for more MongoDB goodness.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Chris&quot;, &quot;last_name&quot;=&gt;&quot;De Bruyne&quot;, &quot;permalink&quot;=&gt;&quot;/author/chris-de-bruyne&quot;, &quot;avatar&quot;=&gt;&quot;chris-de-bruyne.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;Principal MongoDB Consultant&quot;, &quot;email&quot;=&gt;&quot;chris.debruyne@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;ceedeebee2901&quot;, &quot;bio&quot;=&gt;&quot;Chris is a Senior Java Developer at Ordina Belgium, passionate about Java and MongoDB. Chris is passionate to help colleagues and clients to get the most out of MongoDB and the Java eco system.&quot;}</name><email>chris.debruyne@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="MongoDB" /><category term="DBA" /><category term="Data" /><category term="Kubernetes" /><category term="Conference" /><summary type="html">MongoDB Europe is a yearly conference where MongoDB shows off their latest features and new products. This year the venue took place in Old Billingsgate Walk, London. Jan, Nick and Chris wrote this blog post to summarize several of the given sessions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-08-mongodb-europe-2018/main-image-mdbe.png" /></entry><entry><title type="html">JOIN 2018</title><link href="https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018.html" rel="alternate" type="text/html" title="JOIN 2018" /><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/11/16/JOIN-2018.html">&lt;h1 id=&quot;join-is-back&quot;&gt;JOIN is back!&lt;/h1&gt;

&lt;p&gt;As has become tradition, Ordina JWorks organised the annual JOIN conference on Oct 4th.
This edition was the 6th and once again it was bigger and better than the previous editions.&lt;/p&gt;

&lt;p&gt;JOIN is a free conference hosted every year by Ordina JWorks, by and for our own employees.
External colleagues, and basically anyone interested in Ordina JWorks, is also invited to come over and indulge themselves in the JWorks atmosphere.
To learn about new technologies, trends and best practices in our domain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/join-2018/join-food.jpg&quot; alt=&quot;Join 2018 Food&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/join-2018/join-crowd.jpg&quot; alt=&quot;Join 2018 crowd&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;talks--workshops&quot;&gt;Talks &amp;amp; Workshops&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#unbeatable-at-connect-4-with-wearables-and-computer-vision-by-frederick-bousson&quot;&gt;Frederick Bousson: Unbeatable at Connect 4 with Wearables and Computer Vision&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testimonial-tvh-myassetplanner-by-tom-verelst&quot;&gt;Tom Verelst: Testimonial TVH MyAssetPlanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visualizing-mandelbrot-fractals-using-riff-and-spring-cloud-function-by-dieter-hubau&quot;&gt;Dieter Hubau: Visualizing Mandelbrot fractals using Riff and Spring Cloud Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testimonial-hziv-by-pieter-van-hees&quot;&gt;Pieter Van Hees: Testimonial HZIV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-10-worst-mistakes-your-product-owner-can-make-by-julia-müller&quot;&gt;Julia Müller: The 10 worst mistakes your product owner can make&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deep-learning-in-practice-by-remco-runge&quot;&gt;Remco Runge: Deep learning in practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#innovation-without-asking-permission-by-bart-blommaerts&quot;&gt;Bart Blommaerts: Innovation without asking permission&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unbeatable-at-connect-4-with-wearables-and-computer-vision-by-frederick-bousson&quot;&gt;Unbeatable at Connect 4 with Wearables and Computer Vision by &lt;a href=&quot;https://twitter.com/fbousson&quot; target=&quot;_blank&quot;&gt;Frederick Bousson&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Frederick Bousson&quot; src=&quot;/img/join-2018/speaker-bousson.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Frederick Bousson kicked off the technology track with his talk about wearables.&lt;/p&gt;

&lt;p&gt;Wearables are becoming more mainstream every day as proven by the prevalence of fitness trackers and smart watches.
Smart glasses on the other hand are still very rare.
Mainly because they still look awful.
But improvement is on its way here as well: better looking sets are starting to appear like the &lt;a href=&quot;https://www.vuzix.com/products/blade-smart-glasses&quot; target=&quot;_blank&quot;&gt;Vuzix Blade&lt;/a&gt;.
This is important as humans are very vision-oriented: 90% of the information on the internet is processed via the eyes.&lt;/p&gt;

&lt;h3 id=&quot;connect-4&quot;&gt;Connect 4&lt;/h3&gt;
&lt;p&gt;To really demonstrate the power of smart glasses, Frederick was looking for an interesting case he could use as a demonstration.
The result of this quest was a way to help you become unbeatable at Connect 4.&lt;/p&gt;

&lt;p&gt;Connect 4 is a “solved game”, which means that there’s an algorithm that can’t be defeated (provided you get to go first).
Frederick went hunting in the Open Source community and discovered a program written by &lt;a href=&quot;http://www.brian-borowski.com/&quot; target=&quot;_blank&quot;&gt;Brian Borowski&lt;/a&gt; which contained this algorithm.&lt;/p&gt;

&lt;p&gt;4 years ago, &lt;a href=&quot;https://github.com/ScottBouloutian/OpenCV-Connect-Four-AI&quot; target=&quot;_blank&quot;&gt;Scott Bouloutian&lt;/a&gt; added visual processing code on top of that and yet another person ported the result to Google Glass.
Nice to see how, with open source, you have people who build upon each others’ work.&lt;/p&gt;

&lt;h3 id=&quot;image-processing&quot;&gt;Image processing&lt;/h3&gt;
&lt;p&gt;If you want to have your smart glasses solve your game of Connect 4, you’ll need to do some image processing.
And since the game revolves around colour which means your program doesn’t just need to see, it has to reason about these colours as well.&lt;/p&gt;

&lt;p&gt;Reasoning in colour is a pain in the ass though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opencv.org/&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt;, Open Computer Vision, is a great library for image processing and it’s available for a lot of programming languages.
Unfortunately it doesn’t use RGB (Red-Green-Blue) as a color space, it uses &lt;a href=&quot;https://www.learnopencv.com/why-does-opencv-use-bgr-color-format/&quot; target=&quot;_blank&quot;&gt;BGR&lt;/a&gt; (Blue-Green-Red) instead.
If your brain is conditioned to think in RGB, switching to BGR is not an easy task.&lt;/p&gt;

&lt;p&gt;Before you can start solving the game you need to know the position of the pieces that were already played.
And before you can find those pieces you need to know where the board is.
In order to find the board you’ll need to look for a large, blue rectangle.
Then you draw lines around it and find the corners.
Now your application “sees” the board.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/join-2018/draw-boxes.jpg&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The next step is to look at the location of the played pieces.
For this you need to look inside the board for concentrations of the right color.
If you’re using a board that has a tray for the game pieces this tray is also part of the board and you’ll need to cut off a bit from the bottom.&lt;/p&gt;

&lt;p&gt;Of course if you’re using a different light source, colours are perceived differently by the camera (e.g. the same colour in fluorescent lighting is green while it will be matched to yellow when using a light bulb). 
This means that the colours found by openCV might no longer match the ones you programmed in so you’ll also have to take the white balance into account.&lt;/p&gt;

&lt;p&gt;The resulting data is then mapped into a 2-dimensional array which then can be fed to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimax&quot; target=&quot;_blank&quot;&gt;Minimax AI&lt;/a&gt; solver.
This solver will use a decision tree and you can define the amount of positions it needs to think ahead.&lt;/p&gt;

&lt;p&gt;This process also takes advantage of alpha-beta pinning. 
It uses a binary tree to decide which option is the best, but as soon as it sees that one branch scores too low it will no long check that part of the tree.&lt;/p&gt;

&lt;p&gt;All in all it’s a pretty performant bit of code: OpenCV can take the image, process it and spit out the results in about 50ms.&lt;/p&gt;

&lt;h3 id=&quot;everything-is-possible&quot;&gt;Everything is possible&lt;/h3&gt;
&lt;p&gt;AR/VR can do anything, but that makes you wonder why it is not everywhere yet.&lt;/p&gt;

&lt;p&gt;There are quite a few reasons for this: first of all you need a business case.
Companies won’t invest a lot of money into something that doesn’t have a return on investment.
And even if there’s money to be made in it you still need customers.
People actually have to want your product.&lt;/p&gt;

&lt;h3 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h3&gt;
&lt;p&gt;The key takeaways of Frederick around image processing are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Everything is possible&lt;/li&gt;
  &lt;li&gt;Think before you act&lt;/li&gt;
  &lt;li&gt;Just do it&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=ADk3GFbTks4&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt; on Youtube.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testimonial-tvh-myassetplanner-by-tom-verelst&quot;&gt;Testimonial TVH MyAssetPlanner by &lt;a href=&quot;https://twitter.com/tomverelst&quot; target=&quot;_blank&quot;&gt;Tom Verelst&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Tom Verelst&quot; src=&quot;/img/join-2018/tomverelst-speaker-zoom.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Tom spoke about the application MyAssetPlanner he has been working on at &lt;a href=&quot;https://www.tvh.com/&quot; target=&quot;_blank&quot;&gt;TVH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TVH is a company which rents out equipment and can provide you with spare parts for a lot of tools and vehicles.&lt;/p&gt;

&lt;h3 id=&quot;myassetplanner&quot;&gt;MyAssetPlanner&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tomorrowland.com/&quot; target=&quot;_blank&quot;&gt;Tomorrowland&lt;/a&gt; is quite a big event and for setting up and tearing down they rent up to 160 machines (or “assets”).
For every asset a contractor will need to schedule it to be available at a certain time, resulting in more than 300 phone calls which need to be handled by the asset planner.&lt;/p&gt;

&lt;p&gt;TVH wanted to improve the customer experience and decided they were going to develop a new application to help with the planning of these assets: MyAssetPlanner was born.&lt;/p&gt;

&lt;p&gt;First there was a design sprint by &lt;a href=&quot;https://clockwork.ordina.be/&quot; target=&quot;_blank&quot;&gt;Clockwork&lt;/a&gt; in order to come up with a prototype and the most important business needs which needed to be implemented. 
This part took about two weeks.&lt;/p&gt;

&lt;p&gt;After this prototype, TVH started with the implementation of the first version which was put into production two months later.
This first version has currently been in use for four months including for the last iteration of Tomorrowland.&lt;/p&gt;

&lt;p&gt;For development, the &lt;a href=&quot;https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/&quot; target=&quot;_blank&quot;&gt;Spotify model&lt;/a&gt; was used which is focussed around:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;autonomous squads&lt;/li&gt;
  &lt;li&gt;do it yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The architecture is driven by events and uses &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot;&gt;Kafka&lt;/a&gt; as a backbone allowing you to just consume what you need, the events in which you are interested.&lt;/p&gt;

&lt;p&gt;The entire CI/CD pipeline is fully automated thanks to &lt;a href=&quot;https://www.spinnaker.io/&quot; target=&quot;_blank&quot;&gt;Spinnaker&lt;/a&gt;.
This allows a developer to commit a feature which gets automatically deployed to an acceptance environment.
As soon as the product owner approves the feature it will be rolled out to production.&lt;/p&gt;

&lt;p&gt;The teams work with Scrum Agile, it was interesting to hear about how they handle the sprint review.
After every sprint, different business stakeholders receive a scenario and one person of the team is present for assistance.
All the stakeholders must go through the scenario themselves.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;forces&lt;/code&gt; your stakeholders to work with the application instead of just watching a demo, resuling in a ton of valuable feedback.&lt;/p&gt;

&lt;h3 id=&quot;what-is-next&quot;&gt;What is next&lt;/h3&gt;
&lt;p&gt;For the moment there are a 17 customers using the tool. 
Very soon this will scale up to 5% of all TVH customers which amounts to 3.000.
After that there will be a gradual ramp up towards 20.000 customers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=K396nSVtfrE&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;visualizing-mandelbrot-fractals-using-riff-and-spring-cloud-function-by-dieter-hubau&quot;&gt;Visualizing Mandelbrot fractals using Riff and Spring Cloud Function by &lt;a href=&quot;https://twitter.com/dhubau&quot; target=&quot;_blank&quot;&gt;Dieter Hubau&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dieter Hubau&quot; src=&quot;/img/join-2018/speaker-hubau.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;function-as-a-service&quot;&gt;Function as a Service&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://pivotal.io/platform/pivotal-function-service&quot; target=&quot;_blank&quot;&gt;Pivotal Function Service&lt;/a&gt; (PFS) is a pretty new addition to the Pivotal landscape.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://projectriff.io/&quot; target=&quot;_blank&quot;&gt;Riff&lt;/a&gt;, an open source project, is the base of PFS.
The idea behind Riff is to easily create functions and move these to the cloud.
Its name is derived from the guitar world as you can see &lt;a href=&quot;https://en.wikipedia.org/wiki/Ostinato#Riff&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, the project lead is &lt;a href=&quot;https://www.twitter.com/m_f_&quot; target=&quot;_blank&quot;&gt;Mark Fisher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially Zookeeper and Kafka were used to send messages between functions but this did mean a lot of extra overhead to set up.&lt;/p&gt;

&lt;p&gt;Google found out about Riff and came to Pivotal with &lt;a href=&quot;https://cloud.google.com/knative/&quot; target=&quot;_blank&quot;&gt;Knative&lt;/a&gt; which runs on &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;.
You can find its repository on &lt;a href=&quot;https://github.com/knative/&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Knative allowed Pivotal to remove a lot of the boilerplate needed to run with Kafka and Zookeeper.&lt;/p&gt;

&lt;p&gt;Knative has four components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/serving&quot; target=&quot;_blank&quot;&gt;Knative Serving&lt;/a&gt;: request/reply messages.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/build&quot; target=&quot;_blank&quot;&gt;Knative Build&lt;/a&gt;: auto-detect your code and create the required containers and sidecars.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/knative/eventing&quot; target=&quot;_blank&quot;&gt;Knative Eventing&lt;/a&gt;: replaces Kafka and Zookeeper providing channels and subscriptions.&lt;/li&gt;
  &lt;li&gt;Fourth Knative block: makes it run really well on Google Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;riff&quot;&gt;Riff&lt;/h4&gt;
&lt;p&gt;A new version was released a couple of weeks ago.
Since this is a very fresh and new project, this did mean a lot of late nighters to migrate the code of the demo.
Experimental projects like this do tend to make frequent API changes during their initial development phase as backwards compatibility is currently not (yet) a requirement.&lt;/p&gt;

&lt;h3 id=&quot;mandelbrot&quot;&gt;Mandelbrot&lt;/h3&gt;
&lt;p&gt;One of the simplest mathematical functions which creates the most complex objects is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot; target=&quot;_blank&quot;&gt;Mandelbrot&lt;/a&gt; set.&lt;/p&gt;

&lt;p&gt;You can keep zooming in, resulting in more calculations the deeper you go.
It also tends to create pretty graphics which is nice for a demo.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;
&lt;p&gt;For a 400 x 400 image we will send a request to the backend to calculate the result for every pixel.&lt;/p&gt;

&lt;p&gt;This means that around 160.000 calls will be sent to do the calculation.
It is not the most efficient way to do the calculation but this demo is about using functions and not about calculating a Mandelbrot really fast.&lt;/p&gt;

&lt;p&gt;Riff uses containers to package your business logic.
There are two kinds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UserContainer: actual container contains the actual function&lt;/li&gt;
  &lt;li&gt;InitContainer: they run before your container.
You can use these to instantiate a database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For one function you need about 200MB of memory as it spins up a slimmed down Spring Boot in the backend.
All in all it is still pretty performant.
Dieter mentioned a talk of Dave Syer about performance in Spring which is very interesting to watch: &lt;a href=&quot;https://www.youtube.com/watch?v=97UTDmonq7w&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a nice talk showing what you can do with Riff but also a warning that it still is under development and using it might have you encounter bugs.
If that does happen do not hesitate to reach out to the Riff team.
When working on his talk, Dieter also raised several issues.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=812V9pAOxPw&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testimonial-hziv-by-pieter-van-hees&quot;&gt;Testimonial: HZIV by &lt;a href=&quot;https://twitter.com/pvanhees91&quot; target=&quot;_blank&quot;&gt;Pieter Van Hees&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Pieter Van Hees&quot; src=&quot;/img/join-2018/speaker-pieter.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pieter is currently on a project at &lt;a href=&quot;https://www.caami-hziv.fgov.be/en&quot; target=&quot;_blank&quot;&gt;HZIV&lt;/a&gt;, a government health agency which offers its members legal health and disability insurance.&lt;/p&gt;

&lt;h3 id=&quot;the-old-situation&quot;&gt;The old situation&lt;/h3&gt;
&lt;p&gt;A lot of old applications still run with the almighty &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;Cobol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;10 years ago, HZIV wanted to rewrite these using Java 5 and Swing but that rewrite didn’t go so well.
So they are still using these old beasts.&lt;/p&gt;

&lt;h3 id=&quot;a-new-start&quot;&gt;A new start&lt;/h3&gt;
&lt;p&gt;With more time comes more insight and it was decided to do a new rewrite and also to give the teams more freedom in how to set up their development environment and choosing the technologies that are best suited.&lt;/p&gt;

&lt;p&gt;Chosen technologies are, most notably:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 8 &amp;amp; 10&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/elk-stack&quot; target=&quot;_blank&quot;&gt;ELK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently the teams are working in an agile way, delivering fancy new features.&lt;/p&gt;

&lt;h3 id=&quot;working--hziv&quot;&gt;Working @ HZIV&lt;/h3&gt;
&lt;h4 id=&quot;what-is-great&quot;&gt;What is great?&lt;/h4&gt;
&lt;p&gt;You have great freedom to choose and test out new stuff. 
At the same time the atmosphere is relaxed, allowing you to explore without pressure.&lt;/p&gt;

&lt;h4 id=&quot;what-is-bad&quot;&gt;What is bad?&lt;/h4&gt;
&lt;p&gt;There is the risk of Developer Anarchy, where developers just introduce fancy new stuff without properly ironing out the edges.&lt;/p&gt;

&lt;p&gt;Some managers like to micro-manage.
The same managers also tend to introduce frequent scope changes which does not combine well.&lt;/p&gt;

&lt;h4 id=&quot;why-should-you-want-to-work-here&quot;&gt;Why should you want to work here?&lt;/h4&gt;
&lt;p&gt;Appearantly working at HZIV feels like being in a spy HQ.
The combination of some old furniture and modern technology create a very particular atmosphere.&lt;/p&gt;

&lt;p&gt;Very interesting to hear about an organization who has embraced a new way of working and is currently in the process of finding their way around it.
To see what goes well and what does not.&lt;/p&gt;

&lt;p&gt;It is also surprising that this can happen in a government agency as most of them in Belgium are not known to be very innovative.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=R-4nHw77yMY&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-10-worst-mistakes-your-product-owner-can-make-by-julia-müller&quot;&gt;The 10 worst mistakes your Product Owner can make by &lt;a href=&quot;https://twitter.com/JM_AgileAnalyst&quot; target=&quot;_blank&quot;&gt;Julia Müller&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Julia Müller&quot; src=&quot;/img/join-2018/speaker-julia1.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-product-owner&quot;&gt;A product owner&lt;/h3&gt;
&lt;p&gt;Is responsible for maximizing the value of the product and the work of the development team.&lt;/p&gt;

&lt;h3 id=&quot;1-po-doesnt-know-hisher-product&quot;&gt;1. PO doesn’t know his/her product&lt;/h3&gt;
&lt;p&gt;Having no knowledge of your product is fatal, because you are responsible and accountable for the success of your product.&lt;/p&gt;

&lt;p&gt;A good tip is that as a product owner you should be able to explain your product in 3 minutes.&lt;/p&gt;

&lt;p&gt;Use a &lt;a href=&quot;https://medium.com/qdivision/the-product-canvas-edf8df531&quot; target=&quot;_blank&quot;&gt;product canvas&lt;/a&gt; to help you understand your product.&lt;/p&gt;

&lt;h3 id=&quot;2-team-doesnt-have-a-product&quot;&gt;2. Team doesn’t have a product&lt;/h3&gt;
&lt;p&gt;If a team does a lot of little tasks, it will miss context and will have to endure frequent scope changes.&lt;/p&gt;

&lt;p&gt;This means that the team will have very little focus which is not very effective.&lt;/p&gt;

&lt;h3 id=&quot;3-there-is-no-vision-for-the-product&quot;&gt;3. There is no vision for the product&lt;/h3&gt;
&lt;p&gt;It is bad when user stories describe solutions like: &lt;code class=&quot;highlighter-rouge&quot;&gt;The user needs a button to be able to ... &lt;/code&gt;
This causes the team to stop thinking about what would be the best possible solution.
Do not forget that a team of people has more knowledge than one individual.&lt;/p&gt;

&lt;p&gt;Scrum is developing towards a goal and is about autonomous teams.
The vision which you as production owner provide must provide direction and guidance for the team.&lt;/p&gt;

&lt;p&gt;A helpful tool is a &lt;a href=&quot;https://www.linkedin.com/pulse/postcards-from-future-agile-technique-ryan-thomas-hewitt&quot; target=&quot;_blank&quot;&gt;“postcard from the future”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;4-the-non-economic-dreamer&quot;&gt;4. The non-economic dreamer&lt;/h3&gt;
&lt;p&gt;Every feature adds complexity, increases the chance of failure, and makes future changes more expensive.&lt;/p&gt;

&lt;p&gt;A product owner must be able to reason economically as every feature should add a clear benefit.&lt;/p&gt;

&lt;p&gt;A product owner should also not hide behind ‘something’ the tech team does.
As those ‘things’ also determine the cost and business value of your product.&lt;/p&gt;

&lt;h3 id=&quot;5-tech-debt-not-my-problem&quot;&gt;5. Tech Debt not my Problem.&lt;/h3&gt;
&lt;p&gt;A good technical design is important for the success of your product. 
&lt;a href=&quot;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;image fit center&quot; alt=&quot;XX&quot; src=&quot;/img/join-2018/designStaminaGraph.gif&quot; width=&quot;60%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example: 
Investing in delivery speed might not add a direct business feature but will reduce development cost and allow you to provide new features faster in the future.
Customer value is different to business value.
An investment can also lead to business value.&lt;/p&gt;

&lt;h3 id=&quot;6-the-yes-sayer&quot;&gt;6. The YES-sayer&lt;/h3&gt;
&lt;p&gt;If you always say ‘yes’ to every feature request then your product may become a Frankenstein monster.&lt;/p&gt;

&lt;p&gt;It is better to discuss more upfront instead of implementing features you might need to remove later.&lt;/p&gt;

&lt;h4 id=&quot;wishful-thinking&quot;&gt;Wishful thinking&lt;/h4&gt;
&lt;p&gt;Don’t fall in the trap of wishful thinking.
Do not just assume that your product will be a success.&lt;/p&gt;

&lt;p&gt;Know how to validate your assumptions and make sure that you have a good feedback loop so that you know that the features you provided fulfil the business requirements.&lt;/p&gt;

&lt;h4 id=&quot;ignoring-the-facts&quot;&gt;Ignoring the facts&lt;/h4&gt;
&lt;p&gt;Ignoring the obvious signs that you are not going to meet your goal.&lt;/p&gt;

&lt;p&gt;So many demos are made with Powerpoint, a real sprint review should be the user starting the application and using it themselves.
If they get stuck you need to ask them why, as these situations will give you great feedback.&lt;/p&gt;

&lt;h3 id=&quot;7-obsessing-over-details&quot;&gt;7. Obsessing over details&lt;/h3&gt;
&lt;p&gt;The product owner who used to be an analyst.&lt;/p&gt;

&lt;p&gt;A huge backlog is not good, a good exercise is to take the top 50 and delete the rest.&lt;/p&gt;

&lt;p&gt;In a huge backlog there is a lot ‘relevant’ information in the stories, however this information tends to become stale.
Later on it will also become increasingly difficult to implement these stories as there is no certainty that the information they contain is still correct.&lt;/p&gt;

&lt;p&gt;Another big no-no is having a ‘definition of done’ being more than one page long for a user story.&lt;/p&gt;

&lt;p&gt;A nice concept is the three C’s:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Card (post it - fat pen): a story is just a single card. This is a reminder that we need to talk about this.&lt;/li&gt;
  &lt;li&gt;Criteria: Only Acceptance Criteria on the story.&lt;/li&gt;
  &lt;li&gt;Conversation: During refinement there will be a conversation with the team and then you will expand the story.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also be careful not to be a perfectionist.
No first release is going to be perfect.
Being fast in the market beats having a complete product.&lt;/p&gt;

&lt;h3 id=&quot;8-no-presence-no-communication&quot;&gt;8. No presence, no communication&lt;/h3&gt;
&lt;p&gt;Communication is one of the most important factors of failure in an organization.
A product owner must be with the team and not communicate from the sidelines.&lt;/p&gt;

&lt;h3 id=&quot;9-crossing-competences&quot;&gt;9. Crossing competences&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;This is not a 13, but it is much smaller&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your team says it is a 13, it is a 13.
They have the knowledge to estimate and implement a story.&lt;/p&gt;

&lt;h3 id=&quot;10-product-owner-is-the-only-one-filling-the-backlog&quot;&gt;10. Product owner is the only one filling the backlog&lt;/h3&gt;
&lt;p&gt;Let the team bring their own ideas to the backlog.
This will help them focus and deliver a better solution.&lt;/p&gt;

&lt;p&gt;Focus on what truly matters for your product.&lt;/p&gt;

&lt;h3 id=&quot;questions&quot;&gt;Questions&lt;/h3&gt;
&lt;h4 id=&quot;the-product-owner-has-a-lot-of-hats-how-can-he-manage-all-this&quot;&gt;The product owner has a lot of hats, how can he manage all this?&lt;/h4&gt;
&lt;p&gt;The product owner is indeed responsible for a lot of stuff.&lt;/p&gt;

&lt;p&gt;But being responsible does not mean that you need to deliver everything yourself. 
Learn to delegate.&lt;/p&gt;

&lt;p&gt;The product owner should also not be the only one who meets the stakeholders and not everybody should have to be a stakeholder.
Learn to remove stakeholders who do not contribute to the business value.
Remember the Frankenstein monster.&lt;/p&gt;

&lt;h4 id=&quot;can-a-product-owner-ignore-stakeholders-wishes&quot;&gt;Can a product owner ignore stakeholders wishes?&lt;/h4&gt;
&lt;p&gt;A Product Owner should be able to take his own decisions and decide to run some tests on customers and collect the resulting data.&lt;/p&gt;

&lt;p&gt;It is sometimes better to ask for forgiveness later.&lt;/p&gt;

&lt;p&gt;If the product owner has no trust of the organization making him/her unable to take decisions, then that person should not be the product owner.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch her &lt;a href=&quot;https://www.youtube.com/watch?v=edI6wDzIo8k&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;deep-learning-in-practice-by-remco-runge&quot;&gt;Deep learning in practice by Remco Runge&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Remco Runge&quot; src=&quot;/img/join-2018/remco-speaker-zoom.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Machine learning: you try to get the good algorithm to find the stuff you want to find.&lt;/p&gt;

&lt;p&gt;Deep Learning is based on biology, about how people thought the brain functioned. 
The assumption was proven wrong but the basic principles still work.&lt;/p&gt;

&lt;p&gt;Tensorflow has a nice &lt;a href=&quot;https://playground.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;playground&lt;/a&gt; where you can see these effects live in action.&lt;/p&gt;

&lt;p&gt;Deep learning has two flows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Forward propagation: feed data through it.&lt;/li&gt;
  &lt;li&gt;Backward propagation: update weights so the next iteration will be better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can define weights on input in order to make certain inputs more important.&lt;/p&gt;

&lt;p&gt;Deep learning requires a very large network with a large amount of nodes and a lot of hidden layers.&lt;/p&gt;

&lt;p&gt;The early layers allow your network to distinguish basic structures within your data.
Further down in the layers the network will learn more detailed features like; eyes, ears, …&lt;/p&gt;

&lt;p&gt;It is cool that the network learns these features about how to recoginize a person just by providing it with pictures of faces. 
We did not provide it with the concept &lt;code class=&quot;highlighter-rouge&quot;&gt;eyes&lt;/code&gt; but eventually, in one of the iterations the network started to take eyes into consideration.&lt;/p&gt;

&lt;h3 id=&quot;deep-learning-at-ordina&quot;&gt;Deep Learning at Ordina&lt;/h3&gt;

&lt;h4 id=&quot;workshop-hack-a-drone&quot;&gt;Workshop: hack a drone.&lt;/h4&gt;
&lt;p&gt;A small drone was equiped with deep learning to detect and identify objects by using the &lt;a href=&quot;https://deeplearning4j.org/&quot; target=&quot;_blank&quot;&gt;Deep Learning for Java&lt;/a&gt;.
In a short demo we saw it could identify a notebook.&lt;/p&gt;

&lt;h4 id=&quot;tic-tac-toe&quot;&gt;Tic Tac Toe&lt;/h4&gt;
&lt;p&gt;In contrary to &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(game)&quot; target=&quot;_blank&quot;&gt;Go&lt;/a&gt;, Tic Tac Toe just has 360.000 possible moves making it easier to use for a demo.&lt;/p&gt;

&lt;p&gt;The network for this demo learned by playing against some random opponents without any real strategy, this made it quite dumb. 
You could improve this by letting it play against itself.&lt;/p&gt;

&lt;h4 id=&quot;digital-railway-survey&quot;&gt;Digital Railway Survey&lt;/h4&gt;
&lt;p&gt;The idea is to recognize signs next to the railway and verify if these have been installed at the correct place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_detection&quot; target=&quot;_blank&quot;&gt;You Only Look Once&lt;/a&gt; is a very cool algorithm which gives you very nice bounded boxes around the objects on the images making it easier for your network to know where it needs to look and thus preventing you from processing unrelevant pictures.&lt;/p&gt;

&lt;p&gt;It was also nice to see that with deep learning the system can distinguish signs from a passing train even when we would be unable to see these signs, let alone see what has been written on it.&lt;/p&gt;

&lt;h3 id=&quot;questions-1&quot;&gt;Questions&lt;/h3&gt;
&lt;h4 id=&quot;how-long-does-it-take-to-get-started&quot;&gt;How long does it take to get started?&lt;/h4&gt;
&lt;p&gt;If you work with existing data sets and known algorithms, 15 lines of code is enough.&lt;/p&gt;

&lt;p&gt;Remco mentioned that for a brand new project it can easily take up to 55 days just to show that deep learning is possible for a specific business case.
It takes a long time to gather the required data.
You need to label it and make sure it is diverse enough so your model is not too focussed on one specific subset of input.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=NcT7Hif19hk&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;innovation-without-asking-permission-by-bart-blommaerts&quot;&gt;Innovation without asking permission by &lt;a href=&quot;https://twitter.com/DaggieBe&quot; target=&quot;_blank&quot;&gt;Bart Blommaerts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bart Blommaerts&quot; src=&quot;/img/join-2018/speaker-bart.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;service-decomposition&quot;&gt;Service decomposition&lt;/h3&gt;
&lt;p&gt;When you want to split up a monolith into smaller applications there are three patterns you can follow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Split: define vertical functional boundaries.
This does not happen to be possible in all old applications.&lt;/li&gt;
  &lt;li&gt;Strangle: extract and re-implement logic in new components.&lt;/li&gt;
  &lt;li&gt;Extend: new functionality in new microservices. Do pay attention to not create a distributed micro-&lt;strong&gt;**&lt;/strong&gt;** fest, also known as a distributed monolith.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally you will not just use one pattern but all three.&lt;/p&gt;

&lt;h3 id=&quot;anti-corruption-layer&quot;&gt;Anti-corruption layer&lt;/h3&gt;
&lt;p&gt;The anti-corruption layer translates to and from different models.
It allows you to enforce loose coupling between contexts.&lt;/p&gt;

&lt;p&gt;You can use different patterns for it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shared repository: just share the same repository between various services.&lt;/li&gt;
  &lt;li&gt;Data-synchronized repository: each microservice has one database asynchronously synchronize the data.&lt;/li&gt;
  &lt;li&gt;Event-driven synchronised repository: the main idea behind events, do not wait for data to be asked but just publish it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An event happened in the past and it contains three types of data:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data it owns: this is data tied owned by the publisher in the event&lt;/li&gt;
  &lt;li&gt;Data it needs: this is data which can originate from other services but which is necessary to handle the event&lt;/li&gt;
  &lt;li&gt;Referenced Data: data which might be relevant for the event. 
For example when booking a holiday, the reference temperatures of the location to where you want to travel to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event should contain enough information so that consumers do not need to query for additional data.
Otherwise you will not think properly about your bounded contexts and you will not be able to build a loosely coupled system.&lt;/p&gt;

&lt;p&gt;In an ideal world you can talk with your business stakeholders about how these events should look like.&lt;/p&gt;

&lt;h3 id=&quot;bounded-contexts&quot;&gt;Bounded contexts&lt;/h3&gt;
&lt;p&gt;Bart indicated that it is very interesting to look at the &lt;a href=&quot;https://skillsmatter.com/skillscasts/1431-greg-young-ddd-projects&quot; target=&quot;_blank&quot;&gt;DDD lite movie&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/gregyoung&quot; target=&quot;_blank&quot;&gt;Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It may look complex and after watching it the first time you might decide that you don’t ever want to do Domain-Driven Design, but make sure to watch it a second time and things will definitely become more clear. ;-)&lt;/p&gt;

&lt;h4 id=&quot;identify-the-domain&quot;&gt;Identify the domain&lt;/h4&gt;
&lt;h5 id=&quot;where-does-your-microservice-start&quot;&gt;Where does your microservice start?&lt;/h5&gt;
&lt;p&gt;Identify domains and subdomains.
These subdomains tend to correspond with your bounded contexts.&lt;/p&gt;

&lt;h5 id=&quot;how&quot;&gt;How?&lt;/h5&gt;
&lt;p&gt;Look at the data model:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Talk to business stakeholders.
Make the list of subdomains explicit.&lt;/li&gt;
  &lt;li&gt;Look at the data.&lt;/li&gt;
  &lt;li&gt;Look at the code, both existing and historically.
If two files always get committed together, they most likely belong to the same bounded context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;integration-patterns&quot;&gt;Integration patterns&lt;/h4&gt;
&lt;p&gt;Between bounded contexts there can be lots of integration patterns. A great source of information about these patterns can be found on the site of Gregor Hohpe: &lt;a href=&quot;https://www.enterpriseintegrationpatterns.com/gregor.html&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;
&lt;p&gt;The previous concepts were then shown in a short live demo providing a real implementation.&lt;/p&gt;

&lt;p&gt;What was interesting to see was that &lt;a href=&quot;https://avro.apache.org/docs/1.8.1/spec.html&quot; target=&quot;_blank&quot;&gt;Apache Avro&lt;/a&gt; was used as a schema for the events.
This shared schema repository is then the only coupling between your services.
Using a schema allows your consumer services to see if they can process an event or not.&lt;/p&gt;

&lt;h3 id=&quot;apis&quot;&gt;APIs&lt;/h3&gt;
&lt;p&gt;There exist a lot of API guidelines which you can use as baseline for your own, for example: &lt;a href=&quot;https://developer.paypal.com/docs/api/&quot; target=&quot;_blank&quot;&gt;Paypal&lt;/a&gt;, &lt;a href=&quot;https://zalando.github.io/restful-api-guidelines/&quot; target=&quot;_blank&quot;&gt;Zalando&lt;/a&gt;, …&lt;/p&gt;

&lt;p&gt;This talk is not about API design but when you design an API please keep Postel’s law in the back of your head.
Postel’s Law: &lt;code class=&quot;highlighter-rouge&quot;&gt;Be conservative in what you do, be liberal in what you accept from others&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do make sure that you have documented your API using: Swagger, Avro, HAL, RAML.&lt;/p&gt;

&lt;h3 id=&quot;without-asking-permission&quot;&gt;Without asking permission?&lt;/h3&gt;
&lt;p&gt;Continuous experimentation is the first thing to introduce.
You should really try to introduce that culture.
Microservices are small and thus can be easily thrown away.&lt;/p&gt;

&lt;p&gt;Use feature toggles and monitor your users in order to gather user feedback about which business features are the most interesting for your stakeholders.
With traffic routing you can make sure that only certain users get access to certain features allowing you to experiment with a very low risk.&lt;/p&gt;

&lt;p&gt;Use this data, these metrics you gathered, to convince your business stakeholders.&lt;/p&gt;

&lt;h3 id=&quot;distributed-systems&quot;&gt;Distributed systems&lt;/h3&gt;
&lt;p&gt;Are hard, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot; target=&quot;_blank&quot;&gt;eight fallacies of distributed computing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;See the hard nature of distributed systems as a way to introduce monitoring and logging (&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;Grafana&lt;/a&gt;, &lt;a href=&quot;https://prometheus.io/&quot; target=&quot;_blank&quot;&gt;Prometheus&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You can also provide this monitoring data to your users to give them more insights in the application, giving them direct feedback of their actions.&lt;/p&gt;

&lt;p&gt;Which can give you new opportunities.
For example: They will see failures and they will want this to be resolved.&lt;/p&gt;

&lt;h3 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h3&gt;
&lt;p&gt;Do not forget to take maintenance into consideration before adopting some new technology.
Because you should not forget that you will still need to maintain it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can rewatch his &lt;a href=&quot;https://www.youtube.com/watch?v=OWwciV6Z6jA&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; on our &lt;a href=&quot;https://www.youtube.com/channel/UCsebfWdqV7LqNNDMDvCESIA&quot; target=&quot;_blank&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the &lt;a href=&quot;https://www.slideshare.net/BartBlommaerts/innovation-without-asking-permission-102804954&quot; target=&quot;_blank&quot;&gt;slides&lt;/a&gt; of his talk on Slideshare.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;thanks-kevin&quot;&gt;Thanks Kevin&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Kevin Van den Abeele&quot; src=&quot;/img/join-2018/join-kevin.jpg&quot; /&gt;&lt;/span&gt;
Many thanks to our colleague Kevin for organizing the JOIN event.
Without all of his work it would not have been as great as it was.&lt;/p&gt;

&lt;h1 id=&quot;there-is-much-more&quot;&gt;There is much more&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;This was just summary of some of the talks we had on JOIN, there were many more as you can see on &lt;a href=&quot;https://www.youtube.com/watch?v=bnWMnSAdAi8&amp;amp;list=PLgWyY-g33NlUUIkxhIyI6A-6DveDVI4D1&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;next-year&quot;&gt;Next Year&lt;/h2&gt;
&lt;p&gt;Hope to see you around next year. Keep an eye out for future updates on our &lt;a href=&quot;https://ordina-jworks.github.io/join/&quot; target=&quot;_blank&quot;&gt;JOIN site&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Conference" /><category term="Join" /><category term="Java" /><category term="Agile" /><category term="Conference" /><summary type="html">JOIN is back!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/join-2018/join-2018.png" /></entry><entry><title type="html">Managing translations with Crowdin</title><link href="https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin.html" rel="alternate" type="text/html" title="Managing translations with Crowdin" /><published>2018-11-05T00:00:00+00:00</published><updated>2018-11-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2018/11/05/managing-translations-with-crowdin.html">&lt;blockquote&gt;
  &lt;p&gt;As your application continues to grow, you may want to support more and more languages.
Managing all that in the source code will become very hard and prone to errors.
Luckily there’s an easy solution to that and it’s called Crowdin!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-crowdin&quot;&gt;What is Crowdin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-features&quot;&gt;Key features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-app-translations&quot;&gt;In app translations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-crowdin&quot;&gt;What is Crowdin&lt;/h2&gt;
&lt;p&gt;Crowdin is an online platform that allows you to do translations through a visual interface.
You can appoint people as translators for any natural language.
Either an integration with your Git repository or a CLI tool can be used to get the source strings into Crowdin.
After uploading the source strings, the translators can get to work.
They’ll be notified whenever there’s something new to translate.
When they’re done, approvers can start proof-reading with the help of some thorough quality assurance functionalities.
You’ll never miss a translation again because it will clearly be marked as not being translated.
Strings that are removed from the source file will also be removed from all translations.
The translated files can be downloaded at any moment and will be in the exact same format as the source file.
In other words, clean and up-to-date translation files!&lt;/p&gt;

&lt;p&gt;Translator view:
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1422px;&quot; alt=&quot;Crowdin translator view&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/translator_mode.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Approver view:
&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 1439px;&quot; alt=&quot;Crowdin approver view&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/approver_mode.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-features&quot;&gt;Key features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A large number of file formats are supported, ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; files to &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt; files.
It can thus be used for Angular, React, Vue … applications as well as a Spring Boot service and so on.&lt;/li&gt;
  &lt;li&gt;Crowdin has a very clever parser and detects thing such as HTML tags and variables.
It will warn you if they are translated and no longer match the original tags/names.&lt;/li&gt;
  &lt;li&gt;Quality assurance checks will help the approver in verifying the translations.&lt;/li&gt;
  &lt;li&gt;Extra context can be provided for each source string to help translators understand what exactly they need to translate.&lt;/li&gt;
  &lt;li&gt;Integration with source control systems is very easy and will make sure that the source strings are up-to-date with your Git repository. 
Translations will automatically be pushed to your Git repository.&lt;/li&gt;
  &lt;li&gt;There’s even the possibility to integrate it with your website and have people do the translations on your website directly.
That way the translators get a lot of context of what to translate.&lt;/li&gt;
  &lt;li&gt;If you’re unable to do the translation for a certain language, 
Crowdin allows you to easily hire professional translators!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;h3 id=&quot;account&quot;&gt;Account&lt;/h3&gt;
&lt;p&gt;To start using Crowdin, you of course need an account at &lt;a href=&quot;https://crowdin.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Crowdin.com&lt;/a&gt;. 
There’s a limited free trial. 
After that you can choose from a variety of payment plans depending on the number of source strings and projects you’ll have.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The number of projects you need on Crowdin depends on your setup.
However, it’s recommended to create a project for each Git repository.
So if your front- and backend application live in the same repository, you can configure multiple source files within one project.
If not, you’ll need to create two separate projects on Crowdin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once logged in, you can create a new project. 
You can choose the source language and the languages you wish to translate to. 
Then go to the project’s settings and then to &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;.
There you’ll find a project identifier and a API key. 
We’ll need those later when setting up Crowdin in our project.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 744px;&quot; alt=&quot;Crowdin project settings&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/languages.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-in-your-project&quot;&gt;Setup in your project&lt;/h3&gt;
&lt;p&gt;First we need to install the Crowdin CLI. 
For Mac you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install crowdin&lt;/code&gt;. 
For Windows an &lt;a href=&quot;https://support.crowdin.com/cli-tool/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;installer&lt;/a&gt; is available.&lt;/p&gt;

&lt;p&gt;Once installed, open a terminal and go to the root of your project and run &lt;code class=&quot;highlighter-rouge&quot;&gt;crowdin generate&lt;/code&gt;.
This will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;crowdin.yml&lt;/code&gt; file that is used to configure Crowdin in your project.
In that file four things need to be changed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;project_identifier&lt;/code&gt;: the one you find under &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; on the Crowdin site&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api_key&lt;/code&gt;: also under &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;: this should point to the source translation file (e.g. in an Angular app &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/assets/i18n/en.json&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;translation&lt;/code&gt;: the translated files will end up here (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/assets/i18n/%two_letters_code%.json&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t recommend selecting the source language as a target language, because it will then be overwritten when downloading the translations.
You could put the source language file in a separate directory if you prefer the source language being editable on Crowdin as well.
However, you would have to update the source file manually when there are changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are &lt;a href=&quot;https://support.crowdin.com/configuration-file/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;more options&lt;/a&gt; and regexes available, but these are the only ones required to set up Crowdin in an Angular app for example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;upload-and-download-translations&quot;&gt;Upload and download translations&lt;/h3&gt;
&lt;p&gt;There are two options here: either you integrate Crowdin with your Git repository or you up and download the translations manually (or automate it using CLI commands).
I personally prefer integrating it with Git so we’ll get to that first.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;It’s not possible to use both at the same time because you’ll end up with multiple source files on Crowdin.com.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git-integration&quot;&gt;Git integration&lt;/h4&gt;
&lt;p&gt;On the Crowdin website, go to the project’s settings again, then to &lt;code class=&quot;highlighter-rouge&quot;&gt;Integration&lt;/code&gt;.
Choose the source control system you’re using and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Set Up Integration&lt;/code&gt; (or choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt; if you’re on a self-hosted version).
For GitHub and GitLab you’ll be redirected to their website to authorize Crowdin to use your account.
If you chose &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt; you’ll need to generate a token yourself and paste it into the correct field together with the URL to your self-hosted source control system.
Next you can choose which branches you want to watch for changes to the source language file and choose a name of the branch to where translations should be pushed.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Which source branch you wish to use depends on your workflow. 
In my case, we work with short-lived feature branches and once they are done, we merge them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.
So, the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch is the one being watched by Crowdin, since it will have all the correct source strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 903px;&quot; alt=&quot;Crowdin Git integration&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/git_integration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this setup, each change to the source language file will be reflected on the Crowdin site.
When a source string is translated and approved, Crowdin will push the translation to the target branch (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;i18n_master&lt;/code&gt;) and even open up a merge request for your review!&lt;/p&gt;

&lt;p&gt;A great benefit of this is that your stories don’t have to wait for all translations to be done.
Translations are now the responsibility of the people that you appointed to do the translations.
When they do, you’ll be notified with a merge request!&lt;/p&gt;

&lt;h4 id=&quot;manual-up--and-download&quot;&gt;Manual up- and download&lt;/h4&gt;
&lt;p&gt;If you don’t want to integrate with your Git repo, you can use the Crowdin CLI.
There are two simple commands that let you upload the source files and download the translations.&lt;/p&gt;

&lt;p&gt;Upload:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crowdin upload sources
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crowdin download
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-app-translations&quot;&gt;In app translations&lt;/h2&gt;
&lt;p&gt;Another nifty feature is that you can do translations directly in you webapp.
All you need to do is add a JavaScript snippet to your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and select a pseudo language called &lt;code class=&quot;highlighter-rouge&quot;&gt;Acholi&lt;/code&gt;.
Crowdin will give unique identifiers to all of your source strings and use those as translations.
Because of the snippet, these IDs will be located and replaced with translated strings for the language you’re translating to.
You will also be able to edit the translations inline in your application and they will immediately be reflected on Crowdin.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 960px;&quot; alt=&quot;In context localization&quot; src=&quot;/img/2018-11-05-managing-translations-with-crowdin/in_context_animation.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, this isn’t something you want to do in your production environment.
Ideally you’d only have a specific environment setup that loads the JavaScript snippet.
If the snippet is loaded you’ll always see the Crowdin tools in your webapp,
so it’s up to you whether you want to use it and where.&lt;/p&gt;

&lt;p&gt;More info &lt;a href=&quot;https://support.crowdin.com/in-context-localization/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Crowdin has really helped me and my team in the way we manage our translations.
At first we were sending out emails for every label to get it translated.
Of course we missed quite some translations in various languages.
The variables in the translated string would sometimes be translated as well which meant that they wouldn’t work.&lt;/p&gt;

&lt;p&gt;With Crowdin we now have a clear overview of what is translated and what isn’t.
Instead of sending emails, translators get notified and can do the translations through a nice UI.
Because of the thorough quality assurance tools, less mistakes are made and those translated variables can be fixed before approving the translation and bringing it to production.&lt;/p&gt;

&lt;p&gt;In short, it’s a must-have tool when you need to manage translations, especially for languages you do not speak yourself!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martijn&quot;, &quot;last_name&quot;=&gt;&quot;Willekens&quot;, &quot;linkedin&quot;=&gt;&quot;mwillekens&quot;, &quot;twitter&quot;=&gt;&quot;MaWi_137&quot;, &quot;github&quot;=&gt;&quot;Mawi137&quot;, &quot;permalink&quot;=&gt;&quot;/author/martijn-willekens/&quot;, &quot;avatar&quot;=&gt;&quot;martijn-willekens.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend developer&quot;, &quot;email&quot;=&gt;&quot;martijn.willekens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Martijn is a frontend developer at Ordina Belgium. He primarily devotes himself to building Angular and Ionic apps written in TypeScript. ReactiveX is his favorite set of tools to work with.&quot;}</name><email>martijn.willekens@ordina.be</email></author><category term="Development" /><category term="Development" /><category term="Translations" /><category term="Angular" /><category term="i18n" /><category term="Crowdin" /><summary type="html">As your application continues to grow, you may want to support more and more languages. Managing all that in the source code will become very hard and prone to errors. Luckily there’s an easy solution to that and it’s called Crowdin!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-11-05-managing-translations-with-crowdin/main-image.png" /></entry><entry><title type="html">Communication in a distributed system with OpenFeign: Tips &amp;amp; Tricks</title><link href="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html" rel="alternate" type="text/html" title="Communication in a distributed system with OpenFeign: Tips &amp; Tricks" /><published>2018-11-02T00:00:00+00:00</published><updated>2018-11-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2018/11/02/Inter-service-communication.html">&lt;p&gt;In contrast to monolithic applications, services in a distributed system are running on multiple machines. 
To let these services interact with each other, we need some kind of inter-process communication mechanism.
With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#intercepting-requests&quot;&gt;Intercepting requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#give-it-a-retry&quot;&gt;Give it a (re)try&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-your-api&quot;&gt;Securing your API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;communication-with-openfeign&quot;&gt;Communication with OpenFeign&lt;/h1&gt;
&lt;p&gt;To understand the basics of inter-process communication, we need to look at what kind of interactions we can do.
&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign&lt;/a&gt;, a declarative HTTP client by Netflix simplifies our way of interacting with other services. 
When we decide that it is time to decompose our modulith because of numerous reasons, we would have to look for a way to handle our inter-process communication.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;To use OpenFeign we need to add it to our classpath&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we inspect the dependency module, we see that there is a lot coming out-of-the-box with the Spring Cloud Starter.
If you are providing your own resilience or load balancing library you can just add the necessary dependencies you need.
Be aware that the syntax is different between using the Spring wrapper or OpenFeign itself.
To let your Spring context know that it has to search for OpenFeign clients, we just add &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableFeignClients&lt;/code&gt;. 
You can add this annotation to any class annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootApplication&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringCloudApplication&lt;/code&gt;
After we’ve enabled OpenFeign on our classpath, we can start adding OpenFeign clients. 
When defining these clients, we have two solutions you can choose from. 
The OpenFeign library, which provides us with the basics but very customizable OpenFeign clients, and the Spring library, that adds a few extra libraries to it for cloud tooling.&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FallbackAuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeignConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@FeignClient&lt;/code&gt;: is the annotation for Spring to recognize OpenFeign clients, OpenFeign clients have to be interfaces as it is self-declarative.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;value/name&lt;/code&gt;: is the name of the Feign client that will be used to create a &lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt; load balancer which can then be linked to the target application using service discovery or a fixed list of servers. 
You could also use the url attribute to point your client to the target application when you’re not using Ribbon.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fallback&lt;/code&gt;: if &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt; is enabled, you can implement a fallback method.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FallbackAuthClient&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt;: is for extra configuration like logging, interceptors, etc… more on that below.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;: Spring Cloud adds support for Spring MVC annotations and for using the same &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter's&lt;/code&gt; used by default in Spring Web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openfeign&quot;&gt;OpenFeign&lt;/h2&gt;
&lt;p&gt;To create an OpenFeign client we need an interface and a Feign builder that tells the interface it is an OpenFeign client.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestLine&lt;/code&gt;: is defining which verb and which URI path you are communicating to.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Headers&lt;/code&gt;: is defining the request headers that come with the request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-builder&quot;&gt;The builder&lt;/h1&gt;
&lt;p&gt;OpenFeign provides us with a builder-like pattern for our clients.
When we want to customize, we just add our own customization to the builder. 
To see the builder at work, let’s create a bean of our client and return a Feign builder.
It’s important to let the builder know which interface he has to target for communication. 
The second parameter is most likely the base url where all the requests begin. 
Get your URLs from the yml or properties file with the help of &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${base.url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;different-kinds-of-http-clients&quot;&gt;Different kinds of HTTP clients&lt;/h1&gt;
&lt;p&gt;The default HTTP client of OpenFeign uses &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpUrlConnection&lt;/code&gt; to execute its HTTP requests.
You can configure another client (&lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OkHttpClient&lt;/code&gt;, …) as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;okhttpclient&quot;&gt;OkHttpClient&lt;/h2&gt;
&lt;p&gt;OkHttp is an HTTP client that’s efficient by default:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/2 support allows all requests to the same host to share a socket.&lt;/li&gt;
  &lt;li&gt;Connection pooling reduces request latency (if HTTP/2 isn’t available).&lt;/li&gt;
  &lt;li&gt;Transparent GZIP shrinks download sizes.&lt;/li&gt;
  &lt;li&gt;Response caching avoids the network completely for repeat requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;apachehttpclient&quot;&gt;ApacheHttpClient&lt;/h2&gt;
&lt;p&gt;The advantage of using &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; over the default client is that &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; sends more headers with the request, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;, which some servers expect.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside from these clients, there are a few more to research if you want : &lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;OpenFeign clients&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;enabling-mutual-ssl&quot;&gt;Enabling Mutual SSL&lt;/h1&gt;
&lt;p&gt;Mutual SSL is supported in all of these clients.
To achieve this in an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt;, we have to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; that builds the SSL context.
When the SSL context is valid, we wrap this inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApacheHttpClient&lt;/code&gt; for being compliant with OpenFeign.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApacheHttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSSLSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSSLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApacheHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add it to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;give-it-a-retry&quot;&gt;Give it a (re)try&lt;/h1&gt;
&lt;p&gt;When we want to build some resilience in our communication, we can setup a retry mechanism in our OpenFeign client. 
If the other service is unreachable, we will try again until it is healthy or until the max attempts you have set in your configuration has been reached. 
When we want to use the retryer of OpenFeign, we got three properties we can set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;period&lt;/code&gt;: How long it takes before the retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxPeriod&lt;/code&gt;: That’s what the maximum is of how long it can take before a retry is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxAttempts&lt;/code&gt;: How many retries may the client trigger before it fails&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.period:3000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxPeriod:30000}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${retry.maxAttempts:5}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Retryer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAttempts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;intercepting-requests&quot;&gt;Intercepting requests&lt;/h1&gt;
&lt;p&gt;If you need some basic authorization, custom headers or some extra information in every request of the client, we can use interceptors. 
This becomes very useful in situations where every request needs this extra information.
To add an interceptor, we just add an extra method that returns the OpenFeign interceptor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestInterceptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMimeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To enable the customization, we add the interceptor to the builder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseServerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;securing-your-api&quot;&gt;Securing your API&lt;/h1&gt;
&lt;p&gt;When we want to add the security layer between our services, there are a couple solutions to look at. 
Here are a few that can be handled by OpenFeign.&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;
&lt;p&gt;When you want to send basic credentials you can just add an &lt;a href=&quot;#intercepting-requests&quot;&gt;interceptor&lt;/a&gt; for the OpenFeign client and add the username and password.&lt;/p&gt;

&lt;h2 id=&quot;bearer&quot;&gt;Bearer&lt;/h2&gt;
&lt;p&gt;For only Bearer token communication, you can just pass it down in the request header of your method call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Spring&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTokenValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//OpenFeign&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET /auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization: {token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept: application/hal+json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;oauth2&quot;&gt;OAuth2&lt;/h2&gt;
&lt;p&gt;This link provides a good explanation about the use of OAuth2 with OpenFeign: 
&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;creating-soap-clients&quot;&gt;Creating SOAP clients&lt;/h1&gt;
&lt;p&gt;Besides JSON encoders and decoders, you can also enable support for XML.
If you ever have to integrate with SOAP third party APIs, OpenFeign supports it.
There is a very detailed explanation on how to use it in the &lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; of OpenFeign.&lt;/p&gt;

&lt;h1 id=&quot;handling-errors-with-the-error-decoder&quot;&gt;Handling errors with the error decoder&lt;/h1&gt;
&lt;p&gt;The OpenFeign API provides an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; to handle erroneous responses from servers.
Since there are many kind of errors we can get, we want a place where we can handle each one of them accordingly. 
An OpenFeign &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt; must be added to the configuration of the client object as you can see in the code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than throwing an exception in the &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, you return an exception to Feign and Feign will throw it for you.
The default error decoder &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder.Default&lt;/code&gt; always throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt;.
The problem with ending up with a &lt;code class=&quot;highlighter-rouge&quot;&gt;FeignException&lt;/code&gt; is that it does not contain a lot of structure. 
It is a plain &lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt; which only contains a message with a stringified response body. 
No way of interpreting that exception to rethrow a more functional exception eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotFoundException&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;error-decoder&quot;&gt;Error decoder&lt;/h2&gt;
&lt;p&gt;To handle the errors, we have to look at the structure of these errors. 
From that structure, we build up our own exception and throw it so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerAdvice&lt;/code&gt; class can handle our exception.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomErrorDecoder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorDecoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to decode CustomException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomExceptionException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.errors&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; 
Working with checked exceptions and Feign is a bit tricky for several reasons.
Returning a checked exception is possible in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDecoder&lt;/code&gt;, but to avoid Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;UndeclaredThrowableException&lt;/code&gt;, you’ll have to add it to the method signature in the Feign interface. 
Doing this however, causes Sonar to complain because there’s no actual code which throws that exception.
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These were my experiences with OpenFeign and I like the simplicity of it. 
If you choose for the Spring wrapper or OpenFeign, the client is an advanced tool for enabling inter-service communication.
As of now, they just released a new version that is compliant with Java 11.
So go experiment and learn on the way!&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot;&gt;OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.0.1.RELEASE/single/spring-cloud-openfeign.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud OpenFeign Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jmnarloch.wordpress.com/2015/10/14/spring-cloud-feign-oauth2-authentication/&quot; target=&quot;_blank&quot;&gt;OAuth 2 interceptor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#jaxb&quot; target=&quot;_blank&quot;&gt;SOAP integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFeign/feign#ribbon&quot; target=&quot;_blank&quot;&gt;Other HTTP clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/ribbon&quot; target=&quot;_blank&quot;&gt;Ribbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem, Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Kevin has a strong focus on building cloud native architectures with the right mindset on security and API design.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="Spring" /><category term="Cloud" /><category term="OpenFeign" /><summary type="html">In contrast to monolithic applications, services in a distributed system are running on multiple machines. To let these services interact with each other, we need some kind of inter-process communication mechanism. With the help of OpenFeign, I will explain how we can fire off synchronous calls to another service.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/intercommunication/intercomm_header.jpg" /></entry></feed>