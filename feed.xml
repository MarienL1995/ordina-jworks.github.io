<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2019-04-15T11:33:39+00:00</updated><id>https://ordina-jworks.github.io/feed.xml</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">The Scrum framework is a Liberating Structure</title><link href="https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure.html" rel="alternate" type="text/html" title="The Scrum framework is a Liberating Structure" /><published>2019-04-04T00:00:00+00:00</published><updated>2019-04-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure</id><content type="html" xml:base="https://ordina-jworks.github.io/agile/2019/04/04/The-Scrum-framework-is-a-liberating-structure.html">&lt;p&gt;&lt;strong&gt;Scrum is an Agile &lt;em&gt;framework&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does that actually mean?
Are we supposed to fill it? 
Could we grab it, put it on the wall and paint our image in it, the way we see it, the way it works for us?&lt;/p&gt;

&lt;p&gt;Probably, we can. 
Seemingly, many organizations attempt to connect the numbers and dots in precisely that way, trying to get a hold on their portfolio planning and utilising Scrum for metrics to fill their project reports - solely focusing on accelerating output and pushing velocity through the roof. 
But let’s be careful, since we can easily get trapped in this. 
A framework isn’t there to just fill it and use it. 
Did we take the time or the effort to ponder over further possibilities that the frame might entail?&lt;/p&gt;

&lt;p&gt;The framework is not meant to contain just our own painting, our own image, whatever it is that is known to us. 
It is there to draw attention to something beyond… like the frame on the photo. 
Let it be a window. 
A transparent artifact, always representing a mere part of reality, depending on the spot from where we are and from where we are looking, not &lt;em&gt;at&lt;/em&gt; it but &lt;em&gt;through&lt;/em&gt; it, giving us an opportunity to inspect what we are spending our efforts on, or maybe… what we are wasting them on?&lt;/p&gt;

&lt;p&gt;The power of the Scrum framework is in its simplicity. 
The predictively recurring Scrum events form a synchronized pulse creating a steady heartbeat for the members of the Scrum team. 
The drone is persistently present, but only discretely so, not drawing attention, because the frame is not what it’s about. 
It’s a minimalist frame, that vanishes after a while, and is merely setting the scene… trying to create a fertile setting for a space in which, as soon as the Scrum team is accustomed to the pattern of the heartbeat, all team members can focus - as one organism - on collaboration, innovation and co-creation.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Together, we create&quot; src=&quot;/img/scrum-is-a-liberating-structure/together-we-create.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interhuman friction due to role shifts, adapting to new responsibilities and accountabilities, as well as difficulties with alignment of expectations are well-known characteristics of a team’s storming phase. 
But Tuckman, with his forming, storming, norming and performing model of team dynamics was only partly right. 
We now know that storming will always be there to some degree, accompanying the complexity and quickly-changing environment of today. 
A team, in fact, is constantly hovering over its storming arrhythmia, longing for it to clear up, using the heartbeat of the framework to gradually pave the road to high performance, focusing on value and gradual improvement.&lt;/p&gt;

&lt;p&gt;Indeed, the Scrum framework is a ‘liberating structure’ in every sense. 
Agreeing as a team on the structure to work with - and taking up one of the roles and its respective responsibilities therein, provides a clarity on what to expect and how to cooperate within that constraint. 
The frame and heartbeat might appear to be limiting structures at first, but once applied as intended, prove to provide liberation – within the safety of knowing that the entire team is referencing through the same framework.&lt;/p&gt;

&lt;p&gt;Metaphorically: Imagine a team looking at the sea and the framework is not there. 
What are we looking at? 
What are we seeing? 
What area of the horizon are we exploring?&lt;/p&gt;

&lt;p&gt;It will be hard to be aligned unless someone or something tells us where to look and what to look for. 
Then put the frame, the window, on the beach. 
All of us are looking through it – together, exploring a far bigger wedge of the sea than we ever could imagine doing alone.
At the same time it is enabling us to jointly aim for what could be beyond the horizon, when we all look in the same direction.&lt;/p&gt;

&lt;p&gt;Mind you, it is just a framework. 
“Metaphors are all nice and well, but what about the real world?” - you might dryly remark. 
Some teams indeed never really achieve this ‘selfless’ wavelength of high performance. 
And Scrum as a mere facilitative tool is certainly not to blame for that. 
Some teams tap into it rather effortlessly. 
But it requires a common understanding of the framework - and the discipline to jointly be accountable for its success. 
Furthermore, and most dauntingly, it builds on human trust, as an unconditional recipe to create psychological safety.&lt;/p&gt;

&lt;p&gt;Just like the Scrum master serves the team to enable every team member to be at her/his best, the Scrum framework is there to create the best possible circumstances for generating flexible value creation in a transparent and predictive way.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;wall-art&quot; src=&quot;/img/scrum-is-a-liberating-structure/wall-art.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Browsing through the Liberating Structures list of Henri Lipmanowicz and Keith McCandless&lt;sup&gt;1&lt;/sup&gt;, it is easy to notice a parallel and detect some clear common attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Liberating Structure is simple to introduce. Just like Scrum they are easy to learn but can be hard to master. Having a good facilitator is a must.&lt;/li&gt;
  &lt;li&gt;They are result focused. Not used for the sake of it, only for the extra value it generates.&lt;/li&gt;
  &lt;li&gt;They involve rapid cycling, meaning fast iterative rounds generating input and feedback.&lt;/li&gt;
  &lt;li&gt;They are inclusive, asking everyone’s opinion to make informed decisions on the way forward.&lt;/li&gt;
  &lt;li&gt;They are seriously fun and boost a sense of freedom and responsibility within a group.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attributes help us to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Share and spread vital knowledge&lt;/li&gt;
  &lt;li&gt;Cope with complexity&lt;/li&gt;
  &lt;li&gt;Include every member of the team and unleash their potential&lt;/li&gt;
  &lt;li&gt;Adopt a habit of creative adaptability&lt;/li&gt;
  &lt;li&gt;Promote anti-fragility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on top of that, Scrum - being an Agile practice strongly rooted in Lean principles - reintroduces systems thinking and the routine of improvement in the process of co-creation.&lt;/p&gt;

&lt;p&gt;If there is one principle in the world that should never change, let it be this one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Stay agile, never change” - Adam Weisbart&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;sup&gt;1&lt;/sup&gt; For a full but ever growing list of these liberating structures, visit &lt;a href=&quot;http://www.liberatingstructures.com/ls-menu/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.liberatingstructures.com/ls-menu/&lt;/a&gt; and &lt;a href=&quot;http://www.liberatingstructures.com/ls-in-development/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.liberatingstructures.com/ls-in-development/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;2&lt;/sup&gt; The epic quote by Adam Weisbart, concluding every podcast: see &lt;a href=&quot;https://weisbart.com/agile-answers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://weisbart.com/agile-answers/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michaëla&quot;, &quot;last_name&quot;=&gt;&quot;Broeckx&quot;, &quot;permalink&quot;=&gt;&quot;/author/michaela-broeckx/&quot;, &quot;title&quot;=&gt;&quot;Agile Coach&quot;, &quot;email&quot;=&gt;&quot;michaela.broeckx@ordina.be&quot;, &quot;linkedin&quot;=&gt;&quot;michaelabroeckx&quot;, &quot;avatar&quot;=&gt;&quot;michaela-broeckx.jpg&quot;, &quot;bio&quot;=&gt;&quot;Michaëla is an Agile coach with a focus on value and the human aspects of work. She is devoted to Agile &amp; Scrum, not just as a mindset and framework for collaborative product delivery, but also for their general quality as ways to unlearn innate/inbred habits that prevent us from learning efficiently. A true Agile mindset enables enterprises to break down siloes, and build professional human networks throughout the company and beyond.&quot;}</name><email>michaela.broeckx@ordina.be</email></author><category term="Agile" /><category term="Agile" /><category term="AgileWorks" /><category term="Scrum" /><category term="Agile Coaching" /><category term="Liberating Structures" /><summary type="html">Scrum is an Agile framework.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/scrum-is-a-liberating-structure/main-image.png" /></entry><entry><title type="html">Kickstarter Trajectory 2019 Light Edition</title><link href="https://ordina-jworks.github.io/kickstarters/2019/04/02/Kickstarter-Trajectory-2019-Light.html" rel="alternate" type="text/html" title="Kickstarter Trajectory 2019 Light Edition" /><published>2019-04-02T00:00:00+00:00</published><updated>2019-04-02T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kickstarters/2019/04/02/Kickstarter-Trajectory-2019-Light</id><content type="html" xml:base="https://ordina-jworks.github.io/kickstarters/2019/04/02/Kickstarter-Trajectory-2019-Light.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;We started this kickstarter trajectory with four kickstarters.
Jago was freshly graduated from school, where as Giel and Yolan already had working experience in IT.
Seppe had multiple years of working experience in Digital Signage but made a career change and was also new to IT.
The main goals of the kickstarter course was to give every kickstarter a knowledge foundation of the best practices within JWorks and to introduce them to the IT world.&lt;/p&gt;

&lt;h2 id=&quot;first-day&quot;&gt;First day&lt;/h2&gt;
&lt;h4 id=&quot;morning&quot;&gt;Morning&lt;/h4&gt;

&lt;p&gt;On the first day there, we were welcomed by Robbe Struys and Angela Gallo.
They gave us the basic information about the HR working of Ordina.
After receiving the keys to our new car and our laptop they showed us how to work with Ordina Connect.
We made our first CV and filled in our first timesheet entry.
They toured us around the office and introduced us to our future colleagues.
They were very friendly and they all said that we made the right choice.
This was of course very nice to hear and put us at ease.
We had brunch together and then we had a group picture as well as our profile pictures taken.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Group picture&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/group-picture.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;afternoon&quot;&gt;Afternoon&lt;/h4&gt;
&lt;p&gt;With every developer comes his/her personal development environment.
To help us pick the best tools to suite our needs, we had help from &lt;a href=&quot;/author/kevin-van-den-abeele&quot;&gt;Kevin Van den Abeele&lt;/a&gt;.
He showed us the best IDEs for each language and best practices as to what we can do to improve our development experience.&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; width=&quot;35%&quot; alt=&quot;Git spaghetti vs linear&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/git-spaghetti-vs-linear.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A tool all developers use is Version Control.
At Ordina we prefer to use &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Git&lt;/a&gt; (this is preferred almost everywhere, who even uses SVN anymore?).
So we learned to use Git, the best practices to get the best out of it and all this is done in the terminal of course.
If you want to use a GUI for Git, they recommended GitKraken.
Over the whole kickstarter traject, we would use Git to get our code examples and presentations.&lt;/p&gt;

&lt;p&gt;We went over good practices and learned by doing this hands-on on our own machines.
Creating our own repositories, branching, merging, … .&lt;a href=&quot;/author/yannick-de-turck/&quot;&gt;Yannick&lt;/a&gt;,
our teacher for this course, was very clear to avoid spaghetti history by rebasing and squashing your commits to give a clean linear overview that is readable by your co-workers.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Docker logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/docker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the era of containerization is rising, it only feels right to teach us the fundamentals about it and the importance of Docker in a project.
That’s why they asked &lt;a href=&quot;/author/tom-verelst&quot;&gt;Tom Verelst&lt;/a&gt; to give us a detailed presentation about the mystical power of Docker.
After the first introduction, we were soon ‘dockerizing’ our first full-stack application.
We also combined everything together with Docker Compose, which made us start our whole full-stack application with just one command!&lt;/p&gt;

&lt;p&gt;The session gave us an overview as to how Docker is used in the real world, and we couldn’t wait to use an orchestration framework to deploy our containers into the cloud!&lt;/p&gt;

&lt;h2 id=&quot;databases&quot;&gt;Databases&lt;/h2&gt;

&lt;p&gt;On day 3, &lt;a href=&quot;/author/tom-van-den-bulck&quot;&gt;Tom Van den Bulck&lt;/a&gt;, Competence Lead in Big and Fast Data, gave us a course on SQL and NoSQL database systems.
As some of us were not familiar with NoSQL, this was very interesting to see the difference in usage and possibilities between normal SQL systems which we were all used to using before.&lt;/p&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL&lt;/h3&gt;

&lt;p&gt;For SQL database systems we had a look at PostgreSQL, an open-source object-relational database management system that is increasing in popularity across bigger enterprises for reasons such as high scalability, extensive features and as it works cross-platform.&lt;/p&gt;

&lt;h3 id=&quot;nosql&quot;&gt;NoSQL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;redis&quot;&gt;Redis&lt;/h4&gt;
    &lt;p&gt;Redis is an open-source key-value store that runs in-memory.
Used where consistency and durability is less important than speed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;cassandra&quot;&gt;Cassandra&lt;/h4&gt;
    &lt;p&gt;Cassandra is an open-source wide column store.
Distributed across different nodes for high accessibility and low chance of downtime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MongoDB is a document-oriented database system. Data in MongoDB does not need to be consistent and the data structure can change over time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;neo4j&quot;&gt;Neo4j&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neo4j is a graph database management system. No index is required and data with a lot of relations to other data can be accessed faster when dealing with higher amounts.&lt;/p&gt;

&lt;h2 id=&quot;reactive-programming-with-rxjs&quot;&gt;Reactive programming with RxJS&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right medium&quot; alt=&quot;RxJs logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/rxjs.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A course given by &lt;a href=&quot;/author/orjan-de-smet&quot;&gt;Orjan De Smet&lt;/a&gt; covering reactive programming, the advantages it brings and how and where to use it and how to use it in combination with unit testing.
In short, reactive programming offers a solution to handling asynchronous calls with multiple events.
Which means it offers more than one channel of communication so multi-step events can be handled efficiently.
When coding in a traditional way you will often end up with a lot more code, could run into problems when for example a promise clogs a thread or you could end up with a mess of callbacks making your code extremely hard to read.&lt;/p&gt;

&lt;h2 id=&quot;devops-and-continuous-integration&quot;&gt;DevOps and Continuous Integration&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image left medium&quot; alt=&quot;devops logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/devops.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An introduction to DevOps &amp;amp; CI given by &lt;a href=&quot;/author/tim-vierbergen&quot;&gt;Tim Vierbergen&lt;/a&gt; explaining this way of working and how it increases the productivity of a team.
We also covered some best practices considering version control, building, testing and deploying with an example project to get a bit more familiar with the software used to do this.
Software such as Git for version control, Jenkins for building, Jasmine for testing and Docker/Spinnaker for deploying.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;security-principles&quot;&gt;Security Principles&lt;/h2&gt;

&lt;p&gt;In this presentation we went over the basics on how to protect your application and the user data it stores from malicious intent.
We went over some good practices regarding the storage of data and the verification of your users.
For example the hashing of passwords, enabling 2-factor authentication and deciding on the amount of allowed invalid login attempts before issuing a timeout.
All of these things should be decided using a mix of guidelines and common sense.&lt;/p&gt;

&lt;h2 id=&quot;clean-code&quot;&gt;Clean Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/author/pieter-van-hees&quot;&gt;Pieter Van Hees&lt;/a&gt; gave us a course of clean code, this course was not focussed on writing new code but improving the way you write the code.&lt;/p&gt;

&lt;h4 id=&quot;improvements&quot;&gt;Improvements:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Readability&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Avoid rewrites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest enemy of clean code is pressure, so Pieter advised us to take our time to write clean code.
During this course we also did some exercises through public code katas available on the internet.
This course only gave an introduction and he recommended us to read the book Clean Code by Robert Cecil Martin.&lt;/p&gt;

&lt;h2 id=&quot;frontend-build-tools-testing-package-managers-and-more&quot;&gt;Frontend Build tools, testing, package managers and more&lt;/h2&gt;

&lt;p&gt;This course was led by &lt;a href=&quot;/author/michael-vervloet&quot;&gt;Michael Vervloet&lt;/a&gt;, who is a full stack JavaScript/TypeScript developer at Ordina.
He gave us the know-how on the building process, serving your application and doing this in an optimized way.
He also showed us to use generators and build tools to create a whole lot of code and files in the terminal.&lt;/p&gt;

&lt;p&gt;The main topics of this course were Node.js, package managers and ways to build &amp;amp; generate your code (gulp, webpack and Angular CLI).
We went over them one by one and got the chance to test and install them on our machines to get a hands-on experience.
In the end, we created an Angular application from scratch and played around with the generator to make some components and serving them to look at our work.&lt;/p&gt;

&lt;h2 id=&quot;java-language-features&quot;&gt;Java Language Features&lt;/h2&gt;
&lt;p&gt;Java is a pretty popular language in the backend development world, and is our preferred backend language here at JWorks.
That’s why &lt;a href=&quot;/author/yannick-de-turck&quot;&gt;Yannick De Turck&lt;/a&gt; explained us the newest features of Java versions 7, 8, 9, 10 and 11.
Java 8 is currently the most used Java version.
&lt;a href=&quot;/author/yannick-de-turck&quot;&gt;Yannick&lt;/a&gt; prepared some exercises for us so we could focus on the newest Java 8 features (lambdas, streams, optionals, …).&lt;/p&gt;

&lt;p&gt;One of the most useful features that Java 10 introduced is the ‘var’ keyword.
How great is it that you don’t have to specify the type twice during the initialization of an object!?&lt;/p&gt;

&lt;p&gt;Java 11 is the newest LTS version, so it was important for us to get a detailed explanation about its newest changes and features.&lt;/p&gt;

&lt;p&gt;Other than that, there were a lot of extra useful features that will certainly be nice to have once we can use them.
It was very entertaining to get a quick overview as to what is new, what is being removed or deprecated and what we can or should expect in the coming Java versions.&lt;/p&gt;

&lt;h2 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image left&quot; alt=&quot;Spring logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/spring-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a framework this big and popular, we followed a three-day course given by &lt;a href=&quot;/author/ken-coenen&quot;&gt;Ken Coenen&lt;/a&gt;.
On the first day, we received a brief explanation as to how the Spring magic works behind the scenes (dependency injection, beans, …).
We saw the basics of the most common components of the full Spring Framework such as Cloud, Security, … .&lt;/p&gt;

&lt;p&gt;On the second day, we dived into the magic behind Spring Boot.
It’s remarkable how much Spring Boot does for you without any configuration needed, although you can fully configure Spring Boot to your needs and satisfactions.&lt;/p&gt;

&lt;p&gt;On the third day, &lt;a href=&quot;/author/ken-coenen&quot;&gt;Ken&lt;/a&gt; did a live coding session and created a Spring Boot application from scratch and explained how to fully initialize your Spring Boot project and get the most out of it through various steps and always showing the best practices for each implementation.&lt;/p&gt;

&lt;h4 id=&quot;full-house-during-the-third-day&quot;&gt;Full House during the third day&lt;/h4&gt;
&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Full house&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/spring-session.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, afterwards we had some time to relax after three days of exploring the Spring Framework.
We closed our three-day session on Friday with the best combination: pizza and beer!&lt;/p&gt;

&lt;h4 id=&quot;pizza--beer&quot;&gt;Pizza &amp;amp; beer!&lt;/h4&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Pizza Time&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/pizza-time.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;unit-testing-and-mocking-in-java&quot;&gt;Unit Testing and mocking in Java&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Junit + Java Image&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/unit-testing.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got an introduction to Unit Testing in Java from &lt;a href=&quot;/author/maarten-casteels&quot;&gt;Maarten Casteels&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-red-line&quot;&gt;The red line:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Goals of Testing&lt;/li&gt;
  &lt;li&gt;What to test&lt;/li&gt;
  &lt;li&gt;Fixtures&lt;/li&gt;
  &lt;li&gt;Mocks&lt;/li&gt;
  &lt;li&gt;Assertions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the morning we got a very interactive theory session where we learned how important testing really is, the basics and what it all stands for.
In the afternoon we learned to unit test our code, the best way to do this, how to mock dependencies, use fixtures and a whole lot more.
Maarten also showed us the most common pitfalls to avoid, and some best practices like test-driven development (TDD) and how writing tests can help you with refactoring your code and lastly look at it with a different vision.&lt;/p&gt;

&lt;p&gt;For lunch we went to a place called Meals On Wheels were we were introduced to a whole other world of sandwiches.
Once you’ve been there you will know what we mean by that, don’t go too often though.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image left medium&quot; alt=&quot;Kubernetes Logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/kubernetes-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kubernetes&lt;/a&gt; is an open source container orchestration framework which was first introduced to us by &lt;a href=&quot;/author/tom-verelst&quot;&gt;Tom Verelst&lt;/a&gt; during the kickstarter traject.
It is made by Google and is now maintained by the Cloud Native Computing Foundation.
First they introduced us to all the features that Kubernetes possesses (service discovery, horizontal scaling, load balancing, …).&lt;/p&gt;

&lt;p&gt;Soon we learned how to deploy Docker containers in the cloud by using Kubernetes, and afterwards we had an hands-on exercise where we could deploy a full-stack application to a Kubernetes cluster using &lt;a href=&quot;https://github.com/kubernetes/minikube&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Minikube&lt;/a&gt;.
It’s wonderful how you can deploy a full-stack application through Kubernetes with just one configuration file needed.
Of course, it takes some time to get used to it, but once you get the hang of it, you can do outstanding stuff with this platform!&lt;/p&gt;

&lt;h2 id=&quot;cloud-providers--platforms&quot;&gt;Cloud Providers &amp;amp; Platforms&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;image left medium&quot; alt=&quot;AWS Logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/aws-logo.png&quot; /&gt;
To get a bigger picture of all the cloud providers and platforms that are out there conquering the IT world, 
we had a dedicated session about this topic given by &lt;a href=&quot;/author/bas-moorkens&quot;&gt;Bas Moorkens&lt;/a&gt; and &lt;a href=&quot;/author/dieter-hubau&quot;&gt;Dieter Hubau&lt;/a&gt;.
Bas was focusing on Amazon Web Services and all its features that it has to offer.&lt;/p&gt;

&lt;p&gt;We quickly learned that AWS was very advanced and had lots of components to facilitate the life of a developer.
It was a very interesting session and made me realise that AWS was a big part of the development scene.
We are eager to use it and learn more of what is has to offer.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right medium&quot; alt=&quot;OpenShift Logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/openshift-logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As for cloud platforms, we got a very detailed explanation of how OpenShift (made by RedHat) works and what its features and options are.
We also got a high-level explanation as to how an application in the cloud works and what the best practices are to achieve deploying your application in the cloud.&lt;/p&gt;

&lt;p&gt;Overall, it was a very interesting session for cloud-enthusiasts and we definitely want to learn more about it!&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;After the session HTLML5, CSS3, JavaScript, &lt;a href=&quot;/author/dimitri-de-kerf&quot;&gt;Dimitri De Kerf&lt;/a&gt; learned us the benefits of TypeScript. 
He told us some benefits of using TypeScript instead of JavaScript.
TypeScript is a wrapper around JavaScript, 
which means it has more methods to make your daily programming more pleasant.&lt;/p&gt;

&lt;p&gt;It also adds optional static typing for richer IDE autocomplete support.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/author/dimitri-de-kerf&quot;&gt;Dimitri De Kerf&lt;/a&gt; showed us how to configure our project to use TypeScript and to use these features.
He explained us that it is important to know how to use TypeScript because it is used in popular frameworks like Angular and React.&lt;/p&gt;

&lt;h2 id=&quot;angular&quot;&gt;Angular&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; width=&quot;300&quot; alt=&quot;Angular logo&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/angular.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/author/ryan-de-gruyter&quot;&gt;Ryan De Gruyter&lt;/a&gt; was our teacher for today.
He quickly introduced us to Angular, a platform that is designed to easily create browser applications built by Google. 
The first version of Angular was AngularJS.
It was very popular and used by many companies.
Google decided to update Angular and created Angular 2 which was not welcomed by the industry at that time because it removed all the AngularJS concepts.&lt;/p&gt;

&lt;p&gt;It took some time for the industry to adapt and see the positive stuff of Angular 2: Open Source community, improved dependency injection, better performance, etc..
Angular 2 is not the holy grail of frameworks. It still has some downsides like lots of ceremony and boilerplate thanks to the use of Angular CLI.&lt;/p&gt;

&lt;p&gt;After the information session, he showed us how easy it was to create an Angular project where we learned how to create an Angular application using small reusable pieces called components.&lt;/p&gt;

&lt;h2 id=&quot;frontend-hands-on&quot;&gt;Frontend hands-on&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/author/jan-de-wilde&quot;&gt;Jan De Wilde&lt;/a&gt; asked if we still had question about the Angular session. 
Because in this session we would create an Angular application using all the techniques we learned from the previous course and he wanted to be sure we understood everything before we started.
So he went a bit deeper on some topics and showed us on how to execute calls to an API and to structure the project properly.&lt;/p&gt;

&lt;p&gt;After the lunch break, when we were still digesting our food, we started to write a complete Angular application. 
&lt;a href=&quot;/author/jan-de-wilde&quot;&gt;Jan De Wilde&lt;/a&gt; guided us through the process, showing us possible issues we could encounter and explained how we could solve those issues.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-cloud-friendly-development&quot;&gt;Intro to Cloud-Friendly Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/author/kevin-van-houtte&quot;&gt;Kevin Van Houtte&lt;/a&gt; introduced us to contract testing.
It is a tool to write an exact input and output of an API call.
After we run our project, our contract will generate tests for our controller, checking if the controller output is the same as we expected in the contract.
The files, generated by the contract, can be imported into Javadoc for documentation.&lt;/p&gt;

&lt;p&gt;Afterwards we had some exercises where we could use all the skills we had learned in these courses.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API driven programming with contract tests.&lt;/li&gt;
  &lt;li&gt;Loading the API docs into our Java docs&lt;/li&gt;
  &lt;li&gt;Attaching a database to our Spring Boot application&lt;/li&gt;
  &lt;li&gt;Creating migration scripts and using these to populate the database with FlyWay&lt;/li&gt;
  &lt;li&gt;Creating a config server and connecting our Spring Boot application to it&lt;/li&gt;
  &lt;li&gt;Enabling actuator and using it to generate metrics data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these exercises help us prepare for a real project in the future.&lt;/p&gt;

&lt;h2 id=&quot;agile-development&quot;&gt;Agile Development&lt;/h2&gt;
&lt;p&gt;Together with &lt;a href=&quot;/author/michaela-broeckx&quot;&gt;Michaëla Broeckx&lt;/a&gt;, Practice Manager Agile, we saw different approaches to work as a non-agile team.
Like the waterfall system that has some downsides such as getting late feedback from the business or end user.
The feedback is only in the end of the life cycle of the project or when the project got tested.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image right&quot; alt=&quot;Agile Methodology&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/agile-methodology.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Applying an Agile approach offers a lot of benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Quicker risk reduction&lt;/li&gt;
  &lt;li&gt;limit handovers&lt;/li&gt;
  &lt;li&gt;shorter term plans
    &lt;ul&gt;
      &lt;li&gt;to improve predictability, accuracy &amp;amp; reliability.&lt;/li&gt;
      &lt;li&gt;to redone stress and unleash innovative emergent ideas&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;and so on!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;She proved her theory by doing a live exercise which involved folding paper airplanes as a team.
At the end we would analyze the outcome.&lt;/p&gt;

&lt;p&gt;After this we learned some other Agile practices: we got introduced into the SCRUM framework and the practice of Extreme Programming, plus its benefits.&lt;/p&gt;

&lt;h2 id=&quot;the-new-jworks-colleagues&quot;&gt;The new JWorks colleagues&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;p-image&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Seppe Berghmans&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/seppe-berghmans.jpg&quot; /&gt;
&lt;img class=&quot;p-image&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Jago Staes&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/jago-staes.jpg&quot; /&gt; &lt;br /&gt;
&lt;img class=&quot;p-image&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Yolan Vloeberghs &quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/yolan-vloeberghs.jpg&quot; /&gt; 
&lt;img class=&quot;p-image&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Giel Reynders&quot; src=&quot;/img/2019-Kickstarter-Trajectory-2019-light/giel-reynders.jpg&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yolan&quot;, &quot;last_name&quot;=&gt;&quot;Vloeberghs&quot;, &quot;linkedin&quot;=&gt;&quot;yolan-vloeberghs-23825aa3&quot;, &quot;github&quot;=&gt;&quot;yolanv&quot;, &quot;permalink&quot;=&gt;&quot;/author/yolan-vloeberghs/&quot;, &quot;avatar&quot;=&gt;&quot;yolan-vloeberghs.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;yolan.vloeberghs@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yolan Vloeberghs is a Java Consultant with a strong interest for Spring Boot projects. He likes to experiment with new technologies and frameworks and has a strong interest to learn frontend and mobile development as well.&quot;}</name><email>yolan.vloeberghs@ordina.be</email></author><category term="Kickstarters" /><category term="Spring" /><category term="Spring Boot" /><category term="Angular" /><category term="Unit Test" /><category term="Mocking" /><category term="Microservices" /><category term="Git" /><category term="DevOps" /><category term="Docker" /><category term="Kubernetes" /><category term="OpenShift" /><category term="Typescript" /><category term="Kickstarter" /><category term="Security" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">The Vuzix Blade</title><link href="https://ordina-jworks.github.io/iot,%20smart%20tech,%20smart%20glasses,%20augmented%20reality/2019/04/01/vuzix-blade.html" rel="alternate" type="text/html" title="The Vuzix Blade" /><published>2019-04-01T00:00:00+00:00</published><updated>2019-04-01T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot,%20smart%20tech,%20smart%20glasses,%20augmented%20reality/2019/04/01/vuzix-blade</id><content type="html" xml:base="https://ordina-jworks.github.io/iot,%20smart%20tech,%20smart%20glasses,%20augmented%20reality/2019/04/01/vuzix-blade.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/bootstrap.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap-grid-only@1.0.0/index.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-hardware&quot;&gt;The hardware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-software&quot;&gt;The software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-vuzix&quot;&gt;Using the Vuzix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#developing-for-the-vuzix&quot;&gt;Developing for the Vuzix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#looking-forward&quot;&gt;Looking forward&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As we are strong believers about the impact that Augmented Reality will have in a business setting, we were eager to get started building things. 
But this required getting our hands on some actual hardware!
We acquired some budget and went looking for ‘affordable’ smart glasses to experiment with.&lt;/p&gt;

&lt;p&gt;We were following the Vuzix for quite some time as they seemed market leader in wearable head-mounted technology. The type of devices they were producing didn’t have the coolness factor we were hoping for.&lt;/p&gt;

&lt;p&gt;And along came the Vuzix Blade… This looked like a real game changer. Something someone would actually wear on their face!&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/V-OxzjsB2s0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It was a video like this one that had won us over to give the Vuzix Blade a try since the displayed features look very nice, if they all worked as promised…&lt;/p&gt;

&lt;p&gt;After a long wait we finally got our hands on a pre-production hand-built Vuzix Blade and joined the Edge Developer Program.
We got these glasses to analyze the wearers experience and see how we could integrate it into the numerous business cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assistance for field technicians&lt;/li&gt;
  &lt;li&gt;Order picking&lt;/li&gt;
  &lt;li&gt;Communications platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blogpost we’ll go a bit into detail what makes the Vuzix Blade tick and how our experience with it has been so far.
Read on ahead for all the juicy details!&lt;/p&gt;

&lt;h2 id=&quot;the-hardware&quot;&gt;The hardware&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Vuzix Blade hardware overview&quot; src=&quot;/img/2019-03-31-vuzix/vuzix-hardware-overview.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Vuzix Blade is essentially an Android smartphone you can wear on your face.
Well actually, it’s really more like an Android smartwatch you can strap to your face, but you get the idea.&lt;/p&gt;

&lt;p&gt;The device we received was a pre-production build, which was assembled by hand.
This means we can’t really say much about what the final hardware will look like, if there will be any changes or if the build quality, which was very solid, will change.
During our testing it has been through some light and heavy action: like daily commute use, office use, running, biking, etc, and still hasn’t shown any faults or cracks.&lt;/p&gt;

&lt;p&gt;We’ve always found the idea of computing devices in the form factor of glasses quite intriguing as some of us have been cursed with nearsightedness and already have to wear prescription glasses.&lt;/p&gt;

&lt;p&gt;If we have to wear the bloody things every day, might as well put some intelligence into them.&lt;/p&gt;

&lt;p&gt;Below you can find some specs about the device, but for us these are quite irrelevant for the moment.
This device is all about showcasing innovation in two areas: form factor and display technology.&lt;/p&gt;

&lt;p&gt;And boy are we impressed.
The glasses actually feel comfortable enough to wear for longer periods and the display technology is quite amazing! 
It’s nowhere near the HoloLens, but they serve a completely different purpose.&lt;/p&gt;

&lt;p&gt;Let’s get down the mandatory spec overview!
The internals inside the glasses are alright, maybe a bit underwhelming.
Knowing it’s always a fine line to balance between power consumption and battery life, the internals inside the glasses are alright, maybe a bit underwhelming.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Projected display resolution of 480 by 853 pixels&lt;/li&gt;
  &lt;li&gt;Quad core ARM A53 CPU&lt;/li&gt;
  &lt;li&gt;WiFi, Bluetooth&lt;/li&gt;
  &lt;li&gt;8MP camera up to 1080p video recording&lt;/li&gt;
  &lt;li&gt;470mAh battery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The amount of RAM is not specified but seems to be just the right amount to get the job done.&lt;/p&gt;

&lt;p&gt;Overall the device works fine for normal apps but the speed and fluidity could be better for some high-end apps (1080p video capture, TensorFlow Lite, …)&lt;/p&gt;

&lt;p&gt;There is no audio on the device as no regular or bone conducting speaker is present.
Audio can be provided through either Bluetooth or USB audio, but an included speaker would have been nicer.
Initially the video recording only supported up to 720p at a lower frame rate, which with the lack of OIS was not very usable in high motion scenarios.
However, the latest software update added support for 1080p recording and as you can see in one of the videos down below is actually acceptable.&lt;/p&gt;

&lt;p&gt;All of this is actually quite irrelevant to us.
There is no innovation in fitting a better camera or having oodles of computing power on the device.
The technological marvel in this device is the display technology, named the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cobra Display Engine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Vuzix Blade hardware overview&quot; src=&quot;/img/2019-03-31-vuzix/ui1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s difficult to explain how well this works.
So we’ll just rip off the movie “Contact” and say:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;No words to describe, they should have sent a poet.
So beautiful! I had no idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best description we could think of so far is:
It’s like someone is following you from behind with a projector and is projecting the user interface on an invisible screen in front of you.
Hold a smartwatch right in front of you in a readable position.
It’s kinda like that, but transparent and without losing the functionality of one of your arms.&lt;/p&gt;

&lt;p&gt;So instead of describing it to people, we just put it on their head and they were just immediately captivated by what they’re experiencing.
It takes a moment to learn how to switch your eyes’ focus on the heads up display and back to your surroundings.
Once you master this it becomes very natural to interact with the display, however staring at it for prolonged periods is not what’s it’s meant for.
A lot of people have difficulty in wrapping their heads around the idea of that transparent interface when trying out the glasses for the first time.
After this we show them some pretty pictures with a variety of colors.
This really shows off the unexpectedly good visual qualities of the display and brings everything to life!&lt;/p&gt;

&lt;p&gt;For a concept device it really shows what the technology is capable of.
We do hope that the final hardware specs will be a bit more beefy. 
Imagine running TensorFlow lite object detection in full force on the device. So many cool things we could do with computer vision!&lt;/p&gt;

&lt;p&gt;Adding a sim card slot and a GPS chip would also be awesome, since this would allow us to autonomously use the glasses without a companion smartphone. 
This would allow us completely sever the link to the companion smart phone.&lt;/p&gt;

&lt;h2 id=&quot;the-software&quot;&gt;The software&lt;/h2&gt;

&lt;p&gt;The Vuzix Blade runs on Android 5.1.&lt;/p&gt;

&lt;p&gt;Due to the limited screen real estate of the device, the look and feel of the apps reminds us a lot of smartwatch apps.&lt;/p&gt;

&lt;p&gt;There aren’t many out-of-the-box apps on the device installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Welcome dashboard&lt;/li&gt;
  &lt;li&gt;Camera&lt;/li&gt;
  &lt;li&gt;Gallery&lt;/li&gt;
  &lt;li&gt;Music control&lt;/li&gt;
  &lt;li&gt;Settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the most important features of wearables is notification mirroring, which works out-of-the-box.&lt;/p&gt;

&lt;p&gt;With the Vuzix Blade also comes a &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.vuzix.companion&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;companion app&lt;/a&gt; for your Android or iOS Smartphone.&lt;/p&gt;

&lt;p&gt;This companion app allows you to configure settings, fetch images and videos from the device, manage installed apps and explore the Blade app store.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Vuzix Blade hardware overview&quot; src=&quot;/img/2019-03-31-vuzix/vuzix-app.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As this device doesn’t run the Google Play Store, a specific app store is needed.
&lt;a href=&quot;https://www.vuzix.com/appstore?deviceFilter=blade&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;This app store&lt;/a&gt; allows Vuzix specific apps to be installed on the device.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-03-31-vuzix/ui3.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;QR Scanner UI&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/ui3.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2019-03-31-vuzix/ui2.jpg&quot; data-lightbox=&quot;ui&quot; data-title=&quot;Our custom Polar Watch heart beat app&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/ui2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-03-31-vuzix/ui-anim1.gif&quot; data-lightbox=&quot;ui-anim&quot; data-title=&quot;Home menu with animation&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/ui-anim1.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
     &lt;a href=&quot;/img/2019-03-31-vuzix/ui-anim2.gif&quot; data-lightbox=&quot;ui-anim&quot; data-title=&quot;AR application&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/ui-anim2.gif&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 49%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-the-vuzix&quot;&gt;Using the Vuzix&lt;/h2&gt;

&lt;p&gt;The thing we like about the Blade is how comfortable it is to wear compared to other head-mounted wearable solutions like the HoloLens.
The HoloLens is quite heavy and in our opinion not meant to be worn all day long. 
The Blade however is light enough to stay comfortable for long time wearing.&lt;/p&gt;

&lt;p&gt;Although Vuzix targets the Blade partially at the consumer market, we believe that there is much more potential in the enterprise market.
Let’s hope they don’t make the same mistake Google made with Google Glass!&lt;/p&gt;

&lt;p&gt;But because they also target the consumer market, they thought about very important things like ergonomics and making it look appealing enough for non techies.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/2019-03-31-vuzix/wear1.jpg&quot; data-lightbox=&quot;wearing&quot; data-title=&quot;Wearing the Vuzix Blade 1&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/wear1.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 55%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-03-31-vuzix/wear2.jpg&quot; data-lightbox=&quot;wearing&quot; data-title=&quot;Wearing the Vuzix Blade 2&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/wear2.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 24%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/2019-03-31-vuzix/wear3.jpg&quot; data-lightbox=&quot;wearing&quot; data-title=&quot;Wearing the Vuzix Blade 3&quot;&gt;
        &lt;img alt=&quot;stack&quot; src=&quot;/img/2019-03-31-vuzix/wear3.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; width: 17.5%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Our colleague, Frederick tested the device for a longer period of time:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;Sometimes I wear this device for a full day to get deeply immersed in the experience.
As it is comfortable to wear, this wasn’t much of an issue.&lt;/p&gt;

  &lt;p&gt;My first experiment was to check how many would look funny at me during my morning commute.
The good news is that during my train ride and walk around the office, not many people were or kept staring at me.
However, the people that knew me asked what I had on my face.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/lAiAl370BA8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The interaction models are quite straightforward.
It’s a good platform to consume push content.
Your screen lights up, you get your info, the screen dims.&lt;/p&gt;

&lt;p&gt;If you want to actually interact with the app, you can use the touchpad located near your right temple.
Using gestures like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swipes
    &lt;ul&gt;
      &lt;li&gt;Up&lt;/li&gt;
      &lt;li&gt;Down&lt;/li&gt;
      &lt;li&gt;Left&lt;/li&gt;
      &lt;li&gt;Right&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Two finger swipes&lt;/li&gt;
  &lt;li&gt;Tap&lt;/li&gt;
  &lt;li&gt;Double tap&lt;/li&gt;
  &lt;li&gt;Long tap&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, very similar to smartwatches.&lt;/p&gt;

&lt;p&gt;Support for Amazon Alexa is currently in a Beta program for which we’ve signed up.
Really wondering how natural this voice interaction will be!&lt;/p&gt;

&lt;p&gt;As we said before, some of us wear glasses and the Blade display is readable when you have only minor nearsightedness, but the display is much sharper when you put the Blade on top of your regular glasses.
For an additional markup it is possible to get prescription lenses with the Blade so people who wear glasses on daily basis can also use this device.&lt;/p&gt;

&lt;p&gt;Battery life is very much inline with smart watches: it all depends on the usage.
We can easily keep an app running with the screen on for almost two hours.&lt;/p&gt;

&lt;p&gt;If you are only consuming (push) notifications it’s possible to stretch this to a full day.
For longer and more intensive usage an external battery pack is a must.
Luckily it’s quite non-intrusive to equip a battery pack by using the USB port located on the side.
Once you do this, battery life is not an issue anymore.
We did some testing and actually went running and cycling while wearing an external battery pack and did not experience any hinder at all.&lt;/p&gt;

&lt;h2 id=&quot;developing-for-the-vuzix&quot;&gt;Developing for the Vuzix&lt;/h2&gt;

&lt;p&gt;Developing for the Blade is just like developing for any Android device.
You just develop in Android Studio, like you would normally do.
This means Vuzix can leverage the huge amount of Android devs out there.
Our Android devs found the learning curve to be relatively low.&lt;/p&gt;

&lt;p&gt;You do need to take into account that the Blade comes with its own design guidelines and UI components.
The interaction model and how apps are structured is quite elegant and straightforward, no surprises here!
Just import two Blade specific libraries with the components and you’re good to go.
No other dependencies are needed!&lt;/p&gt;

&lt;p&gt;There is no Blade emulator available, but Vuzix has added support for the Android Studio design view.
Although the layout of most screens will be very basic, it was still very handy to quickly prototype UIs.&lt;/p&gt;

&lt;p&gt;We brainstormed a bit about what would be a good app to leverage the innovative aspects of the Blade.
As Frederick was recently training to regain his once athletic body, he bought a Polar H10 heart rate sensor which can connect to a smartphone using Bluetooth Low Energy (BLE).&lt;/p&gt;

&lt;p&gt;A lot of runners already have smartwatches to monitor their heart rate. 
Some of these watches even vibrate when you’re not running in the correct heart rate zone.
More info on heart rate zones can be found &lt;a href=&quot;https://support.polar.com/en/support/tips/Polar_Sport_Zones&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A lot of runners already have smartwatches to monitor their heart rate. Some of these watches even vibrate when you’re not running in the correct &lt;a href=&quot;https://support.polar.com/en/support/tips/Polar_Sport_Zones&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;heart rate zone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although runners already have access to this information on their smart watch, it’s not the best form factor to consume the data. Ever tried reading your watch while running and bouncing around at 10+ km/h? 
Having to shift your focus like this just completely gets you out of “the zone”.&lt;/p&gt;

&lt;p&gt;We thought this was a good showcase of the capabilities of the Blade: easily consume the information you need, enabling you to make the best decisions, while being as non-intrusive as possible.&lt;/p&gt;

&lt;p&gt;Because Polar implements the official Heart Rate device specification it was very straightforward to set up a BLE connection between the sensor and the Blade.
Every second or so the BLE device pushes an update of the current heart rate to the BLE client.&lt;/p&gt;

&lt;p&gt;After tapping into this stream of sensor data, it wasn’t too difficult to build the app.
Currently we only display the current time, heart rate and heart rate zone.&lt;/p&gt;

&lt;p&gt;The video below showcases the app.
The user interface is still very minimalistic and the app itself is still a work in progress.
However, it’s already very functional.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe width=&quot;1164&quot; height=&quot;655&quot; src=&quot;https://www.youtube.com/embed/FzUgWBVQCS8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The video doesn’t do the app justice as you don’t get to experience the transparent display, allowing you to see the world around you.
Seeing those numbers and letters float in open air is always a joy to see.&lt;/p&gt;

&lt;p&gt;While experimenting with new technologies, we prefer to use the Minimal Viable Product (MVP) approach: focus on what brings most value and then validate this as soon as possible.
This also means field testing the concept in the most representative and harsh environment you can think off.&lt;/p&gt;

&lt;p&gt;So, Frederick ventured forth to a place where not many developer dare venture: outdoor in the sun.&lt;/p&gt;

&lt;p&gt;Everyone who has ever worked with a laptop, smartphone or tablet outside can agree that the readability of these screen drops to zero as on bright and sunny days.
The Blade solves this by having a very bright display. Apps also use the following two tricks to optimize readability:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use high contrast colors, like green.&lt;/li&gt;
  &lt;li&gt;Dynamically make the transparent part of display white to increase the contrast even more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frederick took the Blade on a 10km run to validate if the app was usable, readable and useful… And it sure was!
Seeing your live heart rate gives you a lot of insight into your performance. 
It also turns everything into a game: Can I do better? How long can I keep going at this pace?
The glasses were comfortable enough to wear for the full run. And most importantly: the batteries didn’t run out!&lt;/p&gt;

&lt;p&gt;All in all, it was such a positive experience that Frederick found it difficult to go running without these glasses.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Vuzix Blade Heart rate testing&quot; src=&quot;/img/2019-03-30-vuzix/run.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have sent a demo to the people of Vuzix and they were also very enthusiastic about the concept.
We will now polish the app a bit more to make it consumer friendly and then publish it to the Vuzix app store.&lt;/p&gt;

&lt;p&gt;In a future version of the app, we would like to add things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Average heart rate&lt;/li&gt;
  &lt;li&gt;Max heart rate&lt;/li&gt;
  &lt;li&gt;Calories burned&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the latest software upgrade we can also tap into the GPS data from the smartphone via the companion app.
This will allow us to also display things like: current speed, max speed, average speed, distance travelled, etc.&lt;/p&gt;

&lt;p&gt;It will be an interesting challenge getting all this data on the rather small display.
This is something we will probably outsource to our UX / UI wizkids over at &lt;a href=&quot;https://clockwork.ordina.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ClockWork&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt;

&lt;p&gt;What we got with the Vuzix Blade looks already very promising even though there are a few small rough edges.
Vuzix keeps rolling out significant software updates for the device that open up new possibilities.&lt;/p&gt;

&lt;p&gt;It is not unthinkable that devices like this will become common consumer electronics if you see what &lt;a href=&quot;https://www.bynorth.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Focals by North&lt;/a&gt; are.
But certain hurdles still have to be taken such as making them look even more appealing to everyday users.
&lt;a href=&quot;https://www.bynorth.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Focals by North&lt;/a&gt; is already taking a nice step in this direction. They however do this by sacrificing certain features (no camera, integrated touchpad, SD-card slot, …) which we think are important for enterprise user.
As such, we still see the Vuzix Blade as best in breed.&lt;/p&gt;

&lt;p&gt;The better battery technology that is just around the corner could also prove to be a total game changer for wearable devices. 
Imagine your glasses as an all day long companion, augmenting all your senses and feeding you with on the spot contextual information.&lt;/p&gt;

&lt;p&gt;We do not believe this device will ever be direct competition to the Microsoft HoloLens as they serve 2 different purposes at a completely different price point.
Would €500 be a good enough price point to appeal to the general public? 
Would this cost be low enough to have companies build positive business cases to equip their technicians with Augmented Reality / Assisted Reality devices?&lt;/p&gt;

&lt;p&gt;Let’s hope so!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vuzix.com/products/blade-smart-glasses&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vuzix Blade Smart Glasses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vuzix.com/products/Videos&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vuzix product videos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vuzix.com/appstore?deviceFilter=blade&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vuzix app store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/hololens/buy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft HoloLens 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Frederick&quot;, &quot;last_name&quot;=&gt;&quot;Bousson&quot;, &quot;github&quot;=&gt;&quot;fbousson&quot;, &quot;twitter&quot;=&gt;&quot;fbousson&quot;, &quot;linkedin&quot;=&gt;&quot;fbousson&quot;, &quot;permalink&quot;=&gt;&quot;/author/frederick-bousson/&quot;, &quot;avatar&quot;=&gt;&quot;frederick-bousson.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Leader Smart Technologies&quot;, &quot;email&quot;=&gt;&quot;frederick.bousson@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Frederick is a Principal Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his roll as Practice Leader Smart technologies he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>frederick.bousson@ordina.be</email></author><category term="IoT, Smart tech, Smart glasses, Augmented reality" /><category term="internet of things" /><category term="iot" /><category term="AR" /><category term="VR" /><category term="MR" /><category term="Augmented reality" /><category term="smart tech" /><category term="smart glasses" /><category term="glasses" /><category term="android" /><category term="vuzix" /><category term="blade" /><category term="vuzix blade" /><category term="CES" /><category term="Consumer Technology Association" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-03-31-vuzix/banner.jpg" /></entry><entry><title type="html">Building with Google Cloud Build</title><link href="https://ordina-jworks.github.io/cloud/2019/03/28/Building-With-Google-Cloud-Build.html" rel="alternate" type="text/html" title="Building with Google Cloud Build" /><published>2019-03-28T00:00:00+00:00</published><updated>2019-03-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/03/28/Building-With-Google-Cloud-Build</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/03/28/Building-With-Google-Cloud-Build.html">&lt;p&gt;In this post, 
we will have a quick overview on what is possible with Google Cloud Build.&lt;/p&gt;

&lt;p&gt;Google Cloud Build is a fully managed solution for building containers or other artifacts.
It can integrate with Google Storage, Cloud Source Repositories, GitHub and BitBucket.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-yaml-file&quot;&gt;A simple YAML file&lt;/h2&gt;

&lt;p&gt;We can easily set up a build pipeline using a YAML file which we store in our source code repository.
Each build step is defined using a container image and passing arguments to it.
Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps:
  # Test Helm templates
  - name: 'quay.io/helmpack/chart-testing:v2.2.0'
    id: 'Helm Lint'
    args: ['ct', 'lint', '--all', '--chart-dirs', '/workspace/helm', '--validate-maintainers=false']

  # Build image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Building image'
    args: ['build', '-t', 'eu.gcr.io/$PROJECT_ID/cloud-build-demo:$COMMIT_SHA', '.']

  # Create custom image tag and write to file /workspace/_TAG
  - name: 'ubuntu'
    id: 'Setup'
    args: ['bash', '-c', &quot;echo `echo $BRANCH_NAME | sed 's,/,-,g' | awk '{print tolower($0)}'`_$(date -u +%Y%m%dT%H%M)_$SHORT_SHA &amp;gt; _TAG; echo $(cat _TAG)&quot;]

  # Tag image with custom tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Tagging image'
    entrypoint: '/bin/bash'
    args: ['-c', &quot;docker tag eu.gcr.io/$PROJECT_ID/cloud-build-demo:$COMMIT_SHA eu.gcr.io/$PROJECT_ID/ms-map-report:$(cat _TAG)&quot;]
images: ['eu.gcr.io/$PROJECT_ID/cloud-build-demo']
timeout: 15m
options:
  machineType: 'N1_HIGHCPU_8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are free to use any image that we like.
Cloud Build already &lt;a href=&quot;https://cloud.google.com/cloud-build/docs/cloud-builders&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;provides a set of base images (called Cloud Builders)&lt;/a&gt;,
including images for Maven, Git, Docker, Bazel, npm, gcloud, kubectl, etc.&lt;/p&gt;

&lt;p&gt;We can also customise some build options like the timeout of the build,
or on which kind of node the build runs.
Pricing is done based on the amount of build minutes. 
However, 
if we use the default node, 
the first 120 build minutes are free every day!&lt;/p&gt;

&lt;p&gt;If the build finishes successfully,
Cloud Build will automatically upload the built images to the container registry.
This is based on the images defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Data usually needs be shared between steps.
We might want to download dependencies in one step,
and build your artifact in another step,
or run tests in a separate step.
Google has provided a simple solution for this.
Each build step has access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/workspace&lt;/code&gt; folder, 
which is mounted on the container of each step.
Each build has access to its own workspace folder,
which is deleted automatically after the build finishes.&lt;/p&gt;

&lt;p&gt;In the above example, 
a custom Docker tag is created and saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/workspace/_TAG&lt;/code&gt; file,
and then read from again in the next step.&lt;/p&gt;

&lt;p&gt;To start the build, 
we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud builds submit&lt;/code&gt; command,
or create an automatic trigger on the Google Cloud console that triggers the build on new commits in the Git repository.
After adding a trigger, 
we can also trigger the build manually in the Google Cloud console.&lt;/p&gt;

&lt;h2 id=&quot;build-parameters-substitutions&quot;&gt;Build parameters (substitutions)&lt;/h2&gt;

&lt;p&gt;It is possible to pass in parameters (called substitutions) to our build.&lt;/p&gt;

&lt;p&gt;We can override substitutions when submitting a build:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ gcloud builds submit --config=cloudbuild.yaml \
     --substitutions=TAG_NAME=&quot;test&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cloud Build provides the following default substitutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$PROJECT_ID&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.ProjectId&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$BUILD_ID&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.BuildId&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$COMMIT_SHA&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.SourceProvenance.ResolvedRepoSource.Revision.CommitSha&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$SHORT_SHA&lt;/code&gt; : The first seven characters of &lt;code class=&quot;highlighter-rouge&quot;&gt;COMMIT_SHA&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$REPO_NAME&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.Source.RepoSource.RepoName&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$BRANCH_NAME&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.Source.RepoSource.Revision.BranchName&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$TAG_NAME&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.Source.RepoSource.Revision.TagName&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$REVISION_ID&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;build.SourceProvenance.ResolvedRepoSource.Revision.CommitSha&lt;/code&gt; (only available for triggered builds)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;substitions&lt;/code&gt; to define our own custom parameters.
Note that the name of the substitution must start with an underscore (&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;),
and can only use uppercase alphanumeric characters. Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;substitutions:
    _CUSTOM_PARAM_1: foo # default value
    _CUSTOM_PARAM_2: bar # default value
images: [
    'gcr.io/$PROJECT_ID/myapp-${_CUSTOM_PARAM_1}',
    'gcr.io/$PROJECT_ID/myapp-${_CUSTOM_PARAM_2}'
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;securing-your-build&quot;&gt;Securing your build&lt;/h2&gt;

&lt;p&gt;If we require to use credentials in our builds,
it is possible to do this securely using Google Cloud Key Management Service (KMS).
We will not go into &lt;a href=&quot;https://cloud.google.com/kms/docs/quickstart&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;how to use and to setup KMS&lt;/a&gt;,
but once we have set it up,
we can start encrypting our build secrets.&lt;/p&gt;

&lt;p&gt;First, we will need to give Cloud Build access to KMS by adding the &lt;strong&gt;Cloud KMS CryptoKey Decrypter&lt;/strong&gt; role
to our &lt;code class=&quot;highlighter-rouge&quot;&gt;...@cloudbuild.gserviceaccount.com&lt;/code&gt; service account.&lt;/p&gt;

&lt;p&gt;Encrypt our secret with KMS:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcloud kms encrypt \
  --plaintext-file=secrets.json \
  --ciphertext-file=secrets.json.enc \
  --location=global \
  --keyring=[KEYRING-NAME] \
  --key=[KEY-NAME]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create an encrypted file which we can add to our application’s source code.
Using KMS, we can decrypt this secret in our Cloud Build pipeline:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps:
- name: gcr.io/cloud-builders/gcloud
  args:
  - kms
  - decrypt
  - --ciphertext-file=secrets.json.enc
  - --plaintext-file=secrets.json
  - --location=global
  - --keyring=[KEYRING-NAME]
  - --key=[KEY-NAME]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will decrypt the secret into a file in our workspace folder,
which then can be used in subsequent steps.&lt;/p&gt;

&lt;h2 id=&quot;debugging-and-running-your-build-locally&quot;&gt;Debugging and running your build locally&lt;/h2&gt;

&lt;p&gt;When creating a build pipeline, 
we do not need to keep pushing our code to the source repository to trigger a build.
We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-build-local&lt;/code&gt; tool to run our build locally,
using the Google Cloud SDK and Docker.&lt;/p&gt;

&lt;p&gt;If we are using the Cloud Builder images (&lt;code class=&quot;highlighter-rouge&quot;&gt;gcr.io/cloud-builders/...&lt;/code&gt;),
we must first configure our Google Cloud SDK to be able to pull the images:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configure Docker
$ gcloud components install docker-credential-gcr
$ docker-credential-gcr configure-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then install the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-build-local&lt;/code&gt; tool:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcloud components install cloud-build-local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can use the tool to test our build pipeline locally!&lt;/p&gt;

&lt;p&gt;To build locally, we run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cloud-build-local --config=[CONFIG FILE] \
  --dryrun=false \
  --push \
  [SOURCE_CODE]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG FILE&lt;/code&gt; is our Cloud Build YAML config file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE_CODE&lt;/code&gt; is the path to our source code&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--dryrun=false&lt;/code&gt; will cause our build to actually run. 
This is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; by default and we must enable this explicitly to cause the containers to execute.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--push&lt;/code&gt; will cause the built images defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; to be pushed to the registry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we use some of the default substitions like &lt;code class=&quot;highlighter-rouge&quot;&gt;$COMMIT_SHA&lt;/code&gt; in our build,
we must pass these in with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--substitions&lt;/code&gt; flag in key=value pairs,
separated by commas.
Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cloud-build-local --config=cloud-build.yaml \
   --dryrun=false \
   --substitutions COMMIT_SHA=$(git rev-parse HEAD),BRANCH_NAME=$(git rev-parse  --abbrev-ref HEAD) \ 
   /path/to/source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cloud Build stores intermediary artifacts in the workspace folder.
This workspace folder, 
as mentioned before,
will be removed after the build finishes.
If we want to debug our build and check what happened in the workspace folder,
then we can copy the artifacts to a path on our computer,
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;--write-workspace&lt;/code&gt; flag.
Note that this path must reside outside of our source folder!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cloud-build-local --config=cloud-build.yaml \
   --dryrun=false \
   --write-workspace=/path/on/computer \
   /path/to/source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-events&quot;&gt;Build events&lt;/h2&gt;

&lt;p&gt;It is possible to trigger other actions when a build starts, finishes, or fails.
Notifications to our team’s chat,
triggering a deployment pipeline,
monitoring our build. 
These are just a few examples.
Cloud Build pushes build events to Pub/Sub on the &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud-builds&lt;/code&gt; topic.
This topic is created automatically when Cloud Build is used.&lt;/p&gt;

&lt;p&gt;We can easily create a subscription on this topic. 
There are two kinds of subscriptions we can use.
The first one is a push subscription, 
which pushes the message to a HTTP endpoint you define.
In this case messages are delivered the moment the event is published on the topic.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;message&quot;: {
    &quot;attributes&quot;: {
      &quot;buildId&quot;: &quot;abcd-efgh...&quot;,
      &quot;status&quot;: &quot;SUCCESS&quot;
    },
    &quot;data&quot;: &quot;SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ==&quot;,
    &quot;message_id&quot;: &quot;136969346945&quot;
  },
  &quot;subscription&quot;: &quot;projects/myproject/subscriptions/mysubscription&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Messages that are received using a pull subscription have the following format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;receivedMessages&quot;: [
    {
      &quot;ackId&quot;: &quot;dQNNHlAbEGEIBERNK0EPKVgUWQYyODM2LwgRHFEZDDsLRk1SK...&quot;,
      &quot;message&quot;: {
        &quot;attributes&quot;: {
          &quot;buildId&quot;: &quot;abcd-efgh-...&quot;,
          &quot;status&quot;: &quot;SUCCESS&quot;
        },
        &quot;data&quot;: &quot;SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ==&quot;,
        &quot;messageId&quot;: &quot;19917247034&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each message contains the Base64 encoded event of the &lt;a href=&quot;https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Build resource&lt;/a&gt;.
Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;id&quot;: &quot;a0e322f2-5d8d-4d56-a2b5-05cc18a350af&quot;,
  &quot;projectId&quot;: &quot;myproject&quot;,
  &quot;status&quot;: &quot;SUCCESS&quot;,
  &quot;source&quot;: {
    &quot;repoSource&quot;: {
      &quot;projectId&quot;: &quot;myproject&quot;,
      &quot;repoName&quot;: &quot;mygitrepo&quot;,
      &quot;branchName&quot;: &quot;feature/my-branch&quot;
    }
  },
  &quot;steps&quot;: [
    {
      &quot;name&quot;: &quot;gcr.io/cloud-builders/mvn&quot;,
      &quot;args&quot;: [
        &quot;mvn&quot;,
        &quot;clean&quot;,
        &quot;--batch-mode&quot;
      ],
      &quot;id&quot;: &quot;Clean&quot;,
      &quot;timing&quot;: {
        &quot;startTime&quot;: &quot;2019-03-23T15:01:25.421160679Z&quot;,
        &quot;endTime&quot;: &quot;2019-03-23T15:02:04.363792008Z&quot;
      },
      &quot;pullTiming&quot;: {
        &quot;startTime&quot;: &quot;2019-03-23T15:01:25.421160679Z&quot;,
        &quot;endTime&quot;: &quot;2019-03-23T15:01:59.834114283Z&quot;
      },
      &quot;status&quot;: &quot;SUCCESS&quot;
    },
    ... More steps
  ],
  &quot;results&quot;: {
    &quot;images&quot;: [
      {
        &quot;name&quot;: &quot;eu.gcr.io/myproject/myapp:d76cce6d732e6edc01e65a547997caf107411468&quot;,
        &quot;digest&quot;: &quot;sha256:0bb2f72d3d267c6bfebee8478d06dbf553d5932e01a0b86b7fc298c3a9b4a1f2&quot;,
        &quot;pushTiming&quot;: {
          &quot;startTime&quot;: &quot;2019-03-23T15:15:58.377229824Z&quot;,
          &quot;endTime&quot;: &quot;2019-03-23T15:16:01.908997933Z&quot;
        }
      }
    ],
    &quot;buildStepImages&quot;: [
      &quot;&quot;,
      &quot;sha256:dbc62a5cd330fba4d092d83f64218f310ee1a61bdb49d889728091756bc38bac&quot;,
      &quot;sha256:dbc62a5cd330fba4d092d83f64218f310ee1a61bdb49d889728091756bc38bac&quot;,
      &quot;sha256:dbc62a5cd330fba4d092d83f64218f310ee1a61bdb49d889728091756bc38bac&quot;,
      &quot;sha256:dbc62a5cd330fba4d092d83f64218f310ee1a61bdb49d889728091756bc38bac&quot;,
      &quot;sha256:dbc62a5cd330fba4d092d83f64218f310ee1a61bdb49d889728091756bc38bac&quot;,
      &quot;sha256:d30ca59f3315232f539955a6179f2b287445ec56db41e7d7a41a622c9faee575&quot;,
      &quot;sha256:d30ca59f3315232f539955a6179f2b287445ec56db41e7d7a41a622c9faee575&quot;,
      &quot;sha256:d30ca59f3315232f539955a6179f2b287445ec56db41e7d7a41a622c9faee575&quot;
    ],
    &quot;buildStepOutputs&quot;: []
  },
  &quot;createTime&quot;: &quot;2019-03-23T15:01:16.591984806Z&quot;,
  &quot;startTime&quot;: &quot;2019-03-23T15:01:17.438509785Z&quot;,
  &quot;finishTime&quot;: &quot;2019-03-23T15:16:02.968224Z&quot;,
  &quot;timeout&quot;: &quot;1800s&quot;,
  &quot;images&quot;: [
    &quot;eu.gcr.io/myproject/myapp:d76cce6d732e6edc01e65a547997caf107411468&quot;
  ],
  &quot;artifacts&quot;: {
    &quot;images&quot;: [
      &quot;eu.gcr.io/myproject/myapp:d76cce6d732e6edc01e65a547997caf107411468&quot;
    ]
  },
  &quot;logsBucket&quot;: &quot;gs://199957373521.cloudbuild-logs.googleusercontent.com&quot;,
  &quot;sourceProvenance&quot;: {
    &quot;resolvedRepoSource&quot;: {
      &quot;projectId&quot;: &quot;mateco-map&quot;,
      &quot;repoName&quot;: &quot;bitbucket_matecocloud_myapp&quot;,
      &quot;commitSha&quot;: &quot;d76cce6d732e6edc01e65a547997caf107411468&quot;
    }
  },
  &quot;buildTriggerId&quot;: &quot;9bd093c7-9de4-4eae-bfea-ce8e46afafa8&quot;,
  &quot;options&quot;: {
    &quot;substitutionOption&quot;: &quot;ALLOW_LOOSE&quot;,
    &quot;logging&quot;: &quot;LEGACY&quot;
  },
  &quot;logUrl&quot;: &quot;https://console.cloud.google.com/gcr/builds/a0e322f2-5c8d-4e56-a2b5-05cc18a350af?project=199957373521&quot;,
  &quot;substitutions&quot;: {
    &quot;_MOD_BRANCH_NAME&quot;: &quot;$_tmpvar&quot;
  },
  &quot;tags&quot;: [
    &quot;event-f2d96d7b-22f5-41d7-9ded-a98a2a6f43ca&quot;,
    &quot;trigger-9bd093c7-9de4-4eae-bfea-ce8e46afafa8&quot;
  ],
  &quot;timing&quot;: {
    &quot;BUILD&quot;: {
      &quot;startTime&quot;: &quot;2019-03-23T15:01:25.421114358Z&quot;,
      &quot;endTime&quot;: &quot;2019-03-23T15:15:58.377209942Z&quot;
    },
    &quot;FETCHSOURCE&quot;: {
      &quot;startTime&quot;: &quot;2019-03-23T15:01:20.519103589Z&quot;,
      &quot;endTime&quot;: &quot;2019-03-23T15:01:25.368505523Z&quot;
    },
    &quot;PUSH&quot;: {
      &quot;startTime&quot;: &quot;2019-03-23T15:15:58.377226850Z&quot;,
      &quot;endTime&quot;: &quot;2019-03-23T15:16:01.909032379Z&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that Cloud Build does not publish events between steps, 
but only when the build is queued, starts or ends.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;Build status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;The build is queued&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QUEUED&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The build starts&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKING&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The build is successful&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SUCCESS&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Build is cancelled&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CANCELLED&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Build times out&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIMEOUT&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Step times out&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIMEOUT&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Build failed&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FAILURE&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Internal error by Google Cloud Build&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INTERNAL_ERROR&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using Google Cloud Function, 
we can easily trigger other actions based on these build events.&lt;/p&gt;

&lt;p&gt;Here is a small, redacted snippet of a Google Cloud Function
which sends build updates to a Slack webhook.&lt;/p&gt;

&lt;p&gt;It receives the build event, reads the Base64 encoded data,
converts it into a Slack message and triggers the webhook with the created message.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const IncomingWebhook = require('@slack/client').IncomingWebhook;
const SLACK_WEBHOOK_URL = &quot;https://hooks.slack.com/services/XXXXXXXXXXXXXX&quot;;
const WEBHOOK = new IncomingWebHook(SLACK_WEBHOOK_URL);

// Main function called by Cloud Functions.
module.exports.cloudBuildSlack = (event, callback) =&amp;gt; {
    const build = eventToBuild(event.data.data);
    WEBHOOK.send(createSlackMessage(build), callback);
};
    
const createSlackMessage = (build) =&amp;gt; {
    const app = getApplicationName(build);
    const branch = build.source.repoSource.branchName;
    const subject = createSubject(build);
    const tag = getImagetag(build);

    return {
        attachments: [{
            fallback: `${subject} - ${app} - ${branch} - &amp;lt;${build.logUrl}|Logs&amp;gt;`,
            title: subject,
            title_link: build.logUrl,
            fields: getFields(app, branch, tag),
            color: getMessageColor(build)
        }],
        mrkdwn: true
    };
};

// eventToBuild transforms pubsub event message to a build object.
const eventToBuild = (data) =&amp;gt; {
    return JSON.parse(new Buffer(data, 'base64').toString());
};

...more functions
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Cloud Build offers a simple solution and utilises the power of containers to offer a lot of possibilities.
A build pipeline is set up in a few minutes, and your Docker images are uploaded automatically!&lt;/p&gt;

&lt;p&gt;It saves you a lot of time and trouble in setting up build infrastructure, 
because, well, you do not have to!&lt;/p&gt;

&lt;p&gt;If you wish to try it yourself,
we have provided &lt;a href=&quot;https://github.com/tomverelst/cloud-build-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a demo application on GitHub&lt;/a&gt;.
Enjoy Cloud Building!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Verelst&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-verelst/&quot;, &quot;avatar&quot;=&gt;&quot;tom-verelst.png&quot;, &quot;twitter&quot;=&gt;&quot;tomverelst&quot;, &quot;linkedin&quot;=&gt;&quot;tomverelst&quot;, &quot;github&quot;=&gt;&quot;tomverelst&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud Native Platforms&quot;, &quot;email&quot;=&gt;&quot;tom.verelst@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tom is a senior software engineer at Ordina Belgium. He is fond of all things Go and DevOps.&quot;}</name><email>tom.verelst@ordina.be</email></author><category term="Cloud" /><category term="GCP" /><category term="Docker" /><category term="DevOps" /><category term="Git" /><category term="Kubernetes" /><summary type="html">In this post, we will have a quick overview on what is possible with Google Cloud Build.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-03-28-cloudbuild/cloudbuild.png" /></entry><entry><title type="html">Streaming Traffic Data with Spring Kafka &amp;amp; Apache Storm</title><link href="https://ordina-jworks.github.io/streaming/2019/03/25/streaming-traffic-data.html" rel="alternate" type="text/html" title="Streaming Traffic Data with Spring Kafka &amp; Apache Storm" /><published>2019-03-25T00:00:00+00:00</published><updated>2019-03-25T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/streaming/2019/03/25/streaming-traffic-data</id><content type="html" xml:base="https://ordina-jworks.github.io/streaming/2019/03/25/streaming-traffic-data.html">&lt;blockquote&gt;
  &lt;p&gt;Earlier I did a workshop at Ordina in order to introduce my colleagues to the wonderful world of stream processing.
For that workshop I used traffic data, since especially in Belgium, traffic data is something everybody can easily relate to as we all have to endure it every workday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-data&quot;&gt;The Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#native-java-stream-processing&quot;&gt;Native Java Stream Processing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kafka-streams-with-spring-kafka&quot;&gt;Kafka Streams with Spring Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#apache-storm&quot;&gt;Apache Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this blog post we will use traffic data made available by the Flemish government.&lt;/p&gt;

&lt;p&gt;Several examples will be provided about how this data can be processed in various ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Transform the data into events with &lt;a href=&quot;https://cloud.spring.io/spring-cloud-stream/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do some stream processing using some plain old Java, the native way&lt;/li&gt;
  &lt;li&gt;Process these events with &lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kafka Streams&lt;/a&gt; via &lt;a href=&quot;https://spring.io/projects/spring-kafka&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do similar processing with &lt;a href=&quot;http://storm.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Storm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-data&quot;&gt;The Data&lt;/h1&gt;
&lt;p&gt;The traffic data is registered on fixed sensors installed in the road itself.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sensor &quot; src=&quot;/img/2018-08-08-streaming-traffic-data/detectielussen%20A12.JPG&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;General information about the sensors can be retrieved from &lt;a href=&quot;http://miv.opendata.belfla.be/miv/configuratie/xml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://miv.opendata.belfla.be/miv/configuratie/xml&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetpunt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unieke_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3640&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschrijvende_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H291L10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschrijvende_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volledige_naam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kruibeke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volledige_naam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ident_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A0140002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ident_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lve_nr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;437&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lve_nr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kmp_Rsys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;695&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kmp_Rsys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rijstrook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rijstrook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_coord_EPSG_31370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144477&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0917&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_coord_EPSG_31370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y_coord_EPSG_31370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;208290&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6237&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y_coord_EPSG_31370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lengtegraad_EPSG_4326&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;289767347&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lengtegraad_EPSG_4326&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breedtegraad_EPSG_4326&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18458196&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breedtegraad_EPSG_4326&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetpunt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is pretty static as these sensors do not tend to move themselves.&lt;/p&gt;

&lt;p&gt;Every minute the latest sensor output is published on &lt;a href=&quot;http://miv.opendata.belfla.be/miv/verkeersdata&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://miv.opendata.belfla.be/miv/verkeersdata&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is one big XML file containing all the aggregated data of every sensor of the last minute.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetpunt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beschrijvende_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;H211L10&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unieke_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1152&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lve_nr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;177&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lve_nr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tijd_waarneming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T16:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tijd_waarneming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tijd_laatst_gewijzigd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T16:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tijd_laatst_gewijzigd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actueel_publicatie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actueel_publicatie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschikbaar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschikbaar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geldig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geldig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasse_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasse_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasse_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasse_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasse_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verkeersintensiteit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_rekenkundig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voertuigsnelheid_harmonisch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meetdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rekendata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bezettingsgraad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bezettingsgraad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschikbaarheidsgraad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beschikbaarheidsgraad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onrustigheid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;366&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onrustigheid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rekendata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information (in Dutch) about this dataset you can go to &lt;a href=&quot;https://data.gov.be/nl/dataset/7a4c24dc-d3db-460a-b73b-cf748ecb25dc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://data.gov.be/nl/dataset/7a4c24dc-d3db-460a-b73b-cf748ecb25dc&lt;/a&gt;.
Over there you will also find the XSD files describing the XML structure.&lt;/p&gt;

&lt;h2 id=&quot;transform-to-events&quot;&gt;Transform to Events&lt;/h2&gt;
&lt;p&gt;Since I am using Spring Boot to kickstart the application, you can go to &lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://start.spring.io/&lt;/a&gt; to get started.
Some handy baseline dependencies to get started are: &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Actuator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DevTools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because the data is provided in a single XML file, we will transform it into separate events per sensor.
This brings it also inline with how true sensory events would arrive within our system if we would not be dealing with a big XML file.&lt;/p&gt;

&lt;p&gt;A small Spring Cloud Stream application will be built to read in the XML, transform it to events and push these events to a Kafka topic.&lt;/p&gt;

&lt;p&gt;You might wonder, why would we use Spring Cloud Stream for this?
It makes it very easy to read/write messages to Kafka with it.&lt;/p&gt;

&lt;p&gt;Add the appropriate starter:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Define a Spring Boot application - make sure to enable scheduling.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@EnableScheduling&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@EnableBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenDataTrafficApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenDataTrafficApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Define some input and output topics.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Input&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SubscribableChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trafficEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trafficEventsOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sensorDataOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a bean to read in the events.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readInData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Will read in data from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;generated.traffic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;um&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUnmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Miv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;miv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Miv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;um&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; This data is from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;miv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTijdPublicatie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toGregorianCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEventList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertXmlToDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trafficMeasurements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;miv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMeetpunt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;lastReadInDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;miv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTijdPublicatie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toGregorianCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;retrieved {} events &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEventList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEventList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we will retrieve the data out of the XML and split it out into something more event like.
For every sensor point per vehicle we will extract one &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEvent&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrafficEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VehicleClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficIntensity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleSpeedHarmonical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDescriptiveId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lveNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastUpdated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
        actueel_publicatie: 1 = data is less then 3 minutes old.
         */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recentData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* 
        Indicate if the sensor (meetPunt) was available when trying to retrieve the data
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDefect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;VehicleClass&lt;/code&gt; is just an enum with the vehicle type.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;MOTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RIGGID_LORRIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TRUCK_OR_BUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNKNOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will also retrieve the detailed sensor information from the XML containing the sensor descriptions.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SensorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniekeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
        MeetpuntId
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
        Meetpunt beschrijvende Id
         */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDescriptiveId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
        Unique road number.
            More info in the dataset of numbered roads in the &quot;Wegenregister&quot; (Roads registry), field: locatieide,
            http://opendata.vlaanderen.be/dataset/wegenregister-15-09-2016
            Or the dataset &quot;De beheersegmenten van de genummerde wegen&quot; by AWV, field ident8,
            http://www.geopunt.be/catalogus/datasetfolder/12b65bc0-8c71-447a-8285-3334ca1769d8
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ident8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
        Reference to the lane of the measurement point.
          The character indicates the lane type.
            R: Regular lane
            B: Bus lane or similar
            TR: measurement of the traffic in the opposite direction (p.e. in or near tunnels) on the corresponding R-lane.
            P: Hard shoulder lane
            W: parking or other road
            S: Lane for hard shoulder running
            A: Hatched area

          Counting starts at R10 for the first regular lane of the main road. Lane numbers increase from right/slower to left/faster lanes.
          Lanes 09, 08, 07, ... are positioned right of this first lane, and mainly indicate access/merging lanes, deceleration lanes, recently added lanes, lanes for hard shoulder running, bus lanes
          Lanes 11, 12, 13, ... are positioned left of lane R10.
          The lane number 00 is used for measurement points on the hard shoulder (P00).
          The TR-lane is identical to the corresponding R-lane (TR10=R10,TR11=R11,TR12=R12,...), but returns the data of the &quot;ghost traffic&quot; instead.
          (The data for TR10 and R10 are provided by the same detection loops.)
         */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficLane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write these events to a topic.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trafficEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Send message to the trafficEventOutput channel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trafficEventsOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendSensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sensorDataOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The events will be sent to Kafka as JSON messages.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt; annotation Spring Boot will read in the events every 60 seconds.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;putAllEventsInKafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you are taking your data in, it is important to decide what you want to send in.&lt;/p&gt;

&lt;p&gt;You do not want to remove too much information nor do you want the events becoming too bloated.
Meaning, that they contain too much information and you needing to spend a lot of time extracting information when analysing your data.
Keep them as close to the actual event as possible, only adding in data if this is required.&lt;/p&gt;

&lt;p&gt;In our current example the sensor location does not need to be part of the traffic events as it is pretty static.
If in your situation, you have another data entry where your sensor specific data changes every few events, it might be worthwhile to add it to your event when taking it in.
So that later on you do not have to spend time joining that data together.&lt;/p&gt;

&lt;p&gt;Sometimes your intake data is also too large, it is not wrong to ignore certain properties when taking in data in your stream.&lt;/p&gt;

&lt;p&gt;In our case we ignore a lot of the properties within the XML, as they do not serve our example.
Having less properties to analyze can make your life easier, but if that raw data is no longer available you have lost that information for good.&lt;/p&gt;

&lt;p&gt;Be wise with what you remove as time travel is not something we can code in, ignored data is lost forever.&lt;/p&gt;

&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Think in events&lt;/li&gt;
  &lt;li&gt;Keep the data structure as flat as possible&lt;/li&gt;
  &lt;li&gt;Do not optimize your data too soon&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;native-java-stream-processing&quot;&gt;Native Java Stream Processing&lt;/h1&gt;

&lt;h3 id=&quot;do-not-forget&quot;&gt;Do not forget&lt;/h3&gt;
&lt;p&gt;Do not forget that you can also process your events in native Java.
You will not have a lot of fancy features available but it might get the job done.&lt;/p&gt;

&lt;p&gt;Especially when you take into consideration the extra cost involved in introducing a streaming framework.
For both Kafka and Storm you not only need to set up a cluster of the framework itself, but also of Zookeeper.&lt;/p&gt;

&lt;p&gt;That setup does not come for free and will need to be maintained in the future.&lt;/p&gt;

&lt;h3 id=&quot;easy-to-get-started&quot;&gt;Easy to get started&lt;/h3&gt;
&lt;p&gt;With Spring Cloud Stream it is easy to start processing your stream of data in native Java.&lt;/p&gt;

&lt;p&gt;First define a &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/SubscribableChannel.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SubscribableChannel&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SubscribableChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trafficEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you will need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageHandler&lt;/code&gt; which will describe what you will do with every message you process.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;MessageHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;retrieved message with header &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;retrieved message &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; the sensor id is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrafficIntensity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;We now have {} vehicles on the road {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrafficIntensity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleCountForEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrafficIntensity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;vehicleCountForEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;We now had total: {} vehicles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleCountForEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;vehicleCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleCountForEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lowestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;highestWithTraffic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, link that &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageHandler&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;InputChannel&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trafficEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messageHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There you go, you are now processing your stream of data in native Java.&lt;/p&gt;

&lt;p&gt;It does become obvious that doing something more fancy, like windowing and aggregation, will require you to write all of that logic yourself.
This can get out of hand pretty quickly, so do watch out for that.&lt;/p&gt;

&lt;p&gt;But for simple data processing, nothing beats some native Java.&lt;/p&gt;

&lt;h3 id=&quot;takeaways-native-java&quot;&gt;Takeaways Native Java&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Can easily handle 1000 events per second&lt;/li&gt;
  &lt;li&gt;Easy to get started&lt;/li&gt;
  &lt;li&gt;You will lack advanced features like windowing, aggregation, …&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kafka-streams-with-spring-kafka&quot;&gt;Kafka Streams with Spring Kafka&lt;/h1&gt;

&lt;h3 id=&quot;kafka&quot;&gt;Kafka&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-kafka&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Spring Kafka&lt;/a&gt; allows us to easily make use of &lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Kafka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kafka is designed to handle large streams of data.
Messages are published into topics and can be stored for mere minutes or indefinitely.
It is highly scalable allowing topics to be distributed over multiple brokers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kafka Streams&lt;/a&gt; allows us to write stream processing applications within the Kafka cluster itself.&lt;/p&gt;

&lt;p&gt;For this reason, Kafka Streams will use topics for both input and output allowing it to store intermediate results within Kafka itself.&lt;/p&gt;

&lt;h3 id=&quot;what-topics-does-kafka-streams-use&quot;&gt;What “topics” does Kafka Streams use&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/10/javadoc/org/apache/kafka/streams/kstream/KStream.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KStream&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; records a stream of key/value pairs and can be defined from one or more topics.
It does not matter if a key exists multiple times within the &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;, when you read in the data of a &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; every record will be sent to you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/10/javadoc/org/apache/kafka/streams/kstream/KTable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KTable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; is a changelog stream of a primary keyed table, meaning that whenever a key exists multiple times within the &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; you will receive only the most recent record.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/10/javadoc/org/apache/kafka/streams/kstream/GlobalKTable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GlobalKTable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;, but it is replicated over all Kafka Streams instances, so do be careful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/10/javadoc/org/apache/kafka/streams/kstream/KGroupedStream.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KGroupedStream&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an intermediate format based on a regrouped stream of records based on a &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;, with usually, a different key than the original primary key.
It is derived from a &lt;code class=&quot;highlighter-rouge&quot;&gt;groupBy()&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;groupByKey()&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt;.
Via &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregate()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; it can be converted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/10/javadoc/org/apache/kafka/streams/kstream/KGroupedTable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KGroupedTable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;KGroupedStream&lt;/code&gt;, but a &lt;code class=&quot;highlighter-rouge&quot;&gt;KGroupedTable&lt;/code&gt; is derived from a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;groupBy()&lt;/code&gt;.
It can be reconverted to a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregate()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;coding-with-spring-kafka&quot;&gt;Coding with Spring Kafka&lt;/h3&gt;
&lt;p&gt;We still have the Spring Cloud Stream topics to which we send in some data.
Let’s use these but now using Kafka.&lt;/p&gt;

&lt;p&gt;First we are going to take in the static data of the sensors into a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDescriptionsStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorDataOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consumed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorDataSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDescriptionsWithKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sensorDescriptionsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUniekeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sensorDescriptionsWithKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dummy-topic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorDataKTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dummy-topic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consumed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorDataSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main reason we are using a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; is that it makes it easy to be sure to only get the most recent state of that sensor, as a &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; will only return one result per key.
&lt;code class=&quot;highlighter-rouge&quot;&gt;dummy-topic&lt;/code&gt; is just the name I chose.
For my example it is not that important to have a well defined topic name.
But do realize that Kafka Streams will persist the state of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Ktable&lt;/code&gt; within Kafka topics.&lt;/p&gt;

&lt;p&gt;Subsequently we are going to enrich the traffic event with the sensor data.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;streamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEventsOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consumed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorDataKTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enriched-trafficEventsOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Resulting in a new &lt;code class=&quot;highlighter-rouge&quot;&gt;KStream&lt;/code&gt; with enriched &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEvent&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.stream(String topic, Consumed&amp;lt;K,V&amp;gt; consumed)&lt;/code&gt; will consume all entries from a topic and transform these into a stream. 
Mapping these to topic records with a key and a value.
In our case the key is just a string, while the body of the topic will be a JSON message which gets converted into a &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEvent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;join()&lt;/code&gt;, full definition:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueJoiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We join our &lt;code class=&quot;highlighter-rouge&quot;&gt;KTable&lt;/code&gt; with our &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEvent&lt;/code&gt; records using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueJoiner&lt;/code&gt; we pass along which will result in a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Joined&lt;/code&gt; result.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueJoiner&lt;/code&gt; is just a function in which we indicate what needs to be done with both records the function receives. 
In our case a &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEvent&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;SensorData&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Joined&lt;/code&gt; describes the new record structure we will write towards Kafka using &lt;code class=&quot;highlighter-rouge&quot;&gt;.to(String topic)&lt;/code&gt; sending the newly generated records to that Kafka topic.&lt;/p&gt;

&lt;p&gt;Once this stream has started, it will continue processing these events whenever a new record is inserted into the intake topic.&lt;/p&gt;

&lt;p&gt;For some of our further processing we do not care for all traffic events, so let’s filter out some.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;streamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enriched-trafficEventsOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consumed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canProcessSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filtering happens on the key of the records, so first we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;selectKey()&lt;/code&gt; passing along a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyMapper&lt;/code&gt; to map to the new key.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyMapper&lt;/code&gt; is a function to which you pass along the field which you want to become the new key.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canProcessSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sensorIdsToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; to filter out the keys we want to retain which match the given &lt;code class=&quot;highlighter-rouge&quot;&gt;Predicate&lt;/code&gt;.
In our case the predicate just verifies if a key appears within a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;For every record we will now do some simple processing with &lt;code class=&quot;highlighter-rouge&quot;&gt;updateStats()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canProcessSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;updateStats()&lt;/code&gt; method just updates some basic counters to track how much traffic has been processed since we started with the data intake to a hashtable.
So that we know how many vehicles have passed, the highest speed detected, …&lt;/p&gt;

&lt;h3 id=&quot;windowing&quot;&gt;Windowing&lt;/h3&gt;
&lt;p&gt;In an ideal world all events arrive in a perfect and timely fashion within our Kafka system.&lt;/p&gt;

&lt;p&gt;In an ideal world we can also process all the events we want to process.&lt;/p&gt;

&lt;p&gt;In the real world however, this does not compute.
Events tend to arrive out of order and too late.&lt;/p&gt;

&lt;p&gt;If you want to get a count of all the vehicles which ran over your road network from 21:00 to 21:05 but one of your sensors sends its events too late, the count you have generated will not be correct.&lt;/p&gt;

&lt;p&gt;Windowing allows you to mitigate these risk by&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Limiting the scope of your stream processing&lt;/li&gt;
  &lt;li&gt;Allowing you to catch some “late” events within a window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For adding windows you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.windowedBy&lt;/code&gt;, in this example we define a window of 5 minutes which gets every 10 minutes.
Then you will need to aggregate the results per window with &lt;code class=&quot;highlighter-rouge&quot;&gt;.aggregate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do not forget to provide the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;Materialized&lt;/code&gt; parameters so Kafka knows what type of key and value is used as input by the aggregation.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWindowStreamForAverageSpeedPerSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Initializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;SensorCount:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowedSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;average-speed-per-sensor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Produced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; =======&amp;gt; average speed for the sensor %s is now %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;streamToProcessData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canProcessSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;traffic-per-lane&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streamPerHighwayLaneToProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;streamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;traffic-per-lane&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Consumed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventSerde&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createWindowStreamForAverageSpeedPerHighwaySection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streamPerHighwayLaneToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;takeaways-kafka-streams-and-spring-kafka&quot;&gt;Takeaways Kafka Streams and Spring Kafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;When you have a Kafka cluster lying around, using Kafka Streams is a no-brainer&lt;/li&gt;
  &lt;li&gt;Excellent support within Spring&lt;/li&gt;
  &lt;li&gt;Easy to get started&lt;/li&gt;
  &lt;li&gt;Using the &lt;a href=&quot;https://docs.confluent.io/current/streams/developer-guide/dsl-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kafka Streams DSL&lt;/a&gt; feels quite natural&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;apache-storm&quot;&gt;Apache Storm&lt;/h1&gt;

&lt;h3 id=&quot;twitter&quot;&gt;Twitter&lt;/h3&gt;

&lt;p&gt;It was first created at &lt;a href=&quot;https://twitter.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Twitter&lt;/a&gt; who open sourced it as an Apache &lt;a href=&quot;http://storm.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Project&lt;/a&gt;.
One of the first streaming frameworks that got widely adopted.&lt;/p&gt;

&lt;h3 id=&quot;spouts--bolts&quot;&gt;Spouts &amp;amp; Bolts&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/streaming-traffic/storm-spout-bolts.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;When you work with Storm you need to think in &lt;code class=&quot;highlighter-rouge&quot;&gt;Spouts&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuples&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Spout&lt;/code&gt; is the origin of your streams.
It will read in &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuples&lt;/code&gt; from an external source and can be either reliable or unreliable.&lt;/p&gt;

&lt;p&gt;Reliable just means that when something goes wrong within your stream processing, the spout can replay the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt;.
While an unreliable spout will go for the good old fire-and-forget approach.&lt;/p&gt;

&lt;p&gt;Spouts can also emmit to more than one stream.&lt;/p&gt;

&lt;p&gt;Spouts will generate &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuples&lt;/code&gt;, the main data structure within Storm.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt; is a named list of values, where a value can be of any type.
It is however important that Storm will serialize all the values within a &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt;, so for a more exotic type you will need to implement a serializer yourself.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolts&lt;/code&gt; do all the processing of your streams.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt; can send out to more then 1 stream.
It is also possible to define a Stream Grouping on your Bolts allowing you to tailor the distribution of your workload over the various Bolts of your Storm topology.&lt;/p&gt;

&lt;p&gt;Multiple instances of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt; will run as tasks.&lt;/p&gt;

&lt;p&gt;You have the following Stream Groupings:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shuffle Grouping: completely random&lt;/li&gt;
  &lt;li&gt;Fields Grouping: based on the value of certain fields, Storm will make sure that all the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuples&lt;/code&gt; with the same “key” will be processed by the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt;, handy for word counts for example - great business value&lt;/li&gt;
  &lt;li&gt;Partial Key Grouping: pretty similar to fields grouping, but with some extra load balancing&lt;/li&gt;
  &lt;li&gt;All grouping: the entire stream will go to all the tasks of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt;, use this with care&lt;/li&gt;
  &lt;li&gt;None Grouping: implies that you don’t care how it gets processed - which corresponds with a shuffle grouping&lt;/li&gt;
  &lt;li&gt;Direct Grouping: here the producer of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt; will decide which task of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt; will receive the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt; for processing&lt;/li&gt;
  &lt;li&gt;Local or Shuffle Grouping: this will also take a look at the worker processes running the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolt&lt;/code&gt;’s tasks, this in order to make the flow somewhat more efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s get started with some code.&lt;/p&gt;

&lt;p&gt;First take in some necessary dependencies:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is to get to a Storm topology with one &lt;code class=&quot;highlighter-rouge&quot;&gt;Spout&lt;/code&gt; and two &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolts&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSpout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafka_spout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEvent_Bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorIdsToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;globalGrouping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafka_spout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateTrafficEventStats_bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficCountBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fieldsGrouping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEvent_Bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTopology&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First we will define a &lt;code class=&quot;highlighter-rouge&quot;&gt;KafkaSpout&lt;/code&gt; which will take in the data of a Kafka topic.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKafkaSpoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ByTopicRecordTranslator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByTopicRecordTranslator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;partition&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forTopic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEventsOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;partition&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEventsOutput&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kafkaSpoutTestGroup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRetry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRetryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRecordTranslator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOffsetCommitPeriodMs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFirstPollOffsetStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EARLIEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxUncommittedOffsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1050&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For completeness this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;retryService&lt;/code&gt; which just handles some retrying whenever your Kafka cluster is behaving naughty:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpoutRetryService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRetryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;KafkaSpoutRetryExponentialBackoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KafkaSpoutRetryExponentialBackoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TimeInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;microSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;KafkaSpoutRetryExponentialBackoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TimeInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milliSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpoutRetryExponentialBackoff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TimeInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we will emmit that data to a &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficEventBolt&lt;/code&gt; which will filter out the events we want to process further.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrafficEventBolt&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseRichBolt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputCollector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TrafficEventBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorIdsToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sensorIds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensorIdsToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topologyContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputCollector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputCollector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputCollector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input = [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleSpeedCalculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trafficEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTrafficIntensity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputFieldsDeclarer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;declarer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;speed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;trafficIntensity&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally we will send out the tuples to a &lt;code class=&quot;highlighter-rouge&quot;&gt;TrafficCountBolt&lt;/code&gt; which will gather some general statistics.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrafficCountBolt&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseRichBolt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputCollector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;


        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topologyContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputCollector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputCollector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputCollector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input = [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficIntensity&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputFieldsDeclarer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;declarer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;windowing-1&quot;&gt;Windowing&lt;/h3&gt;
&lt;p&gt;Storm also knows about the concept of &lt;a href=&quot;https://storm.apache.org/releases/1.2.2/Windowing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;windowing&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountPerSensorIdBolt&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseWindowedBolt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputCollector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TupleWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tupleWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tupleWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficIntensity&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;countPerSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Subsequently you can define this bolt within a topology at which moment you will also define the size or duration of the window:&lt;/p&gt;

&lt;p&gt;In this example we are just using windows with a fixed duration of five seconds.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StormTopology&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTopologyKafkaSpout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KafkaSpoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopologyBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSpout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafka_spout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaSpout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spoutConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEvent_Bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficEventBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensorIdsToProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;globalGrouping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafka_spout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateTrafficEventStats_bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrafficCountBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fieldsGrouping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEvent_Bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensorId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;windowedProcessBolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountPerSensorIdBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseWindowedBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;globalGrouping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trafficEvent_Bolt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTopology&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also pass in an extra parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;slidingInterval&lt;/code&gt; to define a sliding window.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;withWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slidingInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;windowLength&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;slidingInterval&lt;/code&gt; can also be represented by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Count&lt;/code&gt;, which will base the window duration on the amount of tuples being processed.
Either determining the length of the window by the tuples, or when to slide.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;withWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slidingInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;withWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slidingInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even tumbling windows are possible:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;withTumblingWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseWindowedBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;withTumblingWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseWindowedBolt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that a tuple belongs to only one of the tumbling windows, while with a sliding window it is very much possible that a single tuple is processed within multiple windows.&lt;/p&gt;

&lt;h3 id=&quot;stream-api&quot;&gt;Stream API&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;http://storm.apache.org/releases/2.0.0-SNAPSHOT/Stream-API.html#streambuilder&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Storm Streams API&lt;/a&gt; is pretty new.&lt;/p&gt;

&lt;p&gt;It tends to provide a DSL which corresponds more with other streaming DSLs, making your data processing feel more natural and less clunky, as compared to be thinking in spouts and bolts.&lt;/p&gt;

&lt;p&gt;In the background it will convert the DSL to spouts and bolts though, so knowing how Storm works internally is still pretty important.&lt;/p&gt;

&lt;h3 id=&quot;takeaways-apache-storm&quot;&gt;Takeaways Apache Storm&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;It is pretty mature&lt;/li&gt;
  &lt;li&gt;Low latency / high throughput&lt;/li&gt;
  &lt;li&gt;It does tend to feel pretty clunky thinking in Spouts and Bolts - for a developer it is not that big of a hassle, but for a data scientist I can imagine that at times it will be harder to wrap your head around it&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In order to get started with basic stream processing you do not need Kafka or Apache Storm, native Java is good enough for you to take your very first steps when processing a stream of data.
It is easy, everybody understands it and you will have less moving parts within your software landscape which can cause issues.&lt;/p&gt;

&lt;p&gt;Using a dedicated streaming platform will become necessary when you want to do more advanced streaming operations or when performance becomes more and more important.
The existing platforms can easily scale up to the processing of thousands of messages a second, something which is going to be much harder to achieve when building your solution yourself.&lt;/p&gt;

&lt;p&gt;Do not make the mistake of re-inventing the wheel by writing your own streaming platform, others have done that hard work for you.&lt;/p&gt;

&lt;p&gt;Kafka Streams is a no-brainer to use when you have a Kafka cluster lying around, stream processing there feels natural and it is easy to get going.
If however you do not have a Kafka cluster available, it will come with an extra cost of setting it up and maintaining it.
There do exist managed solutions in order to make your life easier.&lt;/p&gt;

&lt;p&gt;Apache Storm is a pretty robust framework which has been around for some time and is used by many.
However, writing the processing logic feels quite clunky and I can imagine that for a non-developer it also might feel quite unnatural. 
They are currently working on a new &lt;a href=&quot;http://storm.apache.org/releases/2.0.0-SNAPSHOT/Stream-API.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;streaming API&lt;/a&gt; which should alleviate that issue though.
According to their &lt;a href=&quot;https://github.com/apache/storm/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;, a release of version 2.0 has already happened, but their &lt;a href=&quot;http://storm.apache.org/index.html&quot;&gt;website&lt;/a&gt; does not reflect it yet.&lt;/p&gt;

&lt;p&gt;When doing stream processing always think about how messages will be handled as most streaming or messaging platforms use an &lt;code class=&quot;highlighter-rouge&quot;&gt;at-least-once&lt;/code&gt; approach, meaning that the same message can be processed more than once by the streaming pipeline. 
Both Kafka Streams and Apache Storm can be configured to provide &lt;code class=&quot;highlighter-rouge&quot;&gt;exactly-once&lt;/code&gt; processing within their streaming pipelines.
For Kafka Streams it means using Kafka transactions while for Storm this can be achieved by &lt;a href=&quot;http://storm.apache.org/releases/1.2.2/Trident-API-Overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Trident&lt;/a&gt;.
Even then, it is only within the streaming pipeline itself meaning that as soon as your processed results leave the streaming platform, you will be back to &lt;code class=&quot;highlighter-rouge&quot;&gt;at-least-once&lt;/code&gt; guarantees.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Van den Bulck&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-van-den-bulck&quot;, &quot;avatar&quot;=&gt;&quot;tom-van-den-bulck.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Practice Lead Big &amp; Fast Data&quot;, &quot;email&quot;=&gt;&quot;tom.vandenbulck@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;tomvdbulck&quot;, &quot;github&quot;=&gt;&quot;tomvdbulck&quot;, &quot;bio&quot;=&gt;&quot;Tom is a Senior Developer at Ordina Belgium, passionate about all software related to data. As competence leader Big &amp; Fast Data he guides his fellow developers through dark data swamps by giving workshops and presentations. Tom is passionate about learning new technologies and frameworks.&quot;}</name><email>tom.vandenbulck@ordina.be</email></author><category term="Streaming" /><category term="Spring" /><category term="Storm" /><category term="Streaming" /><category term="Kafka" /><summary type="html">Earlier I did a workshop at Ordina in order to introduce my colleagues to the wonderful world of stream processing. For that workshop I used traffic data, since especially in Belgium, traffic data is something everybody can easily relate to as we all have to endure it every workday.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-08-08-streaming-traffic-data/traffic.png" /></entry><entry><title type="html">DDD Europe 2019</title><link href="https://ordina-jworks.github.io/conference/2019/03/05/ddd-europe.html" rel="alternate" type="text/html" title="DDD Europe 2019" /><published>2019-03-05T00:00:00+00:00</published><updated>2019-03-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2019/03/05/ddd-europe</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2019/03/05/ddd-europe.html">&lt;blockquote&gt;
  &lt;p&gt;This year, Pieter Van Hees and Kristof Eekhaut attended the &lt;a href=&quot;https://dddeurope.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Domain-Driven Design Europe&lt;/a&gt;  conference in Amsterdam.
The conference was all about Domain-Driven Design and related topics, with loads of interesting talks from beginners and experts in their field.
In this post you can read about some of the talks and workshops we attended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#when-we-lose-sight-of-our-domain-by-carola-lilienthal&quot;&gt;When we lose sight of our domain by Carola Lilienthal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#make-your-tests-tell-the-story-of-your-domain-by-anne-landro-and-mads-opheim&quot;&gt;Make your tests tell the story of your domain by Anne Landro and Mads Opheim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#domain-modelling-towards-first-principles-by-cyrille-martraire&quot;&gt;Domain modelling towards First Principles by Cyrille Martaire&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#collaborative-modelling-hands-on-session-by-marijn-huizendveld&quot;&gt;Collaborative Modelling hands on session by Marijn Huizendveld&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lost-in-transaction-strategies-to-manage-consistency-across-boundaries-by-bernd-ruecker&quot;&gt;Lost in transaction? Strategies to manage consistency across boundaries by Bernd Ruecker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#estimates-or-no-estimates-lets-explore-the-possibilities-by-woody-zuill&quot;&gt;Estimates or No Estimates, Let’s explore the possibilities by Woody Zuill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-we-lose-sight-of-our-domain-by-carola-lilienthal&quot;&gt;When we lose sight of our domain by &lt;a href=&quot;https://twitter.com/Cairolali&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Carola Lilienthal&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Carola Lilienthal&quot; src=&quot;/img/2019-02-16-ddd-europe/carola-lilienthal.jpg&quot; /&gt;&lt;/span&gt;
Carola discusses nine traps that developers fall into, and which prevent us to focus on the important aspect of developing software, the domain.&lt;/p&gt;

&lt;h3 id=&quot;trap-1-model-monopoly&quot;&gt;Trap 1: Model monopoly&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In order for developers to learn about the domain, they have to talk to the users, in a language that the users understand.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing to understand is that developers need to talk to the users, because if they don’t they will lose a lot of information. 
However, in a lot of companies, it is the analyst alone who talks to users when he/she gathers requirements.
By having one or more analysts who communicate with users, they have the monopoly of the domain.&lt;/p&gt;

&lt;p&gt;When developers do communicate with users, they should do so in a language and/or model that the users understand.&lt;/p&gt;

&lt;p&gt;Sharing class diagrams or database models with users is counterproductive.
The users will not understand this complex model and think it took a lot of effort to create.
As a consequence they either cannot give relevant feedback because they don’t understand it, or they won’t dare to because they don’t want to discourage you.&lt;/p&gt;

&lt;p&gt;A better way to communicate the model between users and developers is to use e.g. a schema with icons and descriptive names for actions.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-02-16-ddd-europe/model-with-icons.jpg&quot; alt=&quot;model with icons&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;trap-2-only-look-at-the-future-without-taking-into-account-the-present&quot;&gt;Trap 2: Only look at the future without taking into account the present&lt;/h3&gt;

&lt;p&gt;Look at how they are working today instead of only looking what you want to achieve in the future.&lt;/p&gt;

&lt;p&gt;Ask yourself: “Who is doing what wherewith and what for?”&lt;/p&gt;

&lt;p&gt;Avoid using requirements documents without concrete examples.&lt;/p&gt;

&lt;h3 id=&quot;trap-3-forget-about-reuse-in-your-domain&quot;&gt;Trap 3: Forget about reuse in your domain&lt;/h3&gt;

&lt;p&gt;First think about something being usable, and then see if it can be reused.&lt;/p&gt;

&lt;p&gt;The Don’t Repeat Yourself (DRY) principle should not be applied rigorously and blindly. 
If you apply DRY too often and too soon it often leads to leaky abstractions.&lt;/p&gt;

&lt;h3 id=&quot;trap-4-dont-try-to-be-too-generic-ddd-is-about-being-as-concrete-as-possible&quot;&gt;Trap 4: Don’t try to be too generic, DDD is about being as concrete as possible&lt;/h3&gt;

&lt;p&gt;By being concrete in your domain and your code you will have explicit and understandable code.&lt;/p&gt;

&lt;h3 id=&quot;trap-5-if-your-components-are-too-dependent-on-each-other-you-cannot-scale-them-independently&quot;&gt;Trap 5: if your components are too dependent on each other, you cannot scale them independently&lt;/h3&gt;

&lt;p&gt;High coupling between components prevents you from splitting them into different services that could scale separately.&lt;/p&gt;

&lt;p&gt;Another disadvantage of high coupling is that it becomes difficult to let you software evolve, because changes in one component force changes in others.&lt;/p&gt;

&lt;h3 id=&quot;trap-6-large-business-classes&quot;&gt;Trap 6: Large business classes&lt;/h3&gt;

&lt;p&gt;For example when modeling containers that move through different stages in a harbour.
The large business class could be the container that manages all stages the container goes through.
It would be better to model these stage as separate components.
This is called functional decomposition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Don’t create big business classes that serve everybody.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;trap-7-how-do-we-know-what-to-build&quot;&gt;Trap 7: How do we know what to build&lt;/h3&gt;
&lt;p&gt;How do we split a big elephant into pieces?&lt;/p&gt;

&lt;p&gt;Let’s say we have four different types of elephants in our business domain.
A common mistake would be to split elephant by different parts of the body. 
Where one component would be all four types of feet, another would be all four types of heads, etc.&lt;/p&gt;

&lt;p&gt;This might not necessarily be the best approach to split the four elephant types.
The better approach would be to build one small elephant that is fully functioning, and then let it grow each iteration.
This approach lets you learn from each iteration and allows for incremental growth and refactoring.&lt;/p&gt;

&lt;h3 id=&quot;trap-8-the-expert-trap&quot;&gt;Trap 8: The expert trap&lt;/h3&gt;

&lt;p&gt;The people who developed the elephant will start to think they are experts, and know everything there is to know about the elephant, because they built it from scratch.
This assumption is false, because even the developers who built the elephant from scratch have assumptions, and assumptions can be false.
The real experts are, and will remain, the users.&lt;/p&gt;

&lt;h3 id=&quot;trap-9-everything-is-new-and-therefore-better&quot;&gt;Trap 9: Everything is new, and therefore better&lt;/h3&gt;

&lt;p&gt;People tend to believe that this new system they are building will be way better than the old system they’re replacing, because it looks better.&lt;/p&gt;

&lt;p&gt;What they forget is that the users know the old system very well and are often very productive in it.
When the users will start to use the new system, they will feel like beginners again.
They will be less productive than with the old application, at least for a little while.&lt;/p&gt;

&lt;h2 id=&quot;make-your-tests-tell-the-story-of-your-domain-by-anne-landro-and-mads-opheim&quot;&gt;Make your tests tell the story of your domain by &lt;a href=&quot;https://twitter.com/annelandro&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Anne Landro&lt;/a&gt; and Mads Opheim&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Anne Landro&quot; src=&quot;/img/2019-02-16-ddd-europe/anne-landro.png&quot; /&gt;&lt;/span&gt;
Anne and Mads tell us how they drastically reformed the testing approach for the Norwegian Court Case Management system from constant repetitive manual verification to automated testing.&lt;/p&gt;

&lt;p&gt;They explain that Value Chain tests have helped their team document the domain:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PersonIsRegisteredAsDeadAfterStartOfACaseOfDeath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;createACaseOfDeath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;registerTheDiseased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;registerTheHeirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;notifyTheNationalRegistrtyOfTheDeath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;assertThatThePersionIsRegisteredAsDead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Each of these tests runs through a workflow of the domain and verifies the state at the end of it. 
They are high level tests that can be understood by all stakeholders, so that anyone - including domain experts and users - can look at a test and verify whether the result is what they expect.&lt;/p&gt;

&lt;p&gt;From a  quick glance at this code you can learn a lot about how the domain works. 
Their team also uses this technique to document special cases that they discover in the domain, so that bugs caused by these quirks don’t happen again.&lt;/p&gt;

&lt;h2 id=&quot;domain-modelling-towards-first-principles-by-cyrille-martraire&quot;&gt;Domain modelling towards First Principles by &lt;a href=&quot;https://twitter.com/cyriux&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Cyrille Martraire&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Cyrille Martraire&quot; src=&quot;/img/2019-02-16-ddd-europe/cyrille-martraire.jpg&quot; /&gt;&lt;/span&gt;
In this great talk Cyrille explains us why he thinks that the Domain-Driven mind set of most teams is &lt;em&gt;“too gentile”&lt;/em&gt; and we aim to &lt;em&gt;“raise the waterline”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With DDD we learned to immerse ourselves in the domain, use our domain-driven skills to understand the domain and conceptualise the domain into conceptual models. 
But we should go further by defining theories for our models and spot the First Principles that the theory consists of. 
Then we can challenge them, so that we can suggest changes to the business instead of reproducing the domain as it is. 
This way we get more involved and get to the next step, which is:  &lt;strong&gt;Innovation!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;He points out a number of common problems that many teams have and suggest how we can improve them:&lt;/p&gt;

&lt;h3 id=&quot;the-human-compiler-effect&quot;&gt;The Human Compiler effect&lt;/h3&gt;
&lt;p&gt;One thing we often see is that we are given requirements piece by piece: the first sprint we get one case, then the next sprint another case and so on.&lt;br /&gt;
But most of the time it turns out that all of these cases are actually special cases of some general case that we haven’t been told about.
The reason for this is what Cyrill calls the Human Compiler effect:  someone behaving like a compiler, by taking the general problem and splitting it up and dumbing it down in separate simple solutions for every single consequence, so that a developer can implement them.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;tech-depth&quot; src=&quot;/img/2019-02-16-ddd-europe/business_rules_for_dummies.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is obviously a bad approach, because by dumbing down the domain for the developers, we keep them “dumb” and unaware of how the domain actually works. This leads to a dumb - and often wrong - implementation of the domain.
We should instead first describe the problem to the entire team. Then the team should build a theory upon it and challenge it by asking critical questions (Why? Why? Why? …).&lt;br /&gt;
This leads to a better understanding of the domain and thus to building better solutions.&lt;/p&gt;

&lt;h3 id=&quot;technical-complexity&quot;&gt;Technical complexity&lt;/h3&gt;
&lt;p&gt;On the other hand, sometimes we are given an explanation about a problem and some developers turn it in something even more laborious.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;tech-depth&quot; src=&quot;/img/2019-02-16-ddd-europe/tech-depth.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This increases technical depth and make the code unmaintainable.&lt;/p&gt;

&lt;p&gt;The solution for this: refactoring and using Test-Driven Development.&lt;/p&gt;

&lt;h3 id=&quot;theory-vs-residual-mess&quot;&gt;Theory vs Residual Mess&lt;/h3&gt;
&lt;p&gt;When we start creating theories about the regular world of our domain, often someone from the teams asks: “But what about ALL the other business rules?”. 
We have an obsession for the “big bag of business rules”. As if every business is a bunch of data with a bunch of if-statements on top.
We should realize that there is always some order in this mess and that a lot of things are more regular that irregular. 
We have to find out these regularities, find out the theories behind them and then we can create our domain model.&lt;/p&gt;

&lt;p&gt;Of course any business also has irregularities that do not fit into our theories and we can not just ignore these. We call this the &lt;em&gt;Residual Mess&lt;/em&gt;.
However we should not allow this mess to affect our beautiful theories. Instead we should - as Eric Evans explained before - define a &lt;em&gt;Spill Zone&lt;/em&gt; in the application where we can put all the messy parts of the application.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Cyrill advices us to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raise the waterline&lt;/li&gt;
  &lt;li&gt;Expect untold regularities&lt;/li&gt;
  &lt;li&gt;Practice TDD&lt;/li&gt;
  &lt;li&gt;Practice DDD&lt;/li&gt;
  &lt;li&gt;Build theories, not just lists of business rules&lt;/li&gt;
  &lt;li&gt;Learn to think based on First Principles. Disrupt and become innovative!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collaborative-modelling-hands-on-session-by-marijn-huizendveld&quot;&gt;Collaborative Modelling hands-on session by &lt;a href=&quot;https://twitter.com/huizendveld&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Marijn Huizendveld&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Marijn Huizendveld&quot; src=&quot;/img/2019-02-16-ddd-europe/marijn-huizendveld.jpg&quot; /&gt;&lt;/span&gt;
We are divided in groups of five with one team leader.
The goal: to model an application for the maintenance team of a car rental company in Amsterdam.
The application must determine when a car is due and available for maintenance.&lt;/p&gt;

&lt;p&gt;New requirements are provided step by step on “requirement” cards, so that we have to adapt and reshape our model each time we discover a bit more about the domain. 
We learn the importance of visualising the solution (model) and talking about the problem based on what we have visualized in front of us. 
Putting notes on the board with the different concepts that we identify, sparks interesting discussions that make use think further about the problem:  Is the given name correct and clear?  Do we mean the same thing when we talk about …?  Do two words on the board actually mean the same thing?&lt;/p&gt;

&lt;p&gt;After each requirement card follows a card for the team leader to consider making changes to the way we work.
One card tells the leader to look for someone who has been a bit quiet or outside of the discussion and move the group around so that he is next to the board.
This immediately make this person more involved in the discussion and we also start paying attention to his view.&lt;br /&gt;
Another card suggests to let someone go through the entire process that is modelled on the board and explain it step by step.
We immediately find out that some definitions on the board are hard to explain and not as clear as we thought they were.&lt;/p&gt;

&lt;p&gt;With this excellent workshop Marijn shows us how easy it can be to come up with a great domain model that is understood and agreed upon by everyone involved.&lt;/p&gt;

&lt;h2 id=&quot;lost-in-transaction-strategies-to-manage-consistency-across-boundaries-by-bernd-ruecker&quot;&gt;Lost in transaction? Strategies to manage consistency across boundaries by &lt;a href=&quot;https://twitter.com/berndruecker&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bernd Ruecker&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bernd Ruecker&quot; src=&quot;/img/2019-02-16-ddd-europe/bernd-ruecker.jpg&quot; /&gt;&lt;/span&gt;
In this talk Bernd explains the challenges we face when using transactions in big applications and distributed systems.&lt;/p&gt;

&lt;p&gt;He starts by reminding us that our Aggregates in DDD are usually our transactional/consistency boundaries. 
Meaning that within an Aggregate, you have an ACID transaction.&lt;/p&gt;

&lt;p&gt;If you were to have a transaction over multiple Aggregates, you would have a stronger coupling between them.
For example you can’t split them easily into multiple separate microservices.&lt;/p&gt;

&lt;p&gt;What you could do is use two-phase commits to have you transaction over multiple Aggregates in separate services.
But the problem is that two-phase commits don’t scale.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Grown ups don’t use distributed transactions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An alternative solution is the alternative to ACID: BASE.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basically&lt;/li&gt;
  &lt;li&gt;Available&lt;/li&gt;
  &lt;li&gt;Soft-state&lt;/li&gt;
  &lt;li&gt;Eventual consistency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By applying Eventual Consistency you update one aggregate in one transaction and the other in a different transaction.
This means that the system will be in an inconsistent state for a short time, but eventually it will be consistent.&lt;/p&gt;

&lt;p&gt;After that, Bernd explains different strategies how to implement this eventual consistency with an example.&lt;/p&gt;

&lt;p&gt;Let’s say that we have an credit card payment aggregate that charges a credit card aggregate, and that this communication happens through an asynchronous message. 
This communication can go wrong in multiple ways: the message might never arrive at the credit card service, it might arrive but the payment service doesn’t receive the feedback, etc.&lt;/p&gt;

&lt;h3 id=&quot;strategy-1-cleanup&quot;&gt;Strategy 1: Cleanup&lt;/h3&gt;

&lt;p&gt;If the payment service can’t send the message, or if it doesn’t receive feedback that the message was received, it can send a payment failed event.
The problem with this strategy is that this ‘payment failed’ event also might not arrive at the credit card service. 
Which means that it won’t be able to do his cleanup.&lt;/p&gt;

&lt;h3 id=&quot;strategy-2-keep-state&quot;&gt;Strategy 2: Keep state&lt;/h3&gt;

&lt;h4 id=&quot;stateful-retry&quot;&gt;Stateful retry&lt;/h4&gt;

&lt;p&gt;By using a stateful retry the payment service would keep the state of whether or not the message was delivered to the credit card service.
As long as the credit card service does not acknowledge that it processed the message, the payment service will keep sending the message.&lt;/p&gt;

&lt;h4 id=&quot;stateful-retry-and-cleanup&quot;&gt;Stateful retry and cleanup&lt;/h4&gt;

&lt;p&gt;With this strategy the payment service keeps retrying to send the message until a timeout has passed or after X retries.
After that it will send a payment failed event for which the retry policy might also apply.&lt;/p&gt;

&lt;h3 id=&quot;strategy-3-compensationsagas&quot;&gt;Strategy 3: Compensation/Sagas&lt;/h3&gt;

&lt;h4 id=&quot;choreography&quot;&gt;Choreography&lt;/h4&gt;

&lt;p&gt;Compensation means that if something in the asynchronous process fails, a compensating process will be triggered.
A classic example is a system where you book a hotel in one service which will trigger a car booking.
If the car booking fails, it will emit an event that will be picked up by the hotel service which will cancel the hotel room related to the car booking.&lt;/p&gt;

&lt;p&gt;This system of services responding on events from each other is called orchestration. 
We don’t define in one place how the whole process works, but services know themselves on what to react on.&lt;/p&gt;

&lt;p&gt;However, this compensation saga implemented with choreography might become complex because it could be a trainwreck of cascading cancellations.
E.g. a hotel booking triggers a car booking, which triggers a flight booking.
If you have complex processes with a lot of services involved, this might become chaotic.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-02-16-ddd-europe/event-driven-choreography.jpg&quot; alt=&quot;event driven choreography&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;orchestration&quot;&gt;Orchestration&lt;/h4&gt;

&lt;p&gt;By using an orchestration approach there would be one service responsible for managing the whole process.
In the hotel/car/flight example a trip service could be this orchestrating service that calls the other services and tells them to book or cancel.&lt;/p&gt;

&lt;p&gt;Bernd then argues that if you choose an orchestration strategy that BPMN tools and libraries can help a lot in defining these processes.
You could for example define your business process and all compensating activities.&lt;/p&gt;

&lt;p&gt;Some libraries even provide quite nice DSLs where you can make your business process quite explicit.
And the good thing is that this business process or saga is even part of your domain logic.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/2019-02-16-ddd-europe/orchestration.jpg&quot; alt=&quot;orchestration&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;estimates-or-no-estimates-lets-explore-the-possibilities-by-woody-zuill&quot;&gt;Estimates or No Estimates, Let’s explore the possibilities by &lt;a href=&quot;https://twitter.com/WoodyZuill&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Woody Zuill&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Woody Zuill&quot; src=&quot;/img/2019-02-16-ddd-europe/woody-zuill.png&quot; /&gt;&lt;/span&gt;
Woody starts by pointing out that his workshop does not give answers, but does ask critical questions.
His goal is to share some experiences he had, and he realizes that what works in some companies, does not work in others.&lt;/p&gt;

&lt;p&gt;After this disclaimer he talks about a big project he worked on where they experienced sprint after sprint that their estimates were always plain wrong.
Every retrospective this frustration was mentioned and every time the solution management came up with was that they just had to get better at making estimations.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Trying the same thing over and over again expecting different results is the definition of insanity” - Einstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, Woody said, a constant in his 35 year career was that estimations were always off, and people were always trying to solve this by “getting better at estimates”.&lt;/p&gt;

&lt;p&gt;Wrong estimates are often not the problem itself, but a symptom of something else.
It could be that they are off because the requirements were unclear, or that requirements keep changing.&lt;/p&gt;

&lt;h3 id=&quot;noestimates&quot;&gt;#NoEstimates&lt;/h3&gt;

&lt;p&gt;#NoEstimates was originally used to refer to reference a blog post Woody had written on a project where they did not use or make estimates.
But actually ‘No estimates’ is a placeholder for a larger conversation.&lt;/p&gt;

&lt;p&gt;Woody mentions that for some things in life we want estimates, but we never do because we know it’s impossible.
E.g. how long will this clinical trial take?
How long till we find a cure for cancer?
How long till you finish this work of art?
In fact if we have enough data to definitively say how long something will take to develop, we already built it and we don’t need to do it again.&lt;/p&gt;

&lt;p&gt;Next he asked the audience to explain in a single word what an estimate means. 
Quite some different answers were given, but in general it came down to this list:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guess&lt;/li&gt;
  &lt;li&gt;Expectation&lt;/li&gt;
  &lt;li&gt;Lies&lt;/li&gt;
  &lt;li&gt;Misunderstanding&lt;/li&gt;
  &lt;li&gt;Approximation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From these answers the following working definition could be extracted:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An estimate is a guess of the amount of work time to create a project, a feature or some bit of work in developing software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-do-we-estimate&quot;&gt;Why do we estimate?&lt;/h3&gt;

&lt;p&gt;Some reasons why we make estimates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Planning / budget&lt;/li&gt;
  &lt;li&gt;Which approach do we choose / in what order do we do things&lt;/li&gt;
  &lt;li&gt;Dependencies on other teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In software development, estimates are often used to attempt to predict the future.
When will it be done?
How much will it cost?
What can we get done this sprint?
What can we get done for this amount of money?&lt;/p&gt;

&lt;p&gt;Basically we use estimates to help us make decisions.&lt;/p&gt;

&lt;p&gt;If we have to choose between making project A or project B, we would make an estimation of how long it would take to do either of them.
But do we really want to choose between project A or B based on a guess?
Wouldn’t it be better to do an MVP of both and see which is working best?&lt;/p&gt;

&lt;p&gt;Is on time or on budget a good measure of the results of our decision?
No, because you cut features, make it unmaintainable, etc.
Isn’t it better to measure customer satisfaction as a metric for success?&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;After this workshop the audience was left with even more questions.
But what we did realize is that often people make estimations without any good reason. 
And sometimes it would be better to reflect on why we do estimations, and see if it really provides us value, and if there is no alternative solution for the problem we’re actually trying to solve with estimations.&lt;/p&gt;

&lt;h2 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h2&gt;

&lt;p&gt;Domain-Driven Design Europe was a great conference where we got to learn more about software design and techniques that help us do what we love to do the most: creating great software for users.
The organizers did an excellent job in creating a conference with great speakers.
Next year’s conference will take place in Amsterdam on the 6th and 7th of February 2020.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Pieter&quot;, &quot;last_name&quot;=&gt;&quot;Van Hees&quot;, &quot;github&quot;=&gt;&quot;pvanhees&quot;, &quot;linkedin&quot;=&gt;&quot;pieter-van-hees-73671133&quot;, &quot;permalink&quot;=&gt;&quot;/author/pieter-van-hees/&quot;, &quot;avatar&quot;=&gt;&quot;pieter-van-hees.jpg&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;email&quot;=&gt;&quot;pieter.vanhees@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Pieter Van Hees is a Java Software Engineer at Ordina Belgium. He is passionate about Domain-Driven Design and producing clean software that works.&quot;}</name><email>pieter.vanhees@ordina.be</email></author><category term="Conference" /><category term="DDD" /><category term="Domain-Driven Design" /><category term="conference" /><summary type="html">This year, Pieter Van Hees and Kristof Eekhaut attended the Domain-Driven Design Europe conference in Amsterdam. The conference was all about Domain-Driven Design and related topics, with loads of interesting talks from beginners and experts in their field. In this post you can read about some of the talks and workshops we attended.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-02-16-ddd-europe/ddd-europe.jpg" /></entry><entry><title type="html">Vue with TypeScript</title><link href="https://ordina-jworks.github.io/vue/2019/03/04/vue-with-typescript.html" rel="alternate" type="text/html" title="Vue with TypeScript" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/vue/2019/03/04/vue-with-typescript</id><content type="html" xml:base="https://ordina-jworks.github.io/vue/2019/03/04/vue-with-typescript.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1-vue-with-typescript-an-introduction&quot;&gt;Vue with TypeScript, an introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-creating-a-vue-project-with-typescript&quot;&gt;Creating a Vue project with TypeScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-a-look-into-the-files-created-by-the-vue-cli&quot;&gt;A look into the files created by the Vue CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-how-to-write-your-first-component&quot;&gt;How to write your first component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-using-your-first-plugin&quot;&gt;Using your first plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-your-first-deployment&quot;&gt;Your first deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-resources-and-further-reading&quot;&gt;Resources and further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;1-vue-with-typescript-an-introduction&quot;&gt;1. Vue with TypeScript, an introduction&lt;/h1&gt;
&lt;p&gt;With the release of the Vue CLI 3 in August 2018, Vue now officially supports development in TypeScript.
In September 2018, Evan You even announced that &lt;a href=&quot;https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the next version of Vue will be rewritten in TypeScript&lt;/a&gt;.
This does not mean that you are forced to use TypeScript, it will still be an option.
TypeScript has numerous advantages such as static typing and transpiling of the latest ECMAScript features for full compatibility with older browsers.
Especially the static typing is a very interesting feature for projects in a professional environment as it helps define more strict interfaces.
With the use of types, you inherently provide documentation to other developers on how to use your code as it offers guidance on how to use your functions, components and so on.&lt;/p&gt;

&lt;p&gt;In this tutorial we will make a really simple blog system to showcase how you create a project, create a component, install a plugin and do calls via HTTP.
Our little project will be called &lt;code class=&quot;highlighter-rouge&quot;&gt;wordvue&lt;/code&gt;.
At the same time we will explain some tips and tricks and give some background information about Vue with TypeScript so that you fully understand what the purpose is of each line of code.
The project can be found in a &lt;a href=&quot;https://github.com/ordina-jworks/vue-typescript-wordvue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt; so you can see a working version.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-plus-typescript-small.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;2-creating-a-vue-project-with-typescript&quot;&gt;2. Creating a Vue project with TypeScript&lt;/h1&gt;

&lt;h2 id=&quot;using-the-vue-cli&quot;&gt;Using the Vue CLI&lt;/h2&gt;
&lt;p&gt;Thanks to the Vue CLI, it is the easiest way to create a new Vue project.
First make sure you have the latest version of the CLI installed with NPM:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we create our project:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vue create wordvue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The CLI knows some presets but we will go through the manual mode to be sure we select the TypeScript version.
At the time of writing the current default language for Vue is JavaScript.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-1-manually-select.png&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;babel--typescript&quot;&gt;Babel + TypeScript&lt;/h3&gt;
&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-2-selected-features.png&quot; class=&quot;image right fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We check the TypeScript option and for the purpose of this article we will not look in detail at the other features of this screen and fall back on the default values.
I also checked CSS Pre-processors just because I like SCSS.
Make sure you have Babel selected, Babel will automatically add multiple polyfills.
The polyfills will help with having backwards compatibility of ECMAScript features.&lt;/p&gt;

&lt;h3 id=&quot;using-the-class-style-component-syntax&quot;&gt;Using the class-style component syntax&lt;/h3&gt;
&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-3-class-style-component-syntax.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In the next screen we will get the question if we want class-style component syntax, for which we answer &lt;code class=&quot;highlighter-rouge&quot;&gt;Yes&lt;/code&gt;.
With this, we actually install the decorators that can be found in the &lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vue Class Component package&lt;/a&gt;.
We will now explain the difference between using the class-style component syntax and using the classic Vue syntax.&lt;/p&gt;

&lt;h4 id=&quot;the-classic-vue-syntax&quot;&gt;The classic Vue Syntax&lt;/h4&gt;
&lt;p&gt;If you do not use the class-style component syntax, your components will look exactly as if you have rendered them with Vue with JavaScript, but with the addition of types:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, you’ll still have the data function, the methods, computed properties and the render function that you can use in regular Vue.&lt;/p&gt;

&lt;h4 id=&quot;class-style-component-syntax&quot;&gt;Class-style component syntax&lt;/h4&gt;
&lt;p&gt;With the class-style component syntax, we would write the same component like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-class-component'&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you compare it to the previous version, the data property message is now a regular property in our component class. Methods are present as class methods. And the computed properties can be defined as a getter.&lt;/p&gt;

&lt;h3 id=&quot;the-other-settings&quot;&gt;The other settings&lt;/h3&gt;
&lt;p&gt;After you’ve replied &lt;code class=&quot;highlighter-rouge&quot;&gt;Yes&lt;/code&gt; to the “Use class-style component syntax?” question, you can continue with the default options.&lt;/p&gt;

&lt;p&gt;For the CSS pre-processor, you either choose between Stylus, Less and SCSS. We choose the default &lt;code class=&quot;highlighter-rouge&quot;&gt;Sass/SCSS (with node-sass)&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-4-css-preprocessor.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As for the linter, you can either choose between TSLint or ESLint with a bunch of configurations.
I opt for the default &lt;code class=&quot;highlighter-rouge&quot;&gt;TSLint&lt;/code&gt; option as the support for TypeScript in ESLint is (at the time of writing) fairly recent.
But ESLint is certainly a valid option as the TypeScript has announced in their &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/29288&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;January to June 2019 roadmap&lt;/a&gt; that ESLint will be their own focus.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-5-linter.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can choose for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lint on save&lt;/code&gt;option as we want to see immediately the effects of our linter.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-6-lint-on-save.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally we have to choose if we want the configurations in dedicated files or all bundled together in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.
We opt for &lt;code class=&quot;highlighter-rouge&quot;&gt;In dedicated config files&lt;/code&gt; as we prefer to not clutter the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; with a lot of configurations.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-7-dedicated-config.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The Vue CLI will now create the project with a Git repository, perform an NPM install and generate a README.&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-8-project-generated.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;launching-your-first-vue-project&quot;&gt;Launching your first Vue project&lt;/h2&gt;
&lt;p&gt;After the Vue CLI has created your Vue project, you can go with the terminal to the root folder of the project and launch it with:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-default-page.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As you will see, the CLI starts the development server, starts the type checking and linting service.
By default the project runs on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; but if there’s already something running on port 8080, it will pick port 8081 or the next one available.
This way you don’t need to specify a free port.&lt;/p&gt;

&lt;p&gt;A default Vue project looks like this:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-serve.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;3-a-look-into-the-files-created-by-the-vue-cli&quot;&gt;3. A look into the files created by the Vue CLI&lt;/h1&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-generated-files.png&quot; class=&quot;image right&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The files that the Vue CLI generated are mainly all the configuration files that we wanted separately.
So we have a configuration file for Babel with &lt;code class=&quot;highlighter-rouge&quot;&gt;babel.config.js&lt;/code&gt;, PostCSS (which contains the configuration for SCSS) with &lt;code class=&quot;highlighter-rouge&quot;&gt;postcss.config.js&lt;/code&gt;, TypeScript with &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; and TSLint with &lt;code class=&quot;highlighter-rouge&quot;&gt;tslint.json&lt;/code&gt;.
You will also find a &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder for all your NPM packages with a &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; in which we define all the NPM packages that we need in our project.
If we would have opted for the &lt;code class=&quot;highlighter-rouge&quot;&gt;In package.json&lt;/code&gt; option, we would have had a large &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The main folders in which you will work are &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;. We will look at these more in detail later so you fully understand what their purpose is.&lt;/p&gt;

&lt;h2 id=&quot;public&quot;&gt;Public&lt;/h2&gt;
&lt;p&gt;Public is meant for static assets like images, favicons and more.
It also contains your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; which is very basic:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width,initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%= BASE_URL %&amp;gt;favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;wordvue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;We're sorry but wordvue doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- built files will be auto injected --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is only in rare cases that you should adapt the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.
One example situation would be to add Google Analytics, add more &lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt; tags or adapt the &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; tag.
Vue will automatically inject the necessary generated JavaScript files right before the closing &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag.
This will include the transpiled version of your own code as well as vendor code.
The most important thing is the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; tag with id &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;.
This should always be present in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; as this is the tag on which Vue will bootstrap the entire application.&lt;/p&gt;

&lt;h2 id=&quot;src&quot;&gt;Src&lt;/h2&gt;

&lt;h3 id=&quot;maints&quot;&gt;main.ts&lt;/h3&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;productionTip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, you will find a &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; file.
This is the one that Vue will execute first.
As you can see this creates a new instance of Vue in which we only define a &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function.
Vue will pass along &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; which is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateElement&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; has been &lt;a href=&quot;https://github.com/vuejs/babel-plugin-transform-vue-jsx/issues/6&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;chosen by the creator of Vue&lt;/a&gt; as it is short for &lt;code class=&quot;highlighter-rouge&quot;&gt;Hyperscript&lt;/code&gt;, a term that is used in several virtual DOM implementations.
A hyperscript is a script that will generate HTML structures.
It takes one parameter: &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;.
Thus in a Vue project, &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; will generate the HTML for our App component.
App is our main component that was generated by the Vue CLI and we will dive into that after this section.
&lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; should only be adapted to plug in new core functionalities of your application.
For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; of one of my own projects is this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i18n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./i18n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./registerServiceWorker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./router'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./store'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;productionTip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// custom router configuration&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// custom store implementation&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// my translations&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I have added three core functionalities: a router, a store and an i18n library.
In each component that you make, these functionalities will be available.
The reason why these will be available is because the Vue type gets extended by each of these libraries.
For example in the typings of VueI18n (the i18n library that I use), we find:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue/types/vue'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IVueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;$t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;$tc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;$te&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;te&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that we will have a &lt;code class=&quot;highlighter-rouge&quot;&gt;$i18n&lt;/code&gt; property available and five different functions.
If you would use a different i18n library, you will have most of these things also readily available.
For example vue-i18next defines &lt;code class=&quot;highlighter-rouge&quot;&gt;$i18n&lt;/code&gt; as:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vue/types/vue&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueI18Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;$t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TranslationFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vue itself does not provide an i18n implementation nor a store nor a router nor does it even support HTTP calls by default.
Vue is designed to be as light as possible so that developers can keep a project as lightweight as possible.
Vue does officially support specific NPM packages for these core functionalities.
Other packages will follow the same naming conventions as the official supported libraries for convenience sake.
Like said before we will only focus on the basic Vue functionalities and HTTP calls.
The other topics will be for a future article.&lt;/p&gt;

&lt;h3 id=&quot;appvue&quot;&gt;App.vue&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt; file is our first component that Vue bootstraps through our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; file.
It is considered to be the root component.
The Vue CLI generates the App component with one child component.&lt;/p&gt;
&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vue logo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./assets/logo.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;HelloWorld&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;msg=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to Your Vue.js + TypeScript App&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/HelloWorld.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Avenir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#2c3e50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each page and part of a page that you will create, is a component that is a child of the root component.
Together, your whole application should have a component structure which should look like a tree:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App
	- HomePage
		- HelloWorld
	- NewsPage
		- NewsArticle
			- Reaction
	- ContactPage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each node of the tree is a component.
With the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component(...)&lt;/code&gt; decorator, we define which components can be child components of the component that we’re defining.
For example in our &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component, we want the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; component (through the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; tag), thus we add the components option with &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; in there.
These components are local components.
If you would want to write a component that is global, you have to register it like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my-component-name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... options ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A global component can be accessed anywhere.
Try to avoid this as much as possible as it fills up the global namespace.
An example of a use case that is justified would be an icon library like &lt;a href=&quot;https://github.com/FortAwesome/vue-fontawesome&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Font Awesome&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;faBars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;faCameraRetro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'font-awesome-icon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FontAwesomeIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this we can access the &lt;code class=&quot;highlighter-rouge&quot;&gt;font-awesome-icon&lt;/code&gt; tag from everywhere.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;font-awesome-icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arrow-down&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-how-to-write-your-first-component&quot;&gt;4. How to write your first component&lt;/h1&gt;
&lt;p&gt;We will keep the project as simple as possible for now.
Firstly I will explain the basics of a Vue Component so that you will fully understand what happens when we write our first real component.&lt;/p&gt;

&lt;h2 id=&quot;the-structure-of-a-vue-file&quot;&gt;The structure of a .vue file&lt;/h2&gt;
&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/HelloWorld.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The standard way to write a Vue component is by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file extension.
In a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file, we define three optional tags: &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;.
According to the Vue documentation, you should always &lt;a href=&quot;https://vuejs.org/v2/style-guide/#Single-file-component-top-level-element-order-recommended&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;order the tags consistently&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; being the last one.&lt;/p&gt;

&lt;h3 id=&quot;templatetemplate&quot;&gt;&amp;lt;template&amp;gt;…&amp;lt;/template&amp;gt;&lt;/h3&gt;
&lt;p&gt;This is the visual part of your component, in here you define the HTML that will be used to display your component.
Note that your custom HTML should always be surrounded by a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; tag.
The reason for this is that it allows Vue to encapsulate your custom CSS without unknowingly affecting the styling of your whole site.
You can use this to add a custom id or class to the tag to help you identify the component in for example your e2e tests.
Note that a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file can contain at most one &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3 id=&quot;script-langtsscript&quot;&gt;&amp;lt;script lang=”ts”&amp;gt;…&amp;lt;/script&amp;gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag, you can add your custom TypeScript code.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt; attribute is not required but if you do not add it, the default language will be JavaScript.
In order for TypeScript to be available, you need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;lang=&quot;ts&quot;&lt;/code&gt;.
All of our TypeScript code should be present in this &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag, even the import statements.
Note that a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file can contain at most one &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3 id=&quot;stylestyle&quot;&gt;&amp;lt;style&amp;gt;…&amp;lt;/style&amp;gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag we can define our own SCSS specific for this component.
By default, all the styles you define in a &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag are global.
By adding the scoped attribute to our &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag, our custom SCSS will be specific for that component.&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ChildComponent&amp;gt;&amp;lt;/ChildComponent&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;py&quot;&gt;text-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag with the scoped attribute will only affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; tag in our component and not the one in our child component.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;color: red&lt;/code&gt; styling however will affect also the styling of &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; tags in &lt;code class=&quot;highlighter-rouge&quot;&gt;ChildComponent&lt;/code&gt;.
So it is best to be aware of the implications as it can have unwanted side effects.
For a good way to structure your CSS, check out the &lt;a href=&quot;http://getbem.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BEM methodology&lt;/a&gt; as it will help with avoiding conflicts and will guide you in having clean CSS selectors.&lt;/p&gt;

&lt;p&gt;Be careful though as the scoped attribute leads to a certain performance hit.
Simply by adding the same class or id that we used in the template, we avoid this performance hit and still can have some scoped SCSS.
Note that this will also style the child components.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file can contain more than one &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;If you want to use global styles, you can either put them in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt; or create your own CSS file that you import either directly in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; or in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;should-you-put-everything-in-a-vue-file&quot;&gt;Should you put everything in a .vue file?&lt;/h3&gt;
&lt;p&gt;For small components, a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file will be very interesting as you have all the elements that make up your component into one specific file.
But what if you have for example lots of lines in the &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; tag?
Or what if you just want to split up the file?
One tactic you can use is the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; attribute on the &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; tags.&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./mycomponent.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./mycomponent.ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./mycomponent.scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Personally I avoid using the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; attribute as I like to force myself to keep my &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; files as small as possible.
There’s also no performance difference between putting the HTML/SCSS separately or in the same &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; file.
The Vue CLI will generate the same compiled code.&lt;/p&gt;

&lt;h2 id=&quot;how-to-organise-your-files&quot;&gt;How to organise your files&lt;/h2&gt;

&lt;h3 id=&quot;the-basic-structure&quot;&gt;The basic structure&lt;/h3&gt;
&lt;p&gt;The basic project structure in Vue is very simple:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/public
	/index.html
/src
	/assets
	/components
	App.vue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea behind this is that you add all your custom components into &lt;code class=&quot;highlighter-rouge&quot;&gt;/components&lt;/code&gt; and any assets that also need to be transpiled/compiled into &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets&lt;/code&gt;.
For example a global stylesheet or an icon library that you want to &lt;a href=&quot;https://webpack.js.org/guides/tree-shaking/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;treeshake&lt;/a&gt; fits perfectly into &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets&lt;/code&gt;.
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; folder we put all things static that don’t need to be parsed and treeshaked: the logo, the favicons, images, …&lt;/p&gt;

&lt;h3 id=&quot;a-more-advanced-structure&quot;&gt;A more advanced structure&lt;/h3&gt;
&lt;p&gt;The basic structure is enough for a simple single page application.
But once you start to have complex pages, things will quickly need to be changed to accommodate the amount of files that you will create.
In a more advanced project (like a personal project of mine), the structure could be like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/public
	/index.html
/src
	/assets
	/components
	/i18n
	/models
	/store
	/views
	App.vue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this project structure, both &lt;code class=&quot;highlighter-rouge&quot;&gt;/public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets&lt;/code&gt; provide the same purpose.
I use &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets&lt;/code&gt; for some local &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; files that contain some of my data that is needed in the application.
In &lt;code class=&quot;highlighter-rouge&quot;&gt;/components&lt;/code&gt; I keep all my generic components that can be used by pages and other components.
This is what you would put in a &lt;code class=&quot;highlighter-rouge&quot;&gt;SharedModule&lt;/code&gt; in Angular for example.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/i18n&lt;/code&gt; contains all my translations of my website as well as the initialisation of an i18n library.
Same goes for the &lt;code class=&quot;highlighter-rouge&quot;&gt;/store&lt;/code&gt; that contains my implementation of a store.
I had based myself on the &lt;a href=&quot;https://vuex.vuejs.org/guide/structure.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;structure proposed in the Vuex library&lt;/a&gt; where they group everything store related into &lt;code class=&quot;highlighter-rouge&quot;&gt;/store&lt;/code&gt; and applied the same principle for other libraries.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;
&lt;p&gt;Vue is designed to be as lightweight as possible and this can be seen in how the basic project is structured: no modules are present.
Vue does support modules but not in the way like we know them from other frameworks like Angular.
Vue modules are simply ES6 modules.&lt;/p&gt;

&lt;h2 id=&quot;blogpost-component&quot;&gt;BlogPost component&lt;/h2&gt;

&lt;h3 id=&quot;the-basic-file&quot;&gt;The basic file&lt;/h3&gt;
&lt;p&gt;Our first component we will write is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component in &lt;code class=&quot;highlighter-rouge&quot;&gt;components/BlogPost.vue&lt;/code&gt;.
In a first stage of our little project we will just hardcode a blogpost.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component is small:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Written by &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt; on &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.blogpost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see the template is rather small.
We’ve grouped all the elements in a div with class &lt;code class=&quot;highlighter-rouge&quot;&gt;blogpost&lt;/code&gt;.
Vue expects us to wrap the content in one tag and by convention, they advise to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag you’ll notice that we have created a small &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; interface to wrap our data.
On the component itself, we have a member that is decorated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Prop()&lt;/code&gt;.
With the decorator, we allow the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component with the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; that should have type &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;.
You’ll notice we’ve added a &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; behind &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; so we end up with &lt;code class=&quot;highlighter-rouge&quot;&gt;post!&lt;/code&gt;.
The exclamation mark is the &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#non-null-assertion-operator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;non-null assertion operator&lt;/a&gt; which tells the browser that &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; will eventually be filled in with a value and that it shall never be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;BlogPost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:post=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;blogPost&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; in our component.&lt;/p&gt;

&lt;p&gt;After that we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; member which is a computed property.&lt;/p&gt;

&lt;p&gt;Sadly there is no full type checking going on at the moment.
If we were to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component, we can always pass along another object into the &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; attribute.
We can pass along a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Props&lt;/code&gt; decorator but even that is not that stable.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We end the component with our styling in which we make use of SCSS to nest all our styling.&lt;/p&gt;

&lt;h2 id=&quot;using-the-blogpost-component&quot;&gt;Using the BlogPost component&lt;/h2&gt;
&lt;p&gt;So we have created the BlogPost component but how are we going to actually use it?
We adapt &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Elke's fantastic blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;BlogPost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost in blogPosts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:post=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost.title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/BlogPost.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My first blogpost ever!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lorem ipsum dolor sit amet.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Look I am blogging!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hurray for me, this is my second post!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Another one?!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Another one!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Avenir'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#2c3e50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see we define a property on the &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component that contains our blog posts, we add the &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; property to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt; decorator and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; tag in the template.
We simply loop over the blog posts with the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; directive.
We pass each blog post to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component by binding it to the correct data attribute.
This can be done through &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:post=&quot;blogPost&quot;&lt;/code&gt; but we use the shorthand method of &lt;code class=&quot;highlighter-rouge&quot;&gt;:post=&quot;blogPost&quot;&lt;/code&gt;.
Vue transforms &lt;code class=&quot;highlighter-rouge&quot;&gt;:post&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:post&lt;/code&gt; behind the screens.&lt;/p&gt;

&lt;p&gt;Note that we also pass &lt;code class=&quot;highlighter-rouge&quot;&gt;:key&lt;/code&gt; which we bind to the title of our blog post.
The reason for this is that it allows Vue to keep track of the state of the list by only looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;:key&lt;/code&gt; attribute instead of having to deep compare objects.
Try to have an unique key of type number or string that can be used for actions such as identifying, ordering and searching.
A blog post title is a good start but when ordering, updating or other modifying operations you might not have the wanted result if we have blog posts with the same title.
It’s best to use something of type &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; as the key.
Vue will tell you this in the console of your browser if you would take for example the &lt;code class=&quot;highlighter-rouge&quot;&gt;datePosted&lt;/code&gt; as your key:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-key-typing-error.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The reason behind this is that Vue relies on the built-in sort and find functionalities of JavaScript.
For objects, Vue can not do this natively.&lt;/p&gt;

&lt;p&gt;When we serve our app with&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We see in our browser:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-first-impression.png&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Great, you’ve written your first working component!
Now it is time to extend it with some functionalities.&lt;/p&gt;

&lt;h2 id=&quot;adding-conditional-elements-to-the-component&quot;&gt;Adding conditional elements to the component&lt;/h2&gt;
&lt;p&gt;An important part of a component is to have some dynamic behaviour.
For example what if we want to show a highlighted blog post? 
We could create a new component called &lt;code class=&quot;highlighter-rouge&quot;&gt;HighlightedBlogPost&lt;/code&gt; but we could also extend our existing component.&lt;/p&gt;

&lt;p&gt;We can add a new paragraph with a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post.highlighted&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;This post is highlighted!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; is a TypeScript statement that should return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.
We extend our &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; interface to accomodate this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we add &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighted: true,&lt;/code&gt; to the second blog post in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our browser it looks like this:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-conditional-elements.png&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We end up with this as our &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post.highlighted&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;This post is highlighted!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Written by &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt; on &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.blogpost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-conditional-css-to-our-component&quot;&gt;Adding conditional CSS to our component&lt;/h2&gt;
&lt;p&gt;We now know how to add a conditional element to our component, but we can also have conditional CSS.
We will use this conditional CSS so our highlighted blog post is also visually highlighted.&lt;/p&gt;

&lt;p&gt;We can add in our &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; with class &lt;code class=&quot;highlighter-rouge&quot;&gt;blogpost&lt;/code&gt; an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; directive:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ highlighted: post.highlighted }&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; we define to which attribute we want to bind after the colon.
So in our case, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:class&lt;/code&gt; results in a binding with the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; attribute in our HTML.
&lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:class&lt;/code&gt; accepts an object as parameter in which each key should be mapped to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;.
For each key that is mapped to a truthy value, that key is added as a class to the HTML tag on which the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; is located.
You will notice that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; to bind to the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; attribute but that this attribute already exists on our HTML element.
This is no problem as Vue will simply concatenate all the values.
In the case that &lt;code class=&quot;highlighter-rouge&quot;&gt;post.highlighted&lt;/code&gt; is truthy, we will thus end up with:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost highlighted&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And when it is falsy, we end up with:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We extend our &lt;code class=&quot;highlighter-rouge&quot;&gt;.blogpost&lt;/code&gt; to give the blog posts a width, center them and add a border with a background:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.blogpost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;&amp;amp;.highlighted&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f4d942&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff3b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our browser it looks like this:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-conditional-css.png&quot; class=&quot;image fit-contain&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Note that we also have a shorter version of &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:attributename&lt;/code&gt; which is &lt;code class=&quot;highlighter-rouge&quot;&gt;:attributename&lt;/code&gt;.
So we can shorten &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:class&lt;/code&gt; to this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ highlighted: post.highlighted }&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We end up with this as our &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPost&lt;/code&gt; component:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogpost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;{ highlighted: post.highlighted }&quot;&amp;gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post.highlighted&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;This post is highlighted!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Written by &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt; on &lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.blogpost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.highlighted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#f4d942&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff3b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-events-in-a-component&quot;&gt;Using events in a component&lt;/h2&gt;
&lt;p&gt;As a final extension to our blog, we also want to add some dynamic behaviour by reacting to events.
For our example, we will bind a button to the click event in our &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component with the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:click&lt;/code&gt; directive.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleHighlightedPostsVisibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Show/hide highlighted posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The syntax to bind to events is &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:eventname&lt;/code&gt;.
We can also use the shorthand version which is &lt;code class=&quot;highlighter-rouge&quot;&gt;@eventname&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleHighlightedPostsVisibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Show/hide highlighted posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we write the event handler along with some variables in our component.
The code block is followed by an explanation about what we have done exactly:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visibleBlogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toggleHighlightedPostsVisibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First what we did was add the &lt;code class=&quot;highlighter-rouge&quot;&gt;showHighlighted&lt;/code&gt; boolean.
This is to keep track whether we should show or hide the highlighted blog posts.&lt;/p&gt;

&lt;p&gt;We also wrote a getter to only show the blog posts that are allowed to be shown.
In our filter, we check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighted&lt;/code&gt; member is defined and if so, we check if it equals our &lt;code class=&quot;highlighter-rouge&quot;&gt;showHighlighted&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;The reason why we write this in a getter, is that we want to avoid putting business logic in our template.
Thus we opt for writing a getter which is the equivalent of a computed property in Vue JavaScript.&lt;/p&gt;

&lt;p&gt;After this we have to adapt the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; in our template so that we use the new getter:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;BlogPost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost in visibleBlogPosts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:post=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost.title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a small bonus, we will make the text in our button dynamic.
Currently we have &lt;code class=&quot;highlighter-rouge&quot;&gt;Show/hide highlighted posts&lt;/code&gt; as the text but it would be cleaner if we showed &lt;code class=&quot;highlighter-rouge&quot;&gt;Show highlighted posts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Hide highlighted posts&lt;/code&gt; depending on the state of the component.
We update the button to the following code:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleHighlightedPostsVisibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ showHighlighted ? 'Hide' : 'Show' }} highlighted posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the end, we end up visually with this:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-events-showhide.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And our &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component looks like this:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Elke's fantastic blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleHighlightedPostsVisibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hide'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt; highlighted posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;BlogPost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost in visibleBlogPosts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:post=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost.title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/BlogPost.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My first blogpost ever!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lorem ipsum dolor sit amet.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Look I am blogging!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hurray for me, this is my second post!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Another one?!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Another one!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Elke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visibleBlogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toggleHighlightedPostsVisibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Avenir'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#2c3e50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5-using-your-first-plugin&quot;&gt;5. Using your first plugin&lt;/h1&gt;
&lt;p&gt;Vue comes without any libraries, it is a super clean and lean framework where even functionality for HTTP calls is not present.
However, every component is a Vue object and can be extended with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; member that you can use in your code to perform HTTP calls.&lt;/p&gt;

&lt;p&gt;To provide this &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; member, we have to add the correct plugin to our code.
In the &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;awesome-vue project on GitHub&lt;/a&gt;, we can find an &lt;a href=&quot;https://github.com/vuejs/awesome-vue#http-requests&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;extensive list of HTTP plugins&lt;/a&gt;.
We will use &lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;axios&lt;/a&gt; as our HTTP library but we will use &lt;a href=&quot;https://github.com/imcvampire/vue-axios&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vue-axios&lt;/a&gt; for the bindings with Vue in TypeScript as axios does not provide the necessary typings for axios in Vue.&lt;/p&gt;

&lt;h2 id=&quot;installing-a-plugin&quot;&gt;Installing a plugin&lt;/h2&gt;
&lt;p&gt;We follow the installation instructions for vue-axios which are pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i axios vue-axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you noticed we also installed axios.
This is because vue-axios only focuses on the TypeScript bindings for Vue and does not include the actual axios library.
Vue-axios basically turns the axios library into a plugin compatible for Vue.
After that, we have to signal to Vue that we want to use this plugin.
We add a &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.use(plugin, options)&lt;/code&gt; statement in our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueAxios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;productionTip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VueAxios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important part is that we put the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.use(...)&lt;/code&gt; statement before we actually bootstrap the application with &lt;code class=&quot;highlighter-rouge&quot;&gt;new Vue(...)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-effect-of-adding-a-plugin&quot;&gt;The effect of adding a plugin&lt;/h2&gt;
&lt;p&gt;So we have added a plugin, but what does that actually mean?
What is the effect on our Vue code?
The main effect is that we now have &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; accessible in every Vue component.
This means that we can now have &lt;code class=&quot;highlighter-rouge&quot;&gt;this.$http&lt;/code&gt; in our classes in which a unique instance of the axios library for the whole application will be plugged.
When we check the &lt;a href=&quot;https://github.com/axios/axios/blob/master/index.d.ts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;typings&lt;/a&gt;  from axios, we find that we now have methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;get(...)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;post(...)&lt;/code&gt; and many more default REST methods available in our code through the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; member in which an instance of axios is present.&lt;/p&gt;

&lt;p&gt;Methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;get(...)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;post(...)&lt;/code&gt; will also exist on other HTTP libraries that we can add to Vue.
It is not obliged by Vue to provide these same functionalities in another HTTP library.
But it makes sense for library creators to comply to the standard set by the HTTP library of preference as chosen by Vue, in this case axios.
Otherwise it would not be easy to change certain libraries for another one.&lt;/p&gt;

&lt;h2 id=&quot;using-the-axios-plugin-for-performing-http-calls&quot;&gt;Using the axios plugin for performing HTTP calls&lt;/h2&gt;
&lt;p&gt;A Vue component has &lt;a href=&quot;https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;multiple lifecycle hooks&lt;/a&gt; with the most interesting ones for what we want to do: &lt;code class=&quot;highlighter-rouge&quot;&gt;created()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted()&lt;/code&gt;.
Created is called by Vue when the object is created: reactive data is set up, event callbacks are ready and the object is not yet mounted on the DOM.
The Vue object will thus be ready to go but it will not yet be visible to the user.
The mounted hook is used for when the element is mounted into the HTML DOM, which means the rendering is performed by the browser.&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The app is created!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The app is mounted!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two reasons why we want to start our HTTP calls in the &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt; method.
The first reason is that we can limit the amount of time the user has to wait for data to be loaded and shown on the screen.
The second one is that the mounted hook is not called when we would use serverside rendering.
To ensure that our code is compatible with all use cases, we place the HTTP calls in the created method of our &lt;code class=&quot;highlighter-rouge&quot;&gt;App.vue&lt;/code&gt; which results in this component:&lt;/p&gt;

&lt;div class=&quot;language-vue highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Elke's fantastic blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggleHighlightedPostsVisibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hide'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt; highlighted posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;BlogPost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost in visibleBlogPosts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:post=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogPost.title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue-property-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/BlogPost.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AxiosResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visibleBlogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toggleHighlightedPostsVisibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showHighlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:3000/blogposts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AxiosResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blogPosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;datePosted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Avenir'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#2c3e50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see we have added a &lt;code class=&quot;highlighter-rouge&quot;&gt;private created&lt;/code&gt; method since this should not be publicly available to other components.
We call an API and map the response into our &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; array.
Now we need to set up our API.&lt;/p&gt;

&lt;h2 id=&quot;how-we-have-set-up-a-local-api&quot;&gt;How we have set up a local API&lt;/h2&gt;
&lt;p&gt;To simulate a real API call, we set up &lt;a href=&quot;https://github.com/typicode/json-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;json-server&lt;/a&gt;, a small tool that launches a web server with a REST API that serves a JSON file which we call &lt;code class=&quot;highlighter-rouge&quot;&gt;db.json&lt;/code&gt; present in our assets folder:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blogposts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My first blogpost ever!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Lorem ipsum dolor sit amet.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Elke&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datePosted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-01-18&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Look I am blogging!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hurray for me, this is my second post!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Elke&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datePosted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-01-19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;highlighted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Another one?!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Another one!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Elke&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datePosted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-01-20&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We install json-server with NPM and then we launch it with:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i json-server
$ json-server src/assets/db.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, json-server will launch on port 3000.
When we launch wordvue and open it in the browser, we will see that the blog posts are now coming from our local API.
Now you know how to install a plugin and retrieve data with axios over HTTP.&lt;/p&gt;

&lt;h1 id=&quot;6-your-first-deployment&quot;&gt;6. Your first deployment&lt;/h1&gt;

&lt;h2 id=&quot;development-mode-versus-production-mode&quot;&gt;Development mode versus production mode&lt;/h2&gt;
&lt;p&gt;Just like other frontend frameworks, Vue has its development mode and production mode. The development mode is available with:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While production mode is available with:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now what is the difference between both modes?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Development mode&lt;/th&gt;
      &lt;th&gt;Production mode&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CSS &amp;amp; HTML bundled into JS&lt;/td&gt;
      &lt;td&gt;CSS separately, HTML bundled into JS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Warnings in console&lt;/td&gt;
      &lt;td&gt;No warnings in console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Additional checks to identify warnings&lt;/td&gt;
      &lt;td&gt;No additional checks, ignores any situation that would trigger warnings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Everything in one &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Separate &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor.js&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Heavy use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; for hot reload&lt;/td&gt;
      &lt;td&gt;No use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;, no hot reloading necessary&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Basic bundling of all code, use of minified libraries only when available&lt;/td&gt;
      &lt;td&gt;Bundling &amp;amp; maximum minification&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;No minification of &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Minification of &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor.js&lt;/code&gt;: Contains all the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; code that your project uses&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;: JavaScript function that executes strings as if it’s a line of code and should &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Do_not_ever_use_eval!&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;never be used in production&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the minification, avoiding the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;, removing of warning checks and so on results in a much smaller size of the code.&lt;/p&gt;

&lt;p&gt;If we do a &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run serve&lt;/code&gt; and check our Developer Tools in Chrome, we see the size of our application:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-size-serve.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In development mode, our application is more than 2MB large. We see the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; alongside a generated &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; that contains all our own code and all the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; that we are using.
While when we build with the production mode via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;, we get an application that is in total less than 125KB:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/wordvue-size-build.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The only thing we changed to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder that is so small, was adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;vue.config.js&lt;/code&gt; file in the root of our folder which exports an object with the settings we want:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;productionSourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We only had to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;productionSourceMap&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to disable the creation of source maps.&lt;/p&gt;

&lt;p&gt;More configurations can be found at &lt;a href=&quot;https://cli.vuejs.org/config/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;cli.vuejs.org&lt;/a&gt; but most of the configuration is already done for a maximum optimised production build.&lt;/p&gt;

&lt;h2 id=&quot;building-for-production&quot;&gt;Building for production&lt;/h2&gt;
&lt;p&gt;When running the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; command, you’ll get the following output:&lt;/p&gt;

&lt;p class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/img/vue-with-typescript/vue-cli-build.png&quot; class=&quot;image fit&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So what the Vue CLI does is take all the SCSS out of the components and minifies it, compiles all the components into an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file and &lt;a href=&quot;https://webpack.js.org/guides/tree-shaking/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;treeshakes&lt;/a&gt;  all used libraries into a &lt;code class=&quot;highlighter-rouge&quot;&gt;chunk-vendors.js&lt;/code&gt; file.
After that, it Gzips all those files to ensure that everything is as light as possible.
If you have any assets, it will also clone those into the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The result is a dist folder which contents you can directly deploy onto your favourite server.&lt;/p&gt;

&lt;h1 id=&quot;7-conclusion&quot;&gt;7. Conclusion&lt;/h1&gt;
&lt;p&gt;Congratulations, you have built your very first Vue application with TypeScript!
The end result can be found in my &lt;a href=&quot;https://github.com/ordina-jworks/vue-typescript-wordvue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt;  so you can see the working version.
You now know how to write a basic component with the use of decorators, create a component structure and fill it with data coming from an API.
After that you can also deploy it onto a server.
A next step would be to add routing, add a store or an i18n library.
Vue is a lightweight framework that primarily focuses on visualisation.
If you want to add more functionality, you will have to rely on plugins who either support Vue integration directly or you can use a plugin like vue-axios that will facilitate the integration of another library like axios.&lt;/p&gt;

&lt;h1 id=&quot;8-resources-and-further-reading&quot;&gt;8. Resources and further reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Vue CLI: &lt;a href=&quot;https://cli.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;cli.vuejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Awesome-vue, overview of Vue plugins: &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/vuejs/awesome-vue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Axios, HTTP library: &lt;a href=&quot;https://github.com/axios/axios-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/axios/axios&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vue-axios, typings for using Axios in Vue: &lt;a href=&quot;https://github.com/imcvampire/vue-axios&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/imcvampire/vue-axios&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vue styleguide: &lt;a href=&quot;https://vuejs.org/v2/style-guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vuejs.org/v2/style-guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vue-class-component: &lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/vuejs/vue-class-component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JSON server: &lt;a href=&quot;https://github.com/typicode/json-server&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/typicode/json-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wordvue repository: &lt;a href=&quot;https://github.com/ordina-jworks/vue-typescript-wordvue&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github.com/ordina-jworks/vue-typescript-wordvue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Elke&quot;, &quot;last_name&quot;=&gt;&quot;Heymans&quot;, &quot;github&quot;=&gt;&quot;ElkeBxl&quot;, &quot;linkedin&quot;=&gt;&quot;elkeheymans&quot;, &quot;permalink&quot;=&gt;&quot;/author/elke-heymans/&quot;, &quot;avatar&quot;=&gt;&quot;elke-heymans.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;elke.heymans@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Elke is a Frontend Developer with a focus on Angular, Vue and is very interested in other frontend technologies. In her spare time you can find her taking photographs at events, training for half marathons or enjoying music by collecting records and attending concerts.&quot;}</name><email>elke.heymans@ordina.be</email></author><category term="Vue" /><category term="Vue" /><category term="TypeScript" /><category term="JavaScript" /><category term="VueJS" /><category term="VueCLI" /><summary type="html">Table of contents Vue with TypeScript, an introduction Creating a Vue project with TypeScript A look into the files created by the Vue CLI How to write your first component Using your first plugin Your first deployment Conclusion Resources and further reading</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/vue-with-typescript/vue-plus-typescript.png" /></entry><entry><title type="html">Observables: The right way</title><link href="https://ordina-jworks.github.io/frontend/2019/02/21/observables.html" rel="alternate" type="text/html" title="Observables: The right way" /><published>2019-02-21T00:00:00+00:00</published><updated>2019-02-21T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/frontend/2019/02/21/observables</id><content type="html" xml:base="https://ordina-jworks.github.io/frontend/2019/02/21/observables.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#refactoring&quot;&gt;Refactoring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;During my consultancy projects, I often come across the same implementations and problems when colleagues are trying to implement an observable strategy.
A lot of frameworks are offering observables out of the box for their communication layer.
Almost all &lt;code class=&quot;highlighter-rouge&quot;&gt;Promises&lt;/code&gt; are replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Observables&lt;/code&gt; nowadays.
Angular 2+ &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpModule&lt;/code&gt; for example, is using the &lt;code class=&quot;highlighter-rouge&quot;&gt;rxjs&lt;/code&gt; library.
Each &lt;code class=&quot;highlighter-rouge&quot;&gt;http.get()&lt;/code&gt; is returning an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;HttpResponse&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The setup is almost always the same.
A (visual) component needs to render some data.
So next to the component (HTML/template for view, and a JavaScript(TypeScript) component as the controller), a service gets created.
This service’s purpose is to provide data to the component’s controller by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;’s functions (POST, GET, DELETE, PATCH, …) and returning the &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; to the component.
Sometimes they are remapping the &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;HttpReponse&amp;gt;&lt;/code&gt;to a more defined type, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;MyData&amp;gt;&lt;/code&gt;, by using one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;rxjs&lt;/code&gt; operators such as &lt;code class=&quot;highlighter-rouge&quot;&gt;flatmap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, … .
All of this works pretty well, as long as only one component is in need of the data and its changes.
With changes, I refer to refreshing the data, or requerying it with another filter, paging, or …&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/observables-the-right-way/first-step.png&quot; width=&quot;75%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Every time the query parameters change, the component is just executing the same call in the service, which in turn is calling the right &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;-function.
Again an (new) &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; is returned.
Again the result can get remapped before throttling it back.
The subscriber, the component controller in this case (or the HTML if you are using Angular’s async pipe), receives the remapped data.&lt;/p&gt;

&lt;p&gt;What happens when we have another component that is in need of this data (or maybe just a part of it)?
Let’s say we have a header and a datatable.
And we are NOT using push events, but simple REST calls (for the sake of this explanation).
The datatable is the component we were talking about earlier.
It needs to display messages in a simple datatable.
The header is the second component that needs this data.
It needs to display the number of unread or critical messages.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;datatable.component.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;header.component.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data.service.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'urlToData'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseFilterToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x-count'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the setup we have so far, both components will use the same service for requesting the data.
They will both subscribe to an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;, however, it will be a different one.
When you refresh the data in the datatable, the header will not receive a new value in its subscription and therefore will still show the old number of messages.&lt;/p&gt;

&lt;p&gt;In some use cases this might be the desired outcome, but in most cases you want more components to be able to subscribe to the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;

&lt;p&gt;In our new setup, we want both, header and datatable, to subscribe to the same Observable, so a call for new data will result in an update in the datatable and the header.
To make this happen, we will use some kind of layer in between them.
This new layer will provide our components with one and only one and the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; and will mask the communication layer from the view’s controller.
Both components will subscribe to this service, so they both get updated with the same result.
We can do this by creating a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt; in our service and returning it as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; to our components.
We can then implement other calls for this service that will trigger an update of the data, and send it through the subject to both components.
Because we are not providing a filter when we call the getter for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;) we should also find a way of providing the filter to the service, before requerying the data.
This means we are going to use one shared filter, for both components, which makes sense in this case, but not in all use cases.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/observables-the-right-way/second-step.png&quot; width=&quot;75%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h1&gt;

&lt;p&gt;We actually don’t need to refactor any of our components.
They will still subscribe to an &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; of the service, and react on the incoming data.
The service however will get refactored.
Start by defining the &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt; as a local property, and because we are going to implement a getter, we can make it private.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data.service.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_data$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BehaviorSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_data$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'urlToData'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseFilterToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x-count'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_data$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, every component or service that is subscribing on this subject, is getting data when some other component or service triggers the &lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt;.
There are even a lot more options to this setup:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clearing data&lt;/li&gt;
  &lt;li&gt;Resetting to default filter&lt;/li&gt;
  &lt;li&gt;Refreshing the current filter&lt;/li&gt;
  &lt;li&gt;Caching data&lt;/li&gt;
  &lt;li&gt;Manipulating data through other services or components&lt;/li&gt;
  &lt;li&gt;Adding an event consumer that also updates the datatable&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;I’ve build a simple example to demonstrate this behaviour.
A header that is displaying an alert icon when there are unread, critical messages.
A sidebar that is displaying the amount of unread messages next to its navigation link, and an overview of the messages, with a basic paging implementation.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/observables-the-right-way/example.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A simple backend that is written in Node.js with Express provides a few endpoints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api/message&lt;/code&gt; (with paging and filter, although the filter isn’t implemented in the frontend example.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api/message/:id&lt;/code&gt; (not used in the example)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api/stream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api/refresh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service is not reloading data as long as the &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; hasn’t changed.
While the service is still loading the data, a new reload will not fetch again the data.
You can find the code on &lt;a target=&quot;_blank&quot; href=&quot;https://gitlab.com/VeeTeeDev/observables-demo&quot;&gt;GitLab&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/observables-the-right-way/example-setup.png&quot; width=&quot;75%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Server-Sent Events are added to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; status of a message when the envelope gets clicked.
This will also trigger the observable.&lt;/p&gt;

&lt;p&gt;To run front- and backend together, execute the following command in the root of the project:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm run start&lt;/code&gt;
This way, a proxy is added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt; command to overcome &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; blocking going from localhost:4200 to localhost:3000&lt;/p&gt;

&lt;p&gt;Don’t mind the backend server, it’s a quick and dirty solution and is not implemented as it should.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Although observables are a great feature, and are easy to use, it’s always better to have your own layer of control.
Especially when it comes to using observables from frameworks.
I can accept, for simple applications, that you don’t want to ‘over-architect’.
But in most cases, you want to control the distribution yourself.
For those of you that know &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt; (RxJS), you can compare this implementation with effects and &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;-subscriptions.
If you trigger an effect, you will only see the result when you have subscribed to the ‘key’ that is responsible for providing you with the data,
and not to the ‘key’ that is responsible for triggering the effect.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at JWorks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Frontend" /><category term="Angular" /><category term="rxjs" /><category term="Observables" /><category term="Nodejs" /><summary type="html">Table of contents Intro Setup Refactoring Example Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/observables-the-right-way/cover.png" /></entry><entry><title type="html">Infrastructure as code: Terraform and AWS Serverless</title><link href="https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html" rel="alternate" type="text/html" title="Infrastructure as code: Terraform and AWS Serverless" /><published>2019-01-14T00:00:00+00:00</published><updated>2019-01-14T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless</id><content type="html" xml:base="https://ordina-jworks.github.io/cloud/2019/01/14/Infrastructure-as-code-with-terraform-and-aws-serverless.html">&lt;h1 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction-and-demo&quot;&gt;Introduction and demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-the-application&quot;&gt;Creating the application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#terraform-the-basics&quot;&gt;Terraform: the basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#database-dynamodb&quot;&gt;Database: DynamoDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iam&quot;&gt;IAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-functions&quot;&gt;Lambda Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-gateway&quot;&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#endgame&quot;&gt;Endgame&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources-and-further-reading&quot;&gt;Resources and further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/h1&gt;
&lt;p&gt;Infrastructure as Code (IaC) is a way of managing your devices and servers through machine-readable definition files. 
Basically, you write down how you want your infrastructure to look like and what code should be run on that infrastructure. 
Then, with the push of a button you say “Deploy my infrastructure”. 
BAM, there is your application, running on a server, against a database, available through an API, ready to be used!
And you just defined all of that infrastructure using IaC.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IaC is a key practice of DEVOPS teams and integrates as part of the CI/CD pipeline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A great Infrastructure as Code tool is Terraform by HashiCorp.
(&lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.terraform.io/&lt;/a&gt;)&lt;br /&gt;
Personally I use it to provide and maintain infrastructure on AWS.
And I’ve had a great experience doing that.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/overview.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;introduction-and-demo&quot;&gt;Introduction and demo&lt;/h1&gt;
&lt;p&gt;I will demonstrate IaC by working out an example. 
We are going to set up an application on AWS.
I provisioned the code on GitLab: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;.
A user can enter a coding tip and see all the coding tips that other users have entered.
The tips are stored in a NoSQL database which is AWS DynamoDB.
Storing and retrieving these tips is done by the Lambda Functions which fetch or put the tips from and to the database.
For the application to be useful, users have to be able to call these Lambda Functions.
So we expose the Lambda Functions through AWS API Gateway. 
Here is an architectural overview of the application:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/AWS-Serverless-Architecture.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;You could couple these functions to a web page where users can enter tips and see all tips that have been given.
Below you see the final result:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/demo.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h1 id=&quot;creating-the-application&quot;&gt;Creating the application&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-terraform.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I will now go over the steps to set up the application you see in the demo above.
IaC is the main focus.
I will show the code and AWS CLI commands that are necessary but I will not explain them in detail since that is not the purpose of this blog.
I’ll focus on the Terraform definitions instead.
You are welcome to follow along by cloning the repository that I linked to in this blog post.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Install Terraform&lt;/li&gt;
  &lt;li&gt;Install AWS CLI&lt;/li&gt;
  &lt;li&gt;Checkout the repository on GitLab: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Be ready to get your mind blown by IaC&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;terraform-the-basics&quot;&gt;Terraform: the basics&lt;/h1&gt;
&lt;p&gt;The main things you’ll be configuring with Terraform are resources.
Resources are the components of your application infrastructure.
E.g: a Lambda Function, an API Gateway Deployment, a DynamoDB database, …
A resource is defined by using the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt; followed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;.
The name can be arbitrarily chosen.
The type is fixed.
For example:
&lt;code class=&quot;highlighter-rouge&quot;&gt;resource &quot;aws_dynamodb_table&quot; &quot;codingtips-dynamodb-table&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To follow along with this blog post you have to know two basic Terraform commands.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;terraform apply&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Terraform apply will start provisioning all the infrastructure you defined.
Your databases will be created.
Your Lambda Functions will be set up.
The API Gateway will be set in place.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;terraform destroy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Terraform destroy will remove all the infrastructure that you have set up in the cloud.
If you are using Terraform correctly you should not have to use this command.
However should you want to start over, you can remove all the existing infrastructure with this command.
No worries, you will still have all the infrastructure neatly described on your machine because you are using Infrastructure as Code.&lt;/p&gt;

&lt;p&gt;We’ll put all infrastructure that is defined using Terraform in the same folder.
The files need to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tf&lt;/code&gt; extension.&lt;/p&gt;

&lt;h1 id=&quot;general&quot;&gt;General&lt;/h1&gt;
&lt;p&gt;Let’s start out by creating a file &lt;code class=&quot;highlighter-rouge&quot;&gt;general.tf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;provider &quot;aws&quot; {
  region = &quot;eu-west-1&quot;
}

# variables
variable &quot;lambda_version&quot;     { default = &quot;1.0.0&quot;}
variable &quot;s3_bucket&quot;          { default = &quot;codingtips-node-bucket&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;provider&lt;/code&gt; block specifies that we are deploying on AWS.
You also have the possibility to mention credentials that will be used for deploying here.
If you have correctly set up the AWS CLI on your machine there will be default credentials in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws&lt;/code&gt; folder.
If no credentials are specified, Terraform will use these default credentials.&lt;/p&gt;

&lt;p&gt;Variables have a name which we can reference from anywhere in our Terraform configuration. 
For example we could reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;s3_bucket&lt;/code&gt; variable with &lt;code class=&quot;highlighter-rouge&quot;&gt;${var.s3_bucket)&lt;/code&gt;.
This is handy when you are using the same variable in multiple places.
I will not use too many variables throughout this blog post since that will add more references to your Terraform configuration and I want it to be as clear as possible.&lt;/p&gt;

&lt;h1 id=&quot;database-dynamodb&quot;&gt;Database: DynamoDB&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-DynamoDB.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start with the basis.
Where will all our coding tips be stored? 
That’s right, in the database.
This database is part of our infrastructure and will be defined in a file I named &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamo.tf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_dynamodb_table&quot; &quot;codingtips-dynamodb-table&quot; {
  name = &quot;CodingTips&quot;
  read_capacity = 5
  write_capacity = 5
  hash_key = &quot;Author&quot;
  range_key = &quot;Date&quot;

  attribute = [
    {
      name = &quot;Author&quot;
      type = &quot;S&quot;
    },
    {
      name = &quot;Date&quot;
      type = &quot;N&quot;
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Dynamo is a NoSQL database, we don’t have to specify all attributes upfront.
The only thing we have to provide are the elements that AWS will use to build the partition key with.
When you provide a hash key as well as a sort key, AWS will combine these to make a unique partition key.
Mind the word UNIQUE.
Make sure this combination is unique.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DynamoDB uses the partition key value as input to an internal hash function. 
The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored. 
All items with the same partition key value are stored together, in sorted order by sort key value.
– from AWS docs: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html&quot;&gt;DynamoDB Core Components&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the attribute definitions in &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamo.tf&lt;/code&gt; it is clear that &lt;code class=&quot;highlighter-rouge&quot;&gt;Author&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;) is a string and &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;) should be a number.&lt;/p&gt;

&lt;h1 id=&quot;iam&quot;&gt;IAM&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-IAM.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Before specifying the Lambda Functions we have to create permissions for our functions to use.
This makes sure that our functions have permissions to access other resources (like DynamoDB).
Without going too deep into it, the AWS permission model works as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide a resource with a role&lt;/li&gt;
  &lt;li&gt;Add permissions to this role&lt;/li&gt;
  &lt;li&gt;These allow the role to access other resources:
    &lt;ul&gt;
      &lt;li&gt;permissions for triggering another resource (eg. Lambda Function forwards logs to CloudWatch)&lt;/li&gt;
      &lt;li&gt;permissions for being triggered by another resource (eg. Lambda Function may be triggered by API Gateway)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;# ROLES
# IAM role which dictates what other AWS services the Lambda function
# may access.
resource &quot;aws_iam_role&quot; &quot;lambda-iam-role&quot; {
  name = &quot;codingtips_lambda_role&quot;

  assume_role_policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Action&quot;: &quot;sts:AssumeRole&quot;,
      &quot;Principal&quot;: {
        &quot;Service&quot;: &quot;lambda.amazonaws.com&quot;
      },
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Sid&quot;: &quot;&quot;
    }
  ]
}
EOF
}

# POLICIES
resource &quot;aws_iam_role_policy&quot; &quot;dynamodb-lambda-policy&quot;{
  name = &quot;dynamodb_lambda_policy&quot;
  role = &quot;${aws_iam_role.lambda-iam-role.id}&quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;dynamodb:*&quot;
      ],
      &quot;Resource&quot;: &quot;${aws_dynamodb_table.codingtips-dynamodb-table.arn}&quot;
    }
  ]
}
EOF
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, the first resource that is defined is an &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt;.
This is the role that we will later give to our Lambda Functions.&lt;/p&gt;

&lt;p&gt;We then create the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; resource which we link to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt;.
The first &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; is giving this role permission to invoke any action on the specified DynamoDB resource.
The second &lt;code class=&quot;highlighter-rouge&quot;&gt;role_policy&lt;/code&gt; allows a resource with this role to send logs to CloudWatch.&lt;/p&gt;

&lt;p&gt;A couple of things to notice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; are connected by the &lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; argument of the &lt;code class=&quot;highlighter-rouge&quot;&gt;role_policy&lt;/code&gt; resource&lt;/li&gt;
  &lt;li&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;statement&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt; we grant (&lt;code class=&quot;highlighter-rouge&quot;&gt;Effect&lt;/code&gt; attr.) permission to do some actions (&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; attr.) on a certain resource (&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; attr.)&lt;/li&gt;
  &lt;li&gt;A resource is referenced by its &lt;em&gt;ARN&lt;/em&gt; or &lt;em&gt;Amazon Resource Name&lt;/em&gt; which uniquely identifies this resource on AWS&lt;/li&gt;
  &lt;li&gt;There are two ways to specify an &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;using the &lt;em&gt;until EOF&lt;/em&gt; syntax (like I did here)&lt;/li&gt;
      &lt;li&gt;using a separate Terraform &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_policy_document&lt;/code&gt; element that is coupled to the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_role_policy&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamodb-lambda-policy&lt;/code&gt; allows all actions on the specified DynamoDB resource because under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; attribute it states &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamodb:*&lt;/code&gt;
You could make this more restricted and mention actions like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dynamodb:Scan&quot;, &quot;dynamodb:BatchWriteItem&quot;,&quot;dynamodb:PutItem&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lambda-functions&quot;&gt;Lambda Functions&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-Lambda.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There are two Lambda Functions that are part of this application.
The first Lambda is used to get or retrieve the coding tips from the database further referenced as the &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda&lt;/code&gt;.
The second Lambda is used to post or send the coding tips to the database further referenced as the &lt;code class=&quot;highlighter-rouge&quot;&gt;postlambda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am not going to copy paste the code of the Lambda Functions in here.
You can check it out in the repository linked to this blog 
(GitLab repository: &lt;a href=&quot;https://gitlab.com/nxtra/codingtips-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://gitlab.com/nxtra/codingtips-blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here I will demonstrate the example of the &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda&lt;/code&gt; function.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;postLambda&lt;/code&gt; is deployed in the same way and you can find the Terraform definitions in the Git repository.
A Lambda Function is a little different from the other infrastructure we defined here.
Not only do we need a Lambda Function as infrastructure.
We also need to specify the code that runs in this Lambda Function.
But where will AWS find that specific code when deploying the Lambda Function?
They don’t have access to your local machine, have they?
That is why you first need to ship your code to a S3 Bucket on AWS where it can be found when your Function is being deployed.&lt;/p&gt;

&lt;p&gt;That also means creating an S3 Bucket, which you can do with this command when you want it in region &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-west-1&lt;/code&gt; (Ireland):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws s3api create-bucket &lt;span class=&quot;nt&quot;&gt;--bucket&lt;/span&gt; codingtips-node-bucket &lt;span class=&quot;nt&quot;&gt;--region&lt;/span&gt; eu-west-1 &lt;span class=&quot;nt&quot;&gt;--create-bucket-configuration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LocationConstraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eu-west-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you have to zip the code of your Lambda Functions:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; getLambda.zip index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And upload that file to s3:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws s3 &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;getLambda.zip s3://codingtips-node-bucket/v1.0.0/getLambda.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mind that I am sending it to a bucket named &lt;code class=&quot;highlighter-rouge&quot;&gt;codingtips-node-bucket&lt;/code&gt; in a folder &lt;code class=&quot;highlighter-rouge&quot;&gt;v1.0.0&lt;/code&gt; with filename &lt;code class=&quot;highlighter-rouge&quot;&gt;getLambda.zip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, the code is where it needs to be.
Now let’s see how we specify these functions using Terraform.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_lambda_function&quot; &quot;get-tips-lambda&quot; {
  function_name = &quot;codingTips-get&quot;

  # The bucket name as created earlier with &quot;aws s3api create-bucket&quot;
  s3_bucket = &quot;${var.s3_bucket}&quot;
  s3_key = &quot;v${var.lambda_version}/getLambda.zip&quot;

  # &quot;main&quot; is the filename within the zip file (index.js) and &quot;handler&quot;
  # is the name of the property under which the handler function was
  # exported in that file.
  handler = &quot;index.handler&quot;
  runtime = &quot;nodejs8.10&quot;
  memory_size = 128

  role = &quot;${aws_iam_role.lambda-iam-role.arn}&quot;
}

resource &quot;aws_lambda_permission&quot; &quot;api-gateway-invoke-get-lambda&quot; {
  statement_id  = &quot;AllowAPIGatewayInvoke&quot;
  action        = &quot;lambda:InvokeFunction&quot;
  function_name = &quot;${aws_lambda_function.get-tips-lambda.arn}&quot;
  principal     = &quot;apigateway.amazonaws.com&quot;

  # The /*/* portion grants access from any method on any resource
  # within the specified API Gateway.
  source_arn = &quot;${aws_api_gateway_deployment.codingtips-api-gateway-deployment.execution_arn}/*/*&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Notice that we tell Terraform the S3 Bucket and directory to look for the code&lt;/li&gt;
  &lt;li&gt;We specify the runtime and memory for this Lambda Function&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.handler&lt;/code&gt; points to the file and function where to enter the code&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_lambda_permission&lt;/code&gt; resource is the permission that states that this Lambda Function may be invoked by the API Gateway that we created&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/icon-apigateway.png&quot; width=&quot;15%&quot; height=&quot;15%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I kept the most difficult one for last.
On the other hand, it is also the most interesting.
I hand Terraform a &lt;em&gt;Swagger&lt;/em&gt; definition of my API.
You can also do this without Swagger, but then you will have to specify a lot more resources.&lt;/p&gt;

&lt;p&gt;The Swagger API definition looks as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swagger: '2.0'
info:
  version: '1.0'
  title: &quot;CodingTips&quot;
schemes:
  - https
paths:
  &quot;/api&quot;:
    get:
      description: &quot;Get coding tips&quot;
      produces:
        - application/json
      responses:
        200:
          description: &quot;The codingtips request successful.&quot;
          schema:
            type: array
            items:
              $ref: &quot;#/definitions/CodingTip&quot;
      x-amazon-apigateway-integration:
        uri: ${get_lambda_arn}
        passthroughBehavior: &quot;when_no_match&quot;
        httpMethod: &quot;POST&quot;
        type: &quot;aws_proxy&quot;
    post:
      description: &quot;post a coding tip&quot;
      consumes:
        - application/json
      responses:
        200:
          description: &quot;The codingtip was added successfully&quot;
      x-amazon-apigateway-integration:
        uri: ${post_lambda_arn}
        passthroughBehavior: &quot;when_no_match&quot;
        httpMethod: &quot;POST&quot;
        type: &quot;aws_proxy&quot;

definitions:
  CodingTip:
    type: object
    description: &quot;A coding tip&quot;
    properties:
      tip:
        type: string
        description: &quot;The coding tip&quot;
      date:
        type: number
        description: &quot;date in millis when tip was entered&quot;
      author:
        type: string
        description: &quot;Author of the coding tip&quot;
      category:
        type: string
        description: &quot;category of the coding tip&quot;
    required:
      - tip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do not know Swagger yet, copy the above and paste it in the online (&lt;a href=&quot;https://editor.swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Swagger Editor&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This will grant you a nice visual overview of the API definition.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/swagger.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;There is only one AWS specific thing in the Swagger specification above and that is &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amazon-apigateway-integration&lt;/code&gt;.
This is specifying the details of how the API is integrating with the backend.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remark that this is always a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; even if the HTTP method of the resource path is a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aws_proxy&lt;/code&gt; means that the request is passed to the Lambda Function without manipulation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;when_no_match&lt;/code&gt; passes the request body to the backend without tranforming it when no &lt;code class=&quot;highlighter-rouge&quot;&gt;requestTemplate&lt;/code&gt; is specified for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; is referencing a variable eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;${get_lambda_arn}&lt;/code&gt; that Terraform passes to the Swagger definition.
We’ll see this in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I already mentioned, using Swagger to define your API Gateway has some advantages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It keeps your Terraform more concise&lt;/li&gt;
  &lt;li&gt;You can use this Swagger to get a nice representation of your API&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-hcl-terraform&quot;&gt;resource &quot;aws_api_gateway_rest_api&quot; &quot;codingtips-api-gateway&quot; {
  name        = &quot;CodingTipsAPI&quot;
  description = &quot;API to access codingtips application&quot;
  body        = &quot;${data.template_file.codingtips_api_swagger.rendered}&quot;
}

data &quot;template_file&quot; codingtips_api_swagger{
  template = &quot;${file(&quot;swagger.yaml&quot;)}&quot;

  vars {
    get_lambda_arn = &quot;${aws_lambda_function.get-tips-lambda.invoke_arn}&quot;
    post_lambda_arn = &quot;${aws_lambda_function.post-tips-lambda.invoke_arn}&quot;
  }
}

resource &quot;aws_api_gateway_deployment&quot; &quot;codingtips-api-gateway-deployment&quot; {
  rest_api_id = &quot;${aws_api_gateway_rest_api.codingtips-api-gateway.id}&quot;
  stage_name  = &quot;default&quot;
}

output &quot;url&quot; {
  value = &quot;${aws_api_gateway_deployment.codingtips-api-gateway-deployment.invoke_url}/api&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;We start by mentioning the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_api_gateway_rest_api&lt;/code&gt; resource.
It does what is says and provides an API Gateway REST API.
    &lt;ul&gt;
      &lt;li&gt;body references the Swagger file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;template_file&lt;/code&gt; datasource allows Terraform to use information that is not defined in Terraform (Swagger in our case)
    &lt;ul&gt;
      &lt;li&gt;Variables are passed to this &lt;code class=&quot;highlighter-rouge&quot;&gt;template_file&lt;/code&gt; to fill the file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For a given &lt;code class=&quot;highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; to be usable, it has to be deployed
    &lt;ul&gt;
      &lt;li&gt;This is done by the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_api_gateway_deployment&lt;/code&gt; resource&lt;/li&gt;
      &lt;li&gt;It references the REST API&lt;/li&gt;
      &lt;li&gt;It needs a stage which is like a ‘version’ or ‘snapshot’ of your API
The stage name will be in the URL to invoke this API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At last the URL on which the API can be invoked is outputted to the terminal
&lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt; is appended to have the correct resource path&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;endgame&quot;&gt;Endgame&lt;/h1&gt;
&lt;p&gt;All right, let’s see it now.
Does this actually work?
Here I am running &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; within the repository linked to this blog.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/apply.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Nice, it worked.
And I only told Terraform about the infrastructure I wanted.
The whole setup process goes automatically!
You can now use the outputted URL to GET and POST coding tips.
The body of the POST should look like:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Short sessions with frequent brakes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Empowerment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you need to couple the API endpoints to a frontend of your own design, you need to set the CORS headers correctly.
If you want this challenge, there is another branch in the repository (&lt;code class=&quot;highlighter-rouge&quot;&gt;cors-enabled&lt;/code&gt;) where I worked this out.&lt;/p&gt;

&lt;p&gt;Happy coding folks, Code that Infrastructure!&lt;/p&gt;

&lt;h1 id=&quot;resources-and-further-reading&quot;&gt;Resources and further reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Terraform website: &lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Terraform.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Terraform-Lambda-APIGateway: &lt;a href=&quot;https://learn.hashicorp.com/terraform/aws/lambda-api-gateway&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;learn.hashicorp.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Swagger editor: &lt;a href=&quot;https://editor.swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;editor.swagger.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Swagger official website: &lt;a href=&quot;https://swagger.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;swagger.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Van Hoof&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-van-hoof&quot;, &quot;avatar&quot;=&gt;&quot;nick-van-hoof.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;linkedin&quot;=&gt;&quot;nick-van-hoof-45337914b&quot;, &quot;email&quot;=&gt;&quot;nick.vanhoof@ordina.be&quot;, &quot;github&quot;=&gt;&quot;Nxtra&quot;, &quot;bio&quot;=&gt;&quot;Nick is a Java &amp; JavaScript developer with a lot of hunger for knowledge. He is continuously looking for ways to improve. He wants to build his expertise by contributing to valuable projects. Serverless, microservices and IoT fascinate him the most.&quot;}</name><email>nick.vanhoof@ordina.be</email></author><category term="Cloud" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="API GateWay" /><category term="Serverless" /><category term="IaC" /><summary type="html">Table of content Infrastructure as Code Introduction and demo Creating the application Prerequisites Terraform: the basics General Database: DynamoDB IAM Lambda Functions API Gateway Endgame Resources and further reading</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-01-14-Infrastructure-as-code-with-terraform-and-aws-serverless/featured-image.png" /></entry><entry><title type="html">Flutter: Hybrid apps for mobile &amp;amp; beyond.</title><link href="https://ordina-jworks.github.io/development/2019/01/10/Flutter.html" rel="alternate" type="text/html" title="Flutter: Hybrid apps for mobile &amp; beyond." /><published>2019-01-10T00:00:00+00:00</published><updated>2019-01-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/development/2019/01/10/Flutter</id><content type="html" xml:base="https://ordina-jworks.github.io/development/2019/01/10/Flutter.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Mobile development has always intrigued me.
Bringing data to life by visualizing it with different components and being able to carry your app along inside your pocket is something special.
I still remember the excitement I felt when working on my first mobile app in university,
even with the lack of good resources back then and the sluggish emulator which was available at that time.&lt;/p&gt;

&lt;p&gt;The mobile world has kept expanding with big improvements in resources, frameworks, tools and designs.
From the first iPhone to having your refrigerator running your favorite apps, more and more possibilities and challenges have become available to keep you going.
Nowadays, there are different paths that you can follow to create those apps.
Native, hybrid or web apps, it all depends on what you want to achieve and how many resources are available.
Each has its benefits and pitfalls, which doesn’t make the decision any easier.
Do you want to give your audience the best native experience with great performance?
Or does a hybrid app suffices where you might compromise in speed and in look &amp;amp; feel of a native app?
Flutter might be the answer, by providing you the best parts of both worlds.&lt;/p&gt;

&lt;h2 id=&quot;beautiful-native-apps-in-record-time&quot;&gt;Beautiful native apps in record time&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flutter allows you to build beautiful native apps on iOS and Android from a single codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Flutter&quot; src=&quot;/img/2019-01-10-Flutter/flutter_logo.jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A promising statement which is presented to you when you browse to &lt;a href=&quot;https://flutter.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flutter.io&lt;/a&gt;.
A statement that explains perfectly what Flutter is in fact.
Flutter is an open source mobile UI framework made by Google.
With Flutter, you can build beautiful apps that run at native speed.
Given the single codebase, you don’t have to develop the same app twice for both iOS and Android.
Flutter is even the first-class citizen for Fuchsia, an upcoming mobile OS that is currently being developed by Google.
Flutter apps follow platform conventions and interface details, so the scrolling, fonts, navigations, etc. will look natively respecting the specific platform.
All of this results in beautiful apps that require less time and resources to develop and this without compromising on quality, features, performance or design.&lt;/p&gt;

&lt;h3 style=&quot;clear: left;&quot;&gt;Performance at its core&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;Flutter&quot; src=&quot;/img/2019-01-10-Flutter/flutter-gallery.gif&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;How did the Flutter team achieve all of this?
Why aren’t there any downgrades in performance while being a hybrid app?
The reason for this is that Flutter is built with performance in mind from the beginning.
In fact, being performant was the main reason why the Flutter team started with the framework.
Being hybrid was more of a side-effect because of the way the implementation is set up.&lt;/p&gt;

&lt;p&gt;Because Flutter is so performant, you are guaranteed that Flutter apps will run at 60 FPS and more.
This leads to smooth animations and an instant responsive app which results in a great user experience.
Your app will also render perfectly on older devices, while even some native apps may have trouble to keep running at a constant refresh rate.&lt;/p&gt;

&lt;p&gt;To achieve this performance, Flutter does something different than other hybrid solutions.
The framework avoids having a JavaScript bridge between the app and the platform by using a language that compiles to native code.
This bridge is typically the bottleneck when it comes to performance in hybrid solutions.
The lack of the JavaScript bridge allows Flutter to communicate directly with the platform.
Which language are we talking about?
Well, all of this is made possible with Dart.&lt;/p&gt;

&lt;h2 id=&quot;dart-you-say&quot;&gt;‘Dart’ you say?&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Dart&quot; src=&quot;/img/2019-01-10-Flutter/dart.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dart&lt;/a&gt; is a programming language that was also developed by Google.
Its purpose is to build web, server and mobile apps.
You can develop your app with Dart, which will either be compiled to JavaScript or into native code.&lt;/p&gt;

&lt;p&gt;The Flutter team considered different languages, but many of them had drawbacks in one of the four dimensions for evaluation that they used.
Since Google had its own language ready to be used, the team also took a look at Dart.
Dart scored high on all the requirements and criteria that the team had predefined, which is why the decision was obvious.&lt;/p&gt;

&lt;p&gt;There are some huge benefits when using Dart compared to other languages.
One of them is the Dart runtime and compiler.
This enables Dart code to be compiled both AOT (Ahead Of Time) and JIT (Just In Time).
With AOT, Dart is compiled to native code which ensures that the execution is fast, high-performing and predictable.
Your app will start up faster and it will feel smoother while running it.&lt;/p&gt;

&lt;p&gt;JIT enables stateful hot-reloading, which gives developers an extremely fast development cycle.
Once you hit Save in your editor, the code changes are applied to your running app within a second without losing state.
This gives productivity an enormous boost and helps you to reach your goals faster than before.
No more refilling the same form to test some validation or navigating to a specific screen for you.
It is really impressive to see hot reload in action, especially when you’re used to the development cycle within native mobile development.
To me, it kind of feels like magic.&lt;/p&gt;

&lt;p&gt;You might be asking yourself if it is worth learning a new language for a new framework.
From my experience, Dart is really easy to adopt, especially if you’re used to Java or JavaScript/TypeScript.
Dart feels natural to use and is a powerful language.
Most of the time when I’m playing around with Flutter I even don’t realize that I’m writing in another language.
In fact, it just &lt;del&gt;works&lt;/del&gt; writes.&lt;/p&gt;

&lt;h2 id=&quot;everything-is-a-widget&quot;&gt;Everything is a widget&lt;/h2&gt;

&lt;p&gt;The native performance of Flutter apps is great, but how can you use Flutter to build your app?
The answer is widgets.
They are the building blocks that Flutter uses to build up your interface.
Widgets are responsible for the native look and feel that you want to create, so they are really important.
With widgets you’ll be able to create beautiful apps, exactly how your design team imagined them to be.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img alt=&quot;Widgets everywhere&quot; src=&quot;/img/2019-01-10-Flutter/meditation.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In Flutter, everything is a widget!
Ranging from a button, an image, to the app itself.
Even the padding, positioning or navigation are all defined by the use of widgets.
You combine widgets to build up the interface to your liking.
Flutter will generate a widget tree out of it and uses that tree to render the layout on the screen of the device.&lt;/p&gt;

&lt;p&gt;Flutter uses its own set of widgets, which assures you have a pixel perfect layout on every device.
You’re not dependent, nor limited by the widgets provided by the platform.
The only thing that Flutter needs is a canvas to draw on.
You can compare Flutter with a game engine, or in this case rather an app engine.
By providing its own set of widgets, you can customize all of them to your liking.
This enables you to include your company branding through your app, ranging from colors to the shape of buttons.&lt;/p&gt;

&lt;p&gt;All the widgets are written in Dart.
Because Flutter is an open source project, you can use the source code as a reference while applying the widgets.
With Flutter you don’t have to worry anymore about support libraries to render your apps on old devices or about OEMs that decide to alter the platform widgets because they can.
You can even enjoy the beauty of Material Design on devices that were released years before Material Design was introduced.
Your app will also be future proof, as new design implementations of platform widgets won’t affect or break the layout of your app.
&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;JWorks widget&quot; src=&quot;/img/2019-01-10-Flutter/jworks_widget.png&quot; /&gt;&lt;/span&gt;
If there are any breaking changes with future OS versions, then it’s a bug for Flutter to resolve instead for you.
Flutter even added notch-support for the iPhone X before the phone was released.&lt;/p&gt;

&lt;p&gt;Here you can find a quick example how you can build up your layout by combining different widgets together.
The JWorks widget is rendered inside a default Material app template on the iPhone XS.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JWorksWidget&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I'm a widget&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I'm a widget too&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;elevation:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Yep, another widget&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EdgeInsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We're all widgets!&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;'https://ordina-jworks.github.io/img/jworks/jworks-400x400.png'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-hybrid-framework-to-rule-them-all&quot;&gt;One hybrid framework to rule them all&lt;/h2&gt;

&lt;p&gt;On the 4th of December 2018 the first &lt;a href=&quot;https://developers.google.com/events/flutter-live/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Flutter Live&lt;/a&gt; event was hosted.
A lot of exciting announcements were made, which definitely shows that the Flutter team is determined to keep improving.
&lt;a href=&quot;https://developers.googleblog.com/2018/12/flutter-10-googles-portable-ui-toolkit.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The first stable version was released&lt;/a&gt; almost two years after the first Alpha version was released.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Hummingbird&quot; src=&quot;/img/2019-01-10-Flutter/hummingbird.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another huge announcement was revealed about the future plans of Flutter.
The first step is &lt;a href=&quot;https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hummingbird&lt;/a&gt;, or Flutter for the web.
Since Dart can also compile to JavaScript, this was a logical step to take.
Being able to run on the web, you can also create a Progressive Web App with Flutter, so your mobile app which runs in the browsers becomes a web app.
Appception right there.&lt;/p&gt;

&lt;p&gt;Google is also working to bring Flutter to desktop with Flutter Desktop Embedding.
To prove this concept, the presentation of Flutter Live was running in a Flutter app on a laptop.
This means that Flutter won’t be a mobile SDK solely, but it might become the way to go SDK for hybrid apps across mobile, web and desktop.
Maybe later on, any device that can render pixels will be able to run Flutter apps.&lt;/p&gt;

&lt;p&gt;Furthermore, the Flutter team is working to provide integration between Flutter and your existing native apps.
Not everyone can start from scratch, so having a way to gradually move your app to Flutter is a very welcome addition if you’re planning to do so.
This project, which contains all the APIs and tooling, is named Add2App and is currently in a preview state.
With Add2App, you can launch a view containing your new Flutter app from your existing native app.&lt;/p&gt;

&lt;p&gt;You can also work in the opposite way with the introduction of Platform Views.
These views allow you to add native content inside your Flutter apps.
Platform Views unlocks Flutter to render Google Maps and WebViews inside the Flutter app.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Flutter keeps getting better and the community keeps on growing.
More and more &lt;a href=&quot;https://flutter.io/showcase&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;companies&lt;/a&gt; start to embrace Flutter
and &lt;a href=&quot;https://itsallwidgets.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;developers&lt;/a&gt; are excited and positive when using Flutter in their apps.
It surely looks promising that Flutter can become a big player in the mobile world.&lt;/p&gt;

&lt;p&gt;While I was getting in touch with Flutter and digging through the documentation and examples,
I got more and more fascinated about all the possibilities that you can achieve with this new mobile SDK.
The Flutter journey reminded me back of the feeling I had when I was working on my first mobile app,
discovering a new mobile world full of possibilities, this time built out of widgets.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dimitri&quot;, &quot;last_name&quot;=&gt;&quot;De Kerf&quot;, &quot;permalink&quot;=&gt;&quot;/author/dimitri-de-kerf&quot;, &quot;avatar&quot;=&gt;&quot;dimitri-de-kerf.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;dimitri.de.kerf@ordina.be&quot;, &quot;github&quot;=&gt;&quot;DimiDeKerf&quot;, &quot;bio&quot;=&gt;&quot;Dimitri is a Frontend and Mobile developer at Ordina Belgium. He enjoys writing user friendly apps in a clean, maintainable way. Dimitri loves new technologies and is eager to try them out.&quot;}</name><email>dimitri.de.kerf@ordina.be</email></author><category term="Development" /><category term="Android" /><category term="Flutter" /><category term="Hybrid" /><category term="iOS" /><category term="Mobile" /><summary type="html">Intro</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2019-01-10-Flutter/Flutter.jpg" /></entry></feed>